<?xml version="1.0" encoding="UTF-8"?>
<mutation operator-id="UOI" parent="../../../smf.run.xml" name="main" config-file="mutations.xml" time="1234239">
  <class-to-mutate />
  <mutants>
    <mutant id="mutant_569" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getSnake(int,int)" from="(k &lt; (beginK)) || (k &gt; (endK))" to="!((k &lt; (beginK)) || (k &gt; (endK)))" />
    <mutant id="mutant_565" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK)) / 2" to="(((d + k) - (middleK)) / 2) + 1" />
    <mutant id="mutant_566" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK)) / 2" to="(((d + k) - (middleK)) / 2) * -1" />
    <mutant id="mutant_5680" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(bs + 1)" to="((bs + 1) - 1)" />
    <mutant id="mutant_567" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK)) / 2" to="(((d + k) - (middleK)) / 2) - 1" />
    <mutant id="mutant_5681" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(bs + 1)" to="((bs + 1) * -1)" />
    <mutant id="mutant_568" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getX(int,int)" from="(k &lt; (beginK)) || (k &gt; (endK))" to="!((k &lt; (beginK)) || (k &gt; (endK)))" />
    <mutant id="mutant_5682" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(bs + 1)" to="((bs + 1) + 1)" />
    <mutant id="mutant_3020" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator$1.ensureId()" from="((levelTwo) - (Constants.OBJECT_ID_LENGTH))" to="(((levelTwo) - (Constants.OBJECT_ID_LENGTH)) - 1)" />
    <mutant id="mutant_4351" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit()))" to="((threads * (config.getDeltaSearchMemoryLimit())) + 1)" />
    <mutant id="mutant_4350" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) + 8" to="(((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) + 8) * -1" />
    <mutant id="mutant_3017" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="((length) - 20)" to="(((length) - 20) - 1)" />
    <mutant id="mutant_4348" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) + 8" to="(((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) + 8) - 1" />
    <mutant id="mutant_3016" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="((length) - 20)" to="(((length) - 20) + 1)" />
    <mutant id="mutant_4347" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40)" to="(((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) + 1)" />
    <mutant id="mutant_3015" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="(vers != 2) &amp;&amp; (vers != 3)" to="!((vers != 2) &amp;&amp; (vers != 3))" />
    <mutant id="mutant_4346" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40)" to="(((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) * -1)" />
    <mutant id="mutant_3014" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.endCopyAsIs()" from="((--(activeCopyRawData)) == 0) &amp;&amp; ((activeWindows) == 0)" to="!(((--(activeCopyRawData)) == 0) &amp;&amp; ((activeWindows) == 0))" />
    <mutant id="mutant_4345" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40)" to="(((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) - 1)" />
    <mutant id="mutant_3013" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="validate &amp;&amp; ((crc2.getValue()) != expectedCRC)" to="!(validate &amp;&amp; ((crc2.getValue()) != expectedCRC))" />
    <mutant id="mutant_4344" viable="false" in="?" from="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8)" to="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) - 1)" />
    <mutant id="mutant_3012" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(!(inf.finished())) || ((inf.getBytesRead()) != dataLength)" to="!((!(inf.finished())) || ((inf.getBytesRead()) != dataLength))" />
    <mutant id="mutant_4343" viable="false" in="?" from="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8)" to="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 1)" />
    <mutant id="mutant_3011" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="validate &amp;&amp; (idx().hasCRC32Support())" to="!(validate &amp;&amp; (idx().hasCRC32Support()))" />
    <mutant id="mutant_4342" viable="false" in="?" from="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8)" to="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) * -1)" />
    <mutant id="mutant_3010" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(src.offset) + headerCnt" to="((src.offset) + headerCnt) - 1" />
    <mutant id="mutant_4341" viable="false" in="?" from="((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8))" to="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 1)" />
    <mutant id="mutant_561" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="((d + k) * -1)" />
    <mutant id="mutant_5672" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(last != null) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(r, last)))" to="!((last != null) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(r, last))))" />
    <mutant id="mutant_562" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="(((d + k) - (middleK)) * -1)" />
    <mutant id="mutant_5673" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModifiedSubtree_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(dcIt == null) || (treeIt == null)" to="!((dcIt == null) || (treeIt == null))" />
    <mutant id="mutant_563" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="(((d + k) - (middleK)) + 1)" />
    <mutant id="mutant_5674" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModifiedSubtree_IndexWorkingtree(java.lang.String)" from="(dcIt == null) || (wtIt == null)" to="!((dcIt == null) || (wtIt == null))" />
    <mutant id="mutant_564" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="(((d + k) - (middleK)) - 1)" />
    <mutant id="mutant_5675" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModified_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId)" from="((iId == null) || (ObjectId.zeroId().equals(iId)))" to="(!((iId == null) || (ObjectId.zeroId().equals(iId))))" />
    <mutant id="mutant_5676" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModified_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId)" from="(FileMode.TREE.equals(iMode)) &amp;&amp; ((iId == null) || (ObjectId.zeroId().equals(iId)))" to="!((FileMode.TREE.equals(iMode)) &amp;&amp; ((iId == null) || (ObjectId.zeroId().equals(iId))))" />
    <mutant id="mutant_5677" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(as + 1)" to="((as + 1) * -1)" />
    <mutant id="mutant_3019" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator$1.ensureId()" from="((levelTwo) - (Constants.OBJECT_ID_LENGTH))" to="(((levelTwo) - (Constants.OBJECT_ID_LENGTH)) + 1)" />
    <mutant id="mutant_5678" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(as + 1)" to="((as + 1) - 1)" />
    <mutant id="mutant_560" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="((d + k) - 1)" />
    <mutant id="mutant_3018" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="((length) - 20)" to="(((length) - 20) * -1)" />
    <mutant id="mutant_4349" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) + 8" to="(((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) + 8) + 1" />
    <mutant id="mutant_5679" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(as + 1)" to="((as + 1) + 1)" />
    <mutant id="mutant_576" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="((d - 1) - 1)" />
    <mutant id="mutant_577" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((d - 1) + k)" to="(((d - 1) + k) - 1)" />
    <mutant id="mutant_578" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((d - 1) + k)" to="(((d - 1) + k) * -1)" />
    <mutant id="mutant_5670" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(removed.size()) - 1" to="((removed.size()) - 1) * -1" />
    <mutant id="mutant_579" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((d - 1) + k)" to="(((d - 1) + k) + 1)" />
    <mutant id="mutant_5671" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(!(file.delete())) &amp;&amp; (repo.getFS().exists(file))" to="!((!(file.delete())) &amp;&amp; (repo.getFS().exists(file)))" />
    <mutant id="mutant_4340" viable="false" in="?" from="((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8))" to="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) * -1)" />
    <mutant id="mutant_3006" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((src.offset) + headerCnt)" to="(((src.offset) + headerCnt) * -1)" />
    <mutant id="mutant_4337" viable="false" in="?" from="(8 + 8)" to="((8 + 8) * -1)" />
    <mutant id="mutant_5669" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(removed.size()) - 1" to="((removed.size()) - 1) - 1" />
    <mutant id="mutant_3005" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((src.offset) + headerCnt)" to="(((src.offset) + headerCnt) + 1)" />
    <mutant id="mutant_4336" viable="false" in="?" from="(8 + 8)" to="((8 + 8) - 1)" />
    <mutant id="mutant_3004" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.beginCopyAsIs(org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((++(activeCopyRawData)) == 1) &amp;&amp; ((activeWindows) == 0)" to="!(((++(activeCopyRawData)) == 1) &amp;&amp; ((activeWindows) == 0))" />
    <mutant id="mutant_4335" viable="false" in="?" from="(((2 * 8) + (2 * 8)) + (2 * 8))" to="((((2 * 8) + (2 * 8)) + (2 * 8)) + 1)" />
    <mutant id="mutant_3003" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + (delta.hdrLen))" to="((pos + (delta.hdrLen)) + 1)" />
    <mutant id="mutant_4334" viable="false" in="?" from="(((2 * 8) + (2 * 8)) + (2 * 8))" to="((((2 * 8) + (2 * 8)) + (2 * 8)) - 1)" />
    <mutant id="mutant_3002" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + (delta.hdrLen))" to="((pos + (delta.hdrLen)) * -1)" />
    <mutant id="mutant_4333" viable="false" in="?" from="(((2 * 8) + (2 * 8)) + (2 * 8))" to="((((2 * 8) + (2 * 8)) + (2 * 8)) * -1)" />
    <mutant id="mutant_3001" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + (delta.hdrLen))" to="((pos + (delta.hdrLen)) - 1)" />
    <mutant id="mutant_4332" viable="false" in="?" from="(2 * 8)" to="((2 * 8) * -1)" />
    <mutant id="mutant_3000" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(p + 20)" to="((p + 20) + 1)" />
    <mutant id="mutant_4331" viable="false" in="?" from="(2 * 8)" to="((2 * 8) - 1)" />
    <mutant id="mutant_4330" viable="false" in="?" from="(2 * 8)" to="((2 * 8) + 1)" />
    <mutant id="mutant_572" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.newSnake(int,int)" from="k + x" to="(k + x) + 1" />
    <mutant id="mutant_5661" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) - 1)" to="(((entryCnt) - 1) * -1)" />
    <mutant id="mutant_6992" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((u.toString()) + &quot;: &quot;)" to="(((u.toString()) + &quot;: &quot;) + 1)" />
    <mutant id="mutant_573" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(k &lt; (backward.beginK)) || (k &gt; (backward.endK))" to="!((k &lt; (backward.beginK)) || (k &gt; (backward.endK)))" />
    <mutant id="mutant_5662" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(peStage == 0) || (dceStage == 0)" to="!((peStage == 0) || (dceStage == 0))" />
    <mutant id="mutant_6993" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((u.toString()) + &quot;: &quot;)" to="(((u.toString()) + &quot;: &quot;) - 1)" />
    <mutant id="mutant_574" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="((d - 1) * -1)" />
    <mutant id="mutant_5663" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(entryIdx - 1)" to="((entryIdx - 1) + 1)" />
    <mutant id="mutant_6994" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((u.toString()) + &quot;: &quot;)" to="(((u.toString()) + &quot;: &quot;) * -1)" />
    <mutant id="mutant_575" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="((d - 1) + 1)" />
    <mutant id="mutant_5664" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(entryIdx - 1)" to="((entryIdx - 1) - 1)" />
    <mutant id="mutant_6995" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c)))" to="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) * -1)" />
    <mutant id="mutant_5665" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(entryIdx - 1)" to="((entryIdx - 1) * -1)" />
    <mutant id="mutant_6996" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c)))" to="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) - 1)" />
    <mutant id="mutant_3009" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(src.offset) + headerCnt" to="((src.offset) + headerCnt) * -1" />
    <mutant id="mutant_5666" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(peStage == 0) || (ceStage == 0)" to="!((peStage == 0) || (ceStage == 0))" />
    <mutant id="mutant_6997" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c)))" to="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + 1)" />
    <mutant id="mutant_570" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.newSnake(int,int)" from="k + x" to="(k + x) - 1" />
    <mutant id="mutant_3008" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(src.offset) + headerCnt" to="((src.offset) + headerCnt) + 1" />
    <mutant id="mutant_4339" viable="false" in="?" from="((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8))" to="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) - 1)" />
    <mutant id="mutant_5667" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dc == null) || ((dc.getEntryCount()) == 0)" to="!((dc == null) || ((dc.getEntryCount()) == 0))" />
    <mutant id="mutant_6998" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;)" to="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) + 1)" />
    <mutant id="mutant_571" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.newSnake(int,int)" from="k + x" to="(k + x) * -1" />
    <mutant id="mutant_3007" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((src.offset) + headerCnt)" to="(((src.offset) + headerCnt) - 1)" />
    <mutant id="mutant_4338" viable="false" in="?" from="(8 + 8)" to="((8 + 8) + 1)" />
    <mutant id="mutant_5668" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(removed.size()) - 1" to="((removed.size()) - 1) + 1" />
    <mutant id="mutant_6999" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;)" to="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) - 1)" />
    <mutant id="mutant_587" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="((d - 1) + 1)" />
    <mutant id="mutant_588" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="((d - 1) - 1)" />
    <mutant id="mutant_589" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="((d - 1) * -1)" />
    <mutant id="mutant_6990" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(name + &quot;^{}&quot;)" to="((name + &quot;^{}&quot;) - 1)" />
    <mutant id="mutant_5660" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) - 1)" to="(((entryCnt) - 1) + 1)" />
    <mutant id="mutant_6991" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(name + &quot;^{}&quot;)" to="((name + &quot;^{}&quot;) + 1)" />
    <mutant id="mutant_4326" viable="false" in="?" from="(2 * 8)" to="((2 * 8) * -1)" />
    <mutant id="mutant_5658" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(sorted) &amp;&amp; ((entryCnt) &gt; 0)" to="!((sorted) &amp;&amp; ((entryCnt) &gt; 0))" />
    <mutant id="mutant_6989" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(name + &quot;^{}&quot;)" to="((name + &quot;^{}&quot;) * -1)" />
    <mutant id="mutant_4325" viable="false" in="?" from="(2 * 8)" to="((2 * 8) - 1)" />
    <mutant id="mutant_5659" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) - 1)" to="(((entryCnt) - 1) - 1)" />
    <mutant id="mutant_4324" viable="false" in="?" from="(2 * 8)" to="((2 * 8) + 1)" />
    <mutant id="mutant_4323" viable="false" in="?" from="(2 * 8)" to="((2 * 8) * -1)" />
    <mutant id="mutant_4322" viable="false" in="?" from="(2 * 8)" to="((2 * 8) - 1)" />
    <mutant id="mutant_4321" viable="false" in="?" from="(2 * 8)" to="((2 * 8) + 1)" />
    <mutant id="mutant_4320" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(n + 20)" to="((n + 20) + 1)" />
    <mutant id="mutant_583" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((((d - 1) + k) - (backward.middleK)) % 2)" to="(((((d - 1) + k) - (backward.middleK)) % 2) + 1)" />
    <mutant id="mutant_5650" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((msg + &quot;: &quot;) + (a.getStage()))" to="(((msg + &quot;: &quot;) + (a.getStage())) * -1)" />
    <mutant id="mutant_6981" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.getPackNames()" from="(s == null) || ((s.length()) == 0)" to="!((s == null) || ((s.length()) == 0))" />
    <mutant id="mutant_584" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((((d - 1) + k) - (backward.middleK)) % 2)" to="(((((d - 1) + k) - (backward.middleK)) % 2) * -1)" />
    <mutant id="mutant_5651" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((msg + &quot;: &quot;) + (a.getStage()))" to="(((msg + &quot;: &quot;) + (a.getStage())) - 1)" />
    <mutant id="mutant_6982" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.getPackNames()" from="(!(s.startsWith(&quot;P pack-&quot;))) || (!(s.endsWith(&quot;.pack&quot;)))" to="!((!(s.startsWith(&quot;P pack-&quot;))) || (!(s.endsWith(&quot;.pack&quot;))))" />
    <mutant id="mutant_585" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((((d - 1) + k) - (backward.middleK)) % 2)" to="(((((d - 1) + k) - (backward.middleK)) % 2) - 1)" />
    <mutant id="mutant_5652" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;)" to="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) + 1)" />
    <mutant id="mutant_6983" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(tab + 1)" to="((tab + 1) - 1)" />
    <mutant id="mutant_586" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="((d - 1) * -1)" />
    <mutant id="mutant_5653" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;)" to="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) * -1)" />
    <mutant id="mutant_6984" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(tab + 1)" to="((tab + 1) + 1)" />
    <mutant id="mutant_5654" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;)" to="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) - 1)" />
    <mutant id="mutant_6985" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(tab + 1)" to="((tab + 1) * -1)" />
    <mutant id="mutant_580" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(((d - 1) + k) - (backward.middleK))" to="((((d - 1) + k) - (backward.middleK)) - 1)" />
    <mutant id="mutant_4329" viable="false" in="?" from="((2 * 8) + (2 * 8))" to="(((2 * 8) + (2 * 8)) + 1)" />
    <mutant id="mutant_5655" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) + (a.getPathString()))" to="(((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) + (a.getPathString())) * -1)" />
    <mutant id="mutant_6986" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="((name.length()) - 3)" to="(((name.length()) - 3) * -1)" />
    <mutant id="mutant_581" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(((d - 1) + k) - (backward.middleK))" to="((((d - 1) + k) - (backward.middleK)) + 1)" />
    <mutant id="mutant_4328" viable="false" in="?" from="((2 * 8) + (2 * 8))" to="(((2 * 8) + (2 * 8)) - 1)" />
    <mutant id="mutant_5656" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) + (a.getPathString()))" to="(((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) + (a.getPathString())) - 1)" />
    <mutant id="mutant_6987" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="((name.length()) - 3)" to="(((name.length()) - 3) - 1)" />
    <mutant id="mutant_582" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(((d - 1) + k) - (backward.middleK))" to="((((d - 1) + k) - (backward.middleK)) * -1)" />
    <mutant id="mutant_4327" viable="false" in="?" from="((2 * 8) + (2 * 8))" to="(((2 * 8) + (2 * 8)) * -1)" />
    <mutant id="mutant_5657" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) + (a.getPathString()))" to="(((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) + (a.getPathString())) + 1)" />
    <mutant id="mutant_6988" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="((name.length()) - 3)" to="(((name.length()) - 3) + 1)" />
    <mutant id="mutant_598" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(x &lt; (endA)) &amp;&amp; ((k + x) &lt; (endB))" to="!((x &lt; (endA)) &amp;&amp; ((k + x) &lt; (endB)))" />
    <mutant id="mutant_599" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="((k + x) - 1)" />
    <mutant id="mutant_6980" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="((1 * 1024) * 1024)" to="(((1 * 1024) * 1024) * -1)" />
    <mutant id="mutant_4315" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="((count) - (b.getOffset()))" to="(((count) - (b.getOffset())) + 1)" />
    <mutant id="mutant_5647" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(msg + &quot;: &quot;)" to="((msg + &quot;: &quot;) * -1)" />
    <mutant id="mutant_6978" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="((1 * 1024) * 1024)" to="(((1 * 1024) * 1024) + 1)" />
    <mutant id="mutant_4314" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(b != null) &amp;&amp; ((b.isWritten()) &amp; (ofsDelta))" to="!((b != null) &amp;&amp; ((b.isWritten()) &amp; (ofsDelta)))" />
    <mutant id="mutant_5648" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(msg + &quot;: &quot;)" to="((msg + &quot;: &quot;) - 1)" />
    <mutant id="mutant_6979" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="((1 * 1024) * 1024)" to="(((1 * 1024) * 1024) - 1)" />
    <mutant id="mutant_4313" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[],int,int)" from="(count) + (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)" to="((count) + (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)) * -1" />
    <mutant id="mutant_5649" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((msg + &quot;: &quot;) + (a.getStage()))" to="(((msg + &quot;: &quot;) + (a.getStage())) + 1)" />
    <mutant id="mutant_4312" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[],int,int)" from="(count) + (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)" to="((count) + (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)) - 1" />
    <mutant id="mutant_4311" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[],int,int)" from="(count) + (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)" to="((count) + (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)) + 1" />
    <mutant id="mutant_4310" viable="false" in="?" from="128 * 1024" to="(128 * 1024) + 1" />
    <mutant id="mutant_594" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.getRight(int)" from="x + 1" to="(x + 1) + 1" />
    <mutant id="mutant_6970" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0)) &amp;&amp; ((uri.getPath().length()) != 0)" to="!(((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0)) &amp;&amp; ((uri.getPath().length()) != 0))" />
    <mutant id="mutant_595" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="((k + x) - 1)" />
    <mutant id="mutant_5640" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="(((int)(((snapshot.lastModified()) % 1000))) * 1000000) + 1" />
    <mutant id="mutant_6971" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.commandFor(java.lang.String)" from="((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;))" to="!(((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;)))" />
    <mutant id="mutant_596" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="((k + x) * -1)" />
    <mutant id="mutant_5641" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="(((int)(((snapshot.lastModified()) % 1000))) * 1000000) - 1" />
    <mutant id="mutant_6972" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.cleanNotFound(org.eclipse.jgit.errors.NoRemoteRepositoryException,java.lang.String)" from="(why == null) || ((why.length()) == 0)" to="!((why == null) || ((why.length()) == 0))" />
    <mutant id="mutant_597" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="((k + x) + 1)" />
    <mutant id="mutant_5642" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((repository) != null) &amp;&amp; ((entryCnt) &gt; 0)" to="!(((repository) != null) &amp;&amp; ((entryCnt) &gt; 0))" />
    <mutant id="mutant_6973" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.cleanNotFound(org.eclipse.jgit.errors.NoRemoteRepositoryException,java.lang.String)" from="((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;))" to="!(((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;)))" />
    <mutant id="mutant_590" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="((d - 1) + 1)" />
    <mutant id="mutant_4319" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(n + 20)" to="((n + 20) - 1)" />
    <mutant id="mutant_5643" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuildIterator.stopWalk()" from="(cnt - cur)" to="((cnt - cur) + 1)" />
    <mutant id="mutant_6974" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.checkExecFailure(int,java.lang.String,java.lang.String)" from="(why != null) &amp;&amp; ((why.length()) &gt; 0)" to="!((why != null) &amp;&amp; ((why.length()) &gt; 0))" />
    <mutant id="mutant_591" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="((d - 1) - 1)" />
    <mutant id="mutant_4318" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(n + 20)" to="((n + 20) * -1)" />
    <mutant id="mutant_5644" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuildIterator.stopWalk()" from="(cnt - cur)" to="((cnt - cur) - 1)" />
    <mutant id="mutant_6975" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="(1 * 1024)" to="((1 * 1024) + 1)" />
    <mutant id="mutant_592" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.getRight(int)" from="x + 1" to="(x + 1) - 1" />
    <mutant id="mutant_4317" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="((count) - (b.getOffset()))" to="(((count) - (b.getOffset())) * -1)" />
    <mutant id="mutant_5645" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuildIterator.stopWalk()" from="(cnt - cur)" to="((cnt - cur) * -1)" />
    <mutant id="mutant_6976" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="(1 * 1024)" to="((1 * 1024) - 1)" />
    <mutant id="mutant_593" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.getRight(int)" from="x + 1" to="(x + 1) * -1" />
    <mutant id="mutant_4316" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="((count) - (b.getOffset()))" to="(((count) - (b.getOffset())) - 1)" />
    <mutant id="mutant_5646" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(msg + &quot;: &quot;)" to="((msg + &quot;: &quot;) + 1)" />
    <mutant id="mutant_6977" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="(1 * 1024)" to="((1 * 1024) * -1)" />
    <mutant id="mutant_3064" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="((int)((nthPosition - base))) * -1" />
    <mutant id="mutant_4395" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty())) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="!((((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty())) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0)))" />
    <mutant id="mutant_3063" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="((int)((nthPosition - base))) - 1" />
    <mutant id="mutant_4394" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="(!(((excludeInPacks) == null) || ((excludeInPacks.length) == 0)))" />
    <mutant id="mutant_3062" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="((int)((nthPosition - base))) + 1" />
    <mutant id="mutant_4393" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty()))" to="(!(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty())))" />
    <mutant id="mutant_3061" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="(levelOne - 1)" to="((levelOne - 1) - 1)" />
    <mutant id="mutant_4392" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack)))" to="(!((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))))" />
    <mutant id="mutant_3060" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="(levelOne - 1)" to="((levelOne - 1) + 1)" />
    <mutant id="mutant_4391" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.excludeObjects(org.eclipse.jgit.internal.storage.pack.PackWriter$ObjectIdSet)" from="cnt + 1" to="(cnt + 1) + 1" />
    <mutant id="mutant_4390" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.excludeObjects(org.eclipse.jgit.internal.storage.pack.PackWriter$ObjectIdSet)" from="cnt + 1" to="(cnt + 1) - 1" />
    <mutant id="mutant_3059" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="(levelOne - 1)" to="((levelOne - 1) * -1)" />
    <mutant id="mutant_3058" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne + 1)" to="((levelOne + 1) + 1)" />
    <mutant id="mutant_4389" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.excludeObjects(org.eclipse.jgit.internal.storage.pack.PackWriter$ObjectIdSet)" from="cnt + 1" to="(cnt + 1) * -1" />
    <mutant id="mutant_3057" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne + 1)" to="((levelOne + 1) * -1)" />
    <mutant id="mutant_4388" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(d &gt;= max) &amp;&amp; (b.isDeltaRepresentation())" to="!((d &gt;= max) &amp;&amp; (b.isDeltaRepresentation()))" />
    <mutant id="mutant_3056" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne + 1)" to="((levelOne + 1) - 1)" />
    <mutant id="mutant_4387" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(list.size()) - 1" to="((list.size()) - 1) - 1" />
    <mutant id="mutant_3055" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne &gt; 0) &amp;&amp; (base == (idxHeader[(levelOne - 1)]))" to="!((levelOne &gt; 0) &amp;&amp; (base == (idxHeader[(levelOne - 1)])))" />
    <mutant id="mutant_4386" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(list.size()) - 1" to="((list.size()) - 1) + 1" />
    <mutant id="mutant_3054" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne - 1)" to="((levelOne - 1) - 1)" />
    <mutant id="mutant_4385" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(list.size()) - 1" to="((list.size()) - 1) * -1" />
    <mutant id="mutant_3053" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne - 1)" to="((levelOne - 1) + 1)" />
    <mutant id="mutant_4384" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.get(org.eclipse.jgit.lib.AnyObjectId)" from="(obj != null) &amp;&amp; (!(obj.isEdge()))" to="!((obj != null) &amp;&amp; (!(obj.isEdge())))" />
    <mutant id="mutant_3052" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne - 1)" to="((levelOne - 1) * -1)" />
    <mutant id="mutant_4383" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.willInclude(org.eclipse.jgit.lib.AnyObjectId)" from="(obj != null) &amp;&amp; (!(obj.isEdge()))" to="!((obj != null) &amp;&amp; (!(obj.isEdge())))" />
    <mutant id="mutant_3051" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(nthPosition + 1)" to="((nthPosition + 1) + 1)" />
    <mutant id="mutant_4382" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((last != null) &amp;&amp; (cmit.isReuseWalker())) &amp;&amp; (!(bitmap.contains(last)))" to="!(((last != null) &amp;&amp; (cmit.isReuseWalker())) &amp;&amp; (!(bitmap.contains(last))))" />
    <mutant id="mutant_3050" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(nthPosition + 1)" to="((nthPosition + 1) - 1)" />
    <mutant id="mutant_4381" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((last != null) &amp;&amp; (cmit.isReuseWalker()))" to="(!((last != null) &amp;&amp; (cmit.isReuseWalker())))" />
    <mutant id="mutant_4380" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE))) || (!(cachedPacks.isEmpty()))" to="!(((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE))) || (!(cachedPacks.isEmpty())))" />
    <mutant id="mutant_3049" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(nthPosition + 1)" to="((nthPosition + 1) * -1)" />
    <mutant id="mutant_3048" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Integer.MAX_VALUE) - 8)" to="(((Integer.MAX_VALUE) - 8) + 1)" />
    <mutant id="mutant_4379" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE)))" to="(!((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE))))" />
    <mutant id="mutant_3047" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Integer.MAX_VALUE) - 8)" to="(((Integer.MAX_VALUE) - 8) - 1)" />
    <mutant id="mutant_4378" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.isIndexDisabled()" from="(indexDisabled) || (!(cachedPacks.isEmpty()))" to="!((indexDisabled) || (!(cachedPacks.isEmpty())))" />
    <mutant id="mutant_3046" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Integer.MAX_VALUE) - 8)" to="(((Integer.MAX_VALUE) - 8) * -1)" />
    <mutant id="mutant_4377" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="((ptr != null) &amp;&amp; (ptr.isEdge())) || (((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId)))" to="!(((ptr != null) &amp;&amp; (ptr.isEdge())) || (((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId))))" />
    <mutant id="mutant_3045" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="n * ((Constants.OBJECT_ID_LENGTH) + 4)" to="(n * ((Constants.OBJECT_ID_LENGTH) + 4)) * -1" />
    <mutant id="mutant_4376" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="(((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId)))" to="(!(((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId))))" />
    <mutant id="mutant_3044" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="n * ((Constants.OBJECT_ID_LENGTH) + 4)" to="(n * ((Constants.OBJECT_ID_LENGTH) + 4)) + 1" />
    <mutant id="mutant_4375" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="((ptr != null) &amp;&amp; (ptr.isEdge()))" to="(!((ptr != null) &amp;&amp; (ptr.isEdge())))" />
    <mutant id="mutant_3043" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="n * ((Constants.OBJECT_ID_LENGTH) + 4)" to="(n * ((Constants.OBJECT_ID_LENGTH) + 4)) - 1" />
    <mutant id="mutant_4374" viable="false" in="?" from="(Constants.OBJ_TAG) + 1" to="((Constants.OBJ_TAG) + 1) * -1" />
    <mutant id="mutant_3042" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Constants.OBJECT_ID_LENGTH) + 4)" to="(((Constants.OBJECT_ID_LENGTH) + 4) * -1)" />
    <mutant id="mutant_4373" viable="false" in="?" from="(Constants.OBJ_TAG) + 1" to="((Constants.OBJ_TAG) + 1) - 1" />
    <mutant id="mutant_3041" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Constants.OBJECT_ID_LENGTH) + 4)" to="(((Constants.OBJECT_ID_LENGTH) + 4) - 1)" />
    <mutant id="mutant_4372" viable="false" in="?" from="(Constants.OBJ_TAG) + 1" to="((Constants.OBJ_TAG) + 1) + 1" />
    <mutant id="mutant_3040" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Constants.OBJECT_ID_LENGTH) + 4)" to="(((Constants.OBJECT_ID_LENGTH) + 4) + 1)" />
    <mutant id="mutant_4371" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) + &quot;]&quot;" to="((((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_4370" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) + &quot;]&quot;" to="((((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_3039" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((int)((idxHeader[k]) - (idxHeader[(k - 1)])))" to="((int)(((idxHeader[k]) - (idxHeader[(k - 1)])))) + 1" />
    <mutant id="mutant_3038" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((int)((idxHeader[k]) - (idxHeader[(k - 1)])))" to="((int)(((idxHeader[k]) - (idxHeader[(k - 1)])))) - 1" />
    <mutant id="mutant_4369" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) + &quot;]&quot;" to="((((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_3037" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((int)((idxHeader[k]) - (idxHeader[(k - 1)])))" to="((int)(((idxHeader[k]) - (idxHeader[(k - 1)])))) * -1" />
    <mutant id="mutant_4368" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed))" to="((((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) + 1)" />
    <mutant id="mutant_3036" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k - 1)" to="((k - 1) - 1)" />
    <mutant id="mutant_4367" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed))" to="((((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) * -1)" />
    <mutant id="mutant_3035" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k - 1)" to="((k - 1) + 1)" />
    <mutant id="mutant_4366" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed))" to="((((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) - 1)" />
    <mutant id="mutant_3034" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k - 1)" to="((k - 1) * -1)" />
    <mutant id="mutant_4365" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;)" to="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + 1)" />
    <mutant id="mutant_3033" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k * 4)" to="((k * 4) + 1)" />
    <mutant id="mutant_4364" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;)" to="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) - 1)" />
    <mutant id="mutant_3032" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k * 4)" to="((k * 4) - 1)" />
    <mutant id="mutant_4363" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;)" to="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) * -1)" />
    <mutant id="mutant_5694" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode()))))" to="(!((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode())))))" />
    <mutant id="mutant_5695" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode())))) &amp;&amp; (!(f.isEntryIgnored()))" to="!(((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode())))) &amp;&amp; (!(f.isEntryIgnored())))" />
    <mutant id="mutant_5696" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f == null) || (!(m.idEqual(i)))" to="!((f == null) || (!(m.idEqual(i))))" />
    <mutant id="mutant_5697" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f.isModified(i.getDirCacheEntry(), true, this.walk.getObjectReader())) || ((i.getDirCacheEntry().getStage()) != 0)" to="!((f.isModified(i.getDirCacheEntry(), true, this.walk.getObjectReader())) || ((i.getDirCacheEntry().getStage()) != 0))" />
    <mutant id="mutant_5698" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((i == null) &amp;&amp; (m == null))" to="(!((i == null) &amp;&amp; (m == null)))" />
    <mutant id="mutant_5699" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((i == null) &amp;&amp; (m == null)) &amp;&amp; (h == null)" to="!(((i == null) &amp;&amp; (m == null)) &amp;&amp; (h == null))" />
    <mutant id="mutant_5690" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(opt.isFileMode()) &amp;&amp; (fs.supportsExecute())" to="!((opt.isFileMode()) &amp;&amp; (fs.supportsExecute()))" />
    <mutant id="mutant_5691" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(h != null) &amp;&amp; (!(FileMode.TREE.equals(h.getEntryFileMode())))" to="!((h != null) &amp;&amp; (!(FileMode.TREE.equals(h.getEntryFileMode()))))" />
    <mutant id="mutant_5692" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(m != null) &amp;&amp; (!(FileMode.TREE.equals(m.getEntryFileMode())))" to="!((m != null) &amp;&amp; (!(FileMode.TREE.equals(m.getEntryFileMode()))))" />
    <mutant id="mutant_5693" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry)" from="(e != null) &amp;&amp; (!(FileMode.TREE.equals(e.getFileMode())))" to="!((e != null) &amp;&amp; (!(FileMode.TREE.equals(e.getFileMode()))))" />
    <mutant id="mutant_3031" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k * 4)" to="((k * 4) * -1)" />
    <mutant id="mutant_4362" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(&quot;PackWriter.State[&quot; + (phase))" to="((&quot;PackWriter.State[&quot; + (phase)) * -1)" />
    <mutant id="mutant_3030" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((PackIndexV1.IDX_HDR_LEN) - (hdr.length))" to="(((PackIndexV1.IDX_HDR_LEN) - (hdr.length)) * -1)" />
    <mutant id="mutant_4361" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(&quot;PackWriter.State[&quot; + (phase))" to="((&quot;PackWriter.State[&quot; + (phase)) - 1)" />
    <mutant id="mutant_4360" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(&quot;PackWriter.State[&quot; + (phase))" to="((&quot;PackWriter.State[&quot; + (phase)) + 1)" />
    <mutant id="mutant_3028" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((PackIndexV1.IDX_HDR_LEN) - (hdr.length))" to="(((PackIndexV1.IDX_HDR_LEN) - (hdr.length)) + 1)" />
    <mutant id="mutant_4359" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState.snapshot()" from="(PackWriter.MutableState.OBJECT_TO_PACK_SIZE) * objCnt" to="((PackWriter.MutableState.OBJECT_TO_PACK_SIZE) * objCnt) * -1" />
    <mutant id="mutant_3027" viable="false" in="?" from="256 * 4" to="(256 * 4) - 1" />
    <mutant id="mutant_4358" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState.snapshot()" from="(PackWriter.MutableState.OBJECT_TO_PACK_SIZE) * objCnt" to="((PackWriter.MutableState.OBJECT_TO_PACK_SIZE) * objCnt) - 1" />
    <mutant id="mutant_3026" viable="false" in="?" from="256 * 4" to="(256 * 4) * -1" />
    <mutant id="mutant_4357" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState.snapshot()" from="(PackWriter.MutableState.OBJECT_TO_PACK_SIZE) * objCnt" to="((PackWriter.MutableState.OBJECT_TO_PACK_SIZE) * objCnt) + 1" />
    <mutant id="mutant_3025" viable="false" in="?" from="256 * 4" to="(256 * 4) + 1" />
    <mutant id="mutant_4356" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit())) + (config.getBigFileThreshold())" to="((threads * (config.getDeltaSearchMemoryLimit())) + (config.getBigFileThreshold())) * -1" />
    <mutant id="mutant_3024" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator.next()" from="(Constants.OBJECT_ID_LENGTH) + 4" to="((Constants.OBJECT_ID_LENGTH) + 4) * -1" />
    <mutant id="mutant_4355" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit())) + (config.getBigFileThreshold())" to="((threads * (config.getDeltaSearchMemoryLimit())) + (config.getBigFileThreshold())) - 1" />
    <mutant id="mutant_3023" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator.next()" from="(Constants.OBJECT_ID_LENGTH) + 4" to="((Constants.OBJECT_ID_LENGTH) + 4) - 1" />
    <mutant id="mutant_4354" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit())) + (config.getBigFileThreshold())" to="((threads * (config.getDeltaSearchMemoryLimit())) + (config.getBigFileThreshold())) + 1" />
    <mutant id="mutant_3022" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator.next()" from="(Constants.OBJECT_ID_LENGTH) + 4" to="((Constants.OBJECT_ID_LENGTH) + 4) + 1" />
    <mutant id="mutant_4353" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit()))" to="((threads * (config.getDeltaSearchMemoryLimit())) * -1)" />
    <mutant id="mutant_3021" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator$1.ensureId()" from="((levelTwo) - (Constants.OBJECT_ID_LENGTH))" to="(((levelTwo) - (Constants.OBJECT_ID_LENGTH)) * -1)" />
    <mutant id="mutant_4352" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit()))" to="((threads * (config.getDeltaSearchMemoryLimit())) - 1)" />
    <mutant id="mutant_5683" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkValidPathSegment(org.eclipse.jgit.lib.ObjectChecker,org.eclipse.jgit.treewalk.CanonicalTreeParser)" from="ptr + (t.getNameLength())" to="(ptr + (t.getNameLength())) * -1" />
    <mutant id="mutant_5684" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkValidPathSegment(org.eclipse.jgit.lib.ObjectChecker,org.eclipse.jgit.treewalk.CanonicalTreeParser)" from="ptr + (t.getNameLength())" to="(ptr + (t.getNameLength())) + 1" />
    <mutant id="mutant_5685" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkValidPathSegment(org.eclipse.jgit.lib.ObjectChecker,org.eclipse.jgit.treewalk.CanonicalTreeParser)" from="ptr + (t.getNameLength())" to="(ptr + (t.getNameLength())) - 1" />
    <mutant id="mutant_5686" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="((entry.getFileMode()) == (FileMode.SYMLINK)) &amp;&amp; ((opt.getSymLinks()) == (CoreConfig.SymLinks.TRUE))" to="!(((entry.getFileMode()) == (FileMode.SYMLINK)) &amp;&amp; ((opt.getSymLinks()) == (CoreConfig.SymLinks.TRUE)))" />
    <mutant id="mutant_5687" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(&quot;._&quot; + (f.getName()))" to="((&quot;._&quot; + (f.getName())) + 1)" />
    <mutant id="mutant_5688" viable="false" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(&quot;._&quot; + (f.getName()))" to="((&quot;._&quot; + (f.getName())) - 1)" />
    <mutant id="mutant_5689" viable="false" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(&quot;._&quot; + (f.getName()))" to="((&quot;._&quot; + (f.getName())) * -1)" />
    <mutant id="mutant_3029" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((PackIndexV1.IDX_HDR_LEN) - (hdr.length))" to="(((PackIndexV1.IDX_HDR_LEN) - (hdr.length)) - 1)" />
    <mutant id="mutant_3099" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="((4 + (Constants.OBJECT_ID_LENGTH)) - 1)" />
    <mutant id="mutant_3098" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="((4 + (Constants.OBJECT_ID_LENGTH)) + 1)" />
    <mutant id="mutant_3097" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="(mid + 1) - 1" />
    <mutant id="mutant_3096" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="(mid + 1) + 1" />
    <mutant id="mutant_3095" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="(mid + 1) * -1" />
    <mutant id="mutant_3094" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 1)" to="((pos - 1) - 1)" />
    <mutant id="mutant_3093" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 1)" to="((pos - 1) * -1)" />
    <mutant id="mutant_3092" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 1)" to="((pos - 1) + 1)" />
    <mutant id="mutant_3091" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 2)" to="((pos - 2) + 1)" />
    <mutant id="mutant_3090" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 2)" to="((pos - 2) - 1)" />
    <mutant id="mutant_3089" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 2)" to="((pos - 2) * -1)" />
    <mutant id="mutant_3088" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 3)" to="((pos - 3) + 1)" />
    <mutant id="mutant_3087" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 3)" to="((pos - 3) * -1)" />
    <mutant id="mutant_3086" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 3)" to="((pos - 3) - 1)" />
    <mutant id="mutant_3085" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 4)" to="((pos - 4) * -1)" />
    <mutant id="mutant_3084" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 4)" to="((pos - 4) - 1)" />
    <mutant id="mutant_3083" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 4)" to="((pos - 4) + 1)" />
    <mutant id="mutant_3082" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="((low + high) - 1)" />
    <mutant id="mutant_3081" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="((low + high) * -1)" />
    <mutant id="mutant_3080" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="((low + high) + 1)" />
    <mutant id="mutant_3079" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="((data.length) / (4 + (Constants.OBJECT_ID_LENGTH))) + 1" />
    <mutant id="mutant_3078" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="((data.length) / (4 + (Constants.OBJECT_ID_LENGTH))) - 1" />
    <mutant id="mutant_3077" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="((data.length) / (4 + (Constants.OBJECT_ID_LENGTH))) * -1" />
    <mutant id="mutant_3076" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="((4 + (Constants.OBJECT_ID_LENGTH)) * -1)" />
    <mutant id="mutant_3075" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="((4 + (Constants.OBJECT_ID_LENGTH)) - 1)" />
    <mutant id="mutant_3074" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="((4 + (Constants.OBJECT_ID_LENGTH)) + 1)" />
    <mutant id="mutant_3073" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid) + 4" to="(((4 + (Constants.OBJECT_ID_LENGTH)) * mid) + 4) - 1" />
    <mutant id="mutant_3072" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid) + 4" to="(((4 + (Constants.OBJECT_ID_LENGTH)) * mid) + 4) * -1" />
    <mutant id="mutant_3071" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid) + 4" to="(((4 + (Constants.OBJECT_ID_LENGTH)) * mid) + 4) + 1" />
    <mutant id="mutant_3070" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid)" to="(((4 + (Constants.OBJECT_ID_LENGTH)) * mid) - 1)" />
    <mutant id="mutant_3069" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid)" to="(((4 + (Constants.OBJECT_ID_LENGTH)) * mid) * -1)" />
    <mutant id="mutant_3068" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid)" to="(((4 + (Constants.OBJECT_ID_LENGTH)) * mid) + 1)" />
    <mutant id="mutant_4399" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="((System.currentTimeMillis()) - countingStart) * -1" />
    <mutant id="mutant_3067" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="((4 + (Constants.OBJECT_ID_LENGTH)) * -1)" />
    <mutant id="mutant_4398" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="((System.currentTimeMillis()) - countingStart) - 1" />
    <mutant id="mutant_3066" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="((4 + (Constants.OBJECT_ID_LENGTH)) - 1)" />
    <mutant id="mutant_4397" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="((System.currentTimeMillis()) - countingStart) + 1" />
    <mutant id="mutant_3065" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="((4 + (Constants.OBJECT_ID_LENGTH)) + 1)" />
    <mutant id="mutant_4396" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(!(shallowPack)) &amp;&amp; (useBitmaps)" to="!((!(shallowPack)) &amp;&amp; (useBitmaps))" />
    <mutant id="mutant_9201" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 2" to="(emailB - 2) * -1" />
    <mutant id="mutant_9202" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 2" to="(emailB - 2) + 1" />
    <mutant id="mutant_9200" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 2" to="(emailB - 2) - 1" />
    <mutant id="mutant_9241" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(when * 1000L)" to="((when * 1000L) - 1)" />
    <mutant id="mutant_9242" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_9240" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(when * 1000L)" to="((when * 1000L) * -1)" />
    <mutant id="mutant_9245" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="((end - ptr) / 36)" to="(((end - ptr) / 36) + 1)" />
    <mutant id="mutant_9246" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="((end - ptr) / 36)" to="(((end - ptr) / 36) * -1)" />
    <mutant id="mutant_9243" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_9244" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_9238" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE + 1)" to="((emailE + 1) * -1)" />
    <mutant id="mutant_9239" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(when * 1000L)" to="((when * 1000L) + 1)" />
    <mutant id="mutant_9236" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE + 1)" to="((emailE + 1) + 1)" />
    <mutant id="mutant_9237" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE + 1)" to="((emailE + 1) - 1)" />
    <mutant id="mutant_9230" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE - 1)" to="((emailE - 1) - 1)" />
    <mutant id="mutant_9231" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE - 1)" to="((emailE - 1) * -1)" />
    <mutant id="mutant_9234" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailB - 2)" to="((emailB - 2) * -1)" />
    <mutant id="mutant_9235" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailB - 2)" to="((emailB - 2) + 1)" />
    <mutant id="mutant_9232" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE - 1)" to="((emailE - 1) + 1)" />
    <mutant id="mutant_9233" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailB - 2)" to="((emailB - 2) - 1)" />
    <mutant id="mutant_9227" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(when * 1000L)" to="((when * 1000L) + 1)" />
    <mutant id="mutant_9228" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(when * 1000L)" to="((when * 1000L) * -1)" />
    <mutant id="mutant_9225" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="((tzBegin - 1) - 1)" />
    <mutant id="mutant_9226" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="((tzBegin - 1) * -1)" />
    <mutant id="mutant_9229" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(when * 1000L)" to="((when * 1000L) - 1)" />
    <mutant id="mutant_9220" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="((tzBegin - 1) * -1)" />
    <mutant id="mutant_9223" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) + 1)" to="(((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) + 1) * -1)" />
    <mutant id="mutant_9224" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="((tzBegin - 1) + 1)" />
    <mutant id="mutant_9221" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) + 1)" to="(((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) + 1) + 1)" />
    <mutant id="mutant_9222" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) + 1)" to="(((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) + 1) - 1)" />
    <mutant id="mutant_9216" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) + 1" to="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) + 1) - 1" />
    <mutant id="mutant_9217" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) + 1" to="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) + 1) + 1" />
    <mutant id="mutant_9214" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2)" to="(((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2) - 1)" />
    <mutant id="mutant_9215" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) + 1" to="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) + 1) * -1" />
    <mutant id="mutant_9218" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="((tzBegin - 1) + 1)" />
    <mutant id="mutant_9219" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="((tzBegin - 1) - 1)" />
    <mutant id="mutant_9212" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2)" to="(((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2) + 1)" />
    <mutant id="mutant_9213" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2)" to="(((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2) * -1)" />
    <mutant id="mutant_9210" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="((emailE - 1) * -1)" />
    <mutant id="mutant_9211" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="((emailE - 1) + 1)" />
    <mutant id="mutant_9205" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 1" to="(emailB - 1) - 1" />
    <mutant id="mutant_9206" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="((emailE - 1) - 1)" />
    <mutant id="mutant_9203" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 1" to="(emailB - 1) + 1" />
    <mutant id="mutant_9204" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 1" to="(emailB - 1) * -1" />
    <mutant id="mutant_9209" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="((emailE - 1) - 1)" />
    <mutant id="mutant_9207" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="((emailE - 1) * -1)" />
    <mutant id="mutant_9208" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="((emailE - 1) + 1)" />
    <mutant id="mutant_9285" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + 1)" to="((low + 1) * -1)" />
    <mutant id="mutant_9286" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="((idx + 1) + 1)" />
    <mutant id="mutant_9283" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + 1)" to="((low + 1) + 1)" />
    <mutant id="mutant_9284" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + 1)" to="((low + 1) - 1)" />
    <mutant id="mutant_9289" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(cnt) + 1" to="((cnt) + 1) + 1" />
    <mutant id="mutant_9287" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="((idx + 1) - 1)" />
    <mutant id="mutant_9288" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="((idx + 1) * -1)" />
    <mutant id="mutant_9281" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="mid + 1" to="(mid + 1) + 1" />
    <mutant id="mutant_9282" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="mid + 1" to="(mid + 1) - 1" />
    <mutant id="mutant_9280" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="mid + 1" to="(mid + 1) * -1" />
    <mutant id="mutant_9274" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="((size) - (idx + 1))" to="(((size) - (idx + 1)) - 1)" />
    <mutant id="mutant_9275" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="((size) - (idx + 1))" to="(((size) - (idx + 1)) * -1)" />
    <mutant id="mutant_9272" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="((idx + 1) - 1)" />
    <mutant id="mutant_9273" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="((idx + 1) * -1)" />
    <mutant id="mutant_9278" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + high)" to="((low + high) * -1)" />
    <mutant id="mutant_9279" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + high)" to="((low + high) - 1)" />
    <mutant id="mutant_9276" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="((size) - (idx + 1))" to="(((size) - (idx + 1)) + 1)" />
    <mutant id="mutant_9277" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + high)" to="((low + high) + 1)" />
    <mutant id="mutant_9270" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="((idx + 1) * -1)" />
    <mutant id="mutant_9271" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="((idx + 1) + 1)" />
    <mutant id="mutant_9269" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="((idx + 1) - 1)" />
    <mutant id="mutant_9263" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) * 2)" to="(((size) * 2) + 1)" />
    <mutant id="mutant_9264" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) * 2)" to="(((size) * 2) * -1)" />
    <mutant id="mutant_9261" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="(((size) + cnt) * -1)" />
    <mutant id="mutant_9262" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) * 2)" to="(((size) * 2) - 1)" />
    <mutant id="mutant_9267" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="(((size) + cnt) * -1)" />
    <mutant id="mutant_9268" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="((idx + 1) + 1)" />
    <mutant id="mutant_9265" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="(((size) + cnt) + 1)" />
    <mutant id="mutant_9266" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="(((size) + cnt) - 1)" />
    <mutant id="mutant_9260" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="(((size) + cnt) - 1)" />
    <mutant id="mutant_9258" viable="true" in="org.eclipse.jgit.util.RefList$Builder.add(T)" from="(size) * 2" to="((size) * 2) * -1" />
    <mutant id="mutant_9259" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="(((size) + cnt) + 1)" />
    <mutant id="mutant_9252" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="((++matchPos) &lt;= maxPos) &amp;&amp; (org.eclipse.jgit.util.RawSubStringPattern.neq(first, text[matchPos]))" to="!(((++matchPos) &lt;= maxPos) &amp;&amp; (org.eclipse.jgit.util.RawSubStringPattern.neq(first, text[matchPos])))" />
    <mutant id="mutant_9253" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="matchPos + 1" to="(matchPos + 1) * -1" />
    <mutant id="mutant_9250" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="(rcs.endPtr) - needleLen" to="((rcs.endPtr) - needleLen) - 1" />
    <mutant id="mutant_9251" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="(rcs.endPtr) - needleLen" to="((rcs.endPtr) - needleLen) + 1" />
    <mutant id="mutant_9256" viable="true" in="org.eclipse.jgit.util.RefList$Builder.add(T)" from="(size) * 2" to="((size) * 2) - 1" />
    <mutant id="mutant_9257" viable="true" in="org.eclipse.jgit.util.RefList$Builder.add(T)" from="(size) * 2" to="((size) * 2) + 1" />
    <mutant id="mutant_9254" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="matchPos + 1" to="(matchPos + 1) - 1" />
    <mutant id="mutant_9255" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="matchPos + 1" to="(matchPos + 1) + 1" />
    <mutant id="mutant_9249" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="(rcs.endPtr) - needleLen" to="((rcs.endPtr) - needleLen) * -1" />
    <mutant id="mutant_9247" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="((end - ptr) / 36)" to="(((end - ptr) / 36) - 1)" />
    <mutant id="mutant_9248" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.neq(byte,byte)" from="(a != b) &amp;&amp; (a != (org.eclipse.jgit.util.RawSubStringPattern.lc(b)))" to="!((a != b) &amp;&amp; (a != (org.eclipse.jgit.util.RawSubStringPattern.lc(b))))" />
    <mutant id="mutant_5713" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f == null) || (f.isModified(dce, true, this.walk.getObjectReader())))" to="(!((f == null) || (f.isModified(dce, true, this.walk.getObjectReader()))))" />
    <mutant id="mutant_5714" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; ((f == null) || (f.isModified(dce, true, this.walk.getObjectReader())))" to="!((dce != null) &amp;&amp; ((f == null) || (f.isModified(dce, true, this.walk.getObjectReader()))))" />
    <mutant id="mutant_5715" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))" to="!((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" />
    <mutant id="mutant_5716" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(!(FileMode.TREE.equals(f.getEntryFileMode()))) &amp;&amp; (FileMode.TREE.equals(iMode))" to="!((!(FileMode.TREE.equals(f.getEntryFileMode()))) &amp;&amp; (FileMode.TREE.equals(iMode)))" />
    <mutant id="mutant_5717" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree)))" to="(!((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))))" />
    <mutant id="mutant_5718" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" to="!(((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree)))" />
    <mutant id="mutant_5719" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(!(isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" to="!((!(isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree)))" />
    <mutant id="mutant_5710" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(mId == null) || (!(equalIdAndMode(mId, mMode, f.getEntryObjectId(), f.getEntryFileMode())))" to="!((mId == null) || (!(equalIdAndMode(mId, mMode, f.getEntryObjectId(), f.getEntryFileMode()))))" />
    <mutant id="mutant_5711" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(m == null) || (!(isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree)))" to="!((m == null) || (!(isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))))" />
    <mutant id="mutant_5712" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(m == null) &amp;&amp; (walk.isDirectoryFileConflict())" to="!((m == null) &amp;&amp; (walk.isDirectoryFileConflict()))" />
    <mutant id="mutant_5702" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask &amp; 546) != 0) &amp;&amp; ((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328))" to="!(((ffMask &amp; 546) != 0) &amp;&amp; ((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328)))" />
    <mutant id="mutant_5703" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (isModifiedSubtree_IndexWorkingtree(name))" to="!((f != null) &amp;&amp; (isModifiedSubtree_IndexWorkingtree(name)))" />
    <mutant id="mutant_5704" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))" to="!((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" />
    <mutant id="mutant_5705" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f == null) || (FileMode.TREE.equals(f.getEntryFileMode())))" to="(!((f == null) || (FileMode.TREE.equals(f.getEntryFileMode()))))" />
    <mutant id="mutant_5706" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask &amp; 546) == 0) &amp;&amp; ((f == null) || (FileMode.TREE.equals(f.getEntryFileMode())))" to="!(((ffMask &amp; 546) == 0) &amp;&amp; ((f == null) || (FileMode.TREE.equals(f.getEntryFileMode()))))" />
    <mutant id="mutant_5707" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask == 15) &amp;&amp; (f != null))" to="(!((ffMask == 15) &amp;&amp; (f != null)))" />
    <mutant id="mutant_5708" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask == 15) &amp;&amp; (f != null)) &amp;&amp; (FileMode.TREE.equals(f.getEntryFileMode()))" to="!(((ffMask == 15) &amp;&amp; (f != null)) &amp;&amp; (FileMode.TREE.equals(f.getEntryFileMode())))" />
    <mutant id="mutant_5709" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (!(f.isEntryIgnored()))" to="!((f != null) &amp;&amp; (!(f.isEntryIgnored())))" />
    <mutant id="mutant_5700" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208))" to="(!(((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)))" />
    <mutant id="mutant_5701" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328))" to="(!((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328)))" />
    <mutant id="mutant_503" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="((k + x) + 1)" />
    <mutant id="mutant_504" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(x &lt;= (beginA)) || ((k + x) &lt;= (beginB))" to="!((x &lt;= (beginA)) || ((k + x) &lt;= (beginB)))" />
    <mutant id="mutant_505" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) - d)" to="(((middleK) - d) * -1)" />
    <mutant id="mutant_506" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) - d)" to="(((middleK) - d) + 1)" />
    <mutant id="mutant_500" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="((k + x) - 1)" to="(((k + x) - 1) + 1)" />
    <mutant id="mutant_501" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="((k + x) - 1)" />
    <mutant id="mutant_502" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="((k + x) * -1)" />
    <mutant id="mutant_507" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) - d)" to="(((middleK) - d) - 1)" />
    <mutant id="mutant_508" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) + d)" to="(((middleK) + d) * -1)" />
    <mutant id="mutant_509" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) + d)" to="(((middleK) + d) - 1)" />
    <mutant id="mutant_514" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="((k - 1) * -1)" />
    <mutant id="mutant_9296" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) - idx)" to="(((cnt) - idx) * -1)" />
    <mutant id="mutant_515" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="((k - 1) + 1)" />
    <mutant id="mutant_9297" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) - idx)" to="(((cnt) - idx) - 1)" />
    <mutant id="mutant_516" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="((k - 1) - 1)" />
    <mutant id="mutant_9294" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="((idx + 1) * -1)" />
    <mutant id="mutant_517" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="((k - 1) * -1)" />
    <mutant id="mutant_9295" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) - idx)" to="(((cnt) - idx) + 1)" />
    <mutant id="mutant_510" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) + d)" to="(((middleK) + d) + 1)" />
    <mutant id="mutant_511" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="((d - 1) * -1)" />
    <mutant id="mutant_512" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="((d - 1) + 1)" />
    <mutant id="mutant_9298" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) + 1)" to="(((cnt) + 1) + 1)" />
    <mutant id="mutant_513" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="((d - 1) - 1)" />
    <mutant id="mutant_9299" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) + 1)" to="(((cnt) + 1) * -1)" />
    <mutant id="mutant_518" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="((k - 1) + 1)" />
    <mutant id="mutant_9292" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="((idx + 1) + 1)" />
    <mutant id="mutant_519" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="((k - 1) - 1)" />
    <mutant id="mutant_9293" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="((idx + 1) - 1)" />
    <mutant id="mutant_9290" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(cnt) + 1" to="((cnt) + 1) * -1" />
    <mutant id="mutant_9291" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(cnt) + 1" to="((cnt) + 1) - 1" />
    <mutant id="mutant_525" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="((k - 1) - 1)" />
    <mutant id="mutant_526" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="((d - 1) * -1)" />
    <mutant id="mutant_527" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="((d - 1) + 1)" />
    <mutant id="mutant_528" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="((d - 1) - 1)" />
    <mutant id="mutant_521" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="((k - 1) + 1)" />
    <mutant id="mutant_522" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="((k - 1) - 1)" />
    <mutant id="mutant_523" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="((k - 1) * -1)" />
    <mutant id="mutant_524" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="((k - 1) + 1)" />
    <mutant id="mutant_529" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="((k + 1) + 1)" />
    <mutant id="mutant_4425" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) + (edgeObjects.size())" to="(((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) + (edgeObjects.size())) - 1" />
    <mutant id="mutant_5757" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen)" to="((expLen - actLen) * -1)" />
    <mutant id="mutant_4424" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size()))" to="(((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) - 1)" />
    <mutant id="mutant_5758" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen)" to="((expLen - actLen) - 1)" />
    <mutant id="mutant_4423" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size()))" to="(((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) + 1)" />
    <mutant id="mutant_5759" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen) - skipped" to="((expLen - actLen) - skipped) - 1" />
    <mutant id="mutant_4422" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size()))" to="(((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) * -1)" />
    <mutant id="mutant_4421" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.pruneEdgesFromObjectList(java.util.List)" from="((list.size()) - 1)" to="(((list.size()) - 1) + 1)" />
    <mutant id="mutant_4420" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.pruneEdgesFromObjectList(java.util.List)" from="((list.size()) - 1)" to="(((list.size()) - 1) - 1)" />
    <mutant id="mutant_5750" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="len + pathLen" to="(len + pathLen) * -1" />
    <mutant id="mutant_5751" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="len + pathLen" to="(len + pathLen) - 1" />
    <mutant id="mutant_520" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="((k - 1) * -1)" />
    <mutant id="mutant_5752" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="len + pathLen" to="(len + pathLen) + 1" />
    <mutant id="mutant_4429" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(otp != null) &amp;&amp; (otp.isEdge())" to="!((otp != null) &amp;&amp; (otp.isEdge()))" />
    <mutant id="mutant_5753" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(actLen + 8)" to="((actLen + 8) * -1)" />
    <mutant id="mutant_4428" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(otp != null) &amp;&amp; (otp.isEdge())" to="!((otp != null) &amp;&amp; (otp.isEdge()))" />
    <mutant id="mutant_5754" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(actLen + 8)" to="((actLen + 8) - 1)" />
    <mutant id="mutant_4427" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) + (edgeObjects.size())" to="(((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) + (edgeObjects.size())) + 1" />
    <mutant id="mutant_5755" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(actLen + 8)" to="((actLen + 8) + 1)" />
    <mutant id="mutant_4426" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) + (edgeObjects.size())" to="(((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) + (edgeObjects.size())) * -1" />
    <mutant id="mutant_5756" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen)" to="((expLen - actLen) + 1)" />
    <mutant id="mutant_536" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="((k + 1) - 1)" />
    <mutant id="mutant_537" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="((k + 1) * -1)" />
    <mutant id="mutant_538" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="((k + 1) + 1)" />
    <mutant id="mutant_539" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="((k + 1) - 1)" />
    <mutant id="mutant_532" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="((k + 1) + 1)" />
    <mutant id="mutant_533" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="((k + 1) - 1)" />
    <mutant id="mutant_534" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="((k + 1) * -1)" />
    <mutant id="mutant_535" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="((k + 1) + 1)" />
    <mutant id="mutant_4414" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="((useCachedPacks) &amp;&amp; ((reuseSupport) != null))" to="(!((useCachedPacks) &amp;&amp; ((reuseSupport) != null)))" />
    <mutant id="mutant_5746" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((DirCacheEntry.INFO_LEN_EXTENDED) - (DirCacheEntry.INFO_LEN))" to="(((DirCacheEntry.INFO_LEN_EXTENDED) - (DirCacheEntry.INFO_LEN)) + 1)" />
    <mutant id="mutant_4413" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="((System.currentTimeMillis()) - countingStart) * -1" />
    <mutant id="mutant_5747" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) * -1)" />
    <mutant id="mutant_4412" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="((System.currentTimeMillis()) - countingStart) - 1" />
    <mutant id="mutant_5748" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) - 1)" />
    <mutant id="mutant_4411" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="((System.currentTimeMillis()) - countingStart) + 1" />
    <mutant id="mutant_5749" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) + 1)" />
    <mutant id="mutant_4410" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(thin) &amp;&amp; (!(baseTrees.isEmpty()))" to="!((thin) &amp;&amp; (!(baseTrees.isEmpty())))" />
    <mutant id="mutant_530" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="((k + 1) - 1)" />
    <mutant id="mutant_5740" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) + 1)" />
    <mutant id="mutant_531" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="((k + 1) * -1)" />
    <mutant id="mutant_4419" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.pruneEdgesFromObjectList(java.util.List)" from="((list.size()) - 1)" to="(((list.size()) - 1) * -1)" />
    <mutant id="mutant_5741" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.INFO_LEN))" to="(((infoOffset) + (DirCacheEntry.INFO_LEN)) * -1)" />
    <mutant id="mutant_4418" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.preparePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(shallowPack) &amp;&amp; (!(walk instanceof org.eclipse.jgit.revwalk.DepthWalk.ObjectWalk))" to="!((shallowPack) &amp;&amp; (!(walk instanceof org.eclipse.jgit.revwalk.DepthWalk.ObjectWalk)))" />
    <mutant id="mutant_5742" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.INFO_LEN))" to="(((infoOffset) + (DirCacheEntry.INFO_LEN)) - 1)" />
    <mutant id="mutant_4417" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate))) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="!((((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate))) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0)))" />
    <mutant id="mutant_5743" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.INFO_LEN))" to="(((infoOffset) + (DirCacheEntry.INFO_LEN)) + 1)" />
    <mutant id="mutant_4416" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="(!(((excludeInPacks) == null) || ((excludeInPacks.length) == 0)))" />
    <mutant id="mutant_5744" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((DirCacheEntry.INFO_LEN_EXTENDED) - (DirCacheEntry.INFO_LEN))" to="(((DirCacheEntry.INFO_LEN_EXTENDED) - (DirCacheEntry.INFO_LEN)) * -1)" />
    <mutant id="mutant_4415" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate)))" to="(!(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate))))" />
    <mutant id="mutant_5745" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((DirCacheEntry.INFO_LEN_EXTENDED) - (DirCacheEntry.INFO_LEN))" to="(((DirCacheEntry.INFO_LEN_EXTENDED) - (DirCacheEntry.INFO_LEN)) - 1)" />
    <mutant id="mutant_547" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(maxK) - ((k ^ (maxK)) &amp; 1)" to="((maxK) - ((k ^ (maxK)) &amp; 1)) + 1" />
    <mutant id="mutant_548" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(maxK) - ((k ^ (maxK)) &amp; 1)" to="((maxK) - ((k ^ (maxK)) &amp; 1)) - 1" />
    <mutant id="mutant_549" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(maxK) - ((k ^ (maxK)) &amp; 1)" to="((maxK) - ((k ^ (maxK)) &amp; 1)) * -1" />
    <mutant id="mutant_543" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.makeEdit(long,long)" from="(x1 &gt; x2) || (y1 &gt; y2)" to="!((x1 &gt; x2) || (y1 &gt; y2))" />
    <mutant id="mutant_544" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(minK) + ((k ^ (minK)) &amp; 1)" to="((minK) + ((k ^ (minK)) &amp; 1)) + 1" />
    <mutant id="mutant_545" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(minK) + ((k ^ (minK)) &amp; 1)" to="((minK) + ((k ^ (minK)) &amp; 1)) * -1" />
    <mutant id="mutant_546" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(minK) + ((k ^ (minK)) &amp; 1)" to="((minK) + ((k ^ (minK)) &amp; 1)) - 1" />
    <mutant id="mutant_4403" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(ignoreMissingUninteresting) &amp;&amp; (have.contains(e.getObjectId()))" to="!((ignoreMissingUninteresting) &amp;&amp; (have.contains(e.getObjectId())))" />
    <mutant id="mutant_5735" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="maxIdx - lastIdx" to="(maxIdx - lastIdx) + 1" />
    <mutant id="mutant_4402" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((want.size()) + (have.size()))" to="(((want.size()) + (have.size())) - 1)" />
    <mutant id="mutant_5736" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="maxIdx - lastIdx" to="(maxIdx - lastIdx) - 1" />
    <mutant id="mutant_4401" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((want.size()) + (have.size()))" to="(((want.size()) + (have.size())) + 1)" />
    <mutant id="mutant_5737" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="(stage &lt; 0) || (3 &lt; stage)" to="!((stage &lt; 0) || (3 &lt; stage))" />
    <mutant id="mutant_4400" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((want.size()) + (have.size()))" to="(((want.size()) + (have.size())) * -1)" />
    <mutant id="mutant_5738" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) * -1)" />
    <mutant id="mutant_5739" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) - 1)" />
    <mutant id="mutant_540" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="((k + 1) * -1)" />
    <mutant id="mutant_541" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right)))" to="(!((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right))))" />
    <mutant id="mutant_4409" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(obj.has(added)))" to="!((((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(obj.has(added))))" />
    <mutant id="mutant_542" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k &gt;= (prevEndK)) || ((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right)))" to="!((k &gt;= (prevEndK)) || ((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right))))" />
    <mutant id="mutant_4408" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="(!(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))))" />
    <mutant id="mutant_5730" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(eIdx + 1)" to="((eIdx + 1) + 1)" />
    <mutant id="mutant_4407" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include)))" to="(!((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))))" />
    <mutant id="mutant_5731" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(Math.min(eIdx, maxIdx)) - lastIdx" to="((Math.min(eIdx, maxIdx)) - lastIdx) * -1" />
    <mutant id="mutant_4406" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(!putTagTargets) &amp;&amp; (4096 &lt; commitCnt)" to="!((!putTagTargets) &amp;&amp; (4096 &lt; commitCnt))" />
    <mutant id="mutant_5732" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(Math.min(eIdx, maxIdx)) - lastIdx" to="((Math.min(eIdx, maxIdx)) - lastIdx) + 1" />
    <mutant id="mutant_4405" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(exclude(p)))" to="!(((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(exclude(p))))" />
    <mutant id="mutant_5733" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(Math.min(eIdx, maxIdx)) - lastIdx" to="((Math.min(eIdx, maxIdx)) - lastIdx) - 1" />
    <mutant id="mutant_4404" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="(!((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))))" />
    <mutant id="mutant_5734" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="maxIdx - lastIdx" to="(maxIdx - lastIdx) * -1" />
    <mutant id="mutant_558" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(((d + k) - (middleK)) % 2)" to="((((d + k) - (middleK)) % 2) + 1)" />
    <mutant id="mutant_559" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="((d + k) + 1)" />
    <mutant id="mutant_554" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="(((d + k) - (middleK)) + 1)" />
    <mutant id="mutant_555" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="(((d + k) - (middleK)) - 1)" />
    <mutant id="mutant_556" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(((d + k) - (middleK)) % 2)" to="((((d + k) - (middleK)) % 2) - 1)" />
    <mutant id="mutant_557" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(((d + k) - (middleK)) % 2)" to="((((d + k) - (middleK)) % 2) * -1)" />
    <mutant id="mutant_5724" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="(entryPath.endsWith(&quot;/&quot;)) || ((entryPath.length()) == 0)" to="!((entryPath.endsWith(&quot;/&quot;)) || ((entryPath.length()) == 0))" />
    <mutant id="mutant_5725" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="entryPath + &quot;/&quot;" to="(entryPath + &quot;/&quot;) + 1" />
    <mutant id="mutant_5726" viable="false" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="entryPath + &quot;/&quot;" to="(entryPath + &quot;/&quot;) - 1" />
    <mutant id="mutant_5727" viable="false" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="entryPath + &quot;/&quot;" to="(entryPath + &quot;/&quot;) * -1" />
    <mutant id="mutant_5728" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(eIdx + 1)" to="((eIdx + 1) * -1)" />
    <mutant id="mutant_5729" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(eIdx + 1)" to="((eIdx + 1) - 1)" />
    <mutant id="mutant_550" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="((d + k) + 1)" />
    <mutant id="mutant_551" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="((d + k) - 1)" />
    <mutant id="mutant_552" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="((d + k) * -1)" />
    <mutant id="mutant_553" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="(((d + k) - (middleK)) * -1)" />
    <mutant id="mutant_5720" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; (FileMode.GITLINK.equals(dce.getFileMode()))" to="!((dce != null) &amp;&amp; (FileMode.GITLINK.equals(dce.getFileMode())))" />
    <mutant id="mutant_5721" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" to="(!((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))))" />
    <mutant id="mutant_5722" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; ((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" to="!((dce != null) &amp;&amp; ((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))))" />
    <mutant id="mutant_5723" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.removeEmptyParents(java.io.File)" from="(parentFile != null) &amp;&amp; (!(parentFile.equals(repo.getWorkTree())))" to="!((parentFile != null) &amp;&amp; (!(parentFile.equals(repo.getWorkTree()))))" />
    <mutant id="mutant_448" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs))" to="(!(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs)))" />
    <mutant id="mutant_449" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - 1)" to="((as - 1) * -1)" />
    <mutant id="mutant_444" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="as + 1" to="(as + 1) + 1" />
    <mutant id="mutant_445" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bs + 1" to="(bs + 1) - 1" />
    <mutant id="mutant_6890" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.filter(java.util.Map)" from="(e.getKey().equals(hide)) || (prefixMatch(hide, e.getKey()))" to="!((e.getKey().equals(hide)) || (prefixMatch(hide, e.getKey())))" />
    <mutant id="mutant_446" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bs + 1" to="(bs + 1) * -1" />
    <mutant id="mutant_5560" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3)" to="((((entryCnt) + 16) * 3) + 1)" />
    <mutant id="mutant_6891" viable="true" in="org.eclipse.jgit.transport.Transport.doesNotExist(org.eclipse.jgit.transport.RemoteConfig)" from="(cfg.getURIs().isEmpty()) &amp;&amp; (cfg.getPushURIs().isEmpty())" to="!((cfg.getURIs().isEmpty()) &amp;&amp; (cfg.getPushURIs().isEmpty()))" />
    <mutant id="mutant_447" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bs + 1" to="(bs + 1) + 1" />
    <mutant id="mutant_5561" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3)" to="((((entryCnt) + 16) * 3) - 1)" />
    <mutant id="mutant_6892" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(srcRef != null) &amp;&amp; (!(destSpec.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)))" to="!((srcRef != null) &amp;&amp; (!(destSpec.startsWith(org.eclipse.jgit.lib.Constants.R_REFS))))" />
    <mutant id="mutant_4230" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="(((maxDepth) - (src.depth())) * -1)" />
    <mutant id="mutant_4227" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) + 11" to="(((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) + 11) + 1" />
    <mutant id="mutant_5559" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3)" to="((((entryCnt) + 16) * 3) * -1)" />
    <mutant id="mutant_4226" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) + 11" to="(((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) + 11) - 1" />
    <mutant id="mutant_4225" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) + 11" to="(((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) + 11) * -1" />
    <mutant id="mutant_4224" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6))" to="(((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) - 1)" />
    <mutant id="mutant_4223" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6))" to="(((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) + 1)" />
    <mutant id="mutant_4222" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6))" to="(((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) * -1)" />
    <mutant id="mutant_4221" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 63)" to="((insz + 63) + 1)" />
    <mutant id="mutant_4220" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 63)" to="((insz + 63) - 1)" />
    <mutant id="mutant_440" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="((as - (ptrShift)) - 1)" />
    <mutant id="mutant_5551" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3) / 2" to="((((entryCnt) + 16) * 3) / 2) - 1" />
    <mutant id="mutant_6882" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" to="!((checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false)))" />
    <mutant id="mutant_441" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="((as - (ptrShift)) * -1)" />
    <mutant id="mutant_5552" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3) / 2" to="((((entryCnt) + 16) * 3) / 2) * -1" />
    <mutant id="mutant_6883" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" to="!((checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false)))" />
    <mutant id="mutant_442" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="as + 1" to="(as + 1) * -1" />
    <mutant id="mutant_5553" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + cnt)" to="(((entryCnt) + cnt) - 1)" />
    <mutant id="mutant_6884" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isWindows()))" to="!((checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isWindows())))" />
    <mutant id="mutant_443" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="as + 1" to="(as + 1) - 1" />
    <mutant id="mutant_5554" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + cnt)" to="(((entryCnt) + cnt) * -1)" />
    <mutant id="mutant_6885" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isMacOS()))" to="!((checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isMacOS())))" />
    <mutant id="mutant_5555" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + cnt)" to="(((entryCnt) + cnt) + 1)" />
    <mutant id="mutant_6886" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.length()) - 1)" to="(((p.length()) - 1) + 1)" />
    <mutant id="mutant_5556" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + 16)" to="(((entryCnt) + 16) + 1)" />
    <mutant id="mutant_6887" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.length()) - 1)" to="(((p.length()) - 1) * -1)" />
    <mutant id="mutant_4229" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="(((maxDepth) - (src.depth())) - 1)" />
    <mutant id="mutant_5557" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + 16)" to="(((entryCnt) + 16) - 1)" />
    <mutant id="mutant_6888" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.length()) - 1)" to="(((p.length()) - 1) - 1)" />
    <mutant id="mutant_4228" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="(((maxDepth) - (src.depth())) + 1)" />
    <mutant id="mutant_5558" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + 16)" to="(((entryCnt) + 16) * -1)" />
    <mutant id="mutant_6889" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.charAt(((p.length()) - 1))) == '/') &amp;&amp; (s.startsWith(p))" to="!(((p.charAt(((p.length()) - 1))) == '/') &amp;&amp; (s.startsWith(p)))" />
    <mutant id="mutant_459" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB)))" to="(!((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB))))" />
    <mutant id="mutant_455" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs)) &amp;&amp; (cmp.equals(a, (as - 1), b, (bs - 1)))" to="!((((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs)) &amp;&amp; (cmp.equals(a, (as - 1), b, (bs - 1))))" />
    <mutant id="mutant_456" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="((as - (ptrShift)) + 1)" />
    <mutant id="mutant_457" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="((as - (ptrShift)) - 1)" />
    <mutant id="mutant_6880" viable="false" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) + n)" to="((((TestProtocol.SCHEME) + &quot;://test/conn&quot;) + n) - 1)" />
    <mutant id="mutant_458" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="((as - (ptrShift)) * -1)" />
    <mutant id="mutant_5550" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3) / 2" to="((((entryCnt) + 16) * 3) / 2) + 1" />
    <mutant id="mutant_6881" viable="false" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) + n)" to="((((TestProtocol.SCHEME) + &quot;://test/conn&quot;) + n) * -1)" />
    <mutant id="mutant_4216" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + ((insz + 7) &gt;&gt; 3))" to="((insz + ((insz + 7) &gt;&gt; 3)) * -1)" />
    <mutant id="mutant_5548" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3)" to="((((entryCnt) + 16) * 3) + 1)" />
    <mutant id="mutant_6879" viable="true" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) + n)" to="((((TestProtocol.SCHEME) + &quot;://test/conn&quot;) + n) + 1)" />
    <mutant id="mutant_4215" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 7)" to="((insz + 7) + 1)" />
    <mutant id="mutant_5549" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3)" to="((((entryCnt) + 16) * 3) - 1)" />
    <mutant id="mutant_4214" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 7)" to="((insz + 7) * -1)" />
    <mutant id="mutant_4213" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 7)" to="((insz + 7) - 1)" />
    <mutant id="mutant_4212" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice)" from="((s.beginIndex) &lt;= (cur)) || ((end) &lt;= (s.beginIndex))" to="!(((s.beginIndex) &lt;= (cur)) || ((end) &lt;= (s.beginIndex)))" />
    <mutant id="mutant_4211" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.delta(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((res.size()) - (src.size()))" to="(((res.size()) - (src.size())) * -1)" />
    <mutant id="mutant_4210" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.delta(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((res.size()) - (src.size()))" to="(((res.size()) - (src.size())) + 1)" />
    <mutant id="mutant_451" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - 1)" to="((as - 1) - 1)" />
    <mutant id="mutant_5540" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeO == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_OURS, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" to="!((modeO == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_OURS, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS)))" />
    <mutant id="mutant_6871" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="(buffer.length) - (cnt)" to="((buffer.length) - (cnt)) * -1" />
    <mutant id="mutant_452" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(bs - 1)" to="((bs - 1) * -1)" />
    <mutant id="mutant_5541" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeB == modeO) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_OURS))" to="!((modeB == modeO) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_OURS)))" />
    <mutant id="mutant_6872" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="((cnt) == (SideBandOutputStream.HDR_SIZE)) &amp;&amp; (capacity &lt; len)" to="!(((cnt) == (SideBandOutputStream.HDR_SIZE)) &amp;&amp; (capacity &lt; len))" />
    <mutant id="mutant_453" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(bs - 1)" to="((bs - 1) - 1)" />
    <mutant id="mutant_5542" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeB == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" to="!((modeB == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS)))" />
    <mutant id="mutant_6873" viable="true" in="org.eclipse.jgit.transport.SshTransport.getSession()" from="(getTimeout()) * 1000" to="((getTimeout()) * 1000) + 1" />
    <mutant id="mutant_454" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(bs - 1)" to="((bs - 1) + 1)" />
    <mutant id="mutant_5543" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.nonTree(int)" from="(mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode)))" to="!((mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode))))" />
    <mutant id="mutant_6874" viable="true" in="org.eclipse.jgit.transport.SshTransport.getSession()" from="(getTimeout()) * 1000" to="((getTimeout()) * 1000) * -1" />
    <mutant id="mutant_5544" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) + 16)" to="(((entryCnt) + 16) + 1)" />
    <mutant id="mutant_6875" viable="true" in="org.eclipse.jgit.transport.SshTransport.getSession()" from="(getTimeout()) * 1000" to="((getTimeout()) * 1000) - 1" />
    <mutant id="mutant_4219" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 63)" to="((insz + 63) * -1)" />
    <mutant id="mutant_5545" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) + 16)" to="(((entryCnt) + 16) - 1)" />
    <mutant id="mutant_6876" viable="false" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="((TestProtocol.SCHEME) + &quot;://test/conn&quot;)" to="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) * -1)" />
    <mutant id="mutant_4218" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + ((insz + 7) &gt;&gt; 3))" to="((insz + ((insz + 7) &gt;&gt; 3)) - 1)" />
    <mutant id="mutant_5546" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) + 16)" to="(((entryCnt) + 16) * -1)" />
    <mutant id="mutant_6877" viable="false" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="((TestProtocol.SCHEME) + &quot;://test/conn&quot;)" to="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) - 1)" />
    <mutant id="mutant_450" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - 1)" to="((as - 1) + 1)" />
    <mutant id="mutant_4217" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + ((insz + 7) &gt;&gt; 3))" to="((insz + ((insz + 7) &gt;&gt; 3)) + 1)" />
    <mutant id="mutant_5547" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3)" to="((((entryCnt) + 16) * 3) * -1)" />
    <mutant id="mutant_6878" viable="true" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="((TestProtocol.SCHEME) + &quot;://test/conn&quot;)" to="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) + 1)" />
    <mutant id="mutant_466" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - as)" to="((ae - as) + 1)" />
    <mutant id="mutant_467" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((lcs.getLengthA()) &lt; (ae - as)) || (rc &lt; (cnt))" to="!(((lcs.getLengthA()) &lt; (ae - as)) || (rc &lt; (cnt)))" />
    <mutant id="mutant_468" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(np - (ptrShift))" to="((np - (ptrShift)) * -1)" />
    <mutant id="mutant_469" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(np - (ptrShift))" to="((np - (ptrShift)) + 1)" />
    <mutant id="mutant_6870" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="(buffer.length) - (cnt)" to="((buffer.length) - (cnt)) - 1" />
    <mutant id="mutant_4205" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.finish()" from="((zbuf.length) - (outPtr))" to="(((zbuf.length) - (outPtr)) - 1)" />
    <mutant id="mutant_5537" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.checkout()" from="(toBeDeleted.size()) - 1" to="((toBeDeleted.size()) - 1) * -1" />
    <mutant id="mutant_6868" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream(int,int,java.io.OutputStream)" from="(chan &lt;= 0) || (chan &gt; 255)" to="!((chan &lt;= 0) || (chan &gt; 255))" />
    <mutant id="mutant_4204" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.finish()" from="((zbuf.length) - (outPtr))" to="(((zbuf.length) - (outPtr)) + 1)" />
    <mutant id="mutant_5538" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.checkout()" from="(toBeDeleted.size()) - 1" to="((toBeDeleted.size()) - 1) - 1" />
    <mutant id="mutant_6869" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="(buffer.length) - (cnt)" to="((buffer.length) - (cnt)) + 1" />
    <mutant id="mutant_4203" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.finish()" from="((zbuf.length) - (outPtr))" to="(((zbuf.length) - (outPtr)) * -1)" />
    <mutant id="mutant_5539" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.checkout()" from="(toBeDeleted.size()) - 1" to="((toBeDeleted.size()) - 1) + 1" />
    <mutant id="mutant_4202" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ArrayStream.write(byte[],int,int)" from="((buf.length) - (cnt))" to="(((buf.length) - (cnt)) - 1)" />
    <mutant id="mutant_4201" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ArrayStream.write(byte[],int,int)" from="((buf.length) - (cnt))" to="(((buf.length) - (cnt)) + 1)" />
    <mutant id="mutant_4200" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ArrayStream.write(byte[],int,int)" from="((buf.length) - (cnt))" to="(((buf.length) - (cnt)) * -1)" />
    <mutant id="mutant_462" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - (ptrShift))" to="((ae - (ptrShift)) * -1)" />
    <mutant id="mutant_6860" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(progressBuffer) + pkt" to="((progressBuffer) + pkt) - 1" />
    <mutant id="mutant_463" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - (ptrShift))" to="((ae - (ptrShift)) - 1)" />
    <mutant id="mutant_5530" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT))" to="!((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" />
    <mutant id="mutant_6861" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(0 &lt;= lf) &amp;&amp; (0 &lt;= cr)" to="!((0 &lt;= lf) &amp;&amp; (0 &lt;= cr))" />
    <mutant id="mutant_464" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - as)" to="((ae - as) * -1)" />
    <mutant id="mutant_5531" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeO)) || (org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeT))" to="!((org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeO)) || (org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeT)))" />
    <mutant id="mutant_6862" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="((s + 1) + 1)" />
    <mutant id="mutant_465" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - as)" to="((ae - as) - 1)" />
    <mutant id="mutant_5532" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(result.containsConflicts()) &amp;&amp; (!ignoreConflicts)" to="!((result.containsConflicts()) &amp;&amp; (!ignoreConflicts))" />
    <mutant id="mutant_6863" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="((s + 1) * -1)" />
    <mutant id="mutant_4209" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.delta(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((res.size()) - (src.size()))" to="(((res.size()) - (src.size())) - 1)" />
    <mutant id="mutant_5533" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))))" to="(!((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS)))))" />
    <mutant id="mutant_6864" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="((s + 1) - 1)" />
    <mutant id="mutant_4208" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.write(byte[],int,int)" from="((zbuf.length) - (outPtr))" to="(((zbuf.length) - (outPtr)) - 1)" />
    <mutant id="mutant_5534" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" to="(!((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS)))))" />
    <mutant id="mutant_6865" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="((s + 1) + 1)" />
    <mutant id="mutant_460" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB))) &amp;&amp; (cmp.equals(a, ae, b, be))" to="!(((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB))) &amp;&amp; (cmp.equals(a, ae, b, be)))" />
    <mutant id="mutant_4207" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.write(byte[],int,int)" from="((zbuf.length) - (outPtr))" to="(((zbuf.length) - (outPtr)) + 1)" />
    <mutant id="mutant_5535" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS)))) || ((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" to="!(((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS)))) || ((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS)))))" />
    <mutant id="mutant_6866" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="((s + 1) * -1)" />
    <mutant id="mutant_461" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - (ptrShift))" to="((ae - (ptrShift)) + 1)" />
    <mutant id="mutant_4206" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.write(byte[],int,int)" from="((zbuf.length) - (outPtr))" to="(((zbuf.length) - (outPtr)) * -1)" />
    <mutant id="mutant_5536" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.add(byte[],org.eclipse.jgit.treewalk.CanonicalTreeParser,int,long,long)" from="(p != null) &amp;&amp; (!(p.getEntryFileMode().equals(org.eclipse.jgit.lib.FileMode.TREE)))" to="!((p != null) &amp;&amp; (!(p.getEntryFileMode().equals(org.eclipse.jgit.lib.FileMode.TREE))))" />
    <mutant id="mutant_6867" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="((s + 1) - 1)" />
    <mutant id="mutant_477" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(d + k)" to="((d + k) - 1)" />
    <mutant id="mutant_478" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(d + k)" to="((d + k) * -1)" />
    <mutant id="mutant_479" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="((d + k) - (forward.middleK))" to="(((d + k) - (forward.middleK)) * -1)" />
    <mutant id="mutant_5526" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(modeT == 0) &amp;&amp; (modeB != 0)" to="!((modeT == 0) &amp;&amp; (modeB != 0))" />
    <mutant id="mutant_6857" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="((SideBandInputStream.PFX_REMOTE) + (readString(available)))" to="(((SideBandInputStream.PFX_REMOTE) + (readString(available))) - 1)" />
    <mutant id="mutant_5527" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((tw.getTreeCount()) &gt; (ResolveMerger.T_FILE)) &amp;&amp; ((tw.getRawMode(ResolveMerger.T_FILE)) == 0)" to="!(((tw.getTreeCount()) &gt; (ResolveMerger.T_FILE)) &amp;&amp; ((tw.getRawMode(ResolveMerger.T_FILE)) == 0))" />
    <mutant id="mutant_6858" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(progressBuffer) + pkt" to="((progressBuffer) + pkt) + 1" />
    <mutant id="mutant_5528" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" to="!((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT))))" />
    <mutant id="mutant_6859" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(progressBuffer) + pkt" to="((progressBuffer) + pkt) * -1" />
    <mutant id="mutant_5529" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)))" to="!((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO))))" />
    <mutant id="mutant_473" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(maxChainLength) + 1" to="((maxChainLength) + 1) * -1" />
    <mutant id="mutant_474" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(hasCommon) &amp;&amp; ((maxChainLength) &lt; (cnt))" to="!((hasCommon) &amp;&amp; ((maxChainLength) &lt; (cnt)))" />
    <mutant id="mutant_6850" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="((cnt - (lastCnt)) - 1)" />
    <mutant id="mutant_475" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(k &lt; (forward.beginK)) || (k &gt; (forward.endK))" to="!((k &lt; (forward.beginK)) || (k &gt; (forward.endK)))" />
    <mutant id="mutant_5520" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(index == null) || ((index.getDirCacheEntry()) == null)" to="!((index == null) || ((index.getDirCacheEntry()) == null))" />
    <mutant id="mutant_6851" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="((cnt - (lastCnt)) * -1)" />
    <mutant id="mutant_476" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(d + k)" to="((d + k) + 1)" />
    <mutant id="mutant_5521" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" to="(!((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT))))" />
    <mutant id="mutant_6852" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="((cnt - (lastCnt)) + 1)" />
    <mutant id="mutant_5522" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((ResolveMerger.nonTree(modeO)) &amp;&amp; (ResolveMerger.nonTree(modeT))) &amp;&amp; (tw.idEqual(ResolveMerger.T_OURS, ResolveMerger.T_THEIRS))" to="!(((ResolveMerger.nonTree(modeO)) &amp;&amp; (ResolveMerger.nonTree(modeT))) &amp;&amp; (tw.idEqual(ResolveMerger.T_OURS, ResolveMerger.T_THEIRS)))" />
    <mutant id="mutant_6853" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="(((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0))" to="(!(((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0)))" />
    <mutant id="mutant_470" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(np - (ptrShift))" to="((np - (ptrShift)) - 1)" />
    <mutant id="mutant_5523" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT))" to="(!((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT)))" />
    <mutant id="mutant_6854" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="(eof) || (((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0))" to="!((eof) || (((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0)))" />
    <mutant id="mutant_471" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(maxChainLength) + 1" to="((maxChainLength) + 1) + 1" />
    <mutant id="mutant_5524" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT)) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))" to="!(((ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT)) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS)))" />
    <mutant id="mutant_6855" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="((SideBandInputStream.PFX_REMOTE) + (readString(available)))" to="(((SideBandInputStream.PFX_REMOTE) + (readString(available))) + 1)" />
    <mutant id="mutant_472" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(maxChainLength) + 1" to="((maxChainLength) + 1) - 1" />
    <mutant id="mutant_5525" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(modeB == modeO) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))" to="!((modeB == modeO) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS)))" />
    <mutant id="mutant_6856" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="((SideBandInputStream.PFX_REMOTE) + (readString(available)))" to="(((SideBandInputStream.PFX_REMOTE) + (readString(available))) * -1)" />
    <mutant id="mutant_488" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="((k + x) - 1)" />
    <mutant id="mutant_489" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="((k + x) * -1)" />
    <mutant id="mutant_4274" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="(((loaded) + need) * -1)" />
    <mutant id="mutant_4273" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="(((loaded) + need) - 1)" />
    <mutant id="mutant_4272" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="(((loaded) + need) + 1)" />
    <mutant id="mutant_4271" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="(((loaded) + need) * -1)" />
    <mutant id="mutant_4270" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="(((loaded) + need) - 1)" />
    <mutant id="mutant_4269" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_4268" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_4267" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_4266" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split - 1" to="(split - 1) * -1" />
    <mutant id="mutant_4265" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split - 1" to="(split - 1) + 1" />
    <mutant id="mutant_4264" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split - 1" to="(split - 1) - 1" />
    <mutant id="mutant_484" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(((d + k) - (forward.middleK)) % 2)" to="((((d + k) - (forward.middleK)) % 2) + 1)" />
    <mutant id="mutant_5595" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + 1)" to="((low + 1) - 1)" />
    <mutant id="mutant_485" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.getLeft(int)" from="x - 1" to="(x - 1) * -1" />
    <mutant id="mutant_5596" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + 1)" to="((low + 1) * -1)" />
    <mutant id="mutant_486" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.getLeft(int)" from="x - 1" to="(x - 1) - 1" />
    <mutant id="mutant_5597" viable="true" in="org.eclipse.jgit.dircache.DirCache.nextEntry(int)" from="position + 1" to="(position + 1) - 1" />
    <mutant id="mutant_487" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.getLeft(int)" from="x - 1" to="(x - 1) + 1" />
    <mutant id="mutant_5598" viable="true" in="org.eclipse.jgit.dircache.DirCache.nextEntry(int)" from="position + 1" to="(position + 1) * -1" />
    <mutant id="mutant_480" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="((d + k) - (forward.middleK))" to="(((d + k) - (forward.middleK)) + 1)" />
    <mutant id="mutant_5599" viable="true" in="org.eclipse.jgit.dircache.DirCache.nextEntry(int)" from="position + 1" to="(position + 1) + 1" />
    <mutant id="mutant_481" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="((d + k) - (forward.middleK))" to="(((d + k) - (forward.middleK)) - 1)" />
    <mutant id="mutant_482" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(((d + k) - (forward.middleK)) % 2)" to="((((d + k) - (forward.middleK)) % 2) - 1)" />
    <mutant id="mutant_483" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(((d + k) - (forward.middleK)) % 2)" to="((((d + k) - (forward.middleK)) % 2) * -1)" />
    <mutant id="mutant_5590" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid &gt; 0) &amp;&amp; ((org.eclipse.jgit.dircache.DirCache.cmp(p, pLen, sortedEntries[(mid - 1)])) == 0)" to="!((mid &gt; 0) &amp;&amp; ((org.eclipse.jgit.dircache.DirCache.cmp(p, pLen, sortedEntries[(mid - 1)])) == 0))" />
    <mutant id="mutant_499" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="((k + x) - 1)" to="(((k + x) - 1) - 1)" />
    <mutant id="mutant_5591" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="mid + 1" to="(mid + 1) * -1" />
    <mutant id="mutant_5592" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="mid + 1" to="(mid + 1) + 1" />
    <mutant id="mutant_5593" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="mid + 1" to="(mid + 1) - 1" />
    <mutant id="mutant_5594" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + 1)" to="((low + 1) + 1)" />
    <mutant id="mutant_4263" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split + 1" to="(split + 1) * -1" />
    <mutant id="mutant_4262" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split + 1" to="(split + 1) - 1" />
    <mutant id="mutant_4261" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split + 1" to="(split + 1) + 1" />
    <mutant id="mutant_4260" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="e - halfRemaining" to="(e - halfRemaining) + 1" />
    <mutant id="mutant_4259" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="e - halfRemaining" to="(e - halfRemaining) - 1" />
    <mutant id="mutant_4258" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="e - halfRemaining" to="(e - halfRemaining) * -1" />
    <mutant id="mutant_490" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="((k + x) + 1)" />
    <mutant id="mutant_4257" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(e - (cur))" to="((e - (cur)) + 1)" />
    <mutant id="mutant_4256" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(e - (cur))" to="((e - (cur)) - 1)" />
    <mutant id="mutant_4255" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(e - (cur))" to="((e - (cur)) * -1)" />
    <mutant id="mutant_4254" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.index(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(idx.getIndexSize()) - (idx.getSourceSize())" to="((idx.getIndexSize()) - (idx.getSourceSize())) - 1" />
    <mutant id="mutant_4253" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.index(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(idx.getIndexSize()) - (idx.getSourceSize())" to="((idx.getIndexSize()) - (idx.getSourceSize())) + 1" />
    <mutant id="mutant_495" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="((k + x) - 1)" />
    <mutant id="mutant_5584" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + high)" to="((low + high) + 1)" />
    <mutant id="mutant_496" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="((k + x) * -1)" />
    <mutant id="mutant_5585" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + high)" to="((low + high) * -1)" />
    <mutant id="mutant_497" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="((k + x) + 1)" />
    <mutant id="mutant_5586" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + high)" to="((low + high) - 1)" />
    <mutant id="mutant_498" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="((k + x) - 1)" to="(((k + x) - 1) * -1)" />
    <mutant id="mutant_5587" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid - 1)" to="((mid - 1) - 1)" />
    <mutant id="mutant_491" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x &gt; (beginA)) &amp;&amp; ((k + x) &gt; (beginB))" to="!((x &gt; (beginA)) &amp;&amp; ((k + x) &gt; (beginB)))" />
    <mutant id="mutant_5588" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid - 1)" to="((mid - 1) * -1)" />
    <mutant id="mutant_492" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x - 1)" to="((x - 1) * -1)" />
    <mutant id="mutant_5589" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid - 1)" to="((mid - 1) + 1)" />
    <mutant id="mutant_493" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x - 1)" to="((x - 1) - 1)" />
    <mutant id="mutant_494" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x - 1)" to="((x - 1) + 1)" />
    <mutant id="mutant_5580" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="((aPath[cPos]) &amp; 255) - ((bPath[cPos]) &amp; 255)" to="(((aPath[cPos]) &amp; 255) - ((bPath[cPos]) &amp; 255)) * -1" />
    <mutant id="mutant_5581" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="aLen - bLen" to="(aLen - bLen) + 1" />
    <mutant id="mutant_5582" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="aLen - bLen" to="(aLen - bLen) * -1" />
    <mutant id="mutant_5583" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="aLen - bLen" to="(aLen - bLen) - 1" />
    <mutant id="mutant_4252" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.index(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(idx.getIndexSize()) - (idx.getSourceSize())" to="((idx.getIndexSize()) - (idx.getSourceSize())) * -1" />
    <mutant id="mutant_4251" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.estimateIndexSize(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(DeltaIndex.estimateIndexSize(len)) - len" to="((DeltaIndex.estimateIndexSize(len)) - len) + 1" />
    <mutant id="mutant_4250" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.estimateIndexSize(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(DeltaIndex.estimateIndexSize(len)) - len" to="((DeltaIndex.estimateIndexSize(len)) - len) * -1" />
    <mutant id="mutant_4249" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.estimateIndexSize(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(DeltaIndex.estimateIndexSize(len)) - len" to="((DeltaIndex.estimateIndexSize(len)) - len) - 1" />
    <mutant id="mutant_4248" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / ((maxDepth) - d)" to="((n * ((maxDepth) - (src.depth()))) / ((maxDepth) - d)) - 1" />
    <mutant id="mutant_4247" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / ((maxDepth) - d)" to="((n * ((maxDepth) - (src.depth()))) / ((maxDepth) - d)) * -1" />
    <mutant id="mutant_4246" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / ((maxDepth) - d)" to="((n * ((maxDepth) - (src.depth()))) / ((maxDepth) - d)) + 1" />
    <mutant id="mutant_4245" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - d)" to="(((maxDepth) - d) - 1)" />
    <mutant id="mutant_4244" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - d)" to="(((maxDepth) - d) * -1)" />
    <mutant id="mutant_4243" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - d)" to="(((maxDepth) - d) + 1)" />
    <mutant id="mutant_4242" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="((n * ((maxDepth) - (src.depth()))) + 1)" />
    <mutant id="mutant_5573" viable="true" in="org.eclipse.jgit.dircache.DirCache$1.compare(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.dircache.DirCacheEntry)" from="(o1.getStage()) - (o2.getStage())" to="((o1.getStage()) - (o2.getStage())) - 1" />
    <mutant id="mutant_5574" viable="true" in="org.eclipse.jgit.dircache.DirCache.commit()" from="((indexChangedListener) != null) &amp;&amp; (!(Arrays.equals(readIndexChecksum, writeIndexChecksum)))" to="!(((indexChangedListener) != null) &amp;&amp; (!(Arrays.equals(readIndexChecksum, writeIndexChecksum))))" />
    <mutant id="mutant_5575" viable="true" in="org.eclipse.jgit.dircache.DirCache.isOutdated()" from="((liveFile) == null) || (!(liveFile.exists()))" to="!(((liveFile) == null) || (!(liveFile.exists())))" />
    <mutant id="mutant_5576" viable="true" in="org.eclipse.jgit.dircache.DirCache.isOutdated()" from="((snapshot) == null) || (snapshot.isModified(liveFile))" to="!(((snapshot) == null) || (snapshot.isModified(liveFile)))" />
    <mutant id="mutant_5577" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="!((cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen))" />
    <mutant id="mutant_5578" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="((aPath[cPos]) &amp; 255) - ((bPath[cPos]) &amp; 255)" to="(((aPath[cPos]) &amp; 255) - ((bPath[cPos]) &amp; 255)) + 1" />
    <mutant id="mutant_5579" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="((aPath[cPos]) &amp; 255) - ((bPath[cPos]) &amp; 255)" to="(((aPath[cPos]) &amp; 255) - ((bPath[cPos]) &amp; 255)) - 1" />
    <mutant id="mutant_5570" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.replace()" from="((entries.length) / 2)" to="(((entries.length) / 2) * -1)" />
    <mutant id="mutant_5571" viable="true" in="org.eclipse.jgit.dircache.DirCache$1.compare(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.dircache.DirCacheEntry)" from="(o1.getStage()) - (o2.getStage())" to="((o1.getStage()) - (o2.getStage())) * -1" />
    <mutant id="mutant_5572" viable="true" in="org.eclipse.jgit.dircache.DirCache$1.compare(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.dircache.DirCacheEntry)" from="(o1.getStage()) - (o2.getStage())" to="((o1.getStage()) - (o2.getStage())) + 1" />
    <mutant id="mutant_4241" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="((n * ((maxDepth) - (src.depth()))) - 1)" />
    <mutant id="mutant_4240" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="((n * ((maxDepth) - (src.depth()))) * -1)" />
    <mutant id="mutant_4238" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="(((maxDepth) - (src.depth())) - 1)" />
    <mutant id="mutant_4237" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="(((maxDepth) - (src.depth())) + 1)" />
    <mutant id="mutant_4236" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / (maxDepth)" to="((n * ((maxDepth) - (src.depth()))) / (maxDepth)) + 1" />
    <mutant id="mutant_4235" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / (maxDepth)" to="((n * ((maxDepth) - (src.depth()))) / (maxDepth)) - 1" />
    <mutant id="mutant_4234" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / (maxDepth)" to="((n * ((maxDepth) - (src.depth()))) / (maxDepth)) * -1" />
    <mutant id="mutant_4233" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="((n * ((maxDepth) - (src.depth()))) + 1)" />
    <mutant id="mutant_4232" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="((n * ((maxDepth) - (src.depth()))) - 1)" />
    <mutant id="mutant_4231" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="((n * ((maxDepth) - (src.depth()))) * -1)" />
    <mutant id="mutant_5562" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3) / 2" to="((((entryCnt) + 16) * 3) / 2) + 1" />
    <mutant id="mutant_6893" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(kindEnd + 1)" to="((kindEnd + 1) + 1)" />
    <mutant id="mutant_5563" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3) / 2" to="((((entryCnt) + 16) * 3) / 2) - 1" />
    <mutant id="mutant_6894" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(kindEnd + 1)" to="((kindEnd + 1) * -1)" />
    <mutant id="mutant_5564" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3) / 2" to="((((entryCnt) + 16) * 3) / 2) * -1" />
    <mutant id="mutant_6895" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(kindEnd + 1)" to="((kindEnd + 1) - 1)" />
    <mutant id="mutant_5565" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(entryCnt) + cnt" to="((entryCnt) + cnt) - 1" />
    <mutant id="mutant_6896" viable="false" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(n.substring(0, (kindEnd + 1))) + destSpec" to="((n.substring(0, (kindEnd + 1))) + destSpec) * -1" />
    <mutant id="mutant_5566" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(entryCnt) + cnt" to="((entryCnt) + cnt) * -1" />
    <mutant id="mutant_6897" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(n.substring(0, (kindEnd + 1))) + destSpec" to="((n.substring(0, (kindEnd + 1))) + destSpec) + 1" />
    <mutant id="mutant_5567" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(entryCnt) + cnt" to="((entryCnt) + cnt) + 1" />
    <mutant id="mutant_6898" viable="false" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(n.substring(0, (kindEnd + 1))) + destSpec" to="((n.substring(0, (kindEnd + 1))) + destSpec) - 1" />
    <mutant id="mutant_5568" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.replace()" from="((entries.length) / 2)" to="(((entries.length) / 2) + 1)" />
    <mutant id="mutant_6899" viable="false" in="org.eclipse.jgit.transport.Transport.catalogs(java.lang.ClassLoader)" from="prefix + (Transport.class.getName())" to="(prefix + (Transport.class.getName())) - 1" />
    <mutant id="mutant_4239" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="(((maxDepth) - (src.depth())) * -1)" />
    <mutant id="mutant_5569" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.replace()" from="((entries.length) / 2)" to="(((entries.length) / 2) - 1)" />
    <mutant id="mutant_4299" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + 1)" to="((low + 1) + 1)" />
    <mutant id="mutant_4298" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(set.length) * 2" to="((set.length) * 2) + 1" />
    <mutant id="mutant_4297" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(set.length) * 2" to="((set.length) * 2) * -1" />
    <mutant id="mutant_4296" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(set.length) * 2" to="((set.length) * 2) - 1" />
    <mutant id="mutant_4295" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="p + 1" to="(p + 1) + 1" />
    <mutant id="mutant_4294" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="p + 1" to="(p + 1) * -1" />
    <mutant id="mutant_4293" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="p + 1" to="(p + 1) - 1" />
    <mutant id="mutant_4292" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + high)" to="((low + high) - 1)" />
    <mutant id="mutant_4291" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + high)" to="((low + high) * -1)" />
    <mutant id="mutant_4290" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + high)" to="((low + high) + 1)" />
    <mutant id="mutant_4289" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.searchInWindow()" from="(srcObj.getDeltaDepth()) + 1" to="((srcObj.getDeltaDepth()) + 1) * -1" />
    <mutant id="mutant_4288" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.searchInWindow()" from="(srcObj.getDeltaDepth()) + 1" to="((srcObj.getDeltaDepth()) + 1) - 1" />
    <mutant id="mutant_4287" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.searchInWindow()" from="(srcObj.getDeltaDepth()) + 1" to="((srcObj.getDeltaDepth()) + 1) + 1" />
    <mutant id="mutant_4286" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="d * (bytesPerUnit)" to="(d * (bytesPerUnit)) * -1" />
    <mutant id="mutant_4285" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="d * (bytesPerUnit)" to="(d * (bytesPerUnit)) - 1" />
    <mutant id="mutant_4284" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="d * (bytesPerUnit)" to="(d * (bytesPerUnit)) + 1" />
    <mutant id="mutant_4283" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((int)((bytesProcessed) / (bytesPerUnit)))" to="((int)(((bytesProcessed) / (bytesPerUnit)))) * -1" />
    <mutant id="mutant_4282" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((int)((bytesProcessed) / (bytesPerUnit)))" to="((int)(((bytesProcessed) / (bytesPerUnit)))) - 1" />
    <mutant id="mutant_4281" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((int)((bytesProcessed) / (bytesPerUnit)))" to="((int)(((bytesProcessed) / (bytesPerUnit)))) + 1" />
    <mutant id="mutant_4280" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="(res.object.isEdge()) || (res.object.doNotAttemptDelta())" to="!((res.object.isEdge()) || (res.object.doNotAttemptDelta()))" />
    <mutant id="mutant_4279" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((maxMemory) &lt; ((loaded) + need)) &amp;&amp; (n != (res))" to="!(((maxMemory) &lt; ((loaded) + need)) &amp;&amp; (n != (res)))" />
    <mutant id="mutant_4278" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((loaded) + need)" to="(((loaded) + need) + 1)" />
    <mutant id="mutant_4277" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((loaded) + need)" to="(((loaded) + need) * -1)" />
    <mutant id="mutant_4276" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((loaded) + need)" to="(((loaded) + need) - 1)" />
    <mutant id="mutant_4275" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="(((loaded) + need) + 1)" />
    <mutant id="mutant_9120" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_9121" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 2)" to="((p + 2) - 1)" />
    <mutant id="mutant_9124" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 3)" to="((p + 3) + 1)" />
    <mutant id="mutant_9125" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 3)" to="((p + 3) * -1)" />
    <mutant id="mutant_9122" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 2)" to="((p + 2) + 1)" />
    <mutant id="mutant_9123" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 2)" to="((p + 2) * -1)" />
    <mutant id="mutant_9117" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="((r * 10) + v) + 1" />
    <mutant id="mutant_9118" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_9115" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="((r * 10) + v) * -1" />
    <mutant id="mutant_9116" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="((r * 10) + v) - 1" />
    <mutant id="mutant_9119" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_9110" viable="true" in="org.eclipse.jgit.util.RawParseUtils.nextLF(byte[],int,char)" from="(c == chrA) || (c == '\n')" to="!((c == chrA) || (c == '\n'))" />
    <mutant id="mutant_9113" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="((r * 10) * -1)" />
    <mutant id="mutant_9114" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="((r * 10) - 1)" />
    <mutant id="mutant_9111" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' ')" to="!((ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' '))" />
    <mutant id="mutant_9112" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="((r * 10) + 1)" />
    <mutant id="mutant_9106" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(byte[],char,int)" from="(pos &gt;= 0) &amp;&amp; ((raw[pos]) != ch)" to="!((pos &gt;= 0) &amp;&amp; ((raw[pos]) != ch))" />
    <mutant id="mutant_9107" viable="true" in="org.eclipse.jgit.util.RawParseUtils.match(byte[],int,byte[])" from="(ptr + (src.length))" to="((ptr + (src.length)) + 1)" />
    <mutant id="mutant_9104" viable="true" in="org.eclipse.jgit.util.RawParseUtils.formatBase10(byte[],int,int)" from="(value % 10)" to="((value % 10) - 1)" />
    <mutant id="mutant_9105" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(byte[],char,int)" from="(pos &gt;= 0) &amp;&amp; ((raw[pos]) == ' ')" to="!((pos &gt;= 0) &amp;&amp; ((raw[pos]) == ' '))" />
    <mutant id="mutant_9108" viable="true" in="org.eclipse.jgit.util.RawParseUtils.match(byte[],int,byte[])" from="(ptr + (src.length))" to="((ptr + (src.length)) * -1)" />
    <mutant id="mutant_9109" viable="true" in="org.eclipse.jgit.util.RawParseUtils.match(byte[],int,byte[])" from="(ptr + (src.length))" to="((ptr + (src.length)) - 1)" />
    <mutant id="mutant_9102" viable="true" in="org.eclipse.jgit.util.RawParseUtils.formatBase10(byte[],int,int)" from="(value % 10)" to="((value % 10) * -1)" />
    <mutant id="mutant_9103" viable="true" in="org.eclipse.jgit.util.RawParseUtils.formatBase10(byte[],int,int)" from="(value % 10)" to="((value % 10) + 1)" />
    <mutant id="mutant_9100" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="((ptr - 1) + 1)" />
    <mutant id="mutant_9101" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\r')" to="!((ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\r'))" />
    <mutant id="mutant_9164" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="ptr + 1" to="(ptr + 1) - 1" />
    <mutant id="mutant_9165" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="ptr + 1" to="(ptr + 1) + 1" />
    <mutant id="mutant_9162" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) != '\n')" to="!((ptr &lt; sz) &amp;&amp; ((b[ptr]) != '\n'))" />
    <mutant id="mutant_9163" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == '\n')" to="!((ptr &lt; sz) &amp;&amp; ((b[ptr]) == '\n'))" />
    <mutant id="mutant_9168" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(end - start)" to="((end - start) - 1)" />
    <mutant id="mutant_9169" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(end - start)" to="((end - start) * -1)" />
    <mutant id="mutant_9166" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="ptr + 1" to="(ptr + 1) * -1" />
    <mutant id="mutant_9167" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(end - start)" to="((end - start) + 1)" />
    <mutant id="mutant_9160" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60) + tzMins" to="((tzHours * 60) + tzMins) + 1" />
    <mutant id="mutant_9161" viable="true" in="org.eclipse.jgit.util.RawParseUtils.prevLF(byte[],int,char)" from="(c == chrA) || (c == '\n')" to="!((c == chrA) || (c == '\n'))" />
    <mutant id="mutant_9159" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60) + tzMins" to="((tzHours * 60) + tzMins) * -1" />
    <mutant id="mutant_9153" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v / 100" to="(v / 100) + 1" />
    <mutant id="mutant_9154" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v / 100" to="(v / 100) * -1" />
    <mutant id="mutant_9151" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v % 100" to="(v % 100) - 1" />
    <mutant id="mutant_9152" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v / 100" to="(v / 100) - 1" />
    <mutant id="mutant_9157" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60)" to="((tzHours * 60) + 1)" />
    <mutant id="mutant_9158" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60) + tzMins" to="((tzHours * 60) + tzMins) - 1" />
    <mutant id="mutant_9155" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60)" to="((tzHours * 60) - 1)" />
    <mutant id="mutant_9156" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60)" to="((tzHours * 60) * -1)" />
    <mutant id="mutant_9150" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v % 100" to="(v % 100) * -1" />
    <mutant id="mutant_9148" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(r &lt; 0) || (last &lt; 0)" to="!((r &lt; 0) || (last &lt; 0))" />
    <mutant id="mutant_9149" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v % 100" to="(v % 100) + 1" />
    <mutant id="mutant_9142" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 6)" to="((p + 6) + 1)" />
    <mutant id="mutant_9143" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 6)" to="((p + 6) - 1)" />
    <mutant id="mutant_9140" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 5)" to="((p + 5) * -1)" />
    <mutant id="mutant_9141" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 5)" to="((p + 5) + 1)" />
    <mutant id="mutant_9146" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 7)" to="((p + 7) - 1)" />
    <mutant id="mutant_9147" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 7)" to="((p + 7) + 1)" />
    <mutant id="mutant_9144" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 6)" to="((p + 6) * -1)" />
    <mutant id="mutant_9145" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 7)" to="((p + 7) * -1)" />
    <mutant id="mutant_9139" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 5)" to="((p + 5) - 1)" />
    <mutant id="mutant_9137" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 4)" to="((p + 4) - 1)" />
    <mutant id="mutant_9138" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 4)" to="((p + 4) + 1)" />
    <mutant id="mutant_9131" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 2)" to="((p + 2) + 1)" />
    <mutant id="mutant_9132" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 2)" to="((p + 2) * -1)" />
    <mutant id="mutant_9130" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 2)" to="((p + 2) - 1)" />
    <mutant id="mutant_9135" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 3)" to="((p + 3) - 1)" />
    <mutant id="mutant_9136" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 4)" to="((p + 4) * -1)" />
    <mutant id="mutant_9133" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 3)" to="((p + 3) + 1)" />
    <mutant id="mutant_9134" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 3)" to="((p + 3) * -1)" />
    <mutant id="mutant_9128" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_9129" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_9126" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 3)" to="((p + 3) - 1)" />
    <mutant id="mutant_9127" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_6923" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="((n.length()) - 5)" to="(((n.length()) - 5) + 1)" />
    <mutant id="mutant_6924" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="((n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;) + 1" />
    <mutant id="mutant_6925" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="((n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;) * -1" />
    <mutant id="mutant_6926" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="((n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;) - 1" />
    <mutant id="mutant_6927" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readRef(java.util.TreeMap,java.lang.String)" from="(WalkRemoteObjectDatabase.ROOT_DIR) + rn" to="((WalkRemoteObjectDatabase.ROOT_DIR) + rn) * -1" />
    <mutant id="mutant_6928" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readRef(java.util.TreeMap,java.lang.String)" from="(WalkRemoteObjectDatabase.ROOT_DIR) + rn" to="((WalkRemoteObjectDatabase.ROOT_DIR) + rn) + 1" />
    <mutant id="mutant_6929" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readRef(java.util.TreeMap,java.lang.String)" from="(WalkRemoteObjectDatabase.ROOT_DIR) + rn" to="((WalkRemoteObjectDatabase.ROOT_DIR) + rn) - 1" />
    <mutant id="mutant_6920" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;)))" to="!((!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;))))" />
    <mutant id="mutant_6921" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="((n.length()) - 5)" to="(((n.length()) - 5) * -1)" />
    <mutant id="mutant_6922" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="((n.length()) - 5)" to="(((n.length()) - 5) - 1)" />
    <mutant id="mutant_9197" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="((emailB - 2) * -1)" />
    <mutant id="mutant_9198" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="((emailB - 2) + 1)" />
    <mutant id="mutant_9195" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="((emailB - 2) + 1)" />
    <mutant id="mutant_9196" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="((emailB - 2) - 1)" />
    <mutant id="mutant_9199" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB - 2) &gt;= nameB) &amp;&amp; ((raw[(emailB - 2)]) == ' ')" to="!(((emailB - 2) &gt;= nameB) &amp;&amp; ((raw[(emailB - 2)]) == ' '))" />
    <mutant id="mutant_9190" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="((emailE - 1) + 1)" />
    <mutant id="mutant_9193" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="((emailB - 2) - 1)" />
    <mutant id="mutant_9194" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="((emailB - 2) * -1)" />
    <mutant id="mutant_9191" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;'))" to="(!((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;')))" />
    <mutant id="mutant_9192" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n')) || ((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;'))" to="!(((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n')) || ((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;')))" />
    <mutant id="mutant_6912" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="((subpath.length()) - 1)" to="(((subpath.length()) - 1) * -1)" />
    <mutant id="mutant_6913" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="((subpath.length()) - 1)" to="(((subpath.length()) - 1) - 1)" />
    <mutant id="mutant_6914" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;)" to="((k + &quot;/&quot;) + 1)" />
    <mutant id="mutant_6915" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;)" to="((k + &quot;/&quot;) - 1)" />
    <mutant id="mutant_6916" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;)" to="((k + &quot;/&quot;) * -1)" />
    <mutant id="mutant_6917" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;) + subpath" to="((k + &quot;/&quot;) + subpath) * -1" />
    <mutant id="mutant_6918" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;) + subpath" to="((k + &quot;/&quot;) + subpath) - 1" />
    <mutant id="mutant_6919" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;) + subpath" to="((k + &quot;/&quot;) + subpath) + 1" />
    <mutant id="mutant_6910" viable="true" in="org.eclipse.jgit.transport.Transport.unregister(org.eclipse.jgit.transport.TransportProtocol)" from="(refProto == null) || (refProto == proto)" to="!((refProto == null) || (refProto == proto))" />
    <mutant id="mutant_6911" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="((subpath.length()) - 1)" to="(((subpath.length()) - 1) + 1)" />
    <mutant id="mutant_9186" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((raw.length) - 1)" to="(((raw.length) - 1) - 1)" />
    <mutant id="mutant_9187" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((raw.length) - 1)" to="(((raw.length) - 1) + 1)" />
    <mutant id="mutant_9184" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n'))" to="(!((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n')))" />
    <mutant id="mutant_9185" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((raw.length) - 1)" to="(((raw.length) - 1) * -1)" />
    <mutant id="mutant_9188" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="((emailE - 1) - 1)" />
    <mutant id="mutant_9189" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="((emailE - 1) * -1)" />
    <mutant id="mutant_6909" viable="true" in="org.eclipse.jgit.transport.Transport.setOptionUploadPack(java.lang.String)" from="(where != null) &amp;&amp; ((where.length()) &gt; 0)" to="!((where != null) &amp;&amp; ((where.length()) &gt; 0))" />
    <mutant id="mutant_9182" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="((r * 10) + v) + 1" />
    <mutant id="mutant_9183" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="((r * 10) + v) - 1" />
    <mutant id="mutant_9180" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="((r * 10) - 1)" />
    <mutant id="mutant_9181" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="((r * 10) + v) * -1" />
    <mutant id="mutant_6901" viable="false" in="org.eclipse.jgit.transport.Transport.catalogs(java.lang.ClassLoader)" from="prefix + (Transport.class.getName())" to="(prefix + (Transport.class.getName())) * -1" />
    <mutant id="mutant_6902" viable="true" in="org.eclipse.jgit.transport.Transport.fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)" from="(toFetch == null) || (toFetch.isEmpty())" to="!((toFetch == null) || (toFetch.isEmpty()))" />
    <mutant id="mutant_6903" viable="true" in="org.eclipse.jgit.transport.Transport.fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)" from="(cfgSrc.equals(reqSrc)) &amp;&amp; (cfgDst != null)" to="!((cfgSrc.equals(reqSrc)) &amp;&amp; (cfgDst != null))" />
    <mutant id="mutant_6904" viable="true" in="org.eclipse.jgit.transport.Transport.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.io.OutputStream)" from="(toPush == null) || (toPush.isEmpty())" to="!((toPush == null) || (toPush.isEmpty()))" />
    <mutant id="mutant_6905" viable="true" in="org.eclipse.jgit.transport.Transport.load(java.lang.ClassLoader,java.lang.String)" from="(((f.getModifiers()) &amp; (Modifier.STATIC)) == (Modifier.STATIC)) &amp;&amp; (TransportProtocol.class.isAssignableFrom(f.getType()))" to="!((((f.getModifiers()) &amp; (Modifier.STATIC)) == (Modifier.STATIC)) &amp;&amp; (TransportProtocol.class.isAssignableFrom(f.getType())))" />
    <mutant id="mutant_6906" viable="true" in="org.eclipse.jgit.transport.Transport.setCheckFetchedObjects(boolean)" from="check &amp;&amp; ((objectChecker) == null)" to="!(check &amp;&amp; ((objectChecker) == null))" />
    <mutant id="mutant_6907" viable="true" in="org.eclipse.jgit.transport.Transport.setCheckFetchedObjects(boolean)" from="(!check) &amp;&amp; ((objectChecker) != null)" to="!((!check) &amp;&amp; ((objectChecker) != null))" />
    <mutant id="mutant_6908" viable="true" in="org.eclipse.jgit.transport.Transport.setOptionReceivePack(java.lang.String)" from="(optionReceivePack != null) &amp;&amp; ((optionReceivePack.length()) &gt; 0)" to="!((optionReceivePack != null) &amp;&amp; ((optionReceivePack.length()) &gt; 0))" />
    <mutant id="mutant_6900" viable="true" in="org.eclipse.jgit.transport.Transport.catalogs(java.lang.ClassLoader)" from="prefix + (Transport.class.getName())" to="(prefix + (Transport.class.getName())) + 1" />
    <mutant id="mutant_9175" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseEncoding(byte[])" from="(lf - 1)" to="((lf - 1) - 1)" />
    <mutant id="mutant_9176" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseEncoding(byte[])" from="(lf - 1)" to="((lf - 1) + 1)" />
    <mutant id="mutant_9173" viable="true" in="org.eclipse.jgit.util.RawParseUtils.extractBinaryString(byte[],int,int)" from="(end - start)" to="((end - start) * -1)" />
    <mutant id="mutant_9174" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseEncoding(byte[])" from="(lf - 1)" to="((lf - 1) * -1)" />
    <mutant id="mutant_9179" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="((r * 10) + 1)" />
    <mutant id="mutant_9177" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' ')" to="!((ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' '))" />
    <mutant id="mutant_9178" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="((r * 10) * -1)" />
    <mutant id="mutant_9171" viable="true" in="org.eclipse.jgit.util.RawParseUtils.extractBinaryString(byte[],int,int)" from="(end - start)" to="((end - start) + 1)" />
    <mutant id="mutant_9172" viable="true" in="org.eclipse.jgit.util.RawParseUtils.extractBinaryString(byte[],int,int)" from="(end - start)" to="((end - start) - 1)" />
    <mutant id="mutant_9170" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(!(defcs.equals(cs))) &amp;&amp; (!(defcs.equals(org.eclipse.jgit.lib.Constants.CHARSET)))" to="!((!(defcs.equals(cs))) &amp;&amp; (!(defcs.equals(org.eclipse.jgit.lib.Constants.CHARSET))))" />
    <mutant id="mutant_404" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="((1 &lt;&lt; 8) - 1) * -1" />
    <mutant id="mutant_405" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="((1 &lt;&lt; 8) - 1) + 1" />
    <mutant id="mutant_406" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="((1 &lt;&lt; 8) - 1) - 1" />
    <mutant id="mutant_407" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="((1 &lt;&lt; 8) - 1) * -1" />
    <mutant id="mutant_400" viable="false" in="?" from="(1 &lt;&lt; 28) - 1" to="((1 &lt;&lt; 28) - 1) + 1" />
    <mutant id="mutant_401" viable="false" in="?" from="(1 &lt;&lt; 28) - 1" to="((1 &lt;&lt; 28) - 1) * -1" />
    <mutant id="mutant_402" viable="false" in="?" from="(1 &lt;&lt; 28) - 1" to="((1 &lt;&lt; 28) - 1) - 1" />
    <mutant id="mutant_403" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="((1 &lt;&lt; 8) - 1) - 1" />
    <mutant id="mutant_408" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="((1 &lt;&lt; 8) - 1) + 1" />
    <mutant id="mutant_409" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex(int,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit)" from="32 - tableBits" to="(32 - tableBits) + 1" />
    <mutant id="mutant_4304" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="((cnt) - low)" to="(((cnt) - low) * -1)" />
    <mutant id="mutant_5636" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="(((int)(((snapshot.lastModified()) % 1000))) - 1)" />
    <mutant id="mutant_6967" viable="false" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="(((getURI().getUser()) + &quot;@&quot;) + (getURI().getHost()))" to="((((getURI().getUser()) + &quot;@&quot;) + (getURI().getHost())) * -1)" />
    <mutant id="mutant_4303" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="((cnt) - low)" to="(((cnt) - low) - 1)" />
    <mutant id="mutant_5637" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="(((int)(((snapshot.lastModified()) % 1000))) * -1)" />
    <mutant id="mutant_6968" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null))" to="(!(((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)))" />
    <mutant id="mutant_4302" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="((cnt) - low)" to="(((cnt) - low) + 1)" />
    <mutant id="mutant_5638" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="(((int)(((snapshot.lastModified()) % 1000))) + 1)" />
    <mutant id="mutant_6969" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0))" to="(!((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0)))" />
    <mutant id="mutant_4301" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + 1)" to="((low + 1) * -1)" />
    <mutant id="mutant_5639" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="(((int)(((snapshot.lastModified()) % 1000))) * 1000000) * -1" />
    <mutant id="mutant_4300" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + 1)" to="((low + 1) - 1)" />
    <mutant id="mutant_6960" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.service(java.lang.String,org.eclipse.jgit.transport.PacketLineOut)" from="((uri.getPort()) &gt; 0) &amp;&amp; ((uri.getPort()) != (TransportGitAnon.GIT_PORT))" to="!(((uri.getPort()) &gt; 0) &amp;&amp; ((uri.getPort()) != (TransportGitAnon.GIT_PORT)))" />
    <mutant id="mutant_5630" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="infoLength * (entryCnt)" to="(infoLength * (entryCnt)) + 1" />
    <mutant id="mutant_6961" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="putty &amp;&amp; (!(ssh.toLowerCase().contains(&quot;tortoiseplink&quot;)))" to="!(putty &amp;&amp; (!(ssh.toLowerCase().contains(&quot;tortoiseplink&quot;))))" />
    <mutant id="mutant_4309" viable="false" in="?" from="128 * 1024" to="(128 * 1024) - 1" />
    <mutant id="mutant_5631" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((hdr[0]) &gt;= 'A') &amp;&amp; ((hdr[0]) &lt;= 'Z')" to="!(((hdr[0]) &gt;= 'A') &amp;&amp; ((hdr[0]) &lt;= 'Z'))" />
    <mutant id="mutant_6962" viable="false" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="((getURI().getUser()) + &quot;@&quot;)" to="(((getURI().getUser()) + &quot;@&quot;) - 1)" />
    <mutant id="mutant_4308" viable="false" in="?" from="128 * 1024" to="(128 * 1024) * -1" />
    <mutant id="mutant_5632" viable="true" in="org.eclipse.jgit.dircache.DirCache.updateSmudgedEntries()" from="(entry.isSmudged()) &amp;&amp; (iIter.idEqual(fIter))" to="!((entry.isSmudged()) &amp;&amp; (iIter.idEqual(fIter)))" />
    <mutant id="mutant_6963" viable="false" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="((getURI().getUser()) + &quot;@&quot;)" to="(((getURI().getUser()) + &quot;@&quot;) * -1)" />
    <mutant id="mutant_4307" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackExt.newPackExt(java.lang.String)" from="(PackExt.VALUES.length) + 1" to="((PackExt.VALUES.length) + 1) + 1" />
    <mutant id="mutant_5633" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="((int)(((snapshot.lastModified()) / 1000))) - 1" />
    <mutant id="mutant_6964" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="((getURI().getUser()) + &quot;@&quot;)" to="(((getURI().getUser()) + &quot;@&quot;) + 1)" />
    <mutant id="mutant_4306" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackExt.newPackExt(java.lang.String)" from="(PackExt.VALUES.length) + 1" to="((PackExt.VALUES.length) + 1) * -1" />
    <mutant id="mutant_5634" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="((int)(((snapshot.lastModified()) / 1000))) * -1" />
    <mutant id="mutant_6965" viable="false" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="(((getURI().getUser()) + &quot;@&quot;) + (getURI().getHost()))" to="((((getURI().getUser()) + &quot;@&quot;) + (getURI().getHost())) - 1)" />
    <mutant id="mutant_4305" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackExt.newPackExt(java.lang.String)" from="(PackExt.VALUES.length) + 1" to="((PackExt.VALUES.length) + 1) - 1" />
    <mutant id="mutant_5635" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="((int)(((snapshot.lastModified()) / 1000))) + 1" />
    <mutant id="mutant_6966" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="(((getURI().getUser()) + &quot;@&quot;) + (getURI().getHost()))" to="((((getURI().getUser()) + &quot;@&quot;) + (getURI().getHost())) + 1)" />
    <mutant id="mutant_415" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) + 1" to="((org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) + 1) + 1" />
    <mutant id="mutant_416" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) + 1" to="((org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) + 1) * -1" />
    <mutant id="mutant_417" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) + 1" to="((org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) + 1) - 1" />
    <mutant id="mutant_418" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="((ptr - (ptrShift)) + 1)" />
    <mutant id="mutant_411" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex(int,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit)" from="32 - tableBits" to="(32 - tableBits) - 1" />
    <mutant id="mutant_412" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(region.endA) - 1" to="((region.endA) - 1) - 1" />
    <mutant id="mutant_413" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(region.endA) - 1" to="((region.endA) - 1) * -1" />
    <mutant id="mutant_414" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(region.endA) - 1" to="((region.endA) - 1) + 1" />
    <mutant id="mutant_419" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="((ptr - (ptrShift)) * -1)" />
    <mutant id="mutant_5625" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="(((int)(((snapshot.lastModified()) % 1000))) * 1000000) * -1" />
    <mutant id="mutant_6956" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="!(((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme())))))" />
    <mutant id="mutant_5626" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="(((int)(((snapshot.lastModified()) % 1000))) * 1000000) + 1" />
    <mutant id="mutant_6957" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.openConnection()" from="(getTimeout()) * 1000" to="((getTimeout()) * 1000) + 1" />
    <mutant id="mutant_5627" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="(((int)(((snapshot.lastModified()) % 1000))) * 1000000) - 1" />
    <mutant id="mutant_6958" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.openConnection()" from="(getTimeout()) * 1000" to="((getTimeout()) * 1000) * -1" />
    <mutant id="mutant_5628" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="infoLength * (entryCnt)" to="(infoLength * (entryCnt)) * -1" />
    <mutant id="mutant_6959" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.openConnection()" from="(getTimeout()) * 1000" to="((getTimeout()) * 1000) - 1" />
    <mutant id="mutant_5629" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="infoLength * (entryCnt)" to="(infoLength * (entryCnt)) - 1" />
    <mutant id="mutant_6950" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3.openPush()" from="((keyPrefix) + &quot;/objects&quot;)" to="(((keyPrefix) + &quot;/objects&quot;) * -1)" />
    <mutant id="mutant_410" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex(int,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit)" from="32 - tableBits" to="(32 - tableBits) * -1" />
    <mutant id="mutant_5620" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="((int)(((snapshot.lastModified()) / 1000))) * -1" />
    <mutant id="mutant_6951" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" to="(!(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)))" />
    <mutant id="mutant_5621" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="((int)(((snapshot.lastModified()) / 1000))) + 1" />
    <mutant id="mutant_6952" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" to="(!((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)))" />
    <mutant id="mutant_5622" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="(((int)(((snapshot.lastModified()) % 1000))) - 1)" />
    <mutant id="mutant_6953" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" to="(!(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)))" />
    <mutant id="mutant_5623" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="(((int)(((snapshot.lastModified()) % 1000))) * -1)" />
    <mutant id="mutant_6954" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null))" to="(!((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)))" />
    <mutant id="mutant_5624" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="(((int)(((snapshot.lastModified()) % 1000))) + 1)" />
    <mutant id="mutant_6955" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="(!(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme())))))" />
    <mutant id="mutant_426" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(1 + (region.getLengthA()))" to="((1 + (region.getLengthA())) * -1)" />
    <mutant id="mutant_427" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="((ptr - (ptrShift)) + 1)" />
    <mutant id="mutant_428" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="((ptr - (ptrShift)) * -1)" />
    <mutant id="mutant_429" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="((ptr - (ptrShift)) - 1)" />
    <mutant id="mutant_422" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="((ptr - (ptrShift)) * -1)" />
    <mutant id="mutant_423" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="((ptr - (ptrShift)) - 1)" />
    <mutant id="mutant_424" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(1 + (region.getLengthA()))" to="((1 + (region.getLengthA())) + 1)" />
    <mutant id="mutant_425" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(1 + (region.getLengthA()))" to="((1 + (region.getLengthA())) - 1)" />
    <mutant id="mutant_5614" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="(eIdx + 1)" to="((eIdx + 1) + 1)" />
    <mutant id="mutant_6945" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3.openFetch()" from="((keyPrefix) + &quot;/objects&quot;)" to="(((keyPrefix) + &quot;/objects&quot;) + 1)" />
    <mutant id="mutant_5615" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="lastIdx - eIdx" to="(lastIdx - eIdx) + 1" />
    <mutant id="mutant_6946" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3.openFetch()" from="((keyPrefix) + &quot;/objects&quot;)" to="(((keyPrefix) + &quot;/objects&quot;) - 1)" />
    <mutant id="mutant_5616" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="lastIdx - eIdx" to="(lastIdx - eIdx) * -1" />
    <mutant id="mutant_6947" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3.openFetch()" from="((keyPrefix) + &quot;/objects&quot;)" to="(((keyPrefix) + &quot;/objects&quot;) * -1)" />
    <mutant id="mutant_5617" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="lastIdx - eIdx" to="(lastIdx - eIdx) - 1" />
    <mutant id="mutant_6948" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3.openPush()" from="((keyPrefix) + &quot;/objects&quot;)" to="(((keyPrefix) + &quot;/objects&quot;) + 1)" />
    <mutant id="mutant_5618" viable="true" in="org.eclipse.jgit.dircache.DirCache.read()" from="((snapshot) == null) || (snapshot.isModified(liveFile))" to="!(((snapshot) == null) || (snapshot.isModified(liveFile)))" />
    <mutant id="mutant_6949" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3.openPush()" from="((keyPrefix) + &quot;/objects&quot;)" to="(((keyPrefix) + &quot;/objects&quot;) - 1)" />
    <mutant id="mutant_5619" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="((int)(((snapshot.lastModified()) / 1000))) - 1" />
    <mutant id="mutant_420" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="((ptr - (ptrShift)) - 1)" />
    <mutant id="mutant_421" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="((ptr - (ptrShift)) + 1)" />
    <mutant id="mutant_6940" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(!(props.contains(&quot;tmpdir&quot;))) &amp;&amp; ((local.getDirectory()) != null)" to="!((!(props.contains(&quot;tmpdir&quot;))) &amp;&amp; ((local.getDirectory()) != null))" />
    <mutant id="mutant_5610" viable="true" in="org.eclipse.jgit.dircache.DirCache.editor()" from="((entryCnt) + 16)" to="(((entryCnt) + 16) + 1)" />
    <mutant id="mutant_6941" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((p.length()) - 1)" to="(((p.length()) - 1) + 1)" />
    <mutant id="mutant_5611" viable="true" in="org.eclipse.jgit.dircache.DirCache.editor()" from="((entryCnt) + 16)" to="(((entryCnt) + 16) * -1)" />
    <mutant id="mutant_6942" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((p.length()) - 1)" to="(((p.length()) - 1) * -1)" />
    <mutant id="mutant_5612" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="(eIdx + 1)" to="((eIdx + 1) * -1)" />
    <mutant id="mutant_6943" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((p.length()) - 1)" to="(((p.length()) - 1) - 1)" />
    <mutant id="mutant_5613" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="(eIdx + 1)" to="((eIdx + 1) - 1)" />
    <mutant id="mutant_6944" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3.loadProperties()" from="(user != null) &amp;&amp; (pass != null)" to="!((user != null) &amp;&amp; (pass != null))" />
    <mutant id="mutant_437" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bPtr + 1" to="(bPtr + 1) * -1" />
    <mutant id="mutant_438" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bPtr + 1" to="(bPtr + 1) - 1" />
    <mutant id="mutant_439" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="((as - (ptrShift)) + 1)" />
    <mutant id="mutant_433" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tableBits(int)" from="31 - (Integer.numberOfLeadingZeros(sz))" to="(31 - (Integer.numberOfLeadingZeros(sz))) - 1" />
    <mutant id="mutant_434" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tableBits(int)" from="31 - (Integer.numberOfLeadingZeros(sz))" to="(31 - (Integer.numberOfLeadingZeros(sz))) * -1" />
    <mutant id="mutant_435" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tableBits(int)" from="31 - (Integer.numberOfLeadingZeros(sz))" to="(31 - (Integer.numberOfLeadingZeros(sz))) + 1" />
    <mutant id="mutant_436" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bPtr + 1" to="(bPtr + 1) + 1" />
    <mutant id="mutant_5603" viable="true" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) + &quot;\'&quot;" to="((&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) + &quot;\'&quot;) + 1" />
    <mutant id="mutant_6934" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;) + 1)" />
    <mutant id="mutant_5604" viable="false" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) + &quot;\'&quot;" to="((&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) + &quot;\'&quot;) - 1" />
    <mutant id="mutant_6935" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;) - 1)" />
    <mutant id="mutant_5605" viable="false" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) + &quot;\'&quot;" to="((&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) + &quot;\'&quot;) * -1" />
    <mutant id="mutant_6936" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;) * -1)" />
    <mutant id="mutant_5606" viable="true" in="org.eclipse.jgit.dircache.DirCache.builder()" from="((entryCnt) + 16)" to="(((entryCnt) + 16) - 1)" />
    <mutant id="mutant_6937" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="(&quot;refs/&quot; + n)" to="((&quot;refs/&quot; + n) * -1)" />
    <mutant id="mutant_5607" viable="true" in="org.eclipse.jgit.dircache.DirCache.builder()" from="((entryCnt) + 16)" to="(((entryCnt) + 16) + 1)" />
    <mutant id="mutant_6938" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="(&quot;refs/&quot; + n)" to="((&quot;refs/&quot; + n) - 1)" />
    <mutant id="mutant_5608" viable="true" in="org.eclipse.jgit.dircache.DirCache.builder()" from="((entryCnt) + 16)" to="(((entryCnt) + 16) * -1)" />
    <mutant id="mutant_6939" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="(&quot;refs/&quot; + n)" to="((&quot;refs/&quot; + n) + 1)" />
    <mutant id="mutant_5609" viable="true" in="org.eclipse.jgit.dircache.DirCache.editor()" from="((entryCnt) + 16)" to="(((entryCnt) + 16) - 1)" />
    <mutant id="mutant_430" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.hash(org.eclipse.jgit.diff.HashedSequence,int)" from="((cmp.hash(s, idx)) * -1640562687)" to="(((cmp.hash(s, idx)) * -1640562687) + 1)" />
    <mutant id="mutant_431" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.hash(org.eclipse.jgit.diff.HashedSequence,int)" from="((cmp.hash(s, idx)) * -1640562687)" to="(((cmp.hash(s, idx)) * -1640562687) - 1)" />
    <mutant id="mutant_432" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.hash(org.eclipse.jgit.diff.HashedSequence,int)" from="((cmp.hash(s, idx)) * -1640562687)" to="(((cmp.hash(s, idx)) * -1640562687) * -1)" />
    <mutant id="mutant_6930" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.loose(org.eclipse.jgit.lib.Ref)" from="(r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED))" to="!((r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED)))" />
    <mutant id="mutant_5600" viable="false" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;)))" to="((&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) * -1)" />
    <mutant id="mutant_6931" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getURI()" from="(&quot;/&quot; + (objectsKey))" to="((&quot;/&quot; + (objectsKey)) * -1)" />
    <mutant id="mutant_5601" viable="false" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;)))" to="((&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) - 1)" />
    <mutant id="mutant_6932" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getURI()" from="(&quot;/&quot; + (objectsKey))" to="((&quot;/&quot; + (objectsKey)) + 1)" />
    <mutant id="mutant_5602" viable="true" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;)))" to="((&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) + 1)" />
    <mutant id="mutant_6933" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getURI()" from="(&quot;/&quot; + (objectsKey))" to="((&quot;/&quot; + (objectsKey)) - 1)" />
    <mutant id="mutant_6770" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(a + 1)" to="((a + 1) + 1)" />
    <mutant id="mutant_5440" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="((oursEndB - commonSuffix) + 1)" />
    <mutant id="mutant_6771" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(patternA.length()) - (a + 1)" to="((patternA.length()) - (a + 1)) * -1" />
    <mutant id="mutant_4106" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="(len * entSize)" to="((len * entSize) + 1)" />
    <mutant id="mutant_5438" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="((oursEndB - commonSuffix) * -1)" />
    <mutant id="mutant_6769" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(a + 1)" to="((a + 1) * -1)" />
    <mutant id="mutant_4105" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="start - resPtr" to="(start - resPtr) + 1" />
    <mutant id="mutant_5439" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="((oursEndB - commonSuffix) - 1)" />
    <mutant id="mutant_4104" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="start - resPtr" to="(start - resPtr) * -1" />
    <mutant id="mutant_4103" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="start - resPtr" to="(start - resPtr) - 1" />
    <mutant id="mutant_4102" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="(0 &lt;= srcPtr) &amp;&amp; (0 &lt; (--limit))" to="!((0 &lt;= srcPtr) &amp;&amp; (0 &lt; (--limit)))" />
    <mutant id="mutant_4101" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 15)" to="((ptr + 15) * -1)" />
    <mutant id="mutant_4100" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 15)" to="((ptr + 15) - 1)" />
    <mutant id="mutant_5430" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="((oursEndB - commonSuffix) - 1)" />
    <mutant id="mutant_6761" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="((hc * 31) - 1)" />
    <mutant id="mutant_5431" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="((oursEndB - commonSuffix) + 1)" />
    <mutant id="mutant_6762" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="((hc * 31) * -1)" />
    <mutant id="mutant_5432" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="((theirsBeginB + commonPrefix) * -1)" />
    <mutant id="mutant_6763" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="((hc * 31) + 1)" />
    <mutant id="mutant_5433" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="((theirsBeginB + commonPrefix) + 1)" />
    <mutant id="mutant_6764" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getDestination().hashCode())" to="((hc * 31) + (getDestination().hashCode())) * -1" />
    <mutant id="mutant_5434" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="((theirsBeginB + commonPrefix) - 1)" />
    <mutant id="mutant_6765" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getDestination().hashCode())" to="((hc * 31) + (getDestination().hashCode())) + 1" />
    <mutant id="mutant_4109" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="12 + (len * entSize)" to="(12 + (len * entSize)) + 1" />
    <mutant id="mutant_5435" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="((theirsEndB - commonSuffix) - 1)" />
    <mutant id="mutant_6766" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getDestination().hashCode())" to="((hc * 31) + (getDestination().hashCode())) - 1" />
    <mutant id="mutant_4108" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="(len * entSize)" to="((len * entSize) * -1)" />
    <mutant id="mutant_5436" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="((theirsEndB - commonSuffix) + 1)" />
    <mutant id="mutant_6767" viable="true" in="org.eclipse.jgit.transport.RefSpec.checkValid(java.lang.String)" from="(spec != null) &amp;&amp; (!(org.eclipse.jgit.transport.RefSpec.isValid(spec)))" to="!((spec != null) &amp;&amp; (!(org.eclipse.jgit.transport.RefSpec.isValid(spec))))" />
    <mutant id="mutant_4107" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="(len * entSize)" to="((len * entSize) - 1)" />
    <mutant id="mutant_5437" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="((theirsEndB - commonSuffix) * -1)" />
    <mutant id="mutant_6768" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(a + 1)" to="((a + 1) - 1)" />
    <mutant id="mutant_6760" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getSource().hashCode())" to="((hc * 31) + (getSource().hashCode())) - 1" />
    <mutant id="mutant_5427" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="((oursBeginB + commonPrefix) - 1)" />
    <mutant id="mutant_6758" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getSource().hashCode())" to="((hc * 31) + (getSource().hashCode())) * -1" />
    <mutant id="mutant_5428" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="((oursBeginB + commonPrefix) + 1)" />
    <mutant id="mutant_6759" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getSource().hashCode())" to="((hc * 31) + (getSource().hashCode())) + 1" />
    <mutant id="mutant_5429" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="((oursEndB - commonSuffix) * -1)" />
    <mutant id="mutant_6750" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="((prefix.length()) + (suffix.length()))" to="(((prefix.length()) + (suffix.length())) + 1)" />
    <mutant id="mutant_5420" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((theirsEndB - commonSuffix) - 1)" to="(((theirsEndB - commonSuffix) - 1) + 1)" />
    <mutant id="mutant_6751" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="((prefix.length()) + (suffix.length()))" to="(((prefix.length()) + (suffix.length())) - 1)" />
    <mutant id="mutant_5421" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(commonSuffix &lt; minBSize) &amp;&amp; (cmp.equals(ours, ((oursEndB - commonSuffix) - 1), theirs, ((theirsEndB - commonSuffix) - 1)))" to="!((commonSuffix &lt; minBSize) &amp;&amp; (cmp.equals(ours, ((oursEndB - commonSuffix) - 1), theirs, ((theirsEndB - commonSuffix) - 1))))" />
    <mutant id="mutant_6752" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="((prefix.length()) + (suffix.length()))" to="(((prefix.length()) + (suffix.length())) * -1)" />
    <mutant id="mutant_5422" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="((oursBeginB + commonPrefix) * -1)" />
    <mutant id="mutant_6753" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix)))" to="(!(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix))))" />
    <mutant id="mutant_5423" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="((oursBeginB + commonPrefix) - 1)" />
    <mutant id="mutant_6754" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix))) &amp;&amp; (name.endsWith(suffix))" to="!((((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix))) &amp;&amp; (name.endsWith(suffix)))" />
    <mutant id="mutant_5424" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="((oursBeginB + commonPrefix) + 1)" />
    <mutant id="mutant_6755" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="((hc * 31) - 1)" />
    <mutant id="mutant_5425" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(minBSize &gt; 0) || (BSizeDelta != 0)" to="!((minBSize &gt; 0) || (BSizeDelta != 0))" />
    <mutant id="mutant_6756" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="((hc * 31) * -1)" />
    <mutant id="mutant_5426" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="((oursBeginB + commonPrefix) * -1)" />
    <mutant id="mutant_6757" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="((hc * 31) + 1)" />
    <mutant id="mutant_5416" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="((theirsEndB - commonSuffix) + 1)" />
    <mutant id="mutant_6747" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(wildcardIndex + 1)" to="((wildcardIndex + 1) - 1)" />
    <mutant id="mutant_5417" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="((theirsEndB - commonSuffix) * -1)" />
    <mutant id="mutant_6748" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(wildcardIndex + 1)" to="((wildcardIndex + 1) + 1)" />
    <mutant id="mutant_5418" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((theirsEndB - commonSuffix) - 1)" to="(((theirsEndB - commonSuffix) - 1) * -1)" />
    <mutant id="mutant_6749" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(wildcardIndex + 1)" to="((wildcardIndex + 1) * -1)" />
    <mutant id="mutant_5419" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((theirsEndB - commonSuffix) - 1)" to="(((theirsEndB - commonSuffix) - 1) - 1)" />
    <mutant id="mutant_6740" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="((s.length()) - 1)" to="(((s.length()) - 1) * -1)" />
    <mutant id="mutant_5410" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="((oursEndB - commonSuffix) - 1)" />
    <mutant id="mutant_6741" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="((s.length()) - 1)" to="(((s.length()) - 1) - 1)" />
    <mutant id="mutant_5411" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="((oursEndB - commonSuffix) + 1)" />
    <mutant id="mutant_6742" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_5412" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEndB - commonSuffix) - 1)" to="(((oursEndB - commonSuffix) - 1) + 1)" />
    <mutant id="mutant_6743" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_5413" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEndB - commonSuffix) - 1)" to="(((oursEndB - commonSuffix) - 1) * -1)" />
    <mutant id="mutant_6744" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_5414" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEndB - commonSuffix) - 1)" to="(((oursEndB - commonSuffix) - 1) - 1)" />
    <mutant id="mutant_6745" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i &lt; ((s.length()) - 1)) &amp;&amp; ((s.charAt((i + 1))) != '/')" to="!((i &lt; ((s.length()) - 1)) &amp;&amp; ((s.charAt((i + 1))) != '/'))" />
    <mutant id="mutant_5415" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="((theirsEndB - commonSuffix) - 1)" />
    <mutant id="mutant_6746" viable="true" in="org.eclipse.jgit.transport.RefSpec.isWildcard(java.lang.String)" from="(s != null) &amp;&amp; (s.contains(&quot;*&quot;))" to="!((s != null) &amp;&amp; (s.contains(&quot;*&quot;)))" />
    <mutant id="mutant_5405" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="((theirsBeginB + commonPrefix) * -1)" />
    <mutant id="mutant_6736" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_5406" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="((theirsBeginB + commonPrefix) + 1)" />
    <mutant id="mutant_6737" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_5407" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="((theirsBeginB + commonPrefix) - 1)" />
    <mutant id="mutant_6738" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i &gt; 0) &amp;&amp; ((s.charAt((i - 1))) != '/')" to="!((i &gt; 0) &amp;&amp; ((s.charAt((i - 1))) != '/'))" />
    <mutant id="mutant_5408" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(commonPrefix &lt; minBSize) &amp;&amp; (cmp.equals(ours, (oursBeginB + commonPrefix), theirs, (theirsBeginB + commonPrefix)))" to="!((commonPrefix &lt; minBSize) &amp;&amp; (cmp.equals(ours, (oursBeginB + commonPrefix), theirs, (theirsBeginB + commonPrefix))))" />
    <mutant id="mutant_6739" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="((s.length()) - 1)" to="(((s.length()) - 1) + 1)" />
    <mutant id="mutant_5409" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="((oursEndB - commonSuffix) * -1)" />
    <mutant id="mutant_6730" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) || (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" to="!((org.eclipse.jgit.transport.RefSpec.isWildcard(src)) || (org.eclipse.jgit.transport.RefSpec.isWildcard(dst)))" />
    <mutant id="mutant_5400" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="minBSize - (theirsEndB - theirsBeginB)" to="(minBSize - (theirsEndB - theirsBeginB)) + 1" />
    <mutant id="mutant_6731" viable="true" in="org.eclipse.jgit.transport.RefSpec.eq(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="!((a == null) || (b == null))" />
    <mutant id="mutant_5401" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="minBSize - (theirsEndB - theirsBeginB)" to="(minBSize - (theirsEndB - theirsBeginB)) * -1" />
    <mutant id="mutant_6732" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_5402" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="((oursBeginB + commonPrefix) * -1)" />
    <mutant id="mutant_6733" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_5403" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="((oursBeginB + commonPrefix) - 1)" />
    <mutant id="mutant_6734" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_5404" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="((oursBeginB + commonPrefix) + 1)" />
    <mutant id="mutant_6735" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_5480" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="(((Constants.R_HEADS) + (Constants.MASTER)) * -1)" />
    <mutant id="mutant_5481" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot; into &quot; + targetShortName)" to="((&quot; into &quot; + targetShortName) + 1)" />
    <mutant id="mutant_5482" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot; into &quot; + targetShortName)" to="((&quot; into &quot; + targetShortName) * -1)" />
    <mutant id="mutant_5483" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot; into &quot; + targetShortName)" to="((&quot; into &quot; + targetShortName) - 1)" />
    <mutant id="mutant_5484" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.formatWithConflicts(java.lang.String,java.util.List)" from="(firstFooterLine == (lines.length)) &amp;&amp; ((message.length()) != 0)" to="!((firstFooterLine == (lines.length)) &amp;&amp; ((message.length()) != 0))" />
    <mutant id="mutant_4153" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="1 + worstCaseBlockCnt" to="(1 + worstCaseBlockCnt) * -1" />
    <mutant id="mutant_4152" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="1 + worstCaseBlockCnt" to="(1 + worstCaseBlockCnt) - 1" />
    <mutant id="mutant_4151" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="(table.length) - 1" to="((table.length) - 1) + 1" />
    <mutant id="mutant_4150" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="(table.length) - 1" to="((table.length) - 1) - 1" />
    <mutant id="mutant_4149" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="(table.length) - 1" to="((table.length) - 1) * -1" />
    <mutant id="mutant_4148" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len / (DeltaIndex.BLKSZ)" to="(len / (DeltaIndex.BLKSZ)) * -1" />
    <mutant id="mutant_4147" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len / (DeltaIndex.BLKSZ)" to="(len / (DeltaIndex.BLKSZ)) - 1" />
    <mutant id="mutant_4146" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len / (DeltaIndex.BLKSZ)" to="(len / (DeltaIndex.BLKSZ)) + 1" />
    <mutant id="mutant_4145" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len % (DeltaIndex.BLKSZ)" to="(len % (DeltaIndex.BLKSZ)) + 1" />
    <mutant id="mutant_4144" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len % (DeltaIndex.BLKSZ)" to="(len % (DeltaIndex.BLKSZ)) - 1" />
    <mutant id="mutant_4143" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len % (DeltaIndex.BLKSZ)" to="(len % (DeltaIndex.BLKSZ)) * -1" />
    <mutant id="mutant_5474" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (ref.getName()))" to="((&quot;\'&quot; + (ref.getName())) * -1)" />
    <mutant id="mutant_5475" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (ref.getName())) + &quot;\'&quot;)" to="(((&quot;\'&quot; + (ref.getName())) + &quot;\'&quot;) * -1)" />
    <mutant id="mutant_5476" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (ref.getName())) + &quot;\'&quot;)" to="(((&quot;\'&quot; + (ref.getName())) + &quot;\'&quot;) + 1)" />
    <mutant id="mutant_5477" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (ref.getName())) + &quot;\'&quot;)" to="(((&quot;\'&quot; + (ref.getName())) + &quot;\'&quot;) - 1)" />
    <mutant id="mutant_5478" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="(((Constants.R_HEADS) + (Constants.MASTER)) - 1)" />
    <mutant id="mutant_5479" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="(((Constants.R_HEADS) + (Constants.MASTER)) + 1)" />
    <mutant id="mutant_5470" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="(((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;) + 1)" />
    <mutant id="mutant_5471" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="(((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;) - 1)" />
    <mutant id="mutant_5472" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (ref.getName()))" to="((&quot;\'&quot; + (ref.getName())) + 1)" />
    <mutant id="mutant_5473" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (ref.getName()))" to="((&quot;\'&quot; + (ref.getName())) - 1)" />
    <mutant id="mutant_4142" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.getIndexSize()" from="4 * 4" to="(4 * 4) * -1" />
    <mutant id="mutant_4141" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.getIndexSize()" from="4 * 4" to="(4 * 4) + 1" />
    <mutant id="mutant_4140" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.getIndexSize()" from="4 * 4" to="(4 * 4) - 1" />
    <mutant id="mutant_4139" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="sourceLength + ((sourceLength * 3) / 4)" to="(sourceLength + ((sourceLength * 3) / 4)) + 1" />
    <mutant id="mutant_4138" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="sourceLength + ((sourceLength * 3) / 4)" to="(sourceLength + ((sourceLength * 3) / 4)) * -1" />
    <mutant id="mutant_4137" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="sourceLength + ((sourceLength * 3) / 4)" to="(sourceLength + ((sourceLength * 3) / 4)) - 1" />
    <mutant id="mutant_4136" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="((sourceLength * 3) / 4)" to="(((sourceLength * 3) / 4) + 1)" />
    <mutant id="mutant_4135" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="((sourceLength * 3) / 4)" to="(((sourceLength * 3) / 4) * -1)" />
    <mutant id="mutant_4134" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="((sourceLength * 3) / 4)" to="(((sourceLength * 3) / 4) - 1)" />
    <mutant id="mutant_4133" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="(sourceLength * 3)" to="((sourceLength * 3) * -1)" />
    <mutant id="mutant_4132" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="(sourceLength * 3)" to="((sourceLength * 3) - 1)" />
    <mutant id="mutant_5463" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="(((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;) * -1)" />
    <mutant id="mutant_6794" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(localName != null) &amp;&amp; (localDb != null)" to="!((localName != null) &amp;&amp; (localDb != null))" />
    <mutant id="mutant_5464" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="(((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;) + 1)" />
    <mutant id="mutant_6795" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName))" to="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + 1)" />
    <mutant id="mutant_5465" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="(((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;) - 1)" />
    <mutant id="mutant_6796" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName))" to="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) - 1)" />
    <mutant id="mutant_5466" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + 1)" />
    <mutant id="mutant_6797" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName))" to="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) * -1)" />
    <mutant id="mutant_5467" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) * -1)" />
    <mutant id="mutant_6798" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;)" to="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) * -1)" />
    <mutant id="mutant_5468" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) - 1)" />
    <mutant id="mutant_6799" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;)" to="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) - 1)" />
    <mutant id="mutant_5469" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="(((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;) * -1)" />
    <mutant id="mutant_6790" viable="false" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match.getValue()) + (uri.substring(match.getKey().length()))" to="((match.getValue()) + (uri.substring(match.getKey().length()))) - 1" />
    <mutant id="mutant_5460" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + 1)" />
    <mutant id="mutant_6791" viable="false" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match.getValue()) + (uri.substring(match.getKey().length()))" to="((match.getValue()) + (uri.substring(match.getKey().length()))) * -1" />
    <mutant id="mutant_5461" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) * -1)" />
    <mutant id="mutant_6792" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(srcId == null) &amp;&amp; (srcRef != null)" to="!((srcId == null) &amp;&amp; (srcRef != null))" />
    <mutant id="mutant_5462" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) - 1)" />
    <mutant id="mutant_6793" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(srcId != null) &amp;&amp; (!(srcId.equals(ObjectId.zeroId())))" to="!((srcId != null) &amp;&amp; (!(srcId.equals(ObjectId.zeroId()))))" />
    <mutant id="mutant_4131" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="(sourceLength * 3)" to="((sourceLength * 3) + 1)" />
    <mutant id="mutant_4130" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) + &quot;]&quot;" to="((((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) + &quot;]&quot;) - 1" />
    <mutant id="mutant_4128" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) + &quot;]&quot;" to="((((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) + &quot;]&quot;) + 1" />
    <mutant id="mutant_4127" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u]))" to="((((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) * -1)" />
    <mutant id="mutant_4126" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u]))" to="((((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) - 1)" />
    <mutant id="mutant_4125" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u]))" to="((((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) + 1)" />
    <mutant id="mutant_4124" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;)" to="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) - 1)" />
    <mutant id="mutant_4123" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;)" to="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) * -1)" />
    <mutant id="mutant_4122" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;)" to="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + 1)" />
    <mutant id="mutant_4121" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(&quot;DeltaIndex[&quot; + sz)" to="((&quot;DeltaIndex[&quot; + sz) * -1)" />
    <mutant id="mutant_5452" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeln(java.lang.String)" from="(s + &quot;\n&quot;)" to="((s + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_6783" viable="false" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match) + (patternB.substring((b + 1)))" to="(((patternB.substring(0, b)) + match) + (patternB.substring((b + 1)))) * -1" />
    <mutant id="mutant_5453" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeln(java.lang.String)" from="(s + &quot;\n&quot;)" to="((s + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_6784" viable="false" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match) + (patternB.substring((b + 1)))" to="(((patternB.substring(0, b)) + match) + (patternB.substring((b + 1)))) - 1" />
    <mutant id="mutant_5454" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + 1)" />
    <mutant id="mutant_6785" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match) + (patternB.substring((b + 1)))" to="(((patternB.substring(0, b)) + match) + (patternB.substring((b + 1)))) + 1" />
    <mutant id="mutant_5455" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) * -1)" />
    <mutant id="mutant_6786" viable="true" in="org.eclipse.jgit.transport.RefSpec.setDestination(java.lang.String)" from="(RefSpec.isWildcard(r.dstName)) &amp;&amp; ((r.srcName) == null)" to="!((RefSpec.isWildcard(r.dstName)) &amp;&amp; ((r.srcName) == null))" />
    <mutant id="mutant_5456" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) - 1)" />
    <mutant id="mutant_6787" viable="true" in="org.eclipse.jgit.transport.RefSpec.setSource(java.lang.String)" from="(RefSpec.isWildcard(r.srcName)) &amp;&amp; ((r.dstName) == null)" to="!((RefSpec.isWildcard(r.srcName)) &amp;&amp; ((r.dstName) == null))" />
    <mutant id="mutant_5457" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="(((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;) * -1)" />
    <mutant id="mutant_6788" viable="true" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match != null) &amp;&amp; ((match.getKey().length()) &gt; (replacement.getKey().length()))" to="!((match != null) &amp;&amp; ((match.getKey().length()) &gt; (replacement.getKey().length())))" />
    <mutant id="mutant_5458" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="(((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;) + 1)" />
    <mutant id="mutant_6789" viable="true" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match.getValue()) + (uri.substring(match.getKey().length()))" to="((match.getValue()) + (uri.substring(match.getKey().length()))) + 1" />
    <mutant id="mutant_4129" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) + &quot;]&quot;" to="((((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) + &quot;]&quot;) * -1" />
    <mutant id="mutant_5459" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="(((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;) - 1)" />
    <mutant id="mutant_6780" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(b + 1)" to="((b + 1) + 1)" />
    <mutant id="mutant_5450" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictStart(org.eclipse.jgit.merge.MergeChunk)" from="(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; + (lastConflictingName))" to="((&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; + (lastConflictingName)) * -1)" />
    <mutant id="mutant_6781" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(b + 1)" to="((b + 1) * -1)" />
    <mutant id="mutant_5451" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeln(java.lang.String)" from="(s + &quot;\n&quot;)" to="((s + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_6782" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(b + 1)" to="((b + 1) - 1)" />
    <mutant id="mutant_4120" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(&quot;DeltaIndex[&quot; + sz)" to="((&quot;DeltaIndex[&quot; + sz) + 1)" />
    <mutant id="mutant_4117" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((int)(sz % 1024))" to="((int)((sz % 1024))) + 1" />
    <mutant id="mutant_5449" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictStart(org.eclipse.jgit.merge.MergeChunk)" from="(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; + (lastConflictingName))" to="((&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; + (lastConflictingName)) + 1)" />
    <mutant id="mutant_4116" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((int)(sz % 1024))" to="((int)((sz % 1024))) - 1" />
    <mutant id="mutant_4115" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(1024 &lt;= sz) &amp;&amp; (u &lt; ((units.length) - 1))" to="!((1024 &lt;= sz) &amp;&amp; (u &lt; ((units.length) - 1)))" />
    <mutant id="mutant_4114" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((units.length) - 1)" to="(((units.length) - 1) + 1)" />
    <mutant id="mutant_4113" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((units.length) - 1)" to="(((units.length) - 1) - 1)" />
    <mutant id="mutant_4112" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((units.length) - 1)" to="(((units.length) - 1) * -1)" />
    <mutant id="mutant_4111" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="12 + (len * entSize)" to="(12 + (len * entSize)) - 1" />
    <mutant id="mutant_4110" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="12 + (len * entSize)" to="(12 + (len * entSize)) * -1" />
    <mutant id="mutant_5441" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictChange(org.eclipse.jgit.merge.MergeChunk)" from="&quot;======= &quot; + (lastConflictingName)" to="(&quot;======= &quot; + (lastConflictingName)) * -1" />
    <mutant id="mutant_6772" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(patternA.length()) - (a + 1)" to="((patternA.length()) - (a + 1)) + 1" />
    <mutant id="mutant_5442" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictChange(org.eclipse.jgit.merge.MergeChunk)" from="&quot;======= &quot; + (lastConflictingName)" to="(&quot;======= &quot; + (lastConflictingName)) - 1" />
    <mutant id="mutant_6773" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(patternA.length()) - (a + 1)" to="((patternA.length()) - (a + 1)) - 1" />
    <mutant id="mutant_5443" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictChange(org.eclipse.jgit.merge.MergeChunk)" from="&quot;======= &quot; + (lastConflictingName)" to="(&quot;======= &quot; + (lastConflictingName)) + 1" />
    <mutant id="mutant_6774" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((name.length()) - trailingA)" to="(((name.length()) - trailingA) + 1)" />
    <mutant id="mutant_5444" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictEnd()" from="(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; + (lastConflictingName))" to="((&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; + (lastConflictingName)) * -1)" />
    <mutant id="mutant_6775" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((name.length()) - trailingA)" to="(((name.length()) - trailingA) - 1)" />
    <mutant id="mutant_5445" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictEnd()" from="(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; + (lastConflictingName))" to="((&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; + (lastConflictingName)) + 1)" />
    <mutant id="mutant_6776" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((name.length()) - trailingA)" to="(((name.length()) - trailingA) * -1)" />
    <mutant id="mutant_5446" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictEnd()" from="(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; + (lastConflictingName))" to="((&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; + (lastConflictingName)) - 1)" />
    <mutant id="mutant_6777" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match)" to="(((patternB.substring(0, b)) + match) + 1)" />
    <mutant id="mutant_4119" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(&quot;DeltaIndex[&quot; + sz)" to="((&quot;DeltaIndex[&quot; + sz) - 1)" />
    <mutant id="mutant_5447" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictMetadata(org.eclipse.jgit.merge.MergeChunk)" from="((lastConflictingName) != null) &amp;&amp; ((chunk.getConflictState()) != (MergeChunk.ConflictState.NEXT_CONFLICTING_RANGE))" to="!(((lastConflictingName) != null) &amp;&amp; ((chunk.getConflictState()) != (MergeChunk.ConflictState.NEXT_CONFLICTING_RANGE)))" />
    <mutant id="mutant_6778" viable="false" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match)" to="(((patternB.substring(0, b)) + match) - 1)" />
    <mutant id="mutant_4118" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((int)(sz % 1024))" to="((int)((sz % 1024))) * -1" />
    <mutant id="mutant_5448" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictStart(org.eclipse.jgit.merge.MergeChunk)" from="(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; + (lastConflictingName))" to="((&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; + (lastConflictingName)) - 1)" />
    <mutant id="mutant_6779" viable="false" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match)" to="(((patternB.substring(0, b)) + match) * -1)" />
    <mutant id="mutant_1919" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="((end - 1) * -1)" />
    <mutant id="mutant_1917" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="((end - 1) - 1)" />
    <mutant id="mutant_1918" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="((raw[(end - 1)]) == ' ') || ((raw[(end - 1)]) == '.')" to="!(((raw[(end - 1)]) == ' ') || ((raw[(end - 1)]) == '.'))" />
    <mutant id="mutant_1915" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="((end - 1) * -1)" />
    <mutant id="mutant_1916" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="((end - 1) + 1)" />
    <mutant id="mutant_4197" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(slice.beginIndex) - (o.slice.beginIndex)" to="((slice.beginIndex) - (o.slice.beginIndex)) * -1" />
    <mutant id="mutant_4196" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(slice.beginIndex) - (o.slice.beginIndex)" to="((slice.beginIndex) - (o.slice.beginIndex)) + 1" />
    <mutant id="mutant_4195" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="((weight) - (o.weight))" to="(((weight) - (o.weight)) - 1)" />
    <mutant id="mutant_4194" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="((weight) - (o.weight))" to="(((weight) - (o.weight)) * -1)" />
    <mutant id="mutant_4193" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="((weight) - (o.weight))" to="(((weight) - (o.weight)) + 1)" />
    <mutant id="mutant_4192" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice.size()" from="(endIndex) - (beginIndex)" to="((endIndex) - (beginIndex)) * -1" />
    <mutant id="mutant_4191" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice.size()" from="(endIndex) - (beginIndex)" to="((endIndex) - (beginIndex)) + 1" />
    <mutant id="mutant_4190" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice.size()" from="(endIndex) - (beginIndex)" to="((endIndex) - (beginIndex)) - 1" />
    <mutant id="mutant_4189" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_4188" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_4187" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_1913" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="((end - 1) + 1)" />
    <mutant id="mutant_1914" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="((end - 1) - 1)" />
    <mutant id="mutant_1911" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(macosx) &amp;&amp; (ObjectChecker.isMacHFSGit(raw, ptr, end))" to="!((macosx) &amp;&amp; (ObjectChecker.isMacHFSGit(raw, ptr, end)))" />
    <mutant id="mutant_1912" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="((end - 1) * -1)" />
    <mutant id="mutant_1910" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="((end - ptr) &gt; 4) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(raw, (ptr + 1), end))" to="!(((end - ptr) &gt; 4) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(raw, (ptr + 1), end)))" />
    <mutant id="mutant_1908" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_1909" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_1906" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_1907" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_1904" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1905" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_4186" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(nextTop &lt; (topPaths.size())) &amp;&amp; (i == (topPaths.get(nextTop).slice.beginIndex))" to="!((nextTop &lt; (topPaths.size())) &amp;&amp; (i == (topPaths.get(nextTop).slice.beginIndex)))" />
    <mutant id="mutant_4185" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(w &lt; weightPerThread) &amp;&amp; (i &lt; (endIndex))" to="!((w &lt; weightPerThread) &amp;&amp; (i &lt; (endIndex)))" />
    <mutant id="mutant_4184" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="((totalWeight) / (threads))" to="(((totalWeight) / (threads)) - 1)" />
    <mutant id="mutant_4183" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="((totalWeight) / (threads))" to="(((totalWeight) / (threads)) * -1)" />
    <mutant id="mutant_4182" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="((totalWeight) / (threads))" to="(((totalWeight) / (threads)) + 1)" />
    <mutant id="mutant_4181" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.stealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask)" from="(s != null) &amp;&amp; (maxWork &lt; (s.size()))" to="!((s != null) &amp;&amp; (maxWork &lt; (s.size())))" />
    <mutant id="mutant_4180" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="((totalWeight) / (bytesPerUnit))" to="(((totalWeight) / (bytesPerUnit)) + 1)" />
    <mutant id="mutant_4179" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="((totalWeight) / (bytesPerUnit))" to="(((totalWeight) / (bytesPerUnit)) - 1)" />
    <mutant id="mutant_4178" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="((totalWeight) / (bytesPerUnit))" to="(((totalWeight) / (bytesPerUnit)) * -1)" />
    <mutant id="mutant_4177" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block$1.compare(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath,org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(a.slice.beginIndex) - (b.slice.beginIndex)" to="((a.slice.beginIndex) - (b.slice.beginIndex)) - 1" />
    <mutant id="mutant_4176" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block$1.compare(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath,org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(a.slice.beginIndex) - (b.slice.beginIndex)" to="((a.slice.beginIndex) - (b.slice.beginIndex)) * -1" />
    <mutant id="mutant_1902" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_1903" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_1900" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_1901" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_4175" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block$1.compare(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath,org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(a.slice.beginIndex) - (b.slice.beginIndex)" to="((a.slice.beginIndex) - (b.slice.beginIndex)) + 1" />
    <mutant id="mutant_4174" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="(o.isEdge()) || (o.doNotAttemptDelta())" to="!((o.isEdge()) || (o.doNotAttemptDelta()))" />
    <mutant id="mutant_4173" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="cp + 1" to="(cp + 1) + 1" />
    <mutant id="mutant_4172" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="cp + 1" to="(cp + 1) - 1" />
    <mutant id="mutant_4171" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="cp + 1" to="(cp + 1) * -1" />
    <mutant id="mutant_4170" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((totalWeight) % (bytesPerUnit))" to="(((totalWeight) % (bytesPerUnit)) + 1)" />
    <mutant id="mutant_4169" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((totalWeight) % (bytesPerUnit))" to="(((totalWeight) % (bytesPerUnit)) - 1)" />
    <mutant id="mutant_4168" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((totalWeight) % (bytesPerUnit))" to="(((totalWeight) % (bytesPerUnit)) * -1)" />
    <mutant id="mutant_4167" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((int)((totalWeight) / (bytesPerUnit)))" to="((int)(((totalWeight) / (bytesPerUnit)))) + 1" />
    <mutant id="mutant_4166" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((int)((totalWeight) / (bytesPerUnit)))" to="((int)(((totalWeight) / (bytesPerUnit)))) - 1" />
    <mutant id="mutant_4165" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((int)((totalWeight) / (bytesPerUnit)))" to="((int)(((totalWeight) / (bytesPerUnit)))) * -1" />
    <mutant id="mutant_5496" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;) + (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))" to="((plural + &quot; &quot;) + (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))) - 1" />
    <mutant id="mutant_5497" viable="true" in="org.eclipse.jgit.merge.Merger.merge(boolean,org.eclipse.jgit.lib.AnyObjectId[])" from="ok &amp;&amp; flush" to="!(ok &amp;&amp; flush)" />
    <mutant id="mutant_5498" viable="false" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(name + &quot;@JGit&quot;)" to="((name + &quot;@JGit&quot;) - 1)" />
    <mutant id="mutant_5499" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(name + &quot;@JGit&quot;)" to="((name + &quot;@JGit&quot;) + 1)" />
    <mutant id="mutant_5490" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;) + (names.get(0))" to="((singular + &quot; &quot;) + (names.get(0))) - 1" />
    <mutant id="mutant_5491" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;)" to="((plural + &quot; &quot;) - 1)" />
    <mutant id="mutant_5492" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;)" to="((plural + &quot; &quot;) + 1)" />
    <mutant id="mutant_5493" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;)" to="((plural + &quot; &quot;) * -1)" />
    <mutant id="mutant_5494" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;) + (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))" to="((plural + &quot; &quot;) + (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))) + 1" />
    <mutant id="mutant_5495" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;) + (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))" to="((plural + &quot; &quot;) + (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))) * -1" />
    <mutant id="mutant_4164" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="(head != 0) &amp;&amp; (lastHash == key)" to="!((head != 0) &amp;&amp; (lastHash == key))" />
    <mutant id="mutant_4163" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="end - (DeltaIndex.BLKSZ)" to="(end - (DeltaIndex.BLKSZ)) + 1" />
    <mutant id="mutant_4162" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="end - (DeltaIndex.BLKSZ)" to="(end - (DeltaIndex.BLKSZ)) * -1" />
    <mutant id="mutant_4161" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="end - (DeltaIndex.BLKSZ)" to="(end - (DeltaIndex.BLKSZ)) - 1" />
    <mutant id="mutant_4160" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="(shift - 1)" to="((shift - 1) + 1)" />
    <mutant id="mutant_4159" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="(shift - 1)" to="((shift - 1) - 1)" />
    <mutant id="mutant_4158" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="(shift - 1)" to="((shift - 1) * -1)" />
    <mutant id="mutant_4157" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="32 - (Integer.numberOfLeadingZeros(worstCaseBlockCnt))" to="(32 - (Integer.numberOfLeadingZeros(worstCaseBlockCnt))) + 1" />
    <mutant id="mutant_4156" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="32 - (Integer.numberOfLeadingZeros(worstCaseBlockCnt))" to="(32 - (Integer.numberOfLeadingZeros(worstCaseBlockCnt))) * -1" />
    <mutant id="mutant_4155" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="32 - (Integer.numberOfLeadingZeros(worstCaseBlockCnt))" to="(32 - (Integer.numberOfLeadingZeros(worstCaseBlockCnt))) - 1" />
    <mutant id="mutant_4154" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="1 + worstCaseBlockCnt" to="(1 + worstCaseBlockCnt) + 1" />
    <mutant id="mutant_5485" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;)" to="((singular + &quot; &quot;) - 1)" />
    <mutant id="mutant_5486" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;)" to="((singular + &quot; &quot;) + 1)" />
    <mutant id="mutant_5487" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;)" to="((singular + &quot; &quot;) * -1)" />
    <mutant id="mutant_5488" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;) + (names.get(0))" to="((singular + &quot; &quot;) + (names.get(0))) + 1" />
    <mutant id="mutant_5489" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;) + (names.get(0))" to="((singular + &quot; &quot;) + (names.get(0))) * -1" />
    <mutant id="mutant_1959" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 3)" to="((si + 3) + 1)" />
    <mutant id="mutant_1950" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 2)" to="((fi + 2) + 1)" />
    <mutant id="mutant_1957" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 3)" to="((fi + 3) - 1)" />
    <mutant id="mutant_1958" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 3)" to="((si + 3) - 1)" />
    <mutant id="mutant_1955" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 3)" to="((fi + 3) + 1)" />
    <mutant id="mutant_1956" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 3)" to="((fi + 3) * -1)" />
    <mutant id="mutant_1953" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 2)" to="((si + 2) - 1)" />
    <mutant id="mutant_1954" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)])))" to="(!((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))))" />
    <mutant id="mutant_1951" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 2)" to="((si + 2) + 1)" />
    <mutant id="mutant_1952" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 2)" to="((si + 2) * -1)" />
    <mutant id="mutant_1948" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 2)" to="((fi + 2) * -1)" />
    <mutant id="mutant_1949" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 2)" to="((fi + 2) - 1)" />
    <mutant id="mutant_1946" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 1)" to="((si + 1) * -1)" />
    <mutant id="mutant_1947" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)])))" to="(!(((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))))" />
    <mutant id="mutant_1944" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 1)" to="((si + 1) - 1)" />
    <mutant id="mutant_1945" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 1)" to="((si + 1) + 1)" />
    <mutant id="mutant_1942" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 1)" to="((fi + 1) * -1)" />
    <mutant id="mutant_1943" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 1)" to="((fi + 1) - 1)" />
    <mutant id="mutant_1940" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTruncatedIgnorableUTF8(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) + 1)" />
    <mutant id="mutant_1941" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 1)" to="((fi + 1) + 1)" />
    <mutant id="mutant_1939" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTruncatedIgnorableUTF8(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) - 1)" />
    <mutant id="mutant_1937" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="1 + (Constants.OBJECT_ID_LENGTH)" to="(1 + (Constants.OBJECT_ID_LENGTH)) - 1" />
    <mutant id="mutant_1938" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTruncatedIgnorableUTF8(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) * -1)" />
    <mutant id="mutant_1935" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="1 + (Constants.OBJECT_ID_LENGTH)" to="(1 + (Constants.OBJECT_ID_LENGTH)) * -1" />
    <mutant id="mutant_1936" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="1 + (Constants.OBJECT_ID_LENGTH)" to="(1 + (Constants.OBJECT_ID_LENGTH)) + 1" />
    <mutant id="mutant_1933" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_1934" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(ptr == sz) || ((raw[ptr]) != 0)" to="!((ptr == sz) || ((raw[ptr]) != 0))" />
    <mutant id="mutant_1931" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_1932" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_1930" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="((thisMode == 0) &amp;&amp; (c == '0')) &amp;&amp; (!(allowZeroMode))" to="!(((thisMode == 0) &amp;&amp; (c == '0')) &amp;&amp; (!(allowZeroMode)))" />
    <mutant id="mutant_1928" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="!((c &lt; '0') || (c &gt; '7'))" />
    <mutant id="mutant_1929" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="((thisMode == 0) &amp;&amp; (c == '0'))" to="(!((thisMode == 0) &amp;&amp; (c == '0')))" />
    <mutant id="mutant_1926" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTag(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="!(((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n'))" />
    <mutant id="mutant_1927" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(windows) || (macosx)" to="!((windows) || (macosx))" />
    <mutant id="mutant_4199" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask.tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice)" from="(!(slices.isEmpty())) &amp;&amp; ((slices.getLast().beginIndex) == (s.beginIndex))" to="!((!(slices.isEmpty())) &amp;&amp; ((slices.getLast().beginIndex) == (s.beginIndex)))" />
    <mutant id="mutant_4198" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(slice.beginIndex) - (o.slice.beginIndex)" to="((slice.beginIndex) - (o.slice.beginIndex)) - 1" />
    <mutant id="mutant_1924" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_1925" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTag(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="!(((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n'))" />
    <mutant id="mutant_1922" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1923" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_1920" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="((end - 1) + 1)" />
    <mutant id="mutant_1921" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="((end - 1) - 1)" />
    <mutant id="mutant_9000" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="((inEnd - 1) - 1)" />
    <mutant id="mutant_9003" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inPtr + 1)" to="((inPtr + 1) * -1)" />
    <mutant id="mutant_9004" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inPtr + 1)" to="((inPtr + 1) - 1)" />
    <mutant id="mutant_9001" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="((inEnd - 1) + 1)" />
    <mutant id="mutant_9002" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;')) &amp;&amp; ((in[(inEnd - 1)]) == '\&quot;')" to="!(((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;')) &amp;&amp; ((in[(inEnd - 1)]) == '\&quot;'))" />
    <mutant id="mutant_1993" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 8)" to="((si + 8) * -1)" />
    <mutant id="mutant_1994" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 8)" to="((si + 8) - 1)" />
    <mutant id="mutant_1991" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 8)" to="((fi + 8) + 1)" />
    <mutant id="mutant_1992" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 8)" to="((fi + 8) * -1)" />
    <mutant id="mutant_1990" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 8)" to="((fi + 8) - 1)" />
    <mutant id="mutant_1999" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 9)" to="((fi + 9) - 1)" />
    <mutant id="mutant_1997" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 9)" to="((fi + 9) + 1)" />
    <mutant id="mutant_1998" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 9)" to="((fi + 9) * -1)" />
    <mutant id="mutant_1995" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 8)" to="((si + 8) + 1)" />
    <mutant id="mutant_1996" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)])))" to="(!((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))))" />
    <mutant id="mutant_1982" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)])))" to="(!((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))))" />
    <mutant id="mutant_1983" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 7)" to="((fi + 7) * -1)" />
    <mutant id="mutant_1980" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 6)" to="((si + 6) + 1)" />
    <mutant id="mutant_1981" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 6)" to="((si + 6) * -1)" />
    <mutant id="mutant_1988" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 7)" to="((si + 7) - 1)" />
    <mutant id="mutant_1989" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)])))" to="(!(((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))))" />
    <mutant id="mutant_1986" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 7)" to="((si + 7) * -1)" />
    <mutant id="mutant_1987" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 7)" to="((si + 7) + 1)" />
    <mutant id="mutant_1984" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 7)" to="((fi + 7) + 1)" />
    <mutant id="mutant_1985" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 7)" to="((fi + 7) - 1)" />
    <mutant id="mutant_1971" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 5)" to="((fi + 5) + 1)" />
    <mutant id="mutant_1972" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 5)" to="((si + 5) - 1)" />
    <mutant id="mutant_1970" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 5)" to="((fi + 5) * -1)" />
    <mutant id="mutant_1979" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 6)" to="((si + 6) - 1)" />
    <mutant id="mutant_1977" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 6)" to="((fi + 6) - 1)" />
    <mutant id="mutant_1978" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 6)" to="((fi + 6) * -1)" />
    <mutant id="mutant_1975" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)])))" to="(!(((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))))" />
    <mutant id="mutant_1976" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 6)" to="((fi + 6) + 1)" />
    <mutant id="mutant_1973" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 5)" to="((si + 5) + 1)" />
    <mutant id="mutant_1974" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 5)" to="((si + 5) * -1)" />
    <mutant id="mutant_1960" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 3)" to="((si + 3) * -1)" />
    <mutant id="mutant_1961" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)])))" to="(!(((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))))" />
    <mutant id="mutant_1968" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)])))" to="(!((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))))" />
    <mutant id="mutant_1969" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 5)" to="((fi + 5) - 1)" />
    <mutant id="mutant_1966" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 4)" to="((si + 4) - 1)" />
    <mutant id="mutant_1967" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 4)" to="((si + 4) + 1)" />
    <mutant id="mutant_1964" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 4)" to="((fi + 4) * -1)" />
    <mutant id="mutant_1965" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 4)" to="((si + 4) * -1)" />
    <mutant id="mutant_1962" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 4)" to="((fi + 4) + 1)" />
    <mutant id="mutant_1963" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 4)" to="((fi + 4) - 1)" />
    <mutant id="mutant_9043" viable="true" in="org.eclipse.jgit.util.RawCharSequence.charAt(int)" from="((startPtr) + index)" to="(((startPtr) + index) * -1)" />
    <mutant id="mutant_9044" viable="true" in="org.eclipse.jgit.util.RawCharSequence.length()" from="(endPtr) - (startPtr)" to="((endPtr) - (startPtr)) + 1" />
    <mutant id="mutant_9041" viable="true" in="org.eclipse.jgit.util.RawCharSequence.charAt(int)" from="((startPtr) + index)" to="(((startPtr) + index) - 1)" />
    <mutant id="mutant_9042" viable="true" in="org.eclipse.jgit.util.RawCharSequence.charAt(int)" from="((startPtr) + index)" to="(((startPtr) + index) + 1)" />
    <mutant id="mutant_9047" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + start)" to="(((startPtr) + start) * -1)" />
    <mutant id="mutant_9048" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + start)" to="(((startPtr) + start) - 1)" />
    <mutant id="mutant_9045" viable="true" in="org.eclipse.jgit.util.RawCharSequence.length()" from="(endPtr) - (startPtr)" to="((endPtr) - (startPtr)) * -1" />
    <mutant id="mutant_9046" viable="true" in="org.eclipse.jgit.util.RawCharSequence.length()" from="(endPtr) - (startPtr)" to="((endPtr) - (startPtr)) - 1" />
    <mutant id="mutant_9040" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 0) &amp; 7) + '0'))" to="(((char)((((c &gt;&gt; 0) &amp; 7) + '0'))) - 1)" />
    <mutant id="mutant_9038" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 0) &amp; 7) + '0'))" to="(((char)((((c &gt;&gt; 0) &amp; 7) + '0'))) * -1)" />
    <mutant id="mutant_9039" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 0) &amp; 7) + '0'))" to="(((char)((((c &gt;&gt; 0) &amp; 7) + '0'))) + 1)" />
    <mutant id="mutant_9032" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 6) &amp; 3) + '0'))" to="(((char)((((c &gt;&gt; 6) &amp; 3) + '0'))) - 1)" />
    <mutant id="mutant_9033" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 6) &amp; 3) + '0'))" to="(((char)((((c &gt;&gt; 6) &amp; 3) + '0'))) * -1)" />
    <mutant id="mutant_9030" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="(2 + (in.length))" to="((2 + (in.length)) * -1)" />
    <mutant id="mutant_9031" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="(2 + (in.length))" to="((2 + (in.length)) + 1)" />
    <mutant id="mutant_9036" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 3) &amp; 7) + '0'))" to="(((char)((((c &gt;&gt; 3) &amp; 7) + '0'))) - 1)" />
    <mutant id="mutant_9037" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 3) &amp; 7) + '0'))" to="(((char)((((c &gt;&gt; 3) &amp; 7) + '0'))) + 1)" />
    <mutant id="mutant_9034" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 6) &amp; 3) + '0'))" to="(((char)((((c &gt;&gt; 6) &amp; 3) + '0'))) + 1)" />
    <mutant id="mutant_9035" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 3) &amp; 7) + '0'))" to="(((char)((((c &gt;&gt; 3) &amp; 7) + '0'))) * -1)" />
    <mutant id="mutant_9029" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="(2 + (in.length))" to="((2 + (in.length)) - 1)" />
    <mutant id="mutant_9027" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="((inPtr - 1) + 1)" />
    <mutant id="mutant_9028" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="((inPtr - 1) * -1)" />
    <mutant id="mutant_701" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) + 1)" />
    <mutant id="mutant_9021" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(n &lt; 3) &amp;&amp; (inPtr &lt; inEnd)" to="!((n &lt; 3) &amp;&amp; (inPtr &lt; inEnd))" />
    <mutant id="mutant_702" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) * -1)" />
    <mutant id="mutant_9022" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="('0' &lt;= c) &amp;&amp; (c &lt;= '7')" to="!(('0' &lt;= c) &amp;&amp; (c &lt;= '7'))" />
    <mutant id="mutant_703" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) - 1)" />
    <mutant id="mutant_704" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)) - 1" />
    <mutant id="mutant_9020" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(in[(inPtr - 1)]) - '0'" to="((in[(inPtr - 1)]) - '0') + 1" />
    <mutant id="mutant_9025" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_9026" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="((inPtr - 1) - 1)" />
    <mutant id="mutant_9023" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_700" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="((be - bs) + 1)" />
    <mutant id="mutant_9024" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_709" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) - 1)" />
    <mutant id="mutant_705" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)) + 1" />
    <mutant id="mutant_706" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)) * -1" />
    <mutant id="mutant_707" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) * -1)" />
    <mutant id="mutant_708" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) + 1)" />
    <mutant id="mutant_9018" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(in[(inPtr - 1)]) - '0'" to="((in[(inPtr - 1)]) - '0') - 1" />
    <mutant id="mutant_9019" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(in[(inPtr - 1)]) - '0'" to="((in[(inPtr - 1)]) - '0') * -1" />
    <mutant id="mutant_9016" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="((inPtr - 1) + 1)" />
    <mutant id="mutant_9017" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="((inPtr - 1) * -1)" />
    <mutant id="mutant_712" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) + 1)" />
    <mutant id="mutant_9010" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="inEnd - inPtr" to="(inEnd - inPtr) * -1" />
    <mutant id="mutant_713" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; ae) &amp;&amp; (bs &lt; be)" to="!((as &lt; ae) &amp;&amp; (bs &lt; be))" />
    <mutant id="mutant_9011" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="inEnd - inPtr" to="(inEnd - inPtr) + 1" />
    <mutant id="mutant_714" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - 1)" to="((ae - 1) + 1)" />
    <mutant id="mutant_715" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - 1)" to="((ae - 1) - 1)" />
    <mutant id="mutant_9014" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="((inPtr - 1) * -1)" />
    <mutant id="mutant_9015" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="((inPtr - 1) - 1)" />
    <mutant id="mutant_710" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) * -1)" />
    <mutant id="mutant_9012" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="((inPtr - 1) - 1)" />
    <mutant id="mutant_711" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) - 1)" />
    <mutant id="mutant_9013" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="((inPtr - 1) + 1)" />
    <mutant id="mutant_716" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - 1)" to="((ae - 1) * -1)" />
    <mutant id="mutant_717" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; (ae - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(ac))" to="!((as &lt; (ae - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(ac)))" />
    <mutant id="mutant_718" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - 1)" to="((be - 1) - 1)" />
    <mutant id="mutant_719" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - 1)" to="((be - 1) + 1)" />
    <mutant id="mutant_9007" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="((inEnd - 1) - 1)" />
    <mutant id="mutant_9008" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="((inEnd - 1) + 1)" />
    <mutant id="mutant_9005" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inPtr + 1)" to="((inPtr + 1) + 1)" />
    <mutant id="mutant_9006" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="((inEnd - 1) * -1)" />
    <mutant id="mutant_9009" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="inEnd - inPtr" to="(inEnd - inPtr) - 1" />
    <mutant id="mutant_723" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) + 1)" />
    <mutant id="mutant_9087" viable="false" in="?" from="'z' + 1" to="('z' + 1) - 1" />
    <mutant id="mutant_724" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) * -1)" />
    <mutant id="mutant_9088" viable="true" in="org.eclipse.jgit.util.RawParseUtils.author(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="!((ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p'))" />
    <mutant id="mutant_725" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) - 1)" />
    <mutant id="mutant_9085" viable="false" in="?" from="'z' + 1" to="('z' + 1) * -1" />
    <mutant id="mutant_726" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + (c &amp; 255)) * -1" />
    <mutant id="mutant_9086" viable="false" in="?" from="'z' + 1" to="('z' + 1) + 1" />
    <mutant id="mutant_720" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - 1)" to="((be - 1) * -1)" />
    <mutant id="mutant_721" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bs &lt; (be - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(bc))" to="!((bs &lt; (be - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(bc)))" />
    <mutant id="mutant_9089" viable="true" in="org.eclipse.jgit.util.RawParseUtils.commitMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="!((ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p'))" />
    <mutant id="mutant_722" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as == ae) &amp;&amp; (bs == be)" to="!((as == ae) &amp;&amp; (bs == be))" />
    <mutant id="mutant_9080" viable="false" in="?" from="(i - 'A')" to="((i - 'A') * -1)" />
    <mutant id="mutant_727" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + (c &amp; 255)) + 1" />
    <mutant id="mutant_9083" viable="false" in="?" from="((byte)((i - 'A') + 10))" to="((byte)(((i - 'A') + 10))) - 1" />
    <mutant id="mutant_728" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + (c &amp; 255)) - 1" />
    <mutant id="mutant_9084" viable="false" in="?" from="((byte)((i - 'A') + 10))" to="((byte)(((i - 'A') + 10))) + 1" />
    <mutant id="mutant_729" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) * -1)" />
    <mutant id="mutant_9081" viable="false" in="?" from="(i - 'A')" to="((i - 'A') - 1)" />
    <mutant id="mutant_9082" viable="false" in="?" from="((byte)((i - 'A') + 10))" to="((byte)(((i - 'A') + 10))) * -1" />
    <mutant id="mutant_6802" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status))" to="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) - 1)" />
    <mutant id="mutant_6803" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status))" to="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) * -1)" />
    <mutant id="mutant_6804" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;)" to="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) * -1)" />
    <mutant id="mutant_6805" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;)" to="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) - 1)" />
    <mutant id="mutant_6806" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;)" to="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + 1)" />
    <mutant id="mutant_6807" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" to="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) * -1)" />
    <mutant id="mutant_6808" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" to="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) - 1)" />
    <mutant id="mutant_6809" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" to="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + 1)" />
    <mutant id="mutant_6800" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;)" to="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + 1)" />
    <mutant id="mutant_6801" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status))" to="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + 1)" />
    <mutant id="mutant_734" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) + 1)" />
    <mutant id="mutant_9076" viable="false" in="?" from="((byte)((i - 'a') + 10))" to="((byte)(((i - 'a') + 10))) * -1" />
    <mutant id="mutant_735" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="((ae - as) * -1)" />
    <mutant id="mutant_9077" viable="false" in="?" from="((byte)((i - 'a') + 10))" to="((byte)(((i - 'a') + 10))) - 1" />
    <mutant id="mutant_736" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="((ae - as) - 1)" />
    <mutant id="mutant_9074" viable="false" in="?" from="(i - 'a')" to="((i - 'a') + 1)" />
    <mutant id="mutant_737" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="((ae - as) + 1)" />
    <mutant id="mutant_9075" viable="false" in="?" from="(i - 'a')" to="((i - 'a') - 1)" />
    <mutant id="mutant_730" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) + 1)" />
    <mutant id="mutant_731" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) - 1)" />
    <mutant id="mutant_732" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) * -1)" />
    <mutant id="mutant_9078" viable="false" in="?" from="((byte)((i - 'a') + 10))" to="((byte)(((i - 'a') + 10))) + 1" />
    <mutant id="mutant_733" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) - 1)" />
    <mutant id="mutant_9079" viable="false" in="?" from="(i - 'A')" to="((i - 'A') + 1)" />
    <mutant id="mutant_738" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="((be - bs) - 1)" />
    <mutant id="mutant_9072" viable="false" in="?" from="((byte)(i - '0'))" to="((byte)((i - '0'))) + 1" />
    <mutant id="mutant_739" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="((be - bs) * -1)" />
    <mutant id="mutant_9073" viable="false" in="?" from="(i - 'a')" to="((i - 'a') * -1)" />
    <mutant id="mutant_9070" viable="false" in="?" from="((byte)(i - '0'))" to="((byte)((i - '0'))) * -1" />
    <mutant id="mutant_9071" viable="false" in="?" from="((byte)(i - '0'))" to="((byte)((i - '0'))) - 1" />
    <mutant id="mutant_745" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)) + 1" />
    <mutant id="mutant_9065" viable="false" in="?" from="((byte)(i - '0'))" to="((byte)((i - '0'))) - 1" />
    <mutant id="mutant_746" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)) * -1" />
    <mutant id="mutant_9066" viable="false" in="?" from="((byte)(i - '0'))" to="((byte)((i - '0'))) + 1" />
    <mutant id="mutant_747" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) * -1)" />
    <mutant id="mutant_9063" viable="false" in="?" from="'9' + 1" to="('9' + 1) * -1" />
    <mutant id="mutant_748" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) + 1)" />
    <mutant id="mutant_9064" viable="false" in="?" from="((byte)(i - '0'))" to="((byte)((i - '0'))) * -1" />
    <mutant id="mutant_741" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) + 1)" />
    <mutant id="mutant_9069" viable="false" in="?" from="'f' + 1" to="('f' + 1) - 1" />
    <mutant id="mutant_742" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) * -1)" />
    <mutant id="mutant_743" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) - 1)" />
    <mutant id="mutant_9067" viable="false" in="?" from="'f' + 1" to="('f' + 1) + 1" />
    <mutant id="mutant_744" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)) - 1" />
    <mutant id="mutant_9068" viable="false" in="?" from="'f' + 1" to="('f' + 1) * -1" />
    <mutant id="mutant_749" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) - 1)" />
    <mutant id="mutant_9061" viable="false" in="?" from="'9' + 1" to="('9' + 1) + 1" />
    <mutant id="mutant_9062" viable="false" in="?" from="'9' + 1" to="('9' + 1) - 1" />
    <mutant id="mutant_9060" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="ptr + 1" to="(ptr + 1) * -1" />
    <mutant id="mutant_740" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="((be - bs) + 1)" />
    <mutant id="mutant_756" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="((be - bs) - 1)" />
    <mutant id="mutant_9054" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="end - 1" to="(end - 1) * -1" />
    <mutant id="mutant_757" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="((be - bs) * -1)" />
    <mutant id="mutant_9055" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="end - 1" to="(end - 1) + 1" />
    <mutant id="mutant_758" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="((be - bs) + 1)" />
    <mutant id="mutant_9052" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + end)" to="(((startPtr) + end) + 1)" />
    <mutant id="mutant_759" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) + 1)" />
    <mutant id="mutant_9053" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimLeadingWhitespace(byte[],int,int)" from="(start &lt; end) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[start]))" to="!((start &lt; end) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[start])))" />
    <mutant id="mutant_752" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) + 1)" />
    <mutant id="mutant_9058" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="ptr + 1" to="(ptr + 1) - 1" />
    <mutant id="mutant_753" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="((ae - as) * -1)" />
    <mutant id="mutant_9059" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="ptr + 1" to="(ptr + 1) + 1" />
    <mutant id="mutant_754" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="((ae - as) - 1)" />
    <mutant id="mutant_9056" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="end - 1" to="(end - 1) - 1" />
    <mutant id="mutant_755" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="((ae - as) + 1)" />
    <mutant id="mutant_9057" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="(start &lt;= ptr) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[ptr]))" to="!((start &lt;= ptr) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[ptr])))" />
    <mutant id="mutant_9050" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + end)" to="(((startPtr) + end) - 1)" />
    <mutant id="mutant_9051" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + end)" to="(((startPtr) + end) * -1)" />
    <mutant id="mutant_750" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) * -1)" />
    <mutant id="mutant_9049" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + start)" to="(((startPtr) + start) + 1)" />
    <mutant id="mutant_751" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) - 1)" />
    <mutant id="mutant_767" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) - 1)" />
    <mutant id="mutant_768" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) * -1)" />
    <mutant id="mutant_769" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) - 1)" />
    <mutant id="mutant_763" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)) + 1" />
    <mutant id="mutant_764" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)) * -1" />
    <mutant id="mutant_765" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) * -1)" />
    <mutant id="mutant_766" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) + 1)" />
    <mutant id="mutant_5515" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.mergeTreeWalk(org.eclipse.jgit.treewalk.TreeWalk,boolean)" from="(treeWalk.isSubtree()) &amp;&amp; (enterSubtree)" to="!((treeWalk.isSubtree()) &amp;&amp; (enterSubtree))" />
    <mutant id="mutant_6846" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.beginTask(int)" from="((SideBandInputStream.PFX_REMOTE) + (currentTask))" to="(((SideBandInputStream.PFX_REMOTE) + (currentTask)) * -1)" />
    <mutant id="mutant_5516" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.mergeTrees(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.revwalk.RevTree,boolean)" from="(getUnmergedPaths().isEmpty()) &amp;&amp; (!(failed()))" to="!((getUnmergedPaths().isEmpty()) &amp;&amp; (!(failed())))" />
    <mutant id="mutant_6847" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="((cnt - (lastCnt)) - 1)" />
    <mutant id="mutant_5517" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.nonTree(int)" from="(mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode)))" to="!((mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode))))" />
    <mutant id="mutant_6848" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="((cnt - (lastCnt)) * -1)" />
    <mutant id="mutant_5518" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO == 0) &amp;&amp; (modeT == 0))" to="(!((modeO == 0) &amp;&amp; (modeT == 0)))" />
    <mutant id="mutant_6849" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="((cnt - (lastCnt)) + 1)" />
    <mutant id="mutant_5519" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO == 0) &amp;&amp; (modeT == 0)) &amp;&amp; (modeB == 0)" to="!(((modeO == 0) &amp;&amp; (modeT == 0)) &amp;&amp; (modeB == 0))" />
    <mutant id="mutant_760" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) * -1)" />
    <mutant id="mutant_761" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) - 1)" />
    <mutant id="mutant_6840" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) + &quot;]&quot;" to="((((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_762" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)) - 1" />
    <mutant id="mutant_5510" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isIndexDirty()" from="((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS)))" to="(!((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS))))" />
    <mutant id="mutant_6841" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) + &quot;]&quot;" to="((((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_5511" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isIndexDirty()" from="(ResolveMerger.nonTree(modeI)) &amp;&amp; (!((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS))))" to="!((ResolveMerger.nonTree(modeI)) &amp;&amp; (!((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS)))))" />
    <mutant id="mutant_6842" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) + &quot;]&quot;" to="((((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_5512" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(!isDirty) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeF))" to="!((!isDirty) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeF)))" />
    <mutant id="mutant_6843" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.read(byte[],int,int)" from="(eof) &amp;&amp; (r == 0)" to="!((eof) &amp;&amp; (r == 0))" />
    <mutant id="mutant_5513" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE)))" to="(!(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE))))" />
    <mutant id="mutant_6844" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.beginTask(int)" from="((SideBandInputStream.PFX_REMOTE) + (currentTask))" to="(((SideBandInputStream.PFX_REMOTE) + (currentTask)) + 1)" />
    <mutant id="mutant_5514" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE))) &amp;&amp; (modeO == (FileMode.TYPE_MISSING))" to="!((isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE))) &amp;&amp; (modeO == (FileMode.TYPE_MISSING)))" />
    <mutant id="mutant_6845" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.beginTask(int)" from="((SideBandInputStream.PFX_REMOTE) + (currentTask))" to="(((SideBandInputStream.PFX_REMOTE) + (currentTask)) - 1)" />
    <mutant id="mutant_778" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + (c &amp; 255)) - 1" />
    <mutant id="mutant_779" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(lines.size()) - 2" to="((lines.size()) - 2) + 1" />
    <mutant id="mutant_774" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) * -1)" />
    <mutant id="mutant_775" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) - 1)" />
    <mutant id="mutant_776" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + (c &amp; 255)) * -1" />
    <mutant id="mutant_777" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="(((hash &lt;&lt; 5) + hash) + (c &amp; 255)) + 1" />
    <mutant id="mutant_5504" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="((time + 1) * 1000L)" to="(((time + 1) * 1000L) * -1)" />
    <mutant id="mutant_6835" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot;" to="((&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot;) + 1" />
    <mutant id="mutant_5505" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="((time + 1) * 1000L)" to="(((time + 1) * 1000L) - 1)" />
    <mutant id="mutant_6836" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot;" to="((&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot;) * -1" />
    <mutant id="mutant_5506" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="((time + 1) * 1000L)" to="(((time + 1) * 1000L) + 1)" />
    <mutant id="mutant_6837" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;))" to="((((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) * -1)" />
    <mutant id="mutant_5507" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)" from="(callDepth + 1)" to="((callDepth + 1) - 1)" />
    <mutant id="mutant_6838" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;))" to="((((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) + 1)" />
    <mutant id="mutant_5508" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)" from="(callDepth + 1)" to="((callDepth + 1) + 1)" />
    <mutant id="mutant_6839" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;))" to="((((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) - 1)" />
    <mutant id="mutant_5509" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)" from="(callDepth + 1)" to="((callDepth + 1) * -1)" />
    <mutant id="mutant_770" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) + 1)" />
    <mutant id="mutant_771" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; ae) &amp;&amp; (bs &lt; be)" to="!((as &lt; ae) &amp;&amp; (bs &lt; be))" />
    <mutant id="mutant_772" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as == ae) &amp;&amp; (bs == be)" to="!((as == ae) &amp;&amp; (bs == be))" />
    <mutant id="mutant_773" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) + 1)" />
    <mutant id="mutant_6830" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;)" to="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) * -1)" />
    <mutant id="mutant_5500" viable="false" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(name + &quot;@JGit&quot;)" to="((name + &quot;@JGit&quot;) * -1)" />
    <mutant id="mutant_6831" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message))" to="((&quot;\&quot;&quot; + (message)) + 1)" />
    <mutant id="mutant_5501" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(time + 1)" to="((time + 1) - 1)" />
    <mutant id="mutant_6832" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message))" to="((&quot;\&quot;&quot; + (message)) - 1)" />
    <mutant id="mutant_5502" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(time + 1)" to="((time + 1) + 1)" />
    <mutant id="mutant_6833" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message))" to="((&quot;\&quot;&quot; + (message)) * -1)" />
    <mutant id="mutant_5503" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(time + 1)" to="((time + 1) * -1)" />
    <mutant id="mutant_6834" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot;" to="((&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot;) - 1" />
    <mutant id="mutant_789" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 1)" to="((lno + 1) * -1)" />
    <mutant id="mutant_785" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx &lt; end) &amp;&amp; ((lines.get((idx + 2))) &lt; ptr)" to="!((idx &lt; end) &amp;&amp; ((lines.get((idx + 2))) &lt; ptr))" />
    <mutant id="mutant_786" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findReverseLine(org.eclipse.jgit.util.IntList,int,int)" from="(0 &lt; idx) &amp;&amp; (ptr &lt;= (lines.get(idx)))" to="!((0 &lt; idx) &amp;&amp; (ptr &lt;= (lines.get(idx))))" />
    <mutant id="mutant_787" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 1)" to="((lno + 1) - 1)" />
    <mutant id="mutant_788" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 1)" to="((lno + 1) + 1)" />
    <mutant id="mutant_6824" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef))" to="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) * -1)" />
    <mutant id="mutant_6825" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" to="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) - 1)" />
    <mutant id="mutant_6826" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" to="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + 1)" />
    <mutant id="mutant_6827" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" to="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) * -1)" />
    <mutant id="mutant_6828" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;)" to="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + 1)" />
    <mutant id="mutant_6829" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;)" to="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) - 1)" />
    <mutant id="mutant_781" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(lines.size()) - 2" to="((lines.size()) - 2) * -1" />
    <mutant id="mutant_782" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx + 2)" to="((idx + 2) + 1)" />
    <mutant id="mutant_783" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx + 2)" to="((idx + 2) * -1)" />
    <mutant id="mutant_784" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx + 2)" to="((idx + 2) - 1)" />
    <mutant id="mutant_6820" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;)" to="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) * -1)" />
    <mutant id="mutant_6821" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;)" to="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) - 1)" />
    <mutant id="mutant_6822" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef))" to="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) - 1)" />
    <mutant id="mutant_780" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(lines.size()) - 2" to="((lines.size()) - 2) - 1" />
    <mutant id="mutant_6823" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef))" to="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + 1)" />
    <mutant id="mutant_9098" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="((ptr - 1) - 1)" />
    <mutant id="mutant_9099" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="((ptr - 1) * -1)" />
    <mutant id="mutant_9096" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="((ptr - 1) + 1)" />
    <mutant id="mutant_9097" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\n')" to="!((ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\n'))" />
    <mutant id="mutant_796" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) + 1)" to="(((e.beginA) + 1) * -1)" />
    <mutant id="mutant_797" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginB) + 1)" to="(((e.beginB) + 1) * -1)" />
    <mutant id="mutant_798" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginB) + 1)" to="(((e.beginB) + 1) - 1)" />
    <mutant id="mutant_799" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginB) + 1)" to="(((e.beginB) + 1) + 1)" />
    <mutant id="mutant_9090" viable="true" in="org.eclipse.jgit.util.RawParseUtils.committer(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="!((ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p'))" />
    <mutant id="mutant_9091" viable="true" in="org.eclipse.jgit.util.RawParseUtils.committer(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'a')" to="!((ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'a'))" />
    <mutant id="mutant_9094" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="((ptr - 1) - 1)" />
    <mutant id="mutant_9095" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="((ptr - 1) * -1)" />
    <mutant id="mutant_9092" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r'))" to="(!(((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r')))" />
    <mutant id="mutant_9093" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &lt; sz) &amp;&amp; (((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r'))" to="!((ptr &lt; sz) &amp;&amp; (((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r')))" />
    <mutant id="mutant_6813" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" to="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + 1)" />
    <mutant id="mutant_6814" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" to="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) - 1)" />
    <mutant id="mutant_6815" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" to="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) * -1)" />
    <mutant id="mutant_6816" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" to="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) * -1)" />
    <mutant id="mutant_6817" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" to="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + 1)" />
    <mutant id="mutant_6818" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" to="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) - 1)" />
    <mutant id="mutant_6819" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;)" to="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + 1)" />
    <mutant id="mutant_792" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 2)" to="((lno + 2) - 1)" />
    <mutant id="mutant_793" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) == (e.endA)) || ((e.beginB) == (e.endB))" to="!(((e.beginA) == (e.endA)) || ((e.beginB) == (e.endB)))" />
    <mutant id="mutant_794" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) + 1)" to="(((e.beginA) + 1) + 1)" />
    <mutant id="mutant_795" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) + 1)" to="(((e.beginA) + 1) - 1)" />
    <mutant id="mutant_6810" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;)" to="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) * -1)" />
    <mutant id="mutant_790" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 2)" to="((lno + 2) * -1)" />
    <mutant id="mutant_6811" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;)" to="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) - 1)" />
    <mutant id="mutant_791" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 2)" to="((lno + 2) + 1)" />
    <mutant id="mutant_6812" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;)" to="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + 1)" />
    <mutant id="mutant_9" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((LeafBucket.MAX_SIZE) * 3) / 4)" to="((((LeafBucket.MAX_SIZE) * 3) / 4) * -1)" />
    <mutant id="mutant_8" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((LeafBucket.MAX_SIZE) * 3)" to="(((LeafBucket.MAX_SIZE) * 3) - 1)" />
    <mutant id="mutant_5" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$LazyNoteBucket.load(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="(((prefixLen) + 2) + 1)" />
    <mutant id="mutant_686" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - start)" to="((end - start) + 1)" />
    <mutant id="mutant_4" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$LazyNoteBucket.load(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="(((prefixLen) + 2) - 1)" />
    <mutant id="mutant_687" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - start)" to="((end - start) - 1)" />
    <mutant id="mutant_7" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((LeafBucket.MAX_SIZE) * 3)" to="(((LeafBucket.MAX_SIZE) * 3) + 1)" />
    <mutant id="mutant_688" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - start)" to="((end - start) * -1)" />
    <mutant id="mutant_7981" viable="false" in="?" from="1024 * (WindowCacheConfig.KB)" to="(1024 * (WindowCacheConfig.KB)) * -1" />
    <mutant id="mutant_6" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((LeafBucket.MAX_SIZE) * 3)" to="(((LeafBucket.MAX_SIZE) * 3) * -1)" />
    <mutant id="mutant_689" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) * -1)" />
    <mutant id="mutant_6650" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="tzBegin - 1" to="(tzBegin - 1) + 1" />
    <mutant id="mutant_7980" viable="false" in="?" from="1024 * (WindowCacheConfig.KB)" to="(1024 * (WindowCacheConfig.KB)) - 1" />
    <mutant id="mutant_85" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name()))" to="((((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) - 1)" />
    <mutant id="mutant_84" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name()))" to="((((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) * -1)" />
    <mutant id="mutant_87" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) + &quot;]&quot;" to="((((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_86" viable="true" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) + &quot;]&quot;" to="((((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_89" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="(a == null) &amp;&amp; (b == null)" to="!((a == null) &amp;&amp; (b == null))" />
    <mutant id="mutant_88" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) + &quot;]&quot;" to="((((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_5317" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(ids != null) &amp;&amp; ((ids[pIdx]) != null)" to="!((ids != null) &amp;&amp; ((ids[pIdx]) != null))" />
    <mutant id="mutant_6648" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="whenBegin - 1" to="(whenBegin - 1) * -1" />
    <mutant id="mutant_5318" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(n instanceof Candidate.ReverseCandidate) &amp;&amp; (p.sourceBlob.equals(n.sourceBlob))" to="!((n instanceof Candidate.ReverseCandidate) &amp;&amp; (p.sourceBlob.equals(n.sourceBlob)))" />
    <mutant id="mutant_6649" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="hasTz &amp;&amp; (!hasWhen)" to="!(hasTz &amp;&amp; (!hasWhen))" />
    <mutant id="mutant_7979" viable="true" in="org.eclipse.jgit.storage.file.FileRepositoryBuilder.build()" from="(isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists()))" to="!((isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists())))" />
    <mutant id="mutant_90" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="((a != null) &amp;&amp; (b != null))" to="(!((a != null) &amp;&amp; (b != null)))" />
    <mutant id="mutant_5319" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getResultEnd()" from="(r.resultStart) + (r.length)" to="((r.resultStart) + (r.length)) + 1" />
    <mutant id="mutant_92" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(a == null) &amp;&amp; (b == null)" to="!((a == null) &amp;&amp; (b == null))" />
    <mutant id="mutant_91" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (a.getTreeId().equals(b.getTreeId()))" to="!(((a != null) &amp;&amp; (b != null)) &amp;&amp; (a.getTreeId().equals(b.getTreeId())))" />
    <mutant id="mutant_94" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a.getData(), b.getData()))" to="!(((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a.getData(), b.getData())))" />
    <mutant id="mutant_93" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null))" to="(!((a != null) &amp;&amp; (b != null)))" />
    <mutant id="mutant_1" viable="true" in="org.eclipse.jgit.notes.DefaultNoteMerger.merge(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.ObjectInserter)" from="((lo.getSize()) + (lt.getSize()))" to="(((lo.getSize()) + (lt.getSize())) - 1)" />
    <mutant id="mutant_682" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="dropLF &amp;&amp; ((content[(e - 1)]) == '\n')" to="!(dropLF &amp;&amp; ((content[(e - 1)]) == '\n'))" />
    <mutant id="mutant_6640" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(raw.length) - 1" to="((raw.length) - 1) * -1" />
    <mutant id="mutant_7972" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath()))" to="((((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) - 1)" />
    <mutant id="mutant_0" viable="true" in="org.eclipse.jgit.notes.DefaultNoteMerger.merge(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.ObjectInserter)" from="((lo.getSize()) + (lt.getSize()))" to="(((lo.getSize()) + (lt.getSize())) * -1)" />
    <mutant id="mutant_683" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - 1)" to="((end - 1) * -1)" />
    <mutant id="mutant_5310" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((Constants.R_TAGS) + (name))" to="(((Constants.R_TAGS) + (name)) + 1)" />
    <mutant id="mutant_6641" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(raw.length) - 1" to="((raw.length) - 1) - 1" />
    <mutant id="mutant_7971" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath()))" to="((((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) + 1)" />
    <mutant id="mutant_3" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$LazyNoteBucket.load(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="(((prefixLen) + 2) * -1)" />
    <mutant id="mutant_684" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - 1)" to="((end - 1) + 1)" />
    <mutant id="mutant_5311" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_TAGS) + (name)))))" to="!(((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_TAGS) + (name))))))" />
    <mutant id="mutant_6642" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(raw.length) - 1" to="((raw.length) - 1) + 1" />
    <mutant id="mutant_7974" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) + &quot;]&quot;" to="((((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_2" viable="true" in="org.eclipse.jgit.notes.DefaultNoteMerger.merge(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.ObjectInserter)" from="((lo.getSize()) + (lt.getSize()))" to="(((lo.getSize()) + (lt.getSize())) + 1)" />
    <mutant id="mutant_685" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - 1)" to="((end - 1) - 1)" />
    <mutant id="mutant_5312" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.find(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.treewalk.filter.PathFilter)" from="(treeWalk.next()) &amp;&amp; (BlameGenerator.isFile(treeWalk.getRawMode(0)))" to="!((treeWalk.next()) &amp;&amp; (BlameGenerator.isFile(treeWalk.getRawMode(0))))" />
    <mutant id="mutant_6643" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(tzBegin &lt; 0) || ((raw[tzBegin]) != ' ')" to="!((tzBegin &lt; 0) || ((raw[tzBegin]) != ' '))" />
    <mutant id="mutant_7973" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) + &quot;]&quot;" to="((((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_5313" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="!(((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY)))" />
    <mutant id="mutant_6644" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(whenBegin &lt; 0) || ((raw[whenBegin]) != ' ')" to="!((whenBegin &lt; 0) || ((raw[whenBegin]) != ' '))" />
    <mutant id="mutant_7976" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="(((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239))))" to="(!(((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))))" />
    <mutant id="mutant_5314" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(!(n instanceof Candidate.ReverseCandidate)) &amp;&amp; (idBuf.equals(n.sourceBlob))" to="!((!(n instanceof Candidate.ReverseCandidate)) &amp;&amp; (idBuf.equals(n.sourceBlob)))" />
    <mutant id="mutant_6645" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="hasTz &amp;&amp; hasWhen" to="!(hasTz &amp;&amp; hasWhen)" />
    <mutant id="mutant_7975" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) + &quot;]&quot;" to="((((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_680" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(e - 1)" to="((e - 1) - 1)" />
    <mutant id="mutant_5315" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(ids != null) &amp;&amp; ((ids[pIdx]) != null)" to="!((ids != null) &amp;&amp; ((ids[pIdx]) != null))" />
    <mutant id="mutant_6646" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="whenBegin - 1" to="(whenBegin - 1) - 1" />
    <mutant id="mutant_7978" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187)))) &amp;&amp; ((in[2]) == ((byte)(191)))" to="!(((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187)))) &amp;&amp; ((in[2]) == ((byte)(191))))" />
    <mutant id="mutant_681" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(e - 1)" to="((e - 1) + 1)" />
    <mutant id="mutant_5316" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(renames != null) &amp;&amp; ((renames[pIdx]) != null)" to="!((renames != null) &amp;&amp; ((renames[pIdx]) != null))" />
    <mutant id="mutant_6647" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="whenBegin - 1" to="(whenBegin - 1) + 1" />
    <mutant id="mutant_7977" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187))))" to="(!((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187)))))" />
    <mutant id="mutant_697" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="((ae - as) + 1)" />
    <mutant id="mutant_698" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="((be - bs) - 1)" />
    <mutant id="mutant_699" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="((be - bs) * -1)" />
    <mutant id="mutant_7970" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath()))" to="((((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) * -1)" />
    <mutant id="mutant_74" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) - ((bBuf[bPos]) &amp; 255)" to="((org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) - ((bBuf[bPos]) &amp; 255)) + 1" />
    <mutant id="mutant_73" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos]) &amp; 255) - (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))" to="(((aBuf[aPos]) &amp; 255) - (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))) + 1" />
    <mutant id="mutant_76" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) - ((bBuf[bPos]) &amp; 255)" to="((org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) - ((bBuf[bPos]) &amp; 255)) - 1" />
    <mutant id="mutant_75" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) - ((bBuf[bPos]) &amp; 255)" to="((org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) - ((bBuf[bPos]) &amp; 255)) * -1" />
    <mutant id="mutant_78" viable="true" in="org.eclipse.jgit.notes.Note.toString()" from="(&quot;Note[&quot; + (name()))" to="((&quot;Note[&quot; + (name())) + 1)" />
    <mutant id="mutant_77" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(&quot;Note[&quot; + (name()))" to="((&quot;Note[&quot; + (name())) * -1)" />
    <mutant id="mutant_79" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(&quot;Note[&quot; + (name()))" to="((&quot;Note[&quot; + (name())) - 1)" />
    <mutant id="mutant_5306" viable="true" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(&quot;tagged &quot; + (name))" to="((&quot;tagged &quot; + (name)) + 1)" />
    <mutant id="mutant_6637" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) + &quot;]&quot;" to="((((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) + &quot;]&quot;) - 1" />
    <mutant id="mutant_7969" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="(((getClass().getSimpleName()) + &quot;[&quot;) + 1)" />
    <mutant id="mutant_5307" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((tagger) == null) &amp;&amp; (annotated)" to="!(((tagger) == null) &amp;&amp; (annotated))" />
    <mutant id="mutant_6638" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) + &quot;]&quot;" to="((((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) + &quot;]&quot;) * -1" />
    <mutant id="mutant_7968" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="(((getClass().getSimpleName()) + &quot;[&quot;) * -1)" />
    <mutant id="mutant_5308" viable="false" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((Constants.R_TAGS) + (name))" to="(((Constants.R_TAGS) + (name)) * -1)" />
    <mutant id="mutant_6639" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) + &quot;]&quot;" to="((((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) + &quot;]&quot;) + 1" />
    <mutant id="mutant_5309" viable="false" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((Constants.R_TAGS) + (name))" to="(((Constants.R_TAGS) + (name)) - 1)" />
    <mutant id="mutant_81" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;)" to="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) - 1)" />
    <mutant id="mutant_80" viable="true" in="org.eclipse.jgit.notes.Note.toString()" from="((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;)" to="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + 1)" />
    <mutant id="mutant_83" viable="true" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name()))" to="((((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) + 1)" />
    <mutant id="mutant_82" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;)" to="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) * -1)" />
    <mutant id="mutant_693" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) - 1)" />
    <mutant id="mutant_7961" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(adds &gt; 0) &amp;&amp; ((tw.getFilter()) instanceof org.eclipse.jgit.revwalk.FollowFilter)" to="!((adds &gt; 0) &amp;&amp; ((tw.getFilter()) instanceof org.eclipse.jgit.revwalk.FollowFilter))" />
    <mutant id="mutant_694" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) + 1)" />
    <mutant id="mutant_6630" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;)" to="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) * -1)" />
    <mutant id="mutant_7960" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="((tw.getRawMode(0)) == 0) &amp;&amp; ((tw.getRawMode(1)) != 0)" to="!(((tw.getRawMode(0)) == 0) &amp;&amp; ((tw.getRawMode(1)) != 0))" />
    <mutant id="mutant_695" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="((ae - as) * -1)" />
    <mutant id="mutant_5300" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) + &quot;]&quot;)" to="(((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) + &quot;]&quot;) - 1)" />
    <mutant id="mutant_6631" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;)" to="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) * -1)" />
    <mutant id="mutant_7963" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(pMode == 0) &amp;&amp; (myMode != 0)" to="!((pMode == 0) &amp;&amp; (myMode != 0))" />
    <mutant id="mutant_696" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="((ae - as) - 1)" />
    <mutant id="mutant_5301" viable="true" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(Constants.R_TAGS) + tagName" to="((Constants.R_TAGS) + tagName) + 1" />
    <mutant id="mutant_6632" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;)" to="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) - 1)" />
    <mutant id="mutant_7962" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(myMode == pMode) &amp;&amp; (tw.idEqual(i, nParents))" to="!((myMode == pMode) &amp;&amp; (tw.idEqual(i, nParents)))" />
    <mutant id="mutant_5302" viable="false" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(Constants.R_TAGS) + tagName" to="((Constants.R_TAGS) + tagName) * -1" />
    <mutant id="mutant_6633" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;)" to="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + 1)" />
    <mutant id="mutant_7965" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="!(((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY)))" />
    <mutant id="mutant_690" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) + 1)" />
    <mutant id="mutant_5303" viable="false" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(Constants.R_TAGS) + tagName" to="((Constants.R_TAGS) + tagName) - 1" />
    <mutant id="mutant_6634" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when))))" to="((((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) - 1)" />
    <mutant id="mutant_7964" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="diff &amp;&amp; (!same)" to="!(diff &amp;&amp; (!same))" />
    <mutant id="mutant_691" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="((ai + 1) - 1)" />
    <mutant id="mutant_5304" viable="false" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(&quot;tagged &quot; + (name))" to="((&quot;tagged &quot; + (name)) * -1)" />
    <mutant id="mutant_6635" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when))))" to="((((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) + 1)" />
    <mutant id="mutant_7967" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="(((getClass().getSimpleName()) + &quot;[&quot;) - 1)" />
    <mutant id="mutant_692" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="((bi + 1) * -1)" />
    <mutant id="mutant_5305" viable="false" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(&quot;tagged &quot; + (name))" to="((&quot;tagged &quot; + (name)) - 1)" />
    <mutant id="mutant_6636" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when))))" to="((((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) * -1)" />
    <mutant id="mutant_7966" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.updateFollowFilter(org.eclipse.jgit.lib.ObjectId[],org.eclipse.jgit.diff.DiffConfig)" from="(org.eclipse.jgit.revwalk.TreeRevFilter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldFilter.getPath()))" to="!((org.eclipse.jgit.revwalk.TreeRevFilter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldFilter.getPath())))" />
    <mutant id="mutant_6626" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId))" to="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) * -1)" />
    <mutant id="mutant_7958" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="nParents + 1" to="(nParents + 1) - 1" />
    <mutant id="mutant_6627" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId))" to="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + 1)" />
    <mutant id="mutant_7957" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="nParents + 1" to="(nParents + 1) * -1" />
    <mutant id="mutant_6628" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;)" to="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + 1)" />
    <mutant id="mutant_6629" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;)" to="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) - 1)" />
    <mutant id="mutant_7959" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="nParents + 1" to="(nParents + 1) + 1" />
    <mutant id="mutant_7950" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="((headCommit.getCommitTime()) + SKEW)" to="(((headCommit.getCommitTime()) + SKEW) - 1)" />
    <mutant id="mutant_6620" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;)" to="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + 1)" />
    <mutant id="mutant_7952" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="((headCommit.getCommitTime()) + SKEW)" to="(((headCommit.getCommitTime()) + SKEW) * -1)" />
    <mutant id="mutant_6621" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;)" to="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) * -1)" />
    <mutant id="mutant_7951" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="((headCommit.getCommitTime()) + SKEW)" to="(((headCommit.getCommitTime()) + SKEW) + 1)" />
    <mutant id="mutant_6622" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;)" to="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + 1)" />
    <mutant id="mutant_7954" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="boundary &amp;&amp; (!uninteresting)" to="!(boundary &amp;&amp; (!uninteresting))" />
    <mutant id="mutant_6623" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;)" to="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) * -1)" />
    <mutant id="mutant_7953" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="(!boundary) &amp;&amp; ((walker) instanceof org.eclipse.jgit.revwalk.ObjectWalk)" to="!((!boundary) &amp;&amp; ((walker) instanceof org.eclipse.jgit.revwalk.ObjectWalk))" />
    <mutant id="mutant_6624" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;)" to="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) - 1)" />
    <mutant id="mutant_7956" viable="true" in="org.eclipse.jgit.revwalk.TopoSortGenerator.next()" from="((--(p.inDegree)) == 0) &amp;&amp; (((p.flags) &amp; (TopoSortGenerator.TOPO_DELAY)) != 0)" to="!(((--(p.inDegree)) == 0) &amp;&amp; (((p.flags) &amp; (TopoSortGenerator.TOPO_DELAY)) != 0))" />
    <mutant id="mutant_6625" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId))" to="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) - 1)" />
    <mutant id="mutant_7955" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="(walker.hasRevSort(org.eclipse.jgit.revwalk.RevSort.TOPO)) &amp;&amp; (((g.outputType()) &amp; (Generator.SORT_TOPO)) == 0)" to="!((walker.hasRevSort(org.eclipse.jgit.revwalk.RevSort.TOPO)) &amp;&amp; (((g.outputType()) &amp; (Generator.SORT_TOPO)) == 0))" />
    <mutant id="mutant_96" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null))" to="(!((a != null) &amp;&amp; (b != null)))" />
    <mutant id="mutant_95" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(a == null) &amp;&amp; (b == null)" to="!((a == null) &amp;&amp; (b == null))" />
    <mutant id="mutant_98" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.merge(int,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket)" from="((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket))" to="(!((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket)))" />
    <mutant id="mutant_97" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b))" to="!(((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b)))" />
    <mutant id="mutant_99" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.merge(int,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket)" from="((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket)) || (theirs instanceof org.eclipse.jgit.notes.FanoutBucket)" to="!(((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket)) || (theirs instanceof org.eclipse.jgit.notes.FanoutBucket))" />
    <mutant id="mutant_6615" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;)" to="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) * -1)" />
    <mutant id="mutant_7947" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="24 * 3600" to="(24 * 3600) - 1" />
    <mutant id="mutant_6616" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw))" to="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) - 1)" />
    <mutant id="mutant_7946" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.allocFlag()" from="(32 - (RevWalk.RESERVED_FLAGS))" to="((32 - (RevWalk.RESERVED_FLAGS)) * -1)" />
    <mutant id="mutant_6617" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw))" to="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + 1)" />
    <mutant id="mutant_7949" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="24 * 3600" to="(24 * 3600) + 1" />
    <mutant id="mutant_6618" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw))" to="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) * -1)" />
    <mutant id="mutant_7948" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="24 * 3600" to="(24 * 3600) * -1" />
    <mutant id="mutant_6619" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;)" to="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) - 1)" />
    <mutant id="mutant_7941" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.getCachedBytes(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.lib.ObjectLoader)" from="(5 * (RevWalk.MB))" to="((5 * (RevWalk.MB)) * -1)" />
    <mutant id="mutant_6610" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd + 1)" to="((nameEnd + 1) * -1)" />
    <mutant id="mutant_7940" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.parseAny(java.lang.Iterable,boolean)" from="(r != null) &amp;&amp; (((r.flags) &amp; (RevWalk.PARSED)) != 0)" to="!((r != null) &amp;&amp; (((r.flags) &amp; (RevWalk.PARSED)) != 0))" />
    <mutant id="mutant_6611" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd + 1)" to="((nameEnd + 1) + 1)" />
    <mutant id="mutant_7943" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.getCachedBytes(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.lib.ObjectLoader)" from="(5 * (RevWalk.MB))" to="((5 * (RevWalk.MB)) + 1)" />
    <mutant id="mutant_6612" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd + 1)" to="((nameEnd + 1) - 1)" />
    <mutant id="mutant_7942" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.getCachedBytes(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.lib.ObjectLoader)" from="(5 * (RevWalk.MB))" to="((5 * (RevWalk.MB)) - 1)" />
    <mutant id="mutant_6613" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;)" to="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + 1)" />
    <mutant id="mutant_7945" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.allocFlag()" from="(32 - (RevWalk.RESERVED_FLAGS))" to="((32 - (RevWalk.RESERVED_FLAGS)) + 1)" />
    <mutant id="mutant_6614" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;)" to="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) - 1)" />
    <mutant id="mutant_7944" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.allocFlag()" from="(32 - (RevWalk.RESERVED_FLAGS))" to="((32 - (RevWalk.RESERVED_FLAGS)) - 1)" />
    <mutant id="mutant_6690" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;)" to="(((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) * -1)" />
    <mutant id="mutant_5360" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((editList.size()) - 1)" to="(((editList.size()) - 1) + 1)" />
    <mutant id="mutant_6691" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) + (getRefName())" to="(((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) + (getRefName())) + 1" />
    <mutant id="mutant_5361" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((editList.size()) - 1)" to="(((editList.size()) - 1) - 1)" />
    <mutant id="mutant_6692" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) + (getRefName())" to="(((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) + (getRefName())) * -1" />
    <mutant id="mutant_5362" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((editList.size()) - 1)" to="(((editList.size()) - 1) * -1)" />
    <mutant id="mutant_6693" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) + (getRefName())" to="(((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) + (getRefName())) - 1" />
    <mutant id="mutant_5363" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="endB - (e.getEndA())" to="(endB - (e.getEndA())) * -1" />
    <mutant id="mutant_6694" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((type) == (ReceiveCommand.Type.UPDATE)) &amp;&amp; (!(AnyObjectId.equals(oldId, newId)))" to="!(((type) == (ReceiveCommand.Type.UPDATE)) &amp;&amp; (!(AnyObjectId.equals(oldId, newId))))" />
    <mutant id="mutant_4032" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex(byte[])" from="1 + (countEntries(scan))" to="(1 + (countEntries(scan))) - 1" />
    <mutant id="mutant_4031" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex(byte[])" from="1 + (countEntries(scan))" to="(1 + (countEntries(scan))) + 1" />
    <mutant id="mutant_4030" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex(byte[])" from="1 + (countEntries(scan))" to="(1 + (countEntries(scan))) * -1" />
    <mutant id="mutant_4029" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.writeVarint(long)" from="((limit) == 0) || ((size) &lt; (limit))" to="!(((limit) == 0) || ((size) &lt; (limit)))" />
    <mutant id="mutant_4028" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="1 + n" to="(1 + n) - 1" />
    <mutant id="mutant_4027" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="1 + n" to="(1 + n) + 1" />
    <mutant id="mutant_4026" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="1 + n" to="(1 + n) * -1" />
    <mutant id="mutant_4025" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(((size) + hdrs) + cnt)" to="((((size) + hdrs) + cnt) - 1)" />
    <mutant id="mutant_4024" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(((size) + hdrs) + cnt)" to="((((size) + hdrs) + cnt) * -1)" />
    <mutant id="mutant_4023" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(((size) + hdrs) + cnt)" to="((((size) + hdrs) + cnt) + 1)" />
    <mutant id="mutant_4022" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="((size) + hdrs)" to="(((size) + hdrs) * -1)" />
    <mutant id="mutant_5353" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((e.getBeginA()) - d)" to="(((e.getBeginA()) - d) * -1)" />
    <mutant id="mutant_6684" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;)" to="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + 1)" />
    <mutant id="mutant_5354" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(r.sourceStart) + (r.length)" to="((r.sourceStart) + (r.length)) + 1" />
    <mutant id="mutant_6685" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name()))" to="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) * -1)" />
    <mutant id="mutant_5355" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(r.sourceStart) + (r.length)" to="((r.sourceStart) + (r.length)) - 1" />
    <mutant id="mutant_6686" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name()))" to="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) - 1)" />
    <mutant id="mutant_5356" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(r.sourceStart) + (r.length)" to="((r.sourceStart) + (r.length)) * -1" />
    <mutant id="mutant_6687" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name()))" to="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + 1)" />
    <mutant id="mutant_5357" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getEndB()) - (r.sourceStart)" to="((e.getEndB()) - (r.sourceStart)) + 1" />
    <mutant id="mutant_6688" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;)" to="(((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) - 1)" />
    <mutant id="mutant_5358" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getEndB()) - (r.sourceStart)" to="((e.getEndB()) - (r.sourceStart)) * -1" />
    <mutant id="mutant_6689" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;)" to="(((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) + 1)" />
    <mutant id="mutant_5359" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getEndB()) - (r.sourceStart)" to="((e.getEndB()) - (r.sourceStart)) - 1" />
    <mutant id="mutant_6680" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((getType().name()) + &quot;: &quot;) + (getOldId().name()))" to="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + 1)" />
    <mutant id="mutant_5350" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginA()) - d" to="((e.getBeginA()) - d) * -1" />
    <mutant id="mutant_6681" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((getType().name()) + &quot;: &quot;) + (getOldId().name()))" to="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) - 1)" />
    <mutant id="mutant_5351" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((e.getBeginA()) - d)" to="(((e.getBeginA()) - d) + 1)" />
    <mutant id="mutant_6682" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;)" to="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) - 1)" />
    <mutant id="mutant_5352" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((e.getBeginA()) - d)" to="(((e.getBeginA()) - d) - 1)" />
    <mutant id="mutant_6683" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;)" to="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) * -1)" />
    <mutant id="mutant_4021" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="((size) + hdrs)" to="(((size) + hdrs) - 1)" />
    <mutant id="mutant_4020" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="((size) + hdrs)" to="(((size) + hdrs) + 1)" />
    <mutant id="mutant_4018" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(cnt % (DeltaEncoder.MAX_INSERT_DATA_SIZE))" to="((cnt % (DeltaEncoder.MAX_INSERT_DATA_SIZE)) - 1)" />
    <mutant id="mutant_4017" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(cnt % (DeltaEncoder.MAX_INSERT_DATA_SIZE))" to="((cnt % (DeltaEncoder.MAX_INSERT_DATA_SIZE)) + 1)" />
    <mutant id="mutant_4016" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="cnt / (DeltaEncoder.MAX_INSERT_DATA_SIZE)" to="(cnt / (DeltaEncoder.MAX_INSERT_DATA_SIZE)) + 1" />
    <mutant id="mutant_4015" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="cnt / (DeltaEncoder.MAX_INSERT_DATA_SIZE)" to="(cnt / (DeltaEncoder.MAX_INSERT_DATA_SIZE)) - 1" />
    <mutant id="mutant_4014" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="cnt / (DeltaEncoder.MAX_INSERT_DATA_SIZE)" to="(cnt / (DeltaEncoder.MAX_INSERT_DATA_SIZE)) * -1" />
    <mutant id="mutant_4013" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p))" to="!(((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p)))" />
    <mutant id="mutant_4012" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="(((size) + p) * -1)" />
    <mutant id="mutant_4011" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="(((size) + p) + 1)" />
    <mutant id="mutant_5342" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.sourceStart) + (aTail.length))" to="(((aTail.sourceStart) + (aTail.length)) - 1)" />
    <mutant id="mutant_6673" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(!fastForward) &amp;&amp; (!(rru.isForceUpdate()))" to="!((!fastForward) &amp;&amp; (!(rru.isForceUpdate())))" />
    <mutant id="mutant_5343" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.sourceStart) + (aTail.length))" to="(((aTail.sourceStart) + (aTail.length)) * -1)" />
    <mutant id="mutant_6674" viable="true" in="org.eclipse.jgit.transport.PushProcess.updateTrackingRefs()" from="((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK)))" to="(!((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK))))" />
    <mutant id="mutant_5344" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="(((aTail.resultStart) + (aTail.length)) == (n.resultStart)) &amp;&amp; (((aTail.sourceStart) + (aTail.length)) == (n.sourceStart))" to="!((((aTail.resultStart) + (aTail.length)) == (n.resultStart)) &amp;&amp; (((aTail.sourceStart) + (aTail.length)) == (n.sourceStart)))" />
    <mutant id="mutant_6675" viable="true" in="org.eclipse.jgit.transport.PushProcess.updateTrackingRefs()" from="(rru.hasTrackingRefUpdate()) &amp;&amp; ((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK)))" to="!((rru.hasTrackingRefUpdate()) &amp;&amp; ((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK))))" />
    <mutant id="mutant_5345" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginB()) - (r.sourceStart)" to="((e.getBeginB()) - (r.sourceStart)) * -1" />
    <mutant id="mutant_6676" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((getType().name()) + &quot;: &quot;)" to="(((getType().name()) + &quot;: &quot;) * -1)" />
    <mutant id="mutant_5346" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginB()) - (r.sourceStart)" to="((e.getBeginB()) - (r.sourceStart)) + 1" />
    <mutant id="mutant_6677" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((getType().name()) + &quot;: &quot;)" to="(((getType().name()) + &quot;: &quot;) + 1)" />
    <mutant id="mutant_5347" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginB()) - (r.sourceStart)" to="((e.getBeginB()) - (r.sourceStart)) - 1" />
    <mutant id="mutant_6678" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((getType().name()) + &quot;: &quot;)" to="(((getType().name()) + &quot;: &quot;) - 1)" />
    <mutant id="mutant_5348" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginA()) - d" to="((e.getBeginA()) - d) + 1" />
    <mutant id="mutant_6679" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((getType().name()) + &quot;: &quot;) + (getOldId().name()))" to="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) * -1)" />
    <mutant id="mutant_4019" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(cnt % (DeltaEncoder.MAX_INSERT_DATA_SIZE))" to="((cnt % (DeltaEncoder.MAX_INSERT_DATA_SIZE)) * -1)" />
    <mutant id="mutant_5349" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginA()) - d" to="((e.getBeginA()) - d) - 1" />
    <mutant id="mutant_6670" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(advertisedOld.equals(ObjectId.zeroId())) || (rru.isDelete())" to="!((advertisedOld.equals(ObjectId.zeroId())) || (rru.isDelete()))" />
    <mutant id="mutant_5340" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.resultStart) + (aTail.length))" to="(((aTail.resultStart) + (aTail.length)) * -1)" />
    <mutant id="mutant_6671" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit)))" to="(!((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit))))" />
    <mutant id="mutant_5341" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.sourceStart) + (aTail.length))" to="(((aTail.sourceStart) + (aTail.length)) + 1)" />
    <mutant id="mutant_6672" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walker.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(oldRev)), ((org.eclipse.jgit.revwalk.RevCommit)(newRev)))))" to="!(((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walker.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(oldRev)), ((org.eclipse.jgit.revwalk.RevCommit)(newRev))))))" />
    <mutant id="mutant_4010" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="(((size) + p) - 1)" />
    <mutant id="mutant_4007" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="(((size) + p) + 1)" />
    <mutant id="mutant_5339" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.resultStart) + (aTail.length))" to="(((aTail.resultStart) + (aTail.length)) - 1)" />
    <mutant id="mutant_4006" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="(((size) + p) - 1)" />
    <mutant id="mutant_4005" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="(p + (DeltaEncoder.MAX_COPY_CMD_SIZE))" to="((p + (DeltaEncoder.MAX_COPY_CMD_SIZE)) - 1)" />
    <mutant id="mutant_4004" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="(p + (DeltaEncoder.MAX_COPY_CMD_SIZE))" to="((p + (DeltaEncoder.MAX_COPY_CMD_SIZE)) + 1)" />
    <mutant id="mutant_4003" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="(p + (DeltaEncoder.MAX_COPY_CMD_SIZE))" to="((p + (DeltaEncoder.MAX_COPY_CMD_SIZE)) * -1)" />
    <mutant id="mutant_4002" viable="false" in="?" from="(DeltaEncoder.MAX_COPY_CMD_SIZE) * 4" to="((DeltaEncoder.MAX_COPY_CMD_SIZE) * 4) + 1" />
    <mutant id="mutant_4001" viable="false" in="?" from="(DeltaEncoder.MAX_COPY_CMD_SIZE) * 4" to="((DeltaEncoder.MAX_COPY_CMD_SIZE) * 4) - 1" />
    <mutant id="mutant_4000" viable="false" in="?" from="(DeltaEncoder.MAX_COPY_CMD_SIZE) * 4" to="((DeltaEncoder.MAX_COPY_CMD_SIZE) * 4) * -1" />
    <mutant id="mutant_5331" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(start == 0) &amp;&amp; (end == (resultContents.size()))" to="!((start == 0) &amp;&amp; (end == (resultContents.size())))" />
    <mutant id="mutant_6662" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header))))" to="(!(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header)))))" />
    <mutant id="mutant_7994" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="((maxMem / 4) * -1)" />
    <mutant id="mutant_5332" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(resLine &lt;= start) &amp;&amp; (start &lt; resEnd)" to="!((resLine &lt;= start) &amp;&amp; (start &lt; resEnd))" />
    <mutant id="mutant_6663" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header)))) || ((s.charAt(header.length())) != ' ')" to="!((((s.length()) &lt;= (header.length())) || (!(s.startsWith(header)))) || ((s.charAt(header.length())) != ' '))" />
    <mutant id="mutant_7993" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="((maxMem / 4) + 1)" />
    <mutant id="mutant_5333" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(resLine &lt;= end) &amp;&amp; (end &lt; resEnd)" to="!((resLine &lt;= end) &amp;&amp; (end &lt; resEnd))" />
    <mutant id="mutant_6664" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="((header.length()) + 1)" to="(((header.length()) + 1) - 1)" />
    <mutant id="mutant_7996" viable="false" in="?" from="(50 * 1024)" to="((50 * 1024) - 1)" />
    <mutant id="mutant_5334" viable="true" in="org.eclipse.jgit.blame.Candidate$ReverseCandidate.toString()" from="&quot;Reverse&quot; + (super.toString())" to="(&quot;Reverse&quot; + (super.toString())) + 1" />
    <mutant id="mutant_6665" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="((header.length()) + 1)" to="(((header.length()) + 1) * -1)" />
    <mutant id="mutant_7995" viable="false" in="?" from="(50 * 1024)" to="((50 * 1024) + 1)" />
    <mutant id="mutant_5335" viable="false" in="org.eclipse.jgit.blame.Candidate$ReverseCandidate.toString()" from="&quot;Reverse&quot; + (super.toString())" to="(&quot;Reverse&quot; + (super.toString())) - 1" />
    <mutant id="mutant_6666" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="((header.length()) + 1)" to="(((header.length()) + 1) + 1)" />
    <mutant id="mutant_7998" viable="false" in="?" from="(50 * 1024) * 1024" to="((50 * 1024) * 1024) - 1" />
    <mutant id="mutant_5336" viable="false" in="org.eclipse.jgit.blame.Candidate$ReverseCandidate.toString()" from="&quot;Reverse&quot; + (super.toString())" to="(&quot;Reverse&quot; + (super.toString())) * -1" />
    <mutant id="mutant_6667" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.sentNonce()" from="((sentNonce) == null) &amp;&amp; ((nonceGenerator) != null)" to="!(((sentNonce) == null) &amp;&amp; ((nonceGenerator) != null))" />
    <mutant id="mutant_7997" viable="false" in="?" from="(50 * 1024)" to="((50 * 1024) * -1)" />
    <mutant id="mutant_4009" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p))" to="!(((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p)))" />
    <mutant id="mutant_5337" viable="true" in="org.eclipse.jgit.blame.Candidate.canMergeRegions(org.eclipse.jgit.blame.Candidate)" from="((sourceCommit) == (other.sourceCommit)) &amp;&amp; (sourcePath.getPath().equals(other.sourcePath.getPath()))" to="!(((sourceCommit) == (other.sourceCommit)) &amp;&amp; (sourcePath.getPath().equals(other.sourcePath.getPath())))" />
    <mutant id="mutant_6668" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.build()" from="(!(received)) || ((nonceGenerator) == null)" to="!((!(received)) || ((nonceGenerator) == null))" />
    <mutant id="mutant_4008" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="(((size) + p) * -1)" />
    <mutant id="mutant_5338" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.resultStart) + (aTail.length))" to="(((aTail.resultStart) + (aTail.length)) + 1)" />
    <mutant id="mutant_6669" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(rru.isExpectingOldObjectId()) &amp;&amp; (!(rru.getExpectedOldObjectId().equals(advertisedOld)))" to="!((rru.isExpectingOldObjectId()) &amp;&amp; (!(rru.getExpectedOldObjectId().equals(advertisedOld))))" />
    <mutant id="mutant_7999" viable="false" in="?" from="(50 * 1024) * 1024" to="((50 * 1024) * 1024) + 1" />
    <mutant id="mutant_7990" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="(10 * (WindowCacheConfig.MB)) + 1" />
    <mutant id="mutant_6660" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') + nonce" to="(((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') + nonce) - 1" />
    <mutant id="mutant_7992" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="((maxMem / 4) - 1)" />
    <mutant id="mutant_5330" viable="true" in="org.eclipse.jgit.blame.BlameResult.getSourceLine(int)" from="(sourceLines[idx]) - 1" to="((sourceLines[idx]) - 1) - 1" />
    <mutant id="mutant_6661" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') + nonce" to="(((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') + nonce) + 1" />
    <mutant id="mutant_7991" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="(10 * (WindowCacheConfig.MB)) * -1" />
    <mutant id="mutant_5328" viable="true" in="org.eclipse.jgit.blame.BlameResult.getSourceLine(int)" from="(sourceLines[idx]) - 1" to="((sourceLines[idx]) - 1) + 1" />
    <mutant id="mutant_6659" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') + nonce" to="(((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') + nonce) * -1" />
    <mutant id="mutant_5329" viable="true" in="org.eclipse.jgit.blame.BlameResult.getSourceLine(int)" from="(sourceLines[idx]) - 1" to="((sourceLines[idx]) - 1) * -1" />
    <mutant id="mutant_5320" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getResultEnd()" from="(r.resultStart) + (r.length)" to="((r.resultStart) + (r.length)) - 1" />
    <mutant id="mutant_6651" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="tzBegin - 1" to="(tzBegin - 1) - 1" />
    <mutant id="mutant_7983" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="(10 * (WindowCacheConfig.MB)) - 1" />
    <mutant id="mutant_5321" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getResultEnd()" from="(r.resultStart) + (r.length)" to="((r.resultStart) + (r.length)) * -1" />
    <mutant id="mutant_6652" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="tzBegin - 1" to="(tzBegin - 1) * -1" />
    <mutant id="mutant_7982" viable="false" in="?" from="1024 * (WindowCacheConfig.KB)" to="(1024 * (WindowCacheConfig.KB)) + 1" />
    <mutant id="mutant_5322" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getSourceEnd()" from="(r.sourceStart) + (r.length)" to="((r.sourceStart) + (r.length)) + 1" />
    <mutant id="mutant_6653" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(when * 1000L)" to="((when * 1000L) + 1)" />
    <mutant id="mutant_7985" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="(10 * (WindowCacheConfig.MB)) * -1" />
    <mutant id="mutant_5323" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getSourceEnd()" from="(r.sourceStart) + (r.length)" to="((r.sourceStart) + (r.length)) - 1" />
    <mutant id="mutant_6654" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(when * 1000L)" to="((when * 1000L) * -1)" />
    <mutant id="mutant_7984" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="(10 * (WindowCacheConfig.MB)) + 1" />
    <mutant id="mutant_5324" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getSourceEnd()" from="(r.sourceStart) + (r.length)" to="((r.sourceStart) + (r.length)) * -1" />
    <mutant id="mutant_6655" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(when * 1000L)" to="((when * 1000L) - 1)" />
    <mutant id="mutant_7987" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="8 * (WindowCacheConfig.KB)" to="(8 * (WindowCacheConfig.KB)) + 1" />
    <mutant id="mutant_5325" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.findRename(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.treewalk.filter.PathFilter)" from="(org.eclipse.jgit.blame.BlameGenerator.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(path.getPath()))" to="!((org.eclipse.jgit.blame.BlameGenerator.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(path.getPath())))" />
    <mutant id="mutant_6656" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=')" to="(((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') + 1)" />
    <mutant id="mutant_7986" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="8 * (WindowCacheConfig.KB)" to="(8 * (WindowCacheConfig.KB)) * -1" />
    <mutant id="mutant_5326" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate)" from="(n == null) || (time &gt;= (n.getTime()))" to="!((n == null) || (time &gt;= (n.getTime())))" />
    <mutant id="mutant_6657" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=')" to="(((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') - 1)" />
    <mutant id="mutant_7989" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="(10 * (WindowCacheConfig.MB)) - 1" />
    <mutant id="mutant_5327" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate)" from="(n == null) || (time &gt;= (n.getTime()))" to="!((n == null) || (time &gt;= (n.getTime())))" />
    <mutant id="mutant_6658" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=')" to="(((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') * -1)" />
    <mutant id="mutant_7988" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="8 * (WindowCacheConfig.KB)" to="(8 * (WindowCacheConfig.KB)) - 1" />
    <mutant id="mutant_4076" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 7)" to="((ptr + 7) * -1)" />
    <mutant id="mutant_4075" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 7)" to="((ptr + 7) - 1)" />
    <mutant id="mutant_4074" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 6)" to="((ptr + 6) + 1)" />
    <mutant id="mutant_4073" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 6)" to="((ptr + 6) - 1)" />
    <mutant id="mutant_4072" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 6)" to="((ptr + 6) * -1)" />
    <mutant id="mutant_4071" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 5)" to="((ptr + 5) - 1)" />
    <mutant id="mutant_4070" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 5)" to="((ptr + 5) + 1)" />
    <mutant id="mutant_4069" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 5)" to="((ptr + 5) * -1)" />
    <mutant id="mutant_4068" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 4)" to="((ptr + 4) * -1)" />
    <mutant id="mutant_4067" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 4)" to="((ptr + 4) + 1)" />
    <mutant id="mutant_4066" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 4)" to="((ptr + 4) - 1)" />
    <mutant id="mutant_5397" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - theirsBeginB)" to="((theirsEndB - theirsBeginB) - 1)" />
    <mutant id="mutant_5398" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - theirsBeginB)" to="((theirsEndB - theirsBeginB) + 1)" />
    <mutant id="mutant_5399" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="minBSize - (theirsEndB - theirsBeginB)" to="(minBSize - (theirsEndB - theirsBeginB)) - 1" />
    <mutant id="mutant_5390" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getEndA()) - (theirsEdit.getEndA())" to="((oursEdit.getEndA()) - (theirsEdit.getEndA())) + 1" />
    <mutant id="mutant_5391" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getEndA()) - (theirsEdit.getEndA())" to="((oursEdit.getEndA()) - (theirsEdit.getEndA())) * -1" />
    <mutant id="mutant_5392" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getEndA()) - (theirsEdit.getEndA())" to="((oursEdit.getEndA()) - (theirsEdit.getEndA())) - 1" />
    <mutant id="mutant_5393" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="oursEndB - oursBeginB" to="(oursEndB - oursBeginB) - 1" />
    <mutant id="mutant_5394" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="oursEndB - oursBeginB" to="(oursEndB - oursBeginB) + 1" />
    <mutant id="mutant_5395" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="oursEndB - oursBeginB" to="(oursEndB - oursBeginB) * -1" />
    <mutant id="mutant_5396" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - theirsBeginB)" to="((theirsEndB - theirsBeginB) * -1)" />
    <mutant id="mutant_4065" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 3)" to="((ptr + 3) * -1)" />
    <mutant id="mutant_4064" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 3)" to="((ptr + 3) + 1)" />
    <mutant id="mutant_4063" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 3)" to="((ptr + 3) - 1)" />
    <mutant id="mutant_4062" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 2)" to="((ptr + 2) + 1)" />
    <mutant id="mutant_4061" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 2)" to="((ptr + 2) - 1)" />
    <mutant id="mutant_4060" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 2)" to="((ptr + 2) * -1)" />
    <mutant id="mutant_4059" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_4058" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_4057" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_4056" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="resPtr - start" to="(resPtr - start) - 1" />
    <mutant id="mutant_4055" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="resPtr - start" to="(resPtr - start) + 1" />
    <mutant id="mutant_5386" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getBeginA()) - (theirsEdit.getBeginA())" to="((oursEdit.getBeginA()) - (theirsEdit.getBeginA())) - 1" />
    <mutant id="mutant_5387" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getEndA()) - (oursEdit.getEndA())" to="((theirsEdit.getEndA()) - (oursEdit.getEndA())) + 1" />
    <mutant id="mutant_5388" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getEndA()) - (oursEdit.getEndA())" to="((theirsEdit.getEndA()) - (oursEdit.getEndA())) * -1" />
    <mutant id="mutant_5389" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getEndA()) - (oursEdit.getEndA())" to="((theirsEdit.getEndA()) - (oursEdit.getEndA())) - 1" />
    <mutant id="mutant_27" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((prefixLen) + 2)" to="(((prefixLen) + 2) - 1)" />
    <mutant id="mutant_26" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((prefixLen) + 2)" to="(((prefixLen) + 2) * -1)" />
    <mutant id="mutant_29" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((LeafBucket.MAX_SIZE) &lt;= (cnt)) &amp;&amp; (((prefixLen) + 2) &lt; (Constants.OBJECT_ID_STRING_LENGTH))" to="!(((LeafBucket.MAX_SIZE) &lt;= (cnt)) &amp;&amp; (((prefixLen) + 2) &lt; (Constants.OBJECT_ID_STRING_LENGTH)))" />
    <mutant id="mutant_5380" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEdit.getBeginA()) != current) &amp;&amp; ((theirsEdit.getBeginA()) != current)" to="!(((oursEdit.getBeginA()) != current) &amp;&amp; ((theirsEdit.getBeginA()) != current))" />
    <mutant id="mutant_28" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((prefixLen) + 2)" to="(((prefixLen) + 2) + 1)" />
    <mutant id="mutant_5381" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getBeginA()) - (oursEdit.getBeginA())" to="((theirsEdit.getBeginA()) - (oursEdit.getBeginA())) + 1" />
    <mutant id="mutant_5382" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getBeginA()) - (oursEdit.getBeginA())" to="((theirsEdit.getBeginA()) - (oursEdit.getBeginA())) * -1" />
    <mutant id="mutant_5383" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getBeginA()) - (oursEdit.getBeginA())" to="((theirsEdit.getBeginA()) - (oursEdit.getBeginA())) - 1" />
    <mutant id="mutant_5384" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getBeginA()) - (theirsEdit.getBeginA())" to="((oursEdit.getBeginA()) - (theirsEdit.getBeginA())) + 1" />
    <mutant id="mutant_5385" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getBeginA()) - (theirsEdit.getBeginA())" to="((oursEdit.getBeginA()) - (theirsEdit.getBeginA())) * -1" />
    <mutant id="mutant_4054" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="resPtr - start" to="(resPtr - start) * -1" />
    <mutant id="mutant_4053" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="(resPtr &lt; (res.length)) &amp;&amp; (srcPtr &lt; (src.length))" to="!((resPtr &lt; (res.length)) &amp;&amp; (srcPtr &lt; (src.length)))" />
    <mutant id="mutant_21" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.append(org.eclipse.jgit.notes.Note)" from="((prefixLen) + 2)" to="(((prefixLen) + 2) - 1)" />
    <mutant id="mutant_4052" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="end - resPtr" to="(end - resPtr) + 1" />
    <mutant id="mutant_20" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.append(org.eclipse.jgit.notes.Note)" from="((prefixLen) + 2)" to="(((prefixLen) + 2) * -1)" />
    <mutant id="mutant_4051" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="end - resPtr" to="(end - resPtr) - 1" />
    <mutant id="mutant_23" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="(((prefixLen) + 2) * -1)" />
    <mutant id="mutant_4050" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="end - resPtr" to="(end - resPtr) * -1" />
    <mutant id="mutant_22" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.append(org.eclipse.jgit.notes.Note)" from="((prefixLen) + 2)" to="(((prefixLen) + 2) + 1)" />
    <mutant id="mutant_25" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="(((prefixLen) + 2) + 1)" />
    <mutant id="mutant_24" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="(((prefixLen) + 2) - 1)" />
    <mutant id="mutant_4049" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr + (DeltaIndex.BLKSZ)" to="(blkPtr + (DeltaIndex.BLKSZ)) * -1" />
    <mutant id="mutant_4048" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr + (DeltaIndex.BLKSZ)" to="(blkPtr + (DeltaIndex.BLKSZ)) - 1" />
    <mutant id="mutant_4047" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr + (DeltaIndex.BLKSZ)" to="(blkPtr + (DeltaIndex.BLKSZ)) + 1" />
    <mutant id="mutant_4046" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestPtr - bestNeg)" to="((bestPtr - bestNeg) + 1)" />
    <mutant id="mutant_4045" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestPtr - bestNeg)" to="((bestPtr - bestNeg) - 1)" />
    <mutant id="mutant_4044" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestPtr - bestNeg)" to="((bestPtr - bestNeg) * -1)" />
    <mutant id="mutant_5375" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(cnt - 1)" to="((cnt - 1) + 1)" />
    <mutant id="mutant_5376" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(pos + (cnt - 1))" to="((pos + (cnt - 1)) + 1)" />
    <mutant id="mutant_5377" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(pos + (cnt - 1))" to="((pos + (cnt - 1)) * -1)" />
    <mutant id="mutant_5378" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(pos + (cnt - 1))" to="((pos + (cnt - 1)) - 1)" />
    <mutant id="mutant_5379" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit != (MergeAlgorithm.END_EDIT)) || (oursEdit != (MergeAlgorithm.END_EDIT))" to="!((theirsEdit != (MergeAlgorithm.END_EDIT)) || (oursEdit != (MergeAlgorithm.END_EDIT)))" />
    <mutant id="mutant_16" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.treeSize()" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))" to="((cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))) * -1" />
    <mutant id="mutant_15" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.treeSize()" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))" to="((cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))) + 1" />
    <mutant id="mutant_18" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$1.hasNext()" from="((itr) != null) &amp;&amp; (itr.hasNext())" to="!(((itr) != null) &amp;&amp; (itr.hasNext()))" />
    <mutant id="mutant_17" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.treeSize()" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))" to="((cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))) - 1" />
    <mutant id="mutant_5370" viable="true" in="org.eclipse.jgit.blame.ReverseWalk$ReverseCommit.addChild(org.eclipse.jgit.blame.ReverseWalk$ReverseCommit)" from="1 + cnt" to="(1 + cnt) * -1" />
    <mutant id="mutant_5371" viable="true" in="org.eclipse.jgit.blame.ReverseWalk$ReverseCommit.addChild(org.eclipse.jgit.blame.ReverseWalk$ReverseCommit)" from="1 + cnt" to="(1 + cnt) - 1" />
    <mutant id="mutant_19" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.build(boolean,org.eclipse.jgit.lib.ObjectInserter)" from="(e != null) &amp;&amp; ((e.pathCompare(nameBuf, 0, 2, org.eclipse.jgit.lib.FileMode.TREE)) &lt; 0)" to="!((e != null) &amp;&amp; ((e.pathCompare(nameBuf, 0, 2, org.eclipse.jgit.lib.FileMode.TREE)) &lt; 0))" />
    <mutant id="mutant_5372" viable="true" in="org.eclipse.jgit.blame.ReverseWalk$ReverseCommit.addChild(org.eclipse.jgit.blame.ReverseWalk$ReverseCommit)" from="1 + cnt" to="(1 + cnt) + 1" />
    <mutant id="mutant_5373" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(cnt - 1)" to="((cnt - 1) - 1)" />
    <mutant id="mutant_5374" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(cnt - 1)" to="((cnt - 1) * -1)" />
    <mutant id="mutant_4043" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="(blkPtr - resPtr) + 1" />
    <mutant id="mutant_4042" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="(blkPtr - resPtr) - 1" />
    <mutant id="mutant_10" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((LeafBucket.MAX_SIZE) * 3) / 4)" to="((((LeafBucket.MAX_SIZE) * 3) / 4) + 1)" />
    <mutant id="mutant_4041" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="(blkPtr - resPtr) * -1" />
    <mutant id="mutant_4040" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="neg + (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))" to="(neg + (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))) * -1" />
    <mutant id="mutant_12" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="1 + (LeafBucket.MAX_SIZE)" to="(1 + (LeafBucket.MAX_SIZE)) * -1" />
    <mutant id="mutant_11" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((LeafBucket.MAX_SIZE) * 3) / 4)" to="((((LeafBucket.MAX_SIZE) * 3) / 4) - 1)" />
    <mutant id="mutant_14" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="1 + (LeafBucket.MAX_SIZE)" to="(1 + (LeafBucket.MAX_SIZE)) + 1" />
    <mutant id="mutant_13" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="1 + (LeafBucket.MAX_SIZE)" to="(1 + (LeafBucket.MAX_SIZE)) - 1" />
    <mutant id="mutant_4039" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="neg + (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))" to="(neg + (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))) - 1" />
    <mutant id="mutant_4038" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="neg + (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))" to="(neg + (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))) + 1" />
    <mutant id="mutant_4037" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="(blkPtr - resPtr) + 1" />
    <mutant id="mutant_4036" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="(blkPtr - resPtr) - 1" />
    <mutant id="mutant_4035" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="(blkPtr - resPtr) * -1" />
    <mutant id="mutant_4034" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestLen &lt; 4096) &amp;&amp; (entryIdx &lt; (entries.length))" to="!((bestLen &lt; 4096) &amp;&amp; (entryIdx &lt; (entries.length)))" />
    <mutant id="mutant_4033" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(end &lt; (DeltaIndex.BLKSZ)) || ((table.length) == 0)" to="!((end &lt; (DeltaIndex.BLKSZ)) || ((table.length) == 0))" />
    <mutant id="mutant_5364" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="endB - (e.getEndA())" to="(endB - (e.getEndA())) + 1" />
    <mutant id="mutant_6695" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit)))" to="(!((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit))))" />
    <mutant id="mutant_5365" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="endB - (e.getEndA())" to="(endB - (e.getEndA())) - 1" />
    <mutant id="mutant_6696" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walk.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(o)), ((org.eclipse.jgit.revwalk.RevCommit)(n)))))" to="!(((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walk.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(o)), ((org.eclipse.jgit.revwalk.RevCommit)(n))))))" />
    <mutant id="mutant_5366" viable="true" in="org.eclipse.jgit.blame.Candidate.mergeRegions(org.eclipse.jgit.blame.Candidate)" from="(a != null) &amp;&amp; (b != null)" to="!((a != null) &amp;&amp; (b != null))" />
    <mutant id="mutant_6697" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="atomic &amp;&amp; (anyRejects())" to="!(atomic &amp;&amp; (anyRejects()))" />
    <mutant id="mutant_5367" viable="true" in="org.eclipse.jgit.blame.Region.toString()" from="((r.resultStart) + (r.length))" to="(((r.resultStart) + (r.length)) + 1)" />
    <mutant id="mutant_6698" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="atomic &amp;&amp; (anyRejects())" to="!(atomic &amp;&amp; (anyRejects()))" />
    <mutant id="mutant_5368" viable="true" in="org.eclipse.jgit.blame.Region.toString()" from="((r.resultStart) + (r.length))" to="(((r.resultStart) + (r.length)) - 1)" />
    <mutant id="mutant_6699" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="(echoCommandFailures) &amp;&amp; ((msgOut) != null)" to="!((echoCommandFailures) &amp;&amp; ((msgOut) != null))" />
    <mutant id="mutant_5369" viable="true" in="org.eclipse.jgit.blame.Region.toString()" from="((r.resultStart) + (r.length))" to="(((r.resultStart) + (r.length)) * -1)" />
    <mutant id="mutant_49" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="(((cnt) - p) * -1)" />
    <mutant id="mutant_48" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_1838" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) - 1)" />
    <mutant id="mutant_1839" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) + 1)" />
    <mutant id="mutant_41" viable="true" in="org.eclipse.jgit.notes.LeafBucket.treeSize(int)" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))" to="((cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))) * -1" />
    <mutant id="mutant_40" viable="true" in="org.eclipse.jgit.notes.LeafBucket.treeSize(int)" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))" to="((cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))) - 1" />
    <mutant id="mutant_43" viable="true" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(Constants.OBJECT_ID_STRING_LENGTH) - (prefixLen)" to="((Constants.OBJECT_ID_STRING_LENGTH) - (prefixLen)) * -1" />
    <mutant id="mutant_42" viable="true" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(Constants.OBJECT_ID_STRING_LENGTH) - (prefixLen)" to="((Constants.OBJECT_ID_STRING_LENGTH) - (prefixLen)) - 1" />
    <mutant id="mutant_45" viable="true" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(e != null) &amp;&amp; ((e.pathCompare(nameBuf, prefixLen, nameLen, org.eclipse.jgit.lib.FileMode.REGULAR_FILE)) &lt; 0)" to="!((e != null) &amp;&amp; ((e.pathCompare(nameBuf, prefixLen, nameLen, org.eclipse.jgit.lib.FileMode.REGULAR_FILE)) &lt; 0))" />
    <mutant id="mutant_44" viable="true" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(Constants.OBJECT_ID_STRING_LENGTH) - (prefixLen)" to="((Constants.OBJECT_ID_STRING_LENGTH) - (prefixLen)) + 1" />
    <mutant id="mutant_47" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_46" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_50" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="(((cnt) - p) + 1)" />
    <mutant id="mutant_1836" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) + 1)" />
    <mutant id="mutant_1837" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't'))" to="(!((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')))" />
    <mutant id="mutant_1834" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) * -1)" />
    <mutant id="mutant_1835" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) - 1)" />
    <mutant id="mutant_1832" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_1833" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p'))" to="(!(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')))" />
    <mutant id="mutant_1830" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_1831" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_38" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + 1)" to="((low + 1) * -1)" />
    <mutant id="mutant_37" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + 1)" to="((low + 1) - 1)" />
    <mutant id="mutant_39" viable="true" in="org.eclipse.jgit.notes.LeafBucket.treeSize(int)" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))" to="((cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))) + 1" />
    <mutant id="mutant_1829" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_1827" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1828" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_30" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="((low + high) + 1)" />
    <mutant id="mutant_32" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="((low + high) - 1)" />
    <mutant id="mutant_31" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="((low + high) * -1)" />
    <mutant id="mutant_34" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="(mid + 1) + 1" />
    <mutant id="mutant_33" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="(mid + 1) * -1" />
    <mutant id="mutant_36" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + 1)" to="((low + 1) + 1)" />
    <mutant id="mutant_35" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="(mid + 1) - 1" />
    <mutant id="mutant_4099" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 15)" to="((ptr + 15) + 1)" />
    <mutant id="mutant_1825" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) + 1)" />
    <mutant id="mutant_1826" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) * -1)" />
    <mutant id="mutant_1823" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="!((((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.')))" />
    <mutant id="mutant_1824" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) - 1)" />
    <mutant id="mutant_1821" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="((ptr + 4) * -1)" />
    <mutant id="mutant_1822" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="(!(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.')))" />
    <mutant id="mutant_1820" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="((ptr + 4) + 1)" />
    <mutant id="mutant_4090" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 12)" to="((ptr + 12) * -1)" />
    <mutant id="mutant_1818" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_1819" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="((ptr + 4) - 1)" />
    <mutant id="mutant_1816" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1817" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_63" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="(((cnt) - p) - 1)" />
    <mutant id="mutant_4098" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 14)" to="((ptr + 14) + 1)" />
    <mutant id="mutant_62" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="(((cnt) - p) + 1)" />
    <mutant id="mutant_4097" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 14)" to="((ptr + 14) - 1)" />
    <mutant id="mutant_65" viable="true" in="org.eclipse.jgit.notes.LeafBucket.growIfFull()" from="(notes.length) * 2" to="((notes.length) * 2) * -1" />
    <mutant id="mutant_4096" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 14)" to="((ptr + 14) * -1)" />
    <mutant id="mutant_64" viable="true" in="org.eclipse.jgit.notes.LeafBucket.growIfFull()" from="(notes.length) * 2" to="((notes.length) * 2) - 1" />
    <mutant id="mutant_4095" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 13)" to="((ptr + 13) - 1)" />
    <mutant id="mutant_67" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="!((aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd))" />
    <mutant id="mutant_4094" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 13)" to="((ptr + 13) * -1)" />
    <mutant id="mutant_66" viable="true" in="org.eclipse.jgit.notes.LeafBucket.growIfFull()" from="(notes.length) * 2" to="((notes.length) * 2) + 1" />
    <mutant id="mutant_4093" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 13)" to="((ptr + 13) + 1)" />
    <mutant id="mutant_69" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos++]) &amp; 255) - ((bBuf[bPos++]) &amp; 255)" to="(((aBuf[aPos++]) &amp; 255) - ((bBuf[bPos++]) &amp; 255)) - 1" />
    <mutant id="mutant_4092" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 12)" to="((ptr + 12) - 1)" />
    <mutant id="mutant_68" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos++]) &amp; 255) - ((bBuf[bPos++]) &amp; 255)" to="(((aBuf[aPos++]) &amp; 255) - ((bBuf[bPos++]) &amp; 255)) + 1" />
    <mutant id="mutant_4091" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 12)" to="((ptr + 12) + 1)" />
    <mutant id="mutant_70" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos++]) &amp; 255) - ((bBuf[bPos++]) &amp; 255)" to="(((aBuf[aPos++]) &amp; 255) - ((bBuf[bPos++]) &amp; 255)) * -1" />
    <mutant id="mutant_72" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos]) &amp; 255) - (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))" to="(((aBuf[aPos]) &amp; 255) - (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))) - 1" />
    <mutant id="mutant_4089" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 11)" to="((ptr + 11) * -1)" />
    <mutant id="mutant_71" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos]) &amp; 255) - (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))" to="(((aBuf[aPos]) &amp; 255) - (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))) * -1" />
    <mutant id="mutant_4088" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 11)" to="((ptr + 11) - 1)" />
    <mutant id="mutant_1814" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) * -1)" />
    <mutant id="mutant_1815" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" to="(!(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))))" />
    <mutant id="mutant_1812" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) - 1)" />
    <mutant id="mutant_1813" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) + 1)" />
    <mutant id="mutant_1810" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_1811" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" to="(!((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')))" />
    <mutant id="mutant_59" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_1809" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_1807" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm'))" to="(!(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')))" />
    <mutant id="mutant_1808" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_1805" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) - 1)" />
    <mutant id="mutant_1806" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) + 1)" />
    <mutant id="mutant_52" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((cnt) - p) - 1)" to="((((cnt) - p) - 1) + 1)" />
    <mutant id="mutant_4087" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 11)" to="((ptr + 11) + 1)" />
    <mutant id="mutant_51" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="(((cnt) - p) - 1)" />
    <mutant id="mutant_4086" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 10)" to="((ptr + 10) - 1)" />
    <mutant id="mutant_54" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((cnt) - p) - 1)" to="((((cnt) - p) - 1) * -1)" />
    <mutant id="mutant_4085" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 10)" to="((ptr + 10) * -1)" />
    <mutant id="mutant_53" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((cnt) - p) - 1)" to="((((cnt) - p) - 1) - 1)" />
    <mutant id="mutant_4084" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 10)" to="((ptr + 10) + 1)" />
    <mutant id="mutant_56" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_4083" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 9)" to="((ptr + 9) - 1)" />
    <mutant id="mutant_55" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_4082" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 9)" to="((ptr + 9) * -1)" />
    <mutant id="mutant_58" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_4081" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 9)" to="((ptr + 9) + 1)" />
    <mutant id="mutant_57" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_4080" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 8)" to="((ptr + 8) * -1)" />
    <mutant id="mutant_4079" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 8)" to="((ptr + 8) + 1)" />
    <mutant id="mutant_61" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="(((cnt) - p) * -1)" />
    <mutant id="mutant_4078" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 8)" to="((ptr + 8) - 1)" />
    <mutant id="mutant_60" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_4077" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 7)" to="((ptr + 7) + 1)" />
    <mutant id="mutant_1803" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_1804" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) * -1)" />
    <mutant id="mutant_1801" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1802" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_1800" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="!(((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.')))" />
    <mutant id="mutant_1872" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1873" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_1870" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="(!(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.')))" />
    <mutant id="mutant_1871" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="!(((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.')))" />
    <mutant id="mutant_1878" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r'))" to="(!(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')))" />
    <mutant id="mutant_1879" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) * -1)" />
    <mutant id="mutant_1876" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_1877" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_1874" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_1875" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_1861" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) - 1)" />
    <mutant id="mutant_1862" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) + 1)" />
    <mutant id="mutant_1860" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) * -1)" />
    <mutant id="mutant_1869" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) * -1)" />
    <mutant id="mutant_1867" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) - 1)" />
    <mutant id="mutant_1868" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) + 1)" />
    <mutant id="mutant_1865" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_1866" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_1863" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l'))" to="(!((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l')))" />
    <mutant id="mutant_1864" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1850" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) - 1)" />
    <mutant id="mutant_1851" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) + 1)" />
    <mutant id="mutant_1858" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_1859" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" to="(!(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')))" />
    <mutant id="mutant_1856" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_1857" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_1854" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_1855" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_1852" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) * -1)" />
    <mutant id="mutant_1853" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1849" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="!((((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.')))" />
    <mutant id="mutant_1840" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) * -1)" />
    <mutant id="mutant_1847" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="((ptr + 4) * -1)" />
    <mutant id="mutant_1848" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="(!(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.')))" />
    <mutant id="mutant_1845" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="((ptr + 4) - 1)" />
    <mutant id="mutant_1846" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="((ptr + 4) + 1)" />
    <mutant id="mutant_1843" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_1844" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_1841" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" to="(!(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))))" />
    <mutant id="mutant_1842" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1894" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment(byte[],int,int)" from="(e &lt; end) &amp;&amp; ((raw[e]) == 0)" to="!((e &lt; end) &amp;&amp; ((raw[e]) == 0))" />
    <mutant id="mutant_1895" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="end - ptr" to="(end - ptr) + 1" />
    <mutant id="mutant_1892" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPath(byte[],int,int)" from="ptr + 1" to="(ptr + 1) + 1" />
    <mutant id="mutant_1893" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPath(byte[],int,int)" from="ptr + 1" to="(ptr + 1) * -1" />
    <mutant id="mutant_1890" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="!(((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.')))" />
    <mutant id="mutant_1891" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPath(byte[],int,int)" from="ptr + 1" to="(ptr + 1) - 1" />
    <mutant id="mutant_1898" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_1899" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_1896" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="end - ptr" to="(end - ptr) - 1" />
    <mutant id="mutant_1897" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="end - ptr" to="(end - ptr) * -1" />
    <mutant id="mutant_1883" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1884" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_1881" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) + 1)" />
    <mutant id="mutant_1882" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" to="(!((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')))" />
    <mutant id="mutant_1880" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) - 1)" />
    <mutant id="mutant_1889" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="(!(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.')))" />
    <mutant id="mutant_1887" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) + 1)" />
    <mutant id="mutant_1888" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) * -1)" />
    <mutant id="mutant_1885" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_1886" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) - 1)" />
    <mutant id="mutant_602" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="((k + x) - 1)" />
    <mutant id="mutant_603" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="((k + x) * -1)" />
    <mutant id="mutant_604" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="((k + x) + 1)" />
    <mutant id="mutant_605" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(x &gt;= (endA)) || ((k + x) &gt;= (endB))" to="!((x &gt;= (endA)) || ((k + x) &gt;= (endB)))" />
    <mutant id="mutant_600" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="((k + x) * -1)" />
    <mutant id="mutant_601" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="((k + x) + 1)" />
    <mutant id="mutant_606" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginA == endA) || (beginB == endB)" to="!((beginA == endA) || (beginB == endB))" />
    <mutant id="mutant_607" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="beginB - endA" to="(beginB - endA) * -1" />
    <mutant id="mutant_608" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="beginB - endA" to="(beginB - endA) + 1" />
    <mutant id="mutant_609" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="beginB - endA" to="(beginB - endA) - 1" />
    <mutant id="mutant_613" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginB - beginA)" to="((beginB - beginA) - 1)" />
    <mutant id="mutant_614" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginB - beginA)" to="((beginB - beginA) * -1)" />
    <mutant id="mutant_615" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginB - beginA)" to="((beginB - beginA) + 1)" />
    <mutant id="mutant_616" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(endB - endA)" to="((endB - endA) + 1)" />
    <mutant id="mutant_610" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="endB - beginA" to="(endB - beginA) + 1" />
    <mutant id="mutant_611" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="endB - beginA" to="(endB - beginA) * -1" />
    <mutant id="mutant_612" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="endB - beginA" to="(endB - beginA) - 1" />
    <mutant id="mutant_617" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(endB - endA)" to="((endB - endA) - 1)" />
    <mutant id="mutant_618" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(endB - endA)" to="((endB - endA) * -1)" />
    <mutant id="mutant_619" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(forward.calculate(d)) || (backward.calculate(d))" to="!((forward.calculate(d)) || (backward.calculate(d)))" />
    <mutant id="mutant_624" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.beginA)" to="(k + (this.beginA)) - 1" />
    <mutant id="mutant_625" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.beginA)" to="(k + (this.beginA)) * -1" />
    <mutant id="mutant_626" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="endB - endA" to="(endB - endA) + 1" />
    <mutant id="mutant_627" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="endB - endA" to="(endB - endA) - 1" />
    <mutant id="mutant_620" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="beginB - beginA" to="(beginB - beginA) - 1" />
    <mutant id="mutant_621" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="beginB - beginA" to="(beginB - beginA) * -1" />
    <mutant id="mutant_622" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="beginB - beginA" to="(beginB - beginA) + 1" />
    <mutant id="mutant_623" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.beginA)" to="(k + (this.beginA)) + 1" />
    <mutant id="mutant_628" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="endB - endA" to="(endB - endA) * -1" />
    <mutant id="mutant_629" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.endA)" to="(k + (this.endA)) * -1" />
    <mutant id="mutant_635" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.beginB) - (edit.beginA)" to="((edit.beginB) - (edit.beginA)) - 1" />
    <mutant id="mutant_636" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="((k + x) - 1)" />
    <mutant id="mutant_637" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="((k + x) * -1)" />
    <mutant id="mutant_638" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="((k + x) + 1)" />
    <mutant id="mutant_631" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.endA)" to="(k + (this.endA)) + 1" />
    <mutant id="mutant_632" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(beginA &lt; (edit.beginA)) || (beginB &lt; (edit.beginB))" to="!((beginA &lt; (edit.beginA)) || (beginB &lt; (edit.beginB)))" />
    <mutant id="mutant_633" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.beginB) - (edit.beginA)" to="((edit.beginB) - (edit.beginA)) + 1" />
    <mutant id="mutant_634" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.beginB) - (edit.beginA)" to="((edit.beginB) - (edit.beginA)) * -1" />
    <mutant id="mutant_639" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(endA &gt; (edit.endA)) || (endB &gt; (edit.endB))" to="!((endA &gt; (edit.endA)) || (endB &gt; (edit.endB)))" />
    <mutant id="mutant_630" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.endA)" to="(k + (this.endA)) - 1" />
    <mutant id="mutant_646" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(org.eclipse.jgit.diff.Edit)" from="((middle.beginA) &gt;= (middle.endA)) &amp;&amp; ((middle.beginB) &gt;= (middle.endB))" to="!(((middle.beginA) &gt;= (middle.endA)) &amp;&amp; ((middle.beginB) &gt;= (middle.endB)))" />
    <mutant id="mutant_647" viable="true" in="org.eclipse.jgit.diff.RawText.isBinary(java.io.InputStream)" from="((buffer.length) - cnt)" to="(((buffer.length) - cnt) * -1)" />
    <mutant id="mutant_648" viable="true" in="org.eclipse.jgit.diff.RawText.isBinary(java.io.InputStream)" from="((buffer.length) - cnt)" to="(((buffer.length) - cnt) + 1)" />
    <mutant id="mutant_649" viable="true" in="org.eclipse.jgit.diff.RawText.isBinary(java.io.InputStream)" from="((buffer.length) - cnt)" to="(((buffer.length) - cnt) - 1)" />
    <mutant id="mutant_642" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.endB) - (edit.endA)" to="((edit.endB) - (edit.endA)) + 1" />
    <mutant id="mutant_643" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="((k + x) - 1)" />
    <mutant id="mutant_644" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="((k + x) * -1)" />
    <mutant id="mutant_645" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="((k + x) + 1)" />
    <mutant id="mutant_6725" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="((name + '=') + value)" to="(((name + '=') + value) * -1)" />
    <mutant id="mutant_6726" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(c + 1)" to="((c + 1) + 1)" />
    <mutant id="mutant_6727" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(c + 1)" to="((c + 1) - 1)" />
    <mutant id="mutant_6728" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(c + 1)" to="((c + 1) * -1)" />
    <mutant id="mutant_6729" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) &amp;&amp; (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" to="!((org.eclipse.jgit.transport.RefSpec.isWildcard(src)) &amp;&amp; (org.eclipse.jgit.transport.RefSpec.isWildcard(dst)))" />
    <mutant id="mutant_640" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.endB) - (edit.endA)" to="((edit.endB) - (edit.endA)) - 1" />
    <mutant id="mutant_641" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.endB) - (edit.endA)" to="((edit.endB) - (edit.endA)) * -1" />
    <mutant id="mutant_6720" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="(name + '=')" to="((name + '=') * -1)" />
    <mutant id="mutant_6721" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="(name + '=')" to="((name + '=') - 1)" />
    <mutant id="mutant_6722" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="(name + '=')" to="((name + '=') + 1)" />
    <mutant id="mutant_6723" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="((name + '=') + value)" to="(((name + '=') + value) - 1)" />
    <mutant id="mutant_6724" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="((name + '=') + value)" to="(((name + '=') + value) + 1)" />
    <mutant id="mutant_657" viable="true" in="org.eclipse.jgit.diff.RawText.getEnd(int)" from="(i + 2)" to="((i + 2) * -1)" />
    <mutant id="mutant_658" viable="true" in="org.eclipse.jgit.diff.RawText.getEnd(int)" from="(i + 2)" to="((i + 2) - 1)" />
    <mutant id="mutant_659" viable="true" in="org.eclipse.jgit.diff.RawText.getStart(int)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_653" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="(end - 1)" to="((end - 1) * -1)" />
    <mutant id="mutant_654" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="(end - 1)" to="((end - 1) + 1)" />
    <mutant id="mutant_655" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="(end - 1)" to="((end - 1) - 1)" />
    <mutant id="mutant_656" viable="true" in="org.eclipse.jgit.diff.RawText.getEnd(int)" from="(i + 2)" to="((i + 2) + 1)" />
    <mutant id="mutant_6714" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="(from + ':')" to="((from + ':') - 1)" />
    <mutant id="mutant_6715" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="(from + ':')" to="((from + ':') + 1)" />
    <mutant id="mutant_6716" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="(from + ':')" to="((from + ':') * -1)" />
    <mutant id="mutant_6717" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="((from + ':') + to)" to="(((from + ':') + to) * -1)" />
    <mutant id="mutant_6718" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="((from + ':') + to)" to="(((from + ':') + to) + 1)" />
    <mutant id="mutant_6719" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="((from + ':') + to)" to="(((from + ':') + to) - 1)" />
    <mutant id="mutant_650" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="((lines.size()) - 1)" to="(((lines.size()) - 1) - 1)" />
    <mutant id="mutant_651" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="((lines.size()) - 1)" to="(((lines.size()) - 1) + 1)" />
    <mutant id="mutant_652" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="((lines.size()) - 1)" to="(((lines.size()) - 1) * -1)" />
    <mutant id="mutant_6710" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.getSortedRefs(java.util.Map)" from="(all instanceof org.eclipse.jgit.util.RefMap) || ((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null))" to="!((all instanceof org.eclipse.jgit.util.RefMap) || ((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null)))" />
    <mutant id="mutant_6711" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.send(java.util.Map)" from="((ref.getName()) + &quot;^{}&quot;)" to="(((ref.getName()) + &quot;^{}&quot;) * -1)" />
    <mutant id="mutant_6712" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.send(java.util.Map)" from="((ref.getName()) + &quot;^{}&quot;)" to="(((ref.getName()) + &quot;^{}&quot;) - 1)" />
    <mutant id="mutant_6713" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.send(java.util.Map)" from="((ref.getName()) + &quot;^{}&quot;)" to="(((ref.getName()) + &quot;^{}&quot;) + 1)" />
    <mutant id="mutant_668" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(((content.length) &gt; 1) &amp;&amp; (e &gt; 1))" to="(!(((content.length) &gt; 1) &amp;&amp; (e &gt; 1)))" />
    <mutant id="mutant_669" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 2)" to="((e - 2) - 1)" />
    <mutant id="mutant_664" viable="true" in="org.eclipse.jgit.diff.RawText.size()" from="(lines.size()) - 2" to="((lines.size()) - 2) * -1" />
    <mutant id="mutant_665" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 1)" to="((e - 1) * -1)" />
    <mutant id="mutant_666" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 1)" to="((e - 1) - 1)" />
    <mutant id="mutant_667" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 1)" to="((e - 1) + 1)" />
    <mutant id="mutant_6703" viable="false" in="org.eclipse.jgit.transport.ReceivePack$2.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="((s + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_6704" viable="false" in="org.eclipse.jgit.transport.ReceivePack$2.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="((s + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_6705" viable="true" in="org.eclipse.jgit.transport.ReceivePack$2.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="((s + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_6706" viable="false" in="org.eclipse.jgit.transport.ReceivePack$3.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="((s + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_6707" viable="false" in="org.eclipse.jgit.transport.ReceivePack$3.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="((s + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_6708" viable="true" in="org.eclipse.jgit.transport.ReceivePack$3.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="((s + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_6709" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.getSortedRefs(java.util.Map)" from="((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null))" to="(!((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null)))" />
    <mutant id="mutant_660" viable="true" in="org.eclipse.jgit.diff.RawText.getStart(int)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_661" viable="true" in="org.eclipse.jgit.diff.RawText.getStart(int)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_662" viable="true" in="org.eclipse.jgit.diff.RawText.size()" from="(lines.size()) - 2" to="((lines.size()) - 2) + 1" />
    <mutant id="mutant_663" viable="true" in="org.eclipse.jgit.diff.RawText.size()" from="(lines.size()) - 2" to="((lines.size()) - 2) - 1" />
    <mutant id="mutant_6700" viable="false" in="org.eclipse.jgit.transport.ReceivePack$1.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="((s + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_6701" viable="false" in="org.eclipse.jgit.transport.ReceivePack$1.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="((s + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_6702" viable="true" in="org.eclipse.jgit.transport.ReceivePack$1.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="((s + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_679" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(e - 1)" to="((e - 1) * -1)" />
    <mutant id="mutant_675" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_676" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(end - 1)" to="((end - 1) * -1)" />
    <mutant id="mutant_677" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(end - 1)" to="((end - 1) + 1)" />
    <mutant id="mutant_678" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(end - 1)" to="((end - 1) - 1)" />
    <mutant id="mutant_671" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 2)" to="((e - 2) + 1)" />
    <mutant id="mutant_672" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(((content.length) &gt; 1) &amp;&amp; (e &gt; 1)) &amp;&amp; ((content[(e - 2)]) == '\r')" to="!((((content.length) &gt; 1) &amp;&amp; (e &gt; 1)) &amp;&amp; ((content[(e - 2)]) == '\r'))" />
    <mutant id="mutant_673" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_674" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_670" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 2)" to="((e - 2) * -1)" />
    <mutant id="mutant_7860" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.checkConnectivity()" from="(o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(reader.has(o)))" to="!((o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(reader.has(o))))" />
    <mutant id="mutant_6527" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="((buf.length) - next) * -1" />
    <mutant id="mutant_7859" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.nextObject()" from="(obj != null) &amp;&amp; (((obj.flags) &amp; (RevWalk.SEEN)) != 0)" to="!((obj != null) &amp;&amp; (((obj.flags) &amp; (RevWalk.SEEN)) != 0))" />
    <mutant id="mutant_6528" viable="true" in="org.eclipse.jgit.transport.PackParser.streamPosition()" from="(bBase) + (bOffset)" to="((bBase) + (bOffset)) + 1" />
    <mutant id="mutant_7858" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="ptr + nameLen" to="(ptr + nameLen) - 1" />
    <mutant id="mutant_6529" viable="true" in="org.eclipse.jgit.transport.PackParser.streamPosition()" from="(bBase) + (bOffset)" to="((bBase) + (bOffset)) * -1" />
    <mutant id="mutant_7851" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="recEndPtr - ((ObjectWalk.ID_SZ) + 1)" to="(recEndPtr - ((ObjectWalk.ID_SZ) + 1)) - 1" />
    <mutant id="mutant_6520" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="((buf.length) - next) + 1" />
    <mutant id="mutant_7850" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="recEndPtr - ((ObjectWalk.ID_SZ) + 1)" to="(recEndPtr - ((ObjectWalk.ID_SZ) + 1)) * -1" />
    <mutant id="mutant_6521" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="((buf.length) - next) * -1" />
    <mutant id="mutant_7853" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="nameEnd - namePtr" to="(nameEnd - namePtr) * -1" />
    <mutant id="mutant_6522" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(free + (bAvail))" to="((free + (bAvail)) * -1)" />
    <mutant id="mutant_7852" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="recEndPtr - ((ObjectWalk.ID_SZ) + 1)" to="(recEndPtr - ((ObjectWalk.ID_SZ) + 1)) + 1" />
    <mutant id="mutant_6523" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(free + (bAvail))" to="((free + (bAvail)) + 1)" />
    <mutant id="mutant_7855" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="nameEnd - namePtr" to="(nameEnd - namePtr) + 1" />
    <mutant id="mutant_6524" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(free + (bAvail))" to="((free + (bAvail)) - 1)" />
    <mutant id="mutant_7854" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="nameEnd - namePtr" to="(nameEnd - namePtr) - 1" />
    <mutant id="mutant_6525" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="((buf.length) - next) - 1" />
    <mutant id="mutant_7857" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="ptr + nameLen" to="(ptr + nameLen) * -1" />
    <mutant id="mutant_6526" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="((buf.length) - next) + 1" />
    <mutant id="mutant_7856" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="ptr + nameLen" to="(ptr + nameLen) + 1" />
    <mutant id="mutant_6516" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(bOffset) + (bAvail)" to="((bOffset) + (bAvail)) + 1" />
    <mutant id="mutant_7848" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="((ObjectWalk.ID_SZ) + 1)" to="(((ObjectWalk.ID_SZ) + 1) * -1)" />
    <mutant id="mutant_6517" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(bOffset) + (bAvail)" to="((bOffset) + (bAvail)) - 1" />
    <mutant id="mutant_7847" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="((ObjectWalk.ID_SZ) + 1)" to="(((ObjectWalk.ID_SZ) + 1) + 1)" />
    <mutant id="mutant_6518" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(bOffset) + (bAvail)" to="((bOffset) + (bAvail)) * -1" />
    <mutant id="mutant_6519" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="((buf.length) - next) - 1" />
    <mutant id="mutant_7849" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="((ObjectWalk.ID_SZ) + 1)" to="(((ObjectWalk.ID_SZ) + 1) - 1)" />
    <mutant id="mutant_7840" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_6510" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.skip(long)" from="(toSkip - n)" to="((toSkip - n) + 1)" />
    <mutant id="mutant_7842" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_6511" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.skip(long)" from="(toSkip - n)" to="((toSkip - n) * -1)" />
    <mutant id="mutant_7841" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_6512" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="((read(skipBuffer)) != (-1)) || ((actualSize) != (expectedSize))" to="!(((read(skipBuffer)) != (-1)) || ((actualSize) != (expectedSize)))" />
    <mutant id="mutant_7844" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="startPtr + 1" to="(startPtr + 1) + 1" />
    <mutant id="mutant_6513" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="(bAvail) - (inf.getRemaining())" to="((bAvail) - (inf.getRemaining())) - 1" />
    <mutant id="mutant_7843" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_6514" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="(bAvail) - (inf.getRemaining())" to="((bAvail) - (inf.getRemaining())) * -1" />
    <mutant id="mutant_7846" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="startPtr + 1" to="(startPtr + 1) * -1" />
    <mutant id="mutant_6515" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="(bAvail) - (inf.getRemaining())" to="((bAvail) - (inf.getRemaining())) + 1" />
    <mutant id="mutant_7845" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="startPtr + 1" to="(startPtr + 1) - 1" />
    <mutant id="mutant_6505" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(pos + n)" to="((pos + n) * -1)" />
    <mutant id="mutant_7837" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_6506" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(cnt - n)" to="((cnt - n) * -1)" />
    <mutant id="mutant_7836" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_6507" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(cnt - n)" to="((cnt - n) + 1)" />
    <mutant id="mutant_7839" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_6508" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(cnt - n)" to="((cnt - n) - 1)" />
    <mutant id="mutant_7838" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_6509" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.skip(long)" from="(toSkip - n)" to="((toSkip - n) - 1)" />
    <mutant id="mutant_7831" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_6500" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.parse(java.io.InputStream)" from="((line.length()) == 0) || (line.startsWith(&quot;#&quot;))" to="!(((line.length()) == 0) || (line.startsWith(&quot;#&quot;)))" />
    <mutant id="mutant_7830" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_6501" viable="true" in="org.eclipse.jgit.transport.OperationResult.addMessages(java.lang.String)" from="(msg != null) &amp;&amp; ((msg.length()) &gt; 0)" to="!((msg != null) &amp;&amp; ((msg.length()) &gt; 0))" />
    <mutant id="mutant_7833" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_6502" viable="true" in="org.eclipse.jgit.transport.PackParser$DeltaVisit.next()" from="((parent) != null) &amp;&amp; ((parent.nextChild) == null)" to="!(((parent) != null) &amp;&amp; ((parent.nextChild) == null))" />
    <mutant id="mutant_7832" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_6503" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(pos + n)" to="((pos + n) + 1)" />
    <mutant id="mutant_7835" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_6504" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(pos + n)" to="((pos + n) - 1)" />
    <mutant id="mutant_7834" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_7826" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_7825" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_7828" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_7827" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_7829" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_7820" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="(buf[startPtr]) - '0'" to="((buf[startPtr]) - '0') - 1" />
    <mutant id="mutant_7822" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="(buf[startPtr]) - '0'" to="((buf[startPtr]) - '0') + 1" />
    <mutant id="mutant_7821" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="(buf[startPtr]) - '0'" to="((buf[startPtr]) - '0') * -1" />
    <mutant id="mutant_7824" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_7823" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_6570" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 8)" to="((p + 8) - 1)" />
    <mutant id="mutant_5240" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;)" to="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) - 1)" />
    <mutant id="mutant_6571" viable="true" in="org.eclipse.jgit.transport.PackParser.whole(long,int,long)" from="(isCheckObjectCollisions()) &amp;&amp; (readCurs.has(tempObjectId))" to="!((isCheckObjectCollisions()) &amp;&amp; (readCurs.has(tempObjectId)))" />
    <mutant id="mutant_5241" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName()))" to="((((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) - 1)" />
    <mutant id="mutant_6572" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(len != 0) &amp;&amp; (len &lt; 4)" to="!((len != 0) &amp;&amp; (len &lt; 4))" />
    <mutant id="mutant_5242" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName()))" to="((((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) + 1)" />
    <mutant id="mutant_6573" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(&quot;&quot; + ((char)(lineBuffer[0])))" to="((&quot;&quot; + ((char)(lineBuffer[0]))) + 1)" />
    <mutant id="mutant_5232" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) + &quot;\&quot;&quot;" to="((&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) + &quot;\&quot;&quot;) * -1" />
    <mutant id="mutant_6563" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + k)" to="((p + k) - 1)" />
    <mutant id="mutant_7895" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(pList.length) + 32" to="((pList.length) + 32) * -1" />
    <mutant id="mutant_5233" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) + &quot;\&quot;&quot;" to="((&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) + &quot;\&quot;&quot;) - 1" />
    <mutant id="mutant_6564" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 4)" to="((p + 4) * -1)" />
    <mutant id="mutant_7894" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(ptr + 7)" to="((ptr + 7) + 1)" />
    <mutant id="mutant_5234" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) + &quot;\&quot;&quot;" to="((&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) + &quot;\&quot;&quot;) + 1" />
    <mutant id="mutant_6565" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 4)" to="((p + 4) - 1)" />
    <mutant id="mutant_7897" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(pList.length) + 32" to="((pList.length) + 32) + 1" />
    <mutant id="mutant_5235" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(shortMessage + &quot;\n\n&quot;)" to="((shortMessage + &quot;\n\n&quot;) + 1)" />
    <mutant id="mutant_6566" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 4)" to="((p + 4) + 1)" />
    <mutant id="mutant_7896" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(pList.length) + 32" to="((pList.length) + 32) - 1" />
    <mutant id="mutant_5236" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(shortMessage + &quot;\n\n&quot;)" to="((shortMessage + &quot;\n\n&quot;) * -1)" />
    <mutant id="mutant_6567" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(vers != 2) &amp;&amp; (vers != 3)" to="!((vers != 2) &amp;&amp; (vers != 3))" />
    <mutant id="mutant_7899" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((size()) - 1)" to="(((size()) - 1) * -1)" />
    <mutant id="mutant_5237" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(shortMessage + &quot;\n\n&quot;)" to="((shortMessage + &quot;\n\n&quot;) - 1)" />
    <mutant id="mutant_6568" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 8)" to="((p + 8) * -1)" />
    <mutant id="mutant_7898" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.indexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((begin++) &lt; (size())) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="!(((begin++) &lt; (size())) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE)))" />
    <mutant id="mutant_5238" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;)" to="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) * -1)" />
    <mutant id="mutant_6569" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 8)" to="((p + 8) + 1)" />
    <mutant id="mutant_5239" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;)" to="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + 1)" />
    <mutant id="mutant_7891" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_6560" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4) + 4" to="(((Constants.PACK_SIGNATURE.length) + 4) + 4) * -1" />
    <mutant id="mutant_7890" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_5230" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage()))" to="((&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) * -1)" />
    <mutant id="mutant_6561" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + k)" to="((p + k) + 1)" />
    <mutant id="mutant_7893" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(ptr + 7)" to="((ptr + 7) * -1)" />
    <mutant id="mutant_5231" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage()))" to="((&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) - 1)" />
    <mutant id="mutant_6562" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + k)" to="((p + k) * -1)" />
    <mutant id="mutant_7892" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(ptr + 7)" to="((ptr + 7) - 1)" />
    <mutant id="mutant_5229" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage()))" to="((&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) + 1)" />
    <mutant id="mutant_5221" viable="false" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;) + (Constants.HEAD)" to="((refName + &quot;: updating &quot;) + (Constants.HEAD)) - 1" />
    <mutant id="mutant_6552" viable="false" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="((&quot;\\x&quot; + (Integer.toHexString(eof))) - 1)" />
    <mutant id="mutant_7884" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valEnd - 1)" to="((valEnd - 1) * -1)" />
    <mutant id="mutant_5222" viable="true" in="org.eclipse.jgit.api.ResetCommand.resetIndex(org.eclipse.jgit.lib.ObjectId)" from="(dcIter != null) &amp;&amp; (dcIter.idEqual(cIter))" to="!((dcIter != null) &amp;&amp; (dcIter.idEqual(cIter)))" />
    <mutant id="mutant_6553" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="((&quot;\\x&quot; + (Integer.toHexString(eof))) + 1)" />
    <mutant id="mutant_7883" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valEnd - 1)" to="((valEnd - 1) - 1)" />
    <mutant id="mutant_5223" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="(((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) - 1)" />
    <mutant id="mutant_6554" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="((bAvail) &gt; 0) &amp;&amp; (expectDataAfterPackFooter)" to="!(((bAvail) &gt; 0) &amp;&amp; (expectDataAfterPackFooter))" />
    <mutant id="mutant_7886" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(depth + 1)" to="((depth + 1) * -1)" />
    <mutant id="mutant_5224" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="(((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + 1)" />
    <mutant id="mutant_6555" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4)" to="(((Constants.PACK_SIGNATURE.length) + 4) * -1)" />
    <mutant id="mutant_7885" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(pList == null) || ((pList.length) == 0)" to="!((pList == null) || ((pList.length) == 0))" />
    <mutant id="mutant_5225" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="(((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) * -1)" />
    <mutant id="mutant_6556" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4)" to="(((Constants.PACK_SIGNATURE.length) + 4) + 1)" />
    <mutant id="mutant_7888" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(depth + 1)" to="((depth + 1) + 1)" />
    <mutant id="mutant_5226" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="(((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())) * -1" />
    <mutant id="mutant_6557" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4)" to="(((Constants.PACK_SIGNATURE.length) + 4) - 1)" />
    <mutant id="mutant_7887" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(depth + 1)" to="((depth + 1) - 1)" />
    <mutant id="mutant_5227" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="(((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())) + 1" />
    <mutant id="mutant_6558" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4) + 4" to="(((Constants.PACK_SIGNATURE.length) + 4) + 4) + 1" />
    <mutant id="mutant_5228" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="(((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())) - 1" />
    <mutant id="mutant_6559" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4) + 4" to="(((Constants.PACK_SIGNATURE.length) + 4) + 4) - 1" />
    <mutant id="mutant_7889" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_7880" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="keyEnd + 1" to="(keyEnd + 1) * -1" />
    <mutant id="mutant_6550" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(((buf[bOffset]) &amp; 255))))" to="((&quot;\\x&quot; + (Integer.toHexString(((buf[bOffset]) &amp; 255)))) + 1)" />
    <mutant id="mutant_7882" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valEnd - 1)" to="((valEnd - 1) + 1)" />
    <mutant id="mutant_5220" viable="false" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;) + (Constants.HEAD)" to="((refName + &quot;: updating &quot;) + (Constants.HEAD)) * -1" />
    <mutant id="mutant_6551" viable="false" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="((&quot;\\x&quot; + (Integer.toHexString(eof))) * -1)" />
    <mutant id="mutant_7881" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valStart &lt; (raw.length)) &amp;&amp; ((raw[valStart]) == ' ')" to="!((valStart &lt; (raw.length)) &amp;&amp; ((raw[valStart]) == ' '))" />
    <mutant id="mutant_5218" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;)" to="((refName + &quot;: updating &quot;) + 1)" />
    <mutant id="mutant_6549" viable="false" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(((buf[bOffset]) &amp; 255))))" to="((&quot;\\x&quot; + (Integer.toHexString(((buf[bOffset]) &amp; 255)))) * -1)" />
    <mutant id="mutant_5219" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;) + (Constants.HEAD)" to="((refName + &quot;: updating &quot;) + (Constants.HEAD)) + 1" />
    <mutant id="mutant_5210" viable="false" in="org.eclipse.jgit.api.ResetCommand.resolveRefToCommitId()" from="((getRefOrHEAD()) + &quot;^{commit}&quot;)" to="(((getRefOrHEAD()) + &quot;^{commit}&quot;) * -1)" />
    <mutant id="mutant_6541" viable="true" in="org.eclipse.jgit.transport.PackParser.growEntries(int)" from="((int)(objectCount)) + extraObjects" to="(((int)(objectCount)) + extraObjects) - 1" />
    <mutant id="mutant_7873" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(raw.length) - 1" to="((raw.length) - 1) - 1" />
    <mutant id="mutant_5211" viable="true" in="org.eclipse.jgit.api.ResetCommand.resolveRefToCommitId()" from="((getRefOrHEAD()) + &quot;^{commit}&quot;)" to="(((getRefOrHEAD()) + &quot;^{commit}&quot;) + 1)" />
    <mutant id="mutant_6542" viable="true" in="org.eclipse.jgit.transport.PackParser.growEntries(int)" from="((int)(objectCount)) + extraObjects" to="(((int)(objectCount)) + extraObjects) + 1" />
    <mutant id="mutant_7872" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(raw.length) - 1" to="((raw.length) - 1) * -1" />
    <mutant id="mutant_5212" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.MERGING)) || (state.equals(RepositoryState.MERGING_RESOLVED))" to="!((state.equals(RepositoryState.MERGING)) || (state.equals(RepositoryState.MERGING_RESOLVED)))" />
    <mutant id="mutant_6543" viable="true" in="org.eclipse.jgit.transport.PackParser.growEntries(int)" from="((int)(objectCount)) + extraObjects" to="(((int)(objectCount)) + extraObjects) * -1" />
    <mutant id="mutant_7875" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="ptr + 2" to="(ptr + 2) * -1" />
    <mutant id="mutant_5213" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.CHERRY_PICKING)) || (state.equals(RepositoryState.CHERRY_PICKING_RESOLVED))" to="!((state.equals(RepositoryState.CHERRY_PICKING)) || (state.equals(RepositoryState.CHERRY_PICKING_RESOLVED)))" />
    <mutant id="mutant_6544" viable="true" in="org.eclipse.jgit.transport.PackParser.indexOneObject()" from="streamPosition - ofs" to="(streamPosition - ofs) - 1" />
    <mutant id="mutant_7874" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(raw.length) - 1" to="((raw.length) - 1) + 1" />
    <mutant id="mutant_5214" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.REVERTING)) || (state.equals(RepositoryState.REVERTING_RESOLVED))" to="!((state.equals(RepositoryState.REVERTING)) || (state.equals(RepositoryState.REVERTING_RESOLVED)))" />
    <mutant id="mutant_6545" viable="true" in="org.eclipse.jgit.transport.PackParser.indexOneObject()" from="streamPosition - ofs" to="(streamPosition - ofs) + 1" />
    <mutant id="mutant_7877" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="ptr + 2" to="(ptr + 2) + 1" />
    <mutant id="mutant_5215" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="((ref) != null) &amp;&amp; (commitId == null)" to="!(((ref) != null) &amp;&amp; (commitId == null))" />
    <mutant id="mutant_6546" viable="true" in="org.eclipse.jgit.transport.PackParser.indexOneObject()" from="streamPosition - ofs" to="(streamPosition - ofs) * -1" />
    <mutant id="mutant_7876" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="ptr + 2" to="(ptr + 2) - 1" />
    <mutant id="mutant_5216" viable="false" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;)" to="((refName + &quot;: updating &quot;) * -1)" />
    <mutant id="mutant_6547" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="((bAvail) != 0) &amp;&amp; (!(expectDataAfterPackFooter))" to="!(((bAvail) != 0) &amp;&amp; (!(expectDataAfterPackFooter)))" />
    <mutant id="mutant_7879" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="keyEnd + 1" to="(keyEnd + 1) - 1" />
    <mutant id="mutant_5217" viable="false" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;)" to="((refName + &quot;: updating &quot;) - 1)" />
    <mutant id="mutant_6548" viable="false" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(((buf[bOffset]) &amp; 255))))" to="((&quot;\\x&quot; + (Integer.toHexString(((buf[bOffset]) &amp; 255)))) - 1)" />
    <mutant id="mutant_7878" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="keyEnd + 1" to="(keyEnd + 1) + 1" />
    <mutant id="mutant_7871" viable="true" in="org.eclipse.jgit.revwalk.PendingGenerator.next()" from="(n != null) &amp;&amp; ((n.commitTime) &gt;= (last.commitTime))" to="!((n != null) &amp;&amp; ((n.commitTime) &gt;= (last.commitTime)))" />
    <mutant id="mutant_6540" viable="true" in="org.eclipse.jgit.transport.PackParser.checkIfTooLarge(int,long)" from="(0 &lt; (maxObjectSizeLimit)) &amp;&amp; ((maxObjectSizeLimit) &lt; size)" to="!((0 &lt; (maxObjectSizeLimit)) &amp;&amp; ((maxObjectSizeLimit) &lt; size))" />
    <mutant id="mutant_7870" viable="false" in="?" from="5 + 1" to="(5 + 1) * -1" />
    <mutant id="mutant_5207" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(values.length) + (existing.length)" to="((values.length) + (existing.length)) - 1" />
    <mutant id="mutant_6538" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="((a != null) &amp;&amp; ((a.position) &lt; (b.position)))" to="(!((a != null) &amp;&amp; ((a.position) &lt; (b.position))))" />
    <mutant id="mutant_5208" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(values.length) + (existing.length)" to="((values.length) + (existing.length)) + 1" />
    <mutant id="mutant_6539" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="(b == null) || ((a != null) &amp;&amp; ((a.position) &lt; (b.position)))" to="!((b == null) || ((a != null) &amp;&amp; ((a.position) &lt; (b.position))))" />
    <mutant id="mutant_7869" viable="false" in="?" from="5 + 1" to="(5 + 1) + 1" />
    <mutant id="mutant_5209" viable="false" in="org.eclipse.jgit.api.ResetCommand.resolveRefToCommitId()" from="((getRefOrHEAD()) + &quot;^{commit}&quot;)" to="(((getRefOrHEAD()) + &quot;^{commit}&quot;) - 1)" />
    <mutant id="mutant_6530" viable="true" in="org.eclipse.jgit.transport.PackParser.streamPosition()" from="(bBase) + (bOffset)" to="((bBase) + (bOffset)) - 1" />
    <mutant id="mutant_7862" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_5200" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_REMOTES) + (newName)" to="((Constants.R_REMOTES) + (newName)) + 1" />
    <mutant id="mutant_6531" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="(((objectCount) - (entryCount)) + 1)" />
    <mutant id="mutant_7861" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_5201" viable="false" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_REMOTES) + (newName)" to="((Constants.R_REMOTES) + (newName)) * -1" />
    <mutant id="mutant_6532" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="(((objectCount) - (entryCount)) * -1)" />
    <mutant id="mutant_7864" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_5202" viable="false" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_REMOTES) + (newName)" to="((Constants.R_REMOTES) + (newName)) - 1" />
    <mutant id="mutant_6533" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="(((objectCount) - (entryCount)) - 1)" />
    <mutant id="mutant_7863" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_5203" viable="false" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_HEADS) + (newName)" to="((Constants.R_HEADS) + (newName)) - 1" />
    <mutant id="mutant_6534" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="(((objectCount) - (entryCount)) + 1)" />
    <mutant id="mutant_7866" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_5204" viable="false" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_HEADS) + (newName)" to="((Constants.R_HEADS) + (newName)) * -1" />
    <mutant id="mutant_6535" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="(((objectCount) - (entryCount)) * -1)" />
    <mutant id="mutant_7865" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_5205" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_HEADS) + (newName)" to="((Constants.R_HEADS) + (newName)) + 1" />
    <mutant id="mutant_6536" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="(((objectCount) - (entryCount)) - 1)" />
    <mutant id="mutant_7868" viable="false" in="?" from="5 + 1" to="(5 + 1) - 1" />
    <mutant id="mutant_5206" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(values.length) + (existing.length)" to="((values.length) + (existing.length)) * -1" />
    <mutant id="mutant_6537" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="(a != null) || (b != null)" to="!((a != null) || (b != null))" />
    <mutant id="mutant_7867" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markUninteresting(org.eclipse.jgit.revwalk.RevObject)" from="((o.getType()) != (Constants.OBJ_COMMIT)) &amp;&amp; (boundary)" to="!(((o.getType()) != (Constants.OBJ_COMMIT)) &amp;&amp; (boundary))" />
    <mutant id="mutant_5280" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(!(hasUncommittedChanges)) &amp;&amp; (diff.getUntracked().isEmpty())" to="!((!(hasUncommittedChanges)) &amp;&amp; (diff.getUntracked().isEmpty()))" />
    <mutant id="mutant_5281" viable="true" in="org.eclipse.jgit.api.SubmoduleAddCommand.call()" from="((path) == null) || ((path.length()) == 0)" to="!(((path) == null) || ((path.length()) == 0))" />
    <mutant id="mutant_5282" viable="true" in="org.eclipse.jgit.api.SubmoduleAddCommand.call()" from="((uri) == null) || ((uri.length()) == 0)" to="!(((uri) == null) || ((uri.length()) == 0))" />
    <mutant id="mutant_5283" viable="true" in="org.eclipse.jgit.api.SubmoduleInitCommand.call()" from="(url != null) || (update != null)" to="!((url != null) || (update != null))" />
    <mutant id="mutant_5284" viable="true" in="org.eclipse.jgit.api.SubmoduleSyncCommand.getHeadBranch(org.eclipse.jgit.lib.Repository)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="!((head != null) &amp;&amp; (head.isSymbolic()))" />
    <mutant id="mutant_5285" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="(((Constants.HEAD) + &quot;^{commit}&quot;) + 1)" />
    <mutant id="mutant_5286" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="(((Constants.HEAD) + &quot;^{commit}&quot;) * -1)" />
    <mutant id="mutant_5276" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty())))" to="(!(((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))))" />
    <mutant id="mutant_5277" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty())))" to="(!((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))))" />
    <mutant id="mutant_5278" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty())))" to="(!(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty()))))" />
    <mutant id="mutant_5279" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty()))) || (!(diff.getConflicting().isEmpty()))" to="!((((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty()))) || (!(diff.getConflicting().isEmpty())))" />
    <mutant id="mutant_5270" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(wtIter == null) &amp;&amp; (headIter != null)" to="!((wtIter == null) &amp;&amp; (headIter != null))" />
    <mutant id="mutant_5271" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(!(wtEdits.isEmpty())) || (!(wtDeletes.isEmpty()))" to="!((!(wtEdits.isEmpty())) || (!(wtDeletes.isEmpty())))" />
    <mutant id="mutant_5272" viable="true" in="org.eclipse.jgit.api.StashDropCommand.call()" from="(entries.size()) - 1" to="((entries.size()) - 1) * -1" />
    <mutant id="mutant_5273" viable="true" in="org.eclipse.jgit.api.StashDropCommand.call()" from="(entries.size()) - 1" to="((entries.size()) - 1) - 1" />
    <mutant id="mutant_5274" viable="true" in="org.eclipse.jgit.api.StashDropCommand.call()" from="(entries.size()) - 1" to="((entries.size()) - 1) + 1" />
    <mutant id="mutant_5275" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty())))" to="(!((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))))" />
    <mutant id="mutant_5265" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="((indexIter == null) &amp;&amp; (headIter == null))" to="(!((indexIter == null) &amp;&amp; (headIter == null)))" />
    <mutant id="mutant_6596" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(((commands == null) || (commands.isEmpty())) || (rawCommands == null))" to="(!(((commands == null) || (commands.isEmpty())) || (rawCommands == null)))" />
    <mutant id="mutant_5266" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="((indexIter == null) &amp;&amp; (headIter == null)) &amp;&amp; (!(includeUntracked))" to="!(((indexIter == null) &amp;&amp; (headIter == null)) &amp;&amp; (!(includeUntracked)))" />
    <mutant id="mutant_6597" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(((commands == null) || (commands.isEmpty())) || (rawCommands == null)) || (rawCommands.isEmpty())" to="!((((commands == null) || (commands.isEmpty())) || (rawCommands == null)) || (rawCommands.isEmpty()))" />
    <mutant id="mutant_5267" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter != null) &amp;&amp; (wtIter.idEqual(indexIter))" to="!((indexIter != null) &amp;&amp; (wtIter.idEqual(indexIter)))" />
    <mutant id="mutant_6598" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(signature == null) || (signature.isEmpty())" to="!((signature == null) || (signature.isEmpty()))" />
    <mutant id="mutant_5268" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(headIter != null) &amp;&amp; (wtIter.idEqual(headIter))" to="!((headIter != null) &amp;&amp; (wtIter.idEqual(headIter)))" />
    <mutant id="mutant_6599" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(!(signature.startsWith(org.eclipse.jgit.transport.PushCertificateParser.BEGIN_SIGNATURE))) || (!(signature.endsWith(org.eclipse.jgit.transport.PushCertificateParser.END_SIGNATURE)))" to="!((!(signature.startsWith(org.eclipse.jgit.transport.PushCertificateParser.BEGIN_SIGNATURE))) || (!(signature.endsWith(org.eclipse.jgit.transport.PushCertificateParser.END_SIGNATURE))))" />
    <mutant id="mutant_5269" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter == null) &amp;&amp; (headIter == null)" to="!((indexIter == null) &amp;&amp; (headIter == null))" />
    <mutant id="mutant_6590" viable="true" in="org.eclipse.jgit.transport.PacketLineOut.writePacket(byte[])" from="((packet.length) + 4)" to="(((packet.length) + 4) + 1)" />
    <mutant id="mutant_5260" viable="false" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="(((Constants.HEAD) + &quot;^{tree}&quot;) - 1)" />
    <mutant id="mutant_6591" viable="true" in="org.eclipse.jgit.transport.PacketLineOut.writePacket(byte[])" from="((packet.length) + 4)" to="(((packet.length) + 4) - 1)" />
    <mutant id="mutant_5261" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="(applyUntracked) &amp;&amp; ((stashCommit.getParentCount()) == 3)" to="!((applyUntracked) &amp;&amp; ((stashCommit.getParentCount()) == 3))" />
    <mutant id="mutant_6592" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(version == null) || (version.isEmpty())" to="!((version == null) || (version.isEmpty()))" />
    <mutant id="mutant_5262" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.resetIndex(org.eclipse.jgit.revwalk.RevTree)" from="(dcIter != null) &amp;&amp; (dcIter.idEqual(cIter))" to="!((dcIter != null) &amp;&amp; (dcIter.idEqual(cIter)))" />
    <mutant id="mutant_6593" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(pushee == null) || (pushee.isEmpty())" to="!((pushee == null) || (pushee.isEmpty()))" />
    <mutant id="mutant_5263" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.getHead()" from="(head == null) || ((head.getObjectId()) == null)" to="!((head == null) || ((head.getObjectId()) == null))" />
    <mutant id="mutant_6594" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(nonce == null) || (nonce.isEmpty())" to="!((nonce == null) || (nonce.isEmpty()))" />
    <mutant id="mutant_5264" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter != null) &amp;&amp; (!(indexIter.getDirCacheEntry().isMerged()))" to="!((indexIter != null) &amp;&amp; (!(indexIter.getDirCacheEntry().isMerged())))" />
    <mutant id="mutant_6595" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="((commands == null) || (commands.isEmpty()))" to="(!((commands == null) || (commands.isEmpty())))" />
    <mutant id="mutant_5254" viable="false" in="?" from="(Constants.STASH) + &quot;@{0}&quot;" to="((Constants.STASH) + &quot;@{0}&quot;) + 1" />
    <mutant id="mutant_6585" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readString()" from="(len - 1)" to="((len - 1) - 1)" />
    <mutant id="mutant_5255" viable="false" in="?" from="(Constants.STASH) + &quot;@{0}&quot;" to="((Constants.STASH) + &quot;@{0}&quot;) - 1" />
    <mutant id="mutant_6586" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readString()" from="(len - 1)" to="((len - 1) * -1)" />
    <mutant id="mutant_5256" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="(!(ignoreRepositoryState)) &amp;&amp; ((repo.getRepositoryState()) != (RepositoryState.SAFE))" to="!((!(ignoreRepositoryState)) &amp;&amp; ((repo.getRepositoryState()) != (RepositoryState.SAFE)))" />
    <mutant id="mutant_6587" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readString()" from="(len - 1)" to="((len - 1) + 1)" />
    <mutant id="mutant_5257" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((stashCommit.getParentCount()) &lt; 2) || ((stashCommit.getParentCount()) &gt; 3)" to="!(((stashCommit.getParentCount()) &lt; 2) || ((stashCommit.getParentCount()) &gt; 3))" />
    <mutant id="mutant_6588" viable="true" in="org.eclipse.jgit.transport.PacketLineOut.formatLength(byte[],int)" from="(o &gt;= 0) &amp;&amp; (w != 0)" to="!((o &gt;= 0) &amp;&amp; (w != 0))" />
    <mutant id="mutant_5258" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="(((Constants.HEAD) + &quot;^{tree}&quot;) + 1)" />
    <mutant id="mutant_6589" viable="true" in="org.eclipse.jgit.transport.PacketLineOut.writePacket(byte[])" from="((packet.length) + 4)" to="(((packet.length) + 4) * -1)" />
    <mutant id="mutant_5259" viable="false" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="(((Constants.HEAD) + &quot;^{tree}&quot;) * -1)" />
    <mutant id="mutant_6580" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2])))" to="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) + 1)" />
    <mutant id="mutant_5250" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(!(merger.failed())) &amp;&amp; (!(unmergedPaths.isEmpty()))" to="!((!(merger.failed())) &amp;&amp; (!(unmergedPaths.isEmpty())))" />
    <mutant id="mutant_6581" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2])))" to="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) - 1)" />
    <mutant id="mutant_5251" viable="true" in="org.eclipse.jgit.api.RmCommand.delete(java.io.File)" from="((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree()))))" to="(!((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree())))))" />
    <mutant id="mutant_6582" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) + ((char)(lineBuffer[3])))" to="(((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) + ((char)(lineBuffer[3]))) * -1)" />
    <mutant id="mutant_5252" viable="true" in="org.eclipse.jgit.api.RmCommand.delete(java.io.File)" from="((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree())))) &amp;&amp; (p.delete())" to="!(((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree())))) &amp;&amp; (p.delete()))" />
    <mutant id="mutant_6583" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) + ((char)(lineBuffer[3])))" to="(((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) + ((char)(lineBuffer[3]))) + 1)" />
    <mutant id="mutant_5253" viable="false" in="?" from="(Constants.STASH) + &quot;@{0}&quot;" to="((Constants.STASH) + &quot;@{0}&quot;) * -1" />
    <mutant id="mutant_6584" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) + ((char)(lineBuffer[3])))" to="(((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) + ((char)(lineBuffer[3]))) - 1)" />
    <mutant id="mutant_5243" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName()))" to="((((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) * -1)" />
    <mutant id="mutant_6574" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(&quot;&quot; + ((char)(lineBuffer[0])))" to="((&quot;&quot; + ((char)(lineBuffer[0]))) * -1)" />
    <mutant id="mutant_5244" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) + &quot;.\n&quot;" to="((((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) + &quot;.\n&quot;) - 1" />
    <mutant id="mutant_6575" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(&quot;&quot; + ((char)(lineBuffer[0])))" to="((&quot;&quot; + ((char)(lineBuffer[0]))) - 1)" />
    <mutant id="mutant_5245" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) + &quot;.\n&quot;" to="((((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) + &quot;.\n&quot;) * -1" />
    <mutant id="mutant_6576" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1])))" to="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + 1)" />
    <mutant id="mutant_5246" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) + &quot;.\n&quot;" to="((((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) + &quot;.\n&quot;) + 1" />
    <mutant id="mutant_6577" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1])))" to="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) - 1)" />
    <mutant id="mutant_5247" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;revert: &quot; + shortMessage)" to="((&quot;revert: &quot; + shortMessage) - 1)" />
    <mutant id="mutant_6578" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1])))" to="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) * -1)" />
    <mutant id="mutant_5248" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;revert: &quot; + shortMessage)" to="((&quot;revert: &quot; + shortMessage) * -1)" />
    <mutant id="mutant_6579" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2])))" to="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) * -1)" />
    <mutant id="mutant_5249" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;revert: &quot; + shortMessage)" to="((&quot;revert: &quot; + shortMessage) + 1)" />
    <mutant id="mutant_1719" viable="false" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="((char)(b + ('a' - 'A')))" to="((char)((b + ('a' - 'A')))) + 1" />
    <mutant id="mutant_1717" viable="false" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="((char)(b + ('a' - 'A')))" to="((char)((b + ('a' - 'A')))) * -1" />
    <mutant id="mutant_1718" viable="false" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="((char)(b + ('a' - 'A')))" to="((char)((b + ('a' - 'A')))) - 1" />
    <mutant id="mutant_1715" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('a' - 'A')" to="(('a' - 'A') - 1)" />
    <mutant id="mutant_1716" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('a' - 'A')" to="(('a' - 'A') + 1)" />
    <mutant id="mutant_1713" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('A' &lt;= b) &amp;&amp; (b &lt;= 'Z')" to="!(('A' &lt;= b) &amp;&amp; (b &lt;= 'Z'))" />
    <mutant id="mutant_1714" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('a' - 'A')" to="(('a' - 'A') * -1)" />
    <mutant id="mutant_1711" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(p == (ptr + 2)) &amp;&amp; ((dots == 1) || space)" to="!((p == (ptr + 2)) &amp;&amp; ((dots == 1) || space))" />
    <mutant id="mutant_1712" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(byte)" from="('1' &lt;= b) &amp;&amp; (b &lt;= '9')" to="!(('1' &lt;= b) &amp;&amp; (b &lt;= '9'))" />
    <mutant id="mutant_1710" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="((dots == 1) || space)" to="(!((dots == 1) || space))" />
    <mutant id="mutant_1708" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) - 1)" />
    <mutant id="mutant_1709" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) + 1)" />
    <mutant id="mutant_1706" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) + 1)" />
    <mutant id="mutant_1707" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) * -1)" />
    <mutant id="mutant_1704" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) * -1)" />
    <mutant id="mutant_1705" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) - 1)" />
    <mutant id="mutant_1702" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="end - 1" to="(end - 1) + 1" />
    <mutant id="mutant_1703" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="end - 1" to="(end - 1) - 1" />
    <mutant id="mutant_1700" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(g == 4) &amp;&amp; ignorable" to="!((g == 4) &amp;&amp; ignorable)" />
    <mutant id="mutant_1701" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="end - 1" to="(end - 1) * -1" />
    <mutant id="mutant_5298" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) + &quot;]&quot;)" to="(((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) + &quot;]&quot;) * -1)" />
    <mutant id="mutant_5299" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) + &quot;]&quot;)" to="(((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) + &quot;]&quot;) + 1)" />
    <mutant id="mutant_5290" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="(&quot;SimpleTag[&quot; + (name))" to="((&quot;SimpleTag[&quot; + (name)) * -1)" />
    <mutant id="mutant_5291" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="(&quot;SimpleTag[&quot; + (name))" to="((&quot;SimpleTag[&quot; + (name)) - 1)" />
    <mutant id="mutant_5292" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;)" to="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) * -1)" />
    <mutant id="mutant_5293" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;)" to="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + 1)" />
    <mutant id="mutant_5294" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;)" to="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) - 1)" />
    <mutant id="mutant_5295" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id))" to="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) * -1)" />
    <mutant id="mutant_5296" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id))" to="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) - 1)" />
    <mutant id="mutant_5297" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id))" to="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) + 1)" />
    <mutant id="mutant_5287" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="(((Constants.HEAD) + &quot;^{commit}&quot;) - 1)" />
    <mutant id="mutant_5288" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((message) != null) || ((tagger) != null)" to="!(((message) != null) || ((tagger) != null))" />
    <mutant id="mutant_5289" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="(&quot;SimpleTag[&quot; + (name))" to="((&quot;SimpleTag[&quot; + (name)) + 1)" />
    <mutant id="mutant_1751" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr == (raw.length)) || ((raw[ptr]) != ' ')" to="!((ptr == (raw.length)) || ((raw[ptr]) != ' '))" />
    <mutant id="mutant_1752" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_1750" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="((emailE + 1) * -1)" />
    <mutant id="mutant_1759" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="!(((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n'))" />
    <mutant id="mutant_1757" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_1758" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.scanPathSegment(byte[],int,int)" from="(windows) &amp;&amp; (ObjectChecker.isInvalidOnWindows(c))" to="!((windows) &amp;&amp; (ObjectChecker.isInvalidOnWindows(c)))" />
    <mutant id="mutant_1755" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_1756" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_1753" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_1754" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_1740" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE - 1)" to="((emailE - 1) - 1)" />
    <mutant id="mutant_1741" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE - 1)" to="((emailE - 1) * -1)" />
    <mutant id="mutant_1748" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="((emailE + 1) + 1)" />
    <mutant id="mutant_1749" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="((emailE + 1) - 1)" />
    <mutant id="mutant_1746" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="((emailE + 1) - 1)" />
    <mutant id="mutant_1747" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="((emailE + 1) * -1)" />
    <mutant id="mutant_1744" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE == (raw.length)) || ((raw[emailE]) != ' ')" to="!((emailE == (raw.length)) || ((raw[emailE]) != ' '))" />
    <mutant id="mutant_1745" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="((emailE + 1) + 1)" />
    <mutant id="mutant_1742" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE - 1)" to="((emailE - 1) + 1)" />
    <mutant id="mutant_1743" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE == emailB) || ((raw[(emailE - 1)]) != '&gt;')" to="!((emailE == emailB) || ((raw[(emailE - 1)]) != '&gt;'))" />
    <mutant id="mutant_900" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.common(long[],int,long[],int)" from="(srcIdx == (srcHash.length)) || (dstIdx == (dstHash.length))" to="!((srcIdx == (srcHash.length)) || (dstIdx == (dstHash.length)))" />
    <mutant id="mutant_901" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="(key * -1640562687)" to="((key * -1640562687) * -1)" />
    <mutant id="mutant_902" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="(key * -1640562687)" to="((key * -1640562687) - 1)" />
    <mutant id="mutant_1739" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB == ptr) || ((raw[(emailB - 1)]) != '&lt;')" to="!((emailB == ptr) || ((raw[(emailB - 1)]) != '&lt;'))" />
    <mutant id="mutant_907" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr - start)" to="((ptr - start) - 1)" />
    <mutant id="mutant_908" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr - start)" to="((ptr - start) + 1)" />
    <mutant id="mutant_909" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr - start)" to="((ptr - start) * -1)" />
    <mutant id="mutant_903" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="(key * -1640562687)" to="((key * -1640562687) + 1)" />
    <mutant id="mutant_904" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) + cnt)" to="(((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) + cnt) + 1)" />
    <mutant id="mutant_905" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) + cnt)" to="(((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) + cnt) * -1)" />
    <mutant id="mutant_906" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) + cnt)" to="(((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) + cnt) - 1)" />
    <mutant id="mutant_1730" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) - ((raw[bPos]) &amp; 255)" to="((org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) - ((raw[bPos]) &amp; 255)) - 1" />
    <mutant id="mutant_1737" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB - 1)" to="((emailB - 1) * -1)" />
    <mutant id="mutant_1738" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB - 1)" to="((emailB - 1) - 1)" />
    <mutant id="mutant_1735" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) - 1" to="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) - 1) - 1" />
    <mutant id="mutant_1736" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB - 1)" to="((emailB - 1) + 1)" />
    <mutant id="mutant_1733" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) - 1" to="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) - 1) * -1" />
    <mutant id="mutant_1734" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) - 1" to="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) - 1) + 1" />
    <mutant id="mutant_1731" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) - ((raw[bPos]) &amp; 255)" to="((org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) - ((raw[bPos]) &amp; 255)) + 1" />
    <mutant id="mutant_1732" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) - ((raw[bPos]) &amp; 255)" to="((org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) - ((raw[bPos]) &amp; 255)) * -1" />
    <mutant id="mutant_910" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((ptr - start) &lt; 64)" to="!((ptr &lt; end) &amp;&amp; ((ptr - start) &lt; 64))" />
    <mutant id="mutant_911" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(text &amp;&amp; (c == '\r'))" to="(!(text &amp;&amp; (c == '\r')))" />
    <mutant id="mutant_912" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end))" to="(!((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end)))" />
    <mutant id="mutant_913" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end)) &amp;&amp; ((raw[ptr]) == '\n')" to="!(((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end)) &amp;&amp; ((raw[ptr]) == '\n'))" />
    <mutant id="mutant_1728" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos]) &amp; 255) - (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))" to="(((raw[aPos]) &amp; 255) - (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))) + 1" />
    <mutant id="mutant_1729" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos]) &amp; 255) - (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))" to="(((raw[aPos]) &amp; 255) - (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))) * -1" />
    <mutant id="mutant_918" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + c" to="(((hash &lt;&lt; 5) + hash) + c) - 1" />
    <mutant id="mutant_919" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + c" to="(((hash &lt;&lt; 5) + hash) + c) * -1" />
    <mutant id="mutant_914" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) + 1)" />
    <mutant id="mutant_915" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) * -1)" />
    <mutant id="mutant_916" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) - 1)" />
    <mutant id="mutant_917" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + c" to="(((hash &lt;&lt; 5) + hash) + c) + 1" />
    <mutant id="mutant_1726" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos++]) &amp; 255) - ((raw[bPos++]) &amp; 255)" to="(((raw[aPos++]) &amp; 255) - ((raw[bPos++]) &amp; 255)) + 1" />
    <mutant id="mutant_1727" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos]) &amp; 255) - (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))" to="(((raw[aPos]) &amp; 255) - (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))) - 1" />
    <mutant id="mutant_1724" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos++]) &amp; 255) - ((raw[bPos++]) &amp; 255)" to="(((raw[aPos++]) &amp; 255) - ((raw[bPos++]) &amp; 255)) * -1" />
    <mutant id="mutant_1725" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos++]) &amp; 255) - ((raw[bPos++]) &amp; 255)" to="(((raw[aPos++]) &amp; 255) - ((raw[bPos++]) &amp; 255)) - 1" />
    <mutant id="mutant_1722" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.id(byte[],int)" from="ptr + (Constants.OBJECT_ID_STRING_LENGTH)" to="(ptr + (Constants.OBJECT_ID_STRING_LENGTH)) - 1" />
    <mutant id="mutant_1723" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="!((aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd))" />
    <mutant id="mutant_1720" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.id(byte[],int)" from="ptr + (Constants.OBJECT_ID_STRING_LENGTH)" to="(ptr + (Constants.OBJECT_ID_STRING_LENGTH)) * -1" />
    <mutant id="mutant_1721" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.id(byte[],int)" from="ptr + (Constants.OBJECT_ID_STRING_LENGTH)" to="(ptr + (Constants.OBJECT_ID_STRING_LENGTH)) + 1" />
    <mutant id="mutant_921" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="(text &amp;&amp; (c == '\r'))" to="(!(text &amp;&amp; (c == '\r')))" />
    <mutant id="mutant_922" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt))" to="(!((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt)))" />
    <mutant id="mutant_923" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt)) &amp;&amp; ((buf[ptr]) == '\n')" to="!(((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt)) &amp;&amp; ((buf[ptr]) == '\n'))" />
    <mutant id="mutant_924" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) + 1)" />
    <mutant id="mutant_920" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="(n &lt; 64) &amp;&amp; (n &lt; remaining)" to="!((n &lt; 64) &amp;&amp; (n &lt; remaining))" />
    <mutant id="mutant_929" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash) + c" to="(((hash &lt;&lt; 5) + hash) + c) * -1" />
    <mutant id="mutant_925" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) * -1)" />
    <mutant id="mutant_926" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash)" to="(((hash &lt;&lt; 5) + hash) - 1)" />
    <mutant id="mutant_927" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash) + c" to="(((hash &lt;&lt; 5) + hash) + c) + 1" />
    <mutant id="mutant_928" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash) + c" to="(((hash &lt;&lt; 5) + hash) + c) - 1" />
    <mutant id="mutant_1795" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_1796" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) - 1)" />
    <mutant id="mutant_1793" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1794" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_1791" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_1792" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" to="(!((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')))" />
    <mutant id="mutant_1790" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_1799" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="(!(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.')))" />
    <mutant id="mutant_1797" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) + 1)" />
    <mutant id="mutant_1798" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) * -1)" />
    <mutant id="mutant_932" viable="false" in="?" from="(1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) - 1" to="((1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) - 1) * -1" />
    <mutant id="mutant_933" viable="false" in="?" from="2 * (SimilarityRenameDetector.BITS_PER_INDEX)" to="(2 * (SimilarityRenameDetector.BITS_PER_INDEX)) - 1" />
    <mutant id="mutant_934" viable="false" in="?" from="2 * (SimilarityRenameDetector.BITS_PER_INDEX)" to="(2 * (SimilarityRenameDetector.BITS_PER_INDEX)) * -1" />
    <mutant id="mutant_935" viable="false" in="?" from="2 * (SimilarityRenameDetector.BITS_PER_INDEX)" to="(2 * (SimilarityRenameDetector.BITS_PER_INDEX)) + 1" />
    <mutant id="mutant_930" viable="false" in="?" from="(1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) - 1" to="((1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) - 1) - 1" />
    <mutant id="mutant_931" viable="false" in="?" from="(1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) - 1" to="((1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) - 1) + 1" />
    <mutant id="mutant_936" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(srcs.size()) * (dsts.size())" to="((srcs.size()) * (dsts.size())) - 1" />
    <mutant id="mutant_937" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(srcs.size()) * (dsts.size())" to="((srcs.size()) * (dsts.size())) * -1" />
    <mutant id="mutant_938" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(srcs.size()) * (dsts.size())" to="((srcs.size()) * (dsts.size())) + 1" />
    <mutant id="mutant_939" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(dstTooLarge != null) &amp;&amp; (dstTooLarge.get(dstIdx))" to="!((dstTooLarge != null) &amp;&amp; (dstTooLarge.get(dstIdx)))" />
    <mutant id="mutant_1784" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_1785" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) * -1)" />
    <mutant id="mutant_1782" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1783" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_1780" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="(!(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.')))" />
    <mutant id="mutant_1781" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="!(((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.')))" />
    <mutant id="mutant_1788" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" to="(!(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')))" />
    <mutant id="mutant_1789" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_1786" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) - 1)" />
    <mutant id="mutant_1787" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) + 1)" />
    <mutant id="mutant_943" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) + 1" to="((size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) + 1) + 1" />
    <mutant id="mutant_944" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) + 1" to="((size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) + 1) * -1" />
    <mutant id="mutant_945" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) + 1" to="((size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) + 1) - 1" />
    <mutant id="mutant_946" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(min * 100)" to="((min * 100) * -1)" />
    <mutant id="mutant_940" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) + 1" to="((size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) + 1) * -1" />
    <mutant id="mutant_941" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) + 1" to="((size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) + 1) - 1" />
    <mutant id="mutant_942" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) + 1" to="((size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) + 1) + 1" />
    <mutant id="mutant_947" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(min * 100)" to="((min * 100) + 1)" />
    <mutant id="mutant_948" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(min * 100)" to="((min * 100) - 1)" />
    <mutant id="mutant_949" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((min * 100) / max)" to="(((min * 100) / max) + 1)" />
    <mutant id="mutant_1773" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x'))" to="(!((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x')))" />
    <mutant id="mutant_1774" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1771" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) - 1)" />
    <mutant id="mutant_1772" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) + 1)" />
    <mutant id="mutant_1770" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) * -1)" />
    <mutant id="mutant_1779" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) * -1)" />
    <mutant id="mutant_1777" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) - 1)" />
    <mutant id="mutant_1778" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="((ptr + 3) + 1)" />
    <mutant id="mutant_1775" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_1776" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_954" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) * 100" to="((org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) * 100) * -1" />
    <mutant id="mutant_955" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(contentScore * 99)" to="((contentScore * 99) * -1)" />
    <mutant id="mutant_956" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(contentScore * 99)" to="((contentScore * 99) - 1)" />
    <mutant id="mutant_957" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(contentScore * 99)" to="((contentScore * 99) + 1)" />
    <mutant id="mutant_950" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((min * 100) / max)" to="(((min * 100) / max) - 1)" />
    <mutant id="mutant_951" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((min * 100) / max)" to="(((min * 100) / max) * -1)" />
    <mutant id="mutant_952" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) * 100" to="((org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) * 100) + 1" />
    <mutant id="mutant_953" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) * 100" to="((org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) * 100) - 1" />
    <mutant id="mutant_958" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(nameScore * 1)" to="((nameScore * 1) + 1)" />
    <mutant id="mutant_959" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(nameScore * 1)" to="((nameScore * 1) - 1)" />
    <mutant id="mutant_1762" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="!(((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n'))" />
    <mutant id="mutant_1763" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_1760" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="!(((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n'))" />
    <mutant id="mutant_1761" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="!(((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n'))" />
    <mutant id="mutant_1768" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_1769" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" to="(!(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')))" />
    <mutant id="mutant_1766" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_1767" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_1764" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_1765" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_965" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1)) / 10000" to="(((contentScore * 99) + (nameScore * 1)) / 10000) - 1" />
    <mutant id="mutant_966" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1)) / 10000" to="(((contentScore * 99) + (nameScore * 1)) / 10000) + 1" />
    <mutant id="mutant_967" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.decodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - v" to="((SimilarityRenameDetector.INDEX_MASK) - v) * -1" />
    <mutant id="mutant_968" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.decodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - v" to="((SimilarityRenameDetector.INDEX_MASK) - v) + 1" />
    <mutant id="mutant_961" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1))" to="(((contentScore * 99) + (nameScore * 1)) - 1)" />
    <mutant id="mutant_962" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1))" to="(((contentScore * 99) + (nameScore * 1)) * -1)" />
    <mutant id="mutant_963" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1))" to="(((contentScore * 99) + (nameScore * 1)) + 1)" />
    <mutant id="mutant_964" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1)) / 10000" to="(((contentScore * 99) + (nameScore * 1)) / 10000) * -1" />
    <mutant id="mutant_969" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.decodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - v" to="((SimilarityRenameDetector.INDEX_MASK) - v) - 1" />
    <mutant id="mutant_960" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(nameScore * 1)" to="((nameScore * 1) * -1)" />
    <mutant id="mutant_976" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="((dirSim * 100) * -1)" />
    <mutant id="mutant_977" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="((dirSim * 100) - 1)" />
    <mutant id="mutant_978" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="((dirSim * 100) + 1)" />
    <mutant id="mutant_979" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="((dirSim * 100) / dirMax) + 1" />
    <mutant id="mutant_972" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(a.lastIndexOf(&quot;/&quot;)) + 1" to="((a.lastIndexOf(&quot;/&quot;)) + 1) + 1" />
    <mutant id="mutant_973" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(b.lastIndexOf(&quot;/&quot;)) + 1" to="((b.lastIndexOf(&quot;/&quot;)) + 1) * -1" />
    <mutant id="mutant_974" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(b.lastIndexOf(&quot;/&quot;)) + 1" to="((b.lastIndexOf(&quot;/&quot;)) + 1) - 1" />
    <mutant id="mutant_975" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(b.lastIndexOf(&quot;/&quot;)) + 1" to="((b.lastIndexOf(&quot;/&quot;)) + 1) + 1" />
    <mutant id="mutant_970" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(a.lastIndexOf(&quot;/&quot;)) + 1" to="((a.lastIndexOf(&quot;/&quot;)) + 1) * -1" />
    <mutant id="mutant_971" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(a.lastIndexOf(&quot;/&quot;)) + 1" to="((a.lastIndexOf(&quot;/&quot;)) + 1) - 1" />
    <mutant id="mutant_987" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((aDirLen - 1) - dirSim)" to="(((aDirLen - 1) - dirSim) - 1)" />
    <mutant id="mutant_988" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(bDirLen - 1)" to="((bDirLen - 1) + 1)" />
    <mutant id="mutant_989" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(bDirLen - 1)" to="((bDirLen - 1) - 1)" />
    <mutant id="mutant_983" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(aDirLen - 1)" to="((aDirLen - 1) + 1)" />
    <mutant id="mutant_984" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(aDirLen - 1)" to="((aDirLen - 1) * -1)" />
    <mutant id="mutant_985" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((aDirLen - 1) - dirSim)" to="(((aDirLen - 1) - dirSim) * -1)" />
    <mutant id="mutant_986" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((aDirLen - 1) - dirSim)" to="(((aDirLen - 1) - dirSim) + 1)" />
    <mutant id="mutant_980" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="((dirSim * 100) / dirMax) * -1" />
    <mutant id="mutant_981" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="((dirSim * 100) / dirMax) - 1" />
    <mutant id="mutant_982" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(aDirLen - 1)" to="((aDirLen - 1) - 1)" />
    <mutant id="mutant_998" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="((dirSim * 100) / dirMax) * -1" />
    <mutant id="mutant_999" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="((dirSim * 100) / dirMax) - 1" />
    <mutant id="mutant_994" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="((dirSim * 100) * -1)" />
    <mutant id="mutant_995" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="((dirSim * 100) - 1)" />
    <mutant id="mutant_996" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="((dirSim * 100) + 1)" />
    <mutant id="mutant_997" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="((dirSim * 100) / dirMax) + 1" />
    <mutant id="mutant_990" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(bDirLen - 1)" to="((bDirLen - 1) * -1)" />
    <mutant id="mutant_991" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((bDirLen - 1) - dirSim)" to="(((bDirLen - 1) - dirSim) + 1)" />
    <mutant id="mutant_992" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((bDirLen - 1) - dirSim)" to="(((bDirLen - 1) - dirSim) * -1)" />
    <mutant id="mutant_993" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((bDirLen - 1) - dirSim)" to="(((bDirLen - 1) - dirSim) - 1)" />
    <mutant id="mutant_6604" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getEmailAddress()" from="(emailBegin + 1)" to="((emailBegin + 1) + 1)" />
    <mutant id="mutant_7936" viable="true" in="org.eclipse.jgit.revwalk.RevTag.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(RawParseUtils.nextLF(rawTag, p)) - 1" to="((RawParseUtils.nextLF(rawTag, p)) - 1) - 1" />
    <mutant id="mutant_6605" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getEmailAddress()" from="(emailBegin + 1)" to="((emailBegin + 1) * -1)" />
    <mutant id="mutant_7935" viable="true" in="org.eclipse.jgit.revwalk.RevTag.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(RawParseUtils.nextLF(rawTag, p)) - 1" to="((RawParseUtils.nextLF(rawTag, p)) - 1) * -1" />
    <mutant id="mutant_6606" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getEmailAddress()" from="(emailBegin + 1)" to="((emailBegin + 1) - 1)" />
    <mutant id="mutant_7938" viable="false" in="?" from="((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) - 1)" to="(((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) - 1) + 1)" />
    <mutant id="mutant_6607" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd &lt; 0) || ((userId.indexOf('&gt;', nameEnd)) &lt; 0)" to="!((nameEnd &lt; 0) || ((userId.indexOf('&gt;', nameEnd)) &lt; 0))" />
    <mutant id="mutant_7937" viable="false" in="?" from="((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) - 1)" to="(((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) - 1) * -1)" />
    <mutant id="mutant_6608" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd &gt;= 0) &amp;&amp; ((userId.charAt(nameEnd)) == ' ')" to="!((nameEnd &gt;= 0) &amp;&amp; ((userId.charAt(nameEnd)) == ' '))" />
    <mutant id="mutant_6609" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameBegin &lt; nameEnd) &amp;&amp; ((userId.charAt(nameBegin)) == ' ')" to="!((nameBegin &lt; nameEnd) &amp;&amp; ((userId.charAt(nameBegin)) == ' '))" />
    <mutant id="mutant_7939" viable="false" in="?" from="((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) - 1)" to="(((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) - 1) - 1)" />
    <mutant id="mutant_7930" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) + (RevObjectList.BLOCK_SHIFT)) - 1)" />
    <mutant id="mutant_6600" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent(java.lang.String,long,int)" from="(when / 1000)" to="((when / 1000) * -1)" />
    <mutant id="mutant_7932" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) - (RevObjectList.BLOCK_SHIFT)) - 1)" />
    <mutant id="mutant_6601" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent(java.lang.String,long,int)" from="(when / 1000)" to="((when / 1000) - 1)" />
    <mutant id="mutant_7931" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) - (RevObjectList.BLOCK_SHIFT)) * -1)" />
    <mutant id="mutant_6602" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent(java.lang.String,long,int)" from="(when / 1000)" to="((when / 1000) + 1)" />
    <mutant id="mutant_7934" viable="true" in="org.eclipse.jgit.revwalk.RevTag.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(RawParseUtils.nextLF(rawTag, p)) - 1" to="((RawParseUtils.nextLF(rawTag, p)) - 1) + 1" />
    <mutant id="mutant_6603" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.equals(java.lang.Object)" from="(o instanceof PushCertificateIdent) &amp;&amp; (raw.equals(((PushCertificateIdent)(o)).raw))" to="!((o instanceof PushCertificateIdent) &amp;&amp; (raw.equals(((PushCertificateIdent)(o)).raw)))" />
    <mutant id="mutant_7933" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) - (RevObjectList.BLOCK_SHIFT)) + 1)" />
    <mutant id="mutant_7925" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))) &amp;&amp; (!(c.equals(commitToLoad)))" to="!((((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))) &amp;&amp; (!(c.equals(commitToLoad))))" />
    <mutant id="mutant_7924" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE)))" to="(!(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))))" />
    <mutant id="mutant_7927" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.get(int)" from="(s != null) &amp;&amp; ((s.shift) &gt; 0)" to="!((s != null) &amp;&amp; ((s.shift) &gt; 0))" />
    <mutant id="mutant_7926" viable="true" in="org.eclipse.jgit.revwalk.RevFlagSet.add(org.eclipse.jgit.revwalk.RevFlag)" from="(p &lt; (active.size())) &amp;&amp; ((active.get(p).mask) &lt; (flag.mask))" to="!((p &lt; (active.size())) &amp;&amp; ((active.get(p).mask) &lt; (flag.mask)))" />
    <mutant id="mutant_7929" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) + (RevObjectList.BLOCK_SHIFT)) * -1)" />
    <mutant id="mutant_7928" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) + (RevObjectList.BLOCK_SHIFT)) + 1)" />
    <mutant id="mutant_7921" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) - (RevObjectList.BLOCK_SHIFT)) - 1)" />
    <mutant id="mutant_7920" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) - (RevObjectList.BLOCK_SHIFT)) * -1)" />
    <mutant id="mutant_7923" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark))" to="(!((highMark == 0) || ((size) &lt;= highMark)))" />
    <mutant id="mutant_7922" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) - (RevObjectList.BLOCK_SHIFT)) + 1)" />
    <mutant id="mutant_7914" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((walker) == null) || (commitToLoad == null)) || ((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark))" to="!((((walker) == null) || (commitToLoad == null)) || ((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark)))" />
    <mutant id="mutant_7913" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark))" to="(!((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark)))" />
    <mutant id="mutant_7916" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (!(c.equals(commitToLoad)))" to="!(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (!(c.equals(commitToLoad))))" />
    <mutant id="mutant_7915" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark))" to="(!((highMark == 0) || ((size) &lt;= highMark)))" />
    <mutant id="mutant_7918" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) + (RevObjectList.BLOCK_SHIFT)) * -1)" />
    <mutant id="mutant_7917" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) + (RevObjectList.BLOCK_SHIFT)) + 1)" />
    <mutant id="mutant_7919" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) + (RevObjectList.BLOCK_SHIFT)) - 1)" />
    <mutant id="mutant_7910" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) - (RevObjectList.BLOCK_SHIFT)) + 1)" />
    <mutant id="mutant_7912" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((walker) == null) || (commitToLoad == null))" to="(!(((walker) == null) || (commitToLoad == null)))" />
    <mutant id="mutant_7911" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((size) &lt;= highMark) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="!(((size) &lt;= highMark) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE)))" />
    <mutant id="mutant_7903" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.applyFlag(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.RevFlag,int,int)" from="((rangeBegin++) &lt; rangeEnd) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="!(((rangeBegin++) &lt; rangeEnd) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE)))" />
    <mutant id="mutant_7902" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((begin--) &gt;= 0) &amp;&amp; (index &gt;= 0)" to="!(((begin--) &gt;= 0) &amp;&amp; (index &gt;= 0))" />
    <mutant id="mutant_7905" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) + (RevObjectList.BLOCK_SHIFT)) + 1)" />
    <mutant id="mutant_7904" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((walker) == null) || ((size) &gt; highMark)" to="!(((walker) == null) || ((size) &gt; highMark))" />
    <mutant id="mutant_7907" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) + (RevObjectList.BLOCK_SHIFT)) - 1)" />
    <mutant id="mutant_7906" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) + (RevObjectList.BLOCK_SHIFT)) * -1)" />
    <mutant id="mutant_7909" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) - (RevObjectList.BLOCK_SHIFT)) - 1)" />
    <mutant id="mutant_7908" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="(((s.shift) - (RevObjectList.BLOCK_SHIFT)) * -1)" />
    <mutant id="mutant_7901" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((size()) - 1)" to="(((size()) - 1) + 1)" />
    <mutant id="mutant_7900" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((size()) - 1)" to="(((size()) - 1) - 1)" />
    <mutant id="mutant_6406" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="((nonce + &quot;:&quot;) + 1)" />
    <mutant id="mutant_7738" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="(mid - 1) * -1" />
    <mutant id="mutant_6407" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="((nonce + &quot;:&quot;) - 1)" />
    <mutant id="mutant_7737" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="(mid - 1) - 1" />
    <mutant id="mutant_6408" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="((nonce + &quot;:&quot;) * -1)" />
    <mutant id="mutant_6409" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + nc)" to="(((nonce + &quot;:&quot;) + nc) + 1)" />
    <mutant id="mutant_7739" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="(mid - 1) + 1" />
    <mutant id="mutant_7730" viable="true" in="org.eclipse.jgit.revwalk.BlockRevQueue$Block.resetToMiddle()" from="(BlockRevQueue.Block.BLOCK_SIZE) / 2" to="((BlockRevQueue.Block.BLOCK_SIZE) / 2) + 1" />
    <mutant id="mutant_6400" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;)" to="((method + &quot;:&quot;) + 1)" />
    <mutant id="mutant_7732" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((++(inQueue)) &gt; (DateRevQueue.REBUILD_INDEX_COUNT)) &amp;&amp; ((sinceLastIndex) &gt; (DateRevQueue.REBUILD_INDEX_COUNT))" to="!(((++(inQueue)) &gt; (DateRevQueue.REBUILD_INDEX_COUNT)) &amp;&amp; ((sinceLastIndex) &gt; (DateRevQueue.REBUILD_INDEX_COUNT)))" />
    <mutant id="mutant_6401" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;)" to="((method + &quot;:&quot;) - 1)" />
    <mutant id="mutant_7731" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.next()" from="((index) != null) &amp;&amp; (q == (index[first]))" to="!(((index) != null) &amp;&amp; (q == (index[first])))" />
    <mutant id="mutant_6402" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;)" to="((method + &quot;:&quot;) * -1)" />
    <mutant id="mutant_7734" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low + high)" to="((low + high) + 1)" />
    <mutant id="mutant_6403" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;) + uri" to="((method + &quot;:&quot;) + uri) * -1" />
    <mutant id="mutant_7733" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((first) &lt;= (last)) &amp;&amp; ((index[first].commit.commitTime) &gt; when)" to="!(((first) &lt;= (last)) &amp;&amp; ((index[first].commit.commitTime) &gt; when))" />
    <mutant id="mutant_6404" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;) + uri" to="((method + &quot;:&quot;) + uri) - 1" />
    <mutant id="mutant_7736" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low + high)" to="((low + high) - 1)" />
    <mutant id="mutant_6405" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;) + uri" to="((method + &quot;:&quot;) + uri) + 1" />
    <mutant id="mutant_7735" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low + high)" to="((low + high) * -1)" />
    <mutant id="mutant_7727" viable="true" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) + &quot;\&quot;)&quot;" to="((((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) + &quot;\&quot;)&quot;) + 1" />
    <mutant id="mutant_7726" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) + &quot;\&quot;)&quot;" to="((((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) + &quot;\&quot;)&quot;) * -1" />
    <mutant id="mutant_7729" viable="true" in="org.eclipse.jgit.revwalk.BlockRevQueue$Block.resetToMiddle()" from="(BlockRevQueue.Block.BLOCK_SIZE) / 2" to="((BlockRevQueue.Block.BLOCK_SIZE) / 2) - 1" />
    <mutant id="mutant_7728" viable="true" in="org.eclipse.jgit.revwalk.BlockRevQueue$Block.resetToMiddle()" from="(BlockRevQueue.Block.BLOCK_SIZE) / 2" to="((BlockRevQueue.Block.BLOCK_SIZE) / 2) * -1" />
    <mutant id="mutant_7721" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="(((super.toString()) + &quot;(\&quot;&quot;) * -1)" />
    <mutant id="mutant_7720" viable="true" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="(((super.toString()) + &quot;(\&quot;&quot;) + 1)" />
    <mutant id="mutant_7723" viable="true" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern()))" to="((((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) + 1)" />
    <mutant id="mutant_7722" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern()))" to="((((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) * -1)" />
    <mutant id="mutant_7725" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) + &quot;\&quot;)&quot;" to="((((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) + &quot;\&quot;)&quot;) - 1" />
    <mutant id="mutant_7724" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern()))" to="((((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) - 1)" />
    <mutant id="mutant_7716" viable="true" in="org.eclipse.jgit.revwalk.filter.RevFlagFilter.toString()" from="(super.toString()) + (flags)" to="((super.toString()) + (flags)) + 1" />
    <mutant id="mutant_7715" viable="true" in="org.eclipse.jgit.revwalk.filter.RevFilter.toString()" from="(lastDot + 1)" to="((lastDot + 1) * -1)" />
    <mutant id="mutant_7718" viable="false" in="org.eclipse.jgit.revwalk.filter.RevFlagFilter.toString()" from="(super.toString()) + (flags)" to="((super.toString()) + (flags)) * -1" />
    <mutant id="mutant_7717" viable="false" in="org.eclipse.jgit.revwalk.filter.RevFlagFilter.toString()" from="(super.toString()) + (flags)" to="((super.toString()) + (flags)) - 1" />
    <mutant id="mutant_7719" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="(((super.toString()) + &quot;(\&quot;&quot;) - 1)" />
    <mutant id="mutant_7710" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) + &quot;\&quot;)&quot;" to="((((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) + &quot;\&quot;)&quot;) + 1" />
    <mutant id="mutant_7712" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) + &quot;\&quot;)&quot;" to="((((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) + &quot;\&quot;)&quot;) * -1" />
    <mutant id="mutant_7711" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) + &quot;\&quot;)&quot;" to="((((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) + &quot;\&quot;)&quot;) - 1" />
    <mutant id="mutant_7714" viable="true" in="org.eclipse.jgit.revwalk.filter.RevFilter.toString()" from="(lastDot + 1)" to="((lastDot + 1) + 1)" />
    <mutant id="mutant_7713" viable="true" in="org.eclipse.jgit.revwalk.filter.RevFilter.toString()" from="(lastDot + 1)" to="((lastDot + 1) - 1)" />
    <mutant id="mutant_7705" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="(((super.toString()) + &quot;(\&quot;&quot;) + 1)" />
    <mutant id="mutant_7704" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="(((super.toString()) + &quot;(\&quot;&quot;) - 1)" />
    <mutant id="mutant_7707" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText))" to="((((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) - 1)" />
    <mutant id="mutant_7706" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="(((super.toString()) + &quot;(\&quot;&quot;) * -1)" />
    <mutant id="mutant_7709" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText))" to="((((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) * -1)" />
    <mutant id="mutant_7708" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText))" to="((((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) + 1)" />
    <mutant id="mutant_7701" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="pattern + &quot;.*&quot;" to="(pattern + &quot;.*&quot;) + 1" />
    <mutant id="mutant_7700" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="(!(pattern.endsWith(&quot;$&quot;))) &amp;&amp; (!(pattern.endsWith(&quot;.*&quot;)))" to="!((!(pattern.endsWith(&quot;$&quot;))) &amp;&amp; (!(pattern.endsWith(&quot;.*&quot;))))" />
    <mutant id="mutant_7703" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="pattern + &quot;.*&quot;" to="(pattern + &quot;.*&quot;) * -1" />
    <mutant id="mutant_7702" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="pattern + &quot;.*&quot;" to="(pattern + &quot;.*&quot;) - 1" />
    <mutant id="mutant_7781" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) + &quot;)&quot;" to="(((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) + &quot;)&quot;) + 1" />
    <mutant id="mutant_6450" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((getType().getSchemeName()) + &quot; &quot;) + (Base64.encodeBytes(token)))" to="((((getType().getSchemeName()) + &quot; &quot;) + (Base64.encodeBytes(token))) - 1)" />
    <mutant id="mutant_7780" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString()))" to="(((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) * -1)" />
    <mutant id="mutant_5120" viable="true" in="org.eclipse.jgit.api.RebaseCommand.finishRebase(org.eclipse.jgit.revwalk.RevCommit,boolean)" from="lastStepIsForward || (finalHead == null)" to="!(lastStepIsForward || (finalHead == null))" />
    <mutant id="mutant_6451" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((getType().getSchemeName()) + &quot; &quot;) + (Base64.encodeBytes(token)))" to="((((getType().getSchemeName()) + &quot; &quot;) + (Base64.encodeBytes(token))) * -1)" />
    <mutant id="mutant_7783" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) + &quot;)&quot;" to="(((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) + &quot;)&quot;) - 1" />
    <mutant id="mutant_5121" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(!(isInteractive())) &amp;&amp; (walk.isMergedInto(upstream, headCommit))" to="!((!(isInteractive())) &amp;&amp; (walk.isMergedInto(upstream, headCommit)))" />
    <mutant id="mutant_6452" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod.authorize(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider)" from="(credentialsProvider.supports(u, p)) &amp;&amp; (credentialsProvider.get(uri, u, p))" to="!((credentialsProvider.supports(u, p)) &amp;&amp; (credentialsProvider.get(uri, u, p)))" />
    <mutant id="mutant_7782" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) + &quot;)&quot;" to="(((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) + &quot;)&quot;) * -1" />
    <mutant id="mutant_5119" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((operation) == (RebaseCommand.Operation.BEGIN)) &amp;&amp; ((mergeResult.getMergeStatus()) == (MergeResult.MergeStatus.FAILED))" to="!(((operation) == (RebaseCommand.Operation.BEGIN)) &amp;&amp; ((mergeResult.getMergeStatus()) == (MergeResult.MergeStatus.FAILED)))" />
    <mutant id="mutant_5111" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="((((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage())) * -1)" />
    <mutant id="mutant_6442" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + v)" to="((((type.getSchemeName()) + &quot; &quot;) + v) + 1)" />
    <mutant id="mutant_7774" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;)" to="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) - 1)" />
    <mutant id="mutant_5112" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="((((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage())) + 1)" />
    <mutant id="mutant_6443" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="&quot;HTTP@&quot; + (host.toLowerCase())" to="(&quot;HTTP@&quot; + (host.toLowerCase())) * -1" />
    <mutant id="mutant_7773" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;)" to="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + 1)" />
    <mutant id="mutant_5113" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + 1)" />
    <mutant id="mutant_6444" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="&quot;HTTP@&quot; + (host.toLowerCase())" to="(&quot;HTTP@&quot; + (host.toLowerCase())) + 1" />
    <mutant id="mutant_7776" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;)" to="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + 1)" />
    <mutant id="mutant_5114" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) * -1)" />
    <mutant id="mutant_6445" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="&quot;HTTP@&quot; + (host.toLowerCase())" to="(&quot;HTTP@&quot; + (host.toLowerCase())) - 1" />
    <mutant id="mutant_7775" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;)" to="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) * -1)" />
    <mutant id="mutant_5115" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) - 1)" />
    <mutant id="mutant_6446" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((getType().getSchemeName()) + &quot; &quot;)" to="(((getType().getSchemeName()) + &quot; &quot;) + 1)" />
    <mutant id="mutant_7778" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString()))" to="(((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) + 1)" />
    <mutant id="mutant_5116" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="((((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage())) - 1)" />
    <mutant id="mutant_6447" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((getType().getSchemeName()) + &quot; &quot;)" to="(((getType().getSchemeName()) + &quot; &quot;) - 1)" />
    <mutant id="mutant_7777" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;)" to="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) - 1)" />
    <mutant id="mutant_5117" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="((((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage())) * -1)" />
    <mutant id="mutant_6448" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((getType().getSchemeName()) + &quot; &quot;)" to="(((getType().getSchemeName()) + &quot; &quot;) * -1)" />
    <mutant id="mutant_5118" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="((((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage())) + 1)" />
    <mutant id="mutant_6449" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((getType().getSchemeName()) + &quot; &quot;) + (Base64.encodeBytes(token)))" to="((((getType().getSchemeName()) + &quot; &quot;) + (Base64.encodeBytes(token))) + 1)" />
    <mutant id="mutant_7779" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString()))" to="(((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) - 1)" />
    <mutant id="mutant_7770" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(&quot;(FOLLOW(&quot; + (path.toString()))" to="((&quot;(FOLLOW(&quot; + (path.toString())) - 1)" />
    <mutant id="mutant_6440" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + v)" to="((((type.getSchemeName()) + &quot; &quot;) + v) - 1)" />
    <mutant id="mutant_7772" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;)" to="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) * -1)" />
    <mutant id="mutant_5110" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="((((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage())) - 1)" />
    <mutant id="mutant_6441" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + v)" to="((((type.getSchemeName()) + &quot; &quot;) + v) * -1)" />
    <mutant id="mutant_7771" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(&quot;(FOLLOW(&quot; + (path.toString()))" to="((&quot;(FOLLOW(&quot; + (path.toString())) + 1)" />
    <mutant id="mutant_5108" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) * -1)" />
    <mutant id="mutant_6439" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="(((type.getSchemeName()) + &quot; &quot;) * -1)" />
    <mutant id="mutant_5109" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) - 1)" />
    <mutant id="mutant_5100" viable="true" in="org.eclipse.jgit.api.RebaseCommand.calculatePickList(org.eclipse.jgit.revwalk.RevCommit)" from="(preserveMerges) || ((commit.getParentCount()) == 1)" to="!((preserveMerges) || ((commit.getParentCount()) == 1))" />
    <mutant id="mutant_6431" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="((nonce + &quot;:&quot;) - 1)" />
    <mutant id="mutant_7763" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.depth) + 1" to="((c.depth) + 1) + 1" />
    <mutant id="mutant_5101" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="(stopAfterInitialization) || (!(walk.isMergedInto(walk.parseCommit(repo.resolve(org.eclipse.jgit.lib.Constants.HEAD)), upstreamCommit)))" to="!((stopAfterInitialization) || (!(walk.isMergedInto(walk.parseCommit(repo.resolve(org.eclipse.jgit.lib.Constants.HEAD)), upstreamCommit))))" />
    <mutant id="mutant_6432" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="((nonce + &quot;:&quot;) * -1)" />
    <mutant id="mutant_7762" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.depth) + 1" to="((c.depth) + 1) - 1" />
    <mutant id="mutant_5102" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((doneLines.size()) - 1)" to="(((doneLines.size()) - 1) * -1)" />
    <mutant id="mutant_6433" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="(((nonce + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2))) + 1)" />
    <mutant id="mutant_7765" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.has(UNSHALLOW)) || (c.has(REINTERESTING))" to="!((c.has(UNSHALLOW)) || (c.has(REINTERESTING)))" />
    <mutant id="mutant_5103" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((doneLines.size()) - 1)" to="(((doneLines.size()) - 1) - 1)" />
    <mutant id="mutant_6434" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="(((nonce + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2))) * -1)" />
    <mutant id="mutant_7764" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.depth) + 1" to="((c.depth) + 1) * -1" />
    <mutant id="mutant_5104" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((doneLines.size()) - 1)" to="(((doneLines.size()) - 1) + 1)" />
    <mutant id="mutant_6435" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="(((nonce + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2))) - 1)" />
    <mutant id="mutant_7767" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(path.include(walker)) &amp;&amp; (TreeFilter.ANY_DIFF.include(walker))" to="!((path.include(walker)) &amp;&amp; (TreeFilter.ANY_DIFF.include(walker)))" />
    <mutant id="mutant_5105" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((newHead) != null) &amp;&amp; ((step.getAction()) != (RebaseTodoLine.Action.PICK))" to="!(((newHead) != null) &amp;&amp; ((step.getAction()) != (RebaseTodoLine.Action.PICK)))" />
    <mutant id="mutant_6436" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(cnonce != null) &amp;&amp; (qop != null)" to="!((cnonce != null) &amp;&amp; (qop != null))" />
    <mutant id="mutant_7766" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(((c.flags) &amp; (RevWalk.UNINTERESTING)) != 0) &amp;&amp; (!(c.has(UNSHALLOW)))" to="!((((c.flags) &amp; (RevWalk.UNINTERESTING)) != 0) &amp;&amp; (!(c.has(UNSHALLOW))))" />
    <mutant id="mutant_5106" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((newHead) == null) &amp;&amp; (!amendExists)" to="!(((newHead) == null) &amp;&amp; (!amendExists))" />
    <mutant id="mutant_6437" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="(((type.getSchemeName()) + &quot; &quot;) + 1)" />
    <mutant id="mutant_7769" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(&quot;(FOLLOW(&quot; + (path.toString()))" to="((&quot;(FOLLOW(&quot; + (path.toString())) * -1)" />
    <mutant id="mutant_5107" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + 1)" />
    <mutant id="mutant_6438" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="(((type.getSchemeName()) + &quot; &quot;) - 1)" />
    <mutant id="mutant_7768" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.shouldBeRecursive()" from="(path.shouldBeRecursive()) || (TreeFilter.ANY_DIFF.shouldBeRecursive())" to="!((path.shouldBeRecursive()) || (TreeFilter.ANY_DIFF.shouldBeRecursive()))" />
    <mutant id="mutant_7761" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="ii - 1" to="(ii - 1) * -1" />
    <mutant id="mutant_6430" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="((nonce + &quot;:&quot;) + 1)" />
    <mutant id="mutant_7760" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="ii - 1" to="(ii - 1) - 1" />
    <mutant id="mutant_6428" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="(((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2))) * -1)" />
    <mutant id="mutant_6429" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="(((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2))) - 1)" />
    <mutant id="mutant_7759" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="ii - 1" to="(ii - 1) + 1" />
    <mutant id="mutant_6420" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;)" to="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + 1)" />
    <mutant id="mutant_7752" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100)" to="(((inQueue) / 100) - 1)" />
    <mutant id="mutant_6421" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop)" to="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + 1)" />
    <mutant id="mutant_7751" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100)" to="(((inQueue) / 100) * -1)" />
    <mutant id="mutant_6422" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop)" to="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) - 1)" />
    <mutant id="mutant_7754" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100) + 1" to="(((inQueue) / 100) + 1) * -1" />
    <mutant id="mutant_6423" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop)" to="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) * -1)" />
    <mutant id="mutant_7753" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100) + 1" to="(((inQueue) / 100) + 1) + 1" />
    <mutant id="mutant_6424" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;)" to="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) * -1)" />
    <mutant id="mutant_7756" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((++qi) % 100)" to="(((++qi) % 100) + 1)" />
    <mutant id="mutant_6425" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;)" to="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) - 1)" />
    <mutant id="mutant_7755" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100) + 1" to="(((inQueue) / 100) + 1) - 1" />
    <mutant id="mutant_6426" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;)" to="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) + 1)" />
    <mutant id="mutant_7758" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((++qi) % 100)" to="(((++qi) % 100) - 1)" />
    <mutant id="mutant_6427" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="(((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2))) + 1)" />
    <mutant id="mutant_7757" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((++qi) % 100)" to="(((++qi) % 100) * -1)" />
    <mutant id="mutant_7750" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100)" to="(((inQueue) / 100) + 1)" />
    <mutant id="mutant_6417" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce)" to="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + 1)" />
    <mutant id="mutant_7749" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(p != null) &amp;&amp; ((p.commit.commitTime) &gt; when)" to="!((p != null) &amp;&amp; ((p.commit.commitTime) &gt; when))" />
    <mutant id="mutant_6418" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;)" to="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) * -1)" />
    <mutant id="mutant_7748" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(q == null) || ((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime)))" to="!((q == null) || ((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime))))" />
    <mutant id="mutant_6419" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;)" to="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) - 1)" />
    <mutant id="mutant_7741" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid + 1" to="(mid + 1) + 1" />
    <mutant id="mutant_6410" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + nc)" to="(((nonce + &quot;:&quot;) + nc) * -1)" />
    <mutant id="mutant_7740" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid + 1" to="(mid + 1) * -1" />
    <mutant id="mutant_6411" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + nc)" to="(((nonce + &quot;:&quot;) + nc) - 1)" />
    <mutant id="mutant_7743" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="(mid - 1) - 1" />
    <mutant id="mutant_6412" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((nonce + &quot;:&quot;) + nc) + &quot;:&quot;)" to="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) * -1)" />
    <mutant id="mutant_7742" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid + 1" to="(mid + 1) - 1" />
    <mutant id="mutant_6413" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((nonce + &quot;:&quot;) + nc) + &quot;:&quot;)" to="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) - 1)" />
    <mutant id="mutant_7745" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="(mid - 1) + 1" />
    <mutant id="mutant_6414" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((nonce + &quot;:&quot;) + nc) + &quot;:&quot;)" to="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + 1)" />
    <mutant id="mutant_7744" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="(mid - 1) * -1" />
    <mutant id="mutant_6415" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce)" to="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) * -1)" />
    <mutant id="mutant_7747" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime)))" to="(!((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime))))" />
    <mutant id="mutant_6416" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce)" to="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) - 1)" />
    <mutant id="mutant_7746" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low &gt; (first)) &amp;&amp; (when == (index[low].commit.commitTime))" to="!((low &gt; (first)) &amp;&amp; (when == (index[low].commit.commitTime)))" />
    <mutant id="mutant_6490" viable="true" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="(((i.getClass().getName()) + &quot;:&quot;) + 1)" />
    <mutant id="mutant_5160" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(name != null) &amp;&amp; (email != null)" to="!((name != null) &amp;&amp; (email != null))" />
    <mutant id="mutant_6491" viable="false" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="((((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText())) * -1)" />
    <mutant id="mutant_5161" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getHead()" from="(head == null) || ((head.getObjectId()) == null)" to="!((head == null) || ((head.getObjectId()) == null))" />
    <mutant id="mutant_6492" viable="false" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="((((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText())) - 1)" />
    <mutant id="mutant_5162" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkoutCurrentHead()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="(((Constants.HEAD) + &quot;^{tree}&quot;) + 1)" />
    <mutant id="mutant_6493" viable="true" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="((((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText())) + 1)" />
    <mutant id="mutant_5163" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCurrentHead()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="(((Constants.HEAD) + &quot;^{tree}&quot;) * -1)" />
    <mutant id="mutant_6494" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig$Host.isBatchMode()" from="((batchMode) != null) &amp;&amp; (batchMode.booleanValue())" to="!(((batchMode) != null) &amp;&amp; (batchMode.booleanValue()))" />
    <mutant id="mutant_5164" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCurrentHead()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="(((Constants.HEAD) + &quot;^{tree}&quot;) - 1)" />
    <mutant id="mutant_6495" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.isHostPattern(java.lang.String)" from="((s.indexOf('*')) &gt;= 0) || ((s.indexOf('?')) &gt;= 0)" to="!(((s.indexOf('*')) &gt;= 0) || ((s.indexOf('?')) &gt;= 0))" />
    <mutant id="mutant_5165" viable="true" in="org.eclipse.jgit.api.RebaseCommand.continueRebase()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="(((Constants.HEAD) + &quot;^{tree}&quot;) + 1)" />
    <mutant id="mutant_6496" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="(value.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (value.endsWith(&quot;\&quot;&quot;))" to="!((value.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (value.endsWith(&quot;\&quot;&quot;)))" />
    <mutant id="mutant_5155" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes)" to="(((hours * 60) + minutes) + 1)" />
    <mutant id="mutant_6486" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.machine) != null) &amp;&amp; (entry.complete())" to="!(((entry.machine) != null) &amp;&amp; (entry.complete()))" />
    <mutant id="mutant_5156" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes)" to="(((hours * 60) + minutes) * -1)" />
    <mutant id="mutant_6487" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null)" to="!(((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null))" />
    <mutant id="mutant_5157" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes) * multiplier" to="(((hours * 60) + minutes) * multiplier) * -1" />
    <mutant id="mutant_6488" viable="false" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="(((i.getClass().getName()) + &quot;:&quot;) * -1)" />
    <mutant id="mutant_5158" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes) * multiplier" to="(((hours * 60) + minutes) * multiplier) - 1" />
    <mutant id="mutant_6489" viable="false" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="(((i.getClass().getName()) + &quot;:&quot;) - 1)" />
    <mutant id="mutant_5159" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes) * multiplier" to="(((hours * 60) + minutes) * multiplier) + 1" />
    <mutant id="mutant_6480" viable="false" in="org.eclipse.jgit.transport.NetRC.parse()" from="line + &quot;\n&quot;" to="(line + &quot;\n&quot;) * -1" />
    <mutant id="mutant_5150" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((time.indexOf(' ')) + 1)" to="(((time.indexOf(' ')) + 1) + 1)" />
    <mutant id="mutant_6481" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.account) != null) &amp;&amp; (entry.complete())" to="!(((entry.account) != null) &amp;&amp; (entry.complete()))" />
    <mutant id="mutant_5151" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(hours * 60)" to="((hours * 60) * -1)" />
    <mutant id="mutant_6482" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.login) != null) &amp;&amp; (entry.complete())" to="!(((entry.login) != null) &amp;&amp; (entry.complete()))" />
    <mutant id="mutant_5152" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(hours * 60)" to="((hours * 60) + 1)" />
    <mutant id="mutant_6483" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.password) != null) &amp;&amp; (entry.complete())" to="!(((entry.password) != null) &amp;&amp; (entry.complete()))" />
    <mutant id="mutant_5153" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(hours * 60)" to="((hours * 60) - 1)" />
    <mutant id="mutant_6484" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.machine) != null) &amp;&amp; (entry.complete())" to="!(((entry.machine) != null) &amp;&amp; (entry.complete()))" />
    <mutant id="mutant_5154" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes)" to="(((hours * 60) + minutes) - 1)" />
    <mutant id="mutant_6485" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; (entry.complete())" to="!(((entry.macdef) != null) &amp;&amp; (entry.complete()))" />
    <mutant id="mutant_5144" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(end - 2)" to="((end - 2) + 1)" />
    <mutant id="mutant_6475" viable="true" in="org.eclipse.jgit.transport.NetRC$NetRCEntry.complete()" from="(((login) != null) &amp;&amp; ((password) != null))" to="(!(((login) != null) &amp;&amp; ((password) != null)))" />
    <mutant id="mutant_5145" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) * 1000" to="((Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) * 1000) * -1" />
    <mutant id="mutant_6476" viable="true" in="org.eclipse.jgit.transport.NetRC$NetRCEntry.complete()" from="(((login) != null) &amp;&amp; ((password) != null)) &amp;&amp; ((machine) != null)" to="!((((login) != null) &amp;&amp; ((password) != null)) &amp;&amp; ((machine) != null))" />
    <mutant id="mutant_5146" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) * 1000" to="((Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) * 1000) + 1" />
    <mutant id="mutant_6477" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null)" to="!(((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null))" />
    <mutant id="mutant_5147" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) * 1000" to="((Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) * 1000) - 1" />
    <mutant id="mutant_6478" viable="false" in="org.eclipse.jgit.transport.NetRC.parse()" from="line + &quot;\n&quot;" to="(line + &quot;\n&quot;) - 1" />
    <mutant id="mutant_5148" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((time.indexOf(' ')) + 1)" to="(((time.indexOf(' ')) + 1) * -1)" />
    <mutant id="mutant_6479" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="line + &quot;\n&quot;" to="(line + &quot;\n&quot;) + 1" />
    <mutant id="mutant_5149" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((time.indexOf(' ')) + 1)" to="(((time.indexOf(' ')) + 1) - 1)" />
    <mutant id="mutant_6470" viable="true" in="org.eclipse.jgit.transport.LongMap.index(long)" from="((table.length) - 1)" to="(((table.length) - 1) - 1)" />
    <mutant id="mutant_5140" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex + 1)" to="((equalsIndex + 1) + 1)" />
    <mutant id="mutant_6471" viable="true" in="org.eclipse.jgit.transport.LongMap.index(long)" from="((table.length) - 1)" to="(((table.length) - 1) + 1)" />
    <mutant id="mutant_5141" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex + 1)" to="((equalsIndex + 1) - 1)" />
    <mutant id="mutant_6472" viable="true" in="org.eclipse.jgit.transport.LongMap.grow()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="((int)(((table.length) * (LongMap.LOAD_FACTOR)))) + 1" />
    <mutant id="mutant_5142" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(end - 2)" to="((end - 2) - 1)" />
    <mutant id="mutant_6473" viable="true" in="org.eclipse.jgit.transport.LongMap.grow()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="((int)(((table.length) * (LongMap.LOAD_FACTOR)))) - 1" />
    <mutant id="mutant_5143" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(end - 2)" to="((end - 2) * -1)" />
    <mutant id="mutant_6474" viable="true" in="org.eclipse.jgit.transport.LongMap.grow()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="((int)(((table.length) * (LongMap.LOAD_FACTOR)))) * -1" />
    <mutant id="mutant_5133" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction())))" to="(!((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction()))))" />
    <mutant id="mutant_6464" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess$1.close()" from="((timeout) * 1000)" to="(((timeout) * 1000) - 1)" />
    <mutant id="mutant_7796" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="'a' - 'A'" to="('a' - 'A') + 1" />
    <mutant id="mutant_5134" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((preserveMerges) &amp;&amp; shouldPick) &amp;&amp; ((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction())))" to="!(((preserveMerges) &amp;&amp; shouldPick) &amp;&amp; ((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction()))))" />
    <mutant id="mutant_6465" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess$1.close()" from="((timeout) * 1000)" to="(((timeout) * 1000) * -1)" />
    <mutant id="mutant_7795" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="'a' - 'A'" to="('a' - 'A') - 1" />
    <mutant id="mutant_5135" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="isSquash &amp;&amp; (messageFixupFile.exists())" to="!(isSquash &amp;&amp; (messageFixupFile.exists()))" />
    <mutant id="mutant_6466" viable="true" in="org.eclipse.jgit.transport.LongMap()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="((int)(((table.length) * (LongMap.LOAD_FACTOR)))) + 1" />
    <mutant id="mutant_7798" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="(gt - 1)" to="((gt - 1) + 1)" />
    <mutant id="mutant_5136" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex - 1)" to="((equalsIndex - 1) - 1)" />
    <mutant id="mutant_6467" viable="true" in="org.eclipse.jgit.transport.LongMap()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="((int)(((table.length) * (LongMap.LOAD_FACTOR)))) - 1" />
    <mutant id="mutant_7797" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="((valStart) &lt; at) &amp;&amp; (at &lt; (valEnd))" to="!(((valStart) &lt; at) &amp;&amp; (at &lt; (valEnd)))" />
    <mutant id="mutant_5137" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex - 1)" to="((equalsIndex - 1) + 1)" />
    <mutant id="mutant_6468" viable="true" in="org.eclipse.jgit.transport.LongMap()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="((int)(((table.length) * (LongMap.LOAD_FACTOR)))) * -1" />
    <mutant id="mutant_5138" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex - 1)" to="((equalsIndex - 1) * -1)" />
    <mutant id="mutant_6469" viable="true" in="org.eclipse.jgit.transport.LongMap.index(long)" from="((table.length) - 1)" to="(((table.length) - 1) * -1)" />
    <mutant id="mutant_7799" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="(gt - 1)" to="((gt - 1) - 1)" />
    <mutant id="mutant_5139" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex + 1)" to="((equalsIndex + 1) * -1)" />
    <mutant id="mutant_7790" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="((keyEnd) - bPtr)" to="(((keyEnd) - bPtr) * -1)" />
    <mutant id="mutant_6460" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess(java.lang.String,int)" from="(timeout) * 1000" to="((timeout) * 1000) - 1" />
    <mutant id="mutant_7792" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="((keyEnd) - bPtr)" to="(((keyEnd) - bPtr) + 1)" />
    <mutant id="mutant_5130" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) + (upstreamCommit.name()))" to="((((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) + (upstreamCommit.name())) - 1)" />
    <mutant id="mutant_6461" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess(java.lang.String,int)" from="(timeout) * 1000" to="((timeout) * 1000) * -1" />
    <mutant id="mutant_7791" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="((keyEnd) - bPtr)" to="(((keyEnd) - bPtr) - 1)" />
    <mutant id="mutant_5131" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) + (upstreamCommit.name()))" to="((((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) + (upstreamCommit.name())) + 1)" />
    <mutant id="mutant_6462" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess.isRunning()" from="((channel.getExitStatus()) &lt; 0) &amp;&amp; (channel.isConnected())" to="!(((channel.getExitStatus()) &lt; 0) &amp;&amp; (channel.isConnected()))" />
    <mutant id="mutant_7794" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="'a' - 'A'" to="('a' - 'A') * -1" />
    <mutant id="mutant_5132" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((preserveMerges) &amp;&amp; shouldPick)" to="(!((preserveMerges) &amp;&amp; shouldPick))" />
    <mutant id="mutant_6463" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess$1.close()" from="((timeout) * 1000)" to="(((timeout) * 1000) + 1)" />
    <mutant id="mutant_7793" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="('A' &lt;= b) &amp;&amp; (b &lt;= 'Z')" to="!(('A' &lt;= b) &amp;&amp; (b &lt;= 'Z'))" />
    <mutant id="mutant_5122" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(!(isInteractive())) &amp;&amp; (walk.isMergedInto(headCommit, upstream))" to="!((!(isInteractive())) &amp;&amp; (walk.isMergedInto(headCommit, upstream)))" />
    <mutant id="mutant_6453" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod.scanResponse(org.eclipse.jgit.transport.http.HttpConnection)" from="(value != null) &amp;&amp; ((value.length()) != 0)" to="!((value != null) &amp;&amp; ((value.length()) != 0))" />
    <mutant id="mutant_7785" viable="false" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name))" to="((&quot;FooterKey[&quot; + (name)) - 1)" />
    <mutant id="mutant_5123" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(&quot;# Created by EGit: rebasing &quot; + (headId.name()))" to="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) * -1)" />
    <mutant id="mutant_6454" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationCanceled(com.jcraft.jsch.JSchException)" from="((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth cancel&quot;))" to="!(((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth cancel&quot;)))" />
    <mutant id="mutant_7784" viable="true" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name))" to="((&quot;FooterKey[&quot; + (name)) + 1)" />
    <mutant id="mutant_5124" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(&quot;# Created by EGit: rebasing &quot; + (headId.name()))" to="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + 1)" />
    <mutant id="mutant_6455" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(com.jcraft.jsch.JSchException)" from="((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth fail&quot;))" to="!(((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth fail&quot;)))" />
    <mutant id="mutant_7787" viable="false" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name)) + &quot;]&quot;" to="((&quot;FooterKey[&quot; + (name)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_5125" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(&quot;# Created by EGit: rebasing &quot; + (headId.name()))" to="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) - 1)" />
    <mutant id="mutant_6456" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,java.lang.String,java.lang.String,java.lang.String,int,org.eclipse.jgit.transport.OpenSshConfig$Host)" from="((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive())))" to="(!((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive()))))" />
    <mutant id="mutant_7786" viable="false" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name))" to="((&quot;FooterKey[&quot; + (name)) * -1)" />
    <mutant id="mutant_5126" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;)" to="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) - 1)" />
    <mutant id="mutant_6457" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,java.lang.String,java.lang.String,java.lang.String,int,org.eclipse.jgit.transport.OpenSshConfig$Host)" from="(credentialsProvider != null) &amp;&amp; ((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive())))" to="!((credentialsProvider != null) &amp;&amp; ((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive()))))" />
    <mutant id="mutant_7789" viable="false" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name)) + &quot;]&quot;" to="((&quot;FooterKey[&quot; + (name)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_5127" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;)" to="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) * -1)" />
    <mutant id="mutant_6458" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)" from="(org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(e)) &amp;&amp; (credentialsProvider != null)" to="!((org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(e)) &amp;&amp; (credentialsProvider != null))" />
    <mutant id="mutant_7788" viable="true" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name)) + &quot;]&quot;" to="((&quot;FooterKey[&quot; + (name)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_5128" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;)" to="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) + 1)" />
    <mutant id="mutant_6459" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess(java.lang.String,int)" from="(timeout) * 1000" to="((timeout) * 1000) + 1" />
    <mutant id="mutant_5129" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) + (upstreamCommit.name()))" to="((((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) + (upstreamCommit.name())) * -1)" />
    <mutant id="mutant_2929" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.shouldBeKept()" from="((packFile.getPath()) + &quot;.keep&quot;)" to="(((packFile.getPath()) + &quot;.keep&quot;) * -1)" />
    <mutant id="mutant_2928" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.shouldBeKept()" from="((packFile.getPath()) + &quot;.keep&quot;)" to="(((packFile.getPath()) + &quot;.keep&quot;) - 1)" />
    <mutant id="mutant_2927" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.hasObject(org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="!((0 &lt; offset) &amp;&amp; (!(isCorrupt(offset))))" />
    <mutant id="mutant_2926" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.endWindowCache()" from="r &amp;&amp; ((activeCopyRawData) == 0)" to="!(r &amp;&amp; ((activeCopyRawData) == 0))" />
    <mutant id="mutant_5199" viable="true" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: returning to &quot; + headName)" to="((&quot;rebase finished: returning to &quot; + headName) + 1)" />
    <mutant id="mutant_2925" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile(java.io.File,int)" from="(System.identityHashCode(this)) * 31" to="((System.identityHashCode(this)) * 31) * -1" />
    <mutant id="mutant_2924" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile(java.io.File,int)" from="(System.identityHashCode(this)) * 31" to="((System.identityHashCode(this)) * 31) + 1" />
    <mutant id="mutant_2923" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile(java.io.File,int)" from="(System.identityHashCode(this)) * 31" to="((System.identityHashCode(this)) * 31) - 1" />
    <mutant id="mutant_2922" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile$1.compare(org.eclipse.jgit.internal.storage.file.PackFile,org.eclipse.jgit.internal.storage.file.PackFile)" from="(b.packLastModified) - (a.packLastModified)" to="((b.packLastModified) - (a.packLastModified)) * -1" />
    <mutant id="mutant_2921" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile$1.compare(org.eclipse.jgit.internal.storage.file.PackFile,org.eclipse.jgit.internal.storage.file.PackFile)" from="(b.packLastModified) - (a.packLastModified)" to="((b.packLastModified) - (a.packLastModified)) - 1" />
    <mutant id="mutant_2920" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile$1.compare(org.eclipse.jgit.internal.storage.file.PackFile,org.eclipse.jgit.internal.storage.file.PackFile)" from="(b.packLastModified) - (a.packLastModified)" to="((b.packLastModified) - (a.packLastModified)) + 1" />
    <mutant id="mutant_5191" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;)" to="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) * -1)" />
    <mutant id="mutant_5192" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;)" to="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) - 1)" />
    <mutant id="mutant_5193" viable="true" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;)" to="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) + 1)" />
    <mutant id="mutant_5194" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) + (onto.getName()))" to="((((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) + (onto.getName())) * -1)" />
    <mutant id="mutant_2919" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1.write(org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder,byte[])" from="(bitmaps == null) || ((packDataChecksum.length) != 20)" to="!((bitmaps == null) || ((packDataChecksum.length) != 20))" />
    <mutant id="mutant_5195" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) + (onto.getName()))" to="((((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) + (onto.getName())) - 1)" />
    <mutant id="mutant_2918" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(i % (recentBitmaps.length))" to="((i % (recentBitmaps.length)) + 1)" />
    <mutant id="mutant_5196" viable="true" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) + (onto.getName()))" to="((((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) + (onto.getName())) + 1)" />
    <mutant id="mutant_2917" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(i % (recentBitmaps.length))" to="((i % (recentBitmaps.length)) - 1)" />
    <mutant id="mutant_5197" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: returning to &quot; + headName)" to="((&quot;rebase finished: returning to &quot; + headName) * -1)" />
    <mutant id="mutant_2916" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(i % (recentBitmaps.length))" to="((i % (recentBitmaps.length)) * -1)" />
    <mutant id="mutant_5198" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: returning to &quot; + headName)" to="((&quot;rebase finished: returning to &quot; + headName) - 1)" />
    <mutant id="mutant_5190" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: &quot; + headName)" to="((&quot;rebase finished: &quot; + headName) * -1)" />
    <mutant id="mutant_2915" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(index % (recentBitmaps.length))" to="((index % (recentBitmaps.length)) * -1)" />
    <mutant id="mutant_5188" viable="true" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: &quot; + headName)" to="((&quot;rebase finished: &quot; + headName) + 1)" />
    <mutant id="mutant_2914" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(index % (recentBitmaps.length))" to="((index % (recentBitmaps.length)) + 1)" />
    <mutant id="mutant_5189" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: &quot; + headName)" to="((&quot;rebase finished: &quot; + headName) - 1)" />
    <mutant id="mutant_2913" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(index % (recentBitmaps.length))" to="((index % (recentBitmaps.length)) - 1)" />
    <mutant id="mutant_2912" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="i - xorOffset" to="(i - xorOffset) + 1" />
    <mutant id="mutant_2911" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="i - xorOffset" to="(i - xorOffset) - 1" />
    <mutant id="mutant_2910" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="i - xorOffset" to="(i - xorOffset) * -1" />
    <mutant id="mutant_5180" viable="true" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) + (newCommit.name()))" to="((((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) + (newCommit.name())) + 1)" />
    <mutant id="mutant_5181" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) + (newCommit.name()))" to="((((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) + (newCommit.name())) * -1)" />
    <mutant id="mutant_5182" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkSteps(java.util.List)" from="(RebaseTodoLine.Action.SQUASH.equals(steps.get(0).getAction())) || (RebaseTodoLine.Action.FIXUP.equals(steps.get(0).getAction()))" to="!((RebaseTodoLine.Action.SQUASH.equals(steps.get(0).getAction())) || (RebaseTodoLine.Action.FIXUP.equals(steps.get(0).getAction())))" />
    <mutant id="mutant_2909" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper$1.hasNext()" from="((entry) == null) &amp;&amp; (it.hasNext())" to="!(((entry) == null) &amp;&amp; (it.hasNext()))" />
    <mutant id="mutant_5183" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkSteps(java.util.List)" from="(!(rebaseState.getFile(RebaseCommand.DONE).exists())) || ((rebaseState.readFile(RebaseCommand.DONE).trim().length()) == 0)" to="!((!(rebaseState.getFile(RebaseCommand.DONE).exists())) || ((rebaseState.readFile(RebaseCommand.DONE).trim().length()) == 0))" />
    <mutant id="mutant_2908" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper.getBitmap(org.eclipse.jgit.lib.AnyObjectId)" from="(bitmap != null) || ((oldPackIndex) == null)" to="!((bitmap != null) || ((oldPackIndex) == null))" />
    <mutant id="mutant_5184" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initializeSquashFixupFile(java.lang.String,java.lang.String)" from="(&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; + fullMessage)" to="((&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; + fullMessage) - 1)" />
    <mutant id="mutant_2907" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$1.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="(((a.getOffset()) - (b.getOffset())) * -1)" />
    <mutant id="mutant_5185" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initializeSquashFixupFile(java.lang.String,java.lang.String)" from="(&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; + fullMessage)" to="((&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; + fullMessage) * -1)" />
    <mutant id="mutant_2906" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$1.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="(((a.getOffset()) - (b.getOffset())) + 1)" />
    <mutant id="mutant_5186" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initializeSquashFixupFile(java.lang.String,java.lang.String)" from="(&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; + fullMessage)" to="((&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; + fullMessage) + 1)" />
    <mutant id="mutant_2905" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$1.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="(((a.getOffset()) - (b.getOffset())) - 1)" />
    <mutant id="mutant_5187" viable="true" in="org.eclipse.jgit.api.RebaseCommand.popSteps(int)" from="((poppedLines.size()) &gt;= numSteps) || (RebaseTodoLine.Action.COMMENT.equals(line.getAction()))" to="!(((poppedLines.size()) &gt;= numSteps) || (RebaseTodoLine.Action.COMMENT.equals(line.getAction())))" />
    <mutant id="mutant_2904" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2$1.next()" from="i + (index)" to="(i + (index)) + 1" />
    <mutant id="mutant_5177" viable="true" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;)" to="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) + 1)" />
    <mutant id="mutant_2903" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2$1.next()" from="i + (index)" to="(i + (index)) * -1" />
    <mutant id="mutant_5178" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;)" to="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) - 1)" />
    <mutant id="mutant_2902" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2$1.next()" from="i + (index)" to="(i + (index)) - 1" />
    <mutant id="mutant_5179" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) + (newCommit.name()))" to="((((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) + (newCommit.name())) - 1)" />
    <mutant id="mutant_2901" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2.iterator()" from="(byAddOrder.size()) - 1" to="((byAddOrder.size()) - 1) - 1" />
    <mutant id="mutant_2900" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2.iterator()" from="(byAddOrder.size()) - 1" to="((byAddOrder.size()) - 1) + 1" />
    <mutant id="mutant_5170" viable="true" in="org.eclipse.jgit.api.RebaseCommand.doSquashFixup(boolean,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.RebaseTodoLine,java.io.File,java.io.File)" from="(org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) + 1" to="((org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) + 1) - 1" />
    <mutant id="mutant_5171" viable="true" in="org.eclipse.jgit.api.RebaseCommand.squashIntoPrevious(boolean,org.eclipse.jgit.lib.RebaseTodoLine)" from="(((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" to="(!(((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH))))" />
    <mutant id="mutant_5172" viable="true" in="org.eclipse.jgit.api.RebaseCommand.squashIntoPrevious(boolean,org.eclipse.jgit.lib.RebaseTodoLine)" from="(nextStep == null) || (((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" to="!((nextStep == null) || (((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH))))" />
    <mutant id="mutant_5173" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;Fast-forward from &quot; + (oldCommit.name()))" to="((&quot;Fast-forward from &quot; + (oldCommit.name())) - 1)" />
    <mutant id="mutant_5174" viable="true" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;Fast-forward from &quot; + (oldCommit.name()))" to="((&quot;Fast-forward from &quot; + (oldCommit.name())) + 1)" />
    <mutant id="mutant_5175" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;Fast-forward from &quot; + (oldCommit.name()))" to="((&quot;Fast-forward from &quot; + (oldCommit.name())) * -1)" />
    <mutant id="mutant_5176" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;)" to="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) * -1)" />
    <mutant id="mutant_5166" viable="false" in="org.eclipse.jgit.api.RebaseCommand.continueRebase()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="(((Constants.HEAD) + &quot;^{tree}&quot;) * -1)" />
    <mutant id="mutant_6497" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="((value.length()) - 1)" to="(((value.length()) - 1) + 1)" />
    <mutant id="mutant_5167" viable="false" in="org.eclipse.jgit.api.RebaseCommand.continueRebase()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="(((Constants.HEAD) + &quot;^{tree}&quot;) - 1)" />
    <mutant id="mutant_6498" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="((value.length()) - 1)" to="(((value.length()) - 1) * -1)" />
    <mutant id="mutant_5168" viable="true" in="org.eclipse.jgit.api.RebaseCommand.doSquashFixup(boolean,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.RebaseTodoLine,java.io.File,java.io.File)" from="(org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) + 1" to="((org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) + 1) + 1" />
    <mutant id="mutant_6499" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="((value.length()) - 1)" to="(((value.length()) - 1) - 1)" />
    <mutant id="mutant_5169" viable="true" in="org.eclipse.jgit.api.RebaseCommand.doSquashFixup(boolean,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.RebaseTodoLine,java.io.File,java.io.File)" from="(org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) + 1" to="((org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) + 1) * -1" />
    <mutant id="mutant_1630" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_2962" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="((int)((length) - pos))" to="((int)(((length) - pos))) * -1" />
    <mutant id="mutant_1631" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_2961" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="((int)((length) - pos))" to="((int)(((length) - pos))) + 1" />
    <mutant id="mutant_2960" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="(pos + size)" to="((pos + size) + 1)" />
    <mutant id="mutant_1638" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 4)" to="((p + 4) * -1)" />
    <mutant id="mutant_1639" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 4)" to="((p + 4) - 1)" />
    <mutant id="mutant_2969" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="((int)((length) - pos))" to="((int)(((length) - pos))) - 1" />
    <mutant id="mutant_1636" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 3)" to="((p + 3) * -1)" />
    <mutant id="mutant_2968" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="((int)((length) - pos))" to="((int)(((length) - pos))) * -1" />
    <mutant id="mutant_1637" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 3)" to="((p + 3) - 1)" />
    <mutant id="mutant_2967" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="((int)((length) - pos))" to="((int)(((length) - pos))) + 1" />
    <mutant id="mutant_1634" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 2)" to="((p + 2) * -1)" />
    <mutant id="mutant_2966" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="(pos + size)" to="((pos + size) + 1)" />
    <mutant id="mutant_1635" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 3)" to="((p + 3) + 1)" />
    <mutant id="mutant_2965" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="(pos + size)" to="((pos + size) * -1)" />
    <mutant id="mutant_1632" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 2)" to="((p + 2) - 1)" />
    <mutant id="mutant_2964" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="(pos + size)" to="((pos + size) - 1)" />
    <mutant id="mutant_1633" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 2)" to="((p + 2) + 1)" />
    <mutant id="mutant_2963" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="((int)((length) - pos))" to="((int)(((length) - pos))) - 1" />
    <mutant id="mutant_1629" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_2951" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos + p" to="(pos + p) - 1" />
    <mutant id="mutant_1620" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 8)" to="((p + 8) * -1)" />
    <mutant id="mutant_2950" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos + p" to="(pos + p) + 1" />
    <mutant id="mutant_1627" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 16)" to="((p + 16) - 1)" />
    <mutant id="mutant_2959" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="(pos + size)" to="((pos + size) * -1)" />
    <mutant id="mutant_1628" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 16)" to="((p + 16) + 1)" />
    <mutant id="mutant_2958" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="(pos + size)" to="((pos + size) - 1)" />
    <mutant id="mutant_1625" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 12)" to="((p + 12) + 1)" />
    <mutant id="mutant_2957" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p) + 20" to="((pos + p) + 20) - 1" />
    <mutant id="mutant_1626" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 16)" to="((p + 16) * -1)" />
    <mutant id="mutant_2956" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p) + 20" to="((pos + p) + 20) + 1" />
    <mutant id="mutant_1623" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 12)" to="((p + 12) * -1)" />
    <mutant id="mutant_2955" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p) + 20" to="((pos + p) + 20) * -1" />
    <mutant id="mutant_1624" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 12)" to="((p + 12) - 1)" />
    <mutant id="mutant_2954" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="((pos + p) - 1)" />
    <mutant id="mutant_1621" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 8)" to="((p + 8) + 1)" />
    <mutant id="mutant_2953" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="((pos + p) + 1)" />
    <mutant id="mutant_1622" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 8)" to="((p + 8) - 1)" />
    <mutant id="mutant_2952" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="((pos + p) * -1)" />
    <mutant id="mutant_1618" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 4)" to="((p + 4) - 1)" />
    <mutant id="mutant_1619" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 4)" to="((p + 4) + 1)" />
    <mutant id="mutant_2949" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos + p" to="(pos + p) * -1" />
    <mutant id="mutant_2940" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((b + '.') + (ext.getExtension()))" to="(((b + '.') + (ext.getExtension())) * -1)" />
    <mutant id="mutant_1616" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 32)" to="((p + 32) * -1)" />
    <mutant id="mutant_2948" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.findEndOffset(long)" from="(length) - 20" to="((length) - 20) * -1" />
    <mutant id="mutant_1617" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 4)" to="((p + 4) * -1)" />
    <mutant id="mutant_2947" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.findEndOffset(long)" from="(length) - 20" to="((length) - 20) - 1" />
    <mutant id="mutant_1614" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 32)" to="((p + 32) + 1)" />
    <mutant id="mutant_2946" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.findEndOffset(long)" from="(length) - 20" to="((length) - 20) + 1" />
    <mutant id="mutant_1615" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 32)" to="((p + 32) - 1)" />
    <mutant id="mutant_2945" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getPackName()" from="((name.length()) - (&quot;.pack&quot;.length()))" to="(((name.length()) - (&quot;.pack&quot;.length())) - 1)" />
    <mutant id="mutant_1612" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 24)" to="((p + 24) - 1)" />
    <mutant id="mutant_2944" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getPackName()" from="((name.length()) - (&quot;.pack&quot;.length()))" to="(((name.length()) - (&quot;.pack&quot;.length())) + 1)" />
    <mutant id="mutant_1613" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 24)" to="((p + 24) + 1)" />
    <mutant id="mutant_2943" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getPackName()" from="((name.length()) - (&quot;.pack&quot;.length()))" to="(((name.length()) - (&quot;.pack&quot;.length())) * -1)" />
    <mutant id="mutant_1610" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 16)" to="((p + 16) + 1)" />
    <mutant id="mutant_2942" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((b + '.') + (ext.getExtension()))" to="(((b + '.') + (ext.getExtension())) + 1)" />
    <mutant id="mutant_1611" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 24)" to="((p + 24) * -1)" />
    <mutant id="mutant_2941" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((b + '.') + (ext.getExtension()))" to="(((b + '.') + (ext.getExtension())) - 1)" />
    <mutant id="mutant_1609" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 16)" to="((p + 16) - 1)" />
    <mutant id="mutant_1607" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 8)" to="((p + 8) - 1)" />
    <mutant id="mutant_2939" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="(b + '.')" to="((b + '.') * -1)" />
    <mutant id="mutant_1608" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 16)" to="((p + 16) * -1)" />
    <mutant id="mutant_2938" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="(b + '.')" to="((b + '.') - 1)" />
    <mutant id="mutant_1605" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 8)" to="((p + 8) * -1)" />
    <mutant id="mutant_2937" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="(b + '.')" to="((b + '.') + 1)" />
    <mutant id="mutant_1606" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 8)" to="((p + 8) + 1)" />
    <mutant id="mutant_2936" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="((pos + p) - 1)" />
    <mutant id="mutant_1603" viable="true" in="org.eclipse.jgit.lib.IndexDiff.addConflict(java.lang.String,int)" from="stage - 1" to="(stage - 1) * -1" />
    <mutant id="mutant_2935" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="((pos + p) + 1)" />
    <mutant id="mutant_1604" viable="true" in="org.eclipse.jgit.lib.IndexDiff.addConflict(java.lang.String,int)" from="stage - 1" to="(stage - 1) - 1" />
    <mutant id="mutant_2934" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="((pos + p) * -1)" />
    <mutant id="mutant_1601" viable="true" in="org.eclipse.jgit.lib.IndexDiff.isEntryGitLink(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(ti != null) &amp;&amp; ((ti.getEntryRawMode()) == (FileMode.GITLINK.getBits()))" to="!((ti != null) &amp;&amp; ((ti.getEntryRawMode()) == (FileMode.GITLINK.getBits())))" />
    <mutant id="mutant_2933" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - ofs" to="(pos - ofs) + 1" />
    <mutant id="mutant_1602" viable="true" in="org.eclipse.jgit.lib.IndexDiff.addConflict(java.lang.String,int)" from="stage - 1" to="(stage - 1) + 1" />
    <mutant id="mutant_2932" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - ofs" to="(pos - ofs) * -1" />
    <mutant id="mutant_2931" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - ofs" to="(pos - ofs) - 1" />
    <mutant id="mutant_1600" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty())) &amp;&amp; (untracked.isEmpty())" to="!((((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty())) &amp;&amp; (untracked.isEmpty()))" />
    <mutant id="mutant_2930" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.shouldBeKept()" from="((packFile.getPath()) + &quot;.keep&quot;)" to="(((packFile.getPath()) + &quot;.keep&quot;) + 1)" />
    <mutant id="mutant_800" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="(((e.endA) + 1) * -1)" />
    <mutant id="mutant_801" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="(((e.endA) + 1) - 1)" />
    <mutant id="mutant_802" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="(((e.endA) + 1) + 1)" />
    <mutant id="mutant_803" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="(((e.endB) + 1) - 1)" />
    <mutant id="mutant_808" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length))) || (bEnd &gt; (bRaw.length))" to="!((((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length))) || (bEnd &gt; (bRaw.length)))" />
    <mutant id="mutant_809" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd))" to="(!((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)))" />
    <mutant id="mutant_804" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="(((e.endB) + 1) * -1)" />
    <mutant id="mutant_805" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="(((e.endB) + 1) + 1)" />
    <mutant id="mutant_806" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; 0) || (bPtr &lt; 0))" to="(!((aPtr &lt; 0) || (bPtr &lt; 0)))" />
    <mutant id="mutant_807" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length)))" to="(!(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length))))" />
    <mutant id="mutant_1674" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't'))" to="(!((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')))" />
    <mutant id="mutant_1675" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 3)" to="((p + 3) + 1)" />
    <mutant id="mutant_1672" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 2)" to="((p + 2) + 1)" />
    <mutant id="mutant_1673" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 2)" to="((p + 2) * -1)" />
    <mutant id="mutant_1670" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" to="(!(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')))" />
    <mutant id="mutant_1671" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 2)" to="((p + 2) - 1)" />
    <mutant id="mutant_1678" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~'))" to="(!(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~')))" />
    <mutant id="mutant_1679" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 4)" to="((p + 4) * -1)" />
    <mutant id="mutant_1676" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 3)" to="((p + 3) * -1)" />
    <mutant id="mutant_1677" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 3)" to="((p + 3) - 1)" />
    <mutant id="mutant_811" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd))" to="(!((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)))" />
    <mutant id="mutant_812" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(aEnd - 1)" to="((aEnd - 1) + 1)" />
    <mutant id="mutant_813" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(aEnd - 1)" to="((aEnd - 1) - 1)" />
    <mutant id="mutant_814" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(aEnd - 1)" to="((aEnd - 1) * -1)" />
    <mutant id="mutant_810" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[aPtr]) == (bRaw[bPtr]))" to="!(((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[aPtr]) == (bRaw[bPtr])))" />
    <mutant id="mutant_819" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="(((e.endA) + 1) * -1)" />
    <mutant id="mutant_815" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(bEnd - 1)" to="((bEnd - 1) * -1)" />
    <mutant id="mutant_816" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(bEnd - 1)" to="((bEnd - 1) + 1)" />
    <mutant id="mutant_817" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(bEnd - 1)" to="((bEnd - 1) - 1)" />
    <mutant id="mutant_818" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[(aEnd - 1)]) == (bRaw[(bEnd - 1)]))" to="!(((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[(aEnd - 1)]) == (bRaw[(bEnd - 1)])))" />
    <mutant id="mutant_1663" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')" to="!((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't'))" />
    <mutant id="mutant_2995" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="((pos + p) * -1)" />
    <mutant id="mutant_1664" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(end - p)" to="((end - p) + 1)" />
    <mutant id="mutant_2994" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - base" to="(pos - base) * -1" />
    <mutant id="mutant_1661" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 2)" to="((p + 2) + 1)" />
    <mutant id="mutant_2993" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - base" to="(pos - base) + 1" />
    <mutant id="mutant_1662" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 2)" to="((p + 2) * -1)" />
    <mutant id="mutant_2992" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - base" to="(pos - base) - 1" />
    <mutant id="mutant_2991" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="((pos + p) - 1)" />
    <mutant id="mutant_1660" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 2)" to="((p + 2) - 1)" />
    <mutant id="mutant_2990" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="((pos + p) + 1)" />
    <mutant id="mutant_1669" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_1667" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_2999" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(p + 20)" to="((p + 20) - 1)" />
    <mutant id="mutant_1668" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_2998" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(p + 20)" to="((p + 20) * -1)" />
    <mutant id="mutant_1665" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(end - p)" to="((end - p) * -1)" />
    <mutant id="mutant_2997" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="((pos + p) - 1)" />
    <mutant id="mutant_1666" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(end - p)" to="((end - p) - 1)" />
    <mutant id="mutant_2996" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="((pos + p) + 1)" />
    <mutant id="mutant_822" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="(((e.endA) + 1) * -1)" />
    <mutant id="mutant_823" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="(((e.endA) + 1) - 1)" />
    <mutant id="mutant_824" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="(((e.endA) + 1) + 1)" />
    <mutant id="mutant_825" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(a.lines.get(((e.endA) + 1))) - aEnd" to="((a.lines.get(((e.endA) + 1))) - aEnd) + 1" />
    <mutant id="mutant_820" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="(((e.endA) + 1) - 1)" />
    <mutant id="mutant_821" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="(((e.endA) + 1) + 1)" />
    <mutant id="mutant_826" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(a.lines.get(((e.endA) + 1))) - aEnd" to="((a.lines.get(((e.endA) + 1))) - aEnd) * -1" />
    <mutant id="mutant_827" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(a.lines.get(((e.endA) + 1))) - aEnd" to="((a.lines.get(((e.endA) + 1))) - aEnd) - 1" />
    <mutant id="mutant_828" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="(((e.endB) + 1) - 1)" />
    <mutant id="mutant_829" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="(((e.endB) + 1) * -1)" />
    <mutant id="mutant_1652" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextNamePos + 1)" to="((nextNamePos + 1) * -1)" />
    <mutant id="mutant_2984" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(pos + p)" to="((pos + p) - 1)" />
    <mutant id="mutant_1653" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextPtr - 1)" to="((nextPtr - 1) - 1)" />
    <mutant id="mutant_2983" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(pos + p)" to="((pos + p) + 1)" />
    <mutant id="mutant_1650" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextNamePos + 1)" to="((nextNamePos + 1) + 1)" />
    <mutant id="mutant_2982" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(pos + p)" to="((pos + p) * -1)" />
    <mutant id="mutant_1651" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextNamePos + 1)" to="((nextNamePos + 1) - 1)" />
    <mutant id="mutant_2981" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="((len - p) - 1)" />
    <mutant id="mutant_2980" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="((len - p) * -1)" />
    <mutant id="mutant_1658" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_1659" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" to="(!(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')))" />
    <mutant id="mutant_2989" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="((pos + p) * -1)" />
    <mutant id="mutant_1656" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_2988" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(delta != null) || (sz &lt; (curs.getStreamFileThreshold()))" to="!((delta != null) || (sz &lt; (curs.getStreamFileThreshold())))" />
    <mutant id="mutant_1657" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_2987" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.get(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="!((0 &lt; offset) &amp;&amp; (!(isCorrupt(offset))))" />
    <mutant id="mutant_1654" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextPtr - 1)" to="((nextPtr - 1) * -1)" />
    <mutant id="mutant_2986" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getBitmapIndex()" from="((bitmapIdx) == null) &amp;&amp; (hasExt(org.eclipse.jgit.internal.storage.pack.PackExt.BITMAP_INDEX))" to="!(((bitmapIdx) == null) &amp;&amp; (hasExt(org.eclipse.jgit.internal.storage.pack.PackExt.BITMAP_INDEX)))" />
    <mutant id="mutant_1655" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextPtr - 1)" to="((nextPtr - 1) + 1)" />
    <mutant id="mutant_2985" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getBitmapIndex()" from="(invalid) || (invalidBitmap)" to="!((invalid) || (invalidBitmap))" />
    <mutant id="mutant_833" viable="true" in="org.eclipse.jgit.diff.RenameDetector$1.compare(org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.diff.DiffEntry)" from="(sortOf(a.getChangeType())) - (sortOf(b.getChangeType()))" to="((sortOf(a.getChangeType())) - (sortOf(b.getChangeType()))) * -1" />
    <mutant id="mutant_834" viable="true" in="org.eclipse.jgit.diff.RenameDetector$1.compare(org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.diff.DiffEntry)" from="(sortOf(a.getChangeType())) - (sortOf(b.getChangeType()))" to="((sortOf(a.getChangeType())) - (sortOf(b.getChangeType()))) + 1" />
    <mutant id="mutant_835" viable="true" in="org.eclipse.jgit.diff.RenameDetector.isOverRenameLimit()" from="((getRenameLimit()) != 0) &amp;&amp; ((getRenameLimit()) &lt; cnt)" to="!(((getRenameLimit()) != 0) &amp;&amp; ((getRenameLimit()) &lt; cnt))" />
    <mutant id="mutant_836" viable="true" in="org.eclipse.jgit.diff.RenameDetector.calculateModifyScore(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.diff.DiffEntry)" from="(breakScore) + 1" to="((breakScore) + 1) + 1" />
    <mutant id="mutant_830" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="(((e.endB) + 1) + 1)" />
    <mutant id="mutant_831" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(!partialA) &amp;&amp; (bEnd &lt; (b.lines.get(((e.endB) + 1))))" to="!((!partialA) &amp;&amp; (bEnd &lt; (b.lines.get(((e.endB) + 1)))))" />
    <mutant id="mutant_832" viable="true" in="org.eclipse.jgit.diff.RenameDetector$1.compare(org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.diff.DiffEntry)" from="(sortOf(a.getChangeType())) - (sortOf(b.getChangeType()))" to="((sortOf(a.getChangeType())) - (sortOf(b.getChangeType()))) - 1" />
    <mutant id="mutant_837" viable="true" in="org.eclipse.jgit.diff.RenameDetector.calculateModifyScore(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.diff.DiffEntry)" from="(breakScore) + 1" to="((breakScore) + 1) * -1" />
    <mutant id="mutant_838" viable="true" in="org.eclipse.jgit.diff.RenameDetector.calculateModifyScore(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.diff.DiffEntry)" from="(breakScore) + 1" to="((breakScore) + 1) - 1" />
    <mutant id="mutant_839" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(added.isEmpty())) &amp;&amp; (!(deleted.isEmpty()))" to="!((!(added.isEmpty())) &amp;&amp; (!(deleted.isEmpty())))" />
    <mutant id="mutant_1641" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1)" to="((thisNameEnd + 1) * -1)" />
    <mutant id="mutant_2973" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="((len - p) + 1)" />
    <mutant id="mutant_1642" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1)" to="((thisNameEnd + 1) + 1)" />
    <mutant id="mutant_2972" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(findEndOffset(pos)) - pos" to="((findEndOffset(pos)) - pos) * -1" />
    <mutant id="mutant_2971" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(findEndOffset(pos)) - pos" to="((findEndOffset(pos)) - pos) + 1" />
    <mutant id="mutant_1640" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 4)" to="((p + 4) + 1)" />
    <mutant id="mutant_2970" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(findEndOffset(pos)) - pos" to="((findEndOffset(pos)) - pos) - 1" />
    <mutant id="mutant_1649" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_1647" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_2979" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="((len - p) + 1)" />
    <mutant id="mutant_1648" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_2978" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="pos - ofs" to="(pos - ofs) + 1" />
    <mutant id="mutant_1645" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1) + (Constants.OBJECT_ID_LENGTH)" to="((thisNameEnd + 1) + (Constants.OBJECT_ID_LENGTH)) - 1" />
    <mutant id="mutant_2977" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="pos - ofs" to="(pos - ofs) * -1" />
    <mutant id="mutant_1646" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1) + (Constants.OBJECT_ID_LENGTH)" to="((thisNameEnd + 1) + (Constants.OBJECT_ID_LENGTH)) + 1" />
    <mutant id="mutant_2976" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="pos - ofs" to="(pos - ofs) - 1" />
    <mutant id="mutant_1643" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1)" to="((thisNameEnd + 1) - 1)" />
    <mutant id="mutant_2975" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="((len - p) - 1)" />
    <mutant id="mutant_1644" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1) + (Constants.OBJECT_ID_LENGTH)" to="((thisNameEnd + 1) + (Constants.OBJECT_ID_LENGTH)) * -1" />
    <mutant id="mutant_2974" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="((len - p) * -1)" />
    <mutant id="mutant_844" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (added.size()))" to="(((added.size()) + (added.size())) + 1)" />
    <mutant id="mutant_845" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (added.size()))" to="(((added.size()) + (added.size())) - 1)" />
    <mutant id="mutant_846" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (added.size()))" to="(((added.size()) + (added.size())) * -1)" />
    <mutant id="mutant_847" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(((added.size()) + (added.size())) + (deleted.size()))" to="((((added.size()) + (added.size())) + (deleted.size())) * -1)" />
    <mutant id="mutant_840" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(added.isEmpty())) &amp;&amp; (!(deleted.isEmpty()))" to="!((!(added.isEmpty())) &amp;&amp; (!(deleted.isEmpty())))" />
    <mutant id="mutant_841" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty())))" to="(!((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty()))))" />
    <mutant id="mutant_842" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty()))) &amp;&amp; (!(deleted.isEmpty()))" to="!(((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty()))) &amp;&amp; (!(deleted.isEmpty())))" />
    <mutant id="mutant_843" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findContentRenames(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((getRenameLimit()) == 0) || (cnt &lt;= (getRenameLimit()))" to="!(((getRenameLimit()) == 0) || (cnt &lt;= (getRenameLimit())))" />
    <mutant id="mutant_848" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(((added.size()) + (added.size())) + (deleted.size()))" to="((((added.size()) + (added.size())) + (deleted.size())) + 1)" />
    <mutant id="mutant_849" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(((added.size()) + (added.size())) + (deleted.size()))" to="((((added.size()) + (added.size())) + (deleted.size())) - 1)" />
    <mutant id="mutant_855" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((((added.size()) + (added.size())) + (deleted.size())) + ((added.size()) * (deleted.size())))" to="(((((added.size()) + (added.size())) + (deleted.size())) + ((added.size()) * (deleted.size()))) + 1)" />
    <mutant id="mutant_856" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(dels.size()) * (adds.size())" to="((dels.size()) * (adds.size())) - 1" />
    <mutant id="mutant_857" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(dels.size()) * (adds.size())" to="((dels.size()) * (adds.size())) * -1" />
    <mutant id="mutant_858" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(dels.size()) * (adds.size())" to="((dels.size()) * (adds.size())) + 1" />
    <mutant id="mutant_851" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) * (deleted.size()))" to="(((added.size()) * (deleted.size())) * -1)" />
    <mutant id="mutant_852" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) * (deleted.size()))" to="(((added.size()) * (deleted.size())) + 1)" />
    <mutant id="mutant_853" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((((added.size()) + (added.size())) + (deleted.size())) + ((added.size()) * (deleted.size())))" to="(((((added.size()) + (added.size())) + (deleted.size())) + ((added.size()) * (deleted.size()))) * -1)" />
    <mutant id="mutant_854" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((((added.size()) + (added.size())) + (deleted.size())) + ((added.size()) * (deleted.size())))" to="(((((added.size()) + (added.size())) + (deleted.size())) + ((added.size()) * (deleted.size()))) - 1)" />
    <mutant id="mutant_859" viable="true" in="org.eclipse.jgit.diff.RenameDetector.rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (deleted.size()))" to="(((added.size()) + (deleted.size())) + 1)" />
    <mutant id="mutant_850" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) * (deleted.size()))" to="(((added.size()) * (deleted.size())) - 1)" />
    <mutant id="mutant_866" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endA) - 1)" to="(((e.endA) - 1) - 1)" />
    <mutant id="mutant_867" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endA) - 1)" to="(((e.endA) - 1) * -1)" />
    <mutant id="mutant_868" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endA) - 1)" to="(((e.endA) - 1) + 1)" />
    <mutant id="mutant_869" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endB) - 1)" to="(((e.endB) - 1) * -1)" />
    <mutant id="mutant_862" viable="true" in="org.eclipse.jgit.diff.RenameDetector.setRenameScore(int)" from="(score &lt; 0) || (score &gt; 100)" to="!((score &lt; 0) || (score &gt; 100))" />
    <mutant id="mutant_863" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB)))" to="(!(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))))" />
    <mutant id="mutant_864" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, e.beginA, b, e.beginB))" to="!((((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, e.beginA, b, e.beginB)))" />
    <mutant id="mutant_865" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB)))" to="(!(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))))" />
    <mutant id="mutant_1696" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) * -1)" />
    <mutant id="mutant_1697" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) - 1)" />
    <mutant id="mutant_1694" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_1695" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_1692" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) + 1)" />
    <mutant id="mutant_1693" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_1690" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) * -1)" />
    <mutant id="mutant_1691" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) - 1)" />
    <mutant id="mutant_860" viable="true" in="org.eclipse.jgit.diff.RenameDetector.rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (deleted.size()))" to="(((added.size()) + (deleted.size())) - 1)" />
    <mutant id="mutant_861" viable="true" in="org.eclipse.jgit.diff.RenameDetector.rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (deleted.size()))" to="(((added.size()) + (deleted.size())) * -1)" />
    <mutant id="mutant_1698" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) + 1)" />
    <mutant id="mutant_1699" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="((raw[(ptr + 1)]) == ((byte)(187))) &amp;&amp; ((raw[(ptr + 2)]) == ((byte)(191)))" to="!(((raw[(ptr + 1)]) == ((byte)(187))) &amp;&amp; ((raw[(ptr + 2)]) == ((byte)(191))))" />
    <mutant id="mutant_877" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="(idHashBits - 3)" to="((idHashBits - 3) * -1)" />
    <mutant id="mutant_878" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="(idHashBits - 3)" to="((idHashBits - 3) + 1)" />
    <mutant id="mutant_879" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3))" to="(((1 &lt;&lt; idHashBits) * (idHashBits - 3)) * -1)" />
    <mutant id="mutant_873" viable="false" in="?" from="(1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) - 1" to="((1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) - 1) * -1" />
    <mutant id="mutant_874" viable="false" in="?" from="(1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) - 1" to="((1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) - 1) - 1" />
    <mutant id="mutant_875" viable="false" in="?" from="(1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) - 1" to="((1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) - 1) + 1" />
    <mutant id="mutant_876" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="(idHashBits - 3)" to="((idHashBits - 3) - 1)" />
    <mutant id="mutant_1685" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) + 1)" />
    <mutant id="mutant_1686" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) * -1)" />
    <mutant id="mutant_1683" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isInvalidOnWindows(byte)" from="(1 &lt;= c) &amp;&amp; (c &lt;= 31)" to="!((1 &lt;= c) &amp;&amp; (c &lt;= 31))" />
    <mutant id="mutant_1684" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="((ptr + 1) - 1)" />
    <mutant id="mutant_1681" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 4)" to="((p + 4) + 1)" />
    <mutant id="mutant_1682" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~')) &amp;&amp; ((buf[(p + 4)]) == '1')" to="!((((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~')) &amp;&amp; ((buf[(p + 4)]) == '1'))" />
    <mutant id="mutant_1680" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 4)" to="((p + 4) - 1)" />
    <mutant id="mutant_870" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endB) - 1)" to="(((e.endB) - 1) - 1)" />
    <mutant id="mutant_871" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endB) - 1)" to="(((e.endB) - 1) + 1)" />
    <mutant id="mutant_872" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, ((e.endA) - 1), b, ((e.endB) - 1)))" to="!((((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, ((e.endA) - 1), b, ((e.endB) - 1))))" />
    <mutant id="mutant_1689" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) + 1)" />
    <mutant id="mutant_1687" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) * -1)" />
    <mutant id="mutant_1688" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="((ptr + 2) - 1)" />
    <mutant id="mutant_888" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize)) + idx" to="(((idHash.length) - (idSize)) + idx) * -1" />
    <mutant id="mutant_889" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize)) + idx" to="(((idHash.length) - (idSize)) + idx) + 1" />
    <mutant id="mutant_884" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3)) / idHashBits" to="(((1 &lt;&lt; idHashBits) * (idHashBits - 3)) / idHashBits) * -1" />
    <mutant id="mutant_885" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize))" to="(((idHash.length) - (idSize)) * -1)" />
    <mutant id="mutant_886" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize))" to="(((idHash.length) - (idSize)) - 1)" />
    <mutant id="mutant_887" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize))" to="(((idHash.length) - (idSize)) + 1)" />
    <mutant id="mutant_7815" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - 16)" to="((nameEnd - 16) + 1)" />
    <mutant id="mutant_7814" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - 16)" to="((nameEnd - 16) * -1)" />
    <mutant id="mutant_7817" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="((hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)) - 1" />
    <mutant id="mutant_7816" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - 16)" to="((nameEnd - 16) - 1)" />
    <mutant id="mutant_7819" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="((hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)) + 1" />
    <mutant id="mutant_7818" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="((hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)) * -1" />
    <mutant id="mutant_880" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3))" to="(((1 &lt;&lt; idHashBits) * (idHashBits - 3)) + 1)" />
    <mutant id="mutant_881" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3))" to="(((1 &lt;&lt; idHashBits) * (idHashBits - 3)) - 1)" />
    <mutant id="mutant_882" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3)) / idHashBits" to="(((1 &lt;&lt; idHashBits) * (idHashBits - 3)) / idHashBits) - 1" />
    <mutant id="mutant_883" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3)) / idHashBits" to="(((1 &lt;&lt; idHashBits) * (idHashBits - 3)) / idHashBits) + 1" />
    <mutant id="mutant_7811" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="nameEnd - 16" to="(nameEnd - 16) * -1" />
    <mutant id="mutant_7810" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - (tv.namePtr))" to="((nameEnd - (tv.namePtr)) - 1)" />
    <mutant id="mutant_7813" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="nameEnd - 16" to="(nameEnd - 16) - 1" />
    <mutant id="mutant_7812" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="nameEnd - 16" to="(nameEnd - 16) + 1" />
    <mutant id="mutant_899" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.slot(int)" from="(31 - (idHashBits))" to="((31 - (idHashBits)) - 1)" />
    <mutant id="mutant_895" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((int)(((common(dst)) * maxScore) / max))" to="((int)((((common(dst)) * maxScore) / max))) - 1" />
    <mutant id="mutant_896" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((int)(((common(dst)) * maxScore) / max))" to="((int)((((common(dst)) * maxScore) / max))) * -1" />
    <mutant id="mutant_897" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.slot(int)" from="(31 - (idHashBits))" to="((31 - (idHashBits)) + 1)" />
    <mutant id="mutant_898" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.slot(int)" from="(31 - (idHashBits))" to="((31 - (idHashBits)) * -1)" />
    <mutant id="mutant_7804" viable="false" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;) + (getValue())" to="(((getKey()) + &quot;: &quot;) + (getValue())) * -1" />
    <mutant id="mutant_7803" viable="false" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;)" to="(((getKey()) + &quot;: &quot;) * -1)" />
    <mutant id="mutant_7806" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;) + (getValue())" to="(((getKey()) + &quot;: &quot;) + (getValue())) + 1" />
    <mutant id="mutant_7805" viable="false" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;) + (getValue())" to="(((getKey()) + &quot;: &quot;) + (getValue())) - 1" />
    <mutant id="mutant_7808" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - (tv.namePtr))" to="((nameEnd - (tv.namePtr)) + 1)" />
    <mutant id="mutant_7807" viable="true" in="org.eclipse.jgit.revwalk.LIFORevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(b == null) || (!(b.canUnpop()))" to="!((b == null) || (!(b.canUnpop())))" />
    <mutant id="mutant_7809" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - (tv.namePtr))" to="((nameEnd - (tv.namePtr)) * -1)" />
    <mutant id="mutant_891" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((common(dst)) * maxScore)" to="(((common(dst)) * maxScore) * -1)" />
    <mutant id="mutant_892" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((common(dst)) * maxScore)" to="(((common(dst)) * maxScore) - 1)" />
    <mutant id="mutant_893" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((common(dst)) * maxScore)" to="(((common(dst)) * maxScore) + 1)" />
    <mutant id="mutant_894" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((int)(((common(dst)) * maxScore) / max))" to="((int)((((common(dst)) * maxScore) / max))) + 1" />
    <mutant id="mutant_7800" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="(gt - 1)" to="((gt - 1) * -1)" />
    <mutant id="mutant_7802" viable="false" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;)" to="(((getKey()) + &quot;: &quot;) - 1)" />
    <mutant id="mutant_890" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize)) + idx" to="(((idHash.length) - (idSize)) + idx) - 1" />
    <mutant id="mutant_7801" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;)" to="(((getKey()) + &quot;: &quot;) + 1)" />
    <mutant id="mutant_7617" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + 1)" />
    <mutant id="mutant_8948" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 3)" to="((offset + 3) * -1)" />
    <mutant id="mutant_7616" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="((&quot;(&quot; + (a.toString())) + 1)" />
    <mutant id="mutant_8947" viable="true" in="org.eclipse.jgit.util.NB.encodeInt16(byte[],int,int)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_7619" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) * -1)" />
    <mutant id="mutant_7618" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) - 1)" />
    <mutant id="mutant_8949" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 3)" to="((offset + 3) - 1)" />
    <mutant id="mutant_8940" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 3)" to="((offset + 3) - 1)" />
    <mutant id="mutant_7611" viable="false" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator) + submoduleUrl" to="((remoteUrl + separator) + submoduleUrl) * -1" />
    <mutant id="mutant_8942" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt64(byte[],int)" from="(offset + 4)" to="((offset + 4) * -1)" />
    <mutant id="mutant_7610" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator) + submoduleUrl" to="((remoteUrl + separator) + submoduleUrl) + 1" />
    <mutant id="mutant_8941" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 3)" to="((offset + 3) + 1)" />
    <mutant id="mutant_7613" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(a.include(walker, c)) &amp;&amp; (b.include(walker, c))" to="!((a.include(walker, c)) &amp;&amp; (b.include(walker, c)))" />
    <mutant id="mutant_8944" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt64(byte[],int)" from="(offset + 4)" to="((offset + 4) + 1)" />
    <mutant id="mutant_7612" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a.requiresCommitBody()) || (b.requiresCommitBody())" to="!((a.requiresCommitBody()) || (b.requiresCommitBody()))" />
    <mutant id="mutant_8943" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt64(byte[],int)" from="(offset + 4)" to="((offset + 4) - 1)" />
    <mutant id="mutant_7615" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="((&quot;(&quot; + (a.toString())) - 1)" />
    <mutant id="mutant_8946" viable="true" in="org.eclipse.jgit.util.NB.encodeInt16(byte[],int,int)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_7614" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="((&quot;(&quot; + (a.toString())) * -1)" />
    <mutant id="mutant_8945" viable="true" in="org.eclipse.jgit.util.NB.encodeInt16(byte[],int,int)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_7606" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator)" to="((remoteUrl + separator) + 1)" />
    <mutant id="mutant_8937" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 2)" to="((offset + 2) + 1)" />
    <mutant id="mutant_7605" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="(((remoteUrl.length()) - 1) - 1)" />
    <mutant id="mutant_8936" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 2)" to="((offset + 2) - 1)" />
    <mutant id="mutant_7608" viable="false" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator)" to="((remoteUrl + separator) * -1)" />
    <mutant id="mutant_8939" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 3)" to="((offset + 3) * -1)" />
    <mutant id="mutant_7607" viable="false" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator)" to="((remoteUrl + separator) - 1)" />
    <mutant id="mutant_8938" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 2)" to="((offset + 2) * -1)" />
    <mutant id="mutant_7609" viable="false" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator) + submoduleUrl" to="((remoteUrl + separator) + submoduleUrl) - 1" />
    <mutant id="mutant_7600" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="(((remoteUrl.length()) - 1) + 1)" />
    <mutant id="mutant_8931" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 7)" to="((offset + 7) * -1)" />
    <mutant id="mutant_8930" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 7)" to="((offset + 7) + 1)" />
    <mutant id="mutant_7602" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="(((remoteUrl.length()) - 1) - 1)" />
    <mutant id="mutant_8933" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_7601" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="(((remoteUrl.length()) - 1) * -1)" />
    <mutant id="mutant_8932" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 7)" to="((offset + 7) - 1)" />
    <mutant id="mutant_7604" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="(((remoteUrl.length()) - 1) * -1)" />
    <mutant id="mutant_8935" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_7603" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="(((remoteUrl.length()) - 1) + 1)" />
    <mutant id="mutant_8934" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_8926" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 5)" to="((offset + 5) - 1)" />
    <mutant id="mutant_8925" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 5)" to="((offset + 5) * -1)" />
    <mutant id="mutant_8928" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 6)" to="((offset + 6) - 1)" />
    <mutant id="mutant_8927" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 6)" to="((offset + 6) * -1)" />
    <mutant id="mutant_8929" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 6)" to="((offset + 6) + 1)" />
    <mutant id="mutant_8920" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 3)" to="((offset + 3) + 1)" />
    <mutant id="mutant_8922" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 4)" to="((offset + 4) - 1)" />
    <mutant id="mutant_8921" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 4)" to="((offset + 4) * -1)" />
    <mutant id="mutant_8924" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 5)" to="((offset + 5) + 1)" />
    <mutant id="mutant_8923" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 4)" to="((offset + 4) + 1)" />
    <mutant id="mutant_8915" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 2)" to="((offset + 2) - 1)" />
    <mutant id="mutant_8914" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_8917" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 2)" to="((offset + 2) * -1)" />
    <mutant id="mutant_8916" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 2)" to="((offset + 2) + 1)" />
    <mutant id="mutant_8919" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 3)" to="((offset + 3) - 1)" />
    <mutant id="mutant_8918" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 3)" to="((offset + 3) * -1)" />
    <mutant id="mutant_8911" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt16(byte[],int)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_8910" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt16(byte[],int)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_8913" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_8912" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_7660" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) - 1)" />
    <mutant id="mutant_8991" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.indexOf('/')) + 1" to="((in.indexOf('/')) + 1) + 1" />
    <mutant id="mutant_8990" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.indexOf('/')) + 1" to="((in.indexOf('/')) + 1) * -1" />
    <mutant id="mutant_6330" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;)" to="(((Long.toString(timestamp)) + &quot;-&quot;) + 1)" />
    <mutant id="mutant_7662" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) * -1)" />
    <mutant id="mutant_8993" viable="false" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.substring(0, i)) + (super.quote(in.substring(i)))" to="((in.substring(0, i)) + (super.quote(in.substring(i)))) * -1" />
    <mutant id="mutant_5000" viable="true" in="org.eclipse.jgit.api.InitCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (!(gitDir.equals(directory)))" to="!((gitDir != null) &amp;&amp; (!(gitDir.equals(directory))))" />
    <mutant id="mutant_6331" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;) + (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))" to="(((Long.toString(timestamp)) + &quot;-&quot;) + (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))) * -1" />
    <mutant id="mutant_7661" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + 1)" />
    <mutant id="mutant_8992" viable="false" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.substring(0, i)) + (super.quote(in.substring(i)))" to="((in.substring(0, i)) + (super.quote(in.substring(i)))) - 1" />
    <mutant id="mutant_6329" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;)" to="(((Long.toString(timestamp)) + &quot;-&quot;) - 1)" />
    <mutant id="mutant_6321" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity()))) &amp;&amp; (!(askForIsComplete()))" to="!(((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity()))) &amp;&amp; (!(askForIsComplete())))" />
    <mutant id="mutant_7653" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="((cmit.getCommitTime()) &lt;= (until)) &amp;&amp; ((cmit.getCommitTime()) &gt;= (when))" to="!(((cmit.getCommitTime()) &lt;= (until)) &amp;&amp; ((cmit.getCommitTime()) &gt;= (when)))" />
    <mutant id="mutant_8984" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.quote(java.lang.String)" from="i + 1" to="(i + 1) - 1" />
    <mutant id="mutant_6322" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;)" to="((path + &quot;:&quot;) - 1)" />
    <mutant id="mutant_7652" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between(long,long)" from="((int)(until / 1000))" to="((int)((until / 1000))) + 1" />
    <mutant id="mutant_8983" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.quote(java.lang.String)" from="i + 1" to="(i + 1) * -1" />
    <mutant id="mutant_6323" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;)" to="((path + &quot;:&quot;) * -1)" />
    <mutant id="mutant_7655" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) - 1)" />
    <mutant id="mutant_8986" viable="false" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="in + &quot;/&quot;" to="(in + &quot;/&quot;) - 1" />
    <mutant id="mutant_6324" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;)" to="((path + &quot;:&quot;) + 1)" />
    <mutant id="mutant_7654" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) + 1)" />
    <mutant id="mutant_8985" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.quote(java.lang.String)" from="i + 1" to="(i + 1) + 1" />
    <mutant id="mutant_6325" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;) + (String.valueOf(timestamp))" to="((path + &quot;:&quot;) + (String.valueOf(timestamp))) * -1" />
    <mutant id="mutant_7657" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((when) * 1000L)" to="(((when) * 1000L) * -1)" />
    <mutant id="mutant_8988" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="in + &quot;/&quot;" to="(in + &quot;/&quot;) + 1" />
    <mutant id="mutant_6326" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;) + (String.valueOf(timestamp))" to="((path + &quot;:&quot;) + (String.valueOf(timestamp))) - 1" />
    <mutant id="mutant_7656" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) * -1)" />
    <mutant id="mutant_8987" viable="false" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="in + &quot;/&quot;" to="(in + &quot;/&quot;) * -1" />
    <mutant id="mutant_6327" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;) + (String.valueOf(timestamp))" to="((path + &quot;:&quot;) + (String.valueOf(timestamp))) + 1" />
    <mutant id="mutant_7659" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((when) * 1000L)" to="(((when) * 1000L) + 1)" />
    <mutant id="mutant_6328" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;)" to="(((Long.toString(timestamp)) + &quot;-&quot;) * -1)" />
    <mutant id="mutant_7658" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((when) * 1000L)" to="(((when) * 1000L) - 1)" />
    <mutant id="mutant_8989" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.indexOf('/')) + 1" to="((in.indexOf('/')) + 1) - 1" />
    <mutant id="mutant_8980" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="ie - ip" to="(ie - ip) + 1" />
    <mutant id="mutant_7651" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between(long,long)" from="((int)(until / 1000))" to="((int)((until / 1000))) - 1" />
    <mutant id="mutant_8982" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="inquote || (ip == ie)" to="!(inquote || (ip == ie))" />
    <mutant id="mutant_6320" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity())))" to="(!((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity()))))" />
    <mutant id="mutant_7650" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between(long,long)" from="((int)(until / 1000))" to="((int)((until / 1000))) * -1" />
    <mutant id="mutant_8981" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="ie - ip" to="(ie - ip) * -1" />
    <mutant id="mutant_6318" viable="false" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;jgit fetch &quot; + (transport.uri))" to="((&quot;jgit fetch &quot; + (transport.uri)) * -1)" />
    <mutant id="mutant_6319" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;jgit fetch &quot; + (transport.uri))" to="((&quot;jgit fetch &quot; + (transport.uri)) + 1)" />
    <mutant id="mutant_7649" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;) + 1" />
    <mutant id="mutant_6310" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(tagopt == (TagOpt.AUTO_FOLLOW)) &amp;&amp; (!(additionalTags.isEmpty()))" to="!((tagopt == (TagOpt.AUTO_FOLLOW)) &amp;&amp; (!(additionalTags.isEmpty())))" />
    <mutant id="mutant_7642" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((when) * 1000L)" to="(((when) * 1000L) - 1)" />
    <mutant id="mutant_8973" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 2)" to="((offset + 2) + 1)" />
    <mutant id="mutant_6311" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="((!includedTags) || (!(askForIsComplete())))" to="(!((!includedTags) || (!(askForIsComplete()))))" />
    <mutant id="mutant_7641" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((when) * 1000L)" to="(((when) * 1000L) * -1)" />
    <mutant id="mutant_8972" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 2)" to="((offset + 2) - 1)" />
    <mutant id="mutant_6312" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(!(askFor.isEmpty())) &amp;&amp; ((!includedTags) || (!(askForIsComplete())))" to="!((!(askFor.isEmpty())) &amp;&amp; ((!includedTags) || (!(askForIsComplete()))))" />
    <mutant id="mutant_7644" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) - 1)" />
    <mutant id="mutant_8975" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_6313" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof org.eclipse.jgit.transport.TrackingRefUpdate.Command))" to="(!(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof org.eclipse.jgit.transport.TrackingRefUpdate.Command)))" />
    <mutant id="mutant_7643" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((when) * 1000L)" to="(((when) * 1000L) + 1)" />
    <mutant id="mutant_8974" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 2)" to="((offset + 2) * -1)" />
    <mutant id="mutant_6314" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof TrackingRefUpdate.Command)) &amp;&amp; (!(((TrackingRefUpdate.Command)(cmd)).canForceUpdate()))" to="!((((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof TrackingRefUpdate.Command)) &amp;&amp; (!(((TrackingRefUpdate.Command)(cmd)).canForceUpdate())))" />
    <mutant id="mutant_7646" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) * -1)" />
    <mutant id="mutant_8977" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_6315" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandFetchTags()" from="(local == null) || (!(r.getObjectId().equals(local.getObjectId())))" to="!((local == null) || (!(r.getObjectId().equals(local.getObjectId()))))" />
    <mutant id="mutant_7645" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + 1)" />
    <mutant id="mutant_8976" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_6316" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandWildcard(org.eclipse.jgit.transport.RefSpec,java.util.Set)" from="(spec.matchSource(src)) &amp;&amp; (matched.add(src))" to="!((spec.matchSource(src)) &amp;&amp; (matched.add(src)))" />
    <mutant id="mutant_7648" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;) - 1" />
    <mutant id="mutant_8979" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="ie - ip" to="(ie - ip) - 1" />
    <mutant id="mutant_6317" viable="false" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;jgit fetch &quot; + (transport.uri))" to="((&quot;jgit fetch &quot; + (transport.uri)) - 1)" />
    <mutant id="mutant_7647" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;) * -1" />
    <mutant id="mutant_8978" viable="true" in="org.eclipse.jgit.util.ProcessResult.isExecutedWithError()" from="((getStatus()) == (ProcessResult.Status.OK)) &amp;&amp; ((getExitCode()) != 0)" to="!(((getStatus()) == (ProcessResult.Status.OK)) &amp;&amp; ((getExitCode()) != 0))" />
    <mutant id="mutant_7640" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) * -1)" />
    <mutant id="mutant_8971" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 3)" to="((offset + 3) + 1)" />
    <mutant id="mutant_8970" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 3)" to="((offset + 3) - 1)" />
    <mutant id="mutant_6307" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandAutoFollowTags()" from="(askFor.containsKey(obj)) || (transport.local.hasObject(obj))" to="!((askFor.containsKey(obj)) || (transport.local.hasObject(obj)))" />
    <mutant id="mutant_7639" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) - 1)" />
    <mutant id="mutant_6308" viable="true" in="org.eclipse.jgit.transport.FetchProcess.createUpdate(org.eclipse.jgit.transport.RefSpec,org.eclipse.jgit.lib.ObjectId)" from="(ref != null) &amp;&amp; ((ref.getObjectId()) != null)" to="!((ref != null) &amp;&amp; ((ref.getObjectId()) != null))" />
    <mutant id="mutant_7638" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) + 1)" />
    <mutant id="mutant_8969" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 3)" to="((offset + 3) * -1)" />
    <mutant id="mutant_6309" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(!(askFor.isEmpty())) &amp;&amp; (!(askForIsComplete()))" to="!((!(askFor.isEmpty())) &amp;&amp; (!(askForIsComplete())))" />
    <mutant id="mutant_7631" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((when) * 1000L)" to="(((when) * 1000L) + 1)" />
    <mutant id="mutant_8962" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 6)" to="((offset + 6) + 1)" />
    <mutant id="mutant_6300" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((command.length()) + 1)" to="(((command.length()) + 1) + 1)" />
    <mutant id="mutant_7630" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((when) * 1000L)" to="(((when) * 1000L) - 1)" />
    <mutant id="mutant_8961" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 6)" to="((offset + 6) - 1)" />
    <mutant id="mutant_6301" viable="false" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="(&quot;ERR &quot; + (e.getMessage()))" to="((&quot;ERR &quot; + (e.getMessage())) - 1)" />
    <mutant id="mutant_7633" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + 1)" />
    <mutant id="mutant_8964" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 5)" to="((offset + 5) * -1)" />
    <mutant id="mutant_6302" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="(&quot;ERR &quot; + (e.getMessage()))" to="((&quot;ERR &quot; + (e.getMessage())) + 1)" />
    <mutant id="mutant_7632" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) - 1)" />
    <mutant id="mutant_8963" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 5)" to="((offset + 5) + 1)" />
    <mutant id="mutant_6303" viable="false" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="(&quot;ERR &quot; + (e.getMessage()))" to="((&quot;ERR &quot; + (e.getMessage())) * -1)" />
    <mutant id="mutant_7635" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;) * -1" />
    <mutant id="mutant_8966" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 4)" to="((offset + 4) * -1)" />
    <mutant id="mutant_6304" viable="false" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((&quot;ERR &quot; + (e.getMessage())) + &quot;\n&quot;)" to="(((&quot;ERR &quot; + (e.getMessage())) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_7634" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) * -1)" />
    <mutant id="mutant_8965" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 5)" to="((offset + 5) - 1)" />
    <mutant id="mutant_6305" viable="false" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((&quot;ERR &quot; + (e.getMessage())) + &quot;\n&quot;)" to="(((&quot;ERR &quot; + (e.getMessage())) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_7637" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;) + 1" />
    <mutant id="mutant_8968" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 4)" to="((offset + 4) + 1)" />
    <mutant id="mutant_6306" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((&quot;ERR &quot; + (e.getMessage())) + &quot;\n&quot;)" to="(((&quot;ERR &quot; + (e.getMessage())) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_7636" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;) - 1" />
    <mutant id="mutant_8967" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 4)" to="((offset + 4) - 1)" />
    <mutant id="mutant_8960" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 6)" to="((offset + 6) * -1)" />
    <mutant id="mutant_7628" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) * -1)" />
    <mutant id="mutant_8959" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 7)" to="((offset + 7) - 1)" />
    <mutant id="mutant_7627" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) - 1)" />
    <mutant id="mutant_8958" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 7)" to="((offset + 7) * -1)" />
    <mutant id="mutant_7629" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((when) * 1000L)" to="(((when) * 1000L) * -1)" />
    <mutant id="mutant_7620" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="((((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + 1)" />
    <mutant id="mutant_8951" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 2)" to="((offset + 2) - 1)" />
    <mutant id="mutant_8950" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 3)" to="((offset + 3) + 1)" />
    <mutant id="mutant_7622" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="((((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) * -1)" />
    <mutant id="mutant_8953" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 2)" to="((offset + 2) * -1)" />
    <mutant id="mutant_7621" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="((((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) - 1)" />
    <mutant id="mutant_8952" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 2)" to="((offset + 2) + 1)" />
    <mutant id="mutant_7624" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="((((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;) - 1" />
    <mutant id="mutant_8955" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_7623" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="((((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;) * -1" />
    <mutant id="mutant_8954" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_7626" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) + 1)" />
    <mutant id="mutant_8957" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 7)" to="((offset + 7) + 1)" />
    <mutant id="mutant_7625" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="((((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;) + 1" />
    <mutant id="mutant_8956" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_6370" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="((eq + 2) + 1)" />
    <mutant id="mutant_5040" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.distance) + 1" to="((c.distance) + 1) - 1" />
    <mutant id="mutant_6371" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="((eq + 2) * -1)" />
    <mutant id="mutant_5041" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="leftCost - rightCost" to="(leftCost - rightCost) - 1" />
    <mutant id="mutant_6372" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="((eq + 2) - 1)" />
    <mutant id="mutant_5042" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="leftCost - rightCost" to="(leftCost - rightCost) * -1" />
    <mutant id="mutant_6373" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="dq + 1" to="(dq + 1) + 1" />
    <mutant id="mutant_5043" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="leftCost - rightCost" to="(leftCost - rightCost) + 1" />
    <mutant id="mutant_6374" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="dq + 1" to="(dq + 1) * -1" />
    <mutant id="mutant_5044" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(c != 0) || (prefixes.isEmpty())" to="!((c != 0) || (prefixes.isEmpty()))" />
    <mutant id="mutant_6375" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="dq + 1" to="(dq + 1) - 1" />
    <mutant id="mutant_5034" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="((p.tip) == null) || ((compare(c.tip, cost, p.tip, p.cost)) &lt; 0)" to="!(((p.tip) == null) || ((compare(c.tip, cost, p.tip, p.cost)) &lt; 0))" />
    <mutant id="mutant_6365" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) + 1)" />
    <mutant id="mutant_7697" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="&quot;.*&quot; + pattern" to="(&quot;.*&quot; + pattern) + 1" />
    <mutant id="mutant_5035" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_6366" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) * -1)" />
    <mutant id="mutant_7696" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="(!(pattern.startsWith(&quot;^&quot;))) &amp;&amp; (!(pattern.startsWith(&quot;.*&quot;)))" to="!((!(pattern.startsWith(&quot;^&quot;))) &amp;&amp; (!(pattern.startsWith(&quot;.*&quot;))))" />
    <mutant id="mutant_5036" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_6367" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="((eq + 2) + 1)" />
    <mutant id="mutant_7699" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="&quot;.*&quot; + pattern" to="(&quot;.*&quot; + pattern) - 1" />
    <mutant id="mutant_5037" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_6368" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="((eq + 2) * -1)" />
    <mutant id="mutant_7698" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="&quot;.*&quot; + pattern" to="(&quot;.*&quot; + pattern) * -1" />
    <mutant id="mutant_5038" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.distance) + 1" to="((c.distance) + 1) * -1" />
    <mutant id="mutant_6369" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="((eq + 2) - 1)" />
    <mutant id="mutant_5039" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.distance) + 1" to="((c.distance) + 1) + 1" />
    <mutant id="mutant_7691" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="((((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + 1)" />
    <mutant id="mutant_6360" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) - 1)" />
    <mutant id="mutant_7690" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="((((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) - 1)" />
    <mutant id="mutant_5030" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(minCommitTime()) - (NameRevCommand.COMMIT_TIME_SLOP)" to="((minCommitTime()) - (NameRevCommand.COMMIT_TIME_SLOP)) - 1" />
    <mutant id="mutant_6361" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) + 1)" />
    <mutant id="mutant_7693" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="((((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;) + 1" />
    <mutant id="mutant_5031" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.cost) + (i &gt; 0 ? mergeCost : 1)" to="((c.cost) + (i &gt; 0 ? mergeCost : 1)) * -1" />
    <mutant id="mutant_6362" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) * -1)" />
    <mutant id="mutant_7692" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="((((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;) * -1" />
    <mutant id="mutant_5032" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.cost) + (i &gt; 0 ? mergeCost : 1)" to="((c.cost) + (i &gt; 0 ? mergeCost : 1)) + 1" />
    <mutant id="mutant_6363" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq &lt; 0) || ((eq + 1) == (auth.length()))" to="!((eq &lt; 0) || ((eq + 1) == (auth.length())))" />
    <mutant id="mutant_7695" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter.create(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a == (RevFilter.ALL)) || (b == (RevFilter.ALL))" to="!((a == (RevFilter.ALL)) || (b == (RevFilter.ALL)))" />
    <mutant id="mutant_5033" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.cost) + (i &gt; 0 ? mergeCost : 1)" to="((c.cost) + (i &gt; 0 ? mergeCost : 1)) - 1" />
    <mutant id="mutant_6364" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) - 1)" />
    <mutant id="mutant_7694" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="((((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;) - 1" />
    <mutant id="mutant_5023" viable="false" in="?" from="(60 * 60)" to="((60 * 60) * -1)" />
    <mutant id="mutant_6354" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.LHEX(byte[])" from="((bin.length) * 2)" to="(((bin.length) * 2) * -1)" />
    <mutant id="mutant_7686" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) * -1)" />
    <mutant id="mutant_5024" viable="false" in="?" from="(60 * 60)" to="((60 * 60) - 1)" />
    <mutant id="mutant_6355" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.LHEX(byte[])" from="((bin.length) * 2)" to="(((bin.length) * 2) + 1)" />
    <mutant id="mutant_7685" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="((&quot;(&quot; + (a.toString())) + 1)" />
    <mutant id="mutant_5025" viable="false" in="?" from="(60 * 60) * 24" to="((60 * 60) * 24) * -1" />
    <mutant id="mutant_6356" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.uri(java.net.URL)" from="((u.getPort()) == 80) &amp;&amp; (&quot;http&quot;.equals(u.getProtocol()))" to="!(((u.getPort()) == 80) &amp;&amp; (&quot;http&quot;.equals(u.getProtocol())))" />
    <mutant id="mutant_7688" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) - 1)" />
    <mutant id="mutant_5026" viable="false" in="?" from="(60 * 60) * 24" to="((60 * 60) * 24) + 1" />
    <mutant id="mutant_6357" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.uri(java.net.URL)" from="((u.getPort()) == 443) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol()))" to="!(((u.getPort()) == 443) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol())))" />
    <mutant id="mutant_7687" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + 1)" />
    <mutant id="mutant_5027" viable="false" in="?" from="(60 * 60) * 24" to="((60 * 60) * 24) - 1" />
    <mutant id="mutant_6358" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(next &lt; (auth.length())) &amp;&amp; ((auth.charAt(next)) == ',')" to="!((next &lt; (auth.length())) &amp;&amp; ((auth.charAt(next)) == ','))" />
    <mutant id="mutant_5028" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(minCommitTime()) - (NameRevCommand.COMMIT_TIME_SLOP)" to="((minCommitTime()) - (NameRevCommand.COMMIT_TIME_SLOP)) + 1" />
    <mutant id="mutant_6359" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(next &lt; (auth.length())) &amp;&amp; (Character.isWhitespace(auth.charAt(next)))" to="!((next &lt; (auth.length())) &amp;&amp; (Character.isWhitespace(auth.charAt(next))))" />
    <mutant id="mutant_7689" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="((((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) * -1)" />
    <mutant id="mutant_5029" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(minCommitTime()) - (NameRevCommand.COMMIT_TIME_SLOP)" to="((minCommitTime()) - (NameRevCommand.COMMIT_TIME_SLOP)) * -1" />
    <mutant id="mutant_7680" viable="false" in="org.eclipse.jgit.revwalk.filter.NotRevFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="(&quot;NOT &quot; + (a.toString())) - 1" />
    <mutant id="mutant_6350" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + enc)" to="((((type.getSchemeName()) + &quot; &quot;) + enc) + 1)" />
    <mutant id="mutant_7682" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(a.include(walker, c)) || (b.include(walker, c))" to="!((a.include(walker, c)) || (b.include(walker, c)))" />
    <mutant id="mutant_5020" viable="true" in="org.eclipse.jgit.api.MergeResult.addConflict(java.lang.String,org.eclipse.jgit.merge.MergeResult)" from="(mergedCommits.length) + 1" to="((mergedCommits.length) + 1) * -1" />
    <mutant id="mutant_6351" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + enc)" to="((((type.getSchemeName()) + &quot; &quot;) + enc) * -1)" />
    <mutant id="mutant_7681" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a.requiresCommitBody()) || (b.requiresCommitBody())" to="!((a.requiresCommitBody()) || (b.requiresCommitBody()))" />
    <mutant id="mutant_5021" viable="true" in="org.eclipse.jgit.api.MergeResult.addConflict(java.lang.String,org.eclipse.jgit.merge.MergeResult)" from="(mergedCommits.length) + 1" to="((mergedCommits.length) + 1) + 1" />
    <mutant id="mutant_6352" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + enc)" to="((((type.getSchemeName()) + &quot; &quot;) + enc) - 1)" />
    <mutant id="mutant_7684" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="((&quot;(&quot; + (a.toString())) - 1)" />
    <mutant id="mutant_5022" viable="false" in="?" from="(60 * 60)" to="((60 * 60) + 1)" />
    <mutant id="mutant_6353" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.LHEX(byte[])" from="((bin.length) * 2)" to="(((bin.length) * 2) - 1)" />
    <mutant id="mutant_7683" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="((&quot;(&quot; + (a.toString())) * -1)" />
    <mutant id="mutant_5012" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(!(commit)) &amp;&amp; (!(squash))" to="!((!(commit)) &amp;&amp; (!(squash)))" />
    <mutant id="mutant_6343" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="(((user) + &quot;:&quot;) * -1)" />
    <mutant id="mutant_7675" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter(long)" from="((int)(ts / 1000))" to="((int)((ts / 1000))) + 1" />
    <mutant id="mutant_5013" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(commit) &amp;&amp; (!(squash))" to="!((commit) &amp;&amp; (!(squash)))" />
    <mutant id="mutant_6344" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;) + (pass)" to="(((user) + &quot;:&quot;) + (pass)) - 1" />
    <mutant id="mutant_7674" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) + &quot;)&quot;" to="((((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) + &quot;)&quot;) * -1" />
    <mutant id="mutant_5014" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(commit) &amp;&amp; (squash)" to="!((commit) &amp;&amp; (squash))" />
    <mutant id="mutant_6345" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;) + (pass)" to="(((user) + &quot;:&quot;) + (pass)) + 1" />
    <mutant id="mutant_7677" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter(long)" from="((int)(ts / 1000))" to="((int)((ts / 1000))) * -1" />
    <mutant id="mutant_5015" viable="true" in="org.eclipse.jgit.api.MergeCommand.checkParameters()" from="(squash.booleanValue()) &amp;&amp; ((fastForwardMode) == (MergeCommand.FastForwardMode.NO_FF))" to="!((squash.booleanValue()) &amp;&amp; ((fastForwardMode) == (MergeCommand.FastForwardMode.NO_FF)))" />
    <mutant id="mutant_6346" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;) + (pass)" to="(((user) + &quot;:&quot;) + (pass)) * -1" />
    <mutant id="mutant_7676" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter(long)" from="((int)(ts / 1000))" to="((int)((ts / 1000))) - 1" />
    <mutant id="mutant_5016" viable="false" in="org.eclipse.jgit.api.MergeResult.toString()" from="&quot;, &quot; + (description)" to="(&quot;, &quot; + (description)) * -1" />
    <mutant id="mutant_6347" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="(((type.getSchemeName()) + &quot; &quot;) + 1)" />
    <mutant id="mutant_7679" viable="false" in="org.eclipse.jgit.revwalk.filter.NotRevFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="(&quot;NOT &quot; + (a.toString())) * -1" />
    <mutant id="mutant_5017" viable="false" in="org.eclipse.jgit.api.MergeResult.toString()" from="&quot;, &quot; + (description)" to="(&quot;, &quot; + (description)) - 1" />
    <mutant id="mutant_6348" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="(((type.getSchemeName()) + &quot; &quot;) - 1)" />
    <mutant id="mutant_7678" viable="true" in="org.eclipse.jgit.revwalk.filter.NotRevFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="(&quot;NOT &quot; + (a.toString())) + 1" />
    <mutant id="mutant_5018" viable="true" in="org.eclipse.jgit.api.MergeResult.toString()" from="&quot;, &quot; + (description)" to="(&quot;, &quot; + (description)) + 1" />
    <mutant id="mutant_6349" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="(((type.getSchemeName()) + &quot; &quot;) * -1)" />
    <mutant id="mutant_5019" viable="true" in="org.eclipse.jgit.api.MergeResult.addConflict(java.lang.String,org.eclipse.jgit.merge.MergeResult)" from="(mergedCommits.length) + 1" to="((mergedCommits.length) + 1) - 1" />
    <mutant id="mutant_7671" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L))))" to="((((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) - 1)" />
    <mutant id="mutant_6340" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(advertisedStamp - signedStamp)" to="((advertisedStamp - signedStamp) * -1)" />
    <mutant id="mutant_7670" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L))))" to="((((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) + 1)" />
    <mutant id="mutant_5010" viable="false" in="org.eclipse.jgit.api.MergeCommand.call()" from="(&quot;: &quot; + (MergeResult.MergeStatus.FAST_FORWARD))" to="((&quot;: &quot; + (MergeResult.MergeStatus.FAST_FORWARD)) - 1)" />
    <mutant id="mutant_6341" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="(((user) + &quot;:&quot;) + 1)" />
    <mutant id="mutant_7673" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) + &quot;)&quot;" to="((((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) + &quot;)&quot;) - 1" />
    <mutant id="mutant_5011" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(!(commit)) &amp;&amp; (squash)" to="!((!(commit)) &amp;&amp; (squash))" />
    <mutant id="mutant_6342" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="(((user) + &quot;:&quot;) - 1)" />
    <mutant id="mutant_7672" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) + &quot;)&quot;" to="((((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) + &quot;)&quot;) + 1" />
    <mutant id="mutant_5009" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(&quot;: &quot; + (MergeResult.MergeStatus.FAST_FORWARD))" to="((&quot;: &quot; + (MergeResult.MergeStatus.FAST_FORWARD)) + 1)" />
    <mutant id="mutant_5001" viable="true" in="org.eclipse.jgit.api.InitCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (gitDir.equals(directory))" to="!((gitDir != null) &amp;&amp; (gitDir.equals(directory)))" />
    <mutant id="mutant_6332" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;) + (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))" to="(((Long.toString(timestamp)) + &quot;-&quot;) + (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))) + 1" />
    <mutant id="mutant_7664" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;)" to="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) - 1)" />
    <mutant id="mutant_8995" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - inPtr)" to="((inEnd - inPtr) - 1)" />
    <mutant id="mutant_5002" viable="true" in="org.eclipse.jgit.api.ListBranchCommand.call()" from="(head != null) &amp;&amp; (head.getLeaf().getName().equals(org.eclipse.jgit.lib.Constants.HEAD))" to="!((head != null) &amp;&amp; (head.getLeaf().getName().equals(org.eclipse.jgit.lib.Constants.HEAD)))" />
    <mutant id="mutant_6333" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;) + (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))" to="(((Long.toString(timestamp)) + &quot;-&quot;) + (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))) - 1" />
    <mutant id="mutant_7663" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;)" to="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + 1)" />
    <mutant id="mutant_8994" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.substring(0, i)) + (super.quote(in.substring(i)))" to="((in.substring(0, i)) + (super.quote(in.substring(i)))) + 1" />
    <mutant id="mutant_5003" viable="true" in="org.eclipse.jgit.api.LogCommand.call()" from="((skip) &gt; (-1)) &amp;&amp; ((maxCount) &gt; (-1))" to="!(((skip) &gt; (-1)) &amp;&amp; ((maxCount) &gt; (-1)))" />
    <mutant id="mutant_6334" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(byte[])" from="(2 * (bytes.length))" to="((2 * (bytes.length)) - 1)" />
    <mutant id="mutant_7666" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((until) * 1000L)" to="(((until) * 1000L) * -1)" />
    <mutant id="mutant_8997" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - inPtr)" to="((inEnd - inPtr) + 1)" />
    <mutant id="mutant_5004" viable="false" in="org.eclipse.jgit.api.MergeCommand$FastForwardMode.toConfigValue()" from="&quot;--&quot; + (name().toLowerCase().replace('_', '-'))" to="(&quot;--&quot; + (name().toLowerCase().replace('_', '-'))) * -1" />
    <mutant id="mutant_6335" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(byte[])" from="(2 * (bytes.length))" to="((2 * (bytes.length)) * -1)" />
    <mutant id="mutant_7665" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;)" to="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) * -1)" />
    <mutant id="mutant_8996" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - inPtr)" to="((inEnd - inPtr) * -1)" />
    <mutant id="mutant_5005" viable="true" in="org.eclipse.jgit.api.MergeCommand$FastForwardMode.toConfigValue()" from="&quot;--&quot; + (name().toLowerCase().replace('_', '-'))" to="(&quot;--&quot; + (name().toLowerCase().replace('_', '-'))) + 1" />
    <mutant id="mutant_6336" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(byte[])" from="(2 * (bytes.length))" to="((2 * (bytes.length)) + 1)" />
    <mutant id="mutant_7668" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((until) * 1000L)" to="(((until) * 1000L) + 1)" />
    <mutant id="mutant_8999" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="((inEnd - 1) * -1)" />
    <mutant id="mutant_5006" viable="false" in="org.eclipse.jgit.api.MergeCommand$FastForwardMode.toConfigValue()" from="&quot;--&quot; + (name().toLowerCase().replace('_', '-'))" to="(&quot;--&quot; + (name().toLowerCase().replace('_', '-'))) - 1" />
    <mutant id="mutant_6337" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(idxSent == (-1)) || (idxRecv == (-1))" to="!((idxSent == (-1)) || (idxRecv == (-1)))" />
    <mutant id="mutant_7667" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((until) * 1000L)" to="(((until) * 1000L) - 1)" />
    <mutant id="mutant_8998" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;'))" to="(!((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;')))" />
    <mutant id="mutant_5007" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(revWalk.isMergedInto(headCommit, srcCommit)) &amp;&amp; ((fastForwardMode) != (MergeCommand.FastForwardMode.NO_FF))" to="!((revWalk.isMergedInto(headCommit, srcCommit)) &amp;&amp; ((fastForwardMode) != (MergeCommand.FastForwardMode.NO_FF)))" />
    <mutant id="mutant_6338" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(advertisedStamp - signedStamp)" to="((advertisedStamp - signedStamp) - 1)" />
    <mutant id="mutant_5008" viable="false" in="org.eclipse.jgit.api.MergeCommand.call()" from="(&quot;: &quot; + (MergeResult.MergeStatus.FAST_FORWARD))" to="((&quot;: &quot; + (MergeResult.MergeStatus.FAST_FORWARD)) * -1)" />
    <mutant id="mutant_6339" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(advertisedStamp - signedStamp)" to="((advertisedStamp - signedStamp) + 1)" />
    <mutant id="mutant_7669" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L))))" to="((((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) * -1)" />
    <mutant id="mutant_5081" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;)" to="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) * -1)" />
    <mutant id="mutant_5082" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) + (commit.getName()))" to="((((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) + (commit.getName())) - 1)" />
    <mutant id="mutant_5083" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) + (commit.getName()))" to="((((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) + (commit.getName())) + 1)" />
    <mutant id="mutant_5084" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) + (commit.getName()))" to="((((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) + (commit.getName())) * -1)" />
    <mutant id="mutant_2809" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory())) + &quot;]&quot;" to="((&quot;ObjectDirectory[&quot; + (getDirectory())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_5085" viable="true" in="org.eclipse.jgit.api.RebaseCommand.composeSquashMessage(boolean,org.eclipse.jgit.revwalk.RevCommit,java.lang.String,int)" from="((currSquashMessage.indexOf(&quot;\n&quot;)) + 1)" to="(((currSquashMessage.indexOf(&quot;\n&quot;)) + 1) * -1)" />
    <mutant id="mutant_2808" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory()))" to="((&quot;ObjectDirectory[&quot; + (getDirectory())) + 1)" />
    <mutant id="mutant_5086" viable="true" in="org.eclipse.jgit.api.RebaseCommand.composeSquashMessage(boolean,org.eclipse.jgit.revwalk.RevCommit,java.lang.String,int)" from="((currSquashMessage.indexOf(&quot;\n&quot;)) + 1)" to="(((currSquashMessage.indexOf(&quot;\n&quot;)) + 1) - 1)" />
    <mutant id="mutant_2807" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory()))" to="((&quot;ObjectDirectory[&quot; + (getDirectory())) * -1)" />
    <mutant id="mutant_5087" viable="true" in="org.eclipse.jgit.api.RebaseCommand.composeSquashMessage(boolean,org.eclipse.jgit.revwalk.RevCommit,java.lang.String,int)" from="((currSquashMessage.indexOf(&quot;\n&quot;)) + 1)" to="(((currSquashMessage.indexOf(&quot;\n&quot;)) + 1) + 1)" />
    <mutant id="mutant_2806" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory()))" to="((&quot;ObjectDirectory[&quot; + (getDirectory())) - 1)" />
    <mutant id="mutant_5088" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getOrdinal(int)" from="count % 10" to="(count % 10) - 1" />
    <mutant id="mutant_5080" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;)" to="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) - 1)" />
    <mutant id="mutant_2805" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.searchPacksAgain(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!trustFolderStat) || (old.snapshot.isModified(packDirectory))) &amp;&amp; (old != (scanPacks(old)))" to="!(((!trustFolderStat) || (old.snapshot.isModified(packDirectory))) &amp;&amp; (old != (scanPacks(old))))" />
    <mutant id="mutant_5078" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName)))" to="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) * -1)" />
    <mutant id="mutant_2804" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.searchPacksAgain(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!trustFolderStat) || (old.snapshot.isModified(packDirectory)))" to="(!((!trustFolderStat) || (old.snapshot.isModified(packDirectory))))" />
    <mutant id="mutant_5079" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;)" to="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) + 1)" />
    <mutant id="mutant_2803" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.has(org.eclipse.jgit.lib.AnyObjectId)" from="((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId))) || (hasLooseInSelfOrAlternate(objectId))" to="!(((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId))) || (hasLooseInSelfOrAlternate(objectId)))" />
    <mutant id="mutant_2802" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.has(org.eclipse.jgit.lib.AnyObjectId)" from="((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId)))" to="(!((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId))))" />
    <mutant id="mutant_2801" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.write(org.eclipse.jgit.lib.ObjectId)" from="(Constants.OBJECT_ID_STRING_LENGTH) + 1" to="((Constants.OBJECT_ID_STRING_LENGTH) + 1) * -1" />
    <mutant id="mutant_2800" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.write(org.eclipse.jgit.lib.ObjectId)" from="(Constants.OBJECT_ID_STRING_LENGTH) + 1" to="((Constants.OBJECT_ID_STRING_LENGTH) + 1) - 1" />
    <mutant id="mutant_5070" viable="false" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;) + name" to="(((getDir().getName()) + &quot;/&quot;) + name) * -1" />
    <mutant id="mutant_5071" viable="false" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;) + name" to="(((getDir().getName()) + &quot;/&quot;) + name) - 1" />
    <mutant id="mutant_5072" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;) + name" to="(((getDir().getName()) + &quot;/&quot;) + name) + 1" />
    <mutant id="mutant_5073" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.readFile(java.io.File,java.lang.String)" from="(end + 1)" to="((end + 1) * -1)" />
    <mutant id="mutant_5074" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.readFile(java.io.File,java.lang.String)" from="(end + 1)" to="((end + 1) - 1)" />
    <mutant id="mutant_5075" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.readFile(java.io.File,java.lang.String)" from="(end + 1)" to="((end + 1) + 1)" />
    <mutant id="mutant_5076" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName)))" to="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + 1)" />
    <mutant id="mutant_5077" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName)))" to="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) - 1)" />
    <mutant id="mutant_5067" viable="false" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;)" to="(((getDir().getName()) + &quot;/&quot;) - 1)" />
    <mutant id="mutant_6398" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) + (pass)" to="(((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) + (pass)) * -1" />
    <mutant id="mutant_5068" viable="false" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;)" to="(((getDir().getName()) + &quot;/&quot;) * -1)" />
    <mutant id="mutant_6399" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) + (pass)" to="(((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) + (pass)) - 1" />
    <mutant id="mutant_5069" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;)" to="(((getDir().getName()) + &quot;/&quot;) + 1)" />
    <mutant id="mutant_6390" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="(((user) + &quot;:&quot;) - 1)" />
    <mutant id="mutant_5060" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) + (ConfigConstants.CONFIG_KEY_URL)" to="(((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) + (ConfigConstants.CONFIG_KEY_URL)) + 1" />
    <mutant id="mutant_6391" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((user) + &quot;:&quot;) + realm)" to="((((user) + &quot;:&quot;) + realm) - 1)" />
    <mutant id="mutant_5061" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) + (ConfigConstants.CONFIG_KEY_URL)" to="(((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) + (ConfigConstants.CONFIG_KEY_URL)) - 1" />
    <mutant id="mutant_6392" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((user) + &quot;:&quot;) + realm)" to="((((user) + &quot;:&quot;) + realm) + 1)" />
    <mutant id="mutant_5062" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) + (ConfigConstants.CONFIG_KEY_URL)" to="(((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) + (ConfigConstants.CONFIG_KEY_URL)) * -1" />
    <mutant id="mutant_6393" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((user) + &quot;:&quot;) + realm)" to="((((user) + &quot;:&quot;) + realm) * -1)" />
    <mutant id="mutant_5063" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="((Constants.R_HEADS) + (remoteBranchName))" to="(((Constants.R_HEADS) + (remoteBranchName)) + 1)" />
    <mutant id="mutant_6394" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;)" to="(((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) + 1)" />
    <mutant id="mutant_5064" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((Constants.R_HEADS) + (remoteBranchName))" to="(((Constants.R_HEADS) + (remoteBranchName)) * -1)" />
    <mutant id="mutant_6395" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;)" to="(((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) * -1)" />
    <mutant id="mutant_5065" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((Constants.R_HEADS) + (remoteBranchName))" to="(((Constants.R_HEADS) + (remoteBranchName)) - 1)" />
    <mutant id="mutant_6396" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;)" to="(((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) - 1)" />
    <mutant id="mutant_5066" viable="true" in="org.eclipse.jgit.api.PushCommand.call()" from="(head != null) &amp;&amp; (head.isSymbolic())" to="!((head != null) &amp;&amp; (head.isSymbolic()))" />
    <mutant id="mutant_6397" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) + (pass)" to="(((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) + (pass)) + 1" />
    <mutant id="mutant_5056" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote))" to="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + 1)" />
    <mutant id="mutant_6387" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="e + 1" to="(e + 1) * -1" />
    <mutant id="mutant_5057" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT))" to="(((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) * -1)" />
    <mutant id="mutant_6388" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="(((user) + &quot;:&quot;) + 1)" />
    <mutant id="mutant_5058" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT))" to="(((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) + 1)" />
    <mutant id="mutant_6389" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="(((user) + &quot;:&quot;) * -1)" />
    <mutant id="mutant_5059" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT))" to="(((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) - 1)" />
    <mutant id="mutant_6380" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) + 1)" />
    <mutant id="mutant_5050" viable="true" in="org.eclipse.jgit.api.NameRevCommand.addAnnotatedTags()" from="(id != null) &amp;&amp; ((walk.parseAny(id)) instanceof org.eclipse.jgit.revwalk.RevTag)" to="!((id != null) &amp;&amp; ((walk.parseAny(id)) instanceof org.eclipse.jgit.revwalk.RevTag))" />
    <mutant id="mutant_6381" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) * -1)" />
    <mutant id="mutant_5051" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT))" to="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) - 1)" />
    <mutant id="mutant_6382" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) - 1)" />
    <mutant id="mutant_5052" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT))" to="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + 1)" />
    <mutant id="mutant_6383" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) + 1)" />
    <mutant id="mutant_5053" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT))" to="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) * -1)" />
    <mutant id="mutant_6384" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) * -1)" />
    <mutant id="mutant_5054" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote))" to="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) - 1)" />
    <mutant id="mutant_6385" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="e + 1" to="(e + 1) - 1" />
    <mutant id="mutant_5055" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote))" to="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) * -1)" />
    <mutant id="mutant_6386" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="e + 1" to="(e + 1) + 1" />
    <mutant id="mutant_5045" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(li &lt; 0) &amp;&amp; (leftTip.startsWith(prefix))" to="!((li &lt; 0) &amp;&amp; (leftTip.startsWith(prefix)))" />
    <mutant id="mutant_6376" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) - 1)" />
    <mutant id="mutant_5046" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(ri &lt; 0) &amp;&amp; (rightTip.startsWith(prefix))" to="!((ri &lt; 0) &amp;&amp; (rightTip.startsWith(prefix)))" />
    <mutant id="mutant_6377" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) + 1)" />
    <mutant id="mutant_5047" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="li - ri" to="(li - ri) + 1" />
    <mutant id="mutant_6378" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) * -1)" />
    <mutant id="mutant_5048" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="li - ri" to="(li - ri) - 1" />
    <mutant id="mutant_6379" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="((eq + 1) - 1)" />
    <mutant id="mutant_5049" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="li - ri" to="(li - ri) * -1" />
    <mutant id="mutant_1519" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 7" to="(position + 7) * -1" />
    <mutant id="mutant_2841" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertPack(org.eclipse.jgit.internal.storage.file.PackFile)" from="1 + (oldList.length)" to="(1 + (oldList.length)) + 1" />
    <mutant id="mutant_1510" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 5)" to="((position + 5) * -1)" />
    <mutant id="mutant_2840" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertPack(org.eclipse.jgit.internal.storage.file.PackFile)" from="1 + (oldList.length)" to="(1 + (oldList.length)) * -1" />
    <mutant id="mutant_1517" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 7" to="(position + 7) - 1" />
    <mutant id="mutant_2849" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="((newList.length) - j)" to="(((newList.length) - j) * -1)" />
    <mutant id="mutant_1518" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 7" to="(position + 7) + 1" />
    <mutant id="mutant_2848" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(j + 1)" to="((j + 1) + 1)" />
    <mutant id="mutant_1515" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 6)" to="((position + 6) + 1)" />
    <mutant id="mutant_2847" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(j + 1)" to="((j + 1) * -1)" />
    <mutant id="mutant_1516" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't')) || ((typeString[(position + 6)]) != endMark)" to="!(((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't')) || ((typeString[(position + 6)]) != endMark))" />
    <mutant id="mutant_2846" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(j + 1)" to="((j + 1) - 1)" />
    <mutant id="mutant_1513" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 6)" to="((position + 6) * -1)" />
    <mutant id="mutant_2845" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(oldList.length) - 1" to="((oldList.length) - 1) + 1" />
    <mutant id="mutant_1514" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 6)" to="((position + 6) - 1)" />
    <mutant id="mutant_2844" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(oldList.length) - 1" to="((oldList.length) - 1) - 1" />
    <mutant id="mutant_1511" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 5)" to="((position + 5) - 1)" />
    <mutant id="mutant_2843" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(oldList.length) - 1" to="((oldList.length) - 1) * -1" />
    <mutant id="mutant_1512" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't'))" to="(!((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't')))" />
    <mutant id="mutant_2842" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertPack(org.eclipse.jgit.internal.storage.file.PackFile)" from="1 + (oldList.length)" to="(1 + (oldList.length)) - 1" />
    <mutant id="mutant_1508" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i'))" to="(!(((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')))" />
    <mutant id="mutant_1509" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 5)" to="((position + 5) + 1)" />
    <mutant id="mutant_2839" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.handlePackError(java.io.IOException,org.eclipse.jgit.internal.storage.file.PackFile)" from="((e.getMessage()) != null) &amp;&amp; (e.getMessage().toLowerCase().contains(org.eclipse.jgit.internal.storage.file.ObjectDirectory.STALE_FILE_HANDLE_MSG))" to="!(((e.getMessage()) != null) &amp;&amp; (e.getMessage().toLowerCase().contains(org.eclipse.jgit.internal.storage.file.ObjectDirectory.STALE_FILE_HANDLE_MSG)))" />
    <mutant id="mutant_2830" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="((p.length()) - 4)" to="(((p.length()) - 4) + 1)" />
    <mutant id="mutant_1506" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="((position + 4) * -1)" />
    <mutant id="mutant_2838" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.handlePackError(java.io.IOException,org.eclipse.jgit.internal.storage.file.PackFile)" from="(e instanceof org.eclipse.jgit.errors.CorruptObjectException) || (e instanceof org.eclipse.jgit.errors.PackInvalidException)" to="!((e instanceof org.eclipse.jgit.errors.CorruptObjectException) || (e instanceof org.eclipse.jgit.errors.PackInvalidException))" />
    <mutant id="mutant_1507" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="((position + 4) + 1)" />
    <mutant id="mutant_2837" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.close()" from="(alt != null) &amp;&amp; (alternates.compareAndSet(alt, null))" to="!((alt != null) &amp;&amp; (alternates.compareAndSet(alt, null)))" />
    <mutant id="mutant_1504" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm'))" to="(!((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')))" />
    <mutant id="mutant_2836" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.close()" from="(packs != (ObjectDirectory.NO_PACKS)) &amp;&amp; (packList.compareAndSet(packs, ObjectDirectory.NO_PACKS))" to="!((packs != (ObjectDirectory.NO_PACKS)) &amp;&amp; (packList.compareAndSet(packs, ObjectDirectory.NO_PACKS)))" />
    <mutant id="mutant_1505" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="((position + 4) - 1)" />
    <mutant id="mutant_2835" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="base + (ext.getExtension())" to="(base + (ext.getExtension())) + 1" />
    <mutant id="mutant_1502" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="((position + 3) - 1)" />
    <mutant id="mutant_2834" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="base + (ext.getExtension())" to="(base + (ext.getExtension())) - 1" />
    <mutant id="mutant_1503" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="((position + 3) * -1)" />
    <mutant id="mutant_2833" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="base + (ext.getExtension())" to="(base + (ext.getExtension())) * -1" />
    <mutant id="mutant_1500" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm'))" to="(!(((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')))" />
    <mutant id="mutant_2832" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="((p.length()) - 4)" to="(((p.length()) - 4) * -1)" />
    <mutant id="mutant_1501" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="((position + 3) + 1)" />
    <mutant id="mutant_2831" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="((p.length()) - 4)" to="(((p.length()) - 4) - 1)" />
    <mutant id="mutant_2829" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;)))) || (!(p.endsWith(&quot;.pack&quot;)))" to="!((((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;)))) || (!(p.endsWith(&quot;.pack&quot;))))" />
    <mutant id="mutant_2828" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;))))" to="(!(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;)))))" />
    <mutant id="mutant_2827" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!foundNew) &amp;&amp; (forReuse.isEmpty())) &amp;&amp; (snapshot.equals(old.snapshot))" to="!(((!foundNew) &amp;&amp; (forReuse.isEmpty())) &amp;&amp; (snapshot.equals(old.snapshot)))" />
    <mutant id="mutant_2826" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!foundNew) &amp;&amp; (forReuse.isEmpty()))" to="(!((!foundNew) &amp;&amp; (forReuse.isEmpty())))" />
    <mutant id="mutant_2825" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="base + (PackExt.PACK.getExtension())" to="(base + (PackExt.PACK.getExtension())) + 1" />
    <mutant id="mutant_2824" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="base + (PackExt.PACK.getExtension())" to="(base + (PackExt.PACK.getExtension())) - 1" />
    <mutant id="mutant_2823" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="base + (PackExt.PACK.getExtension())" to="(base + (PackExt.PACK.getExtension())) * -1" />
    <mutant id="mutant_2822" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="(base + (ext.getExtension()))" to="((base + (ext.getExtension())) + 1)" />
    <mutant id="mutant_2821" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="(base + (ext.getExtension()))" to="((base + (ext.getExtension())) - 1)" />
    <mutant id="mutant_2820" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="(base + (ext.getExtension()))" to="((base + (ext.getExtension())) * -1)" />
    <mutant id="mutant_5092" viable="false" in="org.eclipse.jgit.api.RebaseCommand.getOurCommitName()" from="&quot;Upstream, based on &quot; + (Repository.shortenRefName(upstreamCommitName))" to="(&quot;Upstream, based on &quot; + (Repository.shortenRefName(upstreamCommitName))) * -1" />
    <mutant id="mutant_5093" viable="false" in="org.eclipse.jgit.api.RebaseCommand.getOurCommitName()" from="&quot;Upstream, based on &quot; + (Repository.shortenRefName(upstreamCommitName))" to="(&quot;Upstream, based on &quot; + (Repository.shortenRefName(upstreamCommitName))) - 1" />
    <mutant id="mutant_5094" viable="true" in="org.eclipse.jgit.api.RebaseCommand.stripCommentLines(java.lang.String)" from="((result.length()) - 1)" to="(((result.length()) - 1) * -1)" />
    <mutant id="mutant_5095" viable="true" in="org.eclipse.jgit.api.RebaseCommand.stripCommentLines(java.lang.String)" from="((result.length()) - 1)" to="(((result.length()) - 1) + 1)" />
    <mutant id="mutant_5096" viable="true" in="org.eclipse.jgit.api.RebaseCommand.stripCommentLines(java.lang.String)" from="((result.length()) - 1)" to="(((result.length()) - 1) - 1)" />
    <mutant id="mutant_2819" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) - 3)" to="(((indexName.length()) - 3) + 1)" />
    <mutant id="mutant_5097" viable="true" in="org.eclipse.jgit.api.RebaseCommand.toAuthorScript(org.eclipse.jgit.lib.PersonIdent)" from="((externalString.lastIndexOf('&gt;')) + 2)" to="(((externalString.lastIndexOf('&gt;')) + 2) + 1)" />
    <mutant id="mutant_2818" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) - 3)" to="(((indexName.length()) - 3) - 1)" />
    <mutant id="mutant_5098" viable="true" in="org.eclipse.jgit.api.RebaseCommand.toAuthorScript(org.eclipse.jgit.lib.PersonIdent)" from="((externalString.lastIndexOf('&gt;')) + 2)" to="(((externalString.lastIndexOf('&gt;')) + 2) - 1)" />
    <mutant id="mutant_2817" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) - 3)" to="(((indexName.length()) - 3) * -1)" />
    <mutant id="mutant_5099" viable="true" in="org.eclipse.jgit.api.RebaseCommand.toAuthorScript(org.eclipse.jgit.lib.PersonIdent)" from="((externalString.lastIndexOf('&gt;')) + 2)" to="(((externalString.lastIndexOf('&gt;')) + 2) * -1)" />
    <mutant id="mutant_5090" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getOrdinal(int)" from="count % 10" to="(count % 10) + 1" />
    <mutant id="mutant_5091" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getOurCommitName()" from="&quot;Upstream, based on &quot; + (Repository.shortenRefName(upstreamCommitName))" to="(&quot;Upstream, based on &quot; + (Repository.shortenRefName(upstreamCommitName))) + 1" />
    <mutant id="mutant_2816" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) != 49) || (!(indexName.endsWith(&quot;.idx&quot;)))" to="!(((indexName.length()) != 49) || (!(indexName.endsWith(&quot;.idx&quot;))))" />
    <mutant id="mutant_5089" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getOrdinal(int)" from="count % 10" to="(count % 10) * -1" />
    <mutant id="mutant_2815" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean)" from="(!createDuplicate) &amp;&amp; (has(id))" to="!((!createDuplicate) &amp;&amp; (has(id)))" />
    <mutant id="mutant_2814" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean)" from="(!createDuplicate) &amp;&amp; (has(id))" to="!((!createDuplicate) &amp;&amp; (has(id)))" />
    <mutant id="mutant_2813" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.getShallowCommits()" from="((shallowFileSnapshot) == null) || (shallowFileSnapshot.isModified(shallowFile))" to="!(((shallowFileSnapshot) == null) || (shallowFileSnapshot.isModified(shallowFile)))" />
    <mutant id="mutant_2812" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.getShallowCommits()" from="((shallowFile) == null) || (!(shallowFile.isFile()))" to="!(((shallowFile) == null) || (!(shallowFile.isFile())))" />
    <mutant id="mutant_2811" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory())) + &quot;]&quot;" to="((&quot;ObjectDirectory[&quot; + (getDirectory())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_2810" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory())) + &quot;]&quot;" to="((&quot;ObjectDirectory[&quot; + (getDirectory())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_1553" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(tmp.length) - p" to="((tmp.length) - p) - 1" />
    <mutant id="mutant_2885" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.idx&quot;)" to="(((&quot;pack-&quot; + name) + &quot;.idx&quot;) * -1)" />
    <mutant id="mutant_1554" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(tmp.length) - p" to="((tmp.length) - p) * -1" />
    <mutant id="mutant_2884" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.idx&quot;)" to="(((&quot;pack-&quot; + name) + &quot;.idx&quot;) - 1)" />
    <mutant id="mutant_1551" viable="false" in="org.eclipse.jgit.lib.FileMode(int,int)" from="((byte)('0' + (mode &amp; 7)))" to="((byte)(('0' + (mode &amp; 7)))) * -1" />
    <mutant id="mutant_2883" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.idx&quot;)" to="(((&quot;pack-&quot; + name) + &quot;.idx&quot;) + 1)" />
    <mutant id="mutant_1552" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(tmp.length) - p" to="((tmp.length) - p) + 1" />
    <mutant id="mutant_2882" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="((&quot;pack-&quot; + name) - 1)" />
    <mutant id="mutant_2881" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="((&quot;pack-&quot; + name) * -1)" />
    <mutant id="mutant_1550" viable="false" in="org.eclipse.jgit.lib.FileMode(int,int)" from="((byte)('0' + (mode &amp; 7)))" to="((byte)(('0' + (mode &amp; 7)))) - 1" />
    <mutant id="mutant_2880" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="((&quot;pack-&quot; + name) + 1)" />
    <mutant id="mutant_1559" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter(org.eclipse.jgit.lib.ProgressMonitor,int)" from="total / 100" to="(total / 100) * -1" />
    <mutant id="mutant_1557" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(p + k)" to="((p + k) - 1)" />
    <mutant id="mutant_2889" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete()))) &amp;&amp; (tmpIdx.exists())" to="!((((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete()))) &amp;&amp; (tmpIdx.exists()))" />
    <mutant id="mutant_1558" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter(org.eclipse.jgit.lib.ProgressMonitor,int)" from="total / 100" to="(total / 100) + 1" />
    <mutant id="mutant_2888" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete())))" to="(!(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete()))))" />
    <mutant id="mutant_1555" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(p + k)" to="((p + k) + 1)" />
    <mutant id="mutant_2887" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir()))) &amp;&amp; (!(packDir.exists()))" to="!(((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir()))) &amp;&amp; (!(packDir.exists())))" />
    <mutant id="mutant_1556" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(p + k)" to="((p + k) * -1)" />
    <mutant id="mutant_2886" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir())))" to="(!((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir()))))" />
    <mutant id="mutant_1542" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="((position + 4) + 1)" />
    <mutant id="mutant_2874" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="((&quot;pack-&quot; + name) + 1)" />
    <mutant id="mutant_1543" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e')) || ((typeString[(position + 4)]) != endMark)" to="!((((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e')) || ((typeString[(position + 4)]) != endMark))" />
    <mutant id="mutant_2873" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(!(keepEmpty)) &amp;&amp; ((getObjectCount()) == 0)" to="!((!(keepEmpty)) &amp;&amp; ((getObjectCount()) == 0))" />
    <mutant id="mutant_1540" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="((position + 4) - 1)" />
    <mutant id="mutant_2872" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((out) != null) &amp;&amp; (out.getChannel().isOpen())" to="!(((out) != null) &amp;&amp; (out.getChannel().isOpen()))" />
    <mutant id="mutant_1541" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="((position + 4) * -1)" />
    <mutant id="mutant_2871" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) + &quot;.idx&quot;)" to="(((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) + &quot;.idx&quot;) * -1)" />
    <mutant id="mutant_2870" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) + &quot;.idx&quot;)" to="(((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) + &quot;.idx&quot;) + 1)" />
    <mutant id="mutant_1548" viable="true" in="org.eclipse.jgit.lib.FileMode$4.equals(int)" from="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) != 0)" to="!(((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) != 0))" />
    <mutant id="mutant_1549" viable="false" in="org.eclipse.jgit.lib.FileMode(int,int)" from="((byte)('0' + (mode &amp; 7)))" to="((byte)(('0' + (mode &amp; 7)))) + 1" />
    <mutant id="mutant_2879" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.pack&quot;)" to="(((&quot;pack-&quot; + name) + &quot;.pack&quot;) - 1)" />
    <mutant id="mutant_1546" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="(position + 5) - 1" />
    <mutant id="mutant_2878" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.pack&quot;)" to="(((&quot;pack-&quot; + name) + &quot;.pack&quot;) * -1)" />
    <mutant id="mutant_1547" viable="true" in="org.eclipse.jgit.lib.FileMode$3.equals(int)" from="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) == 0)" to="!(((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) == 0))" />
    <mutant id="mutant_2877" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.pack&quot;)" to="(((&quot;pack-&quot; + name) + &quot;.pack&quot;) + 1)" />
    <mutant id="mutant_1544" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="(position + 5) + 1" />
    <mutant id="mutant_2876" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="((&quot;pack-&quot; + name) - 1)" />
    <mutant id="mutant_1545" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="(position + 5) * -1" />
    <mutant id="mutant_2875" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="((&quot;pack-&quot; + name) * -1)" />
    <mutant id="mutant_1531" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 4" to="(position + 4) * -1" />
    <mutant id="mutant_2863" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="((p.length()) - (&quot;.pack&quot;.length()))" to="(((p.length()) - (&quot;.pack&quot;.length())) + 1)" />
    <mutant id="mutant_1532" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 4" to="(position + 4) + 1" />
    <mutant id="mutant_2862" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="((p.length()) - (&quot;.pack&quot;.length()))" to="(((p.length()) - (&quot;.pack&quot;.length())) * -1)" />
    <mutant id="mutant_2861" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="((len - 1) + 1)" />
    <mutant id="mutant_1530" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 4" to="(position + 4) - 1" />
    <mutant id="mutant_2860" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="((len - 1) * -1)" />
    <mutant id="mutant_1539" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e'))" to="(!(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e')))" />
    <mutant id="mutant_1537" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="((position + 3) - 1)" />
    <mutant id="mutant_2869" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) + &quot;.idx&quot;)" to="(((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) + &quot;.idx&quot;) - 1)" />
    <mutant id="mutant_1538" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="((position + 3) * -1)" />
    <mutant id="mutant_2868" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(idx.exists()) &amp;&amp; (idx.isFile())" to="!((idx.exists()) &amp;&amp; (idx.isFile()))" />
    <mutant id="mutant_1535" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="((position + 2) + 1)" />
    <mutant id="mutant_2867" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) + &quot;.idx&quot;" to="((p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) + &quot;.idx&quot;) - 1" />
    <mutant id="mutant_1536" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="((position + 3) + 1)" />
    <mutant id="mutant_2866" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) + &quot;.idx&quot;" to="((p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) + &quot;.idx&quot;) * -1" />
    <mutant id="mutant_1533" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="((position + 2) * -1)" />
    <mutant id="mutant_2865" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) + &quot;.idx&quot;" to="((p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) + &quot;.idx&quot;) + 1" />
    <mutant id="mutant_1534" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="((position + 2) - 1)" />
    <mutant id="mutant_2864" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="((p.length()) - (&quot;.pack&quot;.length()))" to="(((p.length()) - (&quot;.pack&quot;.length())) - 1)" />
    <mutant id="mutant_1520" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="((position + 1) - 1)" />
    <mutant id="mutant_2852" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((matches.size()) == oldSize) &amp;&amp; (searchPacksAgain(pList))" to="!(((matches.size()) == oldSize) &amp;&amp; (searchPacksAgain(pList)))" />
    <mutant id="mutant_1521" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="((position + 1) * -1)" />
    <mutant id="mutant_2851" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="((newList.length) - j)" to="(((newList.length) - j) - 1)" />
    <mutant id="mutant_2850" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="((newList.length) - j)" to="(((newList.length) - j) + 1)" />
    <mutant id="mutant_1528" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="((position + 3) * -1)" />
    <mutant id="mutant_1529" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((typeString[(position + 2)]) != 'g') || ((typeString[(position + 3)]) != endMark)" to="!(((typeString[(position + 2)]) != 'g') || ((typeString[(position + 3)]) != endMark))" />
    <mutant id="mutant_2859" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="((len - 1) - 1)" />
    <mutant id="mutant_1526" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="((position + 3) + 1)" />
    <mutant id="mutant_2858" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(fanOut + e)" to="((fanOut + e) + 1)" />
    <mutant id="mutant_1527" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="((position + 3) - 1)" />
    <mutant id="mutant_2857" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(fanOut + e)" to="((fanOut + e) - 1)" />
    <mutant id="mutant_1524" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="((position + 2) - 1)" />
    <mutant id="mutant_2856" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(fanOut + e)" to="((fanOut + e) * -1)" />
    <mutant id="mutant_1525" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="((position + 2) + 1)" />
    <mutant id="mutant_2855" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) - 1)" />
    <mutant id="mutant_1522" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="((position + 1) + 1)" />
    <mutant id="mutant_2854" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) * -1)" />
    <mutant id="mutant_1523" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="((position + 2) * -1)" />
    <mutant id="mutant_2853" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) + 1)" />
    <mutant id="mutant_1597" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty()))" to="(!(((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())))" />
    <mutant id="mutant_1598" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty()))" to="(!((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())))" />
    <mutant id="mutant_1595" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty())) &amp;&amp; (smid.getRemoved().isEmpty())" to="!((((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty())) &amp;&amp; (smid.getRemoved().isEmpty()))" />
    <mutant id="mutant_1596" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((added.isEmpty()) &amp;&amp; (changed.isEmpty()))" to="(!((added.isEmpty()) &amp;&amp; (changed.isEmpty())))" />
    <mutant id="mutant_1593" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty()))" to="(!((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())))" />
    <mutant id="mutant_1594" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty()))" to="(!(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty())))" />
    <mutant id="mutant_1591" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty()))" to="(!((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())))" />
    <mutant id="mutant_1592" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty()))" to="(!(((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())))" />
    <mutant id="mutant_1599" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty()))" to="(!(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty())))" />
    <mutant id="mutant_1590" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty()))" to="(!(((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())))" />
    <mutant id="mutant_1586" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator))))" to="(!((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator)))))" />
    <mutant id="mutant_1587" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" to="(!(((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY))))" />
    <mutant id="mutant_1584" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(workingTreeIterator != null) &amp;&amp; (!(workingTreeIterator.isEntryIgnored()))" to="!((workingTreeIterator != null) &amp;&amp; (!(workingTreeIterator.isEntryIgnored())))" />
    <mutant id="mutant_1585" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="!((!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)))" />
    <mutant id="mutant_1582" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(treeIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="!((!(isEntryGitLink(treeIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)))" />
    <mutant id="mutant_1583" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="!((!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)))" />
    <mutant id="mutant_1580" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator))))" to="(!((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator)))))" />
    <mutant id="mutant_1581" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator)))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="!(((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator)))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)))" />
    <mutant id="mutant_1588" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator)))) || (((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" to="!(((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator)))) || (((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY))))" />
    <mutant id="mutant_1589" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(subHead != null) &amp;&amp; (!(subHead.equals(smw.getObjectId())))" to="!((subHead != null) &amp;&amp; (!(subHead.equals(smw.getObjectId()))))" />
    <mutant id="mutant_1575" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estWorkTreeSize * 10)" to="((estWorkTreeSize * 10) * -1)" />
    <mutant id="mutant_1576" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estWorkTreeSize * 10) / 9)" to="(((estWorkTreeSize * 10) / 9) * -1)" />
    <mutant id="mutant_1573" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estWorkTreeSize * 10)" to="((estWorkTreeSize * 10) + 1)" />
    <mutant id="mutant_1574" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estWorkTreeSize * 10)" to="((estWorkTreeSize * 10) - 1)" />
    <mutant id="mutant_1571" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estIndexSize * 10) / 9)" to="(((estIndexSize * 10) / 9) + 1)" />
    <mutant id="mutant_1572" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estIndexSize * 10) / 9)" to="(((estIndexSize * 10) / 9) * -1)" />
    <mutant id="mutant_1570" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estIndexSize * 10) / 9)" to="(((estIndexSize * 10) / 9) - 1)" />
    <mutant id="mutant_1579" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(treeIterator.idEqual(dirCacheIterator))) || ((treeIterator.getEntryRawMode()) != (dirCacheIterator.getEntryRawMode()))" to="!((!(treeIterator.idEqual(dirCacheIterator))) || ((treeIterator.getEntryRawMode()) != (dirCacheIterator.getEntryRawMode())))" />
    <mutant id="mutant_1577" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estWorkTreeSize * 10) / 9)" to="(((estWorkTreeSize * 10) / 9) - 1)" />
    <mutant id="mutant_1578" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estWorkTreeSize * 10) / 9)" to="(((estWorkTreeSize * 10) / 9) + 1)" />
    <mutant id="mutant_1564" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.clone()" from="(&quot;Do not clone this kind of filter: &quot; + (getClass().getName()))" to="((&quot;Do not clone this kind of filter: &quot; + (getClass().getName())) + 1)" />
    <mutant id="mutant_2896" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder(java.util.List)" from="((byOffset.length) / 64)" to="(((byOffset.length) / 64) * -1)" />
    <mutant id="mutant_1565" viable="false" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.clone()" from="(&quot;Do not clone this kind of filter: &quot; + (getClass().getName()))" to="((&quot;Do not clone this kind of filter: &quot; + (getClass().getName())) - 1)" />
    <mutant id="mutant_2895" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(!(Arrays.equals(origDigest.digest(), origHash))) || (!(Arrays.equals(tailDigest2.digest(), this.tailDigest.digest())))" to="!((!(Arrays.equals(origDigest.digest(), origHash))) || (!(Arrays.equals(tailDigest2.digest(), this.tailDigest.digest()))))" />
    <mutant id="mutant_1562" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((count) % (stepSize))" to="(((count) % (stepSize)) + 1)" />
    <mutant id="mutant_2894" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(n - origCnt)" to="((n - origCnt) - 1)" />
    <mutant id="mutant_1563" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((count) % (stepSize))" to="(((count) % (stepSize)) - 1)" />
    <mutant id="mutant_2893" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(n - origCnt)" to="((n - origCnt) * -1)" />
    <mutant id="mutant_1560" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter(org.eclipse.jgit.lib.ProgressMonitor,int)" from="total / 100" to="(total / 100) - 1" />
    <mutant id="mutant_2892" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(n - origCnt)" to="((n - origCnt) + 1)" />
    <mutant id="mutant_1561" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((count) % (stepSize))" to="(((count) % (stepSize)) * -1)" />
    <mutant id="mutant_2891" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete()))) &amp;&amp; (tmpPack.exists())" to="!((((tmpPack) != null) &amp;&amp; (!(tmpPack.delete()))) &amp;&amp; (tmpPack.exists()))" />
    <mutant id="mutant_2890" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete())))" to="(!(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete()))))" />
    <mutant id="mutant_1568" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estIndexSize * 10)" to="((estIndexSize * 10) + 1)" />
    <mutant id="mutant_1569" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estIndexSize * 10)" to="((estIndexSize * 10) - 1)" />
    <mutant id="mutant_2899" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2.iterator()" from="(byAddOrder.size()) - 1" to="((byAddOrder.size()) - 1) * -1" />
    <mutant id="mutant_1566" viable="false" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.clone()" from="(&quot;Do not clone this kind of filter: &quot; + (getClass().getName()))" to="((&quot;Do not clone this kind of filter: &quot; + (getClass().getName())) * -1)" />
    <mutant id="mutant_2898" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder(java.util.List)" from="((byOffset.length) / 64)" to="(((byOffset.length) / 64) + 1)" />
    <mutant id="mutant_1567" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estIndexSize * 10)" to="((estIndexSize * 10) * -1)" />
    <mutant id="mutant_2897" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder(java.util.List)" from="((byOffset.length) / 64)" to="(((byOffset.length) / 64) - 1)" />
    <mutant id="mutant_8827" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_8826" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_8829" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;hour&quot;.equals(parts[(i + 1)])) || (&quot;hours&quot;.equals(parts[(i + 1)]))" to="!((&quot;hour&quot;.equals(parts[(i + 1)])) || (&quot;hours&quot;.equals(parts[(i + 1)])))" />
    <mutant id="mutant_8828" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_8821" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_8820" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_8823" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_8822" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;day&quot;.equals(parts[(i + 1)])) || (&quot;days&quot;.equals(parts[(i + 1)]))" to="!((&quot;day&quot;.equals(parts[(i + 1)])) || (&quot;days&quot;.equals(parts[(i + 1)])))" />
    <mutant id="mutant_8825" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_8824" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_8816" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_8815" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;week&quot;.equals(parts[(i + 1)])) || (&quot;weeks&quot;.equals(parts[(i + 1)]))" to="!((&quot;week&quot;.equals(parts[(i + 1)])) || (&quot;weeks&quot;.equals(parts[(i + 1)])))" />
    <mutant id="mutant_8818" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_8817" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_8819" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_8810" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_8812" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_8811" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_8814" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_8813" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_8805" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_8804" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_8807" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_8806" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_8809" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_8808" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;month&quot;.equals(parts[(i + 1)])) || (&quot;months&quot;.equals(parts[(i + 1)]))" to="!((&quot;month&quot;.equals(parts[(i + 1)])) || (&quot;months&quot;.equals(parts[(i + 1)])))" />
    <mutant id="mutant_8801" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;year&quot;.equals(parts[(i + 1)])) || (&quot;years&quot;.equals(parts[(i + 1)]))" to="!((&quot;year&quot;.equals(parts[(i + 1)])) || (&quot;years&quot;.equals(parts[(i + 1)])))" />
    <mutant id="mutant_8800" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_8803" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_8802" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_8870" viable="true" in="org.eclipse.jgit.util.IO.readWholeStream(java.io.InputStream,int)" from="((out.length) - pos)" to="(((out.length) - pos) + 1)" />
    <mutant id="mutant_7541" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.CONFIG))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.CONFIG)) + 1)" />
    <mutant id="mutant_8872" viable="true" in="org.eclipse.jgit.util.IO.readWholeStream(java.io.InputStream,int)" from="((out.length) - pos)" to="(((out.length) - pos) * -1)" />
    <mutant id="mutant_6210" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="(((timeout) * 1000) * -1)" />
    <mutant id="mutant_7540" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.CONFIG))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.CONFIG)) * -1)" />
    <mutant id="mutant_8871" viable="true" in="org.eclipse.jgit.util.IO.readWholeStream(java.io.InputStream,int)" from="((out.length) - pos)" to="(((out.length) - pos) - 1)" />
    <mutant id="mutant_6208" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="(((timeout) * 1000) - 1)" />
    <mutant id="mutant_6209" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="(((timeout) * 1000) + 1)" />
    <mutant id="mutant_7539" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.CONFIG))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.CONFIG)) - 1)" />
    <mutant id="mutant_6200" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(providedObjects.contains(c)))" to="!(((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(providedObjects.contains(c))))" />
    <mutant id="mutant_7532" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) + &quot;\n&quot;" to="((&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) + &quot;\n&quot;) * -1" />
    <mutant id="mutant_8863" viable="true" in="org.eclipse.jgit.util.IO.readSome(java.io.File,int)" from="((buf.length) - cnt)" to="(((buf.length) - cnt) * -1)" />
    <mutant id="mutant_6201" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(db.hasObject(o)))" to="!((o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(db.hasObject(o))))" />
    <mutant id="mutant_7531" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) + &quot;\n&quot;" to="((&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) + &quot;\n&quot;) - 1" />
    <mutant id="mutant_8862" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) - valid)" to="(((buf.length) - valid) - 1)" />
    <mutant id="mutant_6202" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.close()" from="(!(sideBand)) &amp;&amp; ((msgOut) != null)" to="!((!(sideBand)) &amp;&amp; ((msgOut) != null))" />
    <mutant id="mutant_7534" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD)) - 1)" />
    <mutant id="mutant_8865" viable="true" in="org.eclipse.jgit.util.IO.readSome(java.io.File,int)" from="((buf.length) - cnt)" to="(((buf.length) - cnt) - 1)" />
    <mutant id="mutant_6203" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.enableCapabilities()" from="(allowQuiet) &amp;&amp; (isCapabilityEnabled(org.eclipse.jgit.transport.GitProtocolConstants.CAPABILITY_QUIET))" to="!((allowQuiet) &amp;&amp; (isCapabilityEnabled(org.eclipse.jgit.transport.GitProtocolConstants.CAPABILITY_QUIET)))" />
    <mutant id="mutant_7533" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD)) * -1)" />
    <mutant id="mutant_8864" viable="true" in="org.eclipse.jgit.util.IO.readSome(java.io.File,int)" from="((buf.length) - cnt)" to="(((buf.length) - cnt) + 1)" />
    <mutant id="mutant_6204" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="(((caller.getName()) + &quot;-Timer&quot;) * -1)" />
    <mutant id="mutant_7536" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="&quot;[core]\n&quot; + &quot;\trepositoryformatversion = 0\n&quot;" to="(&quot;[core]\n&quot; + &quot;\trepositoryformatversion = 0\n&quot;) * -1" />
    <mutant id="mutant_8867" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((dst.length) - off)" to="(((dst.length) - off) - 1)" />
    <mutant id="mutant_6205" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="(((caller.getName()) + &quot;-Timer&quot;) - 1)" />
    <mutant id="mutant_7535" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD)) + 1)" />
    <mutant id="mutant_8866" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((dst.length) - off)" to="(((dst.length) - off) * -1)" />
    <mutant id="mutant_6206" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="(((caller.getName()) + &quot;-Timer&quot;) + 1)" />
    <mutant id="mutant_7538" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="&quot;[core]\n&quot; + &quot;\trepositoryformatversion = 0\n&quot;" to="(&quot;[core]\n&quot; + &quot;\trepositoryformatversion = 0\n&quot;) + 1" />
    <mutant id="mutant_8869" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((r = fd.read(dst, off, ((dst.length) - off))) &gt;= 0) &amp;&amp; (len &lt; (dst.length))" to="!(((r = fd.read(dst, off, ((dst.length) - off))) &gt;= 0) &amp;&amp; (len &lt; (dst.length)))" />
    <mutant id="mutant_6207" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="(((timeout) * 1000) * -1)" />
    <mutant id="mutant_7537" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="&quot;[core]\n&quot; + &quot;\trepositoryformatversion = 0\n&quot;" to="(&quot;[core]\n&quot; + &quot;\trepositoryformatversion = 0\n&quot;) - 1" />
    <mutant id="mutant_8868" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((dst.length) - off)" to="(((dst.length) - off) + 1)" />
    <mutant id="mutant_7530" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) + &quot;\n&quot;" to="((&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) + &quot;\n&quot;) + 1" />
    <mutant id="mutant_8861" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) - valid)" to="(((buf.length) - valid) * -1)" />
    <mutant id="mutant_8860" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) - valid)" to="(((buf.length) - valid) + 1)" />
    <mutant id="mutant_7529" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates)))" to="((&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) - 1)" />
    <mutant id="mutant_7528" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates)))" to="((&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) * -1)" />
    <mutant id="mutant_8859" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) * 2)" to="(((buf.length) * 2) + 1)" />
    <mutant id="mutant_7521" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.markLocalCommitsComplete(int)" from="(c == null) || ((c.getCommitTime()) &lt; until)" to="!((c == null) || ((c.getCommitTime()) &lt; until))" />
    <mutant id="mutant_8852" viable="true" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="(((ce.getMessage()) + &quot; &quot;) + 1)" />
    <mutant id="mutant_7520" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(failures != null) &amp;&amp; (!(failures.isEmpty()))" to="!((failures != null) &amp;&amp; (!(failures.isEmpty())))" />
    <mutant id="mutant_8851" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="(((ce.getMessage()) + &quot; &quot;) - 1)" />
    <mutant id="mutant_7523" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.isNewRepository()" from="((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null)) &amp;&amp; (packNames.isEmpty())" to="!(((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null)) &amp;&amp; (packNames.isEmpty()))" />
    <mutant id="mutant_8854" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="((((ce.getMessage()) + &quot; &quot;) + host) * -1)" />
    <mutant id="mutant_7522" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.isNewRepository()" from="((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null))" to="(!((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null)))" />
    <mutant id="mutant_8853" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="((((ce.getMessage()) + &quot; &quot;) + host) - 1)" />
    <mutant id="mutant_7525" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(java.util.List)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="(((Constants.R_HEADS) + (Constants.MASTER)) + 1)" />
    <mutant id="mutant_8856" viable="true" in="org.eclipse.jgit.util.HttpSupport.encode(java.lang.StringBuilder,java.lang.String)" from="(key == null) || ((key.length()) == 0)" to="!((key == null) || ((key.length()) == 0))" />
    <mutant id="mutant_7524" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(java.util.List)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="(((Constants.R_HEADS) + (Constants.MASTER)) - 1)" />
    <mutant id="mutant_8855" viable="true" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="((((ce.getMessage()) + &quot; &quot;) + host) + 1)" />
    <mutant id="mutant_7527" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates)))" to="((&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) + 1)" />
    <mutant id="mutant_8858" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) * 2)" to="(((buf.length) * 2) * -1)" />
    <mutant id="mutant_7526" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(java.util.List)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="(((Constants.R_HEADS) + (Constants.MASTER)) * -1)" />
    <mutant id="mutant_8857" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) * 2)" to="(((buf.length) * 2) - 1)" />
    <mutant id="mutant_8850" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="(((ce.getMessage()) + &quot; &quot;) * -1)" />
    <mutant id="mutant_7518" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(packNameList == null) || (packNameList.isEmpty())" to="!((packNameList == null) || (packNameList.isEmpty()))" />
    <mutant id="mutant_8849" viable="true" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="((((ce.getMessage()) + &quot; &quot;) + host) + 1)" />
    <mutant id="mutant_7517" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;) + file" to="((subdir + &quot;/&quot;) + file) * -1" />
    <mutant id="mutant_8848" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="((((ce.getMessage()) + &quot; &quot;) + host) * -1)" />
    <mutant id="mutant_7519" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(al != null) &amp;&amp; (!(al.isEmpty()))" to="!((al != null) &amp;&amp; (!(al.isEmpty())))" />
    <mutant id="mutant_7510" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.doFetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.util.Set)" from="(!(monitor.isCancelled())) &amp;&amp; (!(workQueue.isEmpty()))" to="!((!(monitor.isCancelled())) &amp;&amp; (!(workQueue.isEmpty())))" />
    <mutant id="mutant_8841" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_8840" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_7512" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;)" to="((subdir + &quot;/&quot;) - 1)" />
    <mutant id="mutant_8843" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;second&quot;.equals(parts[(i + 1)])) || (&quot;seconds&quot;.equals(parts[(i + 1)]))" to="!((&quot;second&quot;.equals(parts[(i + 1)])) || (&quot;seconds&quot;.equals(parts[(i + 1)])))" />
    <mutant id="mutant_7511" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.doFetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.util.Set)" from="(!(id instanceof RevObject)) || (!(((RevObject)(id)).has(COMPLETE)))" to="!((!(id instanceof RevObject)) || (!(((RevObject)(id)).has(COMPLETE))))" />
    <mutant id="mutant_8842" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_7514" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;)" to="((subdir + &quot;/&quot;) * -1)" />
    <mutant id="mutant_8845" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="(((ce.getMessage()) + &quot; &quot;) - 1)" />
    <mutant id="mutant_7513" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;)" to="((subdir + &quot;/&quot;) + 1)" />
    <mutant id="mutant_8844" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="(((ce.getMessage()) + &quot; &quot;) * -1)" />
    <mutant id="mutant_7516" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;) + file" to="((subdir + &quot;/&quot;) + file) - 1" />
    <mutant id="mutant_8847" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="((((ce.getMessage()) + &quot; &quot;) + host) - 1)" />
    <mutant id="mutant_7515" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;) + file" to="((subdir + &quot;/&quot;) + file) + 1" />
    <mutant id="mutant_8846" viable="true" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="(((ce.getMessage()) + &quot; &quot;) + 1)" />
    <mutant id="mutant_7507" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="((cnt / 1024) - 1)" />
    <mutant id="mutant_8838" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_7506" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="((cnt / 1024) * -1)" />
    <mutant id="mutant_8837" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_7509" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.expandOneAlternate(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ProgressMonitor)" from="(altList != null) &amp;&amp; (!(altList.isEmpty()))" to="!((altList != null) &amp;&amp; (!(altList.isEmpty())))" />
    <mutant id="mutant_7508" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(packItr.hasNext()) &amp;&amp; (!(monitor.isCancelled()))" to="!((packItr.hasNext()) &amp;&amp; (!(monitor.isCancelled())))" />
    <mutant id="mutant_8839" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_8830" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_7501" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((int)((s.length) / 1024))" to="((int)(((s.length) / 1024))) * -1" />
    <mutant id="mutant_8832" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_7500" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;Get &quot; + (idxName.substring(0, 12))) + &quot;..idx&quot;)" to="(((&quot;Get &quot; + (idxName.substring(0, 12))) + &quot;..idx&quot;) + 1)" />
    <mutant id="mutant_8831" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_7503" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((int)((s.length) / 1024))" to="((int)(((s.length) / 1024))) - 1" />
    <mutant id="mutant_8834" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_7502" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((int)((s.length) / 1024))" to="((int)(((s.length) / 1024))) + 1" />
    <mutant id="mutant_8833" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_7505" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="((cnt / 1024) + 1)" />
    <mutant id="mutant_8836" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;minute&quot;.equals(parts[(i + 1)])) || (&quot;minutes&quot;.equals(parts[(i + 1)]))" to="!((&quot;minute&quot;.equals(parts[(i + 1)])) || (&quot;minutes&quot;.equals(parts[(i + 1)])))" />
    <mutant id="mutant_7504" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(!(pm.isCancelled())) &amp;&amp; ((cnt = s.in.read(buf)) &gt;= 0)" to="!((!(pm.isCancelled())) &amp;&amp; ((cnt = s.in.read(buf)) &gt;= 0))" />
    <mutant id="mutant_8835" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_7581" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;)" to="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) + 1)" />
    <mutant id="mutant_6250" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="((&quot;ng &quot; + (cmd.getRefName())) + &quot; n/a (unpacker error)&quot;)" to="(((&quot;ng &quot; + (cmd.getRefName())) + &quot; n/a (unpacker error)&quot;) - 1)" />
    <mutant id="mutant_7580" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;)" to="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) * -1)" />
    <mutant id="mutant_6251" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="((&quot;ng &quot; + (cmd.getRefName())) + &quot; n/a (unpacker error)&quot;)" to="(((&quot;ng &quot; + (cmd.getRefName())) + &quot; n/a (unpacker error)&quot;) + 1)" />
    <mutant id="mutant_7583" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) + name)" to="(((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) + name) - 1)" />
    <mutant id="mutant_6252" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ok &quot; + (cmd.getRefName()))" to="((&quot;ok &quot; + (cmd.getRefName())) * -1)" />
    <mutant id="mutant_7582" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;)" to="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) - 1)" />
    <mutant id="mutant_6253" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ok &quot; + (cmd.getRefName()))" to="((&quot;ok &quot; + (cmd.getRefName())) - 1)" />
    <mutant id="mutant_7585" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) + name)" to="(((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) + name) + 1)" />
    <mutant id="mutant_6254" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ok &quot; + (cmd.getRefName()))" to="((&quot;ok &quot; + (cmd.getRefName())) + 1)" />
    <mutant id="mutant_7584" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) + name)" to="(((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) + name) * -1)" />
    <mutant id="mutant_6244" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;unpack error &quot; + (unpackError.getMessage()))" to="((&quot;unpack error &quot; + (unpackError.getMessage())) - 1)" />
    <mutant id="mutant_7576" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRef(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + name) * -1)" />
    <mutant id="mutant_6245" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;unpack error &quot; + (unpackError.getMessage()))" to="((&quot;unpack error &quot; + (unpackError.getMessage())) + 1)" />
    <mutant id="mutant_7575" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRef(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + name) + 1)" />
    <mutant id="mutant_6246" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ng &quot; + (cmd.getRefName()))" to="((&quot;ng &quot; + (cmd.getRefName())) - 1)" />
    <mutant id="mutant_7578" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) * -1)" />
    <mutant id="mutant_6247" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ng &quot; + (cmd.getRefName()))" to="((&quot;ng &quot; + (cmd.getRefName())) * -1)" />
    <mutant id="mutant_7577" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + 1)" />
    <mutant id="mutant_6248" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ng &quot; + (cmd.getRefName()))" to="((&quot;ng &quot; + (cmd.getRefName())) + 1)" />
    <mutant id="mutant_6249" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="((&quot;ng &quot; + (cmd.getRefName())) + &quot; n/a (unpacker error)&quot;)" to="(((&quot;ng &quot; + (cmd.getRefName())) + &quot; n/a (unpacker error)&quot;) * -1)" />
    <mutant id="mutant_7579" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) - 1)" />
    <mutant id="mutant_7570" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..idx&quot;)" to="((wt + &quot;..idx&quot;) * -1)" />
    <mutant id="mutant_6240" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="((what + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_7572" viable="false" in="?" from="(WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.INFO_REFS)" to="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.INFO_REFS)) + 1" />
    <mutant id="mutant_6241" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="((what + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_7571" viable="false" in="?" from="(WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.INFO_REFS)" to="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.INFO_REFS)) * -1" />
    <mutant id="mutant_6242" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="((what + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_7574" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRef(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + name) - 1)" />
    <mutant id="mutant_6243" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;unpack error &quot; + (unpackError.getMessage()))" to="((&quot;unpack error &quot; + (unpackError.getMessage())) * -1)" />
    <mutant id="mutant_7573" viable="false" in="?" from="(WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.INFO_REFS)" to="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.INFO_REFS)) - 1" />
    <mutant id="mutant_6233" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="((&quot;ERR &quot; + (fail.getMessage())) * -1)" />
    <mutant id="mutant_7565" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..pack&quot;)" to="((wt + &quot;..pack&quot;) - 1)" />
    <mutant id="mutant_8896" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &gt;&gt;&gt; 1) - (b &gt;&gt;&gt; 1)" to="((a &gt;&gt;&gt; 1) - (b &gt;&gt;&gt; 1)) * -1" />
    <mutant id="mutant_6234" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="(&quot;error: &quot; + what)" to="((&quot;error: &quot; + what) + 1)" />
    <mutant id="mutant_7564" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;Put &quot; + (base.substring(0, 12))" to="(&quot;Put &quot; + (base.substring(0, 12))) - 1" />
    <mutant id="mutant_8895" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &gt;&gt;&gt; 1) - (b &gt;&gt;&gt; 1)" to="((a &gt;&gt;&gt; 1) - (b &gt;&gt;&gt; 1)) - 1" />
    <mutant id="mutant_6235" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="(&quot;error: &quot; + what)" to="((&quot;error: &quot; + what) - 1)" />
    <mutant id="mutant_7567" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..pack&quot;)" to="((wt + &quot;..pack&quot;) * -1)" />
    <mutant id="mutant_8898" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &amp; 1) - (b &amp; 1)" to="((a &amp; 1) - (b &amp; 1)) - 1" />
    <mutant id="mutant_6236" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="(&quot;error: &quot; + what)" to="((&quot;error: &quot; + what) * -1)" />
    <mutant id="mutant_7566" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..pack&quot;)" to="((wt + &quot;..pack&quot;) + 1)" />
    <mutant id="mutant_8897" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &amp; 1) - (b &amp; 1)" to="((a &amp; 1) - (b &amp; 1)) + 1" />
    <mutant id="mutant_6237" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="((&quot;error: &quot; + what) + &quot;\n&quot;)" to="(((&quot;error: &quot; + what) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_7569" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..idx&quot;)" to="((wt + &quot;..idx&quot;) + 1)" />
    <mutant id="mutant_6238" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="((&quot;error: &quot; + what) + &quot;\n&quot;)" to="(((&quot;error: &quot; + what) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_7568" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..idx&quot;)" to="((wt + &quot;..idx&quot;) - 1)" />
    <mutant id="mutant_8899" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &amp; 1) - (b &amp; 1)" to="((a &amp; 1) - (b &amp; 1)) * -1" />
    <mutant id="mutant_6239" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="((&quot;error: &quot; + what) + &quot;\n&quot;)" to="(((&quot;error: &quot; + what) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_8890" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3)" to="((((entries.length) + 16) * 3) - 1)" />
    <mutant id="mutant_7561" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base) + &quot;.idx&quot;" to="((&quot;pack/&quot; + base) + &quot;.idx&quot;) * -1" />
    <mutant id="mutant_8892" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3) / 2" to="((((entries.length) + 16) * 3) / 2) + 1" />
    <mutant id="mutant_6230" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (advertiseError))" to="((&quot;ERR &quot; + (advertiseError)) * -1)" />
    <mutant id="mutant_7560" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base) + &quot;.idx&quot;" to="((&quot;pack/&quot; + base) + &quot;.idx&quot;) - 1" />
    <mutant id="mutant_8891" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3) / 2" to="((((entries.length) + 16) * 3) / 2) * -1" />
    <mutant id="mutant_6231" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="((&quot;ERR &quot; + (fail.getMessage())) - 1)" />
    <mutant id="mutant_7563" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;Put &quot; + (base.substring(0, 12))" to="(&quot;Put &quot; + (base.substring(0, 12))) * -1" />
    <mutant id="mutant_8894" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &gt;&gt;&gt; 1) - (b &gt;&gt;&gt; 1)" to="((a &gt;&gt;&gt; 1) - (b &gt;&gt;&gt; 1)) + 1" />
    <mutant id="mutant_6232" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="((&quot;ERR &quot; + (fail.getMessage())) + 1)" />
    <mutant id="mutant_7562" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;Put &quot; + (base.substring(0, 12))" to="(&quot;Put &quot; + (base.substring(0, 12))) + 1" />
    <mutant id="mutant_8893" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3) / 2" to="((((entries.length) + 16) * 3) / 2) - 1" />
    <mutant id="mutant_6222" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="&quot; from &quot; + (getRefLogIdent().toExternalString())" to="(&quot; from &quot; + (getRefLogIdent().toExternalString())) * -1" />
    <mutant id="mutant_7554" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + packName" to="(&quot;pack/&quot; + packName) - 1" />
    <mutant id="mutant_8885" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="((entries.length) + 16)" to="(((entries.length) + 16) + 1)" />
    <mutant id="mutant_6223" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((!(biDirectionalPipe)) &amp;&amp; (!(isExpectDataAfterPackFooter())))" to="!((!(biDirectionalPipe)) &amp;&amp; (!(isExpectDataAfterPackFooter())))" />
    <mutant id="mutant_7553" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + packName" to="(&quot;pack/&quot; + packName) + 1" />
    <mutant id="mutant_8884" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3) / 2" to="((((entries.length) + 16) * 3) / 2) - 1" />
    <mutant id="mutant_6224" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((timeout) * 1000)" to="(((timeout) * 1000) * -1)" />
    <mutant id="mutant_7556" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base)" to="((&quot;pack/&quot; + base) * -1)" />
    <mutant id="mutant_8887" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="((entries.length) + 16)" to="(((entries.length) + 16) - 1)" />
    <mutant id="mutant_6225" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((timeout) * 1000)" to="(((timeout) * 1000) - 1)" />
    <mutant id="mutant_7555" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + packName" to="(&quot;pack/&quot; + packName) * -1" />
    <mutant id="mutant_8886" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="((entries.length) + 16)" to="(((entries.length) + 16) * -1)" />
    <mutant id="mutant_6226" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((timeout) * 1000)" to="(((timeout) * 1000) + 1)" />
    <mutant id="mutant_7558" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base)" to="((&quot;pack/&quot; + base) + 1)" />
    <mutant id="mutant_8889" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3)" to="((((entries.length) + 16) * 3) * -1)" />
    <mutant id="mutant_6227" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.recvCommands()" from="((line.length()) &gt;= 48) &amp;&amp; (line.startsWith(&quot;shallow &quot;))" to="!(((line.length()) &gt;= 48) &amp;&amp; (line.startsWith(&quot;shallow &quot;)))" />
    <mutant id="mutant_7557" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base)" to="((&quot;pack/&quot; + base) - 1)" />
    <mutant id="mutant_8888" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3)" to="((((entries.length) + 16) * 3) + 1)" />
    <mutant id="mutant_6228" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (advertiseError))" to="((&quot;ERR &quot; + (advertiseError)) - 1)" />
    <mutant id="mutant_6229" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (advertiseError))" to="((&quot;ERR &quot; + (advertiseError)) + 1)" />
    <mutant id="mutant_7559" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base) + &quot;.idx&quot;" to="((&quot;pack/&quot; + base) + &quot;.idx&quot;) + 1" />
    <mutant id="mutant_7550" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="base + &quot;.pack&quot;" to="(base + &quot;.pack&quot;) * -1" />
    <mutant id="mutant_8881" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3)" to="((((entries.length) + 16) * 3) - 1)" />
    <mutant id="mutant_8880" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3)" to="((((entries.length) + 16) * 3) * -1)" />
    <mutant id="mutant_6220" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="&quot; from &quot; + (getRefLogIdent().toExternalString())" to="(&quot; from &quot; + (getRefLogIdent().toExternalString())) + 1" />
    <mutant id="mutant_7552" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="base + &quot;.pack&quot;" to="(base + &quot;.pack&quot;) - 1" />
    <mutant id="mutant_8883" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3) / 2" to="((((entries.length) + 16) * 3) / 2) + 1" />
    <mutant id="mutant_6221" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="&quot; from &quot; + (getRefLogIdent().toExternalString())" to="(&quot; from &quot; + (getRefLogIdent().toExternalString())) - 1" />
    <mutant id="mutant_7551" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="base + &quot;.pack&quot;" to="(base + &quot;.pack&quot;) + 1" />
    <mutant id="mutant_8882" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3) / 2" to="((((entries.length) + 16) * 3) / 2) * -1" />
    <mutant id="mutant_6219" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(sideBand) &amp;&amp; (!(quiet))" to="!((sideBand) &amp;&amp; (!(quiet)))" />
    <mutant id="mutant_6211" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="(((timeout) * 1000) - 1)" />
    <mutant id="mutant_7543" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)" from="(!(updates.isEmpty())) &amp;&amp; (isNewRepository())" to="!((!(updates.isEmpty())) &amp;&amp; (isNewRepository()))" />
    <mutant id="mutant_8874" viable="true" in="org.eclipse.jgit.util.IO.readLines(java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_6212" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="(((timeout) * 1000) + 1)" />
    <mutant id="mutant_7542" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)" from="(!(n.startsWith(&quot;refs/&quot;))) || (!(Repository.isValidRefName(n)))" to="!((!(n.startsWith(&quot;refs/&quot;))) || (!(Repository.isValidRefName(n))))" />
    <mutant id="mutant_8873" viable="true" in="org.eclipse.jgit.util.IO.readLines(java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_6213" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(10 * (timeout))" to="((10 * (timeout)) + 1)" />
    <mutant id="mutant_7545" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection$1.writeFile(java.lang.String,byte[])" from="((WalkRemoteObjectDatabase.ROOT_DIR) + file)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + file) * -1)" />
    <mutant id="mutant_8876" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="((entries.length) + 16)" to="(((entries.length) + 16) + 1)" />
    <mutant id="mutant_6214" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(10 * (timeout))" to="((10 * (timeout)) - 1)" />
    <mutant id="mutant_7544" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection$1.writeFile(java.lang.String,byte[])" from="((WalkRemoteObjectDatabase.ROOT_DIR) + file)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + file) + 1)" />
    <mutant id="mutant_8875" viable="true" in="org.eclipse.jgit.util.IO.readLines(java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_6215" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(10 * (timeout))" to="((10 * (timeout)) * -1)" />
    <mutant id="mutant_7547" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack-&quot; + (writer.computeName().name())" to="(&quot;pack-&quot; + (writer.computeName().name())) - 1" />
    <mutant id="mutant_8878" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="((entries.length) + 16)" to="(((entries.length) + 16) - 1)" />
    <mutant id="mutant_6216" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((10 * (timeout)) * 1000)" to="(((10 * (timeout)) * 1000) + 1)" />
    <mutant id="mutant_7546" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection$1.writeFile(java.lang.String,byte[])" from="((WalkRemoteObjectDatabase.ROOT_DIR) + file)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + file) - 1)" />
    <mutant id="mutant_8877" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="((entries.length) + 16)" to="(((entries.length) + 16) * -1)" />
    <mutant id="mutant_6217" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((10 * (timeout)) * 1000)" to="(((10 * (timeout)) * 1000) - 1)" />
    <mutant id="mutant_7549" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack-&quot; + (writer.computeName().name())" to="(&quot;pack-&quot; + (writer.computeName().name())) + 1" />
    <mutant id="mutant_6218" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((10 * (timeout)) * 1000)" to="(((10 * (timeout)) * 1000) * -1)" />
    <mutant id="mutant_7548" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack-&quot; + (writer.computeName().name())" to="(&quot;pack-&quot; + (writer.computeName().name())) * -1" />
    <mutant id="mutant_8879" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3)" to="((((entries.length) + 16) * 3) + 1)" />
    <mutant id="mutant_6291" viable="false" in="org.eclipse.jgit.transport.DaemonService(java.lang.String,java.lang.String)" from="&quot;git-&quot; + cmdName" to="(&quot;git-&quot; + cmdName) - 1" />
    <mutant id="mutant_6292" viable="true" in="org.eclipse.jgit.transport.DaemonService(java.lang.String,java.lang.String)" from="&quot;git-&quot; + cmdName" to="(&quot;git-&quot; + cmdName) + 1" />
    <mutant id="mutant_6293" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((command.length()) + 1)" to="(((command.length()) + 1) - 1)" />
    <mutant id="mutant_6294" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((command.length()) + 1)" to="(((command.length()) + 1) * -1)" />
    <mutant id="mutant_6295" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((command.length()) + 1)" to="(((command.length()) + 1) + 1)" />
    <mutant id="mutant_6296" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' '))" to="(!((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' ')))" />
    <mutant id="mutant_6297" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' ')) &amp;&amp; (commandLine.startsWith(command))" to="!(((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' ')) &amp;&amp; (commandLine.startsWith(command)))" />
    <mutant id="mutant_6298" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((command.length()) + 1)" to="(((command.length()) + 1) - 1)" />
    <mutant id="mutant_6290" viable="false" in="org.eclipse.jgit.transport.DaemonService(java.lang.String,java.lang.String)" from="&quot;git-&quot; + cmdName" to="(&quot;git-&quot; + cmdName) * -1" />
    <mutant id="mutant_6288" viable="true" in="org.eclipse.jgit.transport.DaemonClient.execute(java.net.Socket)" from="((daemon.getTimeout()) * 1000)" to="(((daemon.getTimeout()) * 1000) * -1)" />
    <mutant id="mutant_6289" viable="true" in="org.eclipse.jgit.transport.DaemonClient.execute(java.net.Socket)" from="((daemon.getTimeout()) * 1000)" to="(((daemon.getTimeout()) * 1000) + 1)" />
    <mutant id="mutant_6280" viable="true" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;) + host" to="((name + &quot;@&quot;) + host) + 1" />
    <mutant id="mutant_6281" viable="false" in="org.eclipse.jgit.transport.Daemon.getService(java.lang.String)" from="&quot;git-&quot; + name" to="(&quot;git-&quot; + name) * -1" />
    <mutant id="mutant_6282" viable="false" in="org.eclipse.jgit.transport.Daemon.getService(java.lang.String)" from="&quot;git-&quot; + name" to="(&quot;git-&quot; + name) - 1" />
    <mutant id="mutant_6283" viable="true" in="org.eclipse.jgit.transport.Daemon.getService(java.lang.String)" from="&quot;git-&quot; + name" to="(&quot;git-&quot; + name) + 1" />
    <mutant id="mutant_6284" viable="false" in="org.eclipse.jgit.transport.Daemon.startClient(java.net.Socket)" from="(&quot;Git-Daemon-Client &quot; + (peer.toString()))" to="((&quot;Git-Daemon-Client &quot; + (peer.toString())) - 1)" />
    <mutant id="mutant_6285" viable="false" in="org.eclipse.jgit.transport.Daemon.startClient(java.net.Socket)" from="(&quot;Git-Daemon-Client &quot; + (peer.toString()))" to="((&quot;Git-Daemon-Client &quot; + (peer.toString())) * -1)" />
    <mutant id="mutant_6286" viable="true" in="org.eclipse.jgit.transport.Daemon.startClient(java.net.Socket)" from="(&quot;Git-Daemon-Client &quot; + (peer.toString()))" to="((&quot;Git-Daemon-Client &quot; + (peer.toString())) + 1)" />
    <mutant id="mutant_6287" viable="true" in="org.eclipse.jgit.transport.DaemonClient.execute(java.net.Socket)" from="((daemon.getTimeout()) * 1000)" to="(((daemon.getTimeout()) * 1000) - 1)" />
    <mutant id="mutant_6277" viable="false" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;)" to="((name + &quot;@&quot;) * -1)" />
    <mutant id="mutant_6278" viable="false" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;) + host" to="((name + &quot;@&quot;) + host) * -1" />
    <mutant id="mutant_6279" viable="false" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;) + host" to="((name + &quot;@&quot;) + host) - 1" />
    <mutant id="mutant_6270" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="((JGitText.get().duplicateRef) + name)" to="(((JGitText.get().duplicateRef) + name) - 1)" />
    <mutant id="mutant_6271" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="((JGitText.get().duplicateRef) + name)" to="(((JGitText.get().duplicateRef) + name) + 1)" />
    <mutant id="mutant_6272" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(org.eclipse.jgit.lib.Ref)" from="((r.getObjectId()) != null) &amp;&amp; (r.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="!(((r.getObjectId()) != null) &amp;&amp; (r.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" />
    <mutant id="mutant_6273" viable="true" in="org.eclipse.jgit.transport.CredentialsProviderUserInfo.promptYesNo(java.lang.String)" from="(provider.get(uri, v)) &amp;&amp; (v.getValue())" to="!((provider.get(uri, v)) &amp;&amp; (v.getValue()))" />
    <mutant id="mutant_6274" viable="true" in="org.eclipse.jgit.transport.CredentialsProviderUserInfo.promptKeyboardInteractive(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],boolean[])" from="(instruction != null) &amp;&amp; ((instruction.length()) &gt; 0)" to="!((instruction != null) &amp;&amp; ((instruction.length()) &gt; 0))" />
    <mutant id="mutant_6275" viable="true" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;)" to="((name + &quot;@&quot;) + 1)" />
    <mutant id="mutant_6276" viable="false" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;)" to="((name + &quot;@&quot;) - 1)" />
    <mutant id="mutant_6266" viable="true" in="org.eclipse.jgit.transport.BundleFetchConnection.readLine(byte[])" from="(lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) != '\n')" to="!((lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) != '\n'))" />
    <mutant id="mutant_7598" viable="true" in="org.eclipse.jgit.transport.TagOpt.fromOption(java.lang.String)" from="(o == null) || ((o.length()) == 0)" to="!((o == null) || ((o.length()) == 0))" />
    <mutant id="mutant_6267" viable="true" in="org.eclipse.jgit.transport.BundleFetchConnection.readLine(byte[])" from="(lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) == '\n')" to="!((lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) == '\n'))" />
    <mutant id="mutant_7597" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + name) * -1)" />
    <mutant id="mutant_6268" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="(Repository.isValidRefName(name)) || (Constants.HEAD.equals(name))" to="!((Repository.isValidRefName(name)) || (Constants.HEAD.equals(name)))" />
    <mutant id="mutant_6269" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="((JGitText.get().duplicateRef) + name)" to="(((JGitText.get().duplicateRef) + name) * -1)" />
    <mutant id="mutant_7599" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(!(url.startsWith(&quot;./&quot;))) &amp;&amp; (!(url.startsWith(&quot;../&quot;)))" to="!((!(url.startsWith(&quot;./&quot;))) &amp;&amp; (!(url.startsWith(&quot;../&quot;))))" />
    <mutant id="mutant_7590" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefsImpl(java.util.Map,java.io.BufferedReader)" from="(sp + 1)" to="((sp + 1) * -1)" />
    <mutant id="mutant_6260" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null))" to="(!(((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)))" />
    <mutant id="mutant_7592" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) + 1)" to="(((Constants.OBJECT_ID_STRING_LENGTH) + 1) + 1)" />
    <mutant id="mutant_6261" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId()))))" to="(!((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId())))))" />
    <mutant id="mutant_7591" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefsImpl(java.util.Map,java.io.BufferedReader)" from="(sp + 1)" to="((sp + 1) - 1)" />
    <mutant id="mutant_6262" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId())))) &amp;&amp; (!(ref.getObjectId().equals(cmd.getOldId())))" to="!(((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId())))) &amp;&amp; (!(ref.getObjectId().equals(cmd.getOldId()))))" />
    <mutant id="mutant_7594" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) + 1)" to="(((Constants.OBJECT_ID_STRING_LENGTH) + 1) * -1)" />
    <mutant id="mutant_6263" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(oldObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (newObj instanceof org.eclipse.jgit.revwalk.RevCommit)" to="!((oldObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (newObj instanceof org.eclipse.jgit.revwalk.RevCommit))" />
    <mutant id="mutant_7593" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) + 1)" to="(((Constants.OBJECT_ID_STRING_LENGTH) + 1) - 1)" />
    <mutant id="mutant_6264" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (!(isAllowNonFastForwards()))" to="!(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (!(isAllowNonFastForwards())))" />
    <mutant id="mutant_7596" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + name) + 1)" />
    <mutant id="mutant_6265" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(!(cmd.getRefName().startsWith(org.eclipse.jgit.lib.Constants.R_REFS))) || (!(Repository.isValidRefName(cmd.getRefName())))" to="!((!(cmd.getRefName().startsWith(org.eclipse.jgit.lib.Constants.R_REFS))) || (!(Repository.isValidRefName(cmd.getRefName()))))" />
    <mutant id="mutant_7595" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + name) - 1)" />
    <mutant id="mutant_6255" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setAdvertisedRefs(java.util.Map,java.util.Set)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="!((head != null) &amp;&amp; (head.isSymbolic()))" />
    <mutant id="mutant_7587" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefs(java.util.Map)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.PACKED_REFS))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.PACKED_REFS)) * -1)" />
    <mutant id="mutant_6256" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setCheckReceivedObjects(boolean)" from="check &amp;&amp; ((objectChecker) == null)" to="!(check &amp;&amp; ((objectChecker) == null))" />
    <mutant id="mutant_7586" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefs(java.util.Map)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.PACKED_REFS))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.PACKED_REFS)) - 1)" />
    <mutant id="mutant_6257" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setCheckReceivedObjects(boolean)" from="(!check) &amp;&amp; ((objectChecker) != null)" to="!((!check) &amp;&amp; ((objectChecker) != null))" />
    <mutant id="mutant_7589" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefsImpl(java.util.Map,java.io.BufferedReader)" from="(sp + 1)" to="((sp + 1) + 1)" />
    <mutant id="mutant_6258" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(!(isAllowBranchDeletes())) &amp;&amp; (ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="!((!(isAllowBranchDeletes())) &amp;&amp; (ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" />
    <mutant id="mutant_7588" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefs(java.util.Map)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.PACKED_REFS))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.PACKED_REFS)) + 1)" />
    <mutant id="mutant_6259" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(ref != null) &amp;&amp; (!(isAllowNonFastForwards()))" to="!((ref != null) &amp;&amp; (!(isAllowNonFastForwards())))" />
    <mutant id="mutant_2729" viable="true" in="org.eclipse.jgit.internal.storage.file.GC$1.compare(org.eclipse.jgit.internal.storage.pack.PackExt,org.eclipse.jgit.internal.storage.pack.PackExt)" from="((o1.hashCode()) - (o2.hashCode()))" to="(((o1.hashCode()) - (o2.hashCode())) * -1)" />
    <mutant id="mutant_2720" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="(System.currentTimeMillis()) - (expireAgeMillis)" to="((System.currentTimeMillis()) - (expireAgeMillis)) - 1" />
    <mutant id="mutant_2728" viable="true" in="org.eclipse.jgit.internal.storage.file.GC$1.compare(org.eclipse.jgit.internal.storage.pack.PackExt,org.eclipse.jgit.internal.storage.pack.PackExt)" from="((o1.hashCode()) - (o2.hashCode()))" to="(((o1.hashCode()) - (o2.hashCode())) - 1)" />
    <mutant id="mutant_2727" viable="true" in="org.eclipse.jgit.internal.storage.file.GC$1.compare(org.eclipse.jgit.internal.storage.pack.PackExt,org.eclipse.jgit.internal.storage.pack.PackExt)" from="((o1.hashCode()) - (o2.hashCode()))" to="(((o1.hashCode()) - (o2.hashCode())) + 1)" />
    <mutant id="mutant_2726" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(storage == (Ref.Storage.PACKED)) || (storage == (Ref.Storage.LOOSE_PACKED))" to="!((storage == (Ref.Storage.PACKED)) || (storage == (Ref.Storage.LOOSE_PACKED)))" />
    <mutant id="mutant_2725" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(storage == (Ref.Storage.LOOSE)) || (storage == (Ref.Storage.LOOSE_PACKED))" to="!((storage == (Ref.Storage.LOOSE)) || (storage == (Ref.Storage.LOOSE_PACKED)))" />
    <mutant id="mutant_2724" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) - 1)" />
    <mutant id="mutant_2723" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) * -1)" />
    <mutant id="mutant_2722" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) + 1)" />
    <mutant id="mutant_2721" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="!((fanout != null) &amp;&amp; ((fanout.length) &gt; 0))" />
    <mutant id="mutant_2719" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="(System.currentTimeMillis()) - (expireAgeMillis)" to="((System.currentTimeMillis()) - (expireAgeMillis)) * -1" />
    <mutant id="mutant_2718" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="(System.currentTimeMillis()) - (expireAgeMillis)" to="((System.currentTimeMillis()) - (expireAgeMillis)) + 1" />
    <mutant id="mutant_2717" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="((expire) == null) &amp;&amp; ((expireAgeMillis) == (-1))" to="!(((expire) == null) &amp;&amp; ((expireAgeMillis) == (-1)))" />
    <mutant id="mutant_2716" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(oldId != null) &amp;&amp; (!(ObjectId.zeroId().equals(oldId)))" to="!((oldId != null) &amp;&amp; (!(ObjectId.zeroId().equals(oldId))))" />
    <mutant id="mutant_2715" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(newId != null) &amp;&amp; (!(ObjectId.zeroId().equals(newId)))" to="!((newId != null) &amp;&amp; (!(ObjectId.zeroId().equals(newId))))" />
    <mutant id="mutant_2714" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(rlEntries == null) || (rlEntries.isEmpty())" to="!((rlEntries == null) || (rlEntries.isEmpty()))" />
    <mutant id="mutant_2713" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.repack()" from="(ref.isSymbolic()) || ((ref.getObjectId()) == null)" to="!((ref.isSymbolic()) || ((ref.getObjectId()) == null))" />
    <mutant id="mutant_2712" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="((&quot;pack-&quot; + name) + ext)" to="(((&quot;pack-&quot; + name) + ext) + 1)" />
    <mutant id="mutant_2711" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="((&quot;pack-&quot; + name) + ext)" to="(((&quot;pack-&quot; + name) + ext) * -1)" />
    <mutant id="mutant_2710" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="((&quot;pack-&quot; + name) + ext)" to="(((&quot;pack-&quot; + name) + ext) - 1)" />
    <mutant id="mutant_2709" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="(&quot;pack-&quot; + name)" to="((&quot;pack-&quot; + name) - 1)" />
    <mutant id="mutant_2708" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="(&quot;pack-&quot; + name)" to="((&quot;pack-&quot; + name) * -1)" />
    <mutant id="mutant_2707" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="(&quot;pack-&quot; + name)" to="((&quot;pack-&quot; + name) + 1)" />
    <mutant id="mutant_2706" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.equals(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(r1 == null) || (r2 == null)" to="!((r1 == null) || (r2 == null))" />
    <mutant id="mutant_2705" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) + &quot;]&quot;" to="((((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) + &quot;]&quot;) * -1" />
    <mutant id="mutant_2704" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) + &quot;]&quot;" to="((((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) + &quot;]&quot;) - 1" />
    <mutant id="mutant_2703" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) + &quot;]&quot;" to="((((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) + &quot;]&quot;) + 1" />
    <mutant id="mutant_2702" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead))))" to="((((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) * -1)" />
    <mutant id="mutant_2701" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead))))" to="((((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) + 1)" />
    <mutant id="mutant_2700" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead))))" to="((((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) - 1)" />
    <mutant id="mutant_6299" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((command.length()) + 1)" to="(((command.length()) + 1) * -1)" />
    <mutant id="mutant_1432" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) + &quot; k&quot;" to="((String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) + &quot; k&quot;) - 1" />
    <mutant id="mutant_2764" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(d + e)" to="((d + e) * -1)" />
    <mutant id="mutant_1433" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(java.lang.String,java.lang.String)" from="(a == null) &amp;&amp; (b == null)" to="!((a == null) &amp;&amp; (b == null))" />
    <mutant id="mutant_2763" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(d + e)" to="((d + e) + 1)" />
    <mutant id="mutant_1430" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) + &quot; k&quot;" to="((String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) + &quot; k&quot;) * -1" />
    <mutant id="mutant_2762" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) - 1)" />
    <mutant id="mutant_1431" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) + &quot; k&quot;" to="((String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) + &quot; k&quot;) + 1" />
    <mutant id="mutant_2761" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) * -1)" />
    <mutant id="mutant_2760" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) + 1)" />
    <mutant id="mutant_1438" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String,java.lang.String)" from="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection)))" to="(!((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))))" />
    <mutant id="mutant_1439" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String,java.lang.String)" from="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(name, aKey))" to="!(((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(name, aKey)))" />
    <mutant id="mutant_2769" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) + 1" to="((org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) + 1) * -1" />
    <mutant id="mutant_1436" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqSameCase(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="!((a == null) || (b == null))" />
    <mutant id="mutant_2768" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) + 1" to="((org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) + 1) - 1" />
    <mutant id="mutant_1437" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))" to="!((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection)))" />
    <mutant id="mutant_2767" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) + 1" to="((org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) + 1) + 1" />
    <mutant id="mutant_1434" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="!((a == null) || (b == null))" />
    <mutant id="mutant_2766" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(position &lt;= (nextPosition)) || (position &gt;= (sizeInBits))" to="!((position &lt;= (nextPosition)) || (position &gt;= (sizeInBits)))" />
    <mutant id="mutant_1435" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqSameCase(java.lang.String,java.lang.String)" from="(a == null) &amp;&amp; (b == null)" to="!((a == null) &amp;&amp; (b == null))" />
    <mutant id="mutant_2765" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(d + e)" to="((d + e) - 1)" />
    <mutant id="mutant_1421" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) + &quot; m&quot;" to="((String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) + &quot; m&quot;) * -1" />
    <mutant id="mutant_2753" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="((&quot;.&quot; + (ext.getExtension())) * -1)" />
    <mutant id="mutant_1422" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) + &quot; m&quot;" to="((String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) + &quot; m&quot;) + 1" />
    <mutant id="mutant_2752" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((lastPackedRefs) == null) || (lastPackedRefs.isEmpty())" to="!(((lastPackedRefs) == null) || (lastPackedRefs.isEmpty()))" />
    <mutant id="mutant_2751" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(d + fName)" to="((d + fName) + 1)" />
    <mutant id="mutant_1420" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) + &quot; m&quot;" to="((String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) + &quot; m&quot;) - 1" />
    <mutant id="mutant_2750" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(d + fName)" to="((d + fName) - 1)" />
    <mutant id="mutant_1429" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.KiB))" to="((value / (Config.KiB)) - 1)" />
    <mutant id="mutant_1427" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.KiB))" to="((value / (Config.KiB)) * -1)" />
    <mutant id="mutant_2759" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="!((fanout != null) &amp;&amp; ((fanout.length) &gt; 0))" />
    <mutant id="mutant_1428" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.KiB))" to="((value / (Config.KiB)) + 1)" />
    <mutant id="mutant_2758" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="((&quot;.&quot; + (ext.getExtension())) + 1)" />
    <mutant id="mutant_1425" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.KiB))" to="((value % (Config.KiB)) * -1)" />
    <mutant id="mutant_2757" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="((&quot;.&quot; + (ext.getExtension())) - 1)" />
    <mutant id="mutant_1426" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.KiB)) &amp;&amp; ((value % (Config.KiB)) == 0)" to="!((value &gt;= (Config.KiB)) &amp;&amp; ((value % (Config.KiB)) == 0))" />
    <mutant id="mutant_2756" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="((&quot;.&quot; + (ext.getExtension())) * -1)" />
    <mutant id="mutant_1423" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.KiB))" to="((value % (Config.KiB)) + 1)" />
    <mutant id="mutant_2755" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="((&quot;.&quot; + (ext.getExtension())) + 1)" />
    <mutant id="mutant_1424" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.KiB))" to="((value % (Config.KiB)) - 1)" />
    <mutant id="mutant_2754" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="((&quot;.&quot; + (ext.getExtension())) - 1)" />
    <mutant id="mutant_1410" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) + &quot; g&quot;" to="((String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) + &quot; g&quot;) * -1" />
    <mutant id="mutant_2742" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpPack != null) &amp;&amp; (tmpPack.exists())" to="!((tmpPack != null) &amp;&amp; (tmpPack.exists()))" />
    <mutant id="mutant_1411" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) + &quot; g&quot;" to="((String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) + &quot; g&quot;) - 1" />
    <mutant id="mutant_2741" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="((realExt.getName()) + &quot;.new&quot;)" to="(((realExt.getName()) + &quot;.new&quot;) - 1)" />
    <mutant id="mutant_2740" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="((realExt.getName()) + &quot;.new&quot;)" to="(((realExt.getName()) + &quot;.new&quot;) * -1)" />
    <mutant id="mutant_1418" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.MiB))" to="((value / (Config.MiB)) * -1)" />
    <mutant id="mutant_1419" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.MiB))" to="((value / (Config.MiB)) + 1)" />
    <mutant id="mutant_2749" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(d + fName)" to="((d + fName) * -1)" />
    <mutant id="mutant_1416" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.MiB)) &amp;&amp; ((value % (Config.MiB)) == 0)" to="!((value &gt;= (Config.MiB)) &amp;&amp; ((value % (Config.MiB)) == 0))" />
    <mutant id="mutant_2748" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) - 1)" />
    <mutant id="mutant_1417" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.MiB))" to="((value / (Config.MiB)) - 1)" />
    <mutant id="mutant_2747" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) * -1)" />
    <mutant id="mutant_1414" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.MiB))" to="((value % (Config.MiB)) + 1)" />
    <mutant id="mutant_2746" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) + 1)" />
    <mutant id="mutant_1415" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.MiB))" to="((value % (Config.MiB)) - 1)" />
    <mutant id="mutant_2745" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="!((fanout != null) &amp;&amp; ((fanout.length) &gt; 0))" />
    <mutant id="mutant_1412" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) + &quot; g&quot;" to="((String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) + &quot; g&quot;) + 1" />
    <mutant id="mutant_2744" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.packRefs()" from="(!(ref.isSymbolic())) &amp;&amp; (ref.getStorage().isLoose())" to="!((!(ref.isSymbolic())) &amp;&amp; (ref.getStorage().isLoose()))" />
    <mutant id="mutant_1413" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.MiB))" to="((value % (Config.MiB)) * -1)" />
    <mutant id="mutant_2743" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.deleteOldPacks(java.util.Collection,java.util.Collection)" from="(!(oldPack.shouldBeKept())) &amp;&amp; ((oldPack.getPackFile().lastModified()) &lt; expireDate)" to="!((!(oldPack.shouldBeKept())) &amp;&amp; ((oldPack.getPackFile().lastModified()) &lt; expireDate))" />
    <mutant id="mutant_1409" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.GiB))" to="((value / (Config.GiB)) + 1)" />
    <mutant id="mutant_2731" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.idx_tmp&quot;)" to="((tmpBase + &quot;.idx_tmp&quot;) - 1)" />
    <mutant id="mutant_1400" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.name.length()) - 1)" to="(((e.name.length()) - 1) + 1)" />
    <mutant id="mutant_2730" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.idx_tmp&quot;)" to="((tmpBase + &quot;.idx_tmp&quot;) * -1)" />
    <mutant id="mutant_1407" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.GiB))" to="((value / (Config.GiB)) * -1)" />
    <mutant id="mutant_2739" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="((realExt.getName()) + &quot;.new&quot;)" to="(((realExt.getName()) + &quot;.new&quot;) + 1)" />
    <mutant id="mutant_1408" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.GiB))" to="((value / (Config.GiB)) - 1)" />
    <mutant id="mutant_2738" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(&quot;.&quot; + (tmpEntry.getKey().getExtension()))" to="((&quot;.&quot; + (tmpEntry.getKey().getExtension())) + 1)" />
    <mutant id="mutant_1405" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.GiB))" to="((value % (Config.GiB)) - 1)" />
    <mutant id="mutant_2737" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(&quot;.&quot; + (tmpEntry.getKey().getExtension()))" to="((&quot;.&quot; + (tmpEntry.getKey().getExtension())) - 1)" />
    <mutant id="mutant_1406" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.GiB)) &amp;&amp; ((value % (Config.GiB)) == 0)" to="!((value &gt;= (Config.GiB)) &amp;&amp; ((value % (Config.GiB)) == 0))" />
    <mutant id="mutant_2736" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(&quot;.&quot; + (tmpEntry.getKey().getExtension()))" to="((&quot;.&quot; + (tmpEntry.getKey().getExtension())) * -1)" />
    <mutant id="mutant_1403" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.GiB))" to="((value % (Config.GiB)) * -1)" />
    <mutant id="mutant_2735" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.bitmap_tmp&quot;)" to="((tmpBase + &quot;.bitmap_tmp&quot;) - 1)" />
    <mutant id="mutant_1404" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.GiB))" to="((value % (Config.GiB)) + 1)" />
    <mutant id="mutant_2734" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.bitmap_tmp&quot;)" to="((tmpBase + &quot;.bitmap_tmp&quot;) + 1)" />
    <mutant id="mutant_1401" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.name.length()) - 1)" to="(((e.name.length()) - 1) * -1)" />
    <mutant id="mutant_2733" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.bitmap_tmp&quot;)" to="((tmpBase + &quot;.bitmap_tmp&quot;) * -1)" />
    <mutant id="mutant_1402" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.name.length()) - 1)" to="(((e.name.length()) - 1) - 1)" />
    <mutant id="mutant_2732" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.idx_tmp&quot;)" to="((tmpBase + &quot;.idx_tmp&quot;) + 1)" />
    <mutant id="mutant_1480" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="((position + 2) - 1)" />
    <mutant id="mutant_1476" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="((position + 1) - 1)" />
    <mutant id="mutant_1477" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="((position + 1) * -1)" />
    <mutant id="mutant_1474" viable="true" in="org.eclipse.jgit.lib.Constants.encodeASCII(java.lang.String)" from="(r.length) - 1" to="((r.length) - 1) - 1" />
    <mutant id="mutant_1475" viable="true" in="org.eclipse.jgit.lib.Constants.encodeASCII(java.lang.String)" from="(r.length) - 1" to="((r.length) - 1) + 1" />
    <mutant id="mutant_1472" viable="true" in="org.eclipse.jgit.lib.Constants.encode(java.lang.String)" from="(bb.hasArray()) &amp;&amp; ((bb.arrayOffset()) == 0)" to="!((bb.hasArray()) &amp;&amp; ((bb.arrayOffset()) == 0))" />
    <mutant id="mutant_1473" viable="true" in="org.eclipse.jgit.lib.Constants.encodeASCII(java.lang.String)" from="(r.length) - 1" to="((r.length) - 1) * -1" />
    <mutant id="mutant_1470" viable="false" in="?" from="(Constants.R_REFS) + (Constants.STASH)" to="((Constants.R_REFS) + (Constants.STASH)) * -1" />
    <mutant id="mutant_1471" viable="false" in="?" from="(Constants.R_REFS) + (Constants.STASH)" to="((Constants.R_REFS) + (Constants.STASH)) + 1" />
    <mutant id="mutant_1478" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="((position + 1) + 1)" />
    <mutant id="mutant_1479" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="((position + 2) * -1)" />
    <mutant id="mutant_1465" viable="false" in="?" from="(Constants.OBJECT_ID_LENGTH) * 2" to="((Constants.OBJECT_ID_LENGTH) * 2) * -1" />
    <mutant id="mutant_2797" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) + &quot;]&quot;" to="((((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_1466" viable="false" in="?" from="(Constants.R_NOTES) + &quot;commits&quot;" to="((Constants.R_NOTES) + &quot;commits&quot;) * -1" />
    <mutant id="mutant_2796" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) + &quot;]&quot;" to="((((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_1463" viable="false" in="?" from="(Constants.OBJECT_ID_LENGTH) * 2" to="((Constants.OBJECT_ID_LENGTH) * 2) - 1" />
    <mutant id="mutant_2795" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck))" to="((((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) * -1)" />
    <mutant id="mutant_1464" viable="false" in="?" from="(Constants.OBJECT_ID_LENGTH) * 2" to="((Constants.OBJECT_ID_LENGTH) * 2) + 1" />
    <mutant id="mutant_2794" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck))" to="((((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) - 1)" />
    <mutant id="mutant_1461" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="(idx + 1)" to="((idx + 1) * -1)" />
    <mutant id="mutant_2793" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck))" to="((((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) + 1)" />
    <mutant id="mutant_1462" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="recursive &amp;&amp; ((baseState) != null)" to="!(recursive &amp;&amp; ((baseState) != null))" />
    <mutant id="mutant_2792" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;)" to="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + 1)" />
    <mutant id="mutant_2791" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;)" to="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) - 1)" />
    <mutant id="mutant_1460" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="(idx + 1)" to="((idx + 1) - 1)" />
    <mutant id="mutant_2790" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;)" to="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) * -1)" />
    <mutant id="mutant_1469" viable="false" in="?" from="(Constants.R_REFS) + (Constants.STASH)" to="((Constants.R_REFS) + (Constants.STASH)) - 1" />
    <mutant id="mutant_1467" viable="false" in="?" from="(Constants.R_NOTES) + &quot;commits&quot;" to="((Constants.R_NOTES) + &quot;commits&quot;) - 1" />
    <mutant id="mutant_2799" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.write(org.eclipse.jgit.lib.ObjectId)" from="(Constants.OBJECT_ID_STRING_LENGTH) + 1" to="((Constants.OBJECT_ID_STRING_LENGTH) + 1) + 1" />
    <mutant id="mutant_1468" viable="false" in="?" from="(Constants.R_NOTES) + &quot;commits&quot;" to="((Constants.R_NOTES) + &quot;commits&quot;) + 1" />
    <mutant id="mutant_2798" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) + &quot;]&quot;" to="((((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_1454" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.first(java.util.List,int,java.lang.String,java.lang.String,java.lang.String)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_2786" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.getLockFile(java.io.File)" from="((file.getName()) + (LockFile.SUFFIX))" to="(((file.getName()) + (LockFile.SUFFIX)) * -1)" />
    <mutant id="mutant_1455" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.get(java.lang.String,java.lang.String,java.lang.String)" from="end - idx" to="(end - idx) - 1" />
    <mutant id="mutant_2785" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.getLockFile(java.io.File)" from="((file.getName()) + (LockFile.SUFFIX))" to="(((file.getName()) + (LockFile.SUFFIX)) - 1)" />
    <mutant id="mutant_1452" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.first(java.util.List,int,java.lang.String,java.lang.String,java.lang.String)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_2784" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.getLockFile(java.io.File)" from="((file.getName()) + (LockFile.SUFFIX))" to="(((file.getName()) + (LockFile.SUFFIX)) + 1)" />
    <mutant id="mutant_1453" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.first(java.util.List,int,java.lang.String,java.lang.String,java.lang.String)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_2783" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.commit()" from="(!(ref.exists())) || (deleteRef())" to="!((!(ref.exists())) || (deleteRef()))" />
    <mutant id="mutant_1450" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + 1)" to="((low + 1) - 1)" />
    <mutant id="mutant_2782" viable="true" in="org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation.getDeltaBase()" from="((baseId) == null) &amp;&amp; ((getFormat()) == (StoredObjectRepresentation.PACK_DELTA))" to="!(((baseId) == null) &amp;&amp; ((getFormat()) == (StoredObjectRepresentation.PACK_DELTA)))" />
    <mutant id="mutant_1451" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + 1)" to="((low + 1) * -1)" />
    <mutant id="mutant_2781" viable="false" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="((&quot;pack-&quot; + packName) + &quot;.pack&quot;)" to="(((&quot;pack-&quot; + packName) + &quot;.pack&quot;) * -1)" />
    <mutant id="mutant_2780" viable="false" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="((&quot;pack-&quot; + packName) + &quot;.pack&quot;)" to="(((&quot;pack-&quot; + packName) + &quot;.pack&quot;) - 1)" />
    <mutant id="mutant_1458" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.sort(java.util.List)" from="((line.section) != null) &amp;&amp; ((line.name) != null)" to="!(((line.section) != null) &amp;&amp; ((line.name) != null))" />
    <mutant id="mutant_1459" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="(idx + 1)" to="((idx + 1) + 1)" />
    <mutant id="mutant_2789" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(&quot;LockFile[&quot; + (lck))" to="((&quot;LockFile[&quot; + (lck)) - 1)" />
    <mutant id="mutant_1456" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.get(java.lang.String,java.lang.String,java.lang.String)" from="end - idx" to="(end - idx) + 1" />
    <mutant id="mutant_2788" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(&quot;LockFile[&quot; + (lck))" to="((&quot;LockFile[&quot; + (lck)) + 1)" />
    <mutant id="mutant_1457" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.get(java.lang.String,java.lang.String,java.lang.String)" from="end - idx" to="(end - idx) * -1" />
    <mutant id="mutant_2787" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(&quot;LockFile[&quot; + (lck))" to="((&quot;LockFile[&quot; + (lck)) * -1)" />
    <mutant id="mutant_1443" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + high)" to="((low + high) + 1)" />
    <mutant id="mutant_2775" viable="true" in="org.eclipse.jgit.internal.storage.file.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="(((objectOffset) + (headerLength)) - 1)" />
    <mutant id="mutant_1444" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + high)" to="((low + high) * -1)" />
    <mutant id="mutant_2774" viable="true" in="org.eclipse.jgit.internal.storage.file.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="(((objectOffset) + (headerLength)) * -1)" />
    <mutant id="mutant_1441" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.compare2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(aSubsection == null) &amp;&amp; (bSubsection != null)" to="!((aSubsection == null) &amp;&amp; (bSubsection != null))" />
    <mutant id="mutant_2773" viable="true" in="org.eclipse.jgit.internal.storage.file.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="(((objectOffset) + (headerLength)) + 1)" />
    <mutant id="mutant_1442" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.compare2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(aSubsection != null) &amp;&amp; (bSubsection == null)" to="!((aSubsection != null) &amp;&amp; (bSubsection == null))" />
    <mutant id="mutant_2772" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.maybeContains(int)" from="((nextPosition) &lt;= position) &amp;&amp; (position &lt; (sizeInBits))" to="!(((nextPosition) &lt;= position) &amp;&amp; (position &lt; (sizeInBits)))" />
    <mutant id="mutant_2771" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.get(int)" from="(b &lt; (inflated.length)) &amp;&amp; (((inflated[b]) &amp; (InflatingBitSet.mask(position))) != 0)" to="!((b &lt; (inflated.length)) &amp;&amp; (((inflated[b]) &amp; (InflatingBitSet.mask(position))) != 0))" />
    <mutant id="mutant_1440" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot$CaseFoldingSet.contains(java.lang.Object)" from="(names.containsKey(n)) || (names.containsKey(org.eclipse.jgit.util.StringUtils.toLowerCase(n)))" to="!((names.containsKey(n)) || (names.containsKey(org.eclipse.jgit.util.StringUtils.toLowerCase(n))))" />
    <mutant id="mutant_2770" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(block == positionBlock) &amp;&amp; ((word &amp; (org.eclipse.jgit.internal.storage.file.InflatingBitSet.mask(position))) != 0)" to="!((block == positionBlock) &amp;&amp; ((word &amp; (org.eclipse.jgit.internal.storage.file.InflatingBitSet.mask(position))) != 0))" />
    <mutant id="mutant_1449" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + 1)" to="((low + 1) + 1)" />
    <mutant id="mutant_1447" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="mid + 1" to="(mid + 1) + 1" />
    <mutant id="mutant_2779" viable="true" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="((&quot;pack-&quot; + packName) + &quot;.pack&quot;)" to="(((&quot;pack-&quot; + packName) + &quot;.pack&quot;) + 1)" />
    <mutant id="mutant_1448" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="mid + 1" to="(mid + 1) - 1" />
    <mutant id="mutant_2778" viable="false" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="(&quot;pack-&quot; + packName)" to="((&quot;pack-&quot; + packName) - 1)" />
    <mutant id="mutant_1445" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + high)" to="((low + high) - 1)" />
    <mutant id="mutant_2777" viable="false" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="(&quot;pack-&quot; + packName)" to="((&quot;pack-&quot; + packName) * -1)" />
    <mutant id="mutant_1446" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="mid + 1" to="(mid + 1) * -1" />
    <mutant id="mutant_2776" viable="true" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="(&quot;pack-&quot; + packName)" to="((&quot;pack-&quot; + packName) + 1)" />
    <mutant id="mutant_8904" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 2)" to="((offset + 2) + 1)" />
    <mutant id="mutant_8903" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 2)" to="((offset + 2) - 1)" />
    <mutant id="mutant_8906" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 3)" to="((offset + 3) * -1)" />
    <mutant id="mutant_8905" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 2)" to="((offset + 2) * -1)" />
    <mutant id="mutant_8908" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 3)" to="((offset + 3) + 1)" />
    <mutant id="mutant_8907" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 3)" to="((offset + 3) - 1)" />
    <mutant id="mutant_8909" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt16(byte[],int)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_8900" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_8902" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_8901" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_1498" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="((position + 2) - 1)" />
    <mutant id="mutant_1499" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="((position + 2) + 1)" />
    <mutant id="mutant_1496" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="((position + 1) + 1)" />
    <mutant id="mutant_1497" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="((position + 2) * -1)" />
    <mutant id="mutant_1494" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="((position + 1) - 1)" />
    <mutant id="mutant_1495" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="((position + 1) * -1)" />
    <mutant id="mutant_1492" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="(position + 5) * -1" />
    <mutant id="mutant_1493" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="(position + 5) - 1" />
    <mutant id="mutant_1490" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b')) || ((typeString[(position + 4)]) != endMark)" to="!(((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b')) || ((typeString[(position + 4)]) != endMark))" />
    <mutant id="mutant_1491" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="(position + 5) + 1" />
    <mutant id="mutant_1487" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="((position + 4) - 1)" />
    <mutant id="mutant_1488" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="((position + 4) * -1)" />
    <mutant id="mutant_1485" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="((position + 3) * -1)" />
    <mutant id="mutant_1486" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b'))" to="(!((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b')))" />
    <mutant id="mutant_1483" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="((position + 3) + 1)" />
    <mutant id="mutant_1484" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="((position + 3) - 1)" />
    <mutant id="mutant_1481" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="((position + 2) + 1)" />
    <mutant id="mutant_1482" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o'))" to="(!(((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')))" />
    <mutant id="mutant_1489" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="((position + 4) + 1)" />
    <mutant id="mutant_8706" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(footerFirstLine != (lines.length)) &amp;&amp; ((lines[i].length()) == 0)" to="!((footerFirstLine != (lines.length)) &amp;&amp; ((lines[i].length()) == 0))" />
    <mutant id="mutant_8705" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(lines.length) - 1" to="((lines.length) - 1) + 1" />
    <mutant id="mutant_8708" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="i + 1" to="(i + 1) * -1" />
    <mutant id="mutant_8707" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(footerFirstLine != (lines.length)) &amp;&amp; (ChangeIdUtil.includeInFooterPattern.matcher(lines[i]).matches())" to="!((footerFirstLine != (lines.length)) &amp;&amp; (ChangeIdUtil.includeInFooterPattern.matcher(lines[i]).matches()))" />
    <mutant id="mutant_8709" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="i + 1" to="(i + 1) - 1" />
    <mutant id="mutant_8700" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="indexOfChangeIdLineinString + (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))" to="(indexOfChangeIdLineinString + (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))) - 1" />
    <mutant id="mutant_8702" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="indexOfChangeIdLineinString + (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))" to="(indexOfChangeIdLineinString + (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))) * -1" />
    <mutant id="mutant_8701" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="indexOfChangeIdLineinString + (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))" to="(indexOfChangeIdLineinString + (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))) + 1" />
    <mutant id="mutant_8704" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(lines.length) - 1" to="((lines.length) - 1) - 1" />
    <mutant id="mutant_8703" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(lines.length) - 1" to="((lines.length) - 1) * -1" />
    <mutant id="mutant_1298" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="p + 7" to="(p + 7) - 1" />
    <mutant id="mutant_1299" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="p + 7" to="(p + 7) + 1" />
    <mutant id="mutant_1296" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="(o &gt;= p) &amp;&amp; (w != 0)" to="!((o &gt;= p) &amp;&amp; (w != 0))" />
    <mutant id="mutant_1297" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="p + 7" to="(p + 7) * -1" />
    <mutant id="mutant_1294" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="p + 7" to="(p + 7) - 1" />
    <mutant id="mutant_1295" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="p + 7" to="(p + 7) + 1" />
    <mutant id="mutant_1292" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 32)" to="((o + 32) + 1)" />
    <mutant id="mutant_1293" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="p + 7" to="(p + 7) * -1" />
    <mutant id="mutant_1290" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 32)" to="((o + 32) - 1)" />
    <mutant id="mutant_1291" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 32)" to="((o + 32) * -1)" />
    <mutant id="mutant_1289" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 24)" to="((o + 24) - 1)" />
    <mutant id="mutant_1287" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 24)" to="((o + 24) * -1)" />
    <mutant id="mutant_1288" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 24)" to="((o + 24) + 1)" />
    <mutant id="mutant_1285" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 16)" to="((o + 16) - 1)" />
    <mutant id="mutant_1286" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 16)" to="((o + 16) + 1)" />
    <mutant id="mutant_1283" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 8)" to="((o + 8) - 1)" />
    <mutant id="mutant_1284" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 16)" to="((o + 16) * -1)" />
    <mutant id="mutant_7420" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.getStatistics().getMessage()) + '\n'" to="((pw.getStatistics().getMessage()) + '\n') - 1" />
    <mutant id="mutant_8751" viable="true" in="org.eclipse.jgit.util.FS_Win32.runInShell(java.lang.String,java.lang.String[])" from="(3 + (args.length))" to="((3 + (args.length)) + 1)" />
    <mutant id="mutant_8750" viable="true" in="org.eclipse.jgit.util.FS_Win32.runInShell(java.lang.String,java.lang.String[])" from="(3 + (args.length))" to="((3 + (args.length)) * -1)" />
    <mutant id="mutant_7419" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.willInclude(peeledId)) &amp;&amp; (!(pw.willInclude(objectId)))" to="!((pw.willInclude(peeledId)) &amp;&amp; (!(pw.willInclude(objectId))))" />
    <mutant id="mutant_7418" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(obj != null) &amp;&amp; (obj.has(WANT))" to="!((obj != null) &amp;&amp; (obj.has(WANT)))" />
    <mutant id="mutant_8749" viable="true" in="org.eclipse.jgit.util.FS_Win32.runInShell(java.lang.String,java.lang.String[])" from="(3 + (args.length))" to="((3 + (args.length)) - 1)" />
    <mutant id="mutant_7411" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="((&quot;\\x&quot; + (Integer.toHexString(eof))) * -1)" />
    <mutant id="mutant_8742" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(exists &amp;&amp; (!isDirectory)) &amp;&amp; (canExecute(path))" to="!((exists &amp;&amp; (!isDirectory)) &amp;&amp; (canExecute(path)))" />
    <mutant id="mutant_7410" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" to="!((options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K)))" />
    <mutant id="mutant_8741" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(exists &amp;&amp; (!isDirectory))" to="(!(exists &amp;&amp; (!isDirectory)))" />
    <mutant id="mutant_7413" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="((&quot;\\x&quot; + (Integer.toHexString(eof))) + 1)" />
    <mutant id="mutant_8744" viable="true" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="((4 + (args.length)) + 1)" />
    <mutant id="mutant_7412" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="((&quot;\\x&quot; + (Integer.toHexString(eof))) - 1)" />
    <mutant id="mutant_8743" viable="true" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="((4 + (args.length)) - 1)" />
    <mutant id="mutant_7415" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(((depth) == 0) &amp;&amp; (clientShallowCommits.isEmpty()))" to="!(((depth) == 0) &amp;&amp; (clientShallowCommits.isEmpty()))" />
    <mutant id="mutant_8746" viable="false" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="((cmd + &quot; \&quot;$@\&quot;&quot;) * -1)" />
    <mutant id="mutant_7414" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="sideband &amp;&amp; ((noPack.getMessage()) != null)" to="!(sideband &amp;&amp; ((noPack.getMessage()) != null))" />
    <mutant id="mutant_8745" viable="true" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="((4 + (args.length)) * -1)" />
    <mutant id="mutant_7417" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_INCLUDE_TAG)) &amp;&amp; ((refs) != null)" to="!((options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_INCLUDE_TAG)) &amp;&amp; ((refs) != null))" />
    <mutant id="mutant_8748" viable="true" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="((cmd + &quot; \&quot;$@\&quot;&quot;) + 1)" />
    <mutant id="mutant_7416" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(commonBase.isEmpty()) &amp;&amp; ((refs) != null)" to="!((commonBase.isEmpty()) &amp;&amp; ((refs) != null))" />
    <mutant id="mutant_8747" viable="false" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="((cmd + &quot; \&quot;$@\&quot;&quot;) - 1)" />
    <mutant id="mutant_8740" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="isDirectory || isFile" to="!(isDirectory || isFile)" />
    <mutant id="mutant_7408" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="((what + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_8739" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="((path.exists()) == isDirectory) || isFile" to="!(((path.exists()) == isDirectory) || isFile)" />
    <mutant id="mutant_7407" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="((what + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_8738" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(!isDirectory) &amp;&amp; (path.isFile())" to="!((!isDirectory) &amp;&amp; (path.isFile()))" />
    <mutant id="mutant_7409" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="((what + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_7400" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="((&quot;ERR &quot; + (fail.getMessage())) - 1)" />
    <mutant id="mutant_8731" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe may return \'&quot; + r) + &quot;\'&quot;)" to="(((&quot;readpipe may return \'&quot; + r) + &quot;\'&quot;) + 1)" />
    <mutant id="mutant_8730" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe may return \'&quot; + r) + &quot;\'&quot;)" to="(((&quot;readpipe may return \'&quot; + r) + &quot;\'&quot;) - 1)" />
    <mutant id="mutant_7402" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="((&quot;ERR &quot; + (fail.getMessage())) * -1)" />
    <mutant id="mutant_8733" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0))" to="(!(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0)))" />
    <mutant id="mutant_7401" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="((&quot;ERR &quot; + (fail.getMessage())) + 1)" />
    <mutant id="mutant_8732" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((rc == 0) &amp;&amp; (r != null))" to="(!((rc == 0) &amp;&amp; (r != null)))" />
    <mutant id="mutant_7404" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null)" to="!(((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null))" />
    <mutant id="mutant_8735" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe rc=&quot; + rc)" to="((&quot;readpipe rc=&quot; + rc) + 1)" />
    <mutant id="mutant_7403" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" to="(!((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))))" />
    <mutant id="mutant_8734" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; (!(gobbler.fail.get()))" to="!((((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; (!(gobbler.fail.get())))" />
    <mutant id="mutant_7406" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null)" to="!(((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null))" />
    <mutant id="mutant_8737" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe rc=&quot; + rc)" to="((&quot;readpipe rc=&quot; + rc) - 1)" />
    <mutant id="mutant_7405" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" to="(!((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))))" />
    <mutant id="mutant_8736" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe rc=&quot; + rc)" to="((&quot;readpipe rc=&quot; + rc) * -1)" />
    <mutant id="mutant_8728" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe may return \'&quot; + r)" to="((&quot;readpipe may return \'&quot; + r) - 1)" />
    <mutant id="mutant_8727" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe may return \'&quot; + r)" to="((&quot;readpipe may return \'&quot; + r) + 1)" />
    <mutant id="mutant_8729" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe may return \'&quot; + r) + &quot;\'&quot;)" to="(((&quot;readpipe may return \'&quot; + r) + &quot;\'&quot;) * -1)" />
    <mutant id="mutant_8720" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;)" to="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) * -1)" />
    <mutant id="mutant_8722" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;)" to="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) + 1)" />
    <mutant id="mutant_8721" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;)" to="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) - 1)" />
    <mutant id="mutant_8724" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) + dir)" to="((((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) + dir) + 1)" />
    <mutant id="mutant_8723" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) + dir)" to="((((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) + dir) * -1)" />
    <mutant id="mutant_8726" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe may return \'&quot; + r)" to="((&quot;readpipe may return \'&quot; + r) * -1)" />
    <mutant id="mutant_8725" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) + dir)" to="((((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) + dir) - 1)" />
    <mutant id="mutant_8717" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe &quot; + (Arrays.asList(command)))" to="((&quot;readpipe &quot; + (Arrays.asList(command))) + 1)" />
    <mutant id="mutant_8716" viable="true" in="org.eclipse.jgit.util.FS.userHomeImpl()" from="(home == null) || ((home.length()) == 0)" to="!((home == null) || ((home.length()) == 0))" />
    <mutant id="mutant_8719" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe &quot; + (Arrays.asList(command)))" to="((&quot;readpipe &quot; + (Arrays.asList(command))) - 1)" />
    <mutant id="mutant_8718" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe &quot; + (Arrays.asList(command)))" to="((&quot;readpipe &quot; + (Arrays.asList(command))) * -1)" />
    <mutant id="mutant_8711" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="i + 1" to="(i + 1) * -1" />
    <mutant id="mutant_8710" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="i + 1" to="(i + 1) + 1" />
    <mutant id="mutant_8713" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="i + 1" to="(i + 1) + 1" />
    <mutant id="mutant_8712" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="i + 1" to="(i + 1) - 1" />
    <mutant id="mutant_8715" viable="true" in="org.eclipse.jgit.util.FS$StreamGobbler.call()" from="(!writeFailure) &amp;&amp; ((writer) != null)" to="!((!writeFailure) &amp;&amp; ((writer) != null))" />
    <mutant id="mutant_8714" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="(insertAfter == (lines.length)) &amp;&amp; (insertAfter == footerFirstLine)" to="!((insertAfter == (lines.length)) &amp;&amp; (insertAfter == footerFirstLine))" />
    <mutant id="mutant_7460" viable="false" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_VER))" to="((prefix + (WalkEncryption.JETS3T_CRYPTO_VER)) - 1)" />
    <mutant id="mutant_8791" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((partsLength &lt; 3) || ((partsLength &amp; 1) == 0)) || (!(&quot;ago&quot;.equals(parts[((parts.length) - 1)])))" to="!(((partsLength &lt; 3) || ((partsLength &amp; 1) == 0)) || (!(&quot;ago&quot;.equals(parts[((parts.length) - 1)]))))" />
    <mutant id="mutant_8790" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 1)" to="(((parts.length) - 1) + 1)" />
    <mutant id="mutant_6130" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="((timeout * 1000) * -1)" />
    <mutant id="mutant_7462" viable="true" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="((prefix + (WalkEncryption.JETS3T_CRYPTO_ALG)) + 1)" />
    <mutant id="mutant_8793" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 2)" to="(((parts.length) - 2) * -1)" />
    <mutant id="mutant_6131" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="((timeout * 1000) + 1)" />
    <mutant id="mutant_7461" viable="true" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_VER))" to="((prefix + (WalkEncryption.JETS3T_CRYPTO_VER)) + 1)" />
    <mutant id="mutant_8792" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 2)" to="(((parts.length) - 2) + 1)" />
    <mutant id="mutant_6132" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="((timeout * 1000) - 1)" />
    <mutant id="mutant_7464" viable="false" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="((prefix + (WalkEncryption.JETS3T_CRYPTO_ALG)) * -1)" />
    <mutant id="mutant_8795" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_6133" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(nul + 1)" to="((nul + 1) * -1)" />
    <mutant id="mutant_7463" viable="false" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="((prefix + (WalkEncryption.JETS3T_CRYPTO_ALG)) - 1)" />
    <mutant id="mutant_8794" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 2)" to="(((parts.length) - 2) - 1)" />
    <mutant id="mutant_6123" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.endOut()" from="(outNeedsEnd) &amp;&amp; ((out) != null)" to="!((outNeedsEnd) &amp;&amp; ((out) != null))" />
    <mutant id="mutant_7455" viable="true" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="(((i.getClass().getName()) + &quot;:&quot;) + 1)" />
    <mutant id="mutant_8786" viable="false" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) + (dateTimeInstance2.format(ident.getWhen()))" to="(((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) + (dateTimeInstance2.format(ident.getWhen()))) - 1" />
    <mutant id="mutant_6124" viable="false" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="(((caller.getName()) + &quot;-Timer&quot;) * -1)" />
    <mutant id="mutant_7454" viable="false" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="(((i.getClass().getName()) + &quot;:&quot;) - 1)" />
    <mutant id="mutant_8785" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) + (dateTimeInstance2.format(ident.getWhen()))" to="(((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) + (dateTimeInstance2.format(ident.getWhen()))) + 1" />
    <mutant id="mutant_6125" viable="false" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="(((caller.getName()) + &quot;-Timer&quot;) - 1)" />
    <mutant id="mutant_7457" viable="false" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="((((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText())) - 1)" />
    <mutant id="mutant_8788" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 1)" to="(((parts.length) - 1) * -1)" />
    <mutant id="mutant_6126" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="(((caller.getName()) + &quot;-Timer&quot;) + 1)" />
    <mutant id="mutant_7456" viable="false" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="((((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText())) * -1)" />
    <mutant id="mutant_8787" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((partsLength &lt; 3) || ((partsLength &amp; 1) == 0))" to="(!((partsLength &lt; 3) || ((partsLength &amp; 1) == 0)))" />
    <mutant id="mutant_6127" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="((timeout * 1000) * -1)" />
    <mutant id="mutant_7459" viable="false" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_VER))" to="((prefix + (WalkEncryption.JETS3T_CRYPTO_VER)) * -1)" />
    <mutant id="mutant_6128" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="((timeout * 1000) + 1)" />
    <mutant id="mutant_7458" viable="true" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="((((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText())) + 1)" />
    <mutant id="mutant_8789" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 1)" to="(((parts.length) - 1) - 1)" />
    <mutant id="mutant_6129" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="((timeout * 1000) - 1)" />
    <mutant id="mutant_8780" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((ident.getWhen().getTime()) / 1000)" to="(((ident.getWhen().getTime()) / 1000) * -1)" />
    <mutant id="mutant_7451" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((GitProtocolConstants.OPTION_AGENT.length()) + 1)" to="(((GitProtocolConstants.OPTION_AGENT.length()) + 1) * -1)" />
    <mutant id="mutant_8782" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;)" to="(((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) + 1)" />
    <mutant id="mutant_6120" viable="true" in="org.eclipse.jgit.transport.AmazonS3.putImpl(java.lang.String,java.lang.String,byte[],org.eclipse.jgit.util.TemporaryBuffer,org.eclipse.jgit.lib.ProgressMonitor,java.lang.String)" from="((int)(len / 1024))" to="(((int)((len / 1024))) - 1)" />
    <mutant id="mutant_7450" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((GitProtocolConstants.OPTION_AGENT.length()) + 1)" to="(((GitProtocolConstants.OPTION_AGENT.length()) + 1) - 1)" />
    <mutant id="mutant_8781" viable="false" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;)" to="(((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) - 1)" />
    <mutant id="mutant_6121" viable="true" in="org.eclipse.jgit.transport.AmazonS3.putImpl(java.lang.String,java.lang.String,byte[],org.eclipse.jgit.util.TemporaryBuffer,org.eclipse.jgit.lib.ProgressMonitor,java.lang.String)" from="((int)(len / 1024))" to="(((int)((len / 1024))) + 1)" />
    <mutant id="mutant_7453" viable="false" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="(((i.getClass().getName()) + &quot;:&quot;) * -1)" />
    <mutant id="mutant_8784" viable="false" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) + (dateTimeInstance2.format(ident.getWhen()))" to="(((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) + (dateTimeInstance2.format(ident.getWhen()))) * -1" />
    <mutant id="mutant_6122" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.addUserAgentCapability(java.lang.StringBuilder)" from="(a != null) &amp;&amp; (UserAgent.hasAgent(remoteCapablities))" to="!((a != null) &amp;&amp; (UserAgent.hasAgent(remoteCapablities)))" />
    <mutant id="mutant_7452" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((GitProtocolConstants.OPTION_AGENT.length()) + 1)" to="(((GitProtocolConstants.OPTION_AGENT.length()) + 1) + 1)" />
    <mutant id="mutant_8783" viable="false" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;)" to="(((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) * -1)" />
    <mutant id="mutant_6112" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(&quot;AWS &quot; + (publicKey))" to="((&quot;AWS &quot; + (publicKey)) * -1)" />
    <mutant id="mutant_7444" viable="false" in="org.eclipse.jgit.transport.UserAgent.computeUserAgent()" from="(&quot;JGit/&quot; + (org.eclipse.jgit.transport.UserAgent.computeVersion()))" to="((&quot;JGit/&quot; + (org.eclipse.jgit.transport.UserAgent.computeVersion())) * -1)" />
    <mutant id="mutant_8775" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 % 60" to="(offset2 % 60) - 1" />
    <mutant id="mutant_6113" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;)" to="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) * -1)" />
    <mutant id="mutant_7443" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) &gt; 0) &amp;&amp; ((b.charAt(((b.length()) - 1))) == '.')" to="!(((b.length()) &gt; 0) &amp;&amp; ((b.charAt(((b.length()) - 1))) == '.'))" />
    <mutant id="mutant_8774" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 / 60" to="(offset2 / 60) + 1" />
    <mutant id="mutant_6114" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;)" to="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) - 1)" />
    <mutant id="mutant_7446" viable="true" in="org.eclipse.jgit.transport.UserAgent.computeUserAgent()" from="(&quot;JGit/&quot; + (org.eclipse.jgit.transport.UserAgent.computeVersion()))" to="((&quot;JGit/&quot; + (org.eclipse.jgit.transport.UserAgent.computeVersion())) + 1)" />
    <mutant id="mutant_8777" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 % 60" to="(offset2 % 60) + 1" />
    <mutant id="mutant_6115" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;)" to="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) + 1)" />
    <mutant id="mutant_7445" viable="false" in="org.eclipse.jgit.transport.UserAgent.computeUserAgent()" from="(&quot;JGit/&quot; + (org.eclipse.jgit.transport.UserAgent.computeVersion()))" to="((&quot;JGit/&quot; + (org.eclipse.jgit.transport.UserAgent.computeVersion())) - 1)" />
    <mutant id="mutant_8776" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 % 60" to="(offset2 % 60) * -1" />
    <mutant id="mutant_6116" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) + sec)" to="((((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) + sec) * -1)" />
    <mutant id="mutant_7448" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length())))" to="(!((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length()))))" />
    <mutant id="mutant_8779" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((ident.getWhen().getTime()) / 1000)" to="(((ident.getWhen().getTime()) / 1000) - 1)" />
    <mutant id="mutant_6117" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) + sec)" to="((((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) + sec) - 1)" />
    <mutant id="mutant_7447" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="(options == null) || (options.isEmpty())" to="!((options == null) || (options.isEmpty()))" />
    <mutant id="mutant_8778" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((ident.getWhen().getTime()) / 1000)" to="(((ident.getWhen().getTime()) / 1000) + 1)" />
    <mutant id="mutant_6118" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) + sec)" to="((((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) + sec) + 1)" />
    <mutant id="mutant_6119" viable="true" in="org.eclipse.jgit.transport.AmazonS3.putImpl(java.lang.String,java.lang.String,byte[],org.eclipse.jgit.util.TemporaryBuffer,org.eclipse.jgit.lib.ProgressMonitor,java.lang.String)" from="((int)(len / 1024))" to="(((int)((len / 1024))) * -1)" />
    <mutant id="mutant_7449" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length()))) &amp;&amp; ((o.charAt(GitProtocolConstants.OPTION_AGENT.length())) == '=')" to="!(((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length()))) &amp;&amp; ((o.charAt(GitProtocolConstants.OPTION_AGENT.length())) == '='))" />
    <mutant id="mutant_7440" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) - 1)" to="(((b.length()) - 1) * -1)" />
    <mutant id="mutant_8771" viable="true" in="org.eclipse.jgit.util.FileUtils.mkdirs(java.io.File,boolean)" from="skipExisting &amp;&amp; (d.isDirectory())" to="!(skipExisting &amp;&amp; (d.isDirectory()))" />
    <mutant id="mutant_8770" viable="true" in="org.eclipse.jgit.util.FileUtils.mkdir(java.io.File,boolean)" from="skipExisting &amp;&amp; (d.isDirectory())" to="!(skipExisting &amp;&amp; (d.isDirectory()))" />
    <mutant id="mutant_6110" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(&quot;AWS &quot; + (publicKey))" to="((&quot;AWS &quot; + (publicKey)) - 1)" />
    <mutant id="mutant_7442" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) - 1)" to="(((b.length()) - 1) - 1)" />
    <mutant id="mutant_8773" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 / 60" to="(offset2 / 60) * -1" />
    <mutant id="mutant_6111" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(&quot;AWS &quot; + (publicKey))" to="((&quot;AWS &quot; + (publicKey)) + 1)" />
    <mutant id="mutant_7441" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) - 1)" to="(((b.length()) - 1) + 1)" />
    <mutant id="mutant_8772" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 / 60" to="(offset2 / 60) - 1" />
    <mutant id="mutant_6109" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((host.length()) - (domain.length())) - 1)" to="((((host.length()) - (domain.length())) - 1) + 1)" />
    <mutant id="mutant_6101" viable="false" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;) + tz" to="(((fmt.format(new java.util.Date())) + &quot; &quot;) + tz) - 1" />
    <mutant id="mutant_7433" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="(((timeout) * 1000) * -1)" />
    <mutant id="mutant_8764" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="((otherSegments.length) - 1)" to="(((otherSegments.length) - 1) - 1)" />
    <mutant id="mutant_6102" viable="true" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;) + tz" to="(((fmt.format(new java.util.Date())) + &quot; &quot;) + tz) + 1" />
    <mutant id="mutant_7432" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="(((caller.getName()) + &quot;-Timer&quot;) + 1)" />
    <mutant id="mutant_8763" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="((otherSegments.length) - 1)" to="(((otherSegments.length) - 1) * -1)" />
    <mutant id="mutant_6103" viable="true" in="org.eclipse.jgit.transport.AmazonS3.list(java.lang.String,java.lang.String)" from="((prefix.length()) &gt; 0) &amp;&amp; (!(prefix.endsWith(&quot;/&quot;)))" to="!(((prefix.length()) &gt; 0) &amp;&amp; (!(prefix.endsWith(&quot;/&quot;))))" />
    <mutant id="mutant_7435" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="(((timeout) * 1000) + 1)" />
    <mutant id="mutant_8766" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.SKIP_MISSING)) != 0) &amp;&amp; (!(fs.exists(f)))" to="!(((options &amp; (FileUtils.SKIP_MISSING)) != 0) &amp;&amp; (!(fs.exists(f))))" />
    <mutant id="mutant_6104" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((host.length()) - (domain.length()))" to="(((host.length()) - (domain.length())) * -1)" />
    <mutant id="mutant_7434" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="(((timeout) * 1000) - 1)" />
    <mutant id="mutant_8765" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="((otherSegments.length) - 1)" to="(((otherSegments.length) - 1) + 1)" />
    <mutant id="mutant_6105" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((host.length()) - (domain.length()))" to="(((host.length()) - (domain.length())) + 1)" />
    <mutant id="mutant_7437" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="(((timeout) * 1000) - 1)" />
    <mutant id="mutant_8768" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="delete &amp;&amp; (!(f.delete()))" to="!(delete &amp;&amp; (!(f.delete())))" />
    <mutant id="mutant_6106" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((host.length()) - (domain.length()))" to="(((host.length()) - (domain.length())) - 1)" />
    <mutant id="mutant_7436" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="(((timeout) * 1000) * -1)" />
    <mutant id="mutant_8767" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.RECURSIVE)) != 0) &amp;&amp; (fs.isDirectory(f))" to="!(((options &amp; (FileUtils.RECURSIVE)) != 0) &amp;&amp; (fs.isDirectory(f)))" />
    <mutant id="mutant_6107" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((host.length()) - (domain.length())) - 1)" to="((((host.length()) - (domain.length())) - 1) * -1)" />
    <mutant id="mutant_7439" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="(c &lt;= 32) || (c &gt;= 127)" to="!((c &lt;= 32) || (c &gt;= 127))" />
    <mutant id="mutant_6108" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((host.length()) - (domain.length())) - 1)" to="((((host.length()) - (domain.length())) - 1) - 1)" />
    <mutant id="mutant_7438" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="(((timeout) * 1000) + 1)" />
    <mutant id="mutant_8769" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.RETRY)) != 0) &amp;&amp; (fs.exists(f))" to="!(((options &amp; (FileUtils.RETRY)) != 0) &amp;&amp; (fs.exists(f)))" />
    <mutant id="mutant_8760" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="(commonPrefix &lt; (baseSegments.length)) &amp;&amp; (commonPrefix &lt; (otherSegments.length))" to="!((commonPrefix &lt; (baseSegments.length)) &amp;&amp; (commonPrefix &lt; (otherSegments.length)))" />
    <mutant id="mutant_7431" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="(((caller.getName()) + &quot;-Timer&quot;) - 1)" />
    <mutant id="mutant_8762" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="(!ignoreCase) &amp;&amp; (baseSegments[commonPrefix].equals(otherSegments[commonPrefix]))" to="!((!ignoreCase) &amp;&amp; (baseSegments[commonPrefix].equals(otherSegments[commonPrefix])))" />
    <mutant id="mutant_6100" viable="false" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;) + tz" to="(((fmt.format(new java.util.Date())) + &quot; &quot;) + tz) * -1" />
    <mutant id="mutant_7430" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="(((caller.getName()) + &quot;-Timer&quot;) * -1)" />
    <mutant id="mutant_8761" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="ignoreCase &amp;&amp; (baseSegments[commonPrefix].equalsIgnoreCase(otherSegments[commonPrefix]))" to="!(ignoreCase &amp;&amp; (baseSegments[commonPrefix].equalsIgnoreCase(otherSegments[commonPrefix])))" />
    <mutant id="mutant_7429" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="((&quot;ERR &quot; + (err.getMessage())) + &quot;\n&quot;)" to="(((&quot;ERR &quot; + (err.getMessage())) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_7422" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.getStatistics().getMessage()) + '\n'" to="((pw.getStatistics().getMessage()) + '\n') * -1" />
    <mutant id="mutant_8753" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.userHomeImpl()" from="(home == null) || ((home.length()) == 0)" to="!((home == null) || ((home.length()) == 0))" />
    <mutant id="mutant_7421" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.getStatistics().getMessage()) + '\n'" to="((pw.getStatistics().getMessage()) + '\n') + 1" />
    <mutant id="mutant_8752" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.resolve(java.io.File,java.lang.String)" from="(useCygPath != null) &amp;&amp; (useCygPath.equals(&quot;true&quot;))" to="!((useCygPath != null) &amp;&amp; (useCygPath.equals(&quot;true&quot;)))" />
    <mutant id="mutant_7424" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(&quot;ERR &quot; + (err.getMessage()))" to="((&quot;ERR &quot; + (err.getMessage())) - 1)" />
    <mutant id="mutant_8755" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="((4 + (args.length)) + 1)" />
    <mutant id="mutant_7423" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(!(err.isOutput())) &amp;&amp; ((err.getMessage()) != null)" to="!((!(err.isOutput())) &amp;&amp; ((err.getMessage()) != null))" />
    <mutant id="mutant_8754" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="((4 + (args.length)) - 1)" />
    <mutant id="mutant_7426" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(&quot;ERR &quot; + (err.getMessage()))" to="((&quot;ERR &quot; + (err.getMessage())) * -1)" />
    <mutant id="mutant_8757" viable="false" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="((cmd + &quot; \&quot;$@\&quot;&quot;) * -1)" />
    <mutant id="mutant_7425" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(&quot;ERR &quot; + (err.getMessage()))" to="((&quot;ERR &quot; + (err.getMessage())) + 1)" />
    <mutant id="mutant_8756" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="((4 + (args.length)) * -1)" />
    <mutant id="mutant_7428" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="((&quot;ERR &quot; + (err.getMessage())) + &quot;\n&quot;)" to="(((&quot;ERR &quot; + (err.getMessage())) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_8759" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="((cmd + &quot; \&quot;$@\&quot;&quot;) + 1)" />
    <mutant id="mutant_7427" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="((&quot;ERR &quot; + (err.getMessage())) + &quot;\n&quot;)" to="(((&quot;ERR &quot; + (err.getMessage())) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_8758" viable="false" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="((cmd + &quot; \&quot;$@\&quot;&quot;) - 1)" />
    <mutant id="mutant_6170" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(!receivedReady) || (!(noDone))" to="!((!receivedReady) || (!(noDone)))" />
    <mutant id="mutant_6171" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(resultsPending &gt; 0) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" to="!((resultsPending &gt; 0) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF)))" />
    <mutant id="mutant_6172" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStringLongTimeout()" from="(10 * (Math.max(sendTime, oldTimeout)))" to="((10 * (Math.max(sendTime, oldTimeout))) * -1)" />
    <mutant id="mutant_6173" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStringLongTimeout()" from="(10 * (Math.max(sendTime, oldTimeout)))" to="((10 * (Math.max(sendTime, oldTimeout))) - 1)" />
    <mutant id="mutant_6174" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStringLongTimeout()" from="(10 * (Math.max(sendTime, oldTimeout)))" to="((10 * (Math.max(sendTime, oldTimeout))) + 1)" />
    <mutant id="mutant_6175" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStatusReport(java.util.Map)" from="(refNameEnd + 1)" to="((refNameEnd + 1) - 1)" />
    <mutant id="mutant_6176" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStatusReport(java.util.Map)" from="(refNameEnd + 1)" to="((refNameEnd + 1) + 1)" />
    <mutant id="mutant_6177" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStatusReport(java.util.Map)" from="(refNameEnd + 1)" to="((refNameEnd + 1) * -1)" />
    <mutant id="mutant_6167" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;have &quot; + (c.getId().name())) + &quot;\n&quot;)" to="(((&quot;have &quot; + (c.getId().name())) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_7499" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;Get &quot; + (idxName.substring(0, 12))) + &quot;..idx&quot;)" to="(((&quot;Get &quot; + (idxName.substring(0, 12))) + &quot;..idx&quot;) - 1)" />
    <mutant id="mutant_6168" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(havesSent == 32) &amp;&amp; (!(statelessRPC))" to="!((havesSent == 32) &amp;&amp; (!(statelessRPC)))" />
    <mutant id="mutant_7498" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;Get &quot; + (idxName.substring(0, 12))) + &quot;..idx&quot;)" to="(((&quot;Get &quot; + (idxName.substring(0, 12))) + &quot;..idx&quot;) * -1)" />
    <mutant id="mutant_6169" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="receivedContinue &amp;&amp; (havesSinceLastContinue &gt; (BasePackFetchConnection.MAX_HAVES))" to="!(receivedContinue &amp;&amp; (havesSinceLastContinue &gt; (BasePackFetchConnection.MAX_HAVES)))" />
    <mutant id="mutant_7491" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.downloadPack(org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + (packName)" to="(&quot;pack/&quot; + (packName)) + 1" />
    <mutant id="mutant_6160" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(maxTime * 1000L)" to="((maxTime * 1000L) - 1)" />
    <mutant id="mutant_7490" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.downloadPack(org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + (packName)" to="(&quot;pack/&quot; + (packName)) - 1" />
    <mutant id="mutant_6161" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(c.has(ADVERTISED)) &amp;&amp; (!(c.has(COMMON)))" to="!((c.has(ADVERTISED)) &amp;&amp; (!(c.has(COMMON))))" />
    <mutant id="mutant_7493" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + (idxName))" to="((&quot;pack/&quot; + (idxName)) * -1)" />
    <mutant id="mutant_6162" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;have &quot; + (c.getId().name()))" to="((&quot;have &quot; + (c.getId().name())) - 1)" />
    <mutant id="mutant_7492" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + (idxName))" to="((&quot;pack/&quot; + (idxName)) - 1)" />
    <mutant id="mutant_6163" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;have &quot; + (c.getId().name()))" to="((&quot;have &quot; + (c.getId().name())) + 1)" />
    <mutant id="mutant_7495" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;Get &quot; + (idxName.substring(0, 12)))" to="((&quot;Get &quot; + (idxName.substring(0, 12))) * -1)" />
    <mutant id="mutant_6164" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;have &quot; + (c.getId().name()))" to="((&quot;have &quot; + (c.getId().name())) * -1)" />
    <mutant id="mutant_7494" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + (idxName))" to="((&quot;pack/&quot; + (idxName)) + 1)" />
    <mutant id="mutant_6165" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;have &quot; + (c.getId().name())) + &quot;\n&quot;)" to="(((&quot;have &quot; + (c.getId().name())) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_7497" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;Get &quot; + (idxName.substring(0, 12)))" to="((&quot;Get &quot; + (idxName.substring(0, 12))) + 1)" />
    <mutant id="mutant_6166" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;have &quot; + (c.getId().name())) + &quot;\n&quot;)" to="(((&quot;have &quot; + (c.getId().name())) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_7496" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;Get &quot; + (idxName.substring(0, 12)))" to="((&quot;Get &quot; + (idxName.substring(0, 12))) - 1)" />
    <mutant id="mutant_6156" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="(6 + (Constants.OBJECT_ID_STRING_LENGTH))" to="((6 + (Constants.OBJECT_ID_STRING_LENGTH)) + 1)" />
    <mutant id="mutant_7488" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((&quot;walk-&quot; + tn) + &quot;.walkidx&quot;)" to="(((&quot;walk-&quot; + tn) + &quot;.walkidx&quot;) * -1)" />
    <mutant id="mutant_6157" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="(6 + (Constants.OBJECT_ID_STRING_LENGTH))" to="((6 + (Constants.OBJECT_ID_STRING_LENGTH)) * -1)" />
    <mutant id="mutant_7487" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((&quot;walk-&quot; + tn) + &quot;.walkidx&quot;)" to="(((&quot;walk-&quot; + tn) + &quot;.walkidx&quot;) - 1)" />
    <mutant id="mutant_6158" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(maxTime * 1000L)" to="((maxTime * 1000L) + 1)" />
    <mutant id="mutant_6159" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(maxTime * 1000L)" to="((maxTime * 1000L) * -1)" />
    <mutant id="mutant_7489" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.downloadPack(org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + (packName)" to="(&quot;pack/&quot; + (packName)) * -1" />
    <mutant id="mutant_7480" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((tn.length()) - 4)" to="(((tn.length()) - 4) + 1)" />
    <mutant id="mutant_6150" viable="false" in="?" from="((2 * 32) * 46) + 8" to="(((2 * 32) * 46) + 8) + 1" />
    <mutant id="mutant_7482" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((tn.length()) - 4)" to="(((tn.length()) - 4) * -1)" />
    <mutant id="mutant_6151" viable="false" in="?" from="((2 * 32) * 46) + 8" to="(((2 * 32) * 46) + 8) * -1" />
    <mutant id="mutant_7481" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((tn.length()) - 4)" to="(((tn.length()) - 4) - 1)" />
    <mutant id="mutant_6152" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.enableCapabilities()" from="(statelessRPC) &amp;&amp; ((multiAck) != (GitProtocolConstants.MultiAck.DETAILED))" to="!((statelessRPC) &amp;&amp; ((multiAck) != (GitProtocolConstants.MultiAck.DETAILED)))" />
    <mutant id="mutant_7484" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(&quot;walk-&quot; + tn)" to="((&quot;walk-&quot; + tn) - 1)" />
    <mutant id="mutant_6153" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON)))" to="(!((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON))))" />
    <mutant id="mutant_7483" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(&quot;walk-&quot; + tn)" to="((&quot;walk-&quot; + tn) + 1)" />
    <mutant id="mutant_6154" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON))) &amp;&amp; (!(obj.has(STATE)))" to="!(((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON))) &amp;&amp; (!(obj.has(STATE))))" />
    <mutant id="mutant_7486" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((&quot;walk-&quot; + tn) + &quot;.walkidx&quot;)" to="(((&quot;walk-&quot; + tn) + &quot;.walkidx&quot;) + 1)" />
    <mutant id="mutant_6155" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="(6 + (Constants.OBJECT_ID_STRING_LENGTH))" to="((6 + (Constants.OBJECT_ID_STRING_LENGTH)) - 1)" />
    <mutant id="mutant_7485" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(&quot;walk-&quot; + tn)" to="((&quot;walk-&quot; + tn) * -1)" />
    <mutant id="mutant_6145" viable="false" in="?" from="(2 * 32)" to="((2 * 32) * -1)" />
    <mutant id="mutant_7477" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(packName.substring(0, ((packName.length()) - 5))) + &quot;.idx&quot;" to="((packName.substring(0, ((packName.length()) - 5))) + &quot;.idx&quot;) + 1" />
    <mutant id="mutant_6146" viable="false" in="?" from="((2 * 32) * 46)" to="(((2 * 32) * 46) + 1)" />
    <mutant id="mutant_7476" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((packName.length()) - 5)" to="(((packName.length()) - 5) + 1)" />
    <mutant id="mutant_6147" viable="false" in="?" from="((2 * 32) * 46)" to="(((2 * 32) * 46) - 1)" />
    <mutant id="mutant_7479" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(packName.substring(0, ((packName.length()) - 5))) + &quot;.idx&quot;" to="((packName.substring(0, ((packName.length()) - 5))) + &quot;.idx&quot;) - 1" />
    <mutant id="mutant_6148" viable="false" in="?" from="((2 * 32) * 46)" to="(((2 * 32) * 46) * -1)" />
    <mutant id="mutant_7478" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(packName.substring(0, ((packName.length()) - 5))) + &quot;.idx&quot;" to="((packName.substring(0, ((packName.length()) - 5))) + &quot;.idx&quot;) * -1" />
    <mutant id="mutant_6149" viable="false" in="?" from="((2 * 32) * 46) + 8" to="(((2 * 32) * 46) + 8) - 1" />
    <mutant id="mutant_7471" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="((JGitText.get().unsupportedEncryptionAlgorithm) + v)" to="(((JGitText.get().unsupportedEncryptionAlgorithm) + v) * -1)" />
    <mutant id="mutant_6140" viable="false" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(name + &quot;^{}&quot;)" to="((name + &quot;^{}&quot;) * -1)" />
    <mutant id="mutant_7470" viable="true" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="((p + (WalkEncryption.JETS3T_CRYPTO_ALG)) + 1)" />
    <mutant id="mutant_6141" viable="false" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(name + &quot;^{}&quot;)" to="((name + &quot;^{}&quot;) - 1)" />
    <mutant id="mutant_7473" viable="true" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="((JGitText.get().unsupportedEncryptionAlgorithm) + v)" to="(((JGitText.get().unsupportedEncryptionAlgorithm) + v) + 1)" />
    <mutant id="mutant_6142" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(name + &quot;^{}&quot;)" to="((name + &quot;^{}&quot;) + 1)" />
    <mutant id="mutant_7472" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="((JGitText.get().unsupportedEncryptionAlgorithm) + v)" to="(((JGitText.get().unsupportedEncryptionAlgorithm) + v) - 1)" />
    <mutant id="mutant_6143" viable="false" in="?" from="(2 * 32)" to="((2 * 32) - 1)" />
    <mutant id="mutant_7475" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((packName.length()) - 5)" to="(((packName.length()) - 5) - 1)" />
    <mutant id="mutant_6144" viable="false" in="?" from="(2 * 32)" to="((2 * 32) + 1)" />
    <mutant id="mutant_7474" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((packName.length()) - 5)" to="(((packName.length()) - 5) * -1)" />
    <mutant id="mutant_6134" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(nul + 1)" to="((nul + 1) + 1)" />
    <mutant id="mutant_7466" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_VER))" to="((p + (WalkEncryption.JETS3T_CRYPTO_VER)) - 1)" />
    <mutant id="mutant_8797" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_6135" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(nul + 1)" to="((nul + 1) - 1)" />
    <mutant id="mutant_7465" viable="true" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_VER))" to="((p + (WalkEncryption.JETS3T_CRYPTO_VER)) + 1)" />
    <mutant id="mutant_8796" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_6136" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(avail.isEmpty()) &amp;&amp; (name.equals(&quot;capabilities^{}&quot;))" to="!((avail.isEmpty()) &amp;&amp; (name.equals(&quot;capabilities^{}&quot;)))" />
    <mutant id="mutant_7468" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="((p + (WalkEncryption.JETS3T_CRYPTO_ALG)) * -1)" />
    <mutant id="mutant_8799" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_6137" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="((name.length()) - 3)" to="(((name.length()) - 3) * -1)" />
    <mutant id="mutant_7467" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_VER))" to="((p + (WalkEncryption.JETS3T_CRYPTO_VER)) * -1)" />
    <mutant id="mutant_8798" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_6138" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="((name.length()) - 3)" to="(((name.length()) - 3) - 1)" />
    <mutant id="mutant_6139" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="((name.length()) - 3)" to="(((name.length()) - 3) + 1)" />
    <mutant id="mutant_7469" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="((p + (WalkEncryption.JETS3T_CRYPTO_ALG)) - 1)" />
    <mutant id="mutant_2608" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.get(int)" from="(block &lt; (words.length)) &amp;&amp; (((words[block]) &amp; (BitSet.mask(position))) != 0)" to="!((block &lt; (words.length)) &amp;&amp; (((words[block]) &amp; (BitSet.mask(position))) != 0))" />
    <mutant id="mutant_2609" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.toEWAHCompressedBitmap()" from="64 - (Long.numberOfLeadingZeros(lastNonEmptyWord))" to="(64 - (Long.numberOfLeadingZeros(lastNonEmptyWord))) * -1" />
    <mutant id="mutant_3939" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="((all.find(prefix)) + 1)" to="(((all.find(prefix)) + 1) + 1)" />
    <mutant id="mutant_3930" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="((maxMem / 4) * -1)" />
    <mutant id="mutant_2606" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet(int)" from="(org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) + 1" to="((org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) + 1) * -1" />
    <mutant id="mutant_3938" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="((all.find(prefix)) + 1)" to="(((all.find(prefix)) + 1) * -1)" />
    <mutant id="mutant_2607" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet(int)" from="(org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) + 1" to="((org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) + 1) - 1" />
    <mutant id="mutant_3937" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="((all.find(prefix)) + 1)" to="(((all.find(prefix)) + 1) - 1)" />
    <mutant id="mutant_2604" viable="true" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;) + (org.eclipse.jgit.lib.UserConfig.system().getHostname())" to="((username + &quot;@&quot;) + (org.eclipse.jgit.lib.UserConfig.system().getHostname())) + 1" />
    <mutant id="mutant_3936" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="refName + '/'" to="(refName + '/') * -1" />
    <mutant id="mutant_2605" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet(int)" from="(org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) + 1" to="((org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) + 1) + 1" />
    <mutant id="mutant_3935" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="refName + '/'" to="(refName + '/') + 1" />
    <mutant id="mutant_2602" viable="false" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;) + (org.eclipse.jgit.lib.UserConfig.system().getHostname())" to="((username + &quot;@&quot;) + (org.eclipse.jgit.lib.UserConfig.system().getHostname())) - 1" />
    <mutant id="mutant_3934" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="refName + '/'" to="(refName + '/') - 1" />
    <mutant id="mutant_2603" viable="false" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;) + (org.eclipse.jgit.lib.UserConfig.system().getHostname())" to="((username + &quot;@&quot;) + (org.eclipse.jgit.lib.UserConfig.system().getHostname())) * -1" />
    <mutant id="mutant_3933" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="((lastSlash - 1) - 1)" />
    <mutant id="mutant_2600" viable="false" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;)" to="((username + &quot;@&quot;) - 1)" />
    <mutant id="mutant_3932" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="((lastSlash - 1) * -1)" />
    <mutant id="mutant_2601" viable="false" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;)" to="((username + &quot;@&quot;) * -1)" />
    <mutant id="mutant_3931" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="((lastSlash - 1) + 1)" />
    <mutant id="mutant_3929" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="((maxMem / 4) + 1)" />
    <mutant id="mutant_3928" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="((maxMem / 4) - 1)" />
    <mutant id="mutant_3927" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions()" from="(10 * (DfsReaderOptions.MiB))" to="((10 * (DfsReaderOptions.MiB)) * -1)" />
    <mutant id="mutant_3926" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions()" from="(10 * (DfsReaderOptions.MiB))" to="((10 * (DfsReaderOptions.MiB)) - 1)" />
    <mutant id="mutant_3925" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions()" from="(10 * (DfsReaderOptions.MiB))" to="((10 * (DfsReaderOptions.MiB)) + 1)" />
    <mutant id="mutant_3924" viable="false" in="?" from="1024 * (DfsReaderOptions.KiB)" to="(1024 * (DfsReaderOptions.KiB)) - 1" />
    <mutant id="mutant_3923" viable="false" in="?" from="1024 * (DfsReaderOptions.KiB)" to="(1024 * (DfsReaderOptions.KiB)) * -1" />
    <mutant id="mutant_3922" viable="false" in="?" from="1024 * (DfsReaderOptions.KiB)" to="(1024 * (DfsReaderOptions.KiB)) + 1" />
    <mutant id="mutant_3921" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.pin(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long)" from="(b == null) || (!(b.contains(pack.key, position)))" to="!((b == null) || (!(b.contains(pack.key, position))))" />
    <mutant id="mutant_3920" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage()))" to="!((pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage())))" />
    <mutant id="mutant_6192" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="(((line.length()) - 1) - 1)" />
    <mutant id="mutant_6193" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line != null) &amp;&amp; (!(line.isEmpty()))) &amp;&amp; ((line.charAt(((line.length()) - 1))) == '\n')" to="!(((line != null) &amp;&amp; (!(line.isEmpty()))) &amp;&amp; ((line.charAt(((line.length()) - 1))) == '\n'))" />
    <mutant id="mutant_6194" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="(((line.length()) - 1) + 1)" />
    <mutant id="mutant_6195" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="(((line.length()) - 1) * -1)" />
    <mutant id="mutant_6196" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="(((line.length()) - 1) - 1)" />
    <mutant id="mutant_3919" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(noGarbage &amp;&amp; (pack.isGarbage()))" to="(!(noGarbage &amp;&amp; (pack.isGarbage())))" />
    <mutant id="mutant_6197" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(sideBand) &amp;&amp; (!(quiet))" to="!((sideBand) &amp;&amp; (!(quiet)))" />
    <mutant id="mutant_3918" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(pos + (cnt - 1))" to="((pos + (cnt - 1)) - 1)" />
    <mutant id="mutant_6198" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(baseObjects != null) &amp;&amp; (!(baseObjects.isEmpty()))" to="!((baseObjects != null) &amp;&amp; (!(baseObjects.isEmpty())))" />
    <mutant id="mutant_3917" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(pos + (cnt - 1))" to="((pos + (cnt - 1)) * -1)" />
    <mutant id="mutant_6199" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="(!((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))))" />
    <mutant id="mutant_6190" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="(((line.length()) - 1) + 1)" />
    <mutant id="mutant_6191" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="(((line.length()) - 1) * -1)" />
    <mutant id="mutant_3916" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(pos + (cnt - 1))" to="((pos + (cnt - 1)) + 1)" />
    <mutant id="mutant_6189" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line != null) &amp;&amp; (!(line.isEmpty())))" to="(!((line != null) &amp;&amp; (!(line.isEmpty()))))" />
    <mutant id="mutant_3915" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(cnt - 1)" to="((cnt - 1) * -1)" />
    <mutant id="mutant_3914" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(cnt - 1)" to="((cnt - 1) - 1)" />
    <mutant id="mutant_3913" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(cnt - 1)" to="((cnt - 1) + 1)" />
    <mutant id="mutant_3912" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="noGarbage &amp;&amp; (pack.isGarbage())" to="!(noGarbage &amp;&amp; (pack.isGarbage()))" />
    <mutant id="mutant_3911" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="(inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="!((inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length))))" />
    <mutant id="mutant_3910" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="(headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="(!(headerOnly &amp;&amp; (dstoff == (dstbuf.length))))" />
    <mutant id="mutant_6181" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$FirstLine(java.lang.String)" from="(nul + 1)" to="((nul + 1) - 1)" />
    <mutant id="mutant_6182" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" to="!((checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false)))" />
    <mutant id="mutant_6183" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" to="!((checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false)))" />
    <mutant id="mutant_6184" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, false))" to="!((checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, false)))" />
    <mutant id="mutant_3909" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="(((dstbuf.length) - dstoff) + 1)" />
    <mutant id="mutant_6185" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, false))" to="!((checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, false)))" />
    <mutant id="mutant_3908" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="(((dstbuf.length) - dstoff) * -1)" />
    <mutant id="mutant_6186" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.anyRejects()" from="((cmd.getResult()) != (ReceiveCommand.Result.NOT_ATTEMPTED)) &amp;&amp; ((cmd.getResult()) != (ReceiveCommand.Result.OK))" to="!(((cmd.getResult()) != (ReceiveCommand.Result.NOT_ATTEMPTED)) &amp;&amp; ((cmd.getResult()) != (ReceiveCommand.Result.OK)))" />
    <mutant id="mutant_3907" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="(((dstbuf.length) - dstoff) - 1)" />
    <mutant id="mutant_6187" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.needCheckConnectivity()" from="((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable()))" to="(!((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable())))" />
    <mutant id="mutant_3906" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="cnt - need" to="(cnt - need) * -1" />
    <mutant id="mutant_6188" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.needCheckConnectivity()" from="((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable())) || (!(getClientShallowCommits().isEmpty()))" to="!(((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable())) || (!(getClientShallowCommits().isEmpty())))" />
    <mutant id="mutant_6180" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$FirstLine(java.lang.String)" from="(nul + 1)" to="((nul + 1) + 1)" />
    <mutant id="mutant_3905" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="cnt - need" to="(cnt - need) - 1" />
    <mutant id="mutant_6178" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(!(capableDeleteRefs)) &amp;&amp; (rru.isDelete())" to="!((!(capableDeleteRefs)) &amp;&amp; (rru.isDelete()))" />
    <mutant id="mutant_3904" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="cnt - need" to="(cnt - need) + 1" />
    <mutant id="mutant_6179" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$FirstLine(java.lang.String)" from="(nul + 1)" to="((nul + 1) * -1)" />
    <mutant id="mutant_3903" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="(0 &lt; need) &amp;&amp; (position &lt; length)" to="!((0 &lt; need) &amp;&amp; (position &lt; length))" />
    <mutant id="mutant_3902" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="(0 &lt;= length) &amp;&amp; (length &lt;= position)" to="!((0 &lt;= length) &amp;&amp; (length &lt;= position))" />
    <mutant id="mutant_3901" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="(pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage()))" to="!((pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage())))" />
    <mutant id="mutant_3900" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="(noGarbage &amp;&amp; (pack.isGarbage()))" to="(!(noGarbage &amp;&amp; (pack.isGarbage())))" />
    <mutant id="mutant_1311" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.getSymRef(java.io.File,java.io.File,org.eclipse.jgit.util.FS)" from="(lineEnd - 1)" to="((lineEnd - 1) - 1)" />
    <mutant id="mutant_2642" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.setInput(int,java.util.zip.Inflater)" from="(array.length) - pos" to="((array.length) - pos) + 1" />
    <mutant id="mutant_3974" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.commitPackImpl(java.util.Collection,java.util.Collection)" from="((desc.size()) + (packs.size()))" to="(((desc.size()) + (packs.size())) - 1)" />
    <mutant id="mutant_1312" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.getSymRef(java.io.File,java.io.File,org.eclipse.jgit.util.FS)" from="(lineEnd - 1)" to="((lineEnd - 1) * -1)" />
    <mutant id="mutant_2643" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.setInput(int,java.util.zip.Inflater)" from="(array.length) - pos" to="((array.length) - pos) - 1" />
    <mutant id="mutant_3973" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.commitPackImpl(java.util.Collection,java.util.Collection)" from="((desc.size()) + (packs.size()))" to="(((desc.size()) + (packs.size())) + 1)" />
    <mutant id="mutant_2640" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.copy(int,byte[],int,int)" from="((array.length) - p)" to="(((array.length) - p) - 1)" />
    <mutant id="mutant_3972" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.commitPackImpl(java.util.Collection,java.util.Collection)" from="((desc.size()) + (packs.size()))" to="(((desc.size()) + (packs.size())) * -1)" />
    <mutant id="mutant_1310" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':')) &amp;&amp; ((ref[7]) == ' ')" to="!(((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':')) &amp;&amp; ((ref[7]) == ' '))" />
    <mutant id="mutant_2641" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.copy(int,byte[],int,int)" from="((array.length) - p)" to="(((array.length) - p) * -1)" />
    <mutant id="mutant_3971" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(((&quot;pack-&quot; + id) + &quot;-&quot;) + (source.name()))" to="((((&quot;pack-&quot; + id) + &quot;-&quot;) + (source.name())) + 1)" />
    <mutant id="mutant_3970" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(((&quot;pack-&quot; + id) + &quot;-&quot;) + (source.name()))" to="((((&quot;pack-&quot; + id) + &quot;-&quot;) + (source.name())) - 1)" />
    <mutant id="mutant_1319" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.getPrefixes(java.lang.String)" from="(p1 + 1)" to="((p1 + 1) - 1)" />
    <mutant id="mutant_1317" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupWorkTree()" from="(!(isBare())) &amp;&amp; ((getWorkTree()) == null)" to="!((!(isBare())) &amp;&amp; ((getWorkTree()) == null))" />
    <mutant id="mutant_2648" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) * -1)" />
    <mutant id="mutant_1318" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.getPrefixes(java.lang.String)" from="(p1 + 1)" to="((p1 + 1) + 1)" />
    <mutant id="mutant_2649" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) - 1)" />
    <mutant id="mutant_3979" viable="true" in="org.eclipse.jgit.internal.storage.dfs.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="(((objectOffset) + (headerLength)) - 1)" />
    <mutant id="mutant_1315" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupGitDir()" from="((getGitDir()) == null) &amp;&amp; ((getWorkTree()) != null)" to="!(((getGitDir()) == null) &amp;&amp; ((getWorkTree()) != null))" />
    <mutant id="mutant_2646" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) - 1)" />
    <mutant id="mutant_3978" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$Out.read(long,java.nio.ByteBuffer)" from="((d.length) - ((int)(position)))" to="(((d.length) - ((int)(position))) - 1)" />
    <mutant id="mutant_1316" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupInternals()" from="((getObjectDirectory()) == null) &amp;&amp; ((getGitDir()) != null)" to="!(((getObjectDirectory()) == null) &amp;&amp; ((getGitDir()) != null))" />
    <mutant id="mutant_2647" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) + 1)" />
    <mutant id="mutant_3977" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$Out.read(long,java.nio.ByteBuffer)" from="((d.length) - ((int)(position)))" to="(((d.length) - ((int)(position))) * -1)" />
    <mutant id="mutant_1313" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.getSymRef(java.io.File,java.io.File,org.eclipse.jgit.util.FS)" from="(lineEnd - 1)" to="((lineEnd - 1) + 1)" />
    <mutant id="mutant_2644" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.setInput(int,java.util.zip.Inflater)" from="(array.length) - pos" to="((array.length) - pos) * -1" />
    <mutant id="mutant_3976" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$Out.read(long,java.nio.ByteBuffer)" from="((d.length) - ((int)(position)))" to="(((d.length) - ((int)(position))) + 1)" />
    <mutant id="mutant_1314" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.requireGitDirOrWorkTree()" from="((getGitDir()) == null) &amp;&amp; ((getWorkTree()) == null)" to="!(((getGitDir()) == null) &amp;&amp; ((getWorkTree()) == null))" />
    <mutant id="mutant_2645" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) * -1)" />
    <mutant id="mutant_3975" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemRefDatabase.compareAndRemove(org.eclipse.jgit.lib.Ref)" from="(cur != null) &amp;&amp; (eq(cur, oldRef))" to="!((cur != null) &amp;&amp; (eq(cur, oldRef)))" />
    <mutant id="mutant_1300" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="(o &gt;= p) &amp;&amp; (w != 0)" to="!((o &gt;= p) &amp;&amp; (w != 0))" />
    <mutant id="mutant_2631" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="(sizeInBits / (EWAHCompressedBitmap.wordinbits))" to="((sizeInBits / (EWAHCompressedBitmap.wordinbits)) + 1)" />
    <mutant id="mutant_3963" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(&quot;pack-&quot; + id)" to="((&quot;pack-&quot; + id) - 1)" />
    <mutant id="mutant_1301" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.findGitDir(java.io.File)" from="((current != null) &amp;&amp; ((ceilingDirectories) != null))" to="(!((current != null) &amp;&amp; ((ceilingDirectories) != null)))" />
    <mutant id="mutant_2632" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="(sizeInBits / (EWAHCompressedBitmap.wordinbits))" to="((sizeInBits / (EWAHCompressedBitmap.wordinbits)) - 1)" />
    <mutant id="mutant_3962" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$ByteArrayReadableChannel.read(java.nio.ByteBuffer)" from="((data.length) - (position))" to="(((data.length) - (position)) - 1)" />
    <mutant id="mutant_3961" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$ByteArrayReadableChannel.read(java.nio.ByteBuffer)" from="((data.length) - (position))" to="(((data.length) - (position)) * -1)" />
    <mutant id="mutant_2630" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="(sizeInBits / (EWAHCompressedBitmap.wordinbits))" to="((sizeInBits / (EWAHCompressedBitmap.wordinbits)) * -1)" />
    <mutant id="mutant_3960" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$ByteArrayReadableChannel.read(java.nio.ByteBuffer)" from="((data.length) - (position))" to="(((data.length) - (position)) + 1)" />
    <mutant id="mutant_1308" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r'))" to="(!(((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')))" />
    <mutant id="mutant_2639" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.copy(int,byte[],int,int)" from="((array.length) - p)" to="(((array.length) - p) + 1)" />
    <mutant id="mutant_1309" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':'))" to="(!((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':')))" />
    <mutant id="mutant_1306" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd'))" to="(!(((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')))" />
    <mutant id="mutant_2637" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="((1L &lt;&lt; remaining) - 1)" to="(((1L &lt;&lt; remaining) - 1) + 1)" />
    <mutant id="mutant_3969" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(((&quot;pack-&quot; + id) + &quot;-&quot;) + (source.name()))" to="((((&quot;pack-&quot; + id) + &quot;-&quot;) + (source.name())) * -1)" />
    <mutant id="mutant_1307" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i'))" to="(!((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')))" />
    <mutant id="mutant_2638" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="((1L &lt;&lt; remaining) - 1)" to="(((1L &lt;&lt; remaining) - 1) * -1)" />
    <mutant id="mutant_3968" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="((&quot;pack-&quot; + id) + &quot;-&quot;)" to="(((&quot;pack-&quot; + id) + &quot;-&quot;) - 1)" />
    <mutant id="mutant_1304" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i'))" to="(!(((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')))" />
    <mutant id="mutant_2635" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="sizeInBits % (EWAHCompressedBitmap.wordinbits)" to="(sizeInBits % (EWAHCompressedBitmap.wordinbits)) - 1" />
    <mutant id="mutant_3967" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="((&quot;pack-&quot; + id) + &quot;-&quot;)" to="(((&quot;pack-&quot; + id) + &quot;-&quot;) + 1)" />
    <mutant id="mutant_1305" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't'))" to="(!((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')))" />
    <mutant id="mutant_2636" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="((1L &lt;&lt; remaining) - 1)" to="(((1L &lt;&lt; remaining) - 1) - 1)" />
    <mutant id="mutant_3966" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="((&quot;pack-&quot; + id) + &quot;-&quot;)" to="(((&quot;pack-&quot; + id) + &quot;-&quot;) * -1)" />
    <mutant id="mutant_1302" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.findGitDir(java.io.File)" from="((current != null) &amp;&amp; ((ceilingDirectories) != null)) &amp;&amp; (ceilingDirectories.contains(current))" to="!(((current != null) &amp;&amp; ((ceilingDirectories) != null)) &amp;&amp; (ceilingDirectories.contains(current)))" />
    <mutant id="mutant_2633" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="sizeInBits % (EWAHCompressedBitmap.wordinbits)" to="(sizeInBits % (EWAHCompressedBitmap.wordinbits)) + 1" />
    <mutant id="mutant_3965" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(&quot;pack-&quot; + id)" to="((&quot;pack-&quot; + id) + 1)" />
    <mutant id="mutant_1303" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.build()" from="(isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists()))" to="!((isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists())))" />
    <mutant id="mutant_2634" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="sizeInBits % (EWAHCompressedBitmap.wordinbits)" to="(sizeInBits % (EWAHCompressedBitmap.wordinbits)) * -1" />
    <mutant id="mutant_3964" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(&quot;pack-&quot; + id)" to="((&quot;pack-&quot; + id) * -1)" />
    <mutant id="mutant_2620" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.remove(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="((position + (BitmapIndexImpl.EXTRA_BITS)) * -1)" />
    <mutant id="mutant_3952" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRepository.create(boolean)" from="(Constants.R_HEADS) + (Constants.MASTER)" to="((Constants.R_HEADS) + (Constants.MASTER)) + 1" />
    <mutant id="mutant_2621" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.set(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="((position + (BitmapIndexImpl.EXTRA_BITS)) + 1)" />
    <mutant id="mutant_3951" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepository.create(boolean)" from="(Constants.R_HEADS) + (Constants.MASTER)" to="((Constants.R_HEADS) + (Constants.MASTER)) - 1" />
    <mutant id="mutant_3950" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.newUpdate(java.lang.String,boolean)" from="detach &amp;&amp; (ref.isSymbolic())" to="!(detach &amp;&amp; (ref.isSymbolic()))" />
    <mutant id="mutant_2628" viable="false" in="?" from="10 * 1024" to="(10 * 1024) * -1" />
    <mutant id="mutant_2629" viable="false" in="?" from="10 * 1024" to="(10 * 1024) - 1" />
    <mutant id="mutant_3959" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) + &quot;]&quot;" to="((&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_2626" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder.removeAllOrNone(org.eclipse.jgit.internal.storage.file.PackBitmapIndex)" from="(ii.hasNext()) &amp;&amp; ((ii.next()) &lt; (indexObjectCount))" to="!((ii.hasNext()) &amp;&amp; ((ii.next()) &lt; (indexObjectCount)))" />
    <mutant id="mutant_3958" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) + &quot;]&quot;" to="((&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_2627" viable="false" in="?" from="10 * 1024" to="(10 * 1024) + 1" />
    <mutant id="mutant_3957" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) + &quot;]&quot;" to="((&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_2624" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.xor(com.googlecode.javaewah.EWAHCompressedBitmap)" from="((toAdd) != null) || ((toRemove) != null)" to="!(((toAdd) != null) || ((toRemove) != null))" />
    <mutant id="mutant_3956" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName()))" to="((&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) - 1)" />
    <mutant id="mutant_2625" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder.contains(org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt;= position) &amp;&amp; (bitset.contains(position))" to="!((0 &lt;= position) &amp;&amp; (bitset.contains(position)))" />
    <mutant id="mutant_3955" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName()))" to="((&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) + 1)" />
    <mutant id="mutant_2622" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.set(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="((position + (BitmapIndexImpl.EXTRA_BITS)) - 1)" />
    <mutant id="mutant_3954" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName()))" to="((&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) * -1)" />
    <mutant id="mutant_2623" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.set(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="((position + (BitmapIndexImpl.EXTRA_BITS)) * -1)" />
    <mutant id="mutant_3953" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepository.create(boolean)" from="(Constants.R_HEADS) + (Constants.MASTER)" to="((Constants.R_HEADS) + (Constants.MASTER)) * -1" />
    <mutant id="mutant_2619" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.remove(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="((position + (BitmapIndexImpl.EXTRA_BITS)) - 1)" />
    <mutant id="mutant_3941" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRefs(java.lang.String)" from="(ref != null) &amp;&amp; ((ref.getObjectId()) != null)" to="!((ref != null) &amp;&amp; ((ref.getObjectId()) != null))" />
    <mutant id="mutant_2610" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.toEWAHCompressedBitmap()" from="64 - (Long.numberOfLeadingZeros(lastNonEmptyWord))" to="(64 - (Long.numberOfLeadingZeros(lastNonEmptyWord))) - 1" />
    <mutant id="mutant_3940" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(idx &lt; (all.size())) &amp;&amp; (all.get(idx).getName().startsWith(prefix))" to="!((idx &lt; (all.size())) &amp;&amp; (all.get(idx).getName().startsWith(prefix)))" />
    <mutant id="mutant_2617" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.andNot(com.googlecode.javaewah.EWAHCompressedBitmap)" from="((toAdd) != null) || ((toRemove) != null)" to="!(((toAdd) != null) || ((toRemove) != null))" />
    <mutant id="mutant_3949" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.resolve(org.eclipse.jgit.lib.Ref,int,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="((depth + 1) + 1)" />
    <mutant id="mutant_2618" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.remove(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="((position + (BitmapIndexImpl.EXTRA_BITS)) + 1)" />
    <mutant id="mutant_3948" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.resolve(org.eclipse.jgit.lib.Ref,int,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="((depth + 1) - 1)" />
    <mutant id="mutant_2615" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.contains(int)" from="((toRemove) != null) &amp;&amp; (toRemove.get(position))" to="!(((toRemove) != null) &amp;&amp; (toRemove.get(position)))" />
    <mutant id="mutant_3947" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.resolve(org.eclipse.jgit.lib.Ref,int,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="((depth + 1) * -1)" />
    <mutant id="mutant_2616" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.contains(int)" from="((toAdd) != null) &amp;&amp; (toAdd.get(position))" to="!(((toAdd) != null) &amp;&amp; (toAdd.get(position)))" />
    <mutant id="mutant_3946" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.peel(org.eclipse.jgit.lib.Ref)" from="(0 &lt;= idx) &amp;&amp; ((cur.ids.get(idx)) == oldLeaf)" to="!((0 &lt;= idx) &amp;&amp; ((cur.ids.get(idx)) == oldLeaf))" />
    <mutant id="mutant_2613" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.set(int)" from="2 * (org.eclipse.jgit.internal.storage.file.BitSet.block(position))" to="(2 * (org.eclipse.jgit.internal.storage.file.BitSet.block(position))) * -1" />
    <mutant id="mutant_3945" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.peel(org.eclipse.jgit.lib.Ref)" from="(oldLeaf.isPeeled()) || ((oldLeaf.getObjectId()) == null)" to="!((oldLeaf.isPeeled()) || ((oldLeaf.getObjectId()) == null))" />
    <mutant id="mutant_2614" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.set(int)" from="2 * (org.eclipse.jgit.internal.storage.file.BitSet.block(position))" to="(2 * (org.eclipse.jgit.internal.storage.file.BitSet.block(position))) - 1" />
    <mutant id="mutant_3944" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRef(java.lang.String)" from="(prefix + needle)" to="((prefix + needle) + 1)" />
    <mutant id="mutant_2611" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.toEWAHCompressedBitmap()" from="64 - (Long.numberOfLeadingZeros(lastNonEmptyWord))" to="(64 - (Long.numberOfLeadingZeros(lastNonEmptyWord))) + 1" />
    <mutant id="mutant_3943" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRef(java.lang.String)" from="(prefix + needle)" to="((prefix + needle) - 1)" />
    <mutant id="mutant_2612" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.set(int)" from="2 * (org.eclipse.jgit.internal.storage.file.BitSet.block(position))" to="(2 * (org.eclipse.jgit.internal.storage.file.BitSet.block(position))) + 1" />
    <mutant id="mutant_3942" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRef(java.lang.String)" from="(prefix + needle)" to="((prefix + needle) * -1)" />
    <mutant id="mutant_2690" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.GITDIR) + (getDirectory().getAbsolutePath()))" to="(((Constants.GITDIR) + (getDirectory().getAbsolutePath())) + 1)" />
    <mutant id="mutant_1355" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((r.length()) - 1)" to="(((r.length()) - 1) + 1)" />
    <mutant id="mutant_2686" viable="false" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="(((Constants.R_HEADS) + (Constants.MASTER)) * -1)" />
    <mutant id="mutant_1356" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((r.length()) - 1)" to="(((r.length()) - 1) - 1)" />
    <mutant id="mutant_2687" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="on &amp;&amp; (!off)" to="!(on &amp;&amp; (!off))" />
    <mutant id="mutant_1353" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((!inquote) &amp;&amp; ((r.length()) &gt; 0))" to="(!((!inquote) &amp;&amp; ((r.length()) &gt; 0)))" />
    <mutant id="mutant_2684" viable="false" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="(((Constants.R_HEADS) + (Constants.MASTER)) - 1)" />
    <mutant id="mutant_1354" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((r.length()) - 1)" to="(((r.length()) - 1) * -1)" />
    <mutant id="mutant_2685" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="(((Constants.R_HEADS) + (Constants.MASTER)) + 1)" />
    <mutant id="mutant_1351" viable="true" in="org.eclipse.jgit.lib.Config.getEnum(T[],java.lang.String,java.lang.String,java.lang.String,T)" from="(trueState != null) &amp;&amp; (falseState != null)" to="!((trueState != null) &amp;&amp; (falseState != null))" />
    <mutant id="mutant_2682" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare())))" to="(!((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare()))))" />
    <mutant id="mutant_1352" viable="true" in="org.eclipse.jgit.lib.Config.getInt(java.lang.String,java.lang.String,java.lang.String,int)" from="((Integer.MIN_VALUE) &lt;= val) &amp;&amp; (val &lt;= (Integer.MAX_VALUE))" to="!(((Integer.MIN_VALUE) &lt;= val) &amp;&amp; (val &lt;= (Integer.MAX_VALUE)))" />
    <mutant id="mutant_2683" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare()))) &amp;&amp; (getDirectory().getName().startsWith(&quot;.&quot;))" to="!(((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare()))) &amp;&amp; (getDirectory().getName().startsWith(&quot;.&quot;)))" />
    <mutant id="mutant_2680" viable="true" in="org.eclipse.jgit.internal.storage.file.DeltaBaseCache.get(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((e.provider) == pack) &amp;&amp; ((e.position) == position)" to="!(((e.provider) == pack) &amp;&amp; ((e.position) == position))" />
    <mutant id="mutant_1350" viable="false" in="?" from="1024 * (Config.MiB)" to="(1024 * (Config.MiB)) * -1" />
    <mutant id="mutant_2681" viable="true" in="org.eclipse.jgit.internal.storage.file.DeltaBaseCache.releaseMemory()" from="((openByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null)" to="!(((openByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null))" />
    <mutant id="mutant_1359" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="((';' == c) || ('#' == c))" to="(!((';' == c) || ('#' == c)))" />
    <mutant id="mutant_1357" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((!inquote) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; ((r.charAt(((r.length()) - 1))) == ' ')" to="!(((!inquote) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; ((r.charAt(((r.length()) - 1))) == ' '))" />
    <mutant id="mutant_2688" viable="false" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.GITDIR) + (getDirectory().getAbsolutePath()))" to="(((Constants.GITDIR) + (getDirectory().getAbsolutePath())) - 1)" />
    <mutant id="mutant_1358" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="!((' ' == c) || ('\t' == c))" />
    <mutant id="mutant_2689" viable="false" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.GITDIR) + (getDirectory().getAbsolutePath()))" to="(((Constants.GITDIR) + (getDirectory().getAbsolutePath())) * -1)" />
    <mutant id="mutant_1344" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.addParentId(org.eclipse.jgit.lib.AnyObjectId)" from="(parentIds.length) + 1" to="((parentIds.length) + 1) + 1" />
    <mutant id="mutant_2675" viable="false" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="(d + e)" to="((d + e) * -1)" />
    <mutant id="mutant_1345" viable="false" in="?" from="1024 * (Config.KiB)" to="(1024 * (Config.KiB)) * -1" />
    <mutant id="mutant_2676" viable="false" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="(d + e)" to="((d + e) - 1)" />
    <mutant id="mutant_1342" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.addParentId(org.eclipse.jgit.lib.AnyObjectId)" from="(parentIds.length) + 1" to="((parentIds.length) + 1) - 1" />
    <mutant id="mutant_2673" viable="true" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) - 1)" />
    <mutant id="mutant_1343" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.addParentId(org.eclipse.jgit.lib.AnyObjectId)" from="(parentIds.length) + 1" to="((parentIds.length) + 1) * -1" />
    <mutant id="mutant_2674" viable="true" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="(d + e)" to="((d + e) + 1)" />
    <mutant id="mutant_1340" viable="true" in="org.eclipse.jgit.lib.BranchTrackingStatus.of(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(Constants.R_HEADS) + shortBranchName" to="((Constants.R_HEADS) + shortBranchName) + 1" />
    <mutant id="mutant_2671" viable="true" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) + 1)" />
    <mutant id="mutant_1341" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.toString()" from="((encoding) != null) &amp;&amp; ((encoding) != (Constants.CHARSET))" to="!(((encoding) != null) &amp;&amp; ((encoding) != (Constants.CHARSET)))" />
    <mutant id="mutant_2672" viable="true" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(((Constants.OBJECT_ID_STRING_LENGTH) - 2) * -1)" />
    <mutant id="mutant_2670" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.size()" from="((int)((end) - (start)))" to="((int)(((end) - (start)))) - 1" />
    <mutant id="mutant_1348" viable="false" in="?" from="1024 * (Config.MiB)" to="(1024 * (Config.MiB)) + 1" />
    <mutant id="mutant_2679" viable="true" in="org.eclipse.jgit.internal.storage.file.CheckoutEntryImpl(org.eclipse.jgit.lib.ReflogEntry)" from="(p2 + (&quot; to &quot;.length()))" to="((p2 + (&quot; to &quot;.length())) - 1)" />
    <mutant id="mutant_1349" viable="false" in="?" from="1024 * (Config.MiB)" to="(1024 * (Config.MiB)) - 1" />
    <mutant id="mutant_1346" viable="false" in="?" from="1024 * (Config.KiB)" to="(1024 * (Config.KiB)) - 1" />
    <mutant id="mutant_2677" viable="true" in="org.eclipse.jgit.internal.storage.file.CheckoutEntryImpl(org.eclipse.jgit.lib.ReflogEntry)" from="(p2 + (&quot; to &quot;.length()))" to="((p2 + (&quot; to &quot;.length())) * -1)" />
    <mutant id="mutant_1347" viable="false" in="?" from="1024 * (Config.KiB)" to="(1024 * (Config.KiB)) + 1" />
    <mutant id="mutant_2678" viable="true" in="org.eclipse.jgit.internal.storage.file.CheckoutEntryImpl(org.eclipse.jgit.lib.ReflogEntry)" from="(p2 + (&quot; to &quot;.length()))" to="((p2 + (&quot; to &quot;.length())) + 1)" />
    <mutant id="mutant_1333" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100) / (totalWork)" to="(((lastWork) * 100) / (totalWork)) + 1" />
    <mutant id="mutant_2664" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) + 1)" />
    <mutant id="mutant_3996" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length))" to="!((0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length)))" />
    <mutant id="mutant_1334" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100) / (totalWork)" to="(((lastWork) * 100) / (totalWork)) * -1" />
    <mutant id="mutant_2665" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) * -1)" />
    <mutant id="mutant_3995" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="(((used) + length) - 1)" />
    <mutant id="mutant_1331" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100)" to="(((lastWork) * 100) + 1)" />
    <mutant id="mutant_2662" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) * -1)" />
    <mutant id="mutant_3994" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="(((used) + length) * -1)" />
    <mutant id="mutant_1332" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100) / (totalWork)" to="(((lastWork) * 100) / (totalWork)) - 1" />
    <mutant id="mutant_2663" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) - 1)" />
    <mutant id="mutant_3993" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="(((used) + length) + 1)" />
    <mutant id="mutant_2660" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.contains(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos))" to="(!(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos)))" />
    <mutant id="mutant_3992" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length))" to="!((0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length)))" />
    <mutant id="mutant_1330" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100)" to="(((lastWork) * 100) * -1)" />
    <mutant id="mutant_2661" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.contains(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos)) &amp;&amp; (neededPos &lt; (end))" to="!((((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos)) &amp;&amp; (neededPos &lt; (end)))" />
    <mutant id="mutant_3991" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="(((used) + length) - 1)" />
    <mutant id="mutant_3990" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="(((used) + length) * -1)" />
    <mutant id="mutant_1339" viable="false" in="org.eclipse.jgit.lib.BranchTrackingStatus.of(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(Constants.R_HEADS) + shortBranchName" to="((Constants.R_HEADS) + shortBranchName) - 1" />
    <mutant id="mutant_1337" viable="true" in="org.eclipse.jgit.lib.BranchConfig.getTrackingBranch()" from="(remote == null) || (mergeRef == null)" to="!((remote == null) || (mergeRef == null))" />
    <mutant id="mutant_2668" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.size()" from="((int)((end) - (start)))" to="((int)(((end) - (start)))) * -1" />
    <mutant id="mutant_1338" viable="false" in="org.eclipse.jgit.lib.BranchTrackingStatus.of(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(Constants.R_HEADS) + shortBranchName" to="((Constants.R_HEADS) + shortBranchName) * -1" />
    <mutant id="mutant_2669" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.size()" from="((int)((end) - (start)))" to="((int)(((end) - (start)))) + 1" />
    <mutant id="mutant_3999" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(((src.getWeight()) &gt;&gt; 20) + ((res.getWeight()) &gt;&gt; 21))" to="((((src.getWeight()) &gt;&gt; 20) + ((res.getWeight()) &gt;&gt; 21)) - 1)" />
    <mutant id="mutant_1335" viable="true" in="org.eclipse.jgit.lib.BlobBasedConfig.asTree(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.AnyObjectId)" from="(treeish instanceof RevCommit) &amp;&amp; ((((RevCommit)(treeish)).getTree()) != null)" to="!((treeish instanceof RevCommit) &amp;&amp; ((((RevCommit)(treeish)).getTree()) != null))" />
    <mutant id="mutant_2666" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) - 1)" />
    <mutant id="mutant_3998" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(((src.getWeight()) &gt;&gt; 20) + ((res.getWeight()) &gt;&gt; 21))" to="((((src.getWeight()) &gt;&gt; 20) + ((res.getWeight()) &gt;&gt; 21)) + 1)" />
    <mutant id="mutant_1336" viable="true" in="org.eclipse.jgit.lib.BranchConfig.getRemoteTrackingBranch()" from="(remote == null) || (mergeRef == null)" to="!((remote == null) || (mergeRef == null))" />
    <mutant id="mutant_2667" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) + 1)" />
    <mutant id="mutant_3997" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(((src.getWeight()) &gt;&gt; 20) + ((res.getWeight()) &gt;&gt; 21))" to="((((src.getWeight()) &gt;&gt; 20) + ((res.getWeight()) &gt;&gt; 21)) * -1)" />
    <mutant id="mutant_1322" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; appendStatus" to="!((msg == null) &amp;&amp; appendStatus)" />
    <mutant id="mutant_2653" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="((int)((pos - (start)))) + 1" />
    <mutant id="mutant_3985" viable="true" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.addBase(int,byte[],int,int)" from="end + 1" to="(end + 1) + 1" />
    <mutant id="mutant_1323" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100)" to="(((lastWork) * 100) - 1)" />
    <mutant id="mutant_2654" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteBufferWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) * -1)" />
    <mutant id="mutant_3984" viable="true" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.addBase(int,byte[],int,int)" from="end + 1" to="(end + 1) - 1" />
    <mutant id="mutant_1320" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.getPrefixes(java.lang.String)" from="(p1 + 1)" to="((p1 + 1) * -1)" />
    <mutant id="mutant_2651" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="((int)((pos - (start)))) * -1" />
    <mutant id="mutant_3983" viable="true" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.addBase(int,byte[],int,int)" from="end + 1" to="(end + 1) * -1" />
    <mutant id="mutant_1321" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; (!appendStatus)" to="!((msg == null) &amp;&amp; (!appendStatus))" />
    <mutant id="mutant_2652" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="((int)((pos - (start)))) - 1" />
    <mutant id="mutant_3982" viable="true" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.nextSlash(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((pathBuf[ptr]) != '/')" to="!((ptr &lt; end) &amp;&amp; ((pathBuf[ptr]) != '/'))" />
    <mutant id="mutant_3981" viable="true" in="org.eclipse.jgit.internal.storage.dfs.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="(((objectOffset) + (headerLength)) * -1)" />
    <mutant id="mutant_2650" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) + 1)" />
    <mutant id="mutant_3980" viable="true" in="org.eclipse.jgit.internal.storage.dfs.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="(((objectOffset) + (headerLength)) + 1)" />
    <mutant id="mutant_1328" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100) / (totalWork)" to="(((lastWork) * 100) / (totalWork)) * -1" />
    <mutant id="mutant_2659" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow(org.eclipse.jgit.internal.storage.file.PackFile,long,int)" from="(start) + n" to="((start) + n) + 1" />
    <mutant id="mutant_1329" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100)" to="(((lastWork) * 100) - 1)" />
    <mutant id="mutant_1326" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100) / (totalWork)" to="(((lastWork) * 100) / (totalWork)) - 1" />
    <mutant id="mutant_2657" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow(org.eclipse.jgit.internal.storage.file.PackFile,long,int)" from="(start) + n" to="((start) + n) - 1" />
    <mutant id="mutant_3989" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="(((used) + length) + 1)" />
    <mutant id="mutant_1327" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100) / (totalWork)" to="(((lastWork) * 100) / (totalWork)) + 1" />
    <mutant id="mutant_2658" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow(org.eclipse.jgit.internal.storage.file.PackFile,long,int)" from="(start) + n" to="((start) + n) * -1" />
    <mutant id="mutant_3988" viable="true" in="org.eclipse.jgit.internal.storage.pack.BinaryDelta.format(byte[],boolean)" from="(deltaPtr + cmd)" to="((deltaPtr + cmd) * -1)" />
    <mutant id="mutant_1324" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100)" to="(((lastWork) * 100) * -1)" />
    <mutant id="mutant_2655" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteBufferWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) - 1)" />
    <mutant id="mutant_3987" viable="true" in="org.eclipse.jgit.internal.storage.pack.BinaryDelta.format(byte[],boolean)" from="(deltaPtr + cmd)" to="((deltaPtr + cmd) + 1)" />
    <mutant id="mutant_1325" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100)" to="(((lastWork) * 100) + 1)" />
    <mutant id="mutant_2656" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteBufferWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) + 1)" />
    <mutant id="mutant_3986" viable="true" in="org.eclipse.jgit.internal.storage.pack.BinaryDelta.format(byte[],boolean)" from="(deltaPtr + cmd)" to="((deltaPtr + cmd) - 1)" />
    <mutant id="mutant_1399" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.section) == null) &amp;&amp; (Character.isWhitespace(c))" to="!(((e.section) == null) &amp;&amp; (Character.isWhitespace(c)))" />
    <mutant id="mutant_1397" viable="true" in="org.eclipse.jgit.lib.Config.unsetSection(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String)" from="(lastWasMatch &amp;&amp; ((e.section) == null)) &amp;&amp; ((e.subsection) == null)" to="!((lastWasMatch &amp;&amp; ((e.section) == null)) &amp;&amp; ((e.subsection) == null))" />
    <mutant id="mutant_1398" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="(';' == c) || ('#' == c)" to="!((';' == c) || ('#' == c))" />
    <mutant id="mutant_1395" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(valueIndex &lt; (values.size())) &amp;&amp; (entryIndex == (entries.size()))" to="!((valueIndex &lt; (values.size())) &amp;&amp; (entryIndex == (entries.size())))" />
    <mutant id="mutant_1396" viable="true" in="org.eclipse.jgit.lib.Config.unsetSection(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String)" from="(lastWasMatch &amp;&amp; ((e.section) == null))" to="(!(lastWasMatch &amp;&amp; ((e.section) == null)))" />
    <mutant id="mutant_1393" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="entryIndex + 1" to="(entryIndex + 1) - 1" />
    <mutant id="mutant_1394" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(valueIndex == (values.size())) &amp;&amp; (entryIndex &lt; (entries.size()))" to="!((valueIndex == (values.size())) &amp;&amp; (entryIndex &lt; (entries.size())))" />
    <mutant id="mutant_1391" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="entryIndex + 1" to="(entryIndex + 1) * -1" />
    <mutant id="mutant_1392" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="entryIndex + 1" to="(entryIndex + 1) + 1" />
    <mutant id="mutant_1390" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(entryIndex &lt; (entries.size())) &amp;&amp; (valueIndex &lt; (values.size()))" to="!((entryIndex &lt; (entries.size())) &amp;&amp; (valueIndex &lt; (values.size())))" />
    <mutant id="mutant_1388" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="mul * (Long.parseLong(n))" to="(mul * (Long.parseLong(n))) - 1" />
    <mutant id="mutant_1389" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="mul * (Long.parseLong(n))" to="(mul * (Long.parseLong(n))) * -1" />
    <mutant id="mutant_1386" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="(((n.length()) - 1) - 1)" />
    <mutant id="mutant_1387" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="mul * (Long.parseLong(n))" to="(mul * (Long.parseLong(n))) + 1" />
    <mutant id="mutant_1384" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="(((n.length()) - 1) + 1)" />
    <mutant id="mutant_1385" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="(((n.length()) - 1) * -1)" />
    <mutant id="mutant_1382" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="(((n.length()) - 1) * -1)" />
    <mutant id="mutant_1383" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="(((n.length()) - 1) - 1)" />
    <mutant id="mutant_1380" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size())) + 1" to="(((src.entryList.size()) + (values.size())) + 1) - 1" />
    <mutant id="mutant_1381" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="(((n.length()) - 1) + 1)" />
    <mutant id="mutant_1377" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size()))" to="(((src.entryList.size()) + (values.size())) * -1)" />
    <mutant id="mutant_1378" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size())) + 1" to="(((src.entryList.size()) + (values.size())) + 1) + 1" />
    <mutant id="mutant_1375" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size()))" to="(((src.entryList.size()) + (values.size())) + 1)" />
    <mutant id="mutant_1376" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size()))" to="(((src.entryList.size()) + (values.size())) - 1)" />
    <mutant id="mutant_1373" viable="true" in="org.eclipse.jgit.lib.Config.getStringList(java.lang.String,java.lang.String,java.lang.String)" from="(base.length) + (self.length)" to="((base.length) + (self.length)) - 1" />
    <mutant id="mutant_1374" viable="true" in="org.eclipse.jgit.lib.Config.getStringList(java.lang.String,java.lang.String,java.lang.String)" from="(base.length) + (self.length)" to="((base.length) + (self.length)) + 1" />
    <mutant id="mutant_1371" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.prefix) == null) || (&quot;&quot;.equals(e.prefix))" to="!(((e.prefix) == null) || (&quot;&quot;.equals(e.prefix)))" />
    <mutant id="mutant_1372" viable="true" in="org.eclipse.jgit.lib.Config.getStringList(java.lang.String,java.lang.String,java.lang.String)" from="(base.length) + (self.length)" to="((base.length) + (self.length)) * -1" />
    <mutant id="mutant_1379" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size())) + 1" to="(((src.entryList.size()) + (values.size())) + 1) * -1" />
    <mutant id="mutant_1370" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.section) != null) &amp;&amp; ((e.name) != null)" to="!(((e.section) != null) &amp;&amp; ((e.name) != null))" />
    <mutant id="mutant_1366" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="((Character.isLetterOrDigit(((char)(c)))) || ('.' == c)) || ('-' == c)" to="!(((Character.isLetterOrDigit(((char)(c)))) || ('.' == c)) || ('-' == c))" />
    <mutant id="mutant_2697" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;)" to="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) * -1)" />
    <mutant id="mutant_1367" viable="true" in="org.eclipse.jgit.lib.Config.readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)" from="(';' == c) || ('#' == c)" to="!((';' == c) || ('#' == c))" />
    <mutant id="mutant_2698" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;)" to="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) - 1)" />
    <mutant id="mutant_1364" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="!((' ' == c) || ('\t' == c))" />
    <mutant id="mutant_2695" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified))))" to="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) - 1)" />
    <mutant id="mutant_1365" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="((Character.isLetterOrDigit(((char)(c)))) || ('.' == c))" to="(!((Character.isLetterOrDigit(((char)(c)))) || ('.' == c)))" />
    <mutant id="mutant_2696" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified))))" to="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) * -1)" />
    <mutant id="mutant_1362" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(Character.isLetterOrDigit(((char)(c)))) || (c == '-')" to="!((Character.isLetterOrDigit(((char)(c)))) || (c == '-'))" />
    <mutant id="mutant_2693" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.notRacyClean(long)" from="(read - (lastModified))" to="((read - (lastModified)) + 1)" />
    <mutant id="mutant_1363" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="!((' ' == c) || ('\t' == c))" />
    <mutant id="mutant_2694" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified))))" to="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + 1)" />
    <mutant id="mutant_1360" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="((';' == c) || ('#' == c)) || ('\n' == c)" to="!(((';' == c) || ('#' == c)) || ('\n' == c))" />
    <mutant id="mutant_2691" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.notRacyClean(long)" from="(read - (lastModified))" to="((read - (lastModified)) * -1)" />
    <mutant id="mutant_1361" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="!((' ' == c) || ('\t' == c))" />
    <mutant id="mutant_2692" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.notRacyClean(long)" from="(read - (lastModified))" to="((read - (lastModified)) - 1)" />
    <mutant id="mutant_1368" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.section) != null) &amp;&amp; ((e.name) == null)" to="!(((e.section) != null) &amp;&amp; ((e.name) == null))" />
    <mutant id="mutant_2699" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;)" to="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + 1)" />
    <mutant id="mutant_1369" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="(escaped.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (escaped.endsWith(&quot;\&quot;&quot;))" to="!((escaped.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (escaped.endsWith(&quot;\&quot;&quot;)))" />
    <mutant id="mutant_1199" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 32)" to="((ptr + 32) * -1)" />
    <mutant id="mutant_1197" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 24)" to="((ptr + 24) * -1)" />
    <mutant id="mutant_1198" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 24)" to="((ptr + 24) - 1)" />
    <mutant id="mutant_1195" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 16)" to="((ptr + 16) - 1)" />
    <mutant id="mutant_1196" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 24)" to="((ptr + 24) + 1)" />
    <mutant id="mutant_1193" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 16)" to="((ptr + 16) + 1)" />
    <mutant id="mutant_1194" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 16)" to="((ptr + 16) * -1)" />
    <mutant id="mutant_1191" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 8)" to="((ptr + 8) + 1)" />
    <mutant id="mutant_1192" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 8)" to="((ptr + 8) * -1)" />
    <mutant id="mutant_1190" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 8)" to="((ptr + 8) - 1)" />
    <mutant id="mutant_1188" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name())) + &quot;]&quot;" to="((&quot;AbbreviatedObjectId[&quot; + (name())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_1189" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name())) + &quot;]&quot;" to="((&quot;AbbreviatedObjectId[&quot; + (name())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_1186" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name()))" to="((&quot;AbbreviatedObjectId[&quot; + (name())) + 1)" />
    <mutant id="mutant_1187" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name())) + &quot;]&quot;" to="((&quot;AbbreviatedObjectId[&quot; + (name())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_1184" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name()))" to="((&quot;AbbreviatedObjectId[&quot; + (name())) * -1)" />
    <mutant id="mutant_1185" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name()))" to="((&quot;AbbreviatedObjectId[&quot; + (name())) - 1)" />
    <mutant id="mutant_1182" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 4)" to="((p + 4) - 1)" />
    <mutant id="mutant_1183" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 4)" to="((p + 4) + 1)" />
    <mutant id="mutant_1180" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 3)" to="((p + 3) - 1)" />
    <mutant id="mutant_1181" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 4)" to="((p + 4) * -1)" />
    <mutant id="mutant_1179" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 3)" to="((p + 3) * -1)" />
    <mutant id="mutant_1177" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 2)" to="((p + 2) * -1)" />
    <mutant id="mutant_1178" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 3)" to="((p + 3) + 1)" />
    <mutant id="mutant_1175" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 2)" to="((p + 2) - 1)" />
    <mutant id="mutant_1176" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 2)" to="((p + 2) + 1)" />
    <mutant id="mutant_1173" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_1174" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_1171" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 16)" to="((p + 16) + 1)" />
    <mutant id="mutant_1172" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_1170" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 16)" to="((p + 16) - 1)" />
    <mutant id="mutant_1168" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 12)" to="((p + 12) + 1)" />
    <mutant id="mutant_2499" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + 1)" to="((low + 1) - 1)" />
    <mutant id="mutant_1169" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 16)" to="((p + 16) * -1)" />
    <mutant id="mutant_1166" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 12)" to="((p + 12) * -1)" />
    <mutant id="mutant_2497" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="mid + 1" to="(mid + 1) - 1" />
    <mutant id="mutant_1167" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 12)" to="((p + 12) - 1)" />
    <mutant id="mutant_2498" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + 1)" to="((low + 1) + 1)" />
    <mutant id="mutant_1164" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 8)" to="((p + 8) + 1)" />
    <mutant id="mutant_2495" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="mid + 1" to="(mid + 1) * -1" />
    <mutant id="mutant_1165" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 8)" to="((p + 8) - 1)" />
    <mutant id="mutant_2496" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="mid + 1" to="(mid + 1) + 1" />
    <mutant id="mutant_1162" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 4)" to="((p + 4) + 1)" />
    <mutant id="mutant_2493" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + high)" to="((low + high) * -1)" />
    <mutant id="mutant_1163" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 8)" to="((p + 8) * -1)" />
    <mutant id="mutant_2494" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + high)" to="((low + high) - 1)" />
    <mutant id="mutant_8630" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="((destOffset + 2) - 1)" />
    <mutant id="mutant_8629" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="((destOffset + 2) * -1)" />
    <mutant id="mutant_8628" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) * -1)" />
    <mutant id="mutant_8621" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 2)" to="((srcOffset + 2) - 1)" />
    <mutant id="mutant_8620" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 2)" to="((srcOffset + 2) + 1)" />
    <mutant id="mutant_8623" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 1)" to="((srcOffset + 1) - 1)" />
    <mutant id="mutant_8622" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 2)" to="((srcOffset + 2) * -1)" />
    <mutant id="mutant_8625" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 1)" to="((srcOffset + 1) * -1)" />
    <mutant id="mutant_8624" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 1)" to="((srcOffset + 1) + 1)" />
    <mutant id="mutant_8627" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) + 1)" />
    <mutant id="mutant_8626" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) - 1)" />
    <mutant id="mutant_8618" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len - d)" to="((len - d) * -1)" />
    <mutant id="mutant_8617" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len - d)" to="((len - d) + 1)" />
    <mutant id="mutant_8619" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len - d)" to="((len - d) - 1)" />
    <mutant id="mutant_8610" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len - 2" to="(len - 2) - 1" />
    <mutant id="mutant_8612" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="((d + off) * -1)" />
    <mutant id="mutant_8611" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="((d + off) - 1)" />
    <mutant id="mutant_8614" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="((d + off) - 1)" />
    <mutant id="mutant_8613" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="((d + off) + 1)" />
    <mutant id="mutant_8616" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="((d + off) + 1)" />
    <mutant id="mutant_8615" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="((d + off) * -1)" />
    <mutant id="mutant_8607" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len43 + ((len % 3) &gt; 0 ? 4 : 0)" to="(len43 + ((len % 3) &gt; 0 ? 4 : 0)) - 1" />
    <mutant id="mutant_8606" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len43 + ((len % 3) &gt; 0 ? 4 : 0)" to="(len43 + ((len % 3) &gt; 0 ? 4 : 0)) + 1" />
    <mutant id="mutant_8609" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len - 2" to="(len - 2) + 1" />
    <mutant id="mutant_8608" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len - 2" to="(len - 2) * -1" />
    <mutant id="mutant_8601" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4) / 3" to="((len * 4) / 3) + 1" />
    <mutant id="mutant_8600" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4) / 3" to="((len * 4) / 3) - 1" />
    <mutant id="mutant_8603" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len % 3)" to="((len % 3) - 1)" />
    <mutant id="mutant_8602" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len % 3)" to="((len % 3) + 1)" />
    <mutant id="mutant_8605" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len43 + ((len % 3) &gt; 0 ? 4 : 0)" to="(len43 + ((len % 3) &gt; 0 ? 4 : 0)) * -1" />
    <mutant id="mutant_8604" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len % 3)" to="((len % 3) * -1)" />
    <mutant id="mutant_8670" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="(((size) - 1) * -1)" />
    <mutant id="mutant_7341" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot;\n&quot;)" to="(((&quot;ACK &quot; + (obj.name())) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_8672" viable="true" in="org.eclipse.jgit.util.BlockList.add(T)" from="i + 1" to="(i + 1) * -1" />
    <mutant id="mutant_6010" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri + &quot;: &quot;) + s)" to="(((uri + &quot;: &quot;) + s) * -1)" />
    <mutant id="mutant_7340" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot;\n&quot;)" to="(((&quot;ACK &quot; + (obj.name())) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_8671" viable="true" in="org.eclipse.jgit.util.BlockList.set(int,T)" from="(index &lt; 0) || ((size) &lt;= index)" to="!((index &lt; 0) || ((size) &lt;= index))" />
    <mutant id="mutant_6011" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri + &quot;: &quot;) + s)" to="(((uri + &quot;: &quot;) + s) - 1)" />
    <mutant id="mutant_7343" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="((&quot;ACK &quot; + (obj.name())) + 1)" />
    <mutant id="mutant_8674" viable="true" in="org.eclipse.jgit.util.BlockList.add(T)" from="i + 1" to="(i + 1) + 1" />
    <mutant id="mutant_6012" viable="true" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri + &quot;: &quot;) + s)" to="(((uri + &quot;: &quot;) + s) + 1)" />
    <mutant id="mutant_7342" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot;\n&quot;)" to="(((&quot;ACK &quot; + (obj.name())) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_8673" viable="true" in="org.eclipse.jgit.util.BlockList.add(T)" from="i + 1" to="(i + 1) - 1" />
    <mutant id="mutant_6002" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.write(byte[],java.io.OutputStream)" from="((tmp.length) - ptr)" to="(((tmp.length) - ptr) + 1)" />
    <mutant id="mutant_7334" viable="false" in="org.eclipse.jgit.transport.UploadPack.wantSatisfied(org.eclipse.jgit.revwalk.RevObject)" from="((oldestTime) * 1000L)" to="(((oldestTime) * 1000L) * -1)" />
    <mutant id="mutant_8665" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index + 1)" to="((index + 1) - 1)" />
    <mutant id="mutant_6003" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.write(byte[],java.io.OutputStream)" from="((tmp.length) - ptr)" to="(((tmp.length) - ptr) * -1)" />
    <mutant id="mutant_7333" viable="false" in="org.eclipse.jgit.transport.UploadPack.wantSatisfied(org.eclipse.jgit.revwalk.RevObject)" from="((oldestTime) * 1000L)" to="(((oldestTime) * 1000L) - 1)" />
    <mutant id="mutant_8664" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="(((size) - 1) * -1)" />
    <mutant id="mutant_6004" viable="false" in="org.eclipse.jgit.errors.InvalidObjectIdException.asAscii(byte[],int,int)" from="&quot;: &quot; + (new String(bytes , offset , length , &quot;US-ASCII&quot;))" to="(&quot;: &quot; + (new String(bytes , offset , length , &quot;US-ASCII&quot;))) * -1" />
    <mutant id="mutant_7336" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((oldestTime) == 0) || ((c.getCommitTime()) &lt; (oldestTime))" to="!(((oldestTime) == 0) || ((c.getCommitTime()) &lt; (oldestTime)))" />
    <mutant id="mutant_8667" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index + 1)" to="((index + 1) + 1)" />
    <mutant id="mutant_6005" viable="true" in="org.eclipse.jgit.errors.InvalidObjectIdException.asAscii(byte[],int,int)" from="&quot;: &quot; + (new String(bytes , offset , length , &quot;US-ASCII&quot;))" to="(&quot;: &quot; + (new String(bytes , offset , length , &quot;US-ASCII&quot;))) + 1" />
    <mutant id="mutant_7335" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(wantAll.isEmpty()) &amp;&amp; (!(wantIds.isEmpty()))" to="!((wantAll.isEmpty()) &amp;&amp; (!(wantIds.isEmpty())))" />
    <mutant id="mutant_8666" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index + 1)" to="((index + 1) * -1)" />
    <mutant id="mutant_6006" viable="false" in="org.eclipse.jgit.errors.InvalidObjectIdException.asAscii(byte[],int,int)" from="&quot;: &quot; + (new String(bytes , offset , length , &quot;US-ASCII&quot;))" to="(&quot;: &quot; + (new String(bytes , offset , length , &quot;US-ASCII&quot;))) - 1" />
    <mutant id="mutant_7338" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="((&quot;ACK &quot; + (obj.name())) - 1)" />
    <mutant id="mutant_8669" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="(((size) - 1) - 1)" />
    <mutant id="mutant_6007" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(uri + &quot;: &quot;)" to="((uri + &quot;: &quot;) * -1)" />
    <mutant id="mutant_7337" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="((&quot;ACK &quot; + (obj.name())) + 1)" />
    <mutant id="mutant_8668" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="(((size) - 1) + 1)" />
    <mutant id="mutant_6008" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(uri + &quot;: &quot;)" to="((uri + &quot;: &quot;) - 1)" />
    <mutant id="mutant_6009" viable="true" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(uri + &quot;: &quot;)" to="((uri + &quot;: &quot;) + 1)" />
    <mutant id="mutant_7339" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="((&quot;ACK &quot; + (obj.name())) * -1)" />
    <mutant id="mutant_7330" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="(((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_8661" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index &lt; 0) || ((size) &lt;= index)" to="!((index &lt; 0) || ((size) &lt;= index))" />
    <mutant id="mutant_8660" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="(((size) - 1) * -1)" />
    <mutant id="mutant_6000" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((childCnt) - 1)" to="(((childCnt) - 1) - 1)" />
    <mutant id="mutant_7332" viable="false" in="org.eclipse.jgit.transport.UploadPack.wantSatisfied(org.eclipse.jgit.revwalk.RevObject)" from="((oldestTime) * 1000L)" to="(((oldestTime) * 1000L) + 1)" />
    <mutant id="mutant_8663" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="(((size) - 1) - 1)" />
    <mutant id="mutant_6001" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.write(byte[],java.io.OutputStream)" from="((tmp.length) - ptr)" to="(((tmp.length) - ptr) - 1)" />
    <mutant id="mutant_7331" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="(((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_8662" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="(((size) - 1) + 1)" />
    <mutant id="mutant_7323" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="(((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_8654" viable="false" in="?" from="(BlockList.BLOCK_SIZE) - 1" to="((BlockList.BLOCK_SIZE) - 1) * -1" />
    <mutant id="mutant_7322" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="(((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_8653" viable="false" in="?" from="(BlockList.BLOCK_SIZE) - 1" to="((BlockList.BLOCK_SIZE) - 1) - 1" />
    <mutant id="mutant_7325" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(line.startsWith(&quot;have &quot;)) &amp;&amp; ((line.length()) == 45)" to="!((line.startsWith(&quot;have &quot;)) &amp;&amp; ((line.length()) == 45))" />
    <mutant id="mutant_8656" viable="true" in="org.eclipse.jgit.util.BlockList(int)" from="((capacity &amp; (BlockList.BLOCK_MASK)) != 0) || (dirSize == 0)" to="!(((capacity &amp; (BlockList.BLOCK_MASK)) != 0) || (dirSize == 0))" />
    <mutant id="mutant_7324" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="(((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_8655" viable="false" in="?" from="(BlockList.BLOCK_SIZE) - 1" to="((BlockList.BLOCK_SIZE) - 1) + 1" />
    <mutant id="mutant_7327" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="((&quot;ACK &quot; + (last.name())) - 1)" />
    <mutant id="mutant_8658" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="(((size) - 1) + 1)" />
    <mutant id="mutant_7326" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="((&quot;ACK &quot; + (last.name())) + 1)" />
    <mutant id="mutant_8657" viable="true" in="org.eclipse.jgit.util.BlockList.get(int)" from="(index &lt; 0) || ((size) &lt;= index)" to="!((index &lt; 0) || ((size) &lt;= index))" />
    <mutant id="mutant_7329" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="(((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_7328" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="((&quot;ACK &quot; + (last.name())) * -1)" />
    <mutant id="mutant_8659" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="(((size) - 1) - 1)" />
    <mutant id="mutant_8650" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="((destOffset + 3) * -1)" />
    <mutant id="mutant_7321" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="((&quot;ACK &quot; + (last.name())) * -1)" />
    <mutant id="mutant_8652" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="((destOffset + 3) - 1)" />
    <mutant id="mutant_7320" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="((&quot;ACK &quot; + (last.name())) - 1)" />
    <mutant id="mutant_8651" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="((destOffset + 3) + 1)" />
    <mutant id="mutant_7319" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="((&quot;ACK &quot; + (last.name())) + 1)" />
    <mutant id="mutant_7312" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="((i + 2) + 1)" />
    <mutant id="mutant_8643" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="((destOffset + 3) - 1)" />
    <mutant id="mutant_7311" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_8642" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="((destOffset + 3) + 1)" />
    <mutant id="mutant_7314" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="((i + 2) - 1)" />
    <mutant id="mutant_8645" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) + 1)" />
    <mutant id="mutant_7313" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="((i + 2) * -1)" />
    <mutant id="mutant_8644" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) - 1)" />
    <mutant id="mutant_7316" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(!(biDirectionalPipe)) &amp;&amp; ((depth) &gt; 0)" to="!((!(biDirectionalPipe)) &amp;&amp; ((depth) &gt; 0))" />
    <mutant id="mutant_8647" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="((destOffset + 2) * -1)" />
    <mutant id="mutant_7315" viable="false" in="org.eclipse.jgit.transport.UploadPack.isSideBand()" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" to="!((options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K)))" />
    <mutant id="mutant_8646" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) * -1)" />
    <mutant id="mutant_7318" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(noDone) &amp;&amp; (sentReady)" to="!((noDone) &amp;&amp; (sentReady))" />
    <mutant id="mutant_8649" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="((destOffset + 2) + 1)" />
    <mutant id="mutant_7317" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(commonBase.isEmpty()) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" to="!((commonBase.isEmpty()) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF)))" />
    <mutant id="mutant_8648" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="((destOffset + 2) - 1)" />
    <mutant id="mutant_7310" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_8641" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="((destOffset + 3) * -1)" />
    <mutant id="mutant_8640" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="((destOffset + 2) + 1)" />
    <mutant id="mutant_7309" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_7308" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="((i + 2) - 1)" />
    <mutant id="mutant_8639" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="((destOffset + 2) - 1)" />
    <mutant id="mutant_7301" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 2)" to="(((elements.length) - 2) * -1)" />
    <mutant id="mutant_8632" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="((destOffset + 3) * -1)" />
    <mutant id="mutant_7300" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 2)" to="(((elements.length) - 2) + 1)" />
    <mutant id="mutant_8631" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="((destOffset + 2) + 1)" />
    <mutant id="mutant_7303" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((result.length()) - (Constants.DOT_GIT_EXT.length()))" to="(((result.length()) - (Constants.DOT_GIT_EXT.length())) * -1)" />
    <mutant id="mutant_8634" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="((destOffset + 3) - 1)" />
    <mutant id="mutant_7302" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 2)" to="(((elements.length) - 2) - 1)" />
    <mutant id="mutant_8633" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="((destOffset + 3) + 1)" />
    <mutant id="mutant_7305" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((result.length()) - (Constants.DOT_GIT_EXT.length()))" to="(((result.length()) - (Constants.DOT_GIT_EXT.length())) - 1)" />
    <mutant id="mutant_8636" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) + 1)" />
    <mutant id="mutant_7304" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((result.length()) - (Constants.DOT_GIT_EXT.length()))" to="(((result.length()) - (Constants.DOT_GIT_EXT.length())) + 1)" />
    <mutant id="mutant_8635" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) - 1)" />
    <mutant id="mutant_7307" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="((i + 2) * -1)" />
    <mutant id="mutant_8638" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="((destOffset + 2) * -1)" />
    <mutant id="mutant_7306" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="((i + 2) + 1)" />
    <mutant id="mutant_8637" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) * -1)" />
    <mutant id="mutant_7381" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="(((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;) + 1)" />
    <mutant id="mutant_6050" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) - 1)" />
    <mutant id="mutant_7380" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="((&quot;ACK &quot; + (id.name())) * -1)" />
    <mutant id="mutant_6051" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) * -1)" />
    <mutant id="mutant_7383" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="(((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;) * -1)" />
    <mutant id="mutant_6052" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;)" to="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) * -1)" />
    <mutant id="mutant_7382" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="(((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;) - 1)" />
    <mutant id="mutant_6053" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;)" to="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) - 1)" />
    <mutant id="mutant_7385" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="((c.getDepth()) == (depth)) &amp;&amp; (!(clientShallowCommits.contains(c)))" to="!(((c.getDepth()) == (depth)) &amp;&amp; (!(clientShallowCommits.contains(c))))" />
    <mutant id="mutant_6054" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;)" to="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + 1)" />
    <mutant id="mutant_7384" viable="false" in="org.eclipse.jgit.transport.UploadPack.findSymrefs(org.eclipse.jgit.transport.RefAdvertiser,java.util.Map)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="!((head != null) &amp;&amp; (head.isSymbolic()))" />
    <mutant id="mutant_6055" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key)" to="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) + 1)" />
    <mutant id="mutant_7387" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;shallow &quot; + (o.name()))" to="((&quot;shallow &quot; + (o.name())) * -1)" />
    <mutant id="mutant_6056" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key)" to="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) * -1)" />
    <mutant id="mutant_7386" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;shallow &quot; + (o.name()))" to="((&quot;shallow &quot; + (o.name())) + 1)" />
    <mutant id="mutant_6046" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) - 1)" />
    <mutant id="mutant_7378" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="((&quot;ACK &quot; + (id.name())) + 1)" />
    <mutant id="mutant_6047" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) * -1)" />
    <mutant id="mutant_7377" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((peerHas.size()) - 1)" to="(((peerHas.size()) - 1) + 1)" />
    <mutant id="mutant_6048" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + 1)" />
    <mutant id="mutant_6049" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + 1)" />
    <mutant id="mutant_7379" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="((&quot;ACK &quot; + (id.name())) - 1)" />
    <mutant id="mutant_7370" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="(((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;) + 1)" />
    <mutant id="mutant_6040" viable="true" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;]&quot;)" to="(((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;]&quot;) + 1)" />
    <mutant id="mutant_7372" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="(((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;) * -1)" />
    <mutant id="mutant_6041" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;]&quot;)" to="(((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;]&quot;) - 1)" />
    <mutant id="mutant_7371" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="(((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;) - 1)" />
    <mutant id="mutant_6042" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;]&quot;)" to="(((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;]&quot;) * -1)" />
    <mutant id="mutant_7374" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp)) &amp;&amp; (okToGiveUp())" to="!((((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp)) &amp;&amp; (okToGiveUp()))" />
    <mutant id="mutant_6043" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(&quot;Translation missing for [&quot; + (bundleClass.getName()))" to="((&quot;Translation missing for [&quot; + (bundleClass.getName())) * -1)" />
    <mutant id="mutant_7373" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp))" to="(!(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp)))" />
    <mutant id="mutant_6044" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(&quot;Translation missing for [&quot; + (bundleClass.getName()))" to="((&quot;Translation missing for [&quot; + (bundleClass.getName())) - 1)" />
    <mutant id="mutant_7376" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((peerHas.size()) - 1)" to="(((peerHas.size()) - 1) - 1)" />
    <mutant id="mutant_6045" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(&quot;Translation missing for [&quot; + (bundleClass.getName()))" to="((&quot;Translation missing for [&quot; + (bundleClass.getName())) + 1)" />
    <mutant id="mutant_7375" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((peerHas.size()) - 1)" to="(((peerHas.size()) - 1) * -1)" />
    <mutant id="mutant_6035" viable="true" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + 1)" />
    <mutant id="mutant_7367" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="((&quot;ACK &quot; + (id.name())) + 1)" />
    <mutant id="mutant_8698" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines[i].length()) + (delimiter.length())" to="((lines[i].length()) + (delimiter.length())) - 1" />
    <mutant id="mutant_6036" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) * -1)" />
    <mutant id="mutant_7366" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; continue\n&quot;)" to="(((&quot;ACK &quot; + (id.name())) + &quot; continue\n&quot;) + 1)" />
    <mutant id="mutant_8697" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines[i].length()) + (delimiter.length())" to="((lines[i].length()) + (delimiter.length())) + 1" />
    <mutant id="mutant_6037" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) * -1)" />
    <mutant id="mutant_7369" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="((&quot;ACK &quot; + (id.name())) * -1)" />
    <mutant id="mutant_6038" viable="true" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + 1)" />
    <mutant id="mutant_7368" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="((&quot;ACK &quot; + (id.name())) - 1)" />
    <mutant id="mutant_8699" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines[i].length()) + (delimiter.length())" to="((lines[i].length()) + (delimiter.length())) * -1" />
    <mutant id="mutant_6039" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) - 1)" />
    <mutant id="mutant_8690" viable="false" in="?" from="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) + &quot; *I[a-f0-9]{40}$)&quot;)" to="(((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) + &quot; *I[a-f0-9]{40}$)&quot;) - 1)" />
    <mutant id="mutant_7361" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="((&quot;ACK &quot; + (id.name())) + 1)" />
    <mutant id="mutant_8692" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines.length) - 1" to="((lines.length) - 1) * -1" />
    <mutant id="mutant_6030" viable="false" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((((uri.setPass(null)) + &quot;: &quot;) + s) * -1)" />
    <mutant id="mutant_7360" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - 1" to="((peerHas.size()) - 1) + 1" />
    <mutant id="mutant_8691" viable="false" in="?" from="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) + &quot; *I[a-f0-9]{40}$)&quot;)" to="(((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) + &quot; *I[a-f0-9]{40}$)&quot;) + 1)" />
    <mutant id="mutant_6031" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName()))" to="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) * -1)" />
    <mutant id="mutant_7363" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="((&quot;ACK &quot; + (id.name())) * -1)" />
    <mutant id="mutant_8694" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines.length) - 1" to="((lines.length) - 1) + 1" />
    <mutant id="mutant_6032" viable="true" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName()))" to="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + 1)" />
    <mutant id="mutant_7362" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="((&quot;ACK &quot; + (id.name())) - 1)" />
    <mutant id="mutant_8693" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines.length) - 1" to="((lines.length) - 1) - 1" />
    <mutant id="mutant_6033" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName()))" to="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) - 1)" />
    <mutant id="mutant_7365" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; continue\n&quot;)" to="(((&quot;ACK &quot; + (id.name())) + &quot; continue\n&quot;) - 1)" />
    <mutant id="mutant_8696" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i])) || (i == 0)" to="!((org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i])) || (i == 0))" />
    <mutant id="mutant_6034" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) - 1)" />
    <mutant id="mutant_7364" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; continue\n&quot;)" to="(((&quot;ACK &quot; + (id.name())) + &quot; continue\n&quot;) * -1)" />
    <mutant id="mutant_8695" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(!inFooter) &amp;&amp; (org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i]))" to="!((!inFooter) &amp;&amp; (org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i])))" />
    <mutant id="mutant_6024" viable="false" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;) + (revstr)" to="(((super.toString()) + &quot;:&quot;) + (revstr)) * -1" />
    <mutant id="mutant_7356" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - haveCnt" to="((peerHas.size()) - haveCnt) - 1" />
    <mutant id="mutant_8687" viable="false" in="?" from="(&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID))" to="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) * -1)" />
    <mutant id="mutant_6025" viable="false" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(((uri.setPass(null)) + &quot;: &quot;) * -1)" />
    <mutant id="mutant_7355" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - haveCnt" to="((peerHas.size()) - haveCnt) * -1" />
    <mutant id="mutant_8686" viable="false" in="?" from="(&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID))" to="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) + 1)" />
    <mutant id="mutant_6026" viable="true" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(((uri.setPass(null)) + &quot;: &quot;) + 1)" />
    <mutant id="mutant_7358" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - 1" to="((peerHas.size()) - 1) * -1" />
    <mutant id="mutant_8689" viable="false" in="?" from="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) + &quot; *I[a-f0-9]{40}$)&quot;)" to="(((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) + &quot; *I[a-f0-9]{40}$)&quot;) * -1)" />
    <mutant id="mutant_6027" viable="false" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(((uri.setPass(null)) + &quot;: &quot;) - 1)" />
    <mutant id="mutant_7357" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - haveCnt" to="((peerHas.size()) - haveCnt) + 1" />
    <mutant id="mutant_8688" viable="false" in="?" from="(&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID))" to="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) - 1)" />
    <mutant id="mutant_6028" viable="false" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((((uri.setPass(null)) + &quot;: &quot;) + s) - 1)" />
    <mutant id="mutant_6029" viable="true" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((((uri.setPass(null)) + &quot;: &quot;) + s) + 1)" />
    <mutant id="mutant_7359" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - 1" to="((peerHas.size()) - 1) - 1" />
    <mutant id="mutant_7350" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="((&quot;ACK &quot; + (obj.name())) - 1)" />
    <mutant id="mutant_8681" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(oldIdx + 1)" to="((oldIdx + 1) + 1)" />
    <mutant id="mutant_8680" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(oldIdx + 1)" to="((oldIdx + 1) * -1)" />
    <mutant id="mutant_6020" viable="true" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;)" to="(((super.toString()) + &quot;:&quot;) + 1)" />
    <mutant id="mutant_7352" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; common\n&quot;)" to="(((&quot;ACK &quot; + (obj.name())) + &quot; common\n&quot;) + 1)" />
    <mutant id="mutant_8683" viable="true" in="org.eclipse.jgit.util.BlockList.addAll(T[],int,int)" from="((BlockList.BLOCK_SIZE) - i)" to="(((BlockList.BLOCK_SIZE) - i) + 1)" />
    <mutant id="mutant_6021" viable="false" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;)" to="(((super.toString()) + &quot;:&quot;) - 1)" />
    <mutant id="mutant_7351" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="((&quot;ACK &quot; + (obj.name())) * -1)" />
    <mutant id="mutant_8682" viable="true" in="org.eclipse.jgit.util.BlockList.addAll(T[],int,int)" from="((BlockList.BLOCK_SIZE) - i)" to="(((BlockList.BLOCK_SIZE) - i) - 1)" />
    <mutant id="mutant_6022" viable="false" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;) + (revstr)" to="(((super.toString()) + &quot;:&quot;) + (revstr)) - 1" />
    <mutant id="mutant_7354" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; common\n&quot;)" to="(((&quot;ACK &quot; + (obj.name())) + &quot; common\n&quot;) * -1)" />
    <mutant id="mutant_8685" viable="true" in="org.eclipse.jgit.util.CachedAuthenticator.getPasswordAuthentication()" from="(ca.host.equals(host)) &amp;&amp; ((ca.port) == port)" to="!((ca.host.equals(host)) &amp;&amp; ((ca.port) == port))" />
    <mutant id="mutant_6023" viable="true" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;) + (revstr)" to="(((super.toString()) + &quot;:&quot;) + (revstr)) + 1" />
    <mutant id="mutant_7353" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; common\n&quot;)" to="(((&quot;ACK &quot; + (obj.name())) + &quot; common\n&quot;) - 1)" />
    <mutant id="mutant_8684" viable="true" in="org.eclipse.jgit.util.BlockList.addAll(T[],int,int)" from="((BlockList.BLOCK_SIZE) - i)" to="(((BlockList.BLOCK_SIZE) - i) * -1)" />
    <mutant id="mutant_6013" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(uri + &quot;: &quot;)" to="((uri + &quot;: &quot;) * -1)" />
    <mutant id="mutant_7345" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="((&quot;ACK &quot; + (obj.name())) * -1)" />
    <mutant id="mutant_8676" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(size) - 2" to="((size) - 2) + 1" />
    <mutant id="mutant_6014" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(uri + &quot;: &quot;)" to="((uri + &quot;: &quot;) - 1)" />
    <mutant id="mutant_7344" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="((&quot;ACK &quot; + (obj.name())) - 1)" />
    <mutant id="mutant_8675" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(index &lt; 0) || ((size) &lt; index)" to="!((index &lt; 0) || ((size) &lt; index))" />
    <mutant id="mutant_6015" viable="true" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(uri + &quot;: &quot;)" to="((uri + &quot;: &quot;) + 1)" />
    <mutant id="mutant_7347" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; continue\n&quot;)" to="(((&quot;ACK &quot; + (obj.name())) + &quot; continue\n&quot;) - 1)" />
    <mutant id="mutant_8678" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(size) - 2" to="((size) - 2) - 1" />
    <mutant id="mutant_6016" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri + &quot;: &quot;) + s)" to="(((uri + &quot;: &quot;) + s) * -1)" />
    <mutant id="mutant_7346" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; continue\n&quot;)" to="(((&quot;ACK &quot; + (obj.name())) + &quot; continue\n&quot;) * -1)" />
    <mutant id="mutant_8677" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(size) - 2" to="((size) - 2) * -1" />
    <mutant id="mutant_6017" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri + &quot;: &quot;) + s)" to="(((uri + &quot;: &quot;) + s) - 1)" />
    <mutant id="mutant_7349" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="((&quot;ACK &quot; + (obj.name())) + 1)" />
    <mutant id="mutant_6018" viable="true" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri + &quot;: &quot;) + s)" to="(((uri + &quot;: &quot;) + s) + 1)" />
    <mutant id="mutant_7348" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; continue\n&quot;)" to="(((&quot;ACK &quot; + (obj.name())) + &quot; continue\n&quot;) + 1)" />
    <mutant id="mutant_8679" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(oldIdx + 1)" to="((oldIdx + 1) - 1)" />
    <mutant id="mutant_6019" viable="false" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;)" to="(((super.toString()) + &quot;:&quot;) * -1)" />
    <mutant id="mutant_6093" viable="true" in="org.eclipse.jgit.transport.AmazonS3.isSignedHeader(java.lang.String)" from="(AmazonS3.SIGNED_HEADERS.contains(nameLC)) || (nameLC.startsWith(&quot;x-amz-&quot;))" to="!((AmazonS3.SIGNED_HEADERS.contains(nameLC)) || (nameLC.startsWith(&quot;x-amz-&quot;)))" />
    <mutant id="mutant_6094" viable="true" in="org.eclipse.jgit.transport.AmazonS3.error(java.lang.String,java.lang.String,java.net.HttpURLConnection)" from="(&quot;\n&quot; + (new String(buf)))" to="((&quot;\n&quot; + (new String(buf))) + 1)" />
    <mutant id="mutant_6095" viable="false" in="org.eclipse.jgit.transport.AmazonS3.error(java.lang.String,java.lang.String,java.net.HttpURLConnection)" from="(&quot;\n&quot; + (new String(buf)))" to="((&quot;\n&quot; + (new String(buf))) - 1)" />
    <mutant id="mutant_6096" viable="false" in="org.eclipse.jgit.transport.AmazonS3.error(java.lang.String,java.lang.String,java.net.HttpURLConnection)" from="(&quot;\n&quot; + (new String(buf)))" to="((&quot;\n&quot; + (new String(buf))) * -1)" />
    <mutant id="mutant_6097" viable="false" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;)" to="(((fmt.format(new java.util.Date())) + &quot; &quot;) - 1)" />
    <mutant id="mutant_6098" viable="true" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;)" to="(((fmt.format(new java.util.Date())) + &quot; &quot;) + 1)" />
    <mutant id="mutant_3819" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="((length) - (12 + 20)) - 1" />
    <mutant id="mutant_6099" viable="false" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;)" to="(((fmt.format(new java.util.Date())) + &quot; &quot;) * -1)" />
    <mutant id="mutant_3818" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="((length) - (12 + 20)) * -1" />
    <mutant id="mutant_6090" viable="false" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(&quot;Invalid acl: &quot; + pacl)" to="((&quot;Invalid acl: &quot; + pacl) - 1)" />
    <mutant id="mutant_6091" viable="false" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(&quot;Invalid acl: &quot; + pacl)" to="((&quot;Invalid acl: &quot; + pacl) * -1)" />
    <mutant id="mutant_6092" viable="true" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(tmp != null) &amp;&amp; ((tmp.length()) &gt; 0)" to="!((tmp != null) &amp;&amp; ((tmp.length()) &gt; 0))" />
    <mutant id="mutant_3817" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="((12 + 20) + 1)" />
    <mutant id="mutant_3816" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="((12 + 20) * -1)" />
    <mutant id="mutant_3815" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="((12 + 20) - 1)" />
    <mutant id="mutant_3814" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="validate &amp;&amp; ((crc2.getValue()) != expectedCRC)" to="!(validate &amp;&amp; ((crc2.getValue()) != expectedCRC))" />
    <mutant id="mutant_3813" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(!(inf.finished())) || ((inf.getBytesRead()) != dataLength)" to="!((!(inf.finished())) || ((inf.getBytesRead()) != dataLength))" />
    <mutant id="mutant_3812" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="validate &amp;&amp; (idx(ctx).hasCRC32Support())" to="!(validate &amp;&amp; (idx(ctx).hasCRC32Support()))" />
    <mutant id="mutant_3811" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(src.offset) + headerCnt" to="((src.offset) + headerCnt) - 1" />
    <mutant id="mutant_3810" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(src.offset) + headerCnt" to="((src.offset) + headerCnt) * -1" />
    <mutant id="mutant_6082" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((entries.size()) - 1)" to="(((entries.size()) - 1) * -1)" />
    <mutant id="mutant_6083" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((entries.size()) - 1)" to="(((entries.size()) - 1) - 1)" />
    <mutant id="mutant_6084" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((entries.size()) - 1)" to="(((entries.size()) - 1) + 1)" />
    <mutant id="mutant_6085" viable="false" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((prefix) + (entries.get(((entries.size()) - 1))))" to="(((prefix) + (entries.get(((entries.size()) - 1)))) - 1)" />
    <mutant id="mutant_6086" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((prefix) + (entries.get(((entries.size()) - 1))))" to="(((prefix) + (entries.get(((entries.size()) - 1)))) + 1)" />
    <mutant id="mutant_3809" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(src.offset) + headerCnt" to="((src.offset) + headerCnt) + 1" />
    <mutant id="mutant_6087" viable="false" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((prefix) + (entries.get(((entries.size()) - 1))))" to="(((prefix) + (entries.get(((entries.size()) - 1)))) * -1)" />
    <mutant id="mutant_3808" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((src.offset) + headerCnt)" to="(((src.offset) + headerCnt) - 1)" />
    <mutant id="mutant_6088" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(&quot;Key&quot;.equals(name)) || (&quot;IsTruncated&quot;.equals(name))" to="!((&quot;Key&quot;.equals(name)) || (&quot;IsTruncated&quot;.equals(name)))" />
    <mutant id="mutant_3807" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((src.offset) + headerCnt)" to="(((src.offset) + headerCnt) * -1)" />
    <mutant id="mutant_6089" viable="true" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(&quot;Invalid acl: &quot; + pacl)" to="((&quot;Invalid acl: &quot; + pacl) + 1)" />
    <mutant id="mutant_6080" viable="false" in="org.eclipse.jgit.transport.resolver.FileResolver.nameWithDotGit(java.lang.String)" from="name + (Constants.DOT_GIT_EXT)" to="(name + (Constants.DOT_GIT_EXT)) - 1" />
    <mutant id="mutant_6081" viable="true" in="org.eclipse.jgit.transport.resolver.FileResolver.nameWithDotGit(java.lang.String)" from="name + (Constants.DOT_GIT_EXT)" to="(name + (Constants.DOT_GIT_EXT)) + 1" />
    <mutant id="mutant_3806" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((src.offset) + headerCnt)" to="(((src.offset) + headerCnt) + 1)" />
    <mutant id="mutant_6079" viable="false" in="org.eclipse.jgit.transport.resolver.FileResolver.nameWithDotGit(java.lang.String)" from="name + (Constants.DOT_GIT_EXT)" to="(name + (Constants.DOT_GIT_EXT)) * -1" />
    <mutant id="mutant_3805" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + (delta.hdrLen))" to="((pos + (delta.hdrLen)) * -1)" />
    <mutant id="mutant_3804" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + (delta.hdrLen))" to="((pos + (delta.hdrLen)) + 1)" />
    <mutant id="mutant_3803" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + (delta.hdrLen))" to="((pos + (delta.hdrLen)) - 1)" />
    <mutant id="mutant_3802" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(p + 20)" to="((p + 20) + 1)" />
    <mutant id="mutant_3801" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(p + 20)" to="((p + 20) - 1)" />
    <mutant id="mutant_3800" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(p + 20)" to="((p + 20) * -1)" />
    <mutant id="mutant_6071" viable="true" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((((uri.setPass(null)) + &quot;: &quot;) + s) + 1)" />
    <mutant id="mutant_6072" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((((uri.setPass(null)) + &quot;: &quot;) + s) * -1)" />
    <mutant id="mutant_6073" viable="false" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(((uri.setPass(null)) + &quot;: &quot;) * -1)" />
    <mutant id="mutant_6074" viable="true" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(((uri.setPass(null)) + &quot;: &quot;) + 1)" />
    <mutant id="mutant_6075" viable="false" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(((uri.setPass(null)) + &quot;: &quot;) - 1)" />
    <mutant id="mutant_6076" viable="false" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((((uri.setPass(null)) + &quot;: &quot;) + s) - 1)" />
    <mutant id="mutant_6077" viable="true" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((((uri.setPass(null)) + &quot;: &quot;) + s) + 1)" />
    <mutant id="mutant_6078" viable="false" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((((uri.setPass(null)) + &quot;: &quot;) + s) * -1)" />
    <mutant id="mutant_6070" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((((uri.setPass(null)) + &quot;: &quot;) + s) - 1)" />
    <mutant id="mutant_6068" viable="true" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(((uri.setPass(null)) + &quot;: &quot;) + 1)" />
    <mutant id="mutant_6069" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(((uri.setPass(null)) + &quot;: &quot;) - 1)" />
    <mutant id="mutant_7399" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="((&quot;ERR &quot; + msg) + &quot;\n&quot;)" to="(((&quot;ERR &quot; + msg) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_6060" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) + &quot;]&quot;)" to="(((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) + &quot;]&quot;) + 1)" />
    <mutant id="mutant_7392" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;unshallow &quot; + (c.name()))" to="((&quot;unshallow &quot; + (c.name())) * -1)" />
    <mutant id="mutant_6061" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(((uri.setPass(null)) + &quot;: &quot;) * -1)" />
    <mutant id="mutant_7391" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;unshallow &quot; + (c.name()))" to="((&quot;unshallow &quot; + (c.name())) - 1)" />
    <mutant id="mutant_6062" viable="true" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(((uri.setPass(null)) + &quot;: &quot;) + 1)" />
    <mutant id="mutant_7394" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="(&quot;ERR &quot; + msg)" to="((&quot;ERR &quot; + msg) * -1)" />
    <mutant id="mutant_6063" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(((uri.setPass(null)) + &quot;: &quot;) - 1)" />
    <mutant id="mutant_7393" viable="false" in="org.eclipse.jgit.transport.UploadPack.recvWants()" from="(!(line.startsWith(&quot;want &quot;))) || ((line.length()) &lt; 45)" to="!((!(line.startsWith(&quot;want &quot;))) || ((line.length()) &lt; 45))" />
    <mutant id="mutant_6064" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((((uri.setPass(null)) + &quot;: &quot;) + s) - 1)" />
    <mutant id="mutant_7396" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="(&quot;ERR &quot; + msg)" to="((&quot;ERR &quot; + msg) - 1)" />
    <mutant id="mutant_6065" viable="true" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((((uri.setPass(null)) + &quot;: &quot;) + s) + 1)" />
    <mutant id="mutant_7395" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="(&quot;ERR &quot; + msg)" to="((&quot;ERR &quot; + msg) + 1)" />
    <mutant id="mutant_6066" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((((uri.setPass(null)) + &quot;: &quot;) + s) * -1)" />
    <mutant id="mutant_7398" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="((&quot;ERR &quot; + msg) + &quot;\n&quot;)" to="(((&quot;ERR &quot; + msg) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_6067" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(((uri.setPass(null)) + &quot;: &quot;) * -1)" />
    <mutant id="mutant_7397" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="((&quot;ERR &quot; + msg) + &quot;\n&quot;)" to="(((&quot;ERR &quot; + msg) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_7390" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;unshallow &quot; + (c.name()))" to="((&quot;unshallow &quot; + (c.name())) + 1)" />
    <mutant id="mutant_6057" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key)" to="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) - 1)" />
    <mutant id="mutant_7389" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="((c.getDepth()) &lt; (depth)) &amp;&amp; (clientShallowCommits.remove(c))" to="!(((c.getDepth()) &lt; (depth)) &amp;&amp; (clientShallowCommits.remove(c)))" />
    <mutant id="mutant_6058" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) + &quot;]&quot;)" to="(((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) + &quot;]&quot;) * -1)" />
    <mutant id="mutant_7388" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;shallow &quot; + (o.name()))" to="((&quot;shallow &quot; + (o.name())) - 1)" />
    <mutant id="mutant_6059" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) + &quot;]&quot;)" to="(((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) + &quot;]&quot;) - 1)" />
    <mutant id="mutant_2521" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length)))" to="(!((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))))" />
    <mutant id="mutant_3853" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(Constants.OBJECT_ID_LENGTH) + 8" to="((Constants.OBJECT_ID_LENGTH) + 8) * -1" />
    <mutant id="mutant_2522" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree)" to="!(((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree))" />
    <mutant id="mutant_3852" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(Constants.OBJECT_ID_LENGTH) + 8" to="((Constants.OBJECT_ID_LENGTH) + 8) - 1" />
    <mutant id="mutant_3851" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(Constants.OBJECT_ID_LENGTH) + 8" to="((Constants.OBJECT_ID_LENGTH) + 8) + 1" />
    <mutant id="mutant_2520" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="!((slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/'))" />
    <mutant id="mutant_3850" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p) - 20" to="((len - p) - 20) + 1" />
    <mutant id="mutant_2529" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="!((slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/'))" />
    <mutant id="mutant_2527" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="((slash + 1) - 1)" />
    <mutant id="mutant_3859" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackKey()" from="(System.identityHashCode(this)) * 31" to="((System.identityHashCode(this)) * 31) + 1" />
    <mutant id="mutant_2528" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="((slash + 1) * -1)" />
    <mutant id="mutant_3858" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackKey()" from="(System.identityHashCode(this)) * 31" to="((System.identityHashCode(this)) * 31) * -1" />
    <mutant id="mutant_2525" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="((slash + 1) * -1)" />
    <mutant id="mutant_3857" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackKey()" from="(System.identityHashCode(this)) * 31" to="((System.identityHashCode(this)) * 31) - 1" />
    <mutant id="mutant_2526" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="((slash + 1) + 1)" />
    <mutant id="mutant_3856" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(objCnt * recSize)" to="((objCnt * recSize) * -1)" />
    <mutant id="mutant_2523" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="((slash + 1) + 1)" />
    <mutant id="mutant_3855" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(objCnt * recSize)" to="((objCnt * recSize) - 1)" />
    <mutant id="mutant_2524" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="((slash + 1) - 1)" />
    <mutant id="mutant_3854" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(objCnt * recSize)" to="((objCnt * recSize) + 1)" />
    <mutant id="mutant_2510" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="nameEnd - nameStart" to="(nameEnd - nameStart) * -1" />
    <mutant id="mutant_3842" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos + p)" to="((pos + p) * -1)" />
    <mutant id="mutant_2511" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="!((slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/'))" />
    <mutant id="mutant_3841" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="(len - p) - 1" />
    <mutant id="mutant_3840" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="(len - p) * -1" />
    <mutant id="mutant_2518" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="((slash + 1) - 1)" />
    <mutant id="mutant_2519" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="((slash + 1) * -1)" />
    <mutant id="mutant_3849" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p) - 20" to="((len - p) - 20) - 1" />
    <mutant id="mutant_2516" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="((slash + 1) * -1)" />
    <mutant id="mutant_3848" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p) - 20" to="((len - p) - 20) * -1" />
    <mutant id="mutant_2517" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="((slash + 1) + 1)" />
    <mutant id="mutant_3847" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p)" to="((len - p) - 1)" />
    <mutant id="mutant_2514" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="((slash + 1) + 1)" />
    <mutant id="mutant_3846" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p)" to="((len - p) * -1)" />
    <mutant id="mutant_2515" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="((slash + 1) - 1)" />
    <mutant id="mutant_3845" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p)" to="((len - p) + 1)" />
    <mutant id="mutant_2512" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length)))" to="(!((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))))" />
    <mutant id="mutant_3844" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos + p)" to="((pos + p) - 1)" />
    <mutant id="mutant_2513" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree)" to="!(((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree))" />
    <mutant id="mutant_3843" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos + p)" to="((pos + p) + 1)" />
    <mutant id="mutant_2509" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="nameEnd - nameStart" to="(nameEnd - nameStart) + 1" />
    <mutant id="mutant_3831" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(rev.findNextOffset(pos, ((length) - 20))) - pos" to="((rev.findNextOffset(pos, ((length) - 20))) - pos) * -1" />
    <mutant id="mutant_2500" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + 1)" to="((low + 1) * -1)" />
    <mutant id="mutant_3830" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(rev.findNextOffset(pos, ((length) - 20))) - pos" to="((rev.findNextOffset(pos, ((length) - 20))) - pos) - 1" />
    <mutant id="mutant_2507" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(nameEnd - 1)" to="((nameEnd - 1) * -1)" />
    <mutant id="mutant_3839" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="(len - p) + 1" />
    <mutant id="mutant_2508" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="nameEnd - nameStart" to="(nameEnd - nameStart) - 1" />
    <mutant id="mutant_3838" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos - ofs)" to="((pos - ofs) + 1)" />
    <mutant id="mutant_2505" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(nameEnd - 1)" to="((nameEnd - 1) - 1)" />
    <mutant id="mutant_3837" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos - ofs)" to="((pos - ofs) * -1)" />
    <mutant id="mutant_2506" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(nameEnd - 1)" to="((nameEnd - 1) + 1)" />
    <mutant id="mutant_3836" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos - ofs)" to="((pos - ofs) - 1)" />
    <mutant id="mutant_2503" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="((a.length) - 1)" to="(((a.length) - 1) - 1)" />
    <mutant id="mutant_3835" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="(len - p) - 1" />
    <mutant id="mutant_2504" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="((a.length) - 1)" to="(((a.length) - 1) + 1)" />
    <mutant id="mutant_3834" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="(len - p) * -1" />
    <mutant id="mutant_2501" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(j &lt; (a.length)) &amp;&amp; (k &lt; nameEnd)" to="!((j &lt; (a.length)) &amp;&amp; (k &lt; nameEnd))" />
    <mutant id="mutant_3833" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="(len - p) + 1" />
    <mutant id="mutant_2502" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="((a.length) - 1)" to="(((a.length) - 1) * -1)" />
    <mutant id="mutant_3832" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(rev.findNextOffset(pos, ((length) - 20))) - pos" to="((rev.findNextOffset(pos, ((length) - 20))) - pos) + 1" />
    <mutant id="mutant_3829" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="((length) - 20)" to="(((length) - 20) - 1)" />
    <mutant id="mutant_3820" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="((length) - (12 + 20)) + 1" />
    <mutant id="mutant_3828" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="((length) - 20)" to="(((length) - 20) * -1)" />
    <mutant id="mutant_3827" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="((length) - 20)" to="(((length) - 20) + 1)" />
    <mutant id="mutant_3826" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="(((b.size()) - ptr) * -1)" />
    <mutant id="mutant_3825" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="(((b.size()) - ptr) - 1)" />
    <mutant id="mutant_3824" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="(((b.size()) - ptr) + 1)" />
    <mutant id="mutant_3823" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="((int)((position - (b.start)))) - 1" />
    <mutant id="mutant_3822" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="((int)((position - (b.start)))) * -1" />
    <mutant id="mutant_3821" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="((int)((position - (b.start)))) + 1" />
    <mutant id="mutant_1234" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 2)" to="((p + 2) + 1)" />
    <mutant id="mutant_2565" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr + nameLen)" to="((rawPtr + nameLen) + 1)" />
    <mutant id="mutant_3897" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$2.compare(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="(((a.getOffset()) - (b.getOffset())) * -1)" />
    <mutant id="mutant_1235" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 2)" to="((p + 2) * -1)" />
    <mutant id="mutant_2566" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="nameLen + 1" to="(nameLen + 1) + 1" />
    <mutant id="mutant_3896" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$2.compare(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="(((a.getOffset()) - (b.getOffset())) + 1)" />
    <mutant id="mutant_1232" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_2563" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr + nameLen)" to="((rawPtr + nameLen) - 1)" />
    <mutant id="mutant_3895" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$2.compare(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="(((a.getOffset()) - (b.getOffset())) - 1)" />
    <mutant id="mutant_1233" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 2)" to="((p + 2) - 1)" />
    <mutant id="mutant_2564" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr + nameLen)" to="((rawPtr + nameLen) * -1)" />
    <mutant id="mutant_3894" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="((a.offset) - (b.offset))" to="(((a.offset) - (b.offset)) * -1)" />
    <mutant id="mutant_1230" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_2561" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_3893" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="((a.offset) - (b.offset))" to="(((a.offset) - (b.offset)) - 1)" />
    <mutant id="mutant_1231" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_2562" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_3892" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="((a.offset) - (b.offset))" to="(((a.offset) - (b.offset)) + 1)" />
    <mutant id="mutant_3891" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="(a.packIndex) - (b.packIndex)" to="((a.packIndex) - (b.packIndex)) - 1" />
    <mutant id="mutant_2560" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_3890" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="(a.packIndex) - (b.packIndex)" to="((a.packIndex) - (b.packIndex)) + 1" />
    <mutant id="mutant_1238" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 3)" to="((p + 3) - 1)" />
    <mutant id="mutant_2569" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="((c.length) - 1) * -1" />
    <mutant id="mutant_1239" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 4)" to="((p + 4) * -1)" />
    <mutant id="mutant_1236" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 3)" to="((p + 3) + 1)" />
    <mutant id="mutant_2567" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="nameLen + 1" to="(nameLen + 1) - 1" />
    <mutant id="mutant_3899" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="((last) != null) &amp;&amp; (last.hasObject(this, objectId))" to="!(((last) != null) &amp;&amp; (last.hasObject(this, objectId)))" />
    <mutant id="mutant_1237" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 3)" to="((p + 3) * -1)" />
    <mutant id="mutant_2568" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="nameLen + 1" to="(nameLen + 1) * -1" />
    <mutant id="mutant_3898" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.findAll(java.lang.Iterable)" from="noGarbage &amp;&amp; (pack.isGarbage())" to="!(noGarbage &amp;&amp; (pack.isGarbage()))" />
    <mutant id="mutant_1223" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 8)" to="((p + 8) - 1)" />
    <mutant id="mutant_2554" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr &lt; rawSize) &amp;&amp; ((raw[rawPtr]) != 0)" to="!((rawPtr &lt; rawSize) &amp;&amp; ((raw[rawPtr]) != 0))" />
    <mutant id="mutant_3886" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size) * size" to="(((blockCache.getBlockSize()) / size) * size) + 1" />
    <mutant id="mutant_1224" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 12)" to="((p + 12) * -1)" />
    <mutant id="mutant_2555" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="!((c &lt; '0') || (c &gt; '7'))" />
    <mutant id="mutant_3885" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size)" to="(((blockCache.getBlockSize()) / size) + 1)" />
    <mutant id="mutant_1221" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 8)" to="((p + 8) * -1)" />
    <mutant id="mutant_2552" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="(p - 1) * -1" />
    <mutant id="mutant_3884" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size)" to="(((blockCache.getBlockSize()) / size) * -1)" />
    <mutant id="mutant_1222" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 8)" to="((p + 8) + 1)" />
    <mutant id="mutant_2553" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="(p - 1) + 1" />
    <mutant id="mutant_3883" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size)" to="(((blockCache.getBlockSize()) / size) - 1)" />
    <mutant id="mutant_2550" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(k + 1)" to="((k + 1) * -1)" />
    <mutant id="mutant_3882" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.buffer(byte[],int,int)" from="((currBuf.length) - (currEnd))" to="(((currBuf.length) - (currEnd)) - 1)" />
    <mutant id="mutant_1220" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 4)" to="((p + 4) + 1)" />
    <mutant id="mutant_2551" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="(p - 1) - 1" />
    <mutant id="mutant_3881" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.buffer(byte[],int,int)" from="((currBuf.length) - (currEnd))" to="(((currBuf.length) - (currEnd)) + 1)" />
    <mutant id="mutant_3880" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.buffer(byte[],int,int)" from="((currBuf.length) - (currEnd))" to="(((currBuf.length) - (currEnd)) * -1)" />
    <mutant id="mutant_1229" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 16)" to="((p + 16) + 1)" />
    <mutant id="mutant_1227" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 16)" to="((p + 16) * -1)" />
    <mutant id="mutant_2558" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_1228" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 16)" to="((p + 16) - 1)" />
    <mutant id="mutant_2559" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="!((c &lt; '0') || (c &gt; '7'))" />
    <mutant id="mutant_3889" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="(a.packIndex) - (b.packIndex)" to="((a.packIndex) - (b.packIndex)) * -1" />
    <mutant id="mutant_1225" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 12)" to="((p + 12) - 1)" />
    <mutant id="mutant_2556" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_3888" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size) * size" to="(((blockCache.getBlockSize()) / size) * size) * -1" />
    <mutant id="mutant_1226" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 12)" to="((p + 12) + 1)" />
    <mutant id="mutant_2557" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_3887" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size) * size" to="(((blockCache.getBlockSize()) / size) * size) - 1" />
    <mutant id="mutant_1212" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="((end - offset) - 1)" />
    <mutant id="mutant_2543" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_3875" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize))" to="((pos / (blockSize)) + 1)" />
    <mutant id="mutant_1213" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="((end - offset) * -1)" />
    <mutant id="mutant_2544" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_3874" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize))" to="((pos / (blockSize)) - 1)" />
    <mutant id="mutant_1210" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="((end - offset) * -1)" />
    <mutant id="mutant_2541" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) + 1" to="((c.length) + 1) + 1" />
    <mutant id="mutant_3873" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize))" to="((pos / (blockSize)) * -1)" />
    <mutant id="mutant_1211" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="((end - offset) + 1)" />
    <mutant id="mutant_2542" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_3872" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((packEnd) - start)" to="(((packEnd) - start) * -1)" />
    <mutant id="mutant_3871" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((packEnd) - start)" to="(((packEnd) - start) + 1)" />
    <mutant id="mutant_2540" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) + 1" to="((c.length) + 1) * -1" />
    <mutant id="mutant_3870" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((packEnd) - start)" to="(((packEnd) - start) - 1)" />
    <mutant id="mutant_1218" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 4)" to="((p + 4) * -1)" />
    <mutant id="mutant_2549" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(k + 1)" to="((k + 1) - 1)" />
    <mutant id="mutant_1219" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 4)" to="((p + 4) - 1)" />
    <mutant id="mutant_1216" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5)))" to="(!(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))))" />
    <mutant id="mutant_2547" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="((c.length) - 1) + 1" />
    <mutant id="mutant_3879" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="rollback &amp;&amp; ((packDsc) != null)" to="!(rollback &amp;&amp; ((packDsc) != null))" />
    <mutant id="mutant_1217" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1))" to="!((((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1)))" />
    <mutant id="mutant_2548" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(k + 1)" to="((k + 1) + 1)" />
    <mutant id="mutant_3878" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="((pos / (blockSize)) * (blockSize)) + 1" />
    <mutant id="mutant_1214" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" to="(!(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))))" />
    <mutant id="mutant_2545" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="((c.length) - 1) * -1" />
    <mutant id="mutant_3877" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="((pos / (blockSize)) * (blockSize)) - 1" />
    <mutant id="mutant_1215" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" to="(!((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))))" />
    <mutant id="mutant_2546" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="((c.length) - 1) - 1" />
    <mutant id="mutant_3876" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="((pos / (blockSize)) * (blockSize)) * -1" />
    <mutant id="mutant_1201" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 32)" to="((ptr + 32) - 1)" />
    <mutant id="mutant_2532" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="((s.length) - 1)" to="(((s.length) - 1) + 1)" />
    <mutant id="mutant_3864" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((int)((readPos) - (currPos)))" to="((int)(((readPos) - (currPos)))) - 1" />
    <mutant id="mutant_1202" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_2533" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash + 1)" to="((slash + 1) + 1)" />
    <mutant id="mutant_3863" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((int)((readPos) - (currPos)))" to="((int)(((readPos) - (currPos)))) * -1" />
    <mutant id="mutant_2530" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="((s.length) - 1)" to="(((s.length) - 1) * -1)" />
    <mutant id="mutant_3862" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="((len - 1) + 1)" />
    <mutant id="mutant_1200" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 32)" to="((ptr + 32) + 1)" />
    <mutant id="mutant_2531" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="((s.length) - 1)" to="(((s.length) - 1) - 1)" />
    <mutant id="mutant_3861" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="((len - 1) * -1)" />
    <mutant id="mutant_3860" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="((len - 1) - 1)" />
    <mutant id="mutant_1209" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="((end - offset) - 1)" />
    <mutant id="mutant_1207" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_2538" viable="true" in="org.eclipse.jgit.lib.Tree.members()" from="(c.length) - 1" to="((c.length) - 1) + 1" />
    <mutant id="mutant_1208" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="((end - offset) + 1)" />
    <mutant id="mutant_2539" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) + 1" to="((c.length) + 1) - 1" />
    <mutant id="mutant_3869" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((readBlock) == null) || (!(readBlock.contains(packKey, readPos)))" to="!(((readBlock) == null) || (!(readBlock.contains(packKey, readPos))))" />
    <mutant id="mutant_1205" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="((end - ptr) + 1)" />
    <mutant id="mutant_2536" viable="true" in="org.eclipse.jgit.lib.Tree.members()" from="(c.length) - 1" to="((c.length) - 1) * -1" />
    <mutant id="mutant_3868" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((currEnd) - p)" to="(((currEnd) - p) - 1)" />
    <mutant id="mutant_1206" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_2537" viable="true" in="org.eclipse.jgit.lib.Tree.members()" from="(c.length) - 1" to="((c.length) - 1) - 1" />
    <mutant id="mutant_3867" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((currEnd) - p)" to="(((currEnd) - p) * -1)" />
    <mutant id="mutant_1203" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="((end - ptr) - 1)" />
    <mutant id="mutant_2534" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash + 1)" to="((slash + 1) - 1)" />
    <mutant id="mutant_3866" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((currEnd) - p)" to="(((currEnd) - p) + 1)" />
    <mutant id="mutant_1204" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="((end - ptr) * -1)" />
    <mutant id="mutant_2535" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash + 1)" to="((slash + 1) * -1)" />
    <mutant id="mutant_3865" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((int)((readPos) - (currPos)))" to="((int)(((readPos) - (currPos)))) + 1" />
    <mutant id="mutant_1281" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 8)" to="((o + 8) * -1)" />
    <mutant id="mutant_1282" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 8)" to="((o + 8) + 1)" />
    <mutant id="mutant_1280" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 0)" to="((o + 0) + 1)" />
    <mutant id="mutant_1278" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 0)" to="((o + 0) * -1)" />
    <mutant id="mutant_1279" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 0)" to="((o + 0) - 1)" />
    <mutant id="mutant_1276" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 4)" to="((o + 4) - 1)" />
    <mutant id="mutant_1277" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 4)" to="((o + 4) * -1)" />
    <mutant id="mutant_1274" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 3)" to="((o + 3) * -1)" />
    <mutant id="mutant_1275" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 4)" to="((o + 4) + 1)" />
    <mutant id="mutant_1272" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 3)" to="((o + 3) - 1)" />
    <mutant id="mutant_1273" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 3)" to="((o + 3) + 1)" />
    <mutant id="mutant_1270" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 2)" to="((o + 2) - 1)" />
    <mutant id="mutant_1271" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 2)" to="((o + 2) + 1)" />
    <mutant id="mutant_1267" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 1)" to="((o + 1) * -1)" />
    <mutant id="mutant_2598" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) + 2" to="((((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) + 2) - 1" />
    <mutant id="mutant_1268" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 1)" to="((o + 1) - 1)" />
    <mutant id="mutant_2599" viable="true" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;)" to="((username + &quot;@&quot;) + 1)" />
    <mutant id="mutant_1265" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 16)" to="((o + 16) + 1)" />
    <mutant id="mutant_2596" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) + 2" to="((((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) + 2) + 1" />
    <mutant id="mutant_1266" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 1)" to="((o + 1) + 1)" />
    <mutant id="mutant_2597" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) + 2" to="((((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) + 2) * -1" />
    <mutant id="mutant_1263" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 16)" to="((o + 16) * -1)" />
    <mutant id="mutant_2594" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH))" to="((((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) + 1)" />
    <mutant id="mutant_1264" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 16)" to="((o + 16) - 1)" />
    <mutant id="mutant_2595" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH))" to="((((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) - 1)" />
    <mutant id="mutant_1261" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 12)" to="((o + 12) * -1)" />
    <mutant id="mutant_2592" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="((mode.copyToLength()) + nameLen)" to="(((mode.copyToLength()) + nameLen) + 1)" />
    <mutant id="mutant_1262" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 12)" to="((o + 12) + 1)" />
    <mutant id="mutant_2593" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH))" to="((((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) * -1)" />
    <mutant id="mutant_1269" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 2)" to="((o + 2) * -1)" />
    <mutant id="mutant_2590" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="((mode.copyToLength()) + nameLen)" to="(((mode.copyToLength()) + nameLen) * -1)" />
    <mutant id="mutant_1260" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 12)" to="((o + 12) - 1)" />
    <mutant id="mutant_2591" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="((mode.copyToLength()) + nameLen)" to="(((mode.copyToLength()) + nameLen) - 1)" />
    <mutant id="mutant_1256" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 4)" to="((o + 4) * -1)" />
    <mutant id="mutant_2587" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((ptr) + (TreeFormatter.entrySize(mode, nameLen)))" to="(((ptr) + (TreeFormatter.entrySize(mode, nameLen))) + 1)" />
    <mutant id="mutant_1257" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 8)" to="((o + 8) * -1)" />
    <mutant id="mutant_2588" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((ptr) + (TreeFormatter.entrySize(mode, nameLen)))" to="(((ptr) + (TreeFormatter.entrySize(mode, nameLen))) * -1)" />
    <mutant id="mutant_1254" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 4)" to="((o + 4) + 1)" />
    <mutant id="mutant_2585" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null))) || (!(id.equals(n)))" to="!(((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null))) || (!(id.equals(n))))" />
    <mutant id="mutant_1255" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 4)" to="((o + 4) - 1)" />
    <mutant id="mutant_2586" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((ptr) + (TreeFormatter.entrySize(mode, nameLen)))" to="(((ptr) + (TreeFormatter.entrySize(mode, nameLen))) - 1)" />
    <mutant id="mutant_1252" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name())) + &quot;]&quot;" to="((&quot;AnyObjectId[&quot; + (name())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_2583" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(((id) != null) &amp;&amp; (n == null))" to="(!(((id) != null) &amp;&amp; (n == null)))" />
    <mutant id="mutant_1253" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name())) + &quot;]&quot;" to="((&quot;AnyObjectId[&quot; + (name())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_2584" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null)))" to="(!((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null))))" />
    <mutant id="mutant_1250" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name()))" to="((&quot;AnyObjectId[&quot; + (name())) + 1)" />
    <mutant id="mutant_2581" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(p != null) &amp;&amp; ((id) != n)" to="!((p != null) &amp;&amp; ((id) != n))" />
    <mutant id="mutant_1251" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name())) + &quot;]&quot;" to="((&quot;AnyObjectId[&quot; + (name())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_2582" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(((id) == null) &amp;&amp; (n != null))" to="(!(((id) == null) &amp;&amp; (n != null)))" />
    <mutant id="mutant_1258" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 8)" to="((o + 8) + 1)" />
    <mutant id="mutant_2589" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((buf) == null) || ((buf.length) &lt; ((ptr) + (TreeFormatter.entrySize(mode, nameLen))))" to="!(((buf) == null) || ((buf.length) &lt; ((ptr) + (TreeFormatter.entrySize(mode, nameLen)))))" />
    <mutant id="mutant_1259" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 8)" to="((o + 8) - 1)" />
    <mutant id="mutant_2580" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="(p - 1) + 1" />
    <mutant id="mutant_1245" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(8 * (3 - (index &amp; 3)))" to="((8 * (3 - (index &amp; 3))) * -1)" />
    <mutant id="mutant_2576" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(k - 1)" to="((k - 1) + 1)" />
    <mutant id="mutant_1246" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(8 * (3 - (index &amp; 3)))" to="((8 * (3 - (index &amp; 3))) + 1)" />
    <mutant id="mutant_2577" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(k - 1)" to="((k - 1) - 1)" />
    <mutant id="mutant_1243" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(3 - (index &amp; 3))" to="((3 - (index &amp; 3)) + 1)" />
    <mutant id="mutant_2574" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="((c.length) - 1) + 1" />
    <mutant id="mutant_1244" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(3 - (index &amp; 3))" to="((3 - (index &amp; 3)) - 1)" />
    <mutant id="mutant_2575" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(k - 1)" to="((k - 1) * -1)" />
    <mutant id="mutant_1241" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 4)" to="((p + 4) + 1)" />
    <mutant id="mutant_2572" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="((c.length) - 1) * -1" />
    <mutant id="mutant_1242" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(3 - (index &amp; 3))" to="((3 - (index &amp; 3)) * -1)" />
    <mutant id="mutant_2573" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="((c.length) - 1) - 1" />
    <mutant id="mutant_2570" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="((c.length) - 1) - 1" />
    <mutant id="mutant_1240" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 4)" to="((p + 4) - 1)" />
    <mutant id="mutant_2571" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="((c.length) - 1) + 1" />
    <mutant id="mutant_1249" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name()))" to="((&quot;AnyObjectId[&quot; + (name())) * -1)" />
    <mutant id="mutant_1247" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(8 * (3 - (index &amp; 3)))" to="((8 * (3 - (index &amp; 3))) - 1)" />
    <mutant id="mutant_2578" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="(p - 1) - 1" />
    <mutant id="mutant_1248" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name()))" to="((&quot;AnyObjectId[&quot; + (name())) - 1)" />
    <mutant id="mutant_2579" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="(p - 1) * -1" />
    <mutant id="mutant_1083" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + ((value) == null ? 0 : value.hashCode())" to="((prime * result) + ((value) == null ? 0 : value.hashCode())) + 1" />
    <mutant id="mutant_1084" viable="true" in="org.eclipse.jgit.attributes.Attribute.toString()" from="&quot;-&quot; + (key)" to="(&quot;-&quot; + (key)) + 1" />
    <mutant id="mutant_1081" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + ((value) == null ? 0 : value.hashCode())" to="((prime * result) + ((value) == null ? 0 : value.hashCode())) - 1" />
    <mutant id="mutant_1082" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + ((value) == null ? 0 : value.hashCode())" to="((prime * result) + ((value) == null ? 0 : value.hashCode())) * -1" />
    <mutant id="mutant_1080" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="((prime * result) * -1)" />
    <mutant id="mutant_1078" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="((prime * result) - 1)" />
    <mutant id="mutant_1079" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="((prime * result) + 1)" />
    <mutant id="mutant_1076" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (state.hashCode())" to="((prime * result) + (state.hashCode())) * -1" />
    <mutant id="mutant_1077" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (state.hashCode())" to="((prime * result) + (state.hashCode())) + 1" />
    <mutant id="mutant_1074" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="((prime * result) * -1)" />
    <mutant id="mutant_1075" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (state.hashCode())" to="((prime * result) + (state.hashCode())) - 1" />
    <mutant id="mutant_1072" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="((prime * result) - 1)" />
    <mutant id="mutant_1073" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="((prime * result) + 1)" />
    <mutant id="mutant_1070" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (key.hashCode())" to="((prime * result) + (key.hashCode())) - 1" />
    <mutant id="mutant_1071" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (key.hashCode())" to="((prime * result) + (key.hashCode())) * -1" />
    <mutant id="mutant_1069" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (key.hashCode())" to="((prime * result) + (key.hashCode())) + 1" />
    <mutant id="mutant_1067" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="((prime * result) + 1)" />
    <mutant id="mutant_2398" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - i)" to="(((revChars.length) - i) - 1)" />
    <mutant id="mutant_1068" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="((prime * result) * -1)" />
    <mutant id="mutant_2399" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - i)" to="(((revChars.length) - i) * -1)" />
    <mutant id="mutant_1065" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.hash(org.eclipse.jgit.diff.Subsequence,int)" from="(ptr + (seq.begin))" to="((ptr + (seq.begin)) - 1)" />
    <mutant id="mutant_2396" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_1066" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="((prime * result) - 1)" />
    <mutant id="mutant_2397" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - i)" to="(((revChars.length) - i) + 1)" />
    <mutant id="mutant_1063" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.hash(org.eclipse.jgit.diff.Subsequence,int)" from="(ptr + (seq.begin))" to="((ptr + (seq.begin)) + 1)" />
    <mutant id="mutant_2394" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_1064" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.hash(org.eclipse.jgit.diff.Subsequence,int)" from="(ptr + (seq.begin))" to="((ptr + (seq.begin)) * -1)" />
    <mutant id="mutant_2395" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_1061" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(bi + (b.begin))" to="((bi + (b.begin)) + 1)" />
    <mutant id="mutant_2392" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - 1)" to="(((revChars.length) - 1) - 1)" />
    <mutant id="mutant_1062" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(bi + (b.begin))" to="((bi + (b.begin)) - 1)" />
    <mutant id="mutant_2393" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - 1)" to="(((revChars.length) - 1) + 1)" />
    <mutant id="mutant_2390" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="((&quot;x/&quot; + name) + 1)" />
    <mutant id="mutant_1060" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(bi + (b.begin))" to="((bi + (b.begin)) * -1)" />
    <mutant id="mutant_2391" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - 1)" to="(((revChars.length) - 1) * -1)" />
    <mutant id="mutant_1058" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(ai + (a.begin))" to="((ai + (a.begin)) - 1)" />
    <mutant id="mutant_2389" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="((&quot;x/&quot; + name) - 1)" />
    <mutant id="mutant_1059" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(ai + (a.begin))" to="((ai + (a.begin)) * -1)" />
    <mutant id="mutant_1056" viable="true" in="org.eclipse.jgit.diff.Subsequence(S,int,int)" from="end - begin" to="(end - begin) + 1" />
    <mutant id="mutant_2387" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="((&quot;x/&quot; + name) + 1)" />
    <mutant id="mutant_1057" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(ai + (a.begin))" to="((ai + (a.begin)) + 1)" />
    <mutant id="mutant_2388" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="((&quot;x/&quot; + name) * -1)" />
    <mutant id="mutant_1054" viable="true" in="org.eclipse.jgit.diff.Subsequence(S,int,int)" from="end - begin" to="(end - begin) * -1" />
    <mutant id="mutant_2385" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="((&quot;x/&quot; + name) * -1)" />
    <mutant id="mutant_1055" viable="true" in="org.eclipse.jgit.diff.Subsequence(S,int,int)" from="end - begin" to="(end - begin) - 1" />
    <mutant id="mutant_2386" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="((&quot;x/&quot; + name) - 1)" />
    <mutant id="mutant_1052" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="((2 * (srcs.size())) * (dsts.size()))" to="(((2 * (srcs.size())) * (dsts.size())) - 1)" />
    <mutant id="mutant_2383" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((m - i) - 2)" to="(((m - i) - 2) - 1)" />
    <mutant id="mutant_1053" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="((2 * (srcs.size())) * (dsts.size()))" to="(((2 * (srcs.size())) * (dsts.size())) + 1)" />
    <mutant id="mutant_2384" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((m - i) - 2)" to="(((m - i) - 2) * -1)" />
    <mutant id="mutant_1050" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="(2 * (srcs.size()))" to="((2 * (srcs.size())) + 1)" />
    <mutant id="mutant_2381" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(m - i)" to="((m - i) - 1)" />
    <mutant id="mutant_1051" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="((2 * (srcs.size())) * (dsts.size()))" to="(((2 * (srcs.size())) * (dsts.size())) * -1)" />
    <mutant id="mutant_2382" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((m - i) - 2)" to="(((m - i) - 2) + 1)" />
    <mutant id="mutant_2380" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(m - i)" to="((m - i) * -1)" />
    <mutant id="mutant_1047" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.encodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - idx" to="((SimilarityRenameDetector.INDEX_MASK) - idx) + 1" />
    <mutant id="mutant_2378" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="((i + 2) - 1)" />
    <mutant id="mutant_1048" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="(2 * (srcs.size()))" to="((2 * (srcs.size())) * -1)" />
    <mutant id="mutant_2379" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(m - i)" to="((m - i) + 1)" />
    <mutant id="mutant_1045" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.encodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - idx" to="((SimilarityRenameDetector.INDEX_MASK) - idx) * -1" />
    <mutant id="mutant_2376" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="((i + 2) + 1)" />
    <mutant id="mutant_1046" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.encodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - idx" to="((SimilarityRenameDetector.INDEX_MASK) - idx) - 1" />
    <mutant id="mutant_2377" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="((i + 2) * -1)" />
    <mutant id="mutant_1043" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100" to="((((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100) - 1" />
    <mutant id="mutant_2374" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="(i + 2) * -1" />
    <mutant id="mutant_1044" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100" to="((((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100) * -1" />
    <mutant id="mutant_2375" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="(i + 2) - 1" />
    <mutant id="mutant_1041" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50))" to="((((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) - 1)" />
    <mutant id="mutant_2372" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((i + 1) &lt; (revChars.length)) &amp;&amp; ((revChars[(i + 1)]) != '{')" to="!(((i + 1) &lt; (revChars.length)) &amp;&amp; ((revChars[(i + 1)]) != '{'))" />
    <mutant id="mutant_1042" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100" to="((((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100) + 1" />
    <mutant id="mutant_2373" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="(i + 2) + 1" />
    <mutant id="mutant_1049" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="(2 * (srcs.size()))" to="((2 * (srcs.size())) - 1)" />
    <mutant id="mutant_8508" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) - 1)" />
    <mutant id="mutant_8507" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) + 1)" />
    <mutant id="mutant_8509" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) * -1)" />
    <mutant id="mutant_8500" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen) - overflow" to="((startOff + startLen) - overflow) - 1" />
    <mutant id="mutant_8502" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) - 1)" />
    <mutant id="mutant_8501" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) + 1)" />
    <mutant id="mutant_8504" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(i - lastw)" to="((i - lastw) - 1)" />
    <mutant id="mutant_8503" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) * -1)" />
    <mutant id="mutant_8506" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(i - lastw)" to="((i - lastw) + 1)" />
    <mutant id="mutant_8505" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(i - lastw)" to="((i - lastw) * -1)" />
    <mutant id="mutant_9827" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED)))" to="(!((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED))))" />
    <mutant id="mutant_9828" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED))) &amp;&amp; (!(fh.hasMetaDataChanges()))" to="!(((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED))) &amp;&amp; (!(fh.hasMetaDataChanges())))" />
    <mutant id="mutant_9821" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c)))" to="(!((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))))" />
    <mutant id="mutant_9822" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - (Patch.BIN_TRAILER.length))" to="((eol - (Patch.BIN_TRAILER.length)) + 1)" />
    <mutant id="mutant_9820" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - c)" to="((eol - c) * -1)" />
    <mutant id="mutant_9825" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0))" to="(!(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0)))" />
    <mutant id="mutant_9826" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0)) &amp;&amp; (Patch.matchAny(buf, c, Patch.BIN_HEADERS))" to="!((((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0)) &amp;&amp; (Patch.matchAny(buf, c, Patch.BIN_HEADERS)))" />
    <mutant id="mutant_9823" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - (Patch.BIN_TRAILER.length))" to="((eol - (Patch.BIN_TRAILER.length)) - 1)" />
    <mutant id="mutant_9824" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - (Patch.BIN_TRAILER.length))" to="((eol - (Patch.BIN_TRAILER.length)) * -1)" />
    <mutant id="mutant_9818" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - c)" to="((eol - c) - 1)" />
    <mutant id="mutant_9819" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - c)" to="((eol - c) + 1)" />
    <mutant id="mutant_9816" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.FileHeader.OLD_NAME)) &gt;= 0) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, n, org.eclipse.jgit.patch.FileHeader.NEW_NAME)) &gt;= 0)" to="!(((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.FileHeader.OLD_NAME)) &gt;= 0) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, n, org.eclipse.jgit.patch.FileHeader.NEW_NAME)) &gt;= 0))" />
    <mutant id="mutant_9817" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(fh.getHunks().isEmpty()) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.Patch.GIT_BINARY)) &gt;= 0)" to="!((fh.getHunks().isEmpty()) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.Patch.GIT_BINARY)) &gt;= 0))" />
    <mutant id="mutant_1098" viable="true" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) + 1)" />
    <mutant id="mutant_1099" viable="true" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) * -1)" />
    <mutant id="mutant_1096" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(patternEnd + 1)" to="((patternEnd + 1) * -1)" />
    <mutant id="mutant_1097" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(patternEnd + 1)" to="((patternEnd + 1) - 1)" />
    <mutant id="mutant_9810" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffGit(byte[],int,int)" from="(start + (Patch.DIFF_GIT.length))" to="((start + (Patch.DIFF_GIT.length)) * -1)" />
    <mutant id="mutant_9811" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffGit(byte[],int,int)" from="(start + (Patch.DIFF_GIT.length))" to="((start + (Patch.DIFF_GIT.length)) + 1)" />
    <mutant id="mutant_9814" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="(n - c)" to="((n - c) - 1)" />
    <mutant id="mutant_9815" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="(n - c)" to="((n - c) + 1)" />
    <mutant id="mutant_9812" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffGit(byte[],int,int)" from="(start + (Patch.DIFF_GIT.length))" to="((start + (Patch.DIFF_GIT.length)) - 1)" />
    <mutant id="mutant_9813" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="(n - c)" to="((n - c) * -1)" />
    <mutant id="mutant_1094" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.startsWith(&quot;!&quot;)))" to="!((((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.startsWith(&quot;!&quot;))))" />
    <mutant id="mutant_1095" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(patternEnd + 1)" to="((patternEnd + 1) + 1)" />
    <mutant id="mutant_1092" viable="true" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;) + (value)" to="(((key) + &quot;=&quot;) + (value)) + 1" />
    <mutant id="mutant_1093" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;))))" to="(!(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))))" />
    <mutant id="mutant_1090" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;) + (value)" to="(((key) + &quot;=&quot;) + (value)) * -1" />
    <mutant id="mutant_1091" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;) + (value)" to="(((key) + &quot;=&quot;) + (value)) - 1" />
    <mutant id="mutant_9807" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffCombined(byte[],byte[],int,int)" from="(start + (hdr.length))" to="((start + (hdr.length)) * -1)" />
    <mutant id="mutant_9808" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffCombined(byte[],byte[],int,int)" from="(start + (hdr.length))" to="((start + (hdr.length)) + 1)" />
    <mutant id="mutant_1089" viable="true" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;)" to="(((key) + &quot;=&quot;) + 1)" />
    <mutant id="mutant_9805" viable="true" in="org.eclipse.jgit.patch.HunkHeader.skipLine(java.lang.String[],int[],int)" from="end + 1" to="(end + 1) - 1" />
    <mutant id="mutant_9806" viable="true" in="org.eclipse.jgit.patch.HunkHeader.skipLine(java.lang.String[],int[],int)" from="end + 1" to="(end + 1) + 1" />
    <mutant id="mutant_1087" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;)" to="(((key) + &quot;=&quot;) * -1)" />
    <mutant id="mutant_1088" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;)" to="(((key) + &quot;=&quot;) - 1)" />
    <mutant id="mutant_1085" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="&quot;-&quot; + (key)" to="(&quot;-&quot; + (key)) - 1" />
    <mutant id="mutant_9809" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffCombined(byte[],byte[],int,int)" from="(start + (hdr.length))" to="((start + (hdr.length)) - 1)" />
    <mutant id="mutant_1086" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="&quot;-&quot; + (key)" to="(&quot;-&quot; + (key)) * -1" />
    <mutant id="mutant_9800" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) * -1)" />
    <mutant id="mutant_9803" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) * -1)" />
    <mutant id="mutant_9804" viable="true" in="org.eclipse.jgit.patch.HunkHeader.skipLine(java.lang.String[],int[],int)" from="end + 1" to="(end + 1) * -1" />
    <mutant id="mutant_9801" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) + 1)" />
    <mutant id="mutant_9802" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) - 1)" />
    <mutant id="mutant_7220" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;)" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + 1)" />
    <mutant id="mutant_8551" viable="false" in="?" from="(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; + (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)))" to="((&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; + (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;))) - 1)" />
    <mutant id="mutant_8550" viable="false" in="?" from="(&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;))" to="((&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)) + 1)" />
    <mutant id="mutant_7222" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;)" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) * -1)" />
    <mutant id="mutant_8553" viable="false" in="?" from="(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; + (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)))" to="((&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; + (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;))) * -1)" />
    <mutant id="mutant_7221" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;)" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) - 1)" />
    <mutant id="mutant_8552" viable="false" in="?" from="(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; + (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)))" to="((&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; + (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;))) + 1)" />
    <mutant id="mutant_7213" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) * -1)" />
    <mutant id="mutant_8544" viable="false" in="org.eclipse.jgit.util.io.ThrowingPrintWriter.println(java.lang.String)" from="(s + (LF))" to="((s + (LF)) - 1)" />
    <mutant id="mutant_7212" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + 1)" />
    <mutant id="mutant_8543" viable="true" in="org.eclipse.jgit.util.io.ThrowingPrintWriter.println(java.lang.String)" from="(s + (LF))" to="((s + (LF)) + 1)" />
    <mutant id="mutant_7215" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;)" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) * -1)" />
    <mutant id="mutant_8546" viable="false" in="?" from="(&quot;0123456789&quot; + &quot;+/&quot;)" to="((&quot;0123456789&quot; + &quot;+/&quot;) - 1)" />
    <mutant id="mutant_7214" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;)" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) - 1)" />
    <mutant id="mutant_8545" viable="false" in="?" from="(&quot;0123456789&quot; + &quot;+/&quot;)" to="((&quot;0123456789&quot; + &quot;+/&quot;) * -1)" />
    <mutant id="mutant_7217" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;)" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) * -1)" />
    <mutant id="mutant_8548" viable="false" in="?" from="(&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;))" to="((&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)) * -1)" />
    <mutant id="mutant_7216" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;)" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + 1)" />
    <mutant id="mutant_8547" viable="false" in="?" from="(&quot;0123456789&quot; + &quot;+/&quot;)" to="((&quot;0123456789&quot; + &quot;+/&quot;) + 1)" />
    <mutant id="mutant_7219" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;)" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + 1)" />
    <mutant id="mutant_7218" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;)" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) - 1)" />
    <mutant id="mutant_8549" viable="false" in="?" from="(&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;))" to="((&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)) - 1)" />
    <mutant id="mutant_8540" viable="false" in="org.eclipse.jgit.util.io.StreamCopyThread(java.io.InputStream,java.io.OutputStream)" from="((Thread.currentThread().getName()) + &quot;-StreamCopy&quot;)" to="(((Thread.currentThread().getName()) + &quot;-StreamCopy&quot;) * -1)" />
    <mutant id="mutant_7211" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) - 1)" />
    <mutant id="mutant_8542" viable="false" in="org.eclipse.jgit.util.io.ThrowingPrintWriter.println(java.lang.String)" from="(s + (LF))" to="((s + (LF)) * -1)" />
    <mutant id="mutant_7210" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="(((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;) + 1)" />
    <mutant id="mutant_8541" viable="true" in="org.eclipse.jgit.util.io.StreamCopyThread(java.io.InputStream,java.io.OutputStream)" from="((Thread.currentThread().getName()) + &quot;-StreamCopy&quot;)" to="(((Thread.currentThread().getName()) + &quot;-StreamCopy&quot;) + 1)" />
    <mutant id="mutant_7209" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="(((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;) * -1)" />
    <mutant id="mutant_7202" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) - 1)" />
    <mutant id="mutant_8533" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.begin(int)" from="(org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) + timeout" to="((org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) + timeout) + 1" />
    <mutant id="mutant_7201" viable="false" in="?" from="((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)" to="(((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;) + 1)" />
    <mutant id="mutant_8532" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.begin(int)" from="(org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) + timeout" to="((org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) + timeout) * -1" />
    <mutant id="mutant_7204" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + 1)" />
    <mutant id="mutant_8535" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(!(terminated)) &amp;&amp; (callingThread.isAlive())" to="!((!(terminated)) &amp;&amp; (callingThread.isAlive()))" />
    <mutant id="mutant_7203" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) * -1)" />
    <mutant id="mutant_8534" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.begin(int)" from="(org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) + timeout" to="((org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) + timeout) - 1" />
    <mutant id="mutant_7206" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P))" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) * -1)" />
    <mutant id="mutant_8537" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(deadline) - (InterruptTimer.AlarmState.now())" to="((deadline) - (InterruptTimer.AlarmState.now())) * -1" />
    <mutant id="mutant_7205" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P))" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) + 1)" />
    <mutant id="mutant_8536" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(deadline) - (InterruptTimer.AlarmState.now())" to="((deadline) - (InterruptTimer.AlarmState.now())) - 1" />
    <mutant id="mutant_7208" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="(((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;) - 1)" />
    <mutant id="mutant_8539" viable="false" in="org.eclipse.jgit.util.io.StreamCopyThread(java.io.InputStream,java.io.OutputStream)" from="((Thread.currentThread().getName()) + &quot;-StreamCopy&quot;)" to="(((Thread.currentThread().getName()) + &quot;-StreamCopy&quot;) - 1)" />
    <mutant id="mutant_7207" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P))" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) - 1)" />
    <mutant id="mutant_8538" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(deadline) - (InterruptTimer.AlarmState.now())" to="((deadline) - (InterruptTimer.AlarmState.now())) + 1" />
    <mutant id="mutant_7200" viable="false" in="?" from="((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)" to="(((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;) * -1)" />
    <mutant id="mutant_8531" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="i - off" to="(i - off) * -1" />
    <mutant id="mutant_8530" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="i - off" to="(i - off) - 1" />
    <mutant id="mutant_8529" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="i - off" to="(i - off) + 1" />
    <mutant id="mutant_8522" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.fillBuffer()" from="(isBinary) &amp;&amp; (abortIfBinary)" to="!((isBinary) &amp;&amp; (abortIfBinary))" />
    <mutant id="mutant_8521" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - 1)" to="(((off + len) - 1) - 1)" />
    <mutant id="mutant_8524" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="off + len" to="(off + len) - 1" />
    <mutant id="mutant_8523" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="off + len" to="(off + len) + 1" />
    <mutant id="mutant_8526" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="!(((ptr) == (cnt)) &amp;&amp; (!(fillBuffer())))" />
    <mutant id="mutant_8525" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="off + len" to="(off + len) * -1" />
    <mutant id="mutant_8528" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="!(((ptr) == (cnt)) &amp;&amp; (!(fillBuffer())))" />
    <mutant id="mutant_8527" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="(isBinary) || (b != '\r')" to="!((isBinary) || (b != '\r'))" />
    <mutant id="mutant_8520" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - 1)" to="(((off + len) - 1) + 1)" />
    <mutant id="mutant_8519" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - 1)" to="(((off + len) - 1) * -1)" />
    <mutant id="mutant_8518" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) * -1)" />
    <mutant id="mutant_8511" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) - 1)" />
    <mutant id="mutant_8510" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) + 1)" />
    <mutant id="mutant_8513" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - lastw)" to="(((off + len) - lastw) - 1)" />
    <mutant id="mutant_8512" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) * -1)" />
    <mutant id="mutant_8515" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - lastw)" to="(((off + len) - lastw) + 1)" />
    <mutant id="mutant_8514" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - lastw)" to="(((off + len) - lastw) * -1)" />
    <mutant id="mutant_8517" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) - 1)" />
    <mutant id="mutant_8516" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) + 1)" />
    <mutant id="mutant_7260" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) - 1)" />
    <mutant id="mutant_8591" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) + 1)" />
    <mutant id="mutant_8590" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) - 1)" />
    <mutant id="mutant_7262" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) + 1)" />
    <mutant id="mutant_8593" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 2)" to="((destOffset + 2) * -1)" />
    <mutant id="mutant_7261" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) * -1)" />
    <mutant id="mutant_8592" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) * -1)" />
    <mutant id="mutant_7264" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPort())" to="((hc * 31) + (getPort())) + 1" />
    <mutant id="mutant_8595" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 2)" to="((destOffset + 2) + 1)" />
    <mutant id="mutant_7263" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPort())" to="((hc * 31) + (getPort())) * -1" />
    <mutant id="mutant_8594" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 2)" to="((destOffset + 2) - 1)" />
    <mutant id="mutant_7266" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) - 1)" />
    <mutant id="mutant_8597" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4)" to="((len * 4) - 1)" />
    <mutant id="mutant_7265" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPort())" to="((hc * 31) + (getPort())) - 1" />
    <mutant id="mutant_8596" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4)" to="((len * 4) + 1)" />
    <mutant id="mutant_7257" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getHost().hashCode())" to="((hc * 31) + (getHost().hashCode())) * -1" />
    <mutant id="mutant_8588" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="((srcOffset + 3) - 1)" />
    <mutant id="mutant_7256" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) + 1)" />
    <mutant id="mutant_8587" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="((srcOffset + 3) * -1)" />
    <mutant id="mutant_7259" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getHost().hashCode())" to="((hc * 31) + (getHost().hashCode())) - 1" />
    <mutant id="mutant_7258" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getHost().hashCode())" to="((hc * 31) + (getHost().hashCode())) + 1" />
    <mutant id="mutant_8589" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="((srcOffset + 3) + 1)" />
    <mutant id="mutant_8580" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) * -1)" />
    <mutant id="mutant_7251" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPass().hashCode())" to="((hc * 31) + (getPass().hashCode())) * -1" />
    <mutant id="mutant_8582" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="((srcOffset + 1) + 1)" />
    <mutant id="mutant_7250" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) + 1)" />
    <mutant id="mutant_8581" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="((srcOffset + 1) - 1)" />
    <mutant id="mutant_7253" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPass().hashCode())" to="((hc * 31) + (getPass().hashCode())) - 1" />
    <mutant id="mutant_8584" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="((srcOffset + 2) + 1)" />
    <mutant id="mutant_7252" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPass().hashCode())" to="((hc * 31) + (getPass().hashCode())) + 1" />
    <mutant id="mutant_8583" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="((srcOffset + 1) * -1)" />
    <mutant id="mutant_7255" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) * -1)" />
    <mutant id="mutant_8586" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="((srcOffset + 2) * -1)" />
    <mutant id="mutant_7254" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) - 1)" />
    <mutant id="mutant_8585" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="((srcOffset + 2) - 1)" />
    <mutant id="mutant_7246" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getUser().hashCode())" to="((hc * 31) + (getUser().hashCode())) + 1" />
    <mutant id="mutant_8577" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="((srcOffset + 2) * -1)" />
    <mutant id="mutant_7245" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getUser().hashCode())" to="((hc * 31) + (getUser().hashCode())) * -1" />
    <mutant id="mutant_8576" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="((srcOffset + 2) - 1)" />
    <mutant id="mutant_7248" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) - 1)" />
    <mutant id="mutant_8579" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) + 1)" />
    <mutant id="mutant_7247" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getUser().hashCode())" to="((hc * 31) + (getUser().hashCode())) - 1" />
    <mutant id="mutant_8578" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="((destOffset + 1) - 1)" />
    <mutant id="mutant_7249" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) * -1)" />
    <mutant id="mutant_7240" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getScheme().hashCode())" to="((hc * 31) + (getScheme().hashCode())) + 1" />
    <mutant id="mutant_8571" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="((srcOffset + 3) + 1)" />
    <mutant id="mutant_8570" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="((srcOffset + 3) - 1)" />
    <mutant id="mutant_7242" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) - 1)" />
    <mutant id="mutant_8573" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="((srcOffset + 1) + 1)" />
    <mutant id="mutant_7241" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getScheme().hashCode())" to="((hc * 31) + (getScheme().hashCode())) - 1" />
    <mutant id="mutant_8572" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="((srcOffset + 1) - 1)" />
    <mutant id="mutant_7244" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) + 1)" />
    <mutant id="mutant_8575" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="((srcOffset + 2) + 1)" />
    <mutant id="mutant_7243" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) * -1)" />
    <mutant id="mutant_8574" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="((srcOffset + 1) * -1)" />
    <mutant id="mutant_7235" viable="true" in="org.eclipse.jgit.transport.URIish.eq(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="!((a == null) || (b == null))" />
    <mutant id="mutant_8566" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="((srcOffset + 1) - 1)" />
    <mutant id="mutant_7234" viable="true" in="org.eclipse.jgit.transport.URIish(java.net.URL)" from="(d + 1)" to="((d + 1) + 1)" />
    <mutant id="mutant_8565" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="((srcOffset + 2) * -1)" />
    <mutant id="mutant_7237" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) * -1)" />
    <mutant id="mutant_8568" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="((srcOffset + 1) * -1)" />
    <mutant id="mutant_7236" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) - 1)" />
    <mutant id="mutant_8567" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="((srcOffset + 1) + 1)" />
    <mutant id="mutant_7239" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getScheme().hashCode())" to="((hc * 31) + (getScheme().hashCode())) * -1" />
    <mutant id="mutant_7238" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) + 1)" />
    <mutant id="mutant_8569" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="((srcOffset + 3) * -1)" />
    <mutant id="mutant_8560" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(off + len)" to="((off + len) + 1)" />
    <mutant id="mutant_7231" viable="false" in="org.eclipse.jgit.transport.URIish(java.lang.String)" from="((n2e(matcher.group(6))) + (n2e(matcher.group(7))))" to="(((n2e(matcher.group(6))) + (n2e(matcher.group(7)))) * -1)" />
    <mutant id="mutant_8562" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(off + len)" to="((off + len) * -1)" />
    <mutant id="mutant_7230" viable="false" in="org.eclipse.jgit.transport.URIish(java.lang.String)" from="((n2e(matcher.group(6))) + (n2e(matcher.group(7))))" to="(((n2e(matcher.group(6))) + (n2e(matcher.group(7)))) - 1)" />
    <mutant id="mutant_8561" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(off + len)" to="((off + len) - 1)" />
    <mutant id="mutant_7233" viable="true" in="org.eclipse.jgit.transport.URIish(java.net.URL)" from="(d + 1)" to="((d + 1) - 1)" />
    <mutant id="mutant_8564" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="((srcOffset + 2) - 1)" />
    <mutant id="mutant_7232" viable="true" in="org.eclipse.jgit.transport.URIish(java.net.URL)" from="(d + 1)" to="((d + 1) * -1)" />
    <mutant id="mutant_8563" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="((srcOffset + 2) + 1)" />
    <mutant id="mutant_7224" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P))" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) + 1)" />
    <mutant id="mutant_8555" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3)" to="((len * 3) - 1)" />
    <mutant id="mutant_7223" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P))" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) - 1)" />
    <mutant id="mutant_8554" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3)" to="((len * 3) * -1)" />
    <mutant id="mutant_7226" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="(((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;) + 1)" />
    <mutant id="mutant_8557" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3) / 4" to="((len * 3) / 4) - 1" />
    <mutant id="mutant_7225" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P))" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) * -1)" />
    <mutant id="mutant_8556" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3)" to="((len * 3) + 1)" />
    <mutant id="mutant_7228" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="(((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;) * -1)" />
    <mutant id="mutant_8559" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3) / 4" to="((len * 3) / 4) * -1" />
    <mutant id="mutant_7227" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="(((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;) - 1)" />
    <mutant id="mutant_8558" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3) / 4" to="((len * 3) / 4) + 1" />
    <mutant id="mutant_7229" viable="true" in="org.eclipse.jgit.transport.URIish(java.lang.String)" from="((n2e(matcher.group(6))) + (n2e(matcher.group(7))))" to="(((n2e(matcher.group(6))) + (n2e(matcher.group(7)))) + 1)" />
    <mutant id="mutant_7293" viable="false" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;[\\&quot; + (File.separatorChar))" to="((&quot;[\\&quot; + (File.separatorChar)) * -1)" />
    <mutant id="mutant_7292" viable="false" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;[\\&quot; + (File.separatorChar))" to="((&quot;[\\&quot; + (File.separatorChar)) - 1)" />
    <mutant id="mutant_7295" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((&quot;[\\&quot; + (File.separatorChar)) + &quot;/]&quot;)" to="(((&quot;[\\&quot; + (File.separatorChar)) + &quot;/]&quot;) + 1)" />
    <mutant id="mutant_7294" viable="false" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((&quot;[\\&quot; + (File.separatorChar)) + &quot;/]&quot;)" to="(((&quot;[\\&quot; + (File.separatorChar)) + &quot;/]&quot;) * -1)" />
    <mutant id="mutant_7297" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 1)" to="(((elements.length) - 1) * -1)" />
    <mutant id="mutant_7296" viable="false" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((&quot;[\\&quot; + (File.separatorChar)) + &quot;/]&quot;)" to="(((&quot;[\\&quot; + (File.separatorChar)) + &quot;/]&quot;) - 1)" />
    <mutant id="mutant_7299" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 1)" to="(((elements.length) - 1) + 1)" />
    <mutant id="mutant_7298" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 1)" to="(((elements.length) - 1) - 1)" />
    <mutant id="mutant_7291" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;[\\&quot; + (File.separatorChar))" to="((&quot;[\\&quot; + (File.separatorChar)) + 1)" />
    <mutant id="mutant_7290" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;file&quot;.equals(scheme)) || (URIish.LOCAL_FILE.matcher(s).matches())" to="!((&quot;file&quot;.equals(scheme)) || (URIish.LOCAL_FILE.matcher(s).matches()))" />
    <mutant id="mutant_7289" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;&quot;.equals(getPath())) || ((getPath()) == null)" to="!((&quot;&quot;.equals(getPath())) || ((getPath()) == null))" />
    <mutant id="mutant_7282" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127)))" to="(!((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))))" />
    <mutant id="mutant_7281" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(encodeNonAscii &amp;&amp; (b &gt; 127))" to="(!(encodeNonAscii &amp;&amp; (b &gt; 127)))" />
    <mutant id="mutant_7284" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b)))" to="(!(escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b))))" />
    <mutant id="mutant_7283" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%'))" to="(!(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%')))" />
    <mutant id="mutant_7286" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="includePassword &amp;&amp; ((getPass()) != null)" to="!(includePassword &amp;&amp; ((getPass()) != null))" />
    <mutant id="mutant_7285" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%')) || (escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b)))" to="!((((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%')) || (escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b))))" />
    <mutant id="mutant_7288" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="((getScheme()) != null) &amp;&amp; ((getPort()) &gt; 0)" to="!(((getScheme()) != null) &amp;&amp; ((getPort()) &gt; 0))" />
    <mutant id="mutant_7287" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="((getUser()) != null) &amp;&amp; ((getUser().length()) &gt; 0)" to="!(((getUser()) != null) &amp;&amp; ((getUser().length()) &gt; 0))" />
    <mutant id="mutant_7280" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(1)) == '~')" to="!((((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(1)) == '~'))" />
    <mutant id="mutant_7279" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/'))" to="(!(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/')))" />
    <mutant id="mutant_7278" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((s != null) &amp;&amp; ((p.length()) &gt;= 2))" to="(!((s != null) &amp;&amp; ((p.length()) &gt;= 2)))" />
    <mutant id="mutant_7271" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPath().hashCode())" to="((hc * 31) + (getPath().hashCode())) - 1" />
    <mutant id="mutant_7270" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPath().hashCode())" to="((hc * 31) + (getPath().hashCode())) + 1" />
    <mutant id="mutant_7273" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':'))" to="(!((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':')))" />
    <mutant id="mutant_7272" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/'))" to="(!(((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')))" />
    <mutant id="mutant_7275" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z'))" to="(!(((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" />
    <mutant id="mutant_7274" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z'))" to="(!(((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')))" />
    <mutant id="mutant_7277" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':')) &amp;&amp; ((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" to="!(((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':')) &amp;&amp; ((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z'))))" />
    <mutant id="mutant_7276" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" to="(!((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z'))))" />
    <mutant id="mutant_7268" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) + 1)" />
    <mutant id="mutant_8599" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4) / 3" to="((len * 4) / 3) * -1" />
    <mutant id="mutant_7267" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="((hc * 31) * -1)" />
    <mutant id="mutant_8598" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4)" to="((len * 4) * -1)" />
    <mutant id="mutant_7269" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPath().hashCode())" to="((hc * 31) + (getPath().hashCode())) * -1" />
    <mutant id="mutant_2400" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(((revChars.length) - i) - 1)" to="((((revChars.length) - i) - 1) * -1)" />
    <mutant id="mutant_3732" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size) * size" to="((pos / size) * size) + 1" />
    <mutant id="mutant_2401" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(((revChars.length) - i) - 1)" to="((((revChars.length) - i) - 1) - 1)" />
    <mutant id="mutant_3731" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size)" to="((pos / size) - 1)" />
    <mutant id="mutant_3730" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size)" to="((pos / size) + 1)" />
    <mutant id="mutant_2408" viable="false" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="(((Constants.R_REMOTES) + remote) * -1)" />
    <mutant id="mutant_2409" viable="true" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="(((Constants.R_REMOTES) + remote) + &quot;/&quot;) + 1" />
    <mutant id="mutant_3739" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="((length) - (12 + 20)) - 1" />
    <mutant id="mutant_2406" viable="true" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="(((Constants.R_REMOTES) + remote) + 1)" />
    <mutant id="mutant_3738" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="((length) - (12 + 20)) * -1" />
    <mutant id="mutant_2407" viable="false" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="(((Constants.R_REMOTES) + remote) - 1)" />
    <mutant id="mutant_3737" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="((12 + 20) + 1)" />
    <mutant id="mutant_2404" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="((&quot;x/&quot; + name) - 1)" />
    <mutant id="mutant_3736" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="((12 + 20) * -1)" />
    <mutant id="mutant_2405" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="((&quot;x/&quot; + name) + 1)" />
    <mutant id="mutant_3735" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="((12 + 20) - 1)" />
    <mutant id="mutant_2402" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(((revChars.length) - i) - 1)" to="((((revChars.length) - i) - 1) + 1)" />
    <mutant id="mutant_3734" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size) * size" to="((pos / size) * size) - 1" />
    <mutant id="mutant_2403" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="((&quot;x/&quot; + name) * -1)" />
    <mutant id="mutant_3733" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size) * size" to="((pos / size) * size) * -1" />
    <mutant id="mutant_3721" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size) * size" to="(((cache.getBlockSize()) / size) * size) * -1" />
    <mutant id="mutant_3720" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size) * size" to="(((cache.getBlockSize()) / size) * size) - 1" />
    <mutant id="mutant_3729" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size)" to="((pos / size) * -1)" />
    <mutant id="mutant_3728" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.read(org.eclipse.jgit.internal.storage.dfs.ReadableChannel,java.nio.ByteBuffer)" from="(0 &lt; n) &amp;&amp; (buf.hasRemaining())" to="!((0 &lt; n) &amp;&amp; (buf.hasRemaining()))" />
    <mutant id="mutant_3727" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) - 1)" />
    <mutant id="mutant_3726" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) + 1)" />
    <mutant id="mutant_3725" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) * -1)" />
    <mutant id="mutant_3724" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - ofs" to="(pos - ofs) + 1" />
    <mutant id="mutant_3723" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - ofs" to="(pos - ofs) * -1" />
    <mutant id="mutant_3722" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - ofs" to="(pos - ofs) - 1" />
    <mutant id="mutant_3719" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size) * size" to="(((cache.getBlockSize()) / size) * size) + 1" />
    <mutant id="mutant_3710" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.')" to="(((packName) + '.') - 1)" />
    <mutant id="mutant_3718" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size)" to="(((cache.getBlockSize()) / size) + 1)" />
    <mutant id="mutant_3717" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size)" to="(((cache.getBlockSize()) / size) * -1)" />
    <mutant id="mutant_3716" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size)" to="(((cache.getBlockSize()) / size) - 1)" />
    <mutant id="mutant_3715" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.isIndexLoaded()" from="(idxref != null) &amp;&amp; (idxref.has())" to="!((idxref != null) &amp;&amp; (idxref.has()))" />
    <mutant id="mutant_3714" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.hasObject(org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="!((0 &lt; offset) &amp;&amp; (!(isCorrupt(offset))))" />
    <mutant id="mutant_3713" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.') + (ext.getExtension())" to="(((packName) + '.') + (ext.getExtension())) + 1" />
    <mutant id="mutant_3712" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.') + (ext.getExtension())" to="(((packName) + '.') + (ext.getExtension())) - 1" />
    <mutant id="mutant_3711" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.') + (ext.getExtension())" to="(((packName) + '.') + (ext.getExtension())) * -1" />
    <mutant id="mutant_3709" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.')" to="(((packName) + '.') * -1)" />
    <mutant id="mutant_3708" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.')" to="(((packName) + '.') + 1)" />
    <mutant id="mutant_3707" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((getObjectCount()) - (b.getObjectCount()))" to="(((getObjectCount()) - (b.getObjectCount())) * -1)" />
    <mutant id="mutant_3706" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((getObjectCount()) - (b.getObjectCount()))" to="(((getObjectCount()) - (b.getObjectCount())) + 1)" />
    <mutant id="mutant_3705" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((getObjectCount()) - (b.getObjectCount()))" to="(((getObjectCount()) - (b.getObjectCount())) - 1)" />
    <mutant id="mutant_3704" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((b.getLastModified()) - (getLastModified()))" to="(((b.getLastModified()) - (getLastModified())) + 1)" />
    <mutant id="mutant_3703" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((b.getLastModified()) - (getLastModified()))" to="(((b.getLastModified()) - (getLastModified())) * -1)" />
    <mutant id="mutant_3702" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((b.getLastModified()) - (getLastModified()))" to="(((b.getLastModified()) - (getLastModified())) - 1)" />
    <mutant id="mutant_3701" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as.category) - (bs.category)" to="((as.category) - (bs.category)) - 1" />
    <mutant id="mutant_3700" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as.category) - (bs.category)" to="((as.category) - (bs.category)) + 1" />
    <mutant id="mutant_1113" viable="true" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener)) + &quot;]&quot;" to="((((type.getSimpleName()) + &quot;[&quot;) + (listener)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_2444" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(&quot;x/&quot; + revstr)" to="((&quot;x/&quot; + revstr) + 1)" />
    <mutant id="mutant_3776" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="((wantSize / bs) * bs) + 1" />
    <mutant id="mutant_1114" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener)) + &quot;]&quot;" to="((((type.getSimpleName()) + &quot;[&quot;) + (listener)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_2445" viable="false" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(&quot;x/&quot; + revstr)" to="((&quot;x/&quot; + revstr) - 1)" />
    <mutant id="mutant_3775" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="((wantSize / bs) * bs) * -1" />
    <mutant id="mutant_1111" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener))" to="((((type.getSimpleName()) + &quot;[&quot;) + (listener)) * -1)" />
    <mutant id="mutant_2442" viable="true" in="org.eclipse.jgit.lib.Repository.readOrigHead()" from="(isBare()) || ((getDirectory()) == null)" to="!((isBare()) || ((getDirectory()) == null))" />
    <mutant id="mutant_3774" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="((wantSize / bs) * bs) - 1" />
    <mutant id="mutant_1112" viable="true" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener))" to="((((type.getSimpleName()) + &quot;[&quot;) + (listener)) + 1)" />
    <mutant id="mutant_2443" viable="true" in="org.eclipse.jgit.lib.Repository.readRevertHead()" from="(isBare()) || ((getDirectory()) == null)" to="!((isBare()) || ((getDirectory()) == null))" />
    <mutant id="mutant_3773" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="((wantSize / bs) + 1)" />
    <mutant id="mutant_2440" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(p + (Constants.OBJECT_ID_STRING_LENGTH))" to="((p + (Constants.OBJECT_ID_STRING_LENGTH)) + 1)" />
    <mutant id="mutant_3772" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="((wantSize / bs) * -1)" />
    <mutant id="mutant_1110" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener))" to="((((type.getSimpleName()) + &quot;[&quot;) + (listener)) - 1)" />
    <mutant id="mutant_2441" viable="true" in="org.eclipse.jgit.lib.Repository.readCherryPickHead()" from="(isBare()) || ((getDirectory()) == null)" to="!((isBare()) || ((getDirectory()) == null))" />
    <mutant id="mutant_3771" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="((wantSize / bs) - 1)" />
    <mutant id="mutant_3770" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt; bs) &amp;&amp; (bs &lt; wantSize)" to="!((0 &lt; bs) &amp;&amp; (bs &lt; wantSize))" />
    <mutant id="mutant_1119" viable="true" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository))" to="(((type + &quot;[&quot;) + (repository)) + 1)" />
    <mutant id="mutant_1117" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="(type + &quot;[&quot;)" to="((type + &quot;[&quot;) * -1)" />
    <mutant id="mutant_2448" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 5)" to="((dashg + 5) * -1)" />
    <mutant id="mutant_1118" viable="true" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="(type + &quot;[&quot;)" to="((type + &quot;[&quot;) + 1)" />
    <mutant id="mutant_2449" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 5)" to="((dashg + 5) + 1)" />
    <mutant id="mutant_3779" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="((wantSize / bs) * -1)" />
    <mutant id="mutant_1115" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener)) + &quot;]&quot;" to="((((type.getSimpleName()) + &quot;[&quot;) + (listener)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_2446" viable="false" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(&quot;x/&quot; + revstr)" to="((&quot;x/&quot; + revstr) * -1)" />
    <mutant id="mutant_3778" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="((wantSize / bs) - 1)" />
    <mutant id="mutant_1116" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="(type + &quot;[&quot;)" to="((type + &quot;[&quot;) - 1)" />
    <mutant id="mutant_2447" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 5)" to="((dashg + 5) - 1)" />
    <mutant id="mutant_3777" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt; bs) &amp;&amp; (bs &lt; wantSize)" to="!((0 &lt; bs) &amp;&amp; (bs &lt; wantSize))" />
    <mutant id="mutant_1102" viable="false" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="&quot;/&quot; + pattern" to="(&quot;/&quot; + pattern) * -1" />
    <mutant id="mutant_2433" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc)" to="((&quot;Repository[&quot; + desc) - 1)" />
    <mutant id="mutant_3765" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt;= len) &amp;&amp; (len &lt; (pos + size))" to="!((0 &lt;= len) &amp;&amp; (len &lt; (pos + size)))" />
    <mutant id="mutant_1103" viable="true" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="&quot;/&quot; + pattern" to="(&quot;/&quot; + pattern) + 1" />
    <mutant id="mutant_2434" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc) + &quot;]&quot;" to="((&quot;Repository[&quot; + desc) + &quot;]&quot;) * -1" />
    <mutant id="mutant_3764" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos + size)" to="((pos + size) + 1)" />
    <mutant id="mutant_1100" viable="true" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) - 1)" />
    <mutant id="mutant_2431" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc)" to="((&quot;Repository[&quot; + desc) * -1)" />
    <mutant id="mutant_3763" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos + size)" to="((pos + size) * -1)" />
    <mutant id="mutant_1101" viable="false" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="&quot;/&quot; + pattern" to="(&quot;/&quot; + pattern) - 1" />
    <mutant id="mutant_2432" viable="true" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc)" to="((&quot;Repository[&quot; + desc) + 1)" />
    <mutant id="mutant_3762" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos + size)" to="((pos + size) - 1)" />
    <mutant id="mutant_3761" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size) * size" to="((pos / size) * size) - 1" />
    <mutant id="mutant_2430" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;) + (System.identityHashCode(this))" to="(((getClass().getSimpleName()) + &quot;-&quot;) + (System.identityHashCode(this))) * -1" />
    <mutant id="mutant_3760" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size) * size" to="((pos / size) * size) * -1" />
    <mutant id="mutant_1108" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="((type.getSimpleName()) + &quot;[&quot;)" to="(((type.getSimpleName()) + &quot;[&quot;) * -1)" />
    <mutant id="mutant_2439" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(p + (Constants.OBJECT_ID_STRING_LENGTH))" to="((p + (Constants.OBJECT_ID_STRING_LENGTH)) * -1)" />
    <mutant id="mutant_1109" viable="true" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="((type.getSimpleName()) + &quot;[&quot;)" to="(((type.getSimpleName()) + &quot;[&quot;) + 1)" />
    <mutant id="mutant_1106" viable="true" in="org.eclipse.jgit.attributes.AttributesRule.parseAttributes(java.lang.String)" from="(equalsIndex + 1)" to="((equalsIndex + 1) - 1)" />
    <mutant id="mutant_2437" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(isBare()) || ((getDirectory()) == null)" to="!((isBare()) || ((getDirectory()) == null))" />
    <mutant id="mutant_3769" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(invalid) || (isGarbage())" to="!((invalid) || (isGarbage()))" />
    <mutant id="mutant_1107" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="((type.getSimpleName()) + &quot;[&quot;)" to="(((type.getSimpleName()) + &quot;[&quot;) - 1)" />
    <mutant id="mutant_2438" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(p + (Constants.OBJECT_ID_STRING_LENGTH))" to="((p + (Constants.OBJECT_ID_STRING_LENGTH)) - 1)" />
    <mutant id="mutant_3768" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(len - pos))" to="((int)((len - pos))) + 1" />
    <mutant id="mutant_1104" viable="true" in="org.eclipse.jgit.attributes.AttributesRule.parseAttributes(java.lang.String)" from="(equalsIndex + 1)" to="((equalsIndex + 1) * -1)" />
    <mutant id="mutant_2435" viable="true" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc) + &quot;]&quot;" to="((&quot;Repository[&quot; + desc) + &quot;]&quot;) + 1" />
    <mutant id="mutant_3767" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(len - pos))" to="((int)((len - pos))) - 1" />
    <mutant id="mutant_1105" viable="true" in="org.eclipse.jgit.attributes.AttributesRule.parseAttributes(java.lang.String)" from="(equalsIndex + 1)" to="((equalsIndex + 1) + 1)" />
    <mutant id="mutant_2436" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc) + &quot;]&quot;" to="((&quot;Repository[&quot; + desc) + &quot;]&quot;) - 1" />
    <mutant id="mutant_3766" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(len - pos))" to="((int)((len - pos))) * -1" />
    <mutant id="mutant_2422" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="((workDirPath.length()) + 1)" to="(((workDirPath.length()) + 1) - 1)" />
    <mutant id="mutant_3754" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p) + 20" to="((pos + p) + 20) + 1" />
    <mutant id="mutant_2423" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="((workDirPath.length()) + 1)" to="(((workDirPath.length()) + 1) * -1)" />
    <mutant id="mutant_3753" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p) + 20" to="((pos + p) + 20) * -1" />
    <mutant id="mutant_2420" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar))) || (!(filePath.startsWith(workDirPath)))" to="!((((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar))) || (!(filePath.startsWith(workDirPath))))" />
    <mutant id="mutant_3752" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) - 1)" />
    <mutant id="mutant_2421" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(absWd == workDir) &amp;&amp; (absFile == file)" to="!((absWd == workDir) &amp;&amp; (absFile == file))" />
    <mutant id="mutant_3751" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) + 1)" />
    <mutant id="mutant_3750" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) * -1)" />
    <mutant id="mutant_2428" viable="true" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;) + (System.identityHashCode(this))" to="(((getClass().getSimpleName()) + &quot;-&quot;) + (System.identityHashCode(this))) + 1" />
    <mutant id="mutant_2429" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;) + (System.identityHashCode(this))" to="(((getClass().getSimpleName()) + &quot;-&quot;) + (System.identityHashCode(this))) - 1" />
    <mutant id="mutant_3759" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size) * size" to="((pos / size) * size) + 1" />
    <mutant id="mutant_2426" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;)" to="(((getClass().getSimpleName()) + &quot;-&quot;) - 1)" />
    <mutant id="mutant_3758" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size)" to="((pos / size) - 1)" />
    <mutant id="mutant_2427" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;)" to="(((getClass().getSimpleName()) + &quot;-&quot;) * -1)" />
    <mutant id="mutant_3757" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size)" to="((pos / size) + 1)" />
    <mutant id="mutant_2424" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="((workDirPath.length()) + 1)" to="(((workDirPath.length()) + 1) + 1)" />
    <mutant id="mutant_3756" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size)" to="((pos / size) * -1)" />
    <mutant id="mutant_2425" viable="true" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;)" to="(((getClass().getSimpleName()) + &quot;-&quot;) + 1)" />
    <mutant id="mutant_3755" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p) + 20" to="((pos + p) + 20) - 1" />
    <mutant id="mutant_2411" viable="false" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="(((Constants.R_REMOTES) + remote) + &quot;/&quot;) * -1" />
    <mutant id="mutant_3743" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="((int)((position - (b.start)))) - 1" />
    <mutant id="mutant_2412" viable="true" in="org.eclipse.jgit.lib.Repository.readCommitMsgFile(java.lang.String)" from="(isBare()) || ((getDirectory()) == null)" to="!((isBare()) || ((getDirectory()) == null))" />
    <mutant id="mutant_3742" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="((int)((position - (b.start)))) * -1" />
    <mutant id="mutant_3741" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="((int)((position - (b.start)))) + 1" />
    <mutant id="mutant_2410" viable="false" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="(((Constants.R_REMOTES) + remote) + &quot;/&quot;) - 1" />
    <mutant id="mutant_3740" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="((length) - (12 + 20)) + 1" />
    <mutant id="mutant_2419" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar)))" to="(!(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar))))" />
    <mutant id="mutant_2417" viable="false" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="(((Constants.R_REMOTES) + remote) + &quot;/&quot;) - 1" />
    <mutant id="mutant_3749" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos + p" to="(pos + p) - 1" />
    <mutant id="mutant_2418" viable="false" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="(((Constants.R_REMOTES) + remote) + &quot;/&quot;) * -1" />
    <mutant id="mutant_3748" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos + p" to="(pos + p) + 1" />
    <mutant id="mutant_2415" viable="false" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="(((Constants.R_REMOTES) + remote) * -1)" />
    <mutant id="mutant_3747" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos + p" to="(pos + p) * -1" />
    <mutant id="mutant_2416" viable="true" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="(((Constants.R_REMOTES) + remote) + &quot;/&quot;) + 1" />
    <mutant id="mutant_3746" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="(((b.size()) - ptr) * -1)" />
    <mutant id="mutant_2413" viable="true" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="(((Constants.R_REMOTES) + remote) + 1)" />
    <mutant id="mutant_3745" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="(((b.size()) - ptr) - 1)" />
    <mutant id="mutant_2414" viable="false" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="(((Constants.R_REMOTES) + remote) - 1)" />
    <mutant id="mutant_3744" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="(((b.size()) - ptr) + 1)" />
    <mutant id="mutant_1160" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 4)" to="((p + 4) * -1)" />
    <mutant id="mutant_2491" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="nameEnd - nameStart" to="(nameEnd - nameStart) * -1" />
    <mutant id="mutant_1161" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 4)" to="((p + 4) - 1)" />
    <mutant id="mutant_2492" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + high)" to="((low + high) + 1)" />
    <mutant id="mutant_2490" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="nameEnd - nameStart" to="(nameEnd - nameStart) + 1" />
    <mutant id="mutant_1157" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="32 - ((nibbles - b) * 4)" to="(32 - ((nibbles - b) * 4)) + 1" />
    <mutant id="mutant_2488" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="(nameStart == 0) &amp;&amp; (nameStart == (s.length))" to="!((nameStart == 0) &amp;&amp; (nameStart == (s.length)))" />
    <mutant id="mutant_1158" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="32 - ((nibbles - b) * 4)" to="(32 - ((nibbles - b) * 4)) - 1" />
    <mutant id="mutant_2489" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="nameEnd - nameStart" to="(nameEnd - nameStart) - 1" />
    <mutant id="mutant_1155" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="((nibbles - b) * 4)" to="(((nibbles - b) * 4) - 1)" />
    <mutant id="mutant_2486" viable="true" in="org.eclipse.jgit.lib.TextProgressMonitor.format(java.lang.StringBuilder,java.lang.String,int,int,int)" from="&quot; &quot; + curStr" to="(&quot; &quot; + curStr) + 1" />
    <mutant id="mutant_1156" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="((nibbles - b) * 4)" to="(((nibbles - b) * 4) * -1)" />
    <mutant id="mutant_2487" viable="false" in="org.eclipse.jgit.lib.TextProgressMonitor.format(java.lang.StringBuilder,java.lang.String,int,int,int)" from="&quot; &quot; + curStr" to="(&quot; &quot; + curStr) * -1" />
    <mutant id="mutant_1153" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(nibbles - b)" to="((nibbles - b) * -1)" />
    <mutant id="mutant_2484" viable="true" in="org.eclipse.jgit.lib.RepositoryCache.lockFor(org.eclipse.jgit.lib.RepositoryCache$Key)" from="(((location.hashCode()) &gt;&gt;&gt; 1) % (openLocks.length))" to="((((location.hashCode()) &gt;&gt;&gt; 1) % (openLocks.length)) * -1)" />
    <mutant id="mutant_1154" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="((nibbles - b) * 4)" to="(((nibbles - b) * 4) + 1)" />
    <mutant id="mutant_2485" viable="false" in="org.eclipse.jgit.lib.TextProgressMonitor.format(java.lang.StringBuilder,java.lang.String,int,int,int)" from="&quot; &quot; + curStr" to="(&quot; &quot; + curStr) - 1" />
    <mutant id="mutant_1151" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(nibbles - b)" to="((nibbles - b) + 1)" />
    <mutant id="mutant_2482" viable="true" in="org.eclipse.jgit.lib.RepositoryCache.lockFor(org.eclipse.jgit.lib.RepositoryCache$Key)" from="(((location.hashCode()) &gt;&gt;&gt; 1) % (openLocks.length))" to="((((location.hashCode()) &gt;&gt;&gt; 1) % (openLocks.length)) - 1)" />
    <mutant id="mutant_1152" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(nibbles - b)" to="((nibbles - b) - 1)" />
    <mutant id="mutant_2483" viable="true" in="org.eclipse.jgit.lib.RepositoryCache.lockFor(org.eclipse.jgit.lib.RepositoryCache$Key)" from="(((location.hashCode()) &gt;&gt;&gt; 1) % (openLocks.length))" to="((((location.hashCode()) &gt;&gt;&gt; 1) % (openLocks.length)) + 1)" />
    <mutant id="mutant_1159" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="32 - ((nibbles - b) * 4)" to="(32 - ((nibbles - b) * 4)) * -1" />
    <mutant id="mutant_2480" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.readFirstLine(java.io.File)" from="(n - 1)" to="((n - 1) + 1)" />
    <mutant id="mutant_1150" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(b + 8)" to="((b + 8) + 1)" />
    <mutant id="mutant_2481" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.open(boolean)" from="mustExist &amp;&amp; (!(org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(path, fs)))" to="!(mustExist &amp;&amp; (!(org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(path, fs))))" />
    <mutant id="mutant_1146" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1) * 8" to="((word - 1) * 8) + 1" />
    <mutant id="mutant_2477" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="((name + (Constants.DOT_GIT_EXT)) + 1)" />
    <mutant id="mutant_1147" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1) * 8" to="((word - 1) * 8) * -1" />
    <mutant id="mutant_2478" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.readFirstLine(java.io.File)" from="(n - 1)" to="((n - 1) - 1)" />
    <mutant id="mutant_1144" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1)" to="((word - 1) - 1)" />
    <mutant id="mutant_2475" viable="false" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="((name + (Constants.DOT_GIT_EXT)) * -1)" />
    <mutant id="mutant_1145" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1) * 8" to="((word - 1) * 8) - 1" />
    <mutant id="mutant_2476" viable="false" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="((name + (Constants.DOT_GIT_EXT)) - 1)" />
    <mutant id="mutant_1142" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1)" to="((word - 1) * -1)" />
    <mutant id="mutant_2473" viable="false" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="((name + (Constants.DOT_GIT_EXT)) - 1)" />
    <mutant id="mutant_1143" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1)" to="((word - 1) + 1)" />
    <mutant id="mutant_2474" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="((name + (Constants.DOT_GIT_EXT)) + 1)" />
    <mutant id="mutant_1140" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="((8 - n) * 4)" to="(((8 - n) * 4) - 1)" />
    <mutant id="mutant_2471" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isValidHead(java.io.File)" from="(ref != null) &amp;&amp; ((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref)))" to="!((ref != null) &amp;&amp; ((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref))))" />
    <mutant id="mutant_1141" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="((8 - n) * 4)" to="(((8 - n) * 4) * -1)" />
    <mutant id="mutant_2472" viable="false" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="((name + (Constants.DOT_GIT_EXT)) * -1)" />
    <mutant id="mutant_1148" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(b + 8)" to="((b + 8) - 1)" />
    <mutant id="mutant_2479" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.readFirstLine(java.io.File)" from="(n - 1)" to="((n - 1) * -1)" />
    <mutant id="mutant_1149" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(b + 8)" to="((b + 8) * -1)" />
    <mutant id="mutant_2470" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isValidHead(java.io.File)" from="((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref)))" to="(!((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref))))" />
    <mutant id="mutant_1135" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(n &lt; 8) &amp;&amp; (p &lt; end)" to="!((n &lt; 8) &amp;&amp; (p &lt; end))" />
    <mutant id="mutant_2466" viable="true" in="org.eclipse.jgit.lib.Repository.getRepositoryState()" from="(isBare()) || ((getDirectory()) == null)" to="!((isBare()) || ((getDirectory()) == null))" />
    <mutant id="mutant_3798" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) + 1)" />
    <mutant id="mutant_1136" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(8 - n)" to="((8 - n) - 1)" />
    <mutant id="mutant_2467" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.equals(java.lang.Object)" from="(o instanceof RepositoryCache.FileKey) &amp;&amp; (path.equals(((RepositoryCache.FileKey)(o)).path))" to="!((o instanceof RepositoryCache.FileKey) &amp;&amp; (path.equals(((RepositoryCache.FileKey)(o)).path)))" />
    <mutant id="mutant_3797" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) * -1)" />
    <mutant id="mutant_1133" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(end - p)" to="((end - p) * -1)" />
    <mutant id="mutant_2464" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="((dashg + 2) - 1)" />
    <mutant id="mutant_3796" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - base" to="(pos - base) * -1" />
    <mutant id="mutant_1134" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(end - p)" to="((end - p) - 1)" />
    <mutant id="mutant_2465" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="((dashg + 2) + 1)" />
    <mutant id="mutant_3795" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - base" to="(pos - base) + 1" />
    <mutant id="mutant_1131" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.isId(java.lang.String)" from="((id.length()) &lt; 2) || ((Constants.OBJECT_ID_STRING_LENGTH) &lt; (id.length()))" to="!(((id.length()) &lt; 2) || ((Constants.OBJECT_ID_STRING_LENGTH) &lt; (id.length())))" />
    <mutant id="mutant_2462" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isAllHex(revstr, (dashg + 4)))" to="!((((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isAllHex(revstr, (dashg + 4))))" />
    <mutant id="mutant_3794" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - base" to="(pos - base) - 1" />
    <mutant id="mutant_1132" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(end - p)" to="((end - p) + 1)" />
    <mutant id="mutant_2463" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="((dashg + 2) * -1)" />
    <mutant id="mutant_3793" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) - 1)" />
    <mutant id="mutant_2460" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 4)" to="((dashg + 4) + 1)" />
    <mutant id="mutant_3792" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) + 1)" />
    <mutant id="mutant_1130" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4))) &amp;&amp; ((w5) == (b.w5))" to="!(((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4))) &amp;&amp; ((w5) == (b.w5)))" />
    <mutant id="mutant_2461" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 4)" to="((dashg + 4) * -1)" />
    <mutant id="mutant_3791" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) * -1)" />
    <mutant id="mutant_1139" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="((8 - n) * 4)" to="(((8 - n) * 4) + 1)" />
    <mutant id="mutant_1137" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(8 - n)" to="((8 - n) * -1)" />
    <mutant id="mutant_2468" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isGitRepository(java.io.File,org.eclipse.jgit.util.FS)" from="((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists()))" to="(!((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists())))" />
    <mutant id="mutant_1138" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(8 - n)" to="((8 - n) + 1)" />
    <mutant id="mutant_2469" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isGitRepository(java.io.File,org.eclipse.jgit.util.FS)" from="((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists())) &amp;&amp; (org.eclipse.jgit.lib.RepositoryCache.FileKey.isValidHead(new java.io.File(dir , org.eclipse.jgit.lib.Constants.HEAD)))" to="!(((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists())) &amp;&amp; (org.eclipse.jgit.lib.RepositoryCache.FileKey.isValidHead(new java.io.File(dir , org.eclipse.jgit.lib.Constants.HEAD))))" />
    <mutant id="mutant_3799" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) - 1)" />
    <mutant id="mutant_3790" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) - 1)" />
    <mutant id="mutant_1124" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository)) + &quot;]&quot;" to="(((type + &quot;[&quot;) + (repository)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_2455" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 3)" to="((dashg + 3) * -1)" />
    <mutant id="mutant_3787" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.get(org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="!((0 &lt; offset) &amp;&amp; (!(isCorrupt(offset))))" />
    <mutant id="mutant_1125" viable="true" in="org.eclipse.jgit.hooks.CommitMsgHook.canRun()" from="((getCommitEditMessageFilePath()) != null) &amp;&amp; ((commitMessage) != null)" to="!(((getCommitEditMessageFilePath()) != null) &amp;&amp; ((commitMessage) != null))" />
    <mutant id="mutant_2456" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 3)" to="((dashg + 3) - 1)" />
    <mutant id="mutant_3786" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getReverseIdx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((idx.getObjectCount()) * 8)" to="(((idx.getObjectCount()) * 8) - 1)" />
    <mutant id="mutant_1122" viable="true" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository)) + &quot;]&quot;" to="(((type + &quot;[&quot;) + (repository)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_2453" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="((dashg + 2) + 1)" />
    <mutant id="mutant_3785" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getReverseIdx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((idx.getObjectCount()) * 8)" to="(((idx.getObjectCount()) * 8) + 1)" />
    <mutant id="mutant_1123" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository)) + &quot;]&quot;" to="(((type + &quot;[&quot;) + (repository)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_2454" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2)))))" to="(!((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))))" />
    <mutant id="mutant_3784" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getReverseIdx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((idx.getObjectCount()) * 8)" to="(((idx.getObjectCount()) * 8) * -1)" />
    <mutant id="mutant_1120" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository))" to="(((type + &quot;[&quot;) + (repository)) * -1)" />
    <mutant id="mutant_2451" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="((dashg + 2) * -1)" />
    <mutant id="mutant_3783" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="((wantSize / bs) * bs) + 1" />
    <mutant id="mutant_1121" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository))" to="(((type + &quot;[&quot;) + (repository)) - 1)" />
    <mutant id="mutant_2452" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="((dashg + 2) - 1)" />
    <mutant id="mutant_3782" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="((wantSize / bs) * bs) * -1" />
    <mutant id="mutant_3781" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="((wantSize / bs) * bs) - 1" />
    <mutant id="mutant_2450" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg))" to="(!(((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)))" />
    <mutant id="mutant_3780" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="((wantSize / bs) + 1)" />
    <mutant id="mutant_1128" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="(((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3)))" to="(!(((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))))" />
    <mutant id="mutant_2459" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 4)" to="((dashg + 4) - 1)" />
    <mutant id="mutant_1129" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4)))" to="(!((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4))))" />
    <mutant id="mutant_1126" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="(((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1)))" to="(!(((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))))" />
    <mutant id="mutant_2457" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 3)" to="((dashg + 3) + 1)" />
    <mutant id="mutant_3789" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) + 1)" />
    <mutant id="mutant_1127" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2)))" to="(!((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))))" />
    <mutant id="mutant_2458" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3)))))" to="(!(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3))))))" />
    <mutant id="mutant_3788" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="((pos + p) * -1)" />
    <mutant id="mutant_2293" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f')))" to="(!((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))))" />
    <mutant id="mutant_2294" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('A' &lt;= c) &amp;&amp; (c &lt;= 'F'))" to="(!(('A' &lt;= c) &amp;&amp; (c &lt;= 'F')))" />
    <mutant id="mutant_2291" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('0' &lt;= c) &amp;&amp; (c &lt;= '9'))" to="(!(('0' &lt;= c) &amp;&amp; (c &lt;= '9')))" />
    <mutant id="mutant_2292" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))" to="(!(('a' &lt;= c) &amp;&amp; (c &lt;= 'f')))" />
    <mutant id="mutant_2290" viable="true" in="org.eclipse.jgit.lib.RefWriter.writePackedRefs()" from="(r.getStorage().isPacked()) &amp;&amp; (r.isPeeled())" to="!((r.getStorage().isPacked()) &amp;&amp; (r.isPeeled()))" />
    <mutant id="mutant_2288" viable="true" in="org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; (!appendStatus)" to="!((msg == null) &amp;&amp; (!appendStatus))" />
    <mutant id="mutant_2289" viable="true" in="org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; appendStatus" to="!((msg == null) &amp;&amp; appendStatus)" />
    <mutant id="mutant_2286" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(newObj == oldObj) &amp;&amp; (!(detachingSymbolicRef))" to="!((newObj == oldObj) &amp;&amp; (!(detachingSymbolicRef)))" />
    <mutant id="mutant_2287" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(newObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (oldObj instanceof org.eclipse.jgit.revwalk.RevCommit)" to="!((newObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (oldObj instanceof org.eclipse.jgit.revwalk.RevCommit))" />
    <mutant id="mutant_2284" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(((oldValue) == null) &amp;&amp; (checkConflicting))" to="(!(((oldValue) == null) &amp;&amp; (checkConflicting)))" />
    <mutant id="mutant_2285" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(((oldValue) == null) &amp;&amp; (checkConflicting)) &amp;&amp; (getRefDatabase().isNameConflicting(getName()))" to="!((((oldValue) == null) &amp;&amp; (checkConflicting)) &amp;&amp; (getRefDatabase().isNameConflicting(getName())))" />
    <mutant id="mutant_2282" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(old != null) &amp;&amp; ((old.getObjectId()) != null)" to="!((old != null) &amp;&amp; ((old.getObjectId()) != null))" />
    <mutant id="mutant_2283" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(dst != null) &amp;&amp; ((dst.getObjectId()) != null)" to="!((dst != null) &amp;&amp; ((dst.getObjectId()) != null))" />
    <mutant id="mutant_2280" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(checkConflicting) &amp;&amp; (getRefDatabase().isNameConflicting(getName()))" to="!((checkConflicting) &amp;&amp; (getRefDatabase().isNameConflicting(getName())))" />
    <mutant id="mutant_2281" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(old != null) &amp;&amp; (old.isSymbolic())" to="!((old != null) &amp;&amp; (old.isSymbolic()))" />
    <mutant id="mutant_2279" viable="true" in="org.eclipse.jgit.lib.RefUpdate.delete(org.eclipse.jgit.revwalk.RevWalk)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="!((head != null) &amp;&amp; (head.isSymbolic()))" />
    <mutant id="mutant_2277" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) + (Repository.shortenRefName(destination.getName())))" to="(((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) + (Repository.shortenRefName(destination.getName()))) + 1)" />
    <mutant id="mutant_2278" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) + (Repository.shortenRefName(destination.getName())))" to="(((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) + (Repository.shortenRefName(destination.getName()))) * -1)" />
    <mutant id="mutant_2275" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;)" to="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) * -1)" />
    <mutant id="mutant_2276" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) + (Repository.shortenRefName(destination.getName())))" to="(((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) + (Repository.shortenRefName(destination.getName()))) - 1)" />
    <mutant id="mutant_2273" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;)" to="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) - 1)" />
    <mutant id="mutant_2274" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;)" to="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) + 1)" />
    <mutant id="mutant_2271" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName())))" to="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + 1)" />
    <mutant id="mutant_2272" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName())))" to="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) - 1)" />
    <mutant id="mutant_2270" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName())))" to="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) * -1)" />
    <mutant id="mutant_2268" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(cmd + &quot;renamed &quot;)" to="((cmd + &quot;renamed &quot;) - 1)" />
    <mutant id="mutant_2269" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(cmd + &quot;renamed &quot;)" to="((cmd + &quot;renamed &quot;) * -1)" />
    <mutant id="mutant_3599" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrCreate(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription,org.eclipse.jgit.internal.storage.dfs.DfsPackKey)" from="(pack != null) &amp;&amp; (pack.invalid())" to="!((pack != null) &amp;&amp; (pack.invalid()))" />
    <mutant id="mutant_2266" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(source.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) &amp;&amp; (destination.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="!((source.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) &amp;&amp; (destination.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" />
    <mutant id="mutant_3598" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.clean(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache$HashEntry)" from="(top != null) &amp;&amp; ((top.ref.next) == null)" to="!((top != null) &amp;&amp; ((top.ref.next) == null))" />
    <mutant id="mutant_2267" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(cmd + &quot;renamed &quot;)" to="((cmd + &quot;renamed &quot;) + 1)" />
    <mutant id="mutant_3597" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrLoad(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((blockSize) - (v.size()))" to="(((blockSize) - (v.size())) * -1)" />
    <mutant id="mutant_2264" viable="false" in="org.eclipse.jgit.lib.RefDatabase.findRef(java.util.Map,java.lang.String)" from="prefix + name" to="(prefix + name) - 1" />
    <mutant id="mutant_3596" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrLoad(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((blockSize) - (v.size()))" to="(((blockSize) - (v.size())) - 1)" />
    <mutant id="mutant_2265" viable="true" in="org.eclipse.jgit.lib.RefDatabase.findRef(java.util.Map,java.lang.String)" from="prefix + name" to="(prefix + name) + 1" />
    <mutant id="mutant_3595" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrLoad(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((blockSize) - (v.size()))" to="(((blockSize) - (v.size())) + 1)" />
    <mutant id="mutant_2262" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(result != null) || (slash != (-1))" to="!((result != null) || (slash != (-1)))" />
    <mutant id="mutant_3594" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getTotalRequestCount()" from="(getHitCount()) + (getMissCount())" to="((getHitCount()) + (getMissCount())) * -1" />
    <mutant id="mutant_2263" viable="false" in="org.eclipse.jgit.lib.RefDatabase.findRef(java.util.Map,java.lang.String)" from="prefix + name" to="(prefix + name) * -1" />
    <mutant id="mutant_3593" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getTotalRequestCount()" from="(getHitCount()) + (getMissCount())" to="((getHitCount()) + (getMissCount())) + 1" />
    <mutant id="mutant_2260" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="((slash + 1) - 1)" />
    <mutant id="mutant_3592" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getTotalRequestCount()" from="(getHitCount()) + (getMissCount())" to="((getHitCount()) + (getMissCount())) - 1" />
    <mutant id="mutant_2261" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="((slash + 1) * -1)" />
    <mutant id="mutant_3591" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100) / total" to="((hits * 100) / total) * -1" />
    <mutant id="mutant_3590" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100) / total" to="((hits * 100) / total) - 1" />
    <mutant id="mutant_2257" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="((slash + 1) - 1)" />
    <mutant id="mutant_3589" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100) / total" to="((hits * 100) / total) + 1" />
    <mutant id="mutant_2258" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="((slash + 1) * -1)" />
    <mutant id="mutant_3588" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100)" to="((hits * 100) - 1)" />
    <mutant id="mutant_2255" viable="true" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="name + '/'" to="(name + '/') + 1" />
    <mutant id="mutant_3587" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100)" to="((hits * 100) * -1)" />
    <mutant id="mutant_2256" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="((slash + 1) + 1)" />
    <mutant id="mutant_3586" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100)" to="((hits * 100) + 1)" />
    <mutant id="mutant_2253" viable="false" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="name + '/'" to="(name + '/') - 1" />
    <mutant id="mutant_3585" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="hits + miss" to="(hits + miss) - 1" />
    <mutant id="mutant_2254" viable="false" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="name + '/'" to="(name + '/') * -1" />
    <mutant id="mutant_3584" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="hits + miss" to="(hits + miss) * -1" />
    <mutant id="mutant_2251" viable="true" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="(lastSlash - 1)" to="((lastSlash - 1) * -1)" />
    <mutant id="mutant_3583" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="hits + miss" to="(hits + miss) + 1" />
    <mutant id="mutant_2252" viable="true" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="(lastSlash - 1)" to="((lastSlash - 1) - 1)" />
    <mutant id="mutant_3582" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100) / (maxBytes)" to="(((getCurrentSize()) * 100) / (maxBytes)) + 1" />
    <mutant id="mutant_2259" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="((slash + 1) + 1)" />
    <mutant id="mutant_9719" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount)))" to="(!((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))))" />
    <mutant id="mutant_9717" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) - 1)" to="((((nContext) + (old.nDeleted)) - 1) - 1)" />
    <mutant id="mutant_9718" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) - 1)" to="((((nContext) + (old.nDeleted)) - 1) * -1)" />
    <mutant id="mutant_9711" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="(last.getEndB()) - (newStartLine)" to="((last.getEndB()) - (newStartLine)) + 1" />
    <mutant id="mutant_9712" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="(last.getEndB()) - (newStartLine)" to="((last.getEndB()) - (newStartLine)) * -1" />
    <mutant id="mutant_9710" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="(last.getEndB()) - (newStartLine)" to="((last.getEndB()) - (newStartLine)) - 1" />
    <mutant id="mutant_9715" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) + 1)" />
    <mutant id="mutant_9716" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) - 1)" to="((((nContext) + (old.nDeleted)) - 1) + 1)" />
    <mutant id="mutant_9713" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) - 1)" />
    <mutant id="mutant_9714" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) * -1)" />
    <mutant id="mutant_9708" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="((editList.size()) - 1)" to="(((editList.size()) - 1) - 1)" />
    <mutant id="mutant_9709" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="((editList.size()) - 1)" to="(((editList.size()) - 1) * -1)" />
    <mutant id="mutant_9706" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseOldName(int,int)" from="(ptr + (FileHeader.OLD_NAME.length))" to="((ptr + (FileHeader.OLD_NAME.length)) - 1)" />
    <mutant id="mutant_9707" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="((editList.size()) - 1)" to="(((editList.size()) - 1) + 1)" />
    <mutant id="mutant_9700" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int,int)" from="(ptr + (FileHeader.NEW_FILE_MODE.length))" to="((ptr + (FileHeader.NEW_FILE_MODE.length)) - 1)" />
    <mutant id="mutant_9701" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewName(int,int)" from="(ptr + (FileHeader.NEW_NAME.length))" to="((ptr + (FileHeader.NEW_NAME.length)) + 1)" />
    <mutant id="mutant_9704" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseOldName(int,int)" from="(ptr + (FileHeader.OLD_NAME.length))" to="((ptr + (FileHeader.OLD_NAME.length)) + 1)" />
    <mutant id="mutant_9705" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseOldName(int,int)" from="(ptr + (FileHeader.OLD_NAME.length))" to="((ptr + (FileHeader.OLD_NAME.length)) * -1)" />
    <mutant id="mutant_9702" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewName(int,int)" from="(ptr + (FileHeader.NEW_NAME.length))" to="((ptr + (FileHeader.NEW_NAME.length)) * -1)" />
    <mutant id="mutant_9703" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewName(int,int)" from="(ptr + (FileHeader.NEW_NAME.length))" to="((ptr + (FileHeader.NEW_NAME.length)) - 1)" />
    <mutant id="mutant_2299" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="((len - 1) - 1)" />
    <mutant id="mutant_2297" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="((len - 1) * -1)" />
    <mutant id="mutant_2298" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="((len - 1) + 1)" />
    <mutant id="mutant_2295" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))) || (('A' &lt;= c) &amp;&amp; (c &lt;= 'F'))" to="!(((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))) || (('A' &lt;= c) &amp;&amp; (c &lt;= 'F')))" />
    <mutant id="mutant_2296" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="((len - 1) - 1)" />
    <mutant id="mutant_8430" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotX + dotSize)" to="((dotX + dotSize) * -1)" />
    <mutant id="mutant_9762" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) + 1)" />
    <mutant id="mutant_9763" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) * -1)" />
    <mutant id="mutant_7101" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;) + n" to="((dir + &quot;/&quot;) + n) + 1" />
    <mutant id="mutant_8432" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotX + dotSize)" to="((dotX + dotSize) + 1)" />
    <mutant id="mutant_9760" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;)" to="((((nContext) + (old.nDeleted)) + &quot;:&quot;) - 1)" />
    <mutant id="mutant_7100" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;) + n" to="((dir + &quot;/&quot;) + n) * -1" />
    <mutant id="mutant_8431" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotX + dotSize)" to="((dotX + dotSize) - 1)" />
    <mutant id="mutant_9761" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;)" to="((((nContext) + (old.nDeleted)) + &quot;:&quot;) * -1)" />
    <mutant id="mutant_8423" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(commit.getChildCount()) - (commit.forkingOffLanes.length)" to="((commit.getChildCount()) - (commit.forkingOffLanes.length)) + 1" />
    <mutant id="mutant_9755" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;) + (newLineCount)" to="(((old.lineCount) + &quot;:&quot;) + (newLineCount)) + 1" />
    <mutant id="mutant_8422" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(commit.getChildCount()) - (commit.forkingOffLanes.length)" to="((commit.getChildCount()) - (commit.forkingOffLanes.length)) - 1" />
    <mutant id="mutant_9756" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) - 1)" />
    <mutant id="mutant_8425" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) * -1)" />
    <mutant id="mutant_9753" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;) + (newLineCount)" to="(((old.lineCount) + &quot;:&quot;) + (newLineCount)) - 1" />
    <mutant id="mutant_8424" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) + 1)" />
    <mutant id="mutant_9754" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;) + (newLineCount)" to="(((old.lineCount) + &quot;:&quot;) + (newLineCount)) * -1" />
    <mutant id="mutant_8427" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(maxCenter + ((AbstractPlotRenderer.LANE_WIDTH) / 2))" to="((maxCenter + ((AbstractPlotRenderer.LANE_WIDTH) / 2)) * -1)" />
    <mutant id="mutant_9759" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;)" to="((((nContext) + (old.nDeleted)) + &quot;:&quot;) + 1)" />
    <mutant id="mutant_8426" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) - 1)" />
    <mutant id="mutant_8429" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(maxCenter + ((AbstractPlotRenderer.LANE_WIDTH) / 2))" to="((maxCenter + ((AbstractPlotRenderer.LANE_WIDTH) / 2)) + 1)" />
    <mutant id="mutant_9757" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) * -1)" />
    <mutant id="mutant_8428" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(maxCenter + ((AbstractPlotRenderer.LANE_WIDTH) / 2))" to="((maxCenter + ((AbstractPlotRenderer.LANE_WIDTH) / 2)) - 1)" />
    <mutant id="mutant_9758" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) + 1)" />
    <mutant id="mutant_9751" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;)" to="(((old.lineCount) + &quot;:&quot;) - 1)" />
    <mutant id="mutant_9752" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;)" to="(((old.lineCount) + &quot;:&quot;) * -1)" />
    <mutant id="mutant_8421" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(commit.getChildCount()) - (commit.forkingOffLanes.length)" to="((commit.getChildCount()) - (commit.forkingOffLanes.length)) * -1" />
    <mutant id="mutant_8420" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) + 1)" />
    <mutant id="mutant_9750" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;)" to="(((old.lineCount) + &quot;:&quot;) + 1)" />
    <mutant id="mutant_8419" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) * -1)" />
    <mutant id="mutant_8412" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) - 1)" />
    <mutant id="mutant_9744" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) * -1)" />
    <mutant id="mutant_8411" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) + 1)" />
    <mutant id="mutant_9745" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) + 1)" />
    <mutant id="mutant_8414" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) + 1)" />
    <mutant id="mutant_9742" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + (old.nAdded))" to="((newLineCount) - ((nContext) + (old.nAdded))) + 1" />
    <mutant id="mutant_8413" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) * -1)" />
    <mutant id="mutant_9743" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) - 1)" />
    <mutant id="mutant_8416" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) * -1)" />
    <mutant id="mutant_9748" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) - 1)" />
    <mutant id="mutant_8415" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) - 1)" />
    <mutant id="mutant_9749" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) &gt; (old.lineCount)) || (((nContext) + (old.nAdded)) &gt; (newLineCount))" to="!((((nContext) + (old.nDeleted)) &gt; (old.lineCount)) || (((nContext) + (old.nAdded)) &gt; (newLineCount)))" />
    <mutant id="mutant_8418" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) - 1)" />
    <mutant id="mutant_9746" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) + 1)" />
    <mutant id="mutant_8417" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) + 1)" />
    <mutant id="mutant_9747" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) * -1)" />
    <mutant id="mutant_9740" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + (old.nAdded))" to="((newLineCount) - ((nContext) + (old.nAdded))) * -1" />
    <mutant id="mutant_9741" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + (old.nAdded))" to="((newLineCount) - ((nContext) + (old.nAdded))) - 1" />
    <mutant id="mutant_8410" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) * -1)" />
    <mutant id="mutant_8409" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) - 1)" />
    <mutant id="mutant_8408" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)) - 1" />
    <mutant id="mutant_9739" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) - 1)" />
    <mutant id="mutant_8401" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)) + 1" />
    <mutant id="mutant_9733" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(old.lineCount) - ((nContext) + (old.nDeleted))" to="((old.lineCount) - ((nContext) + (old.nDeleted))) + 1" />
    <mutant id="mutant_8400" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)) * -1" />
    <mutant id="mutant_9734" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) + 1)" />
    <mutant id="mutant_8403" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) + 1)" />
    <mutant id="mutant_9731" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(old.lineCount) - ((nContext) + (old.nDeleted))" to="((old.lineCount) - ((nContext) + (old.nDeleted))) * -1" />
    <mutant id="mutant_8402" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)) - 1" />
    <mutant id="mutant_9732" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(old.lineCount) - ((nContext) + (old.nDeleted))" to="((old.lineCount) - ((nContext) + (old.nDeleted))) - 1" />
    <mutant id="mutant_8405" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) - 1)" />
    <mutant id="mutant_9737" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) + 1)" />
    <mutant id="mutant_8404" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) * -1)" />
    <mutant id="mutant_9738" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) * -1)" />
    <mutant id="mutant_8407" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)) * -1" />
    <mutant id="mutant_9735" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) * -1)" />
    <mutant id="mutant_8406" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)) + 1" />
    <mutant id="mutant_9736" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) - 1)" />
    <mutant id="mutant_9730" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) + 1)" />
    <mutant id="mutant_9728" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) - 1)" />
    <mutant id="mutant_9729" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) * -1)" />
    <mutant id="mutant_9722" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) - 1)" />
    <mutant id="mutant_9723" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount)))" to="(!(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount))))" />
    <mutant id="mutant_9720" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) + 1)" />
    <mutant id="mutant_9721" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) * -1)" />
    <mutant id="mutant_9726" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) * -1)" />
    <mutant id="mutant_9727" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) + 1)" />
    <mutant id="mutant_9724" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, last, org.eclipse.jgit.patch.Patch.SIG_FOOTER)) &gt;= 0)" to="!((((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, last, org.eclipse.jgit.patch.Patch.SIG_FOOTER)) &gt;= 0))" />
    <mutant id="mutant_9725" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(((nContext) + (old.nDeleted)) - 1)" />
    <mutant id="mutant_8470" viable="true" in="org.eclipse.jgit.revplot.PlotWalk$PlotRefComparator.compare(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(kind(o1)) - (kind(o2))" to="((kind(o1)) - (kind(o2))) + 1" />
    <mutant id="mutant_7141" viable="false" in="?" from="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) - 1)" />
    <mutant id="mutant_8472" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="off + len" to="(off + len) + 1" />
    <mutant id="mutant_7140" viable="false" in="?" from="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) * -1)" />
    <mutant id="mutant_8471" viable="true" in="org.eclipse.jgit.revplot.PlotWalk.sort(org.eclipse.jgit.revwalk.RevSort,boolean)" from="(s == (RevSort.TOPO)) &amp;&amp; (!use)" to="!((s == (RevSort.TOPO)) &amp;&amp; (!use))" />
    <mutant id="mutant_7143" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P))" to="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) - 1)" />
    <mutant id="mutant_8474" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="off + len" to="(off + len) * -1" />
    <mutant id="mutant_7142" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P))" to="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) * -1)" />
    <mutant id="mutant_8473" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="off + len" to="(off + len) - 1" />
    <mutant id="mutant_7145" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;)" to="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + 1)" />
    <mutant id="mutant_8476" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(isBinary) || (b != '\n')" to="!((isBinary) || (b != '\n'))" />
    <mutant id="mutant_7144" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P))" to="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + 1)" />
    <mutant id="mutant_8475" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="!(((ptr) == (cnt)) &amp;&amp; (!(fillBuffer())))" />
    <mutant id="mutant_7136" viable="false" in="?" from="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P))" to="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + 1)" />
    <mutant id="mutant_8467" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((firstParent.lane) != null) &amp;&amp; ((firstParent.lane) != (c.lane))" to="!(((firstParent.lane) != null) &amp;&amp; ((firstParent.lane) != (c.lane)))" />
    <mutant id="mutant_9799" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) - 1)" />
    <mutant id="mutant_7135" viable="false" in="?" from="((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;)" to="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) * -1)" />
    <mutant id="mutant_8466" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(lengthOfReservedLane + 1)" to="((lengthOfReservedLane + 1) * -1)" />
    <mutant id="mutant_7138" viable="false" in="?" from="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P))" to="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) * -1)" />
    <mutant id="mutant_8469" viable="true" in="org.eclipse.jgit.revplot.PlotWalk$PlotRefComparator.compare(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(kind(o1)) - (kind(o2))" to="((kind(o1)) - (kind(o2))) * -1" />
    <mutant id="mutant_9797" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) * -1)" />
    <mutant id="mutant_7137" viable="false" in="?" from="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P))" to="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) - 1)" />
    <mutant id="mutant_8468" viable="true" in="org.eclipse.jgit.revplot.PlotWalk$PlotRefComparator.compare(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(kind(o1)) - (kind(o2))" to="((kind(o1)) - (kind(o2))) - 1" />
    <mutant id="mutant_9798" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) + 1)" />
    <mutant id="mutant_7139" viable="false" in="?" from="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + 1)" />
    <mutant id="mutant_9791" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) * -1)" />
    <mutant id="mutant_9792" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) + 1)" />
    <mutant id="mutant_7130" viable="false" in="?" from="(&quot;^&quot; + (URIish.SCHEME_P))" to="((&quot;^&quot; + (URIish.SCHEME_P)) * -1)" />
    <mutant id="mutant_8461" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((len.intValue()) + 1)" to="(((len.intValue()) + 1) + 1)" />
    <mutant id="mutant_8460" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(nChildren == 1) &amp;&amp; ((currCommit.children[0].getParentCount()) &lt; 2)" to="!((nChildren == 1) &amp;&amp; ((currCommit.children[0].getParentCount()) &lt; 2))" />
    <mutant id="mutant_9790" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) - 1)" />
    <mutant id="mutant_7132" viable="false" in="?" from="(&quot;^&quot; + (URIish.SCHEME_P))" to="((&quot;^&quot; + (URIish.SCHEME_P)) + 1)" />
    <mutant id="mutant_8463" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((len.intValue()) + 1)" to="(((len.intValue()) + 1) * -1)" />
    <mutant id="mutant_9795" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) + 1)" />
    <mutant id="mutant_7131" viable="false" in="?" from="(&quot;^&quot; + (URIish.SCHEME_P))" to="((&quot;^&quot; + (URIish.SCHEME_P)) - 1)" />
    <mutant id="mutant_8462" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((len.intValue()) + 1)" to="(((len.intValue()) + 1) - 1)" />
    <mutant id="mutant_9796" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) - 1)" />
    <mutant id="mutant_7134" viable="false" in="?" from="((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;)" to="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) - 1)" />
    <mutant id="mutant_8465" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(lengthOfReservedLane + 1)" to="((lengthOfReservedLane + 1) + 1)" />
    <mutant id="mutant_9793" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) - 1)" />
    <mutant id="mutant_7133" viable="false" in="?" from="((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;)" to="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + 1)" />
    <mutant id="mutant_8464" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(lengthOfReservedLane + 1)" to="((lengthOfReservedLane + 1) - 1)" />
    <mutant id="mutant_9794" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) * -1)" />
    <mutant id="mutant_7125" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P))" to="((((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) - 1)" />
    <mutant id="mutant_8456" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="(index - 1) + 1" />
    <mutant id="mutant_9788" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) * -1)" />
    <mutant id="mutant_7124" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P))" to="((((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) * -1)" />
    <mutant id="mutant_8455" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="(index - 1) * -1" />
    <mutant id="mutant_9789" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) + 1)" />
    <mutant id="mutant_7127" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)&quot;" to="((((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)&quot;) - 1" />
    <mutant id="mutant_8458" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.drawLaneToChild(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="commitIndex - 1" to="(commitIndex - 1) - 1" />
    <mutant id="mutant_9786" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) + 1)" />
    <mutant id="mutant_7126" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P))" to="((((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) + 1)" />
    <mutant id="mutant_8457" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.drawLaneToChild(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="commitIndex - 1" to="(commitIndex - 1) + 1" />
    <mutant id="mutant_9787" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) - 1)" />
    <mutant id="mutant_7129" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)&quot;" to="((((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)&quot;) * -1" />
    <mutant id="mutant_7128" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)&quot;" to="((((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)&quot;) + 1" />
    <mutant id="mutant_8459" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.drawLaneToChild(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="commitIndex - 1" to="(commitIndex - 1) * -1" />
    <mutant id="mutant_9780" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) + 1)" />
    <mutant id="mutant_9781" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) - 1)" />
    <mutant id="mutant_8450" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addChild(org.eclipse.jgit.revplot.PlotCommit)" from="cnt + 1" to="(cnt + 1) + 1" />
    <mutant id="mutant_7121" viable="false" in="?" from="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;)" to="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) - 1)" />
    <mutant id="mutant_8452" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="(index - 1) * -1" />
    <mutant id="mutant_9784" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) - 1)" />
    <mutant id="mutant_7120" viable="false" in="?" from="(&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P))" to="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + 1)" />
    <mutant id="mutant_8451" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="(index - 1) - 1" />
    <mutant id="mutant_9785" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) * -1)" />
    <mutant id="mutant_7123" viable="false" in="?" from="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;)" to="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) * -1)" />
    <mutant id="mutant_8454" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="(index - 1) - 1" />
    <mutant id="mutant_9782" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) * -1)" />
    <mutant id="mutant_7122" viable="false" in="?" from="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;)" to="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + 1)" />
    <mutant id="mutant_8453" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="(index - 1) + 1" />
    <mutant id="mutant_9783" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) + 1)" />
    <mutant id="mutant_7114" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.writeFile(java.lang.String,byte[])" from="path + &quot;.lock&quot;" to="(path + &quot;.lock&quot;) + 1" />
    <mutant id="mutant_8445" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addLane(org.eclipse.jgit.revplot.PlotLane,org.eclipse.jgit.revplot.PlotLane[])" from="cnt + 1" to="(cnt + 1) * -1" />
    <mutant id="mutant_9777" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="((nLine - 1) + 1)" />
    <mutant id="mutant_7113" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.writeFile(java.lang.String,byte[])" from="path + &quot;.lock&quot;" to="(path + &quot;.lock&quot;) * -1" />
    <mutant id="mutant_8444" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="((textx + dotSize) + 1)" />
    <mutant id="mutant_9778" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="((nLine - 1) - 1)" />
    <mutant id="mutant_7116" viable="true" in="org.eclipse.jgit.transport.TransportSftp.newSftp()" from="(getTimeout()) * 1000" to="((getTimeout()) * 1000) * -1" />
    <mutant id="mutant_8447" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addLane(org.eclipse.jgit.revplot.PlotLane,org.eclipse.jgit.revplot.PlotLane[])" from="cnt + 1" to="(cnt + 1) + 1" />
    <mutant id="mutant_9775" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="((oLine - 1) - 1)" />
    <mutant id="mutant_7115" viable="true" in="org.eclipse.jgit.transport.TransportSftp.newSftp()" from="(getTimeout()) * 1000" to="((getTimeout()) * 1000) + 1" />
    <mutant id="mutant_8446" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addLane(org.eclipse.jgit.revplot.PlotLane,org.eclipse.jgit.revplot.PlotLane[])" from="cnt + 1" to="(cnt + 1) - 1" />
    <mutant id="mutant_9776" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="((oLine - 1) * -1)" />
    <mutant id="mutant_7118" viable="false" in="?" from="(&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P))" to="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) * -1)" />
    <mutant id="mutant_8449" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addChild(org.eclipse.jgit.revplot.PlotCommit)" from="cnt + 1" to="(cnt + 1) - 1" />
    <mutant id="mutant_7117" viable="true" in="org.eclipse.jgit.transport.TransportSftp.newSftp()" from="(getTimeout()) * 1000" to="((getTimeout()) * 1000) - 1" />
    <mutant id="mutant_8448" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addChild(org.eclipse.jgit.revplot.PlotCommit)" from="cnt + 1" to="(cnt + 1) * -1" />
    <mutant id="mutant_9779" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="((nLine - 1) * -1)" />
    <mutant id="mutant_7119" viable="false" in="?" from="(&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P))" to="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) - 1)" />
    <mutant id="mutant_9770" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="((oLine - 1) * -1)" />
    <mutant id="mutant_7110" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="((prefix + n) - 1)" />
    <mutant id="mutant_8441" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) + 1)" />
    <mutant id="mutant_9773" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="((nLine - 1) * -1)" />
    <mutant id="mutant_8440" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) * -1)" />
    <mutant id="mutant_9774" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="((oLine - 1) + 1)" />
    <mutant id="mutant_7112" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.writeFile(java.lang.String,byte[])" from="path + &quot;.lock&quot;" to="(path + &quot;.lock&quot;) - 1" />
    <mutant id="mutant_8443" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="((textx + dotSize) - 1)" />
    <mutant id="mutant_9771" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="((nLine - 1) + 1)" />
    <mutant id="mutant_7111" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="((prefix + n) * -1)" />
    <mutant id="mutant_8442" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="((textx + dotSize) * -1)" />
    <mutant id="mutant_9772" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="((nLine - 1) - 1)" />
    <mutant id="mutant_7103" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="((prefix + n) + 1)" />
    <mutant id="mutant_8434" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) + 8" to="((Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) + 8) + 1" />
    <mutant id="mutant_9766" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;) + ((nContext) + (old.nAdded))" to="((((nContext) + (old.nDeleted)) + &quot;:&quot;) + ((nContext) + (old.nAdded))) + 1" />
    <mutant id="mutant_7102" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;) + n" to="((dir + &quot;/&quot;) + n) - 1" />
    <mutant id="mutant_8433" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) + 8" to="((Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) + 8) - 1" />
    <mutant id="mutant_9767" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;) + ((nContext) + (old.nAdded))" to="((((nContext) + (old.nDeleted)) + &quot;:&quot;) + ((nContext) + (old.nAdded))) - 1" />
    <mutant id="mutant_7105" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="((prefix + n) * -1)" />
    <mutant id="mutant_8436" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="((textx + dotSize) * -1)" />
    <mutant id="mutant_9764" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(((nContext) + (old.nAdded)) - 1)" />
    <mutant id="mutant_7104" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="((prefix + n) - 1)" />
    <mutant id="mutant_8435" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) + 8" to="((Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) + 8) * -1" />
    <mutant id="mutant_9765" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;) + ((nContext) + (old.nAdded))" to="((((nContext) + (old.nDeleted)) + &quot;:&quot;) + ((nContext) + (old.nAdded))) * -1" />
    <mutant id="mutant_7107" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="((prefix + n) + &quot;/&quot;)" to="(((prefix + n) + &quot;/&quot;) - 1)" />
    <mutant id="mutant_8438" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="((textx + dotSize) + 1)" />
    <mutant id="mutant_7106" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="((prefix + n) + &quot;/&quot;)" to="(((prefix + n) + &quot;/&quot;) * -1)" />
    <mutant id="mutant_8437" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="((textx + dotSize) - 1)" />
    <mutant id="mutant_7109" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="((prefix + n) + 1)" />
    <mutant id="mutant_9768" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="((oLine - 1) + 1)" />
    <mutant id="mutant_7108" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="((prefix + n) + &quot;/&quot;)" to="(((prefix + n) + &quot;/&quot;) + 1)" />
    <mutant id="mutant_8439" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) - 1)" />
    <mutant id="mutant_9769" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="((oLine - 1) - 1)" />
    <mutant id="mutant_7183" viable="false" in="?" from="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P))" to="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) + 1)" />
    <mutant id="mutant_7182" viable="false" in="?" from="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P))" to="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) * -1)" />
    <mutant id="mutant_7185" viable="false" in="?" from="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) + &quot;)$&quot;)" to="((((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) + &quot;)$&quot;) - 1)" />
    <mutant id="mutant_7184" viable="false" in="?" from="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) + &quot;)$&quot;)" to="((((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) + &quot;)$&quot;) * -1)" />
    <mutant id="mutant_7187" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) - 1)" />
    <mutant id="mutant_4909" viable="false" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (branch))" to="(((Constants.R_HEADS) + (branch)) * -1)" />
    <mutant id="mutant_7186" viable="false" in="?" from="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) + &quot;)$&quot;)" to="((((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) + &quot;)$&quot;) + 1)" />
    <mutant id="mutant_4908" viable="true" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (branch))" to="(((Constants.R_HEADS) + (branch)) + 1)" />
    <mutant id="mutant_7189" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) * -1)" />
    <mutant id="mutant_4907" viable="true" in="org.eclipse.jgit.api.CloneCommand.addMergeConfig(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.Ref)" from="(ConfigConstants.CONFIG_KEY_ALWAYS.equals(autosetupRebase)) || (ConfigConstants.CONFIG_KEY_REMOTE.equals(autosetupRebase))" to="!((ConfigConstants.CONFIG_KEY_ALWAYS.equals(autosetupRebase)) || (ConfigConstants.CONFIG_KEY_REMOTE.equals(autosetupRebase)))" />
    <mutant id="mutant_7188" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + 1)" />
    <mutant id="mutant_7181" viable="false" in="?" from="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P))" to="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) - 1)" />
    <mutant id="mutant_7180" viable="false" in="?" from="(&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;)" to="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + 1)" />
    <mutant id="mutant_4906" viable="true" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="(((Constants.R_HEADS) + &quot;*&quot;) + 1)" />
    <mutant id="mutant_4905" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="(((Constants.R_HEADS) + &quot;*&quot;) - 1)" />
    <mutant id="mutant_7179" viable="false" in="?" from="(&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;)" to="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) - 1)" />
    <mutant id="mutant_4904" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="(((Constants.R_HEADS) + &quot;*&quot;) * -1)" />
    <mutant id="mutant_4903" viable="true" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) + &quot;*&quot;" to="((bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) + &quot;*&quot;) + 1" />
    <mutant id="mutant_4902" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) + &quot;*&quot;" to="((bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) + &quot;*&quot;) * -1" />
    <mutant id="mutant_4901" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) + &quot;*&quot;" to="((bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) + &quot;*&quot;) - 1" />
    <mutant id="mutant_4900" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;" to="(((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) - 1" />
    <mutant id="mutant_7172" viable="false" in="?" from="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;)" to="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) * -1)" />
    <mutant id="mutant_7171" viable="false" in="?" from="((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P))" to="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + 1)" />
    <mutant id="mutant_7174" viable="false" in="?" from="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;)" to="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) + 1)" />
    <mutant id="mutant_7173" viable="false" in="?" from="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;)" to="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) - 1)" />
    <mutant id="mutant_7176" viable="false" in="?" from="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) + &quot;$&quot;)" to="(((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) + &quot;$&quot;) * -1)" />
    <mutant id="mutant_7175" viable="false" in="?" from="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) + &quot;$&quot;)" to="(((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) + &quot;$&quot;) - 1)" />
    <mutant id="mutant_7178" viable="false" in="?" from="(&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;)" to="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) * -1)" />
    <mutant id="mutant_7177" viable="false" in="?" from="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) + &quot;$&quot;)" to="(((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) + &quot;$&quot;) + 1)" />
    <mutant id="mutant_7170" viable="false" in="?" from="((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P))" to="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) * -1)" />
    <mutant id="mutant_7169" viable="false" in="?" from="((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P))" to="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) - 1)" />
    <mutant id="mutant_7168" viable="false" in="?" from="(&quot;^&quot; + &quot;([\\\\/]?&quot;)" to="((&quot;^&quot; + &quot;([\\\\/]?&quot;) * -1)" />
    <mutant id="mutant_8499" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen) - overflow" to="((startOff + startLen) - overflow) + 1" />
    <mutant id="mutant_7161" viable="false" in="?" from="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;)" to="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) * -1)" />
    <mutant id="mutant_8492" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[])" from="((b.length) - overflow)" to="(((b.length) - overflow) + 1)" />
    <mutant id="mutant_7160" viable="false" in="?" from="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;)" to="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) - 1)" />
    <mutant id="mutant_8491" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.decideMode()" from="(binbuf.length) + 1" to="((binbuf.length) + 1) + 1" />
    <mutant id="mutant_7163" viable="false" in="?" from="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) + &quot;$&quot;)" to="((((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) + &quot;$&quot;) * -1)" />
    <mutant id="mutant_8494" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[])" from="((b.length) - overflow)" to="(((b.length) - overflow) * -1)" />
    <mutant id="mutant_7162" viable="false" in="?" from="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;)" to="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) + 1)" />
    <mutant id="mutant_8493" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[])" from="((b.length) - overflow)" to="(((b.length) - overflow) - 1)" />
    <mutant id="mutant_7165" viable="false" in="?" from="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) + &quot;$&quot;)" to="((((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) + &quot;$&quot;) + 1)" />
    <mutant id="mutant_8496" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen)" to="((startOff + startLen) - 1)" />
    <mutant id="mutant_7164" viable="false" in="?" from="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) + &quot;$&quot;)" to="((((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) + &quot;$&quot;) - 1)" />
    <mutant id="mutant_8495" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen)" to="((startOff + startLen) + 1)" />
    <mutant id="mutant_7167" viable="false" in="?" from="(&quot;^&quot; + &quot;([\\\\/]?&quot;)" to="((&quot;^&quot; + &quot;([\\\\/]?&quot;) + 1)" />
    <mutant id="mutant_8498" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen) - overflow" to="((startOff + startLen) - overflow) * -1" />
    <mutant id="mutant_7166" viable="false" in="?" from="(&quot;^&quot; + &quot;([\\\\/]?&quot;)" to="((&quot;^&quot; + &quot;([\\\\/]?&quot;) - 1)" />
    <mutant id="mutant_8497" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen)" to="((startOff + startLen) * -1)" />
    <mutant id="mutant_8490" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.decideMode()" from="(binbuf.length) + 1" to="((binbuf.length) + 1) * -1" />
    <mutant id="mutant_7158" viable="false" in="?" from="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;)" to="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + 1)" />
    <mutant id="mutant_8489" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.decideMode()" from="(binbuf.length) + 1" to="((binbuf.length) + 1) - 1" />
    <mutant id="mutant_7157" viable="false" in="?" from="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;)" to="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) * -1)" />
    <mutant id="mutant_8488" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="len - copy" to="(len - copy) * -1" />
    <mutant id="mutant_7159" viable="false" in="?" from="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;)" to="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) - 1)" />
    <mutant id="mutant_7150" viable="false" in="?" from="((URIish.USER_HOME_P) + &quot;?&quot;)" to="(((URIish.USER_HOME_P) + &quot;?&quot;) - 1)" />
    <mutant id="mutant_8481" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_8480" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_7152" viable="false" in="?" from="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;))" to="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) - 1)" />
    <mutant id="mutant_8483" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="((binbuf.length) - (binbufcnt))" to="(((binbuf.length) - (binbufcnt)) * -1)" />
    <mutant id="mutant_7151" viable="false" in="?" from="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;))" to="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) * -1)" />
    <mutant id="mutant_8482" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_7154" viable="false" in="?" from="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;)" to="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + 1)" />
    <mutant id="mutant_8485" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="((binbuf.length) - (binbufcnt))" to="(((binbuf.length) - (binbufcnt)) + 1)" />
    <mutant id="mutant_7153" viable="false" in="?" from="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;))" to="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + 1)" />
    <mutant id="mutant_8484" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="((binbuf.length) - (binbufcnt))" to="(((binbuf.length) - (binbufcnt)) - 1)" />
    <mutant id="mutant_7156" viable="false" in="?" from="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;)" to="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) * -1)" />
    <mutant id="mutant_8487" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="len - copy" to="(len - copy) + 1" />
    <mutant id="mutant_7155" viable="false" in="?" from="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;)" to="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) - 1)" />
    <mutant id="mutant_8486" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="len - copy" to="(len - copy) - 1" />
    <mutant id="mutant_7147" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;)" to="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) * -1)" />
    <mutant id="mutant_8478" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="i - off" to="(i - off) - 1" />
    <mutant id="mutant_7146" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;)" to="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) - 1)" />
    <mutant id="mutant_8477" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="i - off" to="(i - off) + 1" />
    <mutant id="mutant_7149" viable="false" in="?" from="((URIish.USER_HOME_P) + &quot;?&quot;)" to="(((URIish.USER_HOME_P) + &quot;?&quot;) * -1)" />
    <mutant id="mutant_7148" viable="false" in="?" from="((URIish.USER_HOME_P) + &quot;?&quot;)" to="(((URIish.USER_HOME_P) + &quot;?&quot;) + 1)" />
    <mutant id="mutant_8479" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="i - off" to="(i - off) * -1" />
    <mutant id="mutant_3611" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(64 * (DfsBlockCacheConfig.KB))" to="((64 * (DfsBlockCacheConfig.KB)) - 1)" />
    <mutant id="mutant_4942" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) + &quot;\n&quot;)" to="(((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_3610" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(64 * (DfsBlockCacheConfig.KB))" to="((64 * (DfsBlockCacheConfig.KB)) * -1)" />
    <mutant id="mutant_4941" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName()))" to="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) * -1)" />
    <mutant id="mutant_4940" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName()))" to="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) - 1)" />
    <mutant id="mutant_3619" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size) * size" to="(((cache.getBlockSize()) / size) * size) * -1" />
    <mutant id="mutant_3618" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size) * size" to="(((cache.getBlockSize()) / size) * size) - 1" />
    <mutant id="mutant_4949" viable="true" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (changeId.getName())) + &quot;\n&quot;)" to="(((&quot;\nChange-Id: I&quot; + (changeId.getName())) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_3617" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size) * size" to="(((cache.getBlockSize()) / size) * size) + 1" />
    <mutant id="mutant_4948" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (changeId.getName())) + &quot;\n&quot;)" to="(((&quot;\nChange-Id: I&quot; + (changeId.getName())) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_3616" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size)" to="(((cache.getBlockSize()) / size) + 1)" />
    <mutant id="mutant_4947" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (changeId.getName()))" to="((&quot;\nChange-Id: I&quot; + (changeId.getName())) * -1)" />
    <mutant id="mutant_3615" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size)" to="(((cache.getBlockSize()) / size) * -1)" />
    <mutant id="mutant_4946" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (changeId.getName()))" to="((&quot;\nChange-Id: I&quot; + (changeId.getName())) - 1)" />
    <mutant id="mutant_3614" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size)" to="(((cache.getBlockSize()) / size) - 1)" />
    <mutant id="mutant_4945" viable="true" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (changeId.getName()))" to="((&quot;\nChange-Id: I&quot; + (changeId.getName())) + 1)" />
    <mutant id="mutant_3613" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector.packGarbage(org.eclipse.jgit.lib.ProgressMonitor)" from="((pool.lookupOrNull(id)) != null) || (anyPackHas(id))" to="!(((pool.lookupOrNull(id)) != null) || (anyPackHas(id)))" />
    <mutant id="mutant_4944" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) + &quot;\n&quot;)" to="(((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_3612" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector.pack(org.eclipse.jgit.lib.ProgressMonitor)" from="(ref.isSymbolic()) || ((ref.getObjectId()) == null)" to="!((ref.isSymbolic()) || ((ref.getObjectId()) == null))" />
    <mutant id="mutant_4943" viable="true" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) + &quot;\n&quot;)" to="(((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_3609" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(64 * (DfsBlockCacheConfig.KB))" to="((64 * (DfsBlockCacheConfig.KB)) + 1)" />
    <mutant id="mutant_3600" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.reserveSpace(int)" from="(liveBytes) + reserve" to="((liveBytes) + reserve) * -1" />
    <mutant id="mutant_4931" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="(((Constants.HEAD) + &quot;^{commit}&quot;) + 1)" />
    <mutant id="mutant_4930" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((all) &amp;&amp; (!(repo.isBare()))) &amp;&amp; ((repo.getWorkTree()) != null)" to="!(((all) &amp;&amp; (!(repo.isBare()))) &amp;&amp; ((repo.getWorkTree()) != null))" />
    <mutant id="mutant_3608" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(32 * (DfsBlockCacheConfig.MB))" to="((32 * (DfsBlockCacheConfig.MB)) * -1)" />
    <mutant id="mutant_4939" viable="true" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName()))" to="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) + 1)" />
    <mutant id="mutant_3607" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(32 * (DfsBlockCacheConfig.MB))" to="((32 * (DfsBlockCacheConfig.MB)) + 1)" />
    <mutant id="mutant_4938" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state))" to="!((state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state)))" />
    <mutant id="mutant_3606" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(32 * (DfsBlockCacheConfig.MB))" to="((32 * (DfsBlockCacheConfig.MB)) - 1)" />
    <mutant id="mutant_4937" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(prefix + (revCommit.getShortMessage()))" to="((prefix + (revCommit.getShortMessage())) + 1)" />
    <mutant id="mutant_3605" viable="false" in="?" from="1024 * (DfsBlockCacheConfig.KB)" to="(1024 * (DfsBlockCacheConfig.KB)) * -1" />
    <mutant id="mutant_4936" viable="false" in="org.eclipse.jgit.api.CommitCommand.call()" from="(prefix + (revCommit.getShortMessage()))" to="((prefix + (revCommit.getShortMessage())) * -1)" />
    <mutant id="mutant_3604" viable="false" in="?" from="1024 * (DfsBlockCacheConfig.KB)" to="(1024 * (DfsBlockCacheConfig.KB)) - 1" />
    <mutant id="mutant_4935" viable="false" in="org.eclipse.jgit.api.CommitCommand.call()" from="(prefix + (revCommit.getShortMessage()))" to="((prefix + (revCommit.getShortMessage())) - 1)" />
    <mutant id="mutant_3603" viable="false" in="?" from="1024 * (DfsBlockCacheConfig.KB)" to="(1024 * (DfsBlockCacheConfig.KB)) + 1" />
    <mutant id="mutant_4934" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(headId == null) &amp;&amp; (amend)" to="!((headId == null) &amp;&amp; (amend))" />
    <mutant id="mutant_3602" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.reserveSpace(int)" from="(liveBytes) + reserve" to="((liveBytes) + reserve) + 1" />
    <mutant id="mutant_4933" viable="false" in="org.eclipse.jgit.api.CommitCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="(((Constants.HEAD) + &quot;^{commit}&quot;) - 1)" />
    <mutant id="mutant_3601" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.reserveSpace(int)" from="(liveBytes) + reserve" to="((liveBytes) + reserve) - 1" />
    <mutant id="mutant_4932" viable="false" in="org.eclipse.jgit.api.CommitCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="(((Constants.HEAD) + &quot;^{commit}&quot;) * -1)" />
    <mutant id="mutant_4929" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((all) &amp;&amp; (!(repo.isBare())))" to="(!((all) &amp;&amp; (!(repo.isBare()))))" />
    <mutant id="mutant_4920" viable="true" in="org.eclipse.jgit.api.CommitCommand.setOnly(java.lang.String)" from="((only.length()) - 1)" to="(((only.length()) - 1) - 1)" />
    <mutant id="mutant_4928" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="emptyCommit &amp;&amp; (hTree != null)" to="!(emptyCommit &amp;&amp; (hTree != null))" />
    <mutant id="mutant_4927" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="emptyCommit &amp;&amp; (((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" to="!(emptyCommit &amp;&amp; (((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode()))))" />
    <mutant id="mutant_4926" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="(((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" to="(!(((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode()))))" />
    <mutant id="mutant_4925" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((hTree == null) || (!(hTree.idEqual(fTree))))" to="(!((hTree == null) || (!(hTree.idEqual(fTree)))))" />
    <mutant id="mutant_4924" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree))) || ((hTree != null) &amp;&amp; (fTree.idEqual(hTree)))" to="!(((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree))) || ((hTree != null) &amp;&amp; (fTree.idEqual(hTree))))" />
    <mutant id="mutant_4923" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((hTree != null) &amp;&amp; (fTree.idEqual(hTree)))" to="(!((hTree != null) &amp;&amp; (fTree.idEqual(hTree))))" />
    <mutant id="mutant_4922" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree)))" to="(!((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree))))" />
    <mutant id="mutant_4921" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="(dcTree != null) || (hTree != null)" to="!((dcTree != null) || (hTree != null))" />
    <mutant id="mutant_7194" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;)" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) * -1)" />
    <mutant id="mutant_7193" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;)" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) - 1)" />
    <mutant id="mutant_7196" viable="false" in="?" from="(&quot;(?:&quot; + (URIish.USER_HOME_P))" to="((&quot;(?:&quot; + (URIish.USER_HOME_P)) - 1)" />
    <mutant id="mutant_7195" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;)" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + 1)" />
    <mutant id="mutant_7198" viable="false" in="?" from="(&quot;(?:&quot; + (URIish.USER_HOME_P))" to="((&quot;(?:&quot; + (URIish.USER_HOME_P)) * -1)" />
    <mutant id="mutant_7197" viable="false" in="?" from="(&quot;(?:&quot; + (URIish.USER_HOME_P))" to="((&quot;(?:&quot; + (URIish.USER_HOME_P)) + 1)" />
    <mutant id="mutant_4919" viable="true" in="org.eclipse.jgit.api.CommitCommand.setOnly(java.lang.String)" from="((only.length()) - 1)" to="(((only.length()) - 1) * -1)" />
    <mutant id="mutant_4918" viable="true" in="org.eclipse.jgit.api.CommitCommand.setOnly(java.lang.String)" from="((only.length()) - 1)" to="(((only.length()) - 1) + 1)" />
    <mutant id="mutant_7199" viable="false" in="?" from="((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)" to="(((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;) - 1)" />
    <mutant id="mutant_7190" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) - 1)" />
    <mutant id="mutant_7192" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + 1)" />
    <mutant id="mutant_7191" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) * -1)" />
    <mutant id="mutant_4917" viable="true" in="org.eclipse.jgit.api.CommitCommand.isMergeDuringRebase(org.eclipse.jgit.lib.RepositoryState)" from="(state != (RepositoryState.REBASING_INTERACTIVE)) &amp;&amp; (state != (RepositoryState.REBASING_MERGE))" to="!((state != (RepositoryState.REBASING_INTERACTIVE)) &amp;&amp; (state != (RepositoryState.REBASING_MERGE)))" />
    <mutant id="mutant_4916" viable="true" in="org.eclipse.jgit.api.CloneCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (gitDir.equals(directory))" to="!((gitDir != null) &amp;&amp; (gitDir.equals(directory)))" />
    <mutant id="mutant_4915" viable="true" in="org.eclipse.jgit.api.CloneCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (!(gitDir.equals(directory)))" to="!((gitDir != null) &amp;&amp; (!(gitDir.equals(directory))))" />
    <mutant id="mutant_4914" viable="true" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="(head == null) || ((head.getObjectId()) == null)" to="!((head == null) || ((head.getObjectId()) == null))" />
    <mutant id="mutant_4913" viable="true" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_TAGS) + (branch))" to="(((Constants.R_TAGS) + (branch)) + 1)" />
    <mutant id="mutant_4912" viable="false" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_TAGS) + (branch))" to="(((Constants.R_TAGS) + (branch)) * -1)" />
    <mutant id="mutant_4911" viable="false" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_TAGS) + (branch))" to="(((Constants.R_TAGS) + (branch)) - 1)" />
    <mutant id="mutant_4910" viable="false" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (branch))" to="(((Constants.R_HEADS) + (branch)) - 1)" />
    <mutant id="mutant_2323" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((j - i) - 1)" to="(((j - i) - 1) * -1)" />
    <mutant id="mutant_3655" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize))" to="((pos / (blockSize)) + 1)" />
    <mutant id="mutant_4986" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name)))))" to="!(((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" />
    <mutant id="mutant_2324" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(pnum - 1)" to="((pnum - 1) + 1)" />
    <mutant id="mutant_3654" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getCount()" from="(currPos) + (currPtr)" to="((currPos) + (currPtr)) + 1" />
    <mutant id="mutant_4985" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="(((Constants.R_HEADS) + (name)) * -1)" />
    <mutant id="mutant_2321" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((j - i) - 1)" to="(((j - i) - 1) - 1)" />
    <mutant id="mutant_3653" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getCount()" from="(currPos) + (currPtr)" to="((currPos) + (currPtr)) * -1" />
    <mutant id="mutant_4984" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="(((Constants.R_HEADS) + (name)) - 1)" />
    <mutant id="mutant_2322" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((j - i) - 1)" to="(((j - i) - 1) + 1)" />
    <mutant id="mutant_3652" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getCount()" from="(currPos) + (currPtr)" to="((currPos) + (currPtr)) - 1" />
    <mutant id="mutant_4983" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="(((Constants.R_HEADS) + (name)) + 1)" />
    <mutant id="mutant_3651" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="(currPtr) - s" to="((currPtr) - s) - 1" />
    <mutant id="mutant_4982" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + branchName)" to="(((Constants.R_HEADS) + branchName) * -1)" />
    <mutant id="mutant_2320" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(j - i)" to="((j - i) - 1)" />
    <mutant id="mutant_3650" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="(currPtr) - s" to="((currPtr) - s) + 1" />
    <mutant id="mutant_4981" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + branchName)" to="(((Constants.R_HEADS) + branchName) - 1)" />
    <mutant id="mutant_4980" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + branchName)" to="(((Constants.R_HEADS) + branchName) + 1)" />
    <mutant id="mutant_2329" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="j - 1" to="(j - 1) + 1" />
    <mutant id="mutant_2327" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="j - 1" to="(j - 1) * -1" />
    <mutant id="mutant_3659" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="((pos / (blockSize)) * (blockSize)) - 1" />
    <mutant id="mutant_2328" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="j - 1" to="(j - 1) - 1" />
    <mutant id="mutant_3658" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="((pos / (blockSize)) * (blockSize)) * -1" />
    <mutant id="mutant_4989" viable="true" in="org.eclipse.jgit.api.DescribeCommand$1.compare(Candidate,Candidate)" from="(o1.depth) - (o2.depth)" to="((o1.depth) - (o2.depth)) + 1" />
    <mutant id="mutant_2325" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(pnum - 1)" to="((pnum - 1) - 1)" />
    <mutant id="mutant_3657" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize))" to="((pos / (blockSize)) * -1)" />
    <mutant id="mutant_4988" viable="true" in="org.eclipse.jgit.api.DescribeCommand$1.compare(Candidate,Candidate)" from="(o1.depth) - (o2.depth)" to="((o1.depth) - (o2.depth)) - 1" />
    <mutant id="mutant_2326" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(pnum - 1)" to="((pnum - 1) * -1)" />
    <mutant id="mutant_3656" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize))" to="((pos / (blockSize)) - 1)" />
    <mutant id="mutant_4987" viable="true" in="org.eclipse.jgit.api.DescribeCommand$1.compare(Candidate,Candidate)" from="(o1.depth) - (o2.depth)" to="((o1.depth) - (o2.depth)) * -1" />
    <mutant id="mutant_2312" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) * -1" />
    <mutant id="mutant_3644" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((currPos) + (currPtr))" to="(((currPos) + (currPtr)) * -1)" />
    <mutant id="mutant_4975" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + (name))" to="(((Constants.R_HEADS) + (name)) + 1)" />
    <mutant id="mutant_2313" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) - 1" />
    <mutant id="mutant_3643" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((currPos) + (currPtr))" to="(((currPos) + (currPtr)) - 1)" />
    <mutant id="mutant_4974" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from tag &quot; + startPointFullName" to="(&quot;branch: Created from tag &quot; + startPointFullName) + 1" />
    <mutant id="mutant_2310" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_3642" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="((ptr + r) * -1)" />
    <mutant id="mutant_4973" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from tag &quot; + startPointFullName" to="(&quot;branch: Created from tag &quot; + startPointFullName) - 1" />
    <mutant id="mutant_2311" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_3641" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="((ptr + r) - 1)" />
    <mutant id="mutant_4972" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from tag &quot; + startPointFullName" to="(&quot;branch: Created from tag &quot; + startPointFullName) * -1" />
    <mutant id="mutant_3640" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="((ptr + r) + 1)" />
    <mutant id="mutant_4971" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to tag &quot; + startPointFullName" to="(&quot;branch: Reset start-point to tag &quot; + startPointFullName) + 1" />
    <mutant id="mutant_4970" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to tag &quot; + startPointFullName" to="(&quot;branch: Reset start-point to tag &quot; + startPointFullName) - 1" />
    <mutant id="mutant_2318" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(j - i)" to="((j - i) * -1)" />
    <mutant id="mutant_2319" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(j - i)" to="((j - i) + 1)" />
    <mutant id="mutant_3649" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="(currPtr) - s" to="((currPtr) - s) * -1" />
    <mutant id="mutant_2316" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_3648" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (currPos)))" to="((int)((pos - (currPos)))) * -1" />
    <mutant id="mutant_4979" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.SET_UPSTREAM)) || ((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.TRACK))" to="!(((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.SET_UPSTREAM)) || ((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.TRACK)))" />
    <mutant id="mutant_2317" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_3647" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (currPos)))" to="((int)((pos - (currPos)))) - 1" />
    <mutant id="mutant_4978" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="exists &amp;&amp; (force)" to="!(exists &amp;&amp; (force))" />
    <mutant id="mutant_2314" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) + 1" />
    <mutant id="mutant_3646" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (currPos)))" to="((int)((pos - (currPos)))) + 1" />
    <mutant id="mutant_4977" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + (name))" to="(((Constants.R_HEADS) + (name)) * -1)" />
    <mutant id="mutant_2315" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_3645" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((currPos) + (currPtr))" to="(((currPos) + (currPtr)) + 1)" />
    <mutant id="mutant_4976" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + (name))" to="(((Constants.R_HEADS) + (name)) - 1)" />
    <mutant id="mutant_2301" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="((len - 1) + 1)" />
    <mutant id="mutant_3633" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((int)(pos - (currPos)))" to="((int)((pos - (currPos)))) * -1" />
    <mutant id="mutant_4964" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to branch &quot; + startPointFullName" to="(&quot;branch: Reset start-point to branch &quot; + startPointFullName) - 1" />
    <mutant id="mutant_2302" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(i == 0) || (i == (len - 1))" to="!((i == 0) || (i == (len - 1)))" />
    <mutant id="mutant_3632" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((int)(pos - (currPos)))" to="((int)((pos - (currPos)))) - 1" />
    <mutant id="mutant_4963" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to branch &quot; + startPointFullName" to="(&quot;branch: Reset start-point to branch &quot; + startPointFullName) * -1" />
    <mutant id="mutant_3631" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((int)(pos - (currPos)))" to="((int)((pos - (currPos)))) + 1" />
    <mutant id="mutant_4962" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) || (startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))" to="!((startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) || (startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES)))" />
    <mutant id="mutant_2300" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="((len - 1) * -1)" />
    <mutant id="mutant_3630" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPos) &lt;= pos) &amp;&amp; (r &lt; cnt)" to="!(((currPos) &lt;= pos) &amp;&amp; (r &lt; cnt))" />
    <mutant id="mutant_4961" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from commit &quot; + baseCommit" to="(&quot;branch: Created from commit &quot; + baseCommit) - 1" />
    <mutant id="mutant_4960" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from commit &quot; + baseCommit" to="(&quot;branch: Created from commit &quot; + baseCommit) + 1" />
    <mutant id="mutant_2309" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_2307" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_3639" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="((cnt - r) * -1)" />
    <mutant id="mutant_2308" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_3638" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="((cnt - r) + 1)" />
    <mutant id="mutant_4969" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to tag &quot; + startPointFullName" to="(&quot;branch: Reset start-point to tag &quot; + startPointFullName) * -1" />
    <mutant id="mutant_2305" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) + 1" />
    <mutant id="mutant_3637" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="((cnt - r) - 1)" />
    <mutant id="mutant_4968" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from branch &quot; + baseBranch" to="(&quot;branch: Created from branch &quot; + baseBranch) * -1" />
    <mutant id="mutant_2306" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_3636" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPtr) - s)" to="(((currPtr) - s) - 1)" />
    <mutant id="mutant_4967" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from branch &quot; + baseBranch" to="(&quot;branch: Created from branch &quot; + baseBranch) + 1" />
    <mutant id="mutant_2303" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) * -1" />
    <mutant id="mutant_3635" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPtr) - s)" to="(((currPtr) - s) + 1)" />
    <mutant id="mutant_4966" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from branch &quot; + baseBranch" to="(&quot;branch: Created from branch &quot; + baseBranch) - 1" />
    <mutant id="mutant_2304" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) - 1" />
    <mutant id="mutant_3634" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPtr) - s)" to="(((currPtr) - s) * -1)" />
    <mutant id="mutant_4965" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to branch &quot; + startPointFullName" to="(&quot;branch: Reset start-point to branch &quot; + startPointFullName) + 1" />
    <mutant id="mutant_3622" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.inflate(org.eclipse.jgit.internal.storage.dfs.DfsReader,long,int)" from="((dstbuf.length) - dstoff)" to="(((dstbuf.length) - dstoff) + 1)" />
    <mutant id="mutant_4953" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="(state == (RepositoryState.SAFE)) &amp;&amp; ((message) == null)" to="!((state == (RepositoryState.SAFE)) &amp;&amp; ((message) == null))" />
    <mutant id="mutant_3621" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.inflate(org.eclipse.jgit.internal.storage.dfs.DfsReader,long,int)" from="((dstbuf.length) - dstoff)" to="(((dstbuf.length) - dstoff) * -1)" />
    <mutant id="mutant_4952" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="(state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state))" to="!((state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state)))" />
    <mutant id="mutant_3620" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.inflate(org.eclipse.jgit.internal.storage.dfs.DfsReader,long,int)" from="((dstbuf.length) - dstoff)" to="(((dstbuf.length) - dstoff) - 1)" />
    <mutant id="mutant_4951" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="((author) == null) &amp;&amp; (!(amend))" to="!(((author) == null) &amp;&amp; (!(amend)))" />
    <mutant id="mutant_4950" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (changeId.getName())) + &quot;\n&quot;)" to="(((&quot;\nChange-Id: I&quot; + (changeId.getName())) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_3629" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="((cnt - r) * -1)" />
    <mutant id="mutant_3628" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="((cnt - r) + 1)" />
    <mutant id="mutant_4959" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from commit &quot; + baseCommit" to="(&quot;branch: Created from commit &quot; + baseCommit) * -1" />
    <mutant id="mutant_3627" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="((cnt - r) - 1)" />
    <mutant id="mutant_4958" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to commit &quot; + baseCommit" to="(&quot;branch: Reset start-point to commit &quot; + baseCommit) + 1" />
    <mutant id="mutant_3626" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="((ptr + r) * -1)" />
    <mutant id="mutant_4957" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to commit &quot; + baseCommit" to="(&quot;branch: Reset start-point to commit &quot; + baseCommit) - 1" />
    <mutant id="mutant_3625" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="((ptr + r) - 1)" />
    <mutant id="mutant_4956" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to commit &quot; + baseCommit" to="(&quot;branch: Reset start-point to commit &quot; + baseCommit) * -1" />
    <mutant id="mutant_3624" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="((ptr + r) + 1)" />
    <mutant id="mutant_4955" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(!(force)) &amp;&amp; exists" to="!((!(force)) &amp;&amp; exists)" />
    <mutant id="mutant_3623" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(pos &lt; (currPos)) &amp;&amp; (r &lt; cnt)" to="!((pos &lt; (currPos)) &amp;&amp; (r &lt; cnt))" />
    <mutant id="mutant_4954" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(refToCheck != null) &amp;&amp; (refToCheck.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="!((refToCheck != null) &amp;&amp; (refToCheck.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" />
    <mutant id="mutant_2370" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_1040" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50))" to="((((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) * -1)" />
    <mutant id="mutant_2371" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_1036" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileScore * 50)" to="((fileScore * 50) + 1)" />
    <mutant id="mutant_2367" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_3699" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as.category) - (bs.category)" to="((as.category) - (bs.category)) * -1" />
    <mutant id="mutant_1037" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileScore * 50)" to="((fileScore * 50) - 1)" />
    <mutant id="mutant_2368" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_3698" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as != null) &amp;&amp; (bs != null)" to="!((as != null) &amp;&amp; (bs != null))" />
    <mutant id="mutant_1034" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((dirScoreLtr + dirScoreRtl) * 25)" to="(((dirScoreLtr + dirScoreRtl) * 25) - 1)" />
    <mutant id="mutant_2365" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="l - 1" to="(l - 1) + 1" />
    <mutant id="mutant_3697" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.equals(java.lang.Object)" from="(packName.equals(desc.packName)) &amp;&amp; (getRepositoryDescription().equals(desc.getRepositoryDescription()))" to="!((packName.equals(desc.packName)) &amp;&amp; (getRepositoryDescription().equals(desc.getRepositoryDescription())))" />
    <mutant id="mutant_1035" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((dirScoreLtr + dirScoreRtl) * 25)" to="(((dirScoreLtr + dirScoreRtl) * 25) * -1)" />
    <mutant id="mutant_2366" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_3696" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription(org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription,java.lang.String)" from="((PackExt.values().length) * 2)" to="(((PackExt.values().length) * 2) + 1)" />
    <mutant id="mutant_1032" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirScoreLtr + dirScoreRtl)" to="((dirScoreLtr + dirScoreRtl) - 1)" />
    <mutant id="mutant_2363" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="l - 1" to="(l - 1) * -1" />
    <mutant id="mutant_3695" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription(org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription,java.lang.String)" from="((PackExt.values().length) * 2)" to="(((PackExt.values().length) * 2) * -1)" />
    <mutant id="mutant_1033" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((dirScoreLtr + dirScoreRtl) * 25)" to="(((dirScoreLtr + dirScoreRtl) * 25) + 1)" />
    <mutant id="mutant_2364" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="l - 1" to="(l - 1) - 1" />
    <mutant id="mutant_3694" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription(org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription,java.lang.String)" from="((PackExt.values().length) * 2)" to="(((PackExt.values().length) * 2) - 1)" />
    <mutant id="mutant_1030" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirScoreLtr + dirScoreRtl)" to="((dirScoreLtr + dirScoreRtl) + 1)" />
    <mutant id="mutant_2361" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((l - i) - 1)" to="(((l - i) - 1) - 1)" />
    <mutant id="mutant_3693" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.addObjectsToPack(org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(base.has(added))) &amp;&amp; (!(base.has(isBase)))" to="!((!(base.has(added))) &amp;&amp; (!(base.has(isBase))))" />
    <mutant id="mutant_1031" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirScoreLtr + dirScoreRtl)" to="((dirScoreLtr + dirScoreRtl) * -1)" />
    <mutant id="mutant_2362" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((l - i) - 1)" to="(((l - i) - 1) + 1)" />
    <mutant id="mutant_3692" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$3.compare(org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset,org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset)" from="((a.offset) - (b.offset))" to="(((a.offset) - (b.offset)) - 1)" />
    <mutant id="mutant_1038" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileScore * 50)" to="((fileScore * 50) * -1)" />
    <mutant id="mutant_2369" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_1039" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50))" to="((((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) + 1)" />
    <mutant id="mutant_3691" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$3.compare(org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset,org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset)" from="((a.offset) - (b.offset))" to="(((a.offset) - (b.offset)) * -1)" />
    <mutant id="mutant_2360" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((l - i) - 1)" to="(((l - i) - 1) * -1)" />
    <mutant id="mutant_3690" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$3.compare(org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset,org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset)" from="((a.offset) - (b.offset))" to="(((a.offset) - (b.offset)) + 1)" />
    <mutant id="mutant_1025" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100)" to="((fileSim * 100) + 1)" />
    <mutant id="mutant_2356" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_3688" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((obj.has(added)) || (obj.has(isBase)))" to="(!((obj.has(added)) || (obj.has(isBase))))" />
    <mutant id="mutant_1026" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100)" to="((fileSim * 100) - 1)" />
    <mutant id="mutant_2357" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="((l - i) + 1)" />
    <mutant id="mutant_3687" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024) * 1024" to="((5 * 1024) * 1024) - 1" />
    <mutant id="mutant_1023" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((b.length()) - 1) - fileSim)" to="((((b.length()) - 1) - fileSim) + 1)" />
    <mutant id="mutant_2354" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_3686" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024) * 1024" to="((5 * 1024) * 1024) + 1" />
    <mutant id="mutant_1024" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100)" to="((fileSim * 100) * -1)" />
    <mutant id="mutant_2355" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_3685" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024) * 1024" to="((5 * 1024) * 1024) * -1" />
    <mutant id="mutant_1021" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((b.length()) - 1) - fileSim)" to="((((b.length()) - 1) - fileSim) * -1)" />
    <mutant id="mutant_2352" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="((l - i) - 1)" />
    <mutant id="mutant_3684" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024)" to="((5 * 1024) * -1)" />
    <mutant id="mutant_1022" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((b.length()) - 1) - fileSim)" to="((((b.length()) - 1) - fileSim) - 1)" />
    <mutant id="mutant_2353" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="((l - i) * -1)" />
    <mutant id="mutant_3683" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024)" to="((5 * 1024) + 1)" />
    <mutant id="mutant_2350" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) + 1" />
    <mutant id="mutant_3682" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024)" to="((5 * 1024) - 1)" />
    <mutant id="mutant_1020" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - 1)" to="(((b.length()) - 1) - 1)" />
    <mutant id="mutant_2351" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="((l - i) + 1)" />
    <mutant id="mutant_3681" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase.addPack(org.eclipse.jgit.internal.storage.dfs.DfsPackFile)" from="1 + (o.packs.length)" to="(1 + (o.packs.length)) - 1" />
    <mutant id="mutant_1029" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100) / fileMax" to="((fileSim * 100) / fileMax) - 1" />
    <mutant id="mutant_1027" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100) / fileMax" to="((fileSim * 100) / fileMax) * -1" />
    <mutant id="mutant_2358" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="((l - i) - 1)" />
    <mutant id="mutant_1028" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100) / fileMax" to="((fileSim * 100) / fileMax) + 1" />
    <mutant id="mutant_2359" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="((l - i) * -1)" />
    <mutant id="mutant_3689" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(obj != null) &amp;&amp; ((obj.has(added)) || (obj.has(isBase)))" to="!((obj != null) &amp;&amp; ((obj.has(added)) || (obj.has(isBase))))" />
    <mutant id="mutant_3680" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase.addPack(org.eclipse.jgit.internal.storage.dfs.DfsPackFile)" from="1 + (o.packs.length)" to="(1 + (o.packs.length)) + 1" />
    <mutant id="mutant_1014" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - 1)" to="(((a.length()) - 1) - 1)" />
    <mutant id="mutant_2345" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) * -1" />
    <mutant id="mutant_3677" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter.insert(int,byte[],int,int)" from="((objectMap) != null) &amp;&amp; (objectMap.contains(id))" to="!(((objectMap) != null) &amp;&amp; (objectMap.contains(id)))" />
    <mutant id="mutant_1015" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((a.length()) - 1) - fileSim)" to="((((a.length()) - 1) - fileSim) * -1)" />
    <mutant id="mutant_2346" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) - 1" />
    <mutant id="mutant_3676" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(obj.getOffset()) + ptr" to="((obj.getOffset()) + ptr) * -1" />
    <mutant id="mutant_1012" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - 1)" to="(((a.length()) - 1) + 1)" />
    <mutant id="mutant_2343" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) - 1" />
    <mutant id="mutant_3675" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(obj.getOffset()) + ptr" to="((obj.getOffset()) + ptr) + 1" />
    <mutant id="mutant_1013" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - 1)" to="(((a.length()) - 1) * -1)" />
    <mutant id="mutant_2344" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) + 1" />
    <mutant id="mutant_3674" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(obj.getOffset()) + ptr" to="((obj.getOffset()) + ptr) - 1" />
    <mutant id="mutant_1010" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="(((b.length()) - bDirLen) + 1)" />
    <mutant id="mutant_2341" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((k - i) - 2)" to="(((k - i) - 2) - 1)" />
    <mutant id="mutant_3673" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(type == (Constants.OBJ_OFS_DELTA)) || (type == (Constants.OBJ_REF_DELTA))" to="!((type == (Constants.OBJ_OFS_DELTA)) || (type == (Constants.OBJ_REF_DELTA)))" />
    <mutant id="mutant_1011" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="(((b.length()) - bDirLen) - 1)" />
    <mutant id="mutant_2342" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) * -1" />
    <mutant id="mutant_3672" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((stored.size()) + 2)" to="(((stored.size()) + 2) * -1)" />
    <mutant id="mutant_3671" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((stored.size()) + 2)" to="(((stored.size()) + 2) - 1)" />
    <mutant id="mutant_2340" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((k - i) - 2)" to="(((k - i) - 2) + 1)" />
    <mutant id="mutant_3670" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((stored.size()) + 2)" to="(((stored.size()) + 2) + 1)" />
    <mutant id="mutant_1018" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - 1)" to="(((b.length()) - 1) + 1)" />
    <mutant id="mutant_2349" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) - 1" />
    <mutant id="mutant_1019" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - 1)" to="(((b.length()) - 1) * -1)" />
    <mutant id="mutant_1016" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((a.length()) - 1) - fileSim)" to="((((a.length()) - 1) - fileSim) - 1)" />
    <mutant id="mutant_2347" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) + 1" />
    <mutant id="mutant_3679" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase.addPack(org.eclipse.jgit.internal.storage.dfs.DfsPackFile)" from="1 + (o.packs.length)" to="(1 + (o.packs.length)) * -1" />
    <mutant id="mutant_1017" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((a.length()) - 1) - fileSim)" to="((((a.length()) - 1) - fileSim) + 1)" />
    <mutant id="mutant_2348" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="(i + 1) * -1" />
    <mutant id="mutant_3678" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter.close()" from="(rollback) &amp;&amp; ((packDsc) != null)" to="!((rollback) &amp;&amp; ((packDsc) != null))" />
    <mutant id="mutant_1003" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="(((b.length()) - bDirLen) * -1)" />
    <mutant id="mutant_2334" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="((i + 2) * -1)" />
    <mutant id="mutant_3666" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="((blockSize) - p)" to="(((blockSize) - p) + 1)" />
    <mutant id="mutant_4997" viable="false" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo)) + &quot;]&quot;" to="((&quot;Git[&quot; + (repo)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_1004" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="(((b.length()) - bDirLen) + 1)" />
    <mutant id="mutant_2335" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="((i + 2) - 1)" />
    <mutant id="mutant_3665" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="((blockSize) - p)" to="(((blockSize) - p) * -1)" />
    <mutant id="mutant_4996" viable="true" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo))" to="((&quot;Git[&quot; + (repo)) + 1)" />
    <mutant id="mutant_1001" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="(((a.length()) - aDirLen) + 1)" />
    <mutant id="mutant_2332" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="(i + 2) - 1" />
    <mutant id="mutant_3664" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="((blockSize) - p)" to="(((blockSize) - p) - 1)" />
    <mutant id="mutant_4995" viable="false" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo))" to="((&quot;Git[&quot; + (repo)) - 1)" />
    <mutant id="mutant_1002" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="(((a.length()) - aDirLen) - 1)" />
    <mutant id="mutant_2333" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="((i + 2) + 1)" />
    <mutant id="mutant_3663" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="(s + p)" to="((s + p) * -1)" />
    <mutant id="mutant_4994" viable="false" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo))" to="((&quot;Git[&quot; + (repo)) * -1)" />
    <mutant id="mutant_2330" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="(i + 2) + 1" />
    <mutant id="mutant_3662" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="(s + p)" to="((s + p) - 1)" />
    <mutant id="mutant_4993" viable="false" in="org.eclipse.jgit.api.DiffCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="(((Constants.HEAD) + &quot;^{tree}&quot;) - 1)" />
    <mutant id="mutant_1000" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="(((a.length()) - aDirLen) * -1)" />
    <mutant id="mutant_2331" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="(i + 2) * -1" />
    <mutant id="mutant_3661" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="(s + p)" to="((s + p) + 1)" />
    <mutant id="mutant_4992" viable="false" in="org.eclipse.jgit.api.DiffCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="(((Constants.HEAD) + &quot;^{tree}&quot;) * -1)" />
    <mutant id="mutant_3660" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="((pos / (blockSize)) * (blockSize)) + 1" />
    <mutant id="mutant_4991" viable="true" in="org.eclipse.jgit.api.DiffCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="(((Constants.HEAD) + &quot;^{tree}&quot;) + 1)" />
    <mutant id="mutant_4990" viable="true" in="org.eclipse.jgit.api.DiffCommand.call()" from="((out) != null) &amp;&amp; (!(showNameAndStatusOnly))" to="!(((out) != null) &amp;&amp; (!(showNameAndStatusOnly)))" />
    <mutant id="mutant_1009" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="(((b.length()) - bDirLen) * -1)" />
    <mutant id="mutant_1007" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="(((a.length()) - aDirLen) + 1)" />
    <mutant id="mutant_2338" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(k - i)" to="((k - i) * -1)" />
    <mutant id="mutant_1008" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="(((a.length()) - aDirLen) - 1)" />
    <mutant id="mutant_2339" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((k - i) - 2)" to="(((k - i) - 2) * -1)" />
    <mutant id="mutant_3669" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.writeNoHash(byte[],int,int)" from="((currBuf.length) - (currPtr))" to="(((currBuf.length) - (currPtr)) - 1)" />
    <mutant id="mutant_1005" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="(((b.length()) - bDirLen) - 1)" />
    <mutant id="mutant_2336" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(k - i)" to="((k - i) - 1)" />
    <mutant id="mutant_3668" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.writeNoHash(byte[],int,int)" from="((currBuf.length) - (currPtr))" to="(((currBuf.length) - (currPtr)) + 1)" />
    <mutant id="mutant_4999" viable="false" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo)) + &quot;]&quot;" to="((&quot;Git[&quot; + (repo)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_1006" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="(((a.length()) - aDirLen) * -1)" />
    <mutant id="mutant_2337" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(k - i)" to="((k - i) + 1)" />
    <mutant id="mutant_3667" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.writeNoHash(byte[],int,int)" from="((currBuf.length) - (currPtr))" to="(((currBuf.length) - (currPtr)) * -1)" />
    <mutant id="mutant_4998" viable="true" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo)) + &quot;]&quot;" to="((&quot;Git[&quot; + (repo)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_2172" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="ptr - 2" to="(ptr - 2) * -1" />
    <mutant id="mutant_2173" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="ptr - 2" to="(ptr - 2) + 1" />
    <mutant id="mutant_2170" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="(tokenBegin &lt;= lineEnd) &amp;&amp; ((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r'))" to="!((tokenBegin &lt;= lineEnd) &amp;&amp; ((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r')))" />
    <mutant id="mutant_2171" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="ptr - 2" to="(ptr - 2) - 1" />
    <mutant id="mutant_2169" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r'))" to="(!((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r')))" />
    <mutant id="mutant_2167" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset % 60" to="(offset % 60) * -1" />
    <mutant id="mutant_3499" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="(inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="!((inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length))))" />
    <mutant id="mutant_2168" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="(((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t'))" to="(!(((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')))" />
    <mutant id="mutant_3498" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="(headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="(!(headerOnly &amp;&amp; (dstoff == (dstbuf.length))))" />
    <mutant id="mutant_2165" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset % 60" to="(offset % 60) + 1" />
    <mutant id="mutant_3497" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="(((dstbuf.length) - dstoff) + 1)" />
    <mutant id="mutant_2166" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset % 60" to="(offset % 60) - 1" />
    <mutant id="mutant_3496" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="(((dstbuf.length) - dstoff) * -1)" />
    <mutant id="mutant_2163" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset / 60" to="(offset / 60) + 1" />
    <mutant id="mutant_3495" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="(((dstbuf.length) - dstoff) - 1)" />
    <mutant id="mutant_2164" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset / 60" to="(offset / 60) - 1" />
    <mutant id="mutant_3494" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="cnt - need" to="(cnt - need) * -1" />
    <mutant id="mutant_2161" viable="true" in="org.eclipse.jgit.lib.PersonIdent.toExternalString()" from="((when) / 1000)" to="(((when) / 1000) + 1)" />
    <mutant id="mutant_3493" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="cnt - need" to="(cnt - need) - 1" />
    <mutant id="mutant_2162" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset / 60" to="(offset / 60) * -1" />
    <mutant id="mutant_3492" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="cnt - need" to="(cnt - need) + 1" />
    <mutant id="mutant_3491" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="(need &gt; 0) &amp;&amp; (position &lt; length)" to="!((need &gt; 0) &amp;&amp; (position &lt; length))" />
    <mutant id="mutant_2160" viable="true" in="org.eclipse.jgit.lib.PersonIdent.toExternalString()" from="((when) / 1000)" to="(((when) / 1000) - 1)" />
    <mutant id="mutant_3490" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hit(org.eclipse.jgit.internal.storage.file.WindowCache$Ref)" from="(c + 1)" to="((c + 1) - 1)" />
    <mutant id="mutant_2158" viable="true" in="org.eclipse.jgit.lib.PersonIdent.hashCode()" from="((int)((when) / 1000L))" to="((int)(((when) / 1000L))) - 1" />
    <mutant id="mutant_2159" viable="true" in="org.eclipse.jgit.lib.PersonIdent.toExternalString()" from="((when) / 1000)" to="(((when) / 1000) * -1)" />
    <mutant id="mutant_3489" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hit(org.eclipse.jgit.internal.storage.file.WindowCache$Ref)" from="(c + 1)" to="((c + 1) * -1)" />
    <mutant id="mutant_2156" viable="true" in="org.eclipse.jgit.lib.PersonIdent.hashCode()" from="((int)((when) / 1000L))" to="((int)(((when) / 1000L))) * -1" />
    <mutant id="mutant_3488" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hit(org.eclipse.jgit.internal.storage.file.WindowCache$Ref)" from="(c + 1)" to="((c + 1) + 1)" />
    <mutant id="mutant_2157" viable="true" in="org.eclipse.jgit.lib.PersonIdent.hashCode()" from="((int)((when) / 1000L))" to="((int)(((when) / 1000L))) + 1" />
    <mutant id="mutant_3487" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(old == null) || ((e.ref.lastAccess) &lt; (old.ref.lastAccess))" to="!((old == null) || ((e.ref.lastAccess) &lt; (old.ref.lastAccess)))" />
    <mutant id="mutant_2154" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((p.when) / 1000L)" to="(((p.when) / 1000L) - 1)" />
    <mutant id="mutant_3486" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(evictBatch) - 1" to="((evictBatch) - 1) * -1" />
    <mutant id="mutant_2155" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress()))) &amp;&amp; (((when) / 1000L) == ((p.when) / 1000L))" to="!(((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress()))) &amp;&amp; (((when) / 1000L) == ((p.when) / 1000L)))" />
    <mutant id="mutant_3485" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(evictBatch) - 1" to="((evictBatch) - 1) - 1" />
    <mutant id="mutant_2152" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((p.when) / 1000L)" to="(((p.when) / 1000L) * -1)" />
    <mutant id="mutant_3484" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(evictBatch) - 1" to="((evictBatch) - 1) + 1" />
    <mutant id="mutant_2153" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((p.when) / 1000L)" to="(((p.when) / 1000L) + 1)" />
    <mutant id="mutant_3483" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.lock(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (locks.length))" to="((((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (locks.length)) + 1)" />
    <mutant id="mutant_107" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="(treeDepth * 2)" to="((treeDepth * 2) - 1)" />
    <mutant id="mutant_108" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="(treeDepth * 2)" to="((treeDepth * 2) + 1)" />
    <mutant id="mutant_109" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="((bi &lt; (bb.size())) || (oi &lt; (ob.size())))" to="(!((bi &lt; (bb.size())) || (oi &lt; (ob.size()))))" />
    <mutant id="mutant_103" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth + 1)" to="((treeDepth + 1) - 1)" />
    <mutant id="mutant_104" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth + 1)" to="((treeDepth + 1) * -1)" />
    <mutant id="mutant_105" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth + 1)" to="((treeDepth + 1) + 1)" />
    <mutant id="mutant_106" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="(treeDepth * 2)" to="((treeDepth * 2) * -1)" />
    <mutant id="mutant_2150" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((when) / 1000L)" to="(((when) / 1000L) + 1)" />
    <mutant id="mutant_3482" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.lock(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (locks.length))" to="((((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (locks.length)) * -1)" />
    <mutant id="mutant_2151" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((when) / 1000L)" to="(((when) / 1000L) - 1)" />
    <mutant id="mutant_3481" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.lock(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (locks.length))" to="((((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (locks.length)) - 1)" />
    <mutant id="mutant_3480" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.clean(org.eclipse.jgit.internal.storage.file.WindowCache$Entry)" from="(top != null) &amp;&amp; (top.dead)" to="!((top != null) &amp;&amp; (top.dead))" />
    <mutant id="mutant_2147" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="((aTZ.getOffset(aWhen.getTime())) / (60 * 1000))" to="(((aTZ.getOffset(aWhen.getTime())) / (60 * 1000)) * -1)" />
    <mutant id="mutant_3479" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.scan(org.eclipse.jgit.internal.storage.file.WindowCache$Entry,org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((r.pack) == pack) &amp;&amp; ((r.position) == position)" to="!(((r.pack) == pack) &amp;&amp; ((r.position) == position))" />
    <mutant id="mutant_2148" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress())))" to="(!((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress()))))" />
    <mutant id="mutant_3478" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="(((5 * (limit / wsz)) / 2) - 1)" />
    <mutant id="mutant_2145" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="((aTZ.getOffset(aWhen.getTime())) / (60 * 1000))" to="(((aTZ.getOffset(aWhen.getTime())) / (60 * 1000)) + 1)" />
    <mutant id="mutant_3477" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="(((5 * (limit / wsz)) / 2) * -1)" />
    <mutant id="mutant_2146" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="((aTZ.getOffset(aWhen.getTime())) / (60 * 1000))" to="(((aTZ.getOffset(aWhen.getTime())) / (60 * 1000)) - 1)" />
    <mutant id="mutant_3476" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="(((5 * (limit / wsz)) / 2) + 1)" />
    <mutant id="mutant_2143" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="(60 * 1000)" to="((60 * 1000) - 1)" />
    <mutant id="mutant_3475" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(5 * (limit / wsz))" to="((5 * (limit / wsz)) * -1)" />
    <mutant id="mutant_2144" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="(60 * 1000)" to="((60 * 1000) + 1)" />
    <mutant id="mutant_3474" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(5 * (limit / wsz))" to="((5 * (limit / wsz)) - 1)" />
    <mutant id="mutant_2141" viable="true" in="org.eclipse.jgit.lib.ObjectStream$SmallStream.available()" from="(data.length) - (ptr)" to="((data.length) - (ptr)) * -1" />
    <mutant id="mutant_3473" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(5 * (limit / wsz))" to="((5 * (limit / wsz)) + 1)" />
    <mutant id="mutant_2142" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="(60 * 1000)" to="((60 * 1000) * -1)" />
    <mutant id="mutant_3472" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(limit / wsz)" to="((limit / wsz) - 1)" />
    <mutant id="mutant_100" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth * 2)" to="((treeDepth * 2) * -1)" />
    <mutant id="mutant_101" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth * 2)" to="((treeDepth * 2) - 1)" />
    <mutant id="mutant_102" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth * 2)" to="((treeDepth * 2) + 1)" />
    <mutant id="mutant_2149" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((when) / 1000L)" to="(((when) / 1000L) * -1)" />
    <mutant id="mutant_118" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseObjectId(org.eclipse.jgit.lib.MutableObjectId)" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="(((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH)) - 1)" />
    <mutant id="mutant_119" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseObjectId(org.eclipse.jgit.lib.MutableObjectId)" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="(((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH)) + 1)" />
    <mutant id="mutant_114" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(min == null) || ((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0))" to="!((min == null) || ((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0)))" />
    <mutant id="mutant_115" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0))" to="(!((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0)))" />
    <mutant id="mutant_116" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(min == null) || ((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0))" to="!((min == null) || ((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0)))" />
    <mutant id="mutant_117" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseObjectId(org.eclipse.jgit.lib.MutableObjectId)" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="(((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH)) * -1)" />
    <mutant id="mutant_3471" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(limit / wsz)" to="((limit / wsz) + 1)" />
    <mutant id="mutant_2140" viable="true" in="org.eclipse.jgit.lib.ObjectStream$SmallStream.available()" from="(data.length) - (ptr)" to="((data.length) - (ptr)) - 1" />
    <mutant id="mutant_3470" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(limit / wsz)" to="((limit / wsz) * -1)" />
    <mutant id="mutant_2136" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.insert(V)" from="(j + 1)" to="((j + 1) * -1)" />
    <mutant id="mutant_3468" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.slot(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)) - 1" />
    <mutant id="mutant_4799" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((((hh.getNewStartLine()) - 1) + pos) - 1)" />
    <mutant id="mutant_2137" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.insert(V)" from="(j + 1)" to="((j + 1) + 1)" />
    <mutant id="mutant_3467" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.slot(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)) * -1" />
    <mutant id="mutant_4798" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((((hh.getNewStartLine()) - 1) + pos) + 1)" />
    <mutant id="mutant_2134" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.initTable(int)" from="sz - 1" to="(sz - 1) * -1" />
    <mutant id="mutant_3466" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (windowSizeShift))))" to="(packHash + ((int)((off &gt;&gt;&gt; (windowSizeShift))))) * -1" />
    <mutant id="mutant_4797" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((((hh.getNewStartLine()) - 1) + pos) * -1)" />
    <mutant id="mutant_2135" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.insert(V)" from="(j + 1)" to="((j + 1) - 1)" />
    <mutant id="mutant_3465" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (windowSizeShift))))" to="(packHash + ((int)((off &gt;&gt;&gt; (windowSizeShift))))) + 1" />
    <mutant id="mutant_4796" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(((hh.getNewStartLine()) - 1) * -1)" />
    <mutant id="mutant_2132" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.initTable(int)" from="sz - 1" to="(sz - 1) + 1" />
    <mutant id="mutant_3464" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (windowSizeShift))))" to="(packHash + ((int)((off &gt;&gt;&gt; (windowSizeShift))))) - 1" />
    <mutant id="mutant_4795" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(((hh.getNewStartLine()) - 1) - 1)" />
    <mutant id="mutant_2133" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.initTable(int)" from="sz - 1" to="(sz - 1) - 1" />
    <mutant id="mutant_3463" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.isFull()" from="((maxFiles) &lt; (openFiles.get())) || ((maxBytes) &lt; (openBytes.get()))" to="!(((maxFiles) &lt; (openFiles.get())) || ((maxBytes) &lt; (openBytes.get())))" />
    <mutant id="mutant_4794" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(((hh.getNewStartLine()) - 1) + 1)" />
    <mutant id="mutant_2130" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.get(org.eclipse.jgit.lib.AnyObjectId)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_3462" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((int)((tableSize) * 0.1))" to="((int)(((tableSize) * 0.1))) * -1" />
    <mutant id="mutant_4793" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((((hh.getNewStartLine()) - 1) + pos) - 1)" />
    <mutant id="mutant_2131" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.get(org.eclipse.jgit.lib.AnyObjectId)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_3461" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((int)((tableSize) * 0.1))" to="((int)(((tableSize) * 0.1))) - 1" />
    <mutant id="mutant_4792" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((((hh.getNewStartLine()) - 1) + pos) + 1)" />
    <mutant id="mutant_110" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="((bi &lt; (bb.size())) || (oi &lt; (ob.size()))) || (ti &lt; (tb.size()))" to="!(((bi &lt; (bb.size())) || (oi &lt; (ob.size()))) || (ti &lt; (tb.size())))" />
    <mutant id="mutant_111" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeNonNotes(org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry)" from="((baseList == null) &amp;&amp; (oursList == null))" to="(!((baseList == null) &amp;&amp; (oursList == null)))" />
    <mutant id="mutant_112" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeNonNotes(org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry)" from="((baseList == null) &amp;&amp; (oursList == null)) &amp;&amp; (theirsList == null)" to="!(((baseList == null) &amp;&amp; (oursList == null)) &amp;&amp; (theirsList == null))" />
    <mutant id="mutant_113" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0))" to="(!((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0)))" />
    <mutant id="mutant_2138" viable="true" in="org.eclipse.jgit.lib.ObjectReader.abbreviate(org.eclipse.jgit.lib.AnyObjectId,int)" from="(1 &lt; (matches.size())) &amp;&amp; (len &lt; (Constants.OBJECT_ID_STRING_LENGTH))" to="!((1 &lt; (matches.size())) &amp;&amp; (len &lt; (Constants.OBJECT_ID_STRING_LENGTH)))" />
    <mutant id="mutant_2139" viable="true" in="org.eclipse.jgit.lib.ObjectStream$SmallStream.available()" from="(data.length) - (ptr)" to="((data.length) - (ptr)) + 1" />
    <mutant id="mutant_3469" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.slot(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)) + 1" />
    <mutant id="mutant_129" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="(((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH)) + 1)" />
    <mutant id="mutant_125" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 1)" to="(((pathOffset) + 1) * -1)" />
    <mutant id="mutant_126" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 1)" to="(((pathOffset) + 1) - 1)" />
    <mutant id="mutant_127" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="(((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH)) * -1)" />
    <mutant id="mutant_128" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="(((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH)) - 1)" />
    <mutant id="mutant_121" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 0)" to="(((pathOffset) + 0) * -1)" />
    <mutant id="mutant_122" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 0)" to="(((pathOffset) + 0) - 1)" />
    <mutant id="mutant_123" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 0)" to="(((pathOffset) + 0) + 1)" />
    <mutant id="mutant_124" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 1)" to="(((pathOffset) + 1) + 1)" />
    <mutant id="mutant_120" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((getNameLength()) == 2) &amp;&amp; (isTree())" to="!(((getNameLength()) == 2) &amp;&amp; (isTree()))" />
    <mutant id="mutant_136" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 2" to="(indexOfStartBracket + 2) + 1" />
    <mutant id="mutant_137" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 2" to="(indexOfStartBracket + 2) * -1" />
    <mutant id="mutant_138" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 2" to="(indexOfStartBracket + 2) - 1" />
    <mutant id="mutant_139" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(indexOfStartBracket + 1)" to="((indexOfStartBracket + 1) - 1)" />
    <mutant id="mutant_2198" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="tokenBegin + 1" to="(tokenBegin + 1) * -1" />
    <mutant id="mutant_2199" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="tokenBegin + 1" to="(tokenBegin + 1) + 1" />
    <mutant id="mutant_2196" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="(lineEnd + 1)" to="((lineEnd + 1) * -1)" />
    <mutant id="mutant_2197" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="tokenBegin + 1" to="(tokenBegin + 1) - 1" />
    <mutant id="mutant_132" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="(((getNameLength()) == 2) &amp;&amp; (isHex())) &amp;&amp; (isTree())" to="!((((getNameLength()) == 2) &amp;&amp; (isHex())) &amp;&amp; (isTree()))" />
    <mutant id="mutant_133" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 1" to="(indexOfStartBracket + 1) - 1" />
    <mutant id="mutant_134" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 1" to="(indexOfStartBracket + 1) + 1" />
    <mutant id="mutant_135" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 1" to="(indexOfStartBracket + 1) * -1" />
    <mutant id="mutant_130" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathLen) == ((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))) &amp;&amp; (isHex())" to="!(((pathLen) == ((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))) &amp;&amp; (isHex()))" />
    <mutant id="mutant_131" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="(((getNameLength()) == 2) &amp;&amp; (isHex()))" to="(!(((getNameLength()) == 2) &amp;&amp; (isHex())))" />
    <mutant id="mutant_147" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStartIndex + 2)" to="((classStartIndex + 2) - 1)" />
    <mutant id="mutant_148" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStartIndex + 2)" to="((classStartIndex + 2) + 1)" />
    <mutant id="mutant_149" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="classEndIndex + 2" to="(classEndIndex + 2) + 1" />
    <mutant id="mutant_2194" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="(lineEnd + 1)" to="((lineEnd + 1) - 1)" />
    <mutant id="mutant_2195" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="(lineEnd + 1)" to="((lineEnd + 1) + 1)" />
    <mutant id="mutant_2192" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(1 + lineEnd)" to="((1 + lineEnd) - 1)" />
    <mutant id="mutant_2193" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(1 + lineEnd)" to="((1 + lineEnd) * -1)" />
    <mutant id="mutant_2190" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="(((nextSpace - tokenBegin) - 1) - 1)" />
    <mutant id="mutant_2191" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(1 + lineEnd)" to="((1 + lineEnd) + 1)" />
    <mutant id="mutant_2189" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="(((nextSpace - tokenBegin) - 1) * -1)" />
    <mutant id="mutant_2187" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="((nextSpace - tokenBegin) - 1)" />
    <mutant id="mutant_2188" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="(((nextSpace - tokenBegin) - 1) + 1)" />
    <mutant id="mutant_2185" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="((nextSpace - tokenBegin) * -1)" />
    <mutant id="mutant_2186" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="((nextSpace - tokenBegin) + 1)" />
    <mutant id="mutant_143" viable="false" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStart.charAt(1)) + &quot;]&quot;" to="((classStart.charAt(1)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_144" viable="false" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStart.charAt(1)) + &quot;]&quot;" to="((classStart.charAt(1)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_145" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStart.charAt(1)) + &quot;]&quot;" to="((classStart.charAt(1)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_146" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStartIndex + 2)" to="((classStartIndex + 2) * -1)" />
    <mutant id="mutant_140" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(indexOfStartBracket + 1)" to="((indexOfStartBracket + 1) + 1)" />
    <mutant id="mutant_141" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(indexOfStartBracket + 1)" to="((indexOfStartBracket + 1) * -1)" />
    <mutant id="mutant_142" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="foundCharClass &amp;&amp; ((charClassStartMatcher.start()) &lt; possibleGroupEnd)" to="!(foundCharClass &amp;&amp; ((charClassStartMatcher.start()) &lt; possibleGroupEnd))" />
    <mutant id="mutant_158" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="groupEnd + 1" to="(groupEnd + 1) + 1" />
    <mutant id="mutant_159" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="groupEnd + 1" to="(groupEnd + 1) * -1" />
    <mutant id="mutant_2183" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="(((nextSpace - tokenBegin) - 1) * -1)" />
    <mutant id="mutant_2184" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="(((nextSpace - tokenBegin) - 1) - 1)" />
    <mutant id="mutant_2181" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="((nextSpace - tokenBegin) - 1)" />
    <mutant id="mutant_2182" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="(((nextSpace - tokenBegin) - 1) + 1)" />
    <mutant id="mutant_2180" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="((nextSpace - tokenBegin) + 1)" />
    <mutant id="mutant_2178" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(tokenCount &lt; 3) &amp;&amp; (nextSpace &lt; lineEnd)" to="!((tokenCount &lt; 3) &amp;&amp; (nextSpace &lt; lineEnd))" />
    <mutant id="mutant_2179" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="((nextSpace - tokenBegin) * -1)" />
    <mutant id="mutant_2176" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(1 + lineEnd)" to="((1 + lineEnd) - 1)" />
    <mutant id="mutant_2177" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(1 + lineEnd)" to="((1 + lineEnd) * -1)" />
    <mutant id="mutant_2174" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(lineEnd &gt;= 0) &amp;&amp; ((buf[lineEnd]) == '\r')" to="!((lineEnd &gt;= 0) &amp;&amp; ((buf[lineEnd]) == '\r'))" />
    <mutant id="mutant_2175" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(1 + lineEnd)" to="((1 + lineEnd) + 1)" />
    <mutant id="mutant_154" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.createHeadsStartValues(java.lang.String,java.lang.Character)" from="(allHeads.size()) - 1" to="((allHeads.size()) - 1) + 1" />
    <mutant id="mutant_155" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="(groupStart + 1)" to="((groupStart + 1) + 1)" />
    <mutant id="mutant_156" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="(groupStart + 1)" to="((groupStart + 1) * -1)" />
    <mutant id="mutant_157" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="(groupStart + 1)" to="((groupStart + 1) - 1)" />
    <mutant id="mutant_150" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="classEndIndex + 2" to="(classEndIndex + 2) * -1" />
    <mutant id="mutant_151" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="classEndIndex + 2" to="(classEndIndex + 2) - 1" />
    <mutant id="mutant_152" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.createHeadsStartValues(java.lang.String,java.lang.Character)" from="(allHeads.size()) - 1" to="((allHeads.size()) - 1) * -1" />
    <mutant id="mutant_153" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.createHeadsStartValues(java.lang.String,java.lang.Character)" from="(allHeads.size()) - 1" to="((allHeads.size()) - 1) - 1" />
    <mutant id="mutant_169" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="(((oldPath) + &quot;-&gt;&quot;) - 1)" />
    <mutant id="mutant_9641" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_NEW.length))" to="((ptr + (FileHeader.RENAME_NEW.length)) - 1)" />
    <mutant id="mutant_9642" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_FROM.length))" to="((ptr + (FileHeader.RENAME_FROM.length)) + 1)" />
    <mutant id="mutant_8311" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified % 1000" to="(cacheLastModified % 1000) * -1" />
    <mutant id="mutant_8310" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified % 1000" to="(cacheLastModified % 1000) + 1" />
    <mutant id="mutant_9640" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_NEW.length))" to="((ptr + (FileHeader.RENAME_NEW.length)) * -1)" />
    <mutant id="mutant_8309" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified % 1000" to="(cacheLastModified % 1000) - 1" />
    <mutant id="mutant_160" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="groupEnd + 1" to="(groupEnd + 1) - 1" />
    <mutant id="mutant_165" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((e.size()) - 1)" to="(((e.size()) - 1) - 1)" />
    <mutant id="mutant_8302" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.idBuffer()" from="(ent != null) &amp;&amp; ((compareMetadata(ent)) == (WorkingTreeIterator.MetadataDiff.EQUAL))" to="!((ent != null) &amp;&amp; ((compareMetadata(ent)) == (WorkingTreeIterator.MetadataDiff.EQUAL)))" />
    <mutant id="mutant_9634" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_TO.length))" to="((ptr + (FileHeader.COPY_TO.length)) * -1)" />
    <mutant id="mutant_166" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((e.size()) - 1)" to="(((e.size()) - 1) * -1)" />
    <mutant id="mutant_8301" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="(bufn - p)" to="((bufn - p) - 1)" />
    <mutant id="mutant_9635" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_TO.length))" to="((ptr + (FileHeader.COPY_TO.length)) - 1)" />
    <mutant id="mutant_167" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((last.endB) &lt; (b.size())) &amp;&amp; (cmp.equals(b, last.beginB, b, last.endB))" to="!(((last.endB) &lt; (b.size())) &amp;&amp; (cmp.equals(b, last.beginB, b, last.endB)))" />
    <mutant id="mutant_8304" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator)" from="((FileMode.EXECUTABLE_FILE) == wtMode) &amp;&amp; ((FileMode.REGULAR_FILE) == iMode)" to="!(((FileMode.EXECUTABLE_FILE) == wtMode) &amp;&amp; ((FileMode.REGULAR_FILE) == iMode))" />
    <mutant id="mutant_9632" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_FROM.length))" to="((ptr + (FileHeader.COPY_FROM.length)) - 1)" />
    <mutant id="mutant_168" viable="true" in="org.eclipse.jgit.diff.DiffConfig.parseRenameDetectionType(java.lang.String)" from="(StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPY, renameString)) || (StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPIES, renameString))" to="!((StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPY, renameString)) || (StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPIES, renameString)))" />
    <mutant id="mutant_8303" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator)" from="((FileMode.REGULAR_FILE) == wtMode) &amp;&amp; ((FileMode.EXECUTABLE_FILE) == iMode)" to="!(((FileMode.REGULAR_FILE) == wtMode) &amp;&amp; ((FileMode.EXECUTABLE_FILE) == iMode))" />
    <mutant id="mutant_9633" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_TO.length))" to="((ptr + (FileHeader.COPY_TO.length)) + 1)" />
    <mutant id="mutant_161" viable="true" in="org.eclipse.jgit.fnmatch.GroupHead$CharacterRange.matches(char)" from="((start) &lt;= c) &amp;&amp; (c &lt;= (end))" to="!(((start) &lt;= c) &amp;&amp; (c &lt;= (end)))" />
    <mutant id="mutant_8306" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified % 1000" to="(fileLastModified % 1000) - 1" />
    <mutant id="mutant_9638" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_OLD.length))" to="((ptr + (FileHeader.RENAME_OLD.length)) - 1)" />
    <mutant id="mutant_162" viable="true" in="org.eclipse.jgit.fnmatch.GroupHead(java.lang.String,java.lang.String)" from="((characterClass.length()) == 3) &amp;&amp; ((characterClass.charAt(1)) == '-')" to="!(((characterClass.length()) == 3) &amp;&amp; ((characterClass.charAt(1)) == '-'))" />
    <mutant id="mutant_8305" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="(!(entry.isSmudged())) &amp;&amp; ((entry.getLength()) != ((int)(getEntryLength())))" to="!((!(entry.isSmudged())) &amp;&amp; ((entry.getLength()) != ((int)(getEntryLength()))))" />
    <mutant id="mutant_9639" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_NEW.length))" to="((ptr + (FileHeader.RENAME_NEW.length)) + 1)" />
    <mutant id="mutant_163" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((region.getLengthA()) == 1) &amp;&amp; ((region.getLengthB()) == 1)" to="!(((region.getLengthA()) == 1) &amp;&amp; ((region.getLengthB()) == 1))" />
    <mutant id="mutant_8308" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified % 1000" to="(fileLastModified % 1000) + 1" />
    <mutant id="mutant_9636" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_OLD.length))" to="((ptr + (FileHeader.RENAME_OLD.length)) + 1)" />
    <mutant id="mutant_164" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((e.size()) - 1)" to="(((e.size()) - 1) + 1)" />
    <mutant id="mutant_8307" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified % 1000" to="(fileLastModified % 1000) * -1" />
    <mutant id="mutant_9637" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_OLD.length))" to="((ptr + (FileHeader.RENAME_OLD.length)) * -1)" />
    <mutant id="mutant_9630" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_FROM.length))" to="((ptr + (FileHeader.COPY_FROM.length)) + 1)" />
    <mutant id="mutant_9631" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_FROM.length))" to="((ptr + (FileHeader.COPY_FROM.length)) * -1)" />
    <mutant id="mutant_8300" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="(bufn - p)" to="((bufn - p) + 1)" />
    <mutant id="mutant_170" viable="true" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="(((oldPath) + &quot;-&gt;&quot;) + 1)" />
    <mutant id="mutant_9629" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DELETED_FILE_MODE.length))" to="((ptr + (FileHeader.DELETED_FILE_MODE.length)) - 1)" />
    <mutant id="mutant_171" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="(((oldPath) + &quot;-&gt;&quot;) * -1)" />
    <mutant id="mutant_176" viable="true" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="(((oldPath) + &quot;-&gt;&quot;) + 1)" />
    <mutant id="mutant_9623" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.OLD_MODE.length))" to="((ptr + (FileHeader.OLD_MODE.length)) - 1)" />
    <mutant id="mutant_177" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="(((oldPath) + &quot;-&gt;&quot;) * -1)" />
    <mutant id="mutant_9624" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.NEW_MODE.length))" to="((ptr + (FileHeader.NEW_MODE.length)) + 1)" />
    <mutant id="mutant_178" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="((((oldPath) + &quot;-&gt;&quot;) + (newPath)) - 1)" />
    <mutant id="mutant_9621" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.OLD_MODE.length))" to="((ptr + (FileHeader.OLD_MODE.length)) + 1)" />
    <mutant id="mutant_179" viable="true" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="((((oldPath) + &quot;-&gt;&quot;) + (newPath)) + 1)" />
    <mutant id="mutant_9622" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.OLD_MODE.length))" to="((ptr + (FileHeader.OLD_MODE.length)) * -1)" />
    <mutant id="mutant_172" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="((((oldPath) + &quot;-&gt;&quot;) + (newPath)) - 1)" />
    <mutant id="mutant_9627" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DELETED_FILE_MODE.length))" to="((ptr + (FileHeader.DELETED_FILE_MODE.length)) + 1)" />
    <mutant id="mutant_173" viable="true" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="((((oldPath) + &quot;-&gt;&quot;) + (newPath)) + 1)" />
    <mutant id="mutant_9628" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DELETED_FILE_MODE.length))" to="((ptr + (FileHeader.DELETED_FILE_MODE.length)) * -1)" />
    <mutant id="mutant_174" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="((((oldPath) + &quot;-&gt;&quot;) + (newPath)) * -1)" />
    <mutant id="mutant_9625" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.NEW_MODE.length))" to="((ptr + (FileHeader.NEW_MODE.length)) * -1)" />
    <mutant id="mutant_175" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="(((oldPath) + &quot;-&gt;&quot;) - 1)" />
    <mutant id="mutant_9626" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.NEW_MODE.length))" to="((ptr + (FileHeader.NEW_MODE.length)) - 1)" />
    <mutant id="mutant_9620" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="((sp - 1) - 1)" />
    <mutant id="mutant_180" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="((((oldPath) + &quot;-&gt;&quot;) + (newPath)) * -1)" />
    <mutant id="mutant_181" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="includeTrees &amp;&amp; (walk.isRecursive())" to="!(includeTrees &amp;&amp; (walk.isRecursive()))" />
    <mutant id="mutant_9618" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="((sp - 1) + 1)" />
    <mutant id="mutant_182" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="(markTreeFilters != null) &amp;&amp; ((markTreeFilters.length) &gt; 0)" to="!((markTreeFilters != null) &amp;&amp; ((markTreeFilters.length) &gt; 0))" />
    <mutant id="mutant_9619" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="((sp - 1) * -1)" />
    <mutant id="mutant_187" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="((e.get(i).getBeginA()) - (e.get((i - 1)).getEndA()))" to="(((e.get(i).getBeginA()) - (e.get((i - 1)).getEndA())) * -1)" />
    <mutant id="mutant_9612" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 2)" to="((sp - 2) * -1)" />
    <mutant id="mutant_188" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="((e.get(i).getBeginA()) - (e.get((i - 1)).getEndA()))" to="(((e.get(i).getBeginA()) - (e.get((i - 1)).getEndA())) + 1)" />
    <mutant id="mutant_9613" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 2)" to="((sp - 2) - 1)" />
    <mutant id="mutant_189" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="((e.get(i).getBeginA()) - (e.get((i - 1)).getEndA()))" to="(((e.get(i).getBeginA()) - (e.get((i - 1)).getEndA())) - 1)" />
    <mutant id="mutant_9610" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(eol - 1)" to="((eol - 1) - 1)" />
    <mutant id="mutant_9611" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(eol - 1)" to="((eol - 1) * -1)" />
    <mutant id="mutant_183" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="includeTrees &amp;&amp; (walk.isSubtree())" to="!(includeTrees &amp;&amp; (walk.isSubtree()))" />
    <mutant id="mutant_9616" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="((sp - 1) * -1)" />
    <mutant id="mutant_184" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_9617" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="((sp - 1) - 1)" />
    <mutant id="mutant_185" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_9614" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 2)" to="((sp - 2) + 1)" />
    <mutant id="mutant_186" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_9615" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="((sp - 1) + 1)" />
    <mutant id="mutant_190" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(2 * (context))" to="((2 * (context)) + 1)" />
    <mutant id="mutant_9609" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(eol - 1)" to="((eol - 1) + 1)" />
    <mutant id="mutant_191" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(2 * (context))" to="((2 * (context)) - 1)" />
    <mutant id="mutant_192" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(2 * (context))" to="((2 * (context)) * -1)" />
    <mutant id="mutant_9607" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="((sp - 1) * -1)" />
    <mutant id="mutant_193" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_9608" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="((sp - 1) - 1)" />
    <mutant id="mutant_198" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="((e.get(i).getBeginB()) - (e.get((i - 1)).getEndB()))" to="(((e.get(i).getBeginB()) - (e.get((i - 1)).getEndB())) - 1)" />
    <mutant id="mutant_9601" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3)" to="((ptr - 3) + 1)" />
    <mutant id="mutant_199" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(2 * (context))" to="((2 * (context)) + 1)" />
    <mutant id="mutant_9602" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3)" to="((ptr - 3) * -1)" />
    <mutant id="mutant_9600" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3)" to="((ptr - 3) - 1)" />
    <mutant id="mutant_194" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_9605" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3) - start" to="((ptr - 3) - start) * -1" />
    <mutant id="mutant_195" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_9606" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="((sp - 1) + 1)" />
    <mutant id="mutant_196" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="((e.get(i).getBeginB()) - (e.get((i - 1)).getEndB()))" to="(((e.get(i).getBeginB()) - (e.get((i - 1)).getEndB())) * -1)" />
    <mutant id="mutant_9603" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3) - start" to="((ptr - 3) - start) - 1" />
    <mutant id="mutant_197" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="((e.get(i).getBeginB()) - (e.get((i - 1)).getEndB()))" to="(((e.get(i).getBeginB()) - (e.get((i - 1)).getEndB())) + 1)" />
    <mutant id="mutant_9604" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3) - start" to="((ptr - 3) - start) + 1" />
    <mutant id="mutant_9681" viable="true" in="org.eclipse.jgit.patch.FileHeader.extractFileLines(java.nio.charset.Charset[])" from="(getParentCount()) + 1" to="((getParentCount()) + 1) - 1" />
    <mutant id="mutant_9682" viable="true" in="org.eclipse.jgit.patch.FileHeader.extractFileLines(java.nio.charset.Charset[])" from="(getParentCount()) + 1" to="((getParentCount()) + 1) + 1" />
    <mutant id="mutant_7020" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="((status + &quot; &quot;) + (conn.getResponseMessage()))" to="(((status + &quot; &quot;) + (conn.getResponseMessage())) - 1)" />
    <mutant id="mutant_8351" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2))" to="((myLaneX - (dotSize / 2)) - 1)" />
    <mutant id="mutant_8350" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2))" to="((myLaneX - (dotSize / 2)) * -1)" />
    <mutant id="mutant_9680" viable="true" in="org.eclipse.jgit.patch.FileHeader.extractFileLines(java.nio.charset.Charset[])" from="(getParentCount()) + 1" to="((getParentCount()) + 1) * -1" />
    <mutant id="mutant_7022" viable="false" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service)" to="((&quot;application/x-&quot; + service) - 1)" />
    <mutant id="mutant_8353" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2)) - 1" to="((myLaneX - (dotSize / 2)) - 1) + 1" />
    <mutant id="mutant_9685" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(end - 1)" to="((end - 1) - 1)" />
    <mutant id="mutant_7021" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="((status + &quot; &quot;) + (conn.getResponseMessage()))" to="(((status + &quot; &quot;) + (conn.getResponseMessage())) + 1)" />
    <mutant id="mutant_8352" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2)) - 1" to="((myLaneX - (dotSize / 2)) - 1) * -1" />
    <mutant id="mutant_9686" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(buf[ptr++]) - '0'" to="((buf[ptr++]) - '0') * -1" />
    <mutant id="mutant_7024" viable="false" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service)" to="((&quot;application/x-&quot; + service) * -1)" />
    <mutant id="mutant_8355" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize)" to="((h - dotSize) + 1)" />
    <mutant id="mutant_9683" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(end - 1)" to="((end - 1) * -1)" />
    <mutant id="mutant_7023" viable="true" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service)" to="((&quot;application/x-&quot; + service) + 1)" />
    <mutant id="mutant_8354" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2)) - 1" to="((myLaneX - (dotSize / 2)) - 1) - 1" />
    <mutant id="mutant_9684" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(end - 1)" to="((end - 1) + 1)" />
    <mutant id="mutant_7015" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-result&quot;" to="((&quot;application/x-&quot; + serviceName) + &quot;-result&quot;) + 1" />
    <mutant id="mutant_8346" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotSize / 2)" to="((dotSize / 2) * -1)" />
    <mutant id="mutant_9678" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="((tab - 1) + 1)" />
    <mutant id="mutant_7014" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-result&quot;" to="((&quot;application/x-&quot; + serviceName) + &quot;-result&quot;) * -1" />
    <mutant id="mutant_8345" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.LEFT_PAD) + ((AbstractPlotRenderer.LANE_WIDTH) * p)" to="((AbstractPlotRenderer.LEFT_PAD) + ((AbstractPlotRenderer.LANE_WIDTH) * p)) * -1" />
    <mutant id="mutant_9679" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="((tab - 1) * -1)" />
    <mutant id="mutant_7017" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="(status + &quot; &quot;)" to="((status + &quot; &quot;) * -1)" />
    <mutant id="mutant_8348" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotSize / 2)" to="((dotSize / 2) - 1)" />
    <mutant id="mutant_9676" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(ptr &lt; tab) &amp;&amp; ((buf[(tab - 1)]) != '\t')" to="!((ptr &lt; tab) &amp;&amp; ((buf[(tab - 1)]) != '\t'))" />
    <mutant id="mutant_7016" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="(status + &quot; &quot;)" to="((status + &quot; &quot;) - 1)" />
    <mutant id="mutant_8347" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotSize / 2)" to="((dotSize / 2) + 1)" />
    <mutant id="mutant_9677" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="((tab - 1) - 1)" />
    <mutant id="mutant_7019" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="((status + &quot; &quot;) + (conn.getResponseMessage()))" to="(((status + &quot; &quot;) + (conn.getResponseMessage())) * -1)" />
    <mutant id="mutant_7018" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="(status + &quot; &quot;)" to="((status + &quot; &quot;) + 1)" />
    <mutant id="mutant_8349" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2))" to="((myLaneX - (dotSize / 2)) + 1)" />
    <mutant id="mutant_9670" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(end - 1)" to="((end - 1) * -1)" />
    <mutant id="mutant_9671" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(end - 1)" to="((end - 1) + 1)" />
    <mutant id="mutant_8340" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) * p)" to="(((AbstractPlotRenderer.LANE_WIDTH) * p) - 1)" />
    <mutant id="mutant_7011" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="((&quot;application/x-&quot; + serviceName) - 1)" />
    <mutant id="mutant_8342" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) * p)" to="(((AbstractPlotRenderer.LANE_WIDTH) * p) + 1)" />
    <mutant id="mutant_9674" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="((tab - 1) + 1)" />
    <mutant id="mutant_7010" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="((&quot;application/x-&quot; + serviceName) * -1)" />
    <mutant id="mutant_8341" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) * p)" to="(((AbstractPlotRenderer.LANE_WIDTH) * p) * -1)" />
    <mutant id="mutant_9675" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="((tab - 1) * -1)" />
    <mutant id="mutant_7013" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-result&quot;" to="((&quot;application/x-&quot; + serviceName) + &quot;-result&quot;) - 1" />
    <mutant id="mutant_8344" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.LEFT_PAD) + ((AbstractPlotRenderer.LANE_WIDTH) * p)" to="((AbstractPlotRenderer.LEFT_PAD) + ((AbstractPlotRenderer.LANE_WIDTH) * p)) - 1" />
    <mutant id="mutant_9672" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(end - 1)" to="((end - 1) - 1)" />
    <mutant id="mutant_7012" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="((&quot;application/x-&quot; + serviceName) + 1)" />
    <mutant id="mutant_8343" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.LEFT_PAD) + ((AbstractPlotRenderer.LANE_WIDTH) * p)" to="((AbstractPlotRenderer.LEFT_PAD) + ((AbstractPlotRenderer.LANE_WIDTH) * p)) + 1" />
    <mutant id="mutant_9673" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="((tab - 1) - 1)" />
    <mutant id="mutant_7004" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="((&quot;application/x-&quot; + serviceName) * -1)" />
    <mutant id="mutant_8335" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) * -1)" />
    <mutant id="mutant_9667" viable="true" in="org.eclipse.jgit.patch.FileHeader.p1(java.lang.String)" from="(s + 1)" to="((s + 1) + 1)" />
    <mutant id="mutant_7003" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) + (c.getResponseMessage()))" to="((((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) + (c.getResponseMessage())) + 1)" />
    <mutant id="mutant_8334" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) + 1)" />
    <mutant id="mutant_9668" viable="true" in="org.eclipse.jgit.patch.FileHeader.p1(java.lang.String)" from="(s + 1)" to="((s + 1) * -1)" />
    <mutant id="mutant_7006" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="((&quot;application/x-&quot; + serviceName) + 1)" />
    <mutant id="mutant_8337" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.laneX(myLane)) + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.laneX(myLane)) + ((AbstractPlotRenderer.LANE_WIDTH) / 2)) + 1" />
    <mutant id="mutant_9665" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((endOffset) - (startOffset))" to="(((endOffset) - (startOffset)) * -1)" />
    <mutant id="mutant_7005" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="((&quot;application/x-&quot; + serviceName) - 1)" />
    <mutant id="mutant_8336" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) - 1)" />
    <mutant id="mutant_9666" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((endOffset) - (startOffset))" to="(((endOffset) - (startOffset)) + 1)" />
    <mutant id="mutant_7008" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-request&quot;" to="((&quot;application/x-&quot; + serviceName) + &quot;-request&quot;) * -1" />
    <mutant id="mutant_8339" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.laneX(myLane)) + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.laneX(myLane)) + ((AbstractPlotRenderer.LANE_WIDTH) / 2)) * -1" />
    <mutant id="mutant_7007" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-request&quot;" to="((&quot;application/x-&quot; + serviceName) + &quot;-request&quot;) - 1" />
    <mutant id="mutant_8338" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.laneX(myLane)) + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.laneX(myLane)) + ((AbstractPlotRenderer.LANE_WIDTH) / 2)) - 1" />
    <mutant id="mutant_9669" viable="true" in="org.eclipse.jgit.patch.FileHeader.p1(java.lang.String)" from="(s + 1)" to="((s + 1) - 1)" />
    <mutant id="mutant_7009" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-request&quot;" to="((&quot;application/x-&quot; + serviceName) + &quot;-request&quot;) + 1" />
    <mutant id="mutant_9660" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="(charsetGuess != null) &amp;&amp; ((charsetGuess.length) != ((getParentCount()) + 1))" to="!((charsetGuess != null) &amp;&amp; ((charsetGuess.length) != ((getParentCount()) + 1)))" />
    <mutant id="mutant_7000" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;)" to="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) * -1)" />
    <mutant id="mutant_8331" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.computeDotSize(int)" from="((int)((Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) * 0.5F))" to="((int)(((Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) * 0.5F))) * -1" />
    <mutant id="mutant_9663" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="(((getParentCount()) + 1) + 1)" />
    <mutant id="mutant_8330" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="(pathOffset) + nameLen" to="((pathOffset) + nameLen) + 1" />
    <mutant id="mutant_9664" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((endOffset) - (startOffset))" to="(((endOffset) - (startOffset)) - 1)" />
    <mutant id="mutant_7002" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) + (c.getResponseMessage()))" to="((((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) + (c.getResponseMessage())) * -1)" />
    <mutant id="mutant_8333" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.computeDotSize(int)" from="((int)((Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) * 0.5F))" to="((int)(((Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) * 0.5F))) - 1" />
    <mutant id="mutant_9661" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="(((getParentCount()) + 1) * -1)" />
    <mutant id="mutant_7001" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) + (c.getResponseMessage()))" to="((((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) + (c.getResponseMessage())) - 1)" />
    <mutant id="mutant_8332" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.computeDotSize(int)" from="((int)((Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) * 0.5F))" to="((int)(((Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) * 0.5F))) + 1" />
    <mutant id="mutant_9662" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="(((getParentCount()) + 1) - 1)" />
    <mutant id="mutant_8324" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.init(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry[])" from="(&quot;.&quot;.equals(name)) || (&quot;..&quot;.equals(name))" to="!((&quot;.&quot;.equals(name)) || (&quot;..&quot;.equals(name)))" />
    <mutant id="mutant_9656" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.INDEX.length))" to="((ptr + (FileHeader.INDEX.length)) - 1)" />
    <mutant id="mutant_8323" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="(cacheLastModified - cacheMillis) * -1" />
    <mutant id="mutant_9657" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="(((getParentCount()) + 1) * -1)" />
    <mutant id="mutant_8326" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="((pathOffset) + nameLen)" to="(((pathOffset) + nameLen) - 1)" />
    <mutant id="mutant_9654" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.INDEX.length))" to="((ptr + (FileHeader.INDEX.length)) + 1)" />
    <mutant id="mutant_8325" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="((pathOffset) + nameLen)" to="(((pathOffset) + nameLen) * -1)" />
    <mutant id="mutant_9655" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.INDEX.length))" to="((ptr + (FileHeader.INDEX.length)) * -1)" />
    <mutant id="mutant_8328" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="(pathOffset) + nameLen" to="((pathOffset) + nameLen) * -1" />
    <mutant id="mutant_8327" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="((pathOffset) + nameLen)" to="(((pathOffset) + nameLen) + 1)" />
    <mutant id="mutant_9658" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="(((getParentCount()) + 1) - 1)" />
    <mutant id="mutant_8329" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="(pathOffset) + nameLen" to="((pathOffset) + nameLen) - 1" />
    <mutant id="mutant_9659" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="(((getParentCount()) + 1) + 1)" />
    <mutant id="mutant_8320" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="(fileLastModified - lastModifiedMillis) - 1" />
    <mutant id="mutant_9652" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DISSIMILARITY_INDEX.length))" to="((ptr + (FileHeader.DISSIMILARITY_INDEX.length)) * -1)" />
    <mutant id="mutant_9653" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DISSIMILARITY_INDEX.length))" to="((ptr + (FileHeader.DISSIMILARITY_INDEX.length)) - 1)" />
    <mutant id="mutant_8322" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="(cacheLastModified - cacheMillis) - 1" />
    <mutant id="mutant_9650" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.SIMILARITY_INDEX.length))" to="((ptr + (FileHeader.SIMILARITY_INDEX.length)) - 1)" />
    <mutant id="mutant_8321" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="(cacheLastModified - cacheMillis) + 1" />
    <mutant id="mutant_9651" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DISSIMILARITY_INDEX.length))" to="((ptr + (FileHeader.DISSIMILARITY_INDEX.length)) + 1)" />
    <mutant id="mutant_8313" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="(fileLastModified - lastModifiedMillis) + 1" />
    <mutant id="mutant_9645" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_TO.length))" to="((ptr + (FileHeader.RENAME_TO.length)) + 1)" />
    <mutant id="mutant_8312" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="(fileLastModified - lastModifiedMillis) * -1" />
    <mutant id="mutant_9646" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_TO.length))" to="((ptr + (FileHeader.RENAME_TO.length)) * -1)" />
    <mutant id="mutant_8315" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="(cacheLastModified - cacheMillis) + 1" />
    <mutant id="mutant_9643" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_FROM.length))" to="((ptr + (FileHeader.RENAME_FROM.length)) * -1)" />
    <mutant id="mutant_8314" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="(fileLastModified - lastModifiedMillis) - 1" />
    <mutant id="mutant_9644" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_FROM.length))" to="((ptr + (FileHeader.RENAME_FROM.length)) - 1)" />
    <mutant id="mutant_8317" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="(cacheLastModified - cacheMillis) * -1" />
    <mutant id="mutant_9649" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.SIMILARITY_INDEX.length))" to="((ptr + (FileHeader.SIMILARITY_INDEX.length)) * -1)" />
    <mutant id="mutant_8316" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="(cacheLastModified - cacheMillis) - 1" />
    <mutant id="mutant_8319" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="(fileLastModified - lastModifiedMillis) + 1" />
    <mutant id="mutant_9647" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_TO.length))" to="((ptr + (FileHeader.RENAME_TO.length)) - 1)" />
    <mutant id="mutant_8318" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="(fileLastModified - lastModifiedMillis) * -1" />
    <mutant id="mutant_9648" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.SIMILARITY_INDEX.length))" to="((ptr + (FileHeader.SIMILARITY_INDEX.length)) + 1)" />
    <mutant id="mutant_7062" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="(!(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme())))))" />
    <mutant id="mutant_8393" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) + 1)" />
    <mutant id="mutant_7061" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null))" to="(!((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)))" />
    <mutant id="mutant_8392" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) * -1)" />
    <mutant id="mutant_7064" viable="true" in="org.eclipse.jgit.transport.TransportLocal.openFetch()" from="(!(&quot;git-upload-pack&quot;.equals(up))) &amp;&amp; (!(&quot;git upload-pack&quot;.equals(up)))" to="!((!(&quot;git-upload-pack&quot;.equals(up))) &amp;&amp; (!(&quot;git upload-pack&quot;.equals(up))))" />
    <mutant id="mutant_8395" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="((myLaneX - cx) - 1)" />
    <mutant id="mutant_7063" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="!(((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme())))))" />
    <mutant id="mutant_8394" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="((myLaneX - cx) * -1)" />
    <mutant id="mutant_7066" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(!(getSchemes().isEmpty())) &amp;&amp; (!(getSchemes().contains(uri.getScheme())))" to="!((!(getSchemes().isEmpty())) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" />
    <mutant id="mutant_8397" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) + 1)" />
    <mutant id="mutant_7065" viable="true" in="org.eclipse.jgit.transport.TransportLocal.openPush()" from="(!(&quot;git-receive-pack&quot;.equals(rp))) &amp;&amp; (!(&quot;git receive-pack&quot;.equals(rp)))" to="!((!(&quot;git-receive-pack&quot;.equals(rp))) &amp;&amp; (!(&quot;git receive-pack&quot;.equals(rp))))" />
    <mutant id="mutant_8396" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="((myLaneX - cx) + 1)" />
    <mutant id="mutant_7068" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPass()) == null) || ((uri.getPass().length()) == 0)" to="!(((uri.getPass()) == null) || ((uri.getPass().length()) == 0))" />
    <mutant id="mutant_8399" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) - 1)" />
    <mutant id="mutant_7067" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getUser()) == null) || ((uri.getUser().length()) == 0)" to="!(((uri.getUser()) == null) || ((uri.getUser().length()) == 0))" />
    <mutant id="mutant_8398" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) * -1)" />
    <mutant id="mutant_7060" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" to="(!(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)))" />
    <mutant id="mutant_8391" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) - 1)" />
    <mutant id="mutant_8390" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) + 1)" />
    <mutant id="mutant_7059" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" to="(!((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)))" />
    <mutant id="mutant_7058" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" to="(!(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)))" />
    <mutant id="mutant_8389" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) * -1)" />
    <mutant id="mutant_7051" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="timeOut * 1000" to="(timeOut * 1000) + 1" />
    <mutant id="mutant_8382" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) - 1)" />
    <mutant id="mutant_7050" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="(!(http.sslVerify)) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol()))" to="!((!(http.sslVerify)) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol())))" />
    <mutant id="mutant_8381" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)) - 1" />
    <mutant id="mutant_7053" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="timeOut * 1000" to="(timeOut * 1000) * -1" />
    <mutant id="mutant_8384" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) + 1)" />
    <mutant id="mutant_7052" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="timeOut * 1000" to="(timeOut * 1000) - 1" />
    <mutant id="mutant_8383" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) * -1)" />
    <mutant id="mutant_7055" viable="false" in="org.eclipse.jgit.transport.TransportHttp.readSmartHeaders(java.io.InputStream,java.lang.String)" from="&quot;# service=&quot; + service" to="(&quot;# service=&quot; + service) * -1" />
    <mutant id="mutant_8386" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) * -1)" />
    <mutant id="mutant_7054" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="((this.headers) != null) &amp;&amp; (!(this.headers.isEmpty()))" to="!(((this.headers) != null) &amp;&amp; (!(this.headers.isEmpty())))" />
    <mutant id="mutant_8385" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) - 1)" />
    <mutant id="mutant_7057" viable="false" in="org.eclipse.jgit.transport.TransportHttp.readSmartHeaders(java.io.InputStream,java.lang.String)" from="&quot;# service=&quot; + service" to="(&quot;# service=&quot; + service) - 1" />
    <mutant id="mutant_8388" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) - 1)" />
    <mutant id="mutant_7056" viable="true" in="org.eclipse.jgit.transport.TransportHttp.readSmartHeaders(java.io.InputStream,java.lang.String)" from="&quot;# service=&quot; + service" to="(&quot;# service=&quot; + service) + 1" />
    <mutant id="mutant_8387" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="((h / 2) + 1)" />
    <mutant id="mutant_8380" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)) * -1" />
    <mutant id="mutant_7048" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;) + (conn.getResponseMessage())" to="((status + &quot; &quot;) + (conn.getResponseMessage())) - 1" />
    <mutant id="mutant_8379" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)) + 1" />
    <mutant id="mutant_7047" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;) + (conn.getResponseMessage())" to="((status + &quot; &quot;) + (conn.getResponseMessage())) * -1" />
    <mutant id="mutant_8378" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) - 1)" />
    <mutant id="mutant_7049" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;) + (conn.getResponseMessage())" to="((status + &quot; &quot;) + (conn.getResponseMessage())) + 1" />
    <mutant id="mutant_7040" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(exp + &quot;, */*&quot;)" to="((exp + &quot;, */*&quot;) + 1)" />
    <mutant id="mutant_8371" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) * -1)" />
    <mutant id="mutant_8370" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) + 1)" />
    <mutant id="mutant_7042" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((authMethod.getType()) == (HttpAuthMethod.Type.NONE)) &amp;&amp; ((conn.getHeaderField(org.eclipse.jgit.util.HttpSupport.HDR_WWW_AUTHENTICATE)) != null)" to="!(((authMethod.getType()) == (HttpAuthMethod.Type.NONE)) &amp;&amp; ((conn.getHeaderField(org.eclipse.jgit.util.HttpSupport.HDR_WWW_AUTHENTICATE)) != null))" />
    <mutant id="mutant_8373" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)) * -1" />
    <mutant id="mutant_7041" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(exp + &quot;, */*&quot;)" to="((exp + &quot;, */*&quot;) - 1)" />
    <mutant id="mutant_8372" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) - 1)" />
    <mutant id="mutant_7044" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;)" to="((status + &quot; &quot;) - 1)" />
    <mutant id="mutant_8375" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)) - 1" />
    <mutant id="mutant_7043" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(3 &lt; authAttempts) || (!(authMethod.authorize(uri, credentialsProvider)))" to="!((3 &lt; authAttempts) || (!(authMethod.authorize(uri, credentialsProvider))))" />
    <mutant id="mutant_8374" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)) + 1" />
    <mutant id="mutant_7046" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;)" to="((status + &quot; &quot;) + 1)" />
    <mutant id="mutant_8377" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) * -1)" />
    <mutant id="mutant_7045" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;)" to="((status + &quot; &quot;) * -1)" />
    <mutant id="mutant_8376" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(((AbstractPlotRenderer.LANE_WIDTH) / 2) + 1)" />
    <mutant id="mutant_7037" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="((&quot;application/x-&quot; + service) + &quot;-advertisement&quot;) - 1" />
    <mutant id="mutant_8368" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="((myLaneX - cx) - 1)" />
    <mutant id="mutant_7036" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="((&quot;application/x-&quot; + service) + &quot;-advertisement&quot;) * -1" />
    <mutant id="mutant_8367" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="((myLaneX - cx) * -1)" />
    <mutant id="mutant_7039" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(exp + &quot;, */*&quot;)" to="((exp + &quot;, */*&quot;) * -1)" />
    <mutant id="mutant_9698" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int,int)" from="(ptr + (FileHeader.NEW_FILE_MODE.length))" to="((ptr + (FileHeader.NEW_FILE_MODE.length)) + 1)" />
    <mutant id="mutant_7038" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="((&quot;application/x-&quot; + service) + &quot;-advertisement&quot;) + 1" />
    <mutant id="mutant_8369" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="((myLaneX - cx) + 1)" />
    <mutant id="mutant_9699" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int,int)" from="(ptr + (FileHeader.NEW_FILE_MODE.length))" to="((ptr + (FileHeader.NEW_FILE_MODE.length)) * -1)" />
    <mutant id="mutant_8360" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize) / 2" to="((h - dotSize) / 2) * -1" />
    <mutant id="mutant_9692" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="((dot2 + 1) + 1)" />
    <mutant id="mutant_9693" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="((dot2 + 1) - 1)" />
    <mutant id="mutant_7031" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((b.length()) - 1)" to="(((b.length()) - 1) + 1)" />
    <mutant id="mutant_8362" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h + dotSize)" to="((h + dotSize) + 1)" />
    <mutant id="mutant_9690" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="((dot2 - 1) * -1)" />
    <mutant id="mutant_7030" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((b.length()) - 1)" to="(((b.length()) - 1) * -1)" />
    <mutant id="mutant_8361" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h + dotSize)" to="((h + dotSize) - 1)" />
    <mutant id="mutant_9691" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="((dot2 - 1) - 1)" />
    <mutant id="mutant_7033" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service)" to="((&quot;application/x-&quot; + service) - 1)" />
    <mutant id="mutant_8364" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((h + dotSize) / 2)" to="(((h + dotSize) / 2) * -1)" />
    <mutant id="mutant_9696" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(mode - 1)" to="((mode - 1) + 1)" />
    <mutant id="mutant_7032" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((b.length()) - 1)" to="(((b.length()) - 1) - 1)" />
    <mutant id="mutant_8363" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h + dotSize)" to="((h + dotSize) * -1)" />
    <mutant id="mutant_9697" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(mode - 1)" to="((mode - 1) - 1)" />
    <mutant id="mutant_7035" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service)" to="((&quot;application/x-&quot; + service) * -1)" />
    <mutant id="mutant_8366" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((h + dotSize) / 2)" to="(((h + dotSize) / 2) + 1)" />
    <mutant id="mutant_9694" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="((dot2 + 1) * -1)" />
    <mutant id="mutant_7034" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service)" to="((&quot;application/x-&quot; + service) + 1)" />
    <mutant id="mutant_8365" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((h + dotSize) / 2)" to="(((h + dotSize) / 2) - 1)" />
    <mutant id="mutant_9695" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(mode - 1)" to="((mode - 1) * -1)" />
    <mutant id="mutant_7026" viable="false" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="((&quot;application/x-&quot; + service) + &quot;-advertisement&quot;) - 1" />
    <mutant id="mutant_8357" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize)" to="((h - dotSize) * -1)" />
    <mutant id="mutant_9689" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="((dot2 - 1) + 1)" />
    <mutant id="mutant_7025" viable="false" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="((&quot;application/x-&quot; + service) + &quot;-advertisement&quot;) * -1" />
    <mutant id="mutant_8356" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize)" to="((h - dotSize) - 1)" />
    <mutant id="mutant_7028" viable="true" in="org.eclipse.jgit.transport.TransportHttp.newDumbConnection(java.io.InputStream)" from="(line != null) &amp;&amp; (line.startsWith(org.eclipse.jgit.internal.storage.file.RefDirectory.SYMREF))" to="!((line != null) &amp;&amp; (line.startsWith(org.eclipse.jgit.internal.storage.file.RefDirectory.SYMREF)))" />
    <mutant id="mutant_8359" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize) / 2" to="((h - dotSize) / 2) + 1" />
    <mutant id="mutant_9687" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(buf[ptr++]) - '0'" to="((buf[ptr++]) - '0') - 1" />
    <mutant id="mutant_7027" viable="true" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="((&quot;application/x-&quot; + service) + &quot;-advertisement&quot;) + 1" />
    <mutant id="mutant_8358" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize) / 2" to="((h - dotSize) / 2) - 1" />
    <mutant id="mutant_9688" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(buf[ptr++]) - '0'" to="((buf[ptr++]) - '0') + 1" />
    <mutant id="mutant_7029" viable="true" in="org.eclipse.jgit.transport.TransportHttp.newDumbConnection(java.io.InputStream)" from="(line != null) &amp;&amp; (ObjectId.isId(line))" to="!((line != null) &amp;&amp; (ObjectId.isId(line)))" />
    <mutant id="mutant_4821" viable="false" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="(name + &quot;/&quot;)" to="((name + &quot;/&quot;) - 1)" />
    <mutant id="mutant_4820" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="(name + &quot;/&quot;)" to="((name + &quot;/&quot;) + 1)" />
    <mutant id="mutant_4829" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.unregisterFormat(java.lang.String)" from="((old.refcnt) - 1)" to="(((old.refcnt) - 1) + 1)" />
    <mutant id="mutant_4828" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.unregisterFormat(java.lang.String)" from="((old.refcnt) - 1)" to="(((old.refcnt) - 1) * -1)" />
    <mutant id="mutant_4827" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.registerFormat(java.lang.String,org.eclipse.jgit.api.ArchiveCommand$Format)" from="((old.refcnt) + 1)" to="(((old.refcnt) + 1) * -1)" />
    <mutant id="mutant_4826" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.registerFormat(java.lang.String,org.eclipse.jgit.api.ArchiveCommand$Format)" from="((old.refcnt) + 1)" to="(((old.refcnt) + 1) + 1)" />
    <mutant id="mutant_4825" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.registerFormat(java.lang.String,org.eclipse.jgit.api.ArchiveCommand$Format)" from="((old.refcnt) + 1)" to="(((old.refcnt) + 1) - 1)" />
    <mutant id="mutant_4824" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.setFilename(java.lang.String)" from="(slash + 1)" to="((slash + 1) * -1)" />
    <mutant id="mutant_4823" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.setFilename(java.lang.String)" from="(slash + 1)" to="((slash + 1) - 1)" />
    <mutant id="mutant_4822" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.setFilename(java.lang.String)" from="(slash + 1)" to="((slash + 1) + 1)" />
    <mutant id="mutant_7095" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.loose(org.eclipse.jgit.lib.Ref)" from="(r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED))" to="!((r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED)))" />
    <mutant id="mutant_7094" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readRef(java.util.TreeMap,java.lang.String,java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + target)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + target) + 1)" />
    <mutant id="mutant_7097" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;)" to="((dir + &quot;/&quot;) - 1)" />
    <mutant id="mutant_7096" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(&quot;.&quot;.equals(n)) || (&quot;..&quot;.equals(n))" to="!((&quot;.&quot;.equals(n)) || (&quot;..&quot;.equals(n)))" />
    <mutant id="mutant_7099" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;)" to="((dir + &quot;/&quot;) + 1)" />
    <mutant id="mutant_7098" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;)" to="((dir + &quot;/&quot;) * -1)" />
    <mutant id="mutant_4819" viable="false" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="(name + &quot;/&quot;)" to="((name + &quot;/&quot;) * -1)" />
    <mutant id="mutant_7091" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;) * -1)" />
    <mutant id="mutant_7090" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;) - 1)" />
    <mutant id="mutant_7093" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readRef(java.util.TreeMap,java.lang.String,java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + target)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + target) * -1)" />
    <mutant id="mutant_7092" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readRef(java.util.TreeMap,java.lang.String,java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + target)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + target) - 1)" />
    <mutant id="mutant_4810" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((((hh.getNewStartLine()) - 1) + pos) + 1)" />
    <mutant id="mutant_4818" viable="false" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="pfx + (walk.getPathString())" to="(pfx + (walk.getPathString())) * -1" />
    <mutant id="mutant_4817" viable="false" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="pfx + (walk.getPathString())" to="(pfx + (walk.getPathString())) - 1" />
    <mutant id="mutant_4816" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="pfx + (walk.getPathString())" to="(pfx + (walk.getPathString())) + 1" />
    <mutant id="mutant_4815" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.replace(java.util.concurrent.ConcurrentMap,K,V,V)" from="(oldValue == null) &amp;&amp; (newValue == null)" to="!((oldValue == null) &amp;&amp; (newValue == null))" />
    <mutant id="mutant_4814" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((sb.length()) - 1)" to="(((sb.length()) - 1) - 1)" />
    <mutant id="mutant_4813" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((sb.length()) - 1)" to="(((sb.length()) - 1) + 1)" />
    <mutant id="mutant_4812" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((sb.length()) - 1)" to="(((sb.length()) - 1) * -1)" />
    <mutant id="mutant_4811" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((((hh.getNewStartLine()) - 1) + pos) - 1)" />
    <mutant id="mutant_7084" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB$1.compare(java.lang.String,java.lang.String)" from="(mtimes.get(o2).intValue()) - (mtimes.get(o1).intValue())" to="((mtimes.get(o2).intValue()) - (mtimes.get(o1).intValue())) * -1" />
    <mutant id="mutant_7083" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB$1.compare(java.lang.String,java.lang.String)" from="(mtimes.get(o2).intValue()) - (mtimes.get(o1).intValue())" to="((mtimes.get(o2).intValue()) - (mtimes.get(o1).intValue())) + 1" />
    <mutant id="mutant_7086" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD)) * -1)" />
    <mutant id="mutant_7085" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB$1.compare(java.lang.String,java.lang.String)" from="(mtimes.get(o2).intValue()) - (mtimes.get(o1).intValue())" to="((mtimes.get(o2).intValue()) - (mtimes.get(o1).intValue())) - 1" />
    <mutant id="mutant_7088" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD)) + 1)" />
    <mutant id="mutant_7087" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD)) - 1)" />
    <mutant id="mutant_4809" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((((hh.getNewStartLine()) - 1) + pos) * -1)" />
    <mutant id="mutant_4808" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(((hh.getNewStartLine()) - 1) * -1)" />
    <mutant id="mutant_7089" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;) + 1)" />
    <mutant id="mutant_7080" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="((n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;) + 1" />
    <mutant id="mutant_7082" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="((n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;) - 1" />
    <mutant id="mutant_7081" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="((n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;) * -1" />
    <mutant id="mutant_4807" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(((hh.getNewStartLine()) - 1) - 1)" />
    <mutant id="mutant_4806" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(((hh.getNewStartLine()) - 1) + 1)" />
    <mutant id="mutant_4805" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((((hh.getNewStartLine()) - 1) + pos) - 1)" />
    <mutant id="mutant_4804" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((((hh.getNewStartLine()) - 1) + pos) + 1)" />
    <mutant id="mutant_4803" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((((hh.getNewStartLine()) - 1) + pos) * -1)" />
    <mutant id="mutant_4802" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(((hh.getNewStartLine()) - 1) * -1)" />
    <mutant id="mutant_4801" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(((hh.getNewStartLine()) - 1) - 1)" />
    <mutant id="mutant_4800" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(((hh.getNewStartLine()) - 1) + 1)" />
    <mutant id="mutant_7073" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getHost()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.HOST)))" to="!(((uri.getHost()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.HOST))))" />
    <mutant id="mutant_7072" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPass()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PASS)))" to="!(((uri.getPass()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PASS))))" />
    <mutant id="mutant_7075" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPath()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PATH)))" to="!(((uri.getPath()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PATH))))" />
    <mutant id="mutant_7074" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPort()) &gt; 0) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PORT)))" to="!(((uri.getPort()) &gt; 0) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PORT))))" />
    <mutant id="mutant_7077" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="((n.length()) - 5)" to="(((n.length()) - 5) * -1)" />
    <mutant id="mutant_7076" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;)))" to="!((!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;))))" />
    <mutant id="mutant_7079" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="((n.length()) - 5)" to="(((n.length()) - 5) + 1)" />
    <mutant id="mutant_7078" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="((n.length()) - 5)" to="(((n.length()) - 5) - 1)" />
    <mutant id="mutant_7071" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getUser()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.USER)))" to="!(((uri.getUser()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.USER))))" />
    <mutant id="mutant_7070" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPath()) == null) || ((uri.getPath().length()) == 0)" to="!(((uri.getPath()) == null) || ((uri.getPath().length()) == 0))" />
    <mutant id="mutant_7069" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getHost()) == null) || ((uri.getHost().length()) == 0)" to="!(((uri.getHost()) == null) || ((uri.getHost().length()) == 0))" />
    <mutant id="mutant_2202" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token))" to="((&quot;Action[&quot; + (token)) + 1)" />
    <mutant id="mutant_3534" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="((int)((pos - (start)))) + 1" />
    <mutant id="mutant_4865" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((reflogPrefix) + &quot; &quot;)" to="(((reflogPrefix) + &quot; &quot;) + 1)" />
    <mutant id="mutant_2203" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token)) + &quot;]&quot;" to="((&quot;Action[&quot; + (token)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_3533" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(int,byte[],int,int)" from="((block.length) - p)" to="(((block.length) - p) * -1)" />
    <mutant id="mutant_4864" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((reflogPrefix) + &quot; &quot;)" to="(((reflogPrefix) + &quot; &quot;) * -1)" />
    <mutant id="mutant_2200" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token))" to="((&quot;Action[&quot; + (token)) * -1)" />
    <mutant id="mutant_3532" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(int,byte[],int,int)" from="((block.length) - p)" to="(((block.length) - p) - 1)" />
    <mutant id="mutant_4863" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="(((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())) - 1" />
    <mutant id="mutant_2201" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token))" to="((&quot;Action[&quot; + (token)) - 1)" />
    <mutant id="mutant_3531" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(int,byte[],int,int)" from="((block.length) - p)" to="(((block.length) - p) + 1)" />
    <mutant id="mutant_4862" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="(((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())) + 1" />
    <mutant id="mutant_3530" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.contains(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((pack) == want) &amp;&amp; ((start) &lt;= pos)) &amp;&amp; (pos &lt; (end))" to="!((((pack) == want) &amp;&amp; ((start) &lt;= pos)) &amp;&amp; (pos &lt; (end)))" />
    <mutant id="mutant_4861" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="(((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())) * -1" />
    <mutant id="mutant_4860" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="(((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) * -1)" />
    <mutant id="mutant_2208" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(&quot;Step[&quot; + (action))" to="((&quot;Step[&quot; + (action)) * -1)" />
    <mutant id="mutant_2209" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(&quot;Step[&quot; + (action))" to="((&quot;Step[&quot; + (action)) + 1)" />
    <mutant id="mutant_3539" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="((int)((pos - (start)))) - 1" />
    <mutant id="mutant_2206" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.parse(java.lang.String)" from="(action.token.equals(token)) || (action.shortToken.equals(token))" to="!((action.token.equals(token)) || (action.shortToken.equals(token)))" />
    <mutant id="mutant_3538" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="((int)((pos - (start)))) * -1" />
    <mutant id="mutant_4869" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="(((reflogPrefix) + &quot; &quot;) + (srcCommit.getShortMessage()))" to="((((reflogPrefix) + &quot; &quot;) + (srcCommit.getShortMessage())) * -1)" />
    <mutant id="mutant_2207" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(&quot;Step[&quot; + (action))" to="((&quot;Step[&quot; + (action)) - 1)" />
    <mutant id="mutant_3537" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="((int)((pos - (start)))) + 1" />
    <mutant id="mutant_4868" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="(((reflogPrefix) + &quot; &quot;) + (srcCommit.getShortMessage()))" to="((((reflogPrefix) + &quot; &quot;) + (srcCommit.getShortMessage())) - 1)" />
    <mutant id="mutant_2204" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token)) + &quot;]&quot;" to="((&quot;Action[&quot; + (token)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_3536" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="((int)((pos - (start)))) - 1" />
    <mutant id="mutant_4867" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="(((reflogPrefix) + &quot; &quot;) + (srcCommit.getShortMessage()))" to="((((reflogPrefix) + &quot; &quot;) + (srcCommit.getShortMessage())) + 1)" />
    <mutant id="mutant_2205" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token)) + &quot;]&quot;" to="((&quot;Action[&quot; + (token)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_3535" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="((int)((pos - (start)))) * -1" />
    <mutant id="mutant_4866" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((reflogPrefix) + &quot; &quot;)" to="(((reflogPrefix) + &quot; &quot;) - 1)" />
    <mutant id="mutant_3523" viable="false" in="?" from="32 - (DeltaBaseCache.TABLE_BITS)" to="(32 - (DeltaBaseCache.TABLE_BITS)) + 1" />
    <mutant id="mutant_4854" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="(((Constants.R_HEADS) + (name)) * -1)" />
    <mutant id="mutant_3522" viable="false" in="?" from="32 - (DeltaBaseCache.TABLE_BITS)" to="(32 - (DeltaBaseCache.TABLE_BITS)) - 1" />
    <mutant id="mutant_4853" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="(((Constants.R_HEADS) + (name)) + 1)" />
    <mutant id="mutant_3521" viable="false" in="?" from="32 - (DeltaBaseCache.TABLE_BITS)" to="(32 - (DeltaBaseCache.TABLE_BITS)) * -1" />
    <mutant id="mutant_4852" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan))" to="(!(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan)))" />
    <mutant id="mutant_3520" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.pin(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(w == null) || (!(w.contains(pack, position)))" to="!((w == null) || (!(w.contains(pack, position))))" />
    <mutant id="mutant_4851" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty()))" to="(!((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())))" />
    <mutant id="mutant_4850" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.checkOptions()" from="((checkoutStage) != null) &amp;&amp; (!(isCheckoutIndex()))" to="!(((checkoutStage) != null) &amp;&amp; (!(isCheckoutIndex())))" />
    <mutant id="mutant_3529" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.contains(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((pack) == want) &amp;&amp; ((start) &lt;= pos))" to="(!(((pack) == want) &amp;&amp; ((start) &lt;= pos)))" />
    <mutant id="mutant_3528" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long,byte[])" from="pos + (buf.length)" to="(pos + (buf.length)) - 1" />
    <mutant id="mutant_4859" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="(((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + 1)" />
    <mutant id="mutant_3527" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long,byte[])" from="pos + (buf.length)" to="(pos + (buf.length)) + 1" />
    <mutant id="mutant_4858" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="(((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) - 1)" />
    <mutant id="mutant_3526" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long,byte[])" from="pos + (buf.length)" to="(pos + (buf.length)) * -1" />
    <mutant id="mutant_4857" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan)) &amp;&amp; (((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" to="!((((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan)) &amp;&amp; (((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name)))))))" />
    <mutant id="mutant_3525" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.releaseMemory()" from="((curByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null)" to="!(((curByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null))" />
    <mutant id="mutant_4856" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" to="(!(((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name)))))))" />
    <mutant id="mutant_3524" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.get(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((e.offset) == position) &amp;&amp; (key.equals(e.pack))" to="!(((e.offset) == position) &amp;&amp; (key.equals(e.pack)))" />
    <mutant id="mutant_4855" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="(((Constants.R_HEADS) + (name)) - 1)" />
    <mutant id="mutant_3512" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="length - (12 + 20)" to="(length - (12 + 20)) - 1" />
    <mutant id="mutant_4843" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(ref != null) &amp;&amp; (!(ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" to="!((ref != null) &amp;&amp; (!(ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))))" />
    <mutant id="mutant_3511" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="length - (12 + 20)" to="(length - (12 + 20)) * -1" />
    <mutant id="mutant_4842" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((startPoint) == null) &amp;&amp; ((startCommit) == null)" to="!(((startPoint) == null) &amp;&amp; ((startCommit) == null))" />
    <mutant id="mutant_3510" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="(12 + 20)" to="((12 + 20) + 1)" />
    <mutant id="mutant_4841" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="&quot;checkout: moving from &quot; + shortHeadRef" to="(&quot;checkout: moving from &quot; + shortHeadRef) * -1" />
    <mutant id="mutant_4840" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="&quot;checkout: moving from &quot; + shortHeadRef" to="(&quot;checkout: moving from &quot; + shortHeadRef) + 1" />
    <mutant id="mutant_3519" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((window.size()) - ptr)" to="(((window.size()) - ptr) * -1)" />
    <mutant id="mutant_3518" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((window.size()) - ptr)" to="(((window.size()) - ptr) - 1)" />
    <mutant id="mutant_4849" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((refLogMessage + &quot; to &quot;) + toName)" to="(((refLogMessage + &quot; to &quot;) + toName) * -1)" />
    <mutant id="mutant_3517" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((window.size()) - ptr)" to="(((window.size()) - ptr) + 1)" />
    <mutant id="mutant_4848" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((refLogMessage + &quot; to &quot;) + toName)" to="(((refLogMessage + &quot; to &quot;) + toName) - 1)" />
    <mutant id="mutant_3516" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((int)(position - (window.start)))" to="((int)((position - (window.start)))) * -1" />
    <mutant id="mutant_4847" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((refLogMessage + &quot; to &quot;) + toName)" to="(((refLogMessage + &quot; to &quot;) + toName) + 1)" />
    <mutant id="mutant_3515" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((int)(position - (window.start)))" to="((int)((position - (window.start)))) - 1" />
    <mutant id="mutant_4846" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(refLogMessage + &quot; to &quot;)" to="((refLogMessage + &quot; to &quot;) + 1)" />
    <mutant id="mutant_3514" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((int)(position - (window.start)))" to="((int)((position - (window.start)))) + 1" />
    <mutant id="mutant_4845" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(refLogMessage + &quot; to &quot;)" to="((refLogMessage + &quot; to &quot;) * -1)" />
    <mutant id="mutant_3513" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="length - (12 + 20)" to="(length - (12 + 20)) + 1" />
    <mutant id="mutant_4844" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(refLogMessage + &quot; to &quot;)" to="((refLogMessage + &quot; to &quot;) - 1)" />
    <mutant id="mutant_3501" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(cnt - 1)" to="((cnt - 1) - 1)" />
    <mutant id="mutant_4832" viable="true" in="org.eclipse.jgit.api.BlameCommand.getRawText(java.io.File)" from="(&quot;Unknown autocrlf option &quot; + autoCRLF)" to="((&quot;Unknown autocrlf option &quot; + autoCRLF) + 1)" />
    <mutant id="mutant_3500" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(cnt - 1)" to="((cnt - 1) + 1)" />
    <mutant id="mutant_4831" viable="false" in="org.eclipse.jgit.api.BlameCommand.getRawText(java.io.File)" from="(&quot;Unknown autocrlf option &quot; + autoCRLF)" to="((&quot;Unknown autocrlf option &quot; + autoCRLF) * -1)" />
    <mutant id="mutant_4830" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.unregisterFormat(java.lang.String)" from="((old.refcnt) - 1)" to="(((old.refcnt) - 1) - 1)" />
    <mutant id="mutant_3509" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="(12 + 20)" to="((12 + 20) * -1)" />
    <mutant id="mutant_3508" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="(12 + 20)" to="((12 + 20) - 1)" />
    <mutant id="mutant_4839" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="&quot;checkout: moving from &quot; + shortHeadRef" to="(&quot;checkout: moving from &quot; + shortHeadRef) - 1" />
    <mutant id="mutant_3507" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(typeHint != (ObjectReader.OBJ_ANY)) &amp;&amp; ((ldr.getType()) != typeHint)" to="!((typeHint != (ObjectReader.OBJ_ANY)) &amp;&amp; ((ldr.getType()) != typeHint))" />
    <mutant id="mutant_4838" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(checkoutAllPaths) || (!(paths.isEmpty()))" to="!((checkoutAllPaths) || (!(paths.isEmpty())))" />
    <mutant id="mutant_3506" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="((window) instanceof org.eclipse.jgit.internal.storage.file.ByteArrayWindow) &amp;&amp; (window.contains(p, (pos + (cnt - 1))))" to="!(((window) instanceof org.eclipse.jgit.internal.storage.file.ByteArrayWindow) &amp;&amp; (window.contains(p, (pos + (cnt - 1)))))" />
    <mutant id="mutant_4837" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.getBranchName()" from="(Constants.R_HEADS) + (name)" to="((Constants.R_HEADS) + (name)) - 1" />
    <mutant id="mutant_3505" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(pos + (cnt - 1))" to="((pos + (cnt - 1)) - 1)" />
    <mutant id="mutant_4836" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.getBranchName()" from="(Constants.R_HEADS) + (name)" to="((Constants.R_HEADS) + (name)) * -1" />
    <mutant id="mutant_3504" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(pos + (cnt - 1))" to="((pos + (cnt - 1)) * -1)" />
    <mutant id="mutant_4835" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.getBranchName()" from="(Constants.R_HEADS) + (name)" to="((Constants.R_HEADS) + (name)) + 1" />
    <mutant id="mutant_3503" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(pos + (cnt - 1))" to="((pos + (cnt - 1)) + 1)" />
    <mutant id="mutant_4834" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.isCheckoutIndex()" from="((startCommit) == null) &amp;&amp; ((startPoint) == null)" to="!(((startCommit) == null) &amp;&amp; ((startPoint) == null))" />
    <mutant id="mutant_3502" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(cnt - 1)" to="((cnt - 1) * -1)" />
    <mutant id="mutant_4833" viable="false" in="org.eclipse.jgit.api.BlameCommand.getRawText(java.io.File)" from="(&quot;Unknown autocrlf option &quot; + autoCRLF)" to="((&quot;Unknown autocrlf option &quot; + autoCRLF) - 1)" />
    <mutant id="mutant_3581" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100) / (maxBytes)" to="(((getCurrentSize()) * 100) / (maxBytes)) * -1" />
    <mutant id="mutant_2250" viable="true" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="(lastSlash - 1)" to="((lastSlash - 1) + 1)" />
    <mutant id="mutant_3580" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100) / (maxBytes)" to="(((getCurrentSize()) * 100) / (maxBytes)) - 1" />
    <mutant id="mutant_2246" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)" to="(((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + 1" />
    <mutant id="mutant_3578" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100)" to="(((getCurrentSize()) * 100) - 1)" />
    <mutant id="mutant_2247" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(RebaseTodoLine.Action.COMMENT.equals(action)) &amp;&amp; (!(RebaseTodoLine.Action.COMMENT.equals(newAction)))" to="!((RebaseTodoLine.Action.COMMENT.equals(action)) &amp;&amp; (!(RebaseTodoLine.Action.COMMENT.equals(newAction))))" />
    <mutant id="mutant_3577" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100)" to="(((getCurrentSize()) * 100) + 1)" />
    <mutant id="mutant_2244" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)" to="(((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) * -1" />
    <mutant id="mutant_3576" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.lockFor(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (loadLocks.length))" to="((((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (loadLocks.length)) + 1)" />
    <mutant id="mutant_2245" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)" to="(((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) - 1" />
    <mutant id="mutant_3575" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.lockFor(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (loadLocks.length))" to="((((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (loadLocks.length)) - 1)" />
    <mutant id="mutant_2242" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;)" to="(((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) + 1)" />
    <mutant id="mutant_3574" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.lockFor(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (loadLocks.length))" to="((((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (loadLocks.length)) * -1)" />
    <mutant id="mutant_2243" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;)" to="(((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) * -1)" />
    <mutant id="mutant_3573" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="(((5 * (limit / wsz)) / 2) - 1)" />
    <mutant id="mutant_2240" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name()))" to="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + 1)" />
    <mutant id="mutant_3572" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="(((5 * (limit / wsz)) / 2) * -1)" />
    <mutant id="mutant_2241" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;)" to="(((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) - 1)" />
    <mutant id="mutant_3571" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="(((5 * (limit / wsz)) / 2) + 1)" />
    <mutant id="mutant_2248" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setComment(java.lang.String)" from="(newComment.contains(&quot;\n&quot;)) || (newComment.contains(&quot;\r&quot;))" to="!((newComment.contains(&quot;\n&quot;)) || (newComment.contains(&quot;\r&quot;)))" />
    <mutant id="mutant_2249" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setComment(java.lang.String)" from="((newComment.trim().length()) == 0) || (newComment.startsWith(&quot;#&quot;))" to="!(((newComment.trim().length()) == 0) || (newComment.startsWith(&quot;#&quot;)))" />
    <mutant id="mutant_3579" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100)" to="(((getCurrentSize()) * 100) * -1)" />
    <mutant id="mutant_3570" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(5 * (limit / wsz))" to="((5 * (limit / wsz)) * -1)" />
    <mutant id="mutant_2235" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((&quot;# &quot; + (action.token)) + &quot; &quot;)" to="(((&quot;# &quot; + (action.token)) + &quot; &quot;) - 1)" />
    <mutant id="mutant_3567" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(limit / wsz)" to="((limit / wsz) - 1)" />
    <mutant id="mutant_4898" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;" to="(((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) * -1" />
    <mutant id="mutant_2236" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((&quot;# &quot; + (action.token)) + &quot; &quot;)" to="(((&quot;# &quot; + (action.token)) + &quot; &quot;) + 1)" />
    <mutant id="mutant_3566" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(limit / wsz)" to="((limit / wsz) + 1)" />
    <mutant id="mutant_4897" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName()))" to="(((Constants.R_REMOTES) + (config.getName())) - 1)" />
    <mutant id="mutant_2233" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(&quot;# &quot; + (action.token))" to="((&quot;# &quot; + (action.token)) + 1)" />
    <mutant id="mutant_3565" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(limit / wsz)" to="((limit / wsz) * -1)" />
    <mutant id="mutant_4896" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName()))" to="(((Constants.R_REMOTES) + (config.getName())) * -1)" />
    <mutant id="mutant_2234" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(&quot;# &quot; + (action.token))" to="((&quot;# &quot; + (action.token)) * -1)" />
    <mutant id="mutant_3564" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.slot(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)) + 1" />
    <mutant id="mutant_4895" viable="true" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName()))" to="(((Constants.R_REMOTES) + (config.getName())) + 1)" />
    <mutant id="mutant_2231" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(!(RebaseTodoLine.Action.COMMENT.equals(action))) &amp;&amp; (RebaseTodoLine.Action.COMMENT.equals(newAction))" to="!((!(RebaseTodoLine.Action.COMMENT.equals(action))) &amp;&amp; (RebaseTodoLine.Action.COMMENT.equals(newAction)))" />
    <mutant id="mutant_3563" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.slot(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)) * -1" />
    <mutant id="mutant_4894" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((gitDir) != null) &amp;&amp; (gitDir.exists())) &amp;&amp; ((gitDir.listFiles().length) != 0)" to="!((((gitDir) != null) &amp;&amp; (gitDir.exists())) &amp;&amp; ((gitDir.listFiles().length) != 0))" />
    <mutant id="mutant_2232" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(&quot;# &quot; + (action.token))" to="((&quot;# &quot; + (action.token)) - 1)" />
    <mutant id="mutant_3562" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.slot(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)) - 1" />
    <mutant id="mutant_4893" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((gitDir) != null) &amp;&amp; (gitDir.exists()))" to="(!(((gitDir) != null) &amp;&amp; (gitDir.exists())))" />
    <mutant id="mutant_3561" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (blockSizeShift))))" to="(packHash + ((int)((off &gt;&gt;&gt; (blockSizeShift))))) + 1" />
    <mutant id="mutant_4892" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((directory) != null) &amp;&amp; (directory.exists())) &amp;&amp; ((directory.listFiles().length) != 0)" to="!((((directory) != null) &amp;&amp; (directory.exists())) &amp;&amp; ((directory.listFiles().length) != 0))" />
    <mutant id="mutant_2230" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) + &quot;]&quot;" to="((((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_3560" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (blockSizeShift))))" to="(packHash + ((int)((off &gt;&gt;&gt; (blockSizeShift))))) * -1" />
    <mutant id="mutant_4891" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((directory) != null) &amp;&amp; (directory.exists()))" to="(!(((directory) != null) &amp;&amp; (directory.exists())))" />
    <mutant id="mutant_2239" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name()))" to="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) - 1)" />
    <mutant id="mutant_2237" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((&quot;# &quot; + (action.token)) + &quot; &quot;)" to="(((&quot;# &quot; + (action.token)) + &quot; &quot;) * -1)" />
    <mutant id="mutant_3569" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(5 * (limit / wsz))" to="((5 * (limit / wsz)) - 1)" />
    <mutant id="mutant_2238" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name()))" to="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) * -1)" />
    <mutant id="mutant_3568" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(5 * (limit / wsz))" to="((5 * (limit / wsz)) + 1)" />
    <mutant id="mutant_4899" viable="true" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;" to="(((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) + 1" />
    <mutant id="mutant_4890" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="((directory) == null) &amp;&amp; ((gitDir) == null)" to="!(((directory) == null) &amp;&amp; ((gitDir) == null))" />
    <mutant id="mutant_2224" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;)" to="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) * -1)" />
    <mutant id="mutant_3556" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((long)((maxBytes) * (cfg.getStreamRatio())))" to="((long)(((maxBytes) * (cfg.getStreamRatio())))) - 1" />
    <mutant id="mutant_4887" viable="true" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="(((Constants.R_HEADS) + (Constants.MASTER)) + 1)" />
    <mutant id="mutant_2225" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment))" to="((((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) * -1)" />
    <mutant id="mutant_3555" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((long)((maxBytes) * (cfg.getStreamRatio())))" to="((long)(((maxBytes) * (cfg.getStreamRatio())))) * -1" />
    <mutant id="mutant_4886" viable="false" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="(((Constants.R_HEADS) + (Constants.MASTER)) - 1)" />
    <mutant id="mutant_2222" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;)" to="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + 1)" />
    <mutant id="mutant_3554" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((int)((tableSize) * 0.1))" to="((int)(((tableSize) * 0.1))) * -1" />
    <mutant id="mutant_4885" viable="true" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((branchesToClone) != null) &amp;&amp; ((branchesToClone.size()) &gt; 0)" to="!(((branchesToClone) != null) &amp;&amp; ((branchesToClone.size()) &gt; 0))" />
    <mutant id="mutant_2223" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;)" to="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) - 1)" />
    <mutant id="mutant_3553" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((int)((tableSize) * 0.1))" to="((int)(((tableSize) * 0.1))) - 1" />
    <mutant id="mutant_4884" viable="true" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="(((Constants.R_HEADS) + &quot;*&quot;) + 1)" />
    <mutant id="mutant_2220" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage))" to="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) - 1)" />
    <mutant id="mutant_3552" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((int)((tableSize) * 0.1))" to="((int)(((tableSize) * 0.1))) + 1" />
    <mutant id="mutant_4883" viable="false" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="(((Constants.R_HEADS) + &quot;*&quot;) - 1)" />
    <mutant id="mutant_2221" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage))" to="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + 1)" />
    <mutant id="mutant_3551" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) - 1)" />
    <mutant id="mutant_4882" viable="false" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="(((Constants.R_HEADS) + &quot;*&quot;) * -1)" />
    <mutant id="mutant_3550" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) * -1)" />
    <mutant id="mutant_4881" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="(exact &amp;&amp; (path.equals(ignored))) || ((!exact) &amp;&amp; (path.startsWith(ignored)))" to="!((exact &amp;&amp; (path.equals(ignored))) || ((!exact) &amp;&amp; (path.startsWith(ignored))))" />
    <mutant id="mutant_4880" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="((!exact) &amp;&amp; (path.startsWith(ignored)))" to="(!((!exact) &amp;&amp; (path.startsWith(ignored))))" />
    <mutant id="mutant_2228" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) + &quot;]&quot;" to="((((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_2229" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) + &quot;]&quot;" to="((((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_3559" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (blockSizeShift))))" to="(packHash + ((int)((off &gt;&gt;&gt; (blockSizeShift))))) - 1" />
    <mutant id="mutant_2226" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment))" to="((((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) - 1)" />
    <mutant id="mutant_3558" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.scanRef(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache$HashEntry,org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((r.pack) == pack) &amp;&amp; ((r.position) == position)" to="!(((r.pack) == pack) &amp;&amp; ((r.position) == position))" />
    <mutant id="mutant_4889" viable="true" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="(master != null) &amp;&amp; (master.getObjectId().equals(idHEAD.getObjectId()))" to="!((master != null) &amp;&amp; (master.getObjectId().equals(idHEAD.getObjectId())))" />
    <mutant id="mutant_2227" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment))" to="((((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) + 1)" />
    <mutant id="mutant_3557" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((long)((maxBytes) * (cfg.getStreamRatio())))" to="((long)(((maxBytes) * (cfg.getStreamRatio())))) + 1" />
    <mutant id="mutant_4888" viable="false" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="(((Constants.R_HEADS) + (Constants.MASTER)) * -1)" />
    <mutant id="mutant_2213" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit))" to="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) * -1)" />
    <mutant id="mutant_3545" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) - 1)" />
    <mutant id="mutant_4876" viable="false" in="org.eclipse.jgit.api.CleanCommand.call()" from="(dir + &quot;/&quot;)" to="((dir + &quot;/&quot;) - 1)" />
    <mutant id="mutant_2214" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit))" to="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) - 1)" />
    <mutant id="mutant_3544" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) * -1)" />
    <mutant id="mutant_4875" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(paths.isEmpty()) || (paths.contains(dir))" to="!((paths.isEmpty()) || (paths.contains(dir)))" />
    <mutant id="mutant_2211" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((&quot;Step[&quot; + (action)) + &quot;, &quot;)" to="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) - 1)" />
    <mutant id="mutant_3543" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) + 1)" />
    <mutant id="mutant_4874" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(paths.isEmpty()) || (paths.contains(file))" to="!((paths.isEmpty()) || (paths.contains(file)))" />
    <mutant id="mutant_2212" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((&quot;Step[&quot; + (action)) + &quot;, &quot;)" to="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) * -1)" />
    <mutant id="mutant_3542" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="(block.length) - ptr" to="((block.length) - ptr) * -1" />
    <mutant id="mutant_4873" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(fs.isFile(f)) || (fs.isSymLink(f))" to="!((fs.isFile(f)) || (fs.isSymLink(f)))" />
    <mutant id="mutant_3541" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="(block.length) - ptr" to="((block.length) - ptr) + 1" />
    <mutant id="mutant_4872" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.getParentCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk)" from="((mainlineParentNumber.intValue()) - 1)" to="(((mainlineParentNumber.intValue()) - 1) * -1)" />
    <mutant id="mutant_2210" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((&quot;Step[&quot; + (action)) + &quot;, &quot;)" to="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) + 1)" />
    <mutant id="mutant_3540" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="(block.length) - ptr" to="((block.length) - ptr) - 1" />
    <mutant id="mutant_4871" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.getParentCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk)" from="((mainlineParentNumber.intValue()) - 1)" to="(((mainlineParentNumber.intValue()) - 1) + 1)" />
    <mutant id="mutant_4870" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.getParentCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk)" from="((mainlineParentNumber.intValue()) - 1)" to="(((mainlineParentNumber.intValue()) - 1) - 1)" />
    <mutant id="mutant_2219" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage))" to="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) * -1)" />
    <mutant id="mutant_2217" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;)" to="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) * -1)" />
    <mutant id="mutant_3549" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(((int)((pos - (start)))) + 1)" />
    <mutant id="mutant_2218" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;)" to="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) - 1)" />
    <mutant id="mutant_3548" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="((int)((pos - (start)))) - 1" />
    <mutant id="mutant_4879" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="(exact &amp;&amp; (path.equals(ignored)))" to="(!(exact &amp;&amp; (path.equals(ignored))))" />
    <mutant id="mutant_2215" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit))" to="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + 1)" />
    <mutant id="mutant_3547" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="((int)((pos - (start)))) * -1" />
    <mutant id="mutant_4878" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(dir + &quot;/&quot;)" to="((dir + &quot;/&quot;) + 1)" />
    <mutant id="mutant_2216" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;)" to="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + 1)" />
    <mutant id="mutant_3546" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="((int)((pos - (start)))) + 1" />
    <mutant id="mutant_4877" viable="false" in="org.eclipse.jgit.api.CleanCommand.call()" from="(dir + &quot;/&quot;)" to="((dir + &quot;/&quot;) * -1)" />
    <mutant id="mutant_2051" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 16)" to="((si + 16) - 1)" />
    <mutant id="mutant_3383" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl(byte[],int)" from="(p1 - 1)" to="((p1 - 1) * -1)" />
    <mutant id="mutant_2052" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)])))" to="(!((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))))" />
    <mutant id="mutant_3382" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl(byte[],int)" from="(p1 - 1)" to="((p1 - 1) - 1)" />
    <mutant id="mutant_3381" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;) + strResult" to="((msg + &quot;: &quot;) + strResult) + 1" />
    <mutant id="mutant_2050" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 16)" to="((si + 16) + 1)" />
    <mutant id="mutant_3380" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;) + strResult" to="((msg + &quot;: &quot;) + strResult) - 1" />
    <mutant id="mutant_2048" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 16)" to="((fi + 16) * -1)" />
    <mutant id="mutant_2049" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 16)" to="((si + 16) * -1)" />
    <mutant id="mutant_3379" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;) + strResult" to="((msg + &quot;: &quot;) + strResult) * -1" />
    <mutant id="mutant_2046" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 16)" to="((fi + 16) + 1)" />
    <mutant id="mutant_3378" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;)" to="((msg + &quot;: &quot;) - 1)" />
    <mutant id="mutant_2047" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 16)" to="((fi + 16) - 1)" />
    <mutant id="mutant_3377" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;)" to="((msg + &quot;: &quot;) * -1)" />
    <mutant id="mutant_2044" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 15)" to="((si + 15) * -1)" />
    <mutant id="mutant_3376" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;)" to="((msg + &quot;: &quot;) + 1)" />
    <mutant id="mutant_2045" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)])))" to="(!(((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))))" />
    <mutant id="mutant_3375" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="(((RefDirectory.SYMREF) + target) + '\n')" to="((((RefDirectory.SYMREF) + target) + '\n') + 1)" />
    <mutant id="mutant_2042" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 15)" to="((si + 15) - 1)" />
    <mutant id="mutant_3374" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="(((RefDirectory.SYMREF) + target) + '\n')" to="((((RefDirectory.SYMREF) + target) + '\n') - 1)" />
    <mutant id="mutant_2043" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 15)" to="((si + 15) + 1)" />
    <mutant id="mutant_3373" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="(((RefDirectory.SYMREF) + target) + '\n')" to="((((RefDirectory.SYMREF) + target) + '\n') * -1)" />
    <mutant id="mutant_2040" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 15)" to="((fi + 15) - 1)" />
    <mutant id="mutant_3372" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="((RefDirectory.SYMREF) + target)" to="(((RefDirectory.SYMREF) + target) * -1)" />
    <mutant id="mutant_2041" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 15)" to="((fi + 15) + 1)" />
    <mutant id="mutant_3371" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="((RefDirectory.SYMREF) + target)" to="(((RefDirectory.SYMREF) + target) - 1)" />
    <mutant id="mutant_3370" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="((RefDirectory.SYMREF) + target)" to="(((RefDirectory.SYMREF) + target) + 1)" />
    <mutant id="mutant_2037" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 14)" to="((si + 14) * -1)" />
    <mutant id="mutant_3369" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.renameLog(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(RefDirectory.levelsIn(src.getName())) - 2" to="((RefDirectory.levelsIn(src.getName())) - 2) * -1" />
    <mutant id="mutant_2038" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)])))" to="(!((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))))" />
    <mutant id="mutant_3368" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.renameLog(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(RefDirectory.levelsIn(src.getName())) - 2" to="((RefDirectory.levelsIn(src.getName())) - 2) + 1" />
    <mutant id="mutant_4699" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="((prime * result) * -1)" />
    <mutant id="mutant_2035" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 14)" to="((si + 14) - 1)" />
    <mutant id="mutant_3367" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.renameLog(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(RefDirectory.levelsIn(src.getName())) - 2" to="((RefDirectory.levelsIn(src.getName())) - 2) - 1" />
    <mutant id="mutant_4698" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="((prime * result) + 1)" />
    <mutant id="mutant_2036" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 14)" to="((si + 14) + 1)" />
    <mutant id="mutant_3366" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.rename(java.io.File,java.io.File)" from="((dir.exists()) || (!(dir.mkdirs()))) &amp;&amp; (!(dir.isDirectory()))" to="!(((dir.exists()) || (!(dir.mkdirs()))) &amp;&amp; (!(dir.isDirectory())))" />
    <mutant id="mutant_4697" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="((prime * result) - 1)" />
    <mutant id="mutant_2033" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 14)" to="((fi + 14) + 1)" />
    <mutant id="mutant_3365" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.rename(java.io.File,java.io.File)" from="((dir.exists()) || (!(dir.mkdirs())))" to="(!((dir.exists()) || (!(dir.mkdirs()))))" />
    <mutant id="mutant_4696" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (inverse ? 1231 : 1237)" to="((prime * result) + (inverse ? 1231 : 1237)) - 1" />
    <mutant id="mutant_2034" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 14)" to="((fi + 14) - 1)" />
    <mutant id="mutant_3364" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) - 2" to="((org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) - 2) - 1" />
    <mutant id="mutant_4695" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (inverse ? 1231 : 1237)" to="((prime * result) + (inverse ? 1231 : 1237)) + 1" />
    <mutant id="mutant_2031" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)])))" to="(!(((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))))" />
    <mutant id="mutant_3363" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) - 2" to="((org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) - 2) * -1" />
    <mutant id="mutant_4694" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (inverse ? 1231 : 1237)" to="((prime * result) + (inverse ? 1231 : 1237)) * -1" />
    <mutant id="mutant_2032" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 14)" to="((fi + 14) * -1)" />
    <mutant id="mutant_3362" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) - 2" to="((org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) - 2) + 1" />
    <mutant id="mutant_4693" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="((prime * result) * -1)" />
    <mutant id="mutant_2039" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 15)" to="((fi + 15) * -1)" />
    <mutant id="mutant_3361" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(clr_oid != null) &amp;&amp; (clr_oid.equals(packedRef.getObjectId()))" to="!((clr_oid != null) &amp;&amp; (clr_oid.equals(packedRef.getObjectId())))" />
    <mutant id="mutant_4692" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="((prime * result) + 1)" />
    <mutant id="mutant_2030" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 13)" to="((si + 13) + 1)" />
    <mutant id="mutant_3360" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(currentLooseRef == null) || (currentLooseRef.isSymbolic())" to="!((currentLooseRef == null) || (currentLooseRef.isSymbolic()))" />
    <mutant id="mutant_4691" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="((prime * result) - 1)" />
    <mutant id="mutant_4690" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule(java.lang.String)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) - 1)" />
    <mutant id="mutant_2026" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 13)" to="((fi + 13) * -1)" />
    <mutant id="mutant_3358" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.fireRefsChanged()" from="((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr)))" to="(!((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr))))" />
    <mutant id="mutant_4689" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule(java.lang.String)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) * -1)" />
    <mutant id="mutant_2027" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 13)" to="((fi + 13) - 1)" />
    <mutant id="mutant_3357" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) - 2" to="((org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) - 2) + 1" />
    <mutant id="mutant_4688" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule(java.lang.String)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) + 1)" />
    <mutant id="mutant_2024" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)])))" to="(!((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))))" />
    <mutant id="mutant_3356" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) - 2" to="((org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) - 2) - 1" />
    <mutant id="mutant_4687" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="((i + startIncl) + 1)" />
    <mutant id="mutant_2025" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 13)" to="((fi + 13) + 1)" />
    <mutant id="mutant_3355" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) - 2" to="((org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) - 2) * -1" />
    <mutant id="mutant_4686" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="((i + startIncl) - 1)" />
    <mutant id="mutant_2022" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 12)" to="((si + 12) + 1)" />
    <mutant id="mutant_3354" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(java.io.File,int)" from="(!(file.delete())) &amp;&amp; (file.isFile())" to="!((!(file.delete())) &amp;&amp; (file.isFile()))" />
    <mutant id="mutant_4685" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="((i + startIncl) * -1)" />
    <mutant id="mutant_2023" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 12)" to="((si + 12) * -1)" />
    <mutant id="mutant_3353" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(last != null) &amp;&amp; ((RefComparator.compareTo(last, cur)) &gt; 0)" to="!((last != null) &amp;&amp; ((RefComparator.compareTo(last, cur)) &gt; 0))" />
    <mutant id="mutant_4684" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="((endExcl - startIncl) - 1)" />
    <mutant id="mutant_2020" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 12)" to="((fi + 12) + 1)" />
    <mutant id="mutant_3352" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(sp + 1)" to="((sp + 1) - 1)" />
    <mutant id="mutant_4683" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="((endExcl - startIncl) + 1)" />
    <mutant id="mutant_2021" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 12)" to="((si + 12) - 1)" />
    <mutant id="mutant_3351" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(sp + 1)" to="((sp + 1) * -1)" />
    <mutant id="mutant_4682" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="((endExcl - startIncl) * -1)" />
    <mutant id="mutant_2028" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 13)" to="((si + 13) * -1)" />
    <mutant id="mutant_2029" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 13)" to="((si + 13) - 1)" />
    <mutant id="mutant_3359" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.fireRefsChanged()" from="((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr))) &amp;&amp; (last != 0)" to="!(((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr))) &amp;&amp; (last != 0))" />
    <mutant id="mutant_3350" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(sp + 1)" to="((sp + 1) + 1)" />
    <mutant id="mutant_4681" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="((s.length()) - 1) - 1" />
    <mutant id="mutant_4680" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="((s.length()) - 1) * -1" />
    <mutant id="mutant_2015" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 11)" to="((si + 11) * -1)" />
    <mutant id="mutant_3347" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="((all.size()) - 1)" to="(((all.size()) - 1) * -1)" />
    <mutant id="mutant_4678" viable="false" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have trailing asterisk: &quot; + pattern)" to="((&quot;Pattern must have trailing asterisk: &quot; + pattern) * -1)" />
    <mutant id="mutant_2016" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 11)" to="((si + 11) - 1)" />
    <mutant id="mutant_3346" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="((depth + 1) + 1)" />
    <mutant id="mutant_4677" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have trailing asterisk: &quot; + pattern)" to="((&quot;Pattern must have trailing asterisk: &quot; + pattern) + 1)" />
    <mutant id="mutant_2013" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 11)" to="((fi + 11) * -1)" />
    <mutant id="mutant_3345" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="((depth + 1) - 1)" />
    <mutant id="mutant_4676" viable="false" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have trailing asterisk: &quot; + pattern)" to="((&quot;Pattern must have trailing asterisk: &quot; + pattern) - 1)" />
    <mutant id="mutant_2014" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 11)" to="((si + 11) + 1)" />
    <mutant id="mutant_3344" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="((depth + 1) * -1)" />
    <mutant id="mutant_4675" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="((subPattern.length()) - 1)" to="(((subPattern.length()) - 1) - 1)" />
    <mutant id="mutant_2011" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 11)" to="((fi + 11) + 1)" />
    <mutant id="mutant_3343" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(loose != null) &amp;&amp; (dst.getName().startsWith(prefix))" to="!((loose != null) &amp;&amp; (dst.getName().startsWith(prefix)))" />
    <mutant id="mutant_4674" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="((subPattern.length()) - 1)" to="(((subPattern.length()) - 1) * -1)" />
    <mutant id="mutant_2012" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 11)" to="((fi + 11) - 1)" />
    <mutant id="mutant_3342" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peeledPackedRef(org.eclipse.jgit.lib.Ref)" from="(f.getStorage().isPacked()) &amp;&amp; (f.isPeeled())" to="!((f.getStorage().isPacked()) &amp;&amp; (f.isPeeled()))" />
    <mutant id="mutant_4673" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="((subPattern.length()) - 1)" to="(((subPattern.length()) - 1) + 1)" />
    <mutant id="mutant_3341" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peel(org.eclipse.jgit.lib.Ref)" from="(0 &lt;= idx) &amp;&amp; ((curList.get(idx)) == leaf)" to="!((0 &lt;= idx) &amp;&amp; ((curList.get(idx)) == leaf))" />
    <mutant id="mutant_4672" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.checkWildCards(java.lang.String)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) - 1)" />
    <mutant id="mutant_2010" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)])))" to="(!((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))))" />
    <mutant id="mutant_3340" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peel(org.eclipse.jgit.lib.Ref)" from="(leaf.isPeeled()) || ((leaf.getObjectId()) == null)" to="!((leaf.isPeeled()) || ((leaf.getObjectId()) == null))" />
    <mutant id="mutant_4671" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.checkWildCards(java.lang.String)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) * -1)" />
    <mutant id="mutant_2019" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 12)" to="((fi + 12) * -1)" />
    <mutant id="mutant_2017" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)])))" to="(!(((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))))" />
    <mutant id="mutant_3349" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="((all.size()) - 1)" to="(((all.size()) - 1) - 1)" />
    <mutant id="mutant_2018" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 12)" to="((fi + 12) - 1)" />
    <mutant id="mutant_3348" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="((all.size()) - 1)" to="(((all.size()) - 1) + 1)" />
    <mutant id="mutant_4679" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="((s.length()) - 1) + 1" />
    <mutant id="mutant_2095" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 16)" to="((p + 16) * -1)" />
    <mutant id="mutant_2096" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 16)" to="((p + 16) - 1)" />
    <mutant id="mutant_2093" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 12)" to="((p + 12) - 1)" />
    <mutant id="mutant_2094" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 12)" to="((p + 12) + 1)" />
    <mutant id="mutant_2091" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 8)" to="((p + 8) - 1)" />
    <mutant id="mutant_2092" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 12)" to="((p + 12) * -1)" />
    <mutant id="mutant_2090" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 8)" to="((p + 8) + 1)" />
    <mutant id="mutant_2088" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 4)" to="((p + 4) + 1)" />
    <mutant id="mutant_2089" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 8)" to="((p + 8) * -1)" />
    <mutant id="mutant_2086" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 4)" to="((p + 4) * -1)" />
    <mutant id="mutant_2087" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 4)" to="((p + 4) - 1)" />
    <mutant id="mutant_2084" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 32)" to="((p + 32) - 1)" />
    <mutant id="mutant_2085" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 32)" to="((p + 32) * -1)" />
    <mutant id="mutant_2082" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 24)" to="((p + 24) + 1)" />
    <mutant id="mutant_2083" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 32)" to="((p + 32) + 1)" />
    <mutant id="mutant_2080" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 24)" to="((p + 24) * -1)" />
    <mutant id="mutant_2081" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 24)" to="((p + 24) - 1)" />
    <mutant id="mutant_2079" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 16)" to="((p + 16) + 1)" />
    <mutant id="mutant_2077" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 16)" to="((p + 16) * -1)" />
    <mutant id="mutant_2078" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 16)" to="((p + 16) - 1)" />
    <mutant id="mutant_2075" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 8)" to="((p + 8) + 1)" />
    <mutant id="mutant_2076" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 8)" to="((p + 8) - 1)" />
    <mutant id="mutant_2073" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)]))) &amp;&amp; ((firstBuffer[(fi + 19)]) == (secondBuffer[(si + 19)]))" to="!(((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)]))) &amp;&amp; ((firstBuffer[(fi + 19)]) == (secondBuffer[(si + 19)])))" />
    <mutant id="mutant_2074" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 8)" to="((p + 8) * -1)" />
    <mutant id="mutant_2071" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 19)" to="((si + 19) + 1)" />
    <mutant id="mutant_2072" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 19)" to="((si + 19) * -1)" />
    <mutant id="mutant_2070" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 19)" to="((si + 19) - 1)" />
    <mutant id="mutant_2068" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 19)" to="((fi + 19) * -1)" />
    <mutant id="mutant_2069" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 19)" to="((fi + 19) - 1)" />
    <mutant id="mutant_3399" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho()))" to="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) - 1)" />
    <mutant id="mutant_2066" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)])))" to="(!((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)]))))" />
    <mutant id="mutant_3398" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho()))" to="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + 1)" />
    <mutant id="mutant_2067" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 19)" to="((fi + 19) + 1)" />
    <mutant id="mutant_3397" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho()))" to="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) * -1)" />
    <mutant id="mutant_2064" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 18)" to="((si + 18) * -1)" />
    <mutant id="mutant_3396" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;)" to="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + 1)" />
    <mutant id="mutant_2065" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 18)" to="((si + 18) + 1)" />
    <mutant id="mutant_3395" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;)" to="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) * -1)" />
    <mutant id="mutant_2062" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 18)" to="((fi + 18) + 1)" />
    <mutant id="mutant_3394" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;)" to="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) - 1)" />
    <mutant id="mutant_2063" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 18)" to="((si + 18) - 1)" />
    <mutant id="mutant_3393" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name()))" to="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) * -1)" />
    <mutant id="mutant_2060" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 18)" to="((fi + 18) - 1)" />
    <mutant id="mutant_3392" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name()))" to="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) - 1)" />
    <mutant id="mutant_2061" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 18)" to="((fi + 18) * -1)" />
    <mutant id="mutant_3391" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name()))" to="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + 1)" />
    <mutant id="mutant_3390" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;)" to="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) - 1)" />
    <mutant id="mutant_2059" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)])))" to="(!(((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))))" />
    <mutant id="mutant_2057" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 17)" to="((si + 17) - 1)" />
    <mutant id="mutant_3389" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;)" to="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + 1)" />
    <mutant id="mutant_2058" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 17)" to="((si + 17) + 1)" />
    <mutant id="mutant_3388" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;)" to="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) * -1)" />
    <mutant id="mutant_2055" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 17)" to="((fi + 17) - 1)" />
    <mutant id="mutant_3387" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(&quot;Entry[&quot; + (oldId.name()))" to="((&quot;Entry[&quot; + (oldId.name())) * -1)" />
    <mutant id="mutant_2056" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 17)" to="((si + 17) * -1)" />
    <mutant id="mutant_3386" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(&quot;Entry[&quot; + (oldId.name()))" to="((&quot;Entry[&quot; + (oldId.name())) - 1)" />
    <mutant id="mutant_2053" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 17)" to="((fi + 17) * -1)" />
    <mutant id="mutant_3385" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(&quot;Entry[&quot; + (oldId.name()))" to="((&quot;Entry[&quot; + (oldId.name())) + 1)" />
    <mutant id="mutant_2054" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 17)" to="((fi + 17) + 1)" />
    <mutant id="mutant_3384" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl(byte[],int)" from="(p1 - 1)" to="((p1 - 1) + 1)" />
    <mutant id="mutant_9520" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseModeLine(int,int)" from="(dot2 + 1)" to="((dot2 + 1) * -1)" />
    <mutant id="mutant_9521" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(eol - c)" to="((eol - c) - 1)" />
    <mutant id="mutant_9519" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseModeLine(int,int)" from="(dot2 + 1)" to="((dot2 + 1) - 1)" />
    <mutant id="mutant_9513" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="((dot2 + 1) - 1)" />
    <mutant id="mutant_9514" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="((dot2 + 1) * -1)" />
    <mutant id="mutant_9511" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="((dot2 - 1) - 1)" />
    <mutant id="mutant_9512" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="((dot2 + 1) + 1)" />
    <mutant id="mutant_9517" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(eol - 1)" to="((eol - 1) * -1)" />
    <mutant id="mutant_9518" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseModeLine(int,int)" from="(dot2 + 1)" to="((dot2 + 1) + 1)" />
    <mutant id="mutant_9515" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(eol - 1)" to="((eol - 1) + 1)" />
    <mutant id="mutant_9516" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(eol - 1)" to="((eol - 1) - 1)" />
    <mutant id="mutant_9510" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="((dot2 - 1) * -1)" />
    <mutant id="mutant_9508" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(ids.size()) + 1" to="((ids.size()) + 1) + 1" />
    <mutant id="mutant_9509" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="((dot2 - 1) + 1)" />
    <mutant id="mutant_9502" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.getScriptText(java.nio.charset.Charset,java.nio.charset.Charset)" from="(getParentCount()) + 1" to="((getParentCount()) + 1) * -1" />
    <mutant id="mutant_9503" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(comma - 1)" to="((comma - 1) * -1)" />
    <mutant id="mutant_9500" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.getScriptText(java.nio.charset.Charset,java.nio.charset.Charset)" from="(getParentCount()) + 1" to="((getParentCount()) + 1) + 1" />
    <mutant id="mutant_9501" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.getScriptText(java.nio.charset.Charset,java.nio.charset.Charset)" from="(getParentCount()) + 1" to="((getParentCount()) + 1) - 1" />
    <mutant id="mutant_9506" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(ids.size()) + 1" to="((ids.size()) + 1) * -1" />
    <mutant id="mutant_9507" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(ids.size()) + 1" to="((ids.size()) + 1) - 1" />
    <mutant id="mutant_9504" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(comma - 1)" to="((comma - 1) + 1)" />
    <mutant id="mutant_9505" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(comma - 1)" to="((comma - 1) - 1)" />
    <mutant id="mutant_2099" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_2097" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 16)" to="((p + 16) + 1)" />
    <mutant id="mutant_2098" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_9560" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) + 1)" />
    <mutant id="mutant_9561" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) - 1)" />
    <mutant id="mutant_8230" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_8232" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_9564" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) - 1)" />
    <mutant id="mutant_8231" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_9565" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) * -1)" />
    <mutant id="mutant_8234" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="(c - '0') * -1" />
    <mutant id="mutant_9562" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) * -1)" />
    <mutant id="mutant_8233" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="(c - '0') + 1" />
    <mutant id="mutant_9563" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) + 1)" />
    <mutant id="mutant_8225" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="((--delta) &gt; 0) &amp;&amp; (ptr != end)" to="!(((--delta) &gt; 0) &amp;&amp; (ptr != end))" />
    <mutant id="mutant_9557" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(ptr + ancestor)" to="((ptr + ancestor) - 1)" />
    <mutant id="mutant_8224" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="((Constants.OBJECT_ID_LENGTH) + 1) - 1" />
    <mutant id="mutant_9558" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(ptr + ancestor)" to="((ptr + ancestor) * -1)" />
    <mutant id="mutant_8227" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="((Constants.OBJECT_ID_LENGTH) + 1) + 1" />
    <mutant id="mutant_9555" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="((old.length) + 1)" to="(((old.length) + 1) * -1)" />
    <mutant id="mutant_8226" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="((Constants.OBJECT_ID_LENGTH) + 1) * -1" />
    <mutant id="mutant_9556" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="((old.length) + 1)" to="(((old.length) + 1) + 1)" />
    <mutant id="mutant_8229" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="(c - '0') - 1" />
    <mutant id="mutant_8228" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="((Constants.OBJECT_ID_LENGTH) + 1) - 1" />
    <mutant id="mutant_9559" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(ptr + ancestor)" to="((ptr + ancestor) + 1)" />
    <mutant id="mutant_9550" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) * -1)" />
    <mutant id="mutant_8221" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="delta + 1" to="(delta + 1) - 1" />
    <mutant id="mutant_9553" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) * -1)" />
    <mutant id="mutant_8220" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="delta + 1" to="(delta + 1) + 1" />
    <mutant id="mutant_9554" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="((old.length) + 1)" to="(((old.length) + 1) - 1)" />
    <mutant id="mutant_8223" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="((Constants.OBJECT_ID_LENGTH) + 1) + 1" />
    <mutant id="mutant_9551" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) + 1)" />
    <mutant id="mutant_8222" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="((Constants.OBJECT_ID_LENGTH) + 1) * -1" />
    <mutant id="mutant_9552" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) - 1)" />
    <mutant id="mutant_8214" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.setPathCapacity(int,int)" from="(p != null) &amp;&amp; ((p.path) == o)" to="!((p != null) &amp;&amp; ((p.path) == o))" />
    <mutant id="mutant_9546" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + nAdded)" to="((newLineCount) - ((nContext) + nAdded)) * -1" />
    <mutant id="mutant_8213" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getName(byte[],int)" from="((pathLen) - (pathOffset))" to="(((pathLen) - (pathOffset)) - 1)" />
    <mutant id="mutant_9547" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + nAdded)" to="((newLineCount) - ((nContext) + nAdded)) - 1" />
    <mutant id="mutant_8216" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.idOffset()" from="(nextPtr) - (Constants.OBJECT_ID_LENGTH)" to="((nextPtr) - (Constants.OBJECT_ID_LENGTH)) - 1" />
    <mutant id="mutant_9544" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="(((nContext) + nAdded) - 1)" />
    <mutant id="mutant_8215" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.idOffset()" from="(nextPtr) - (Constants.OBJECT_ID_LENGTH)" to="((nextPtr) - (Constants.OBJECT_ID_LENGTH)) + 1" />
    <mutant id="mutant_9545" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + nAdded)" to="((newLineCount) - ((nContext) + nAdded)) + 1" />
    <mutant id="mutant_8218" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(delta == 1) &amp;&amp; (0 &lt;= (prevPtr))" to="!((delta == 1) &amp;&amp; (0 &lt;= (prevPtr)))" />
    <mutant id="mutant_8217" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.idOffset()" from="(nextPtr) - (Constants.OBJECT_ID_LENGTH)" to="((nextPtr) - (Constants.OBJECT_ID_LENGTH)) * -1" />
    <mutant id="mutant_9548" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) + 1)" />
    <mutant id="mutant_8219" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="delta + 1" to="(delta + 1) * -1" />
    <mutant id="mutant_9549" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) - 1)" />
    <mutant id="mutant_8210" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.ensurePathCapacity(int,int)" from="(newCapacity &lt; capacity) &amp;&amp; (newCapacity &gt; 0)" to="!((newCapacity &lt; capacity) &amp;&amp; (newCapacity &gt; 0))" />
    <mutant id="mutant_9542" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="(((nContext) + nAdded) + 1)" />
    <mutant id="mutant_9543" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="(((nContext) + nAdded) * -1)" />
    <mutant id="mutant_8212" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getName(byte[],int)" from="((pathLen) - (pathOffset))" to="(((pathLen) - (pathOffset)) * -1)" />
    <mutant id="mutant_9540" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="(((nContext) + nAdded) * -1)" />
    <mutant id="mutant_8211" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getName(byte[],int)" from="((pathLen) - (pathOffset))" to="(((pathLen) - (pathOffset)) + 1)" />
    <mutant id="mutant_9541" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="(((nContext) + nAdded) - 1)" />
    <mutant id="mutant_8203" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="(((getClass().getSimpleName()) + &quot;[&quot;) + 1)" />
    <mutant id="mutant_9535" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.lineCount) - cmp" to="((o.lineCount) - cmp) * -1" />
    <mutant id="mutant_8202" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="(((getClass().getSimpleName()) + &quot;[&quot;) * -1)" />
    <mutant id="mutant_9536" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(ancestor + 1)" to="((ancestor + 1) + 1)" />
    <mutant id="mutant_8205" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString()))" to="((((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) - 1)" />
    <mutant id="mutant_9533" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.lineCount) - cmp" to="((o.lineCount) - cmp) + 1" />
    <mutant id="mutant_8204" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString()))" to="((((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) + 1)" />
    <mutant id="mutant_9534" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.lineCount) - cmp" to="((o.lineCount) - cmp) - 1" />
    <mutant id="mutant_8207" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) + &quot;]&quot;" to="((((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_9539" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="(((nContext) + nAdded) + 1)" />
    <mutant id="mutant_8206" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString()))" to="((((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) * -1)" />
    <mutant id="mutant_8209" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) + &quot;]&quot;" to="((((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_9537" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(ancestor + 1)" to="((ancestor + 1) * -1)" />
    <mutant id="mutant_8208" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) + &quot;]&quot;" to="((((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_9538" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(ancestor + 1)" to="((ancestor + 1) - 1)" />
    <mutant id="mutant_9531" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.nContext) + (o.nDeleted)" to="((o.nContext) + (o.nDeleted)) * -1" />
    <mutant id="mutant_9532" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.nContext) + (o.nDeleted)" to="((o.nContext) + (o.nDeleted)) - 1" />
    <mutant id="mutant_8201" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="(((getClass().getSimpleName()) + &quot;[&quot;) - 1)" />
    <mutant id="mutant_8200" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="((org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))) * -1" />
    <mutant id="mutant_9530" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.nContext) + (o.nDeleted)" to="((o.nContext) + (o.nDeleted)) + 1" />
    <mutant id="mutant_9524" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.length) + 1)" to="(((old.length) + 1) - 1)" />
    <mutant id="mutant_9525" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.length) + 1)" to="(((old.length) + 1) * -1)" />
    <mutant id="mutant_9522" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(eol - c)" to="((eol - c) + 1)" />
    <mutant id="mutant_9523" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(eol - c)" to="((eol - c) * -1)" />
    <mutant id="mutant_9528" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(c + ancestor)" to="((c + ancestor) + 1)" />
    <mutant id="mutant_9529" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(c + ancestor)" to="((c + ancestor) * -1)" />
    <mutant id="mutant_9526" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.length) + 1)" to="(((old.length) + 1) + 1)" />
    <mutant id="mutant_9527" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(c + ancestor)" to="((c + ancestor) - 1)" />
    <mutant id="mutant_8272" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.enterSubtree()" from="(((t.matches) == ch) &amp;&amp; (!(t.eof())))" to="(!(((t.matches) == ch) &amp;&amp; (!(t.eof()))))" />
    <mutant id="mutant_8271" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.min()" from="(minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length))" to="!((minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length)))" />
    <mutant id="mutant_8274" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.exitSubtree()" from="(minRef == null) || ((t.pathCompare(minRef)) &lt; 0)" to="!((minRef == null) || ((t.pathCompare(minRef)) &lt; 0))" />
    <mutant id="mutant_8273" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.enterSubtree()" from="(((t.matches) == ch) &amp;&amp; (!(t.eof()))) &amp;&amp; (FileMode.TREE.equals(t.mode))" to="!((((t.matches) == ch) &amp;&amp; (!(t.eof()))) &amp;&amp; (FileMode.TREE.equals(t.mode)))" />
    <mutant id="mutant_8276" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;)" to="(((getMode().toString()) + &quot; &quot;) + 1)" />
    <mutant id="mutant_8275" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.reset(org.eclipse.jgit.lib.AnyObjectId[])" from="(o instanceof org.eclipse.jgit.treewalk.CanonicalTreeParser) &amp;&amp; ((o.pathOffset) == 0)" to="!((o instanceof org.eclipse.jgit.treewalk.CanonicalTreeParser) &amp;&amp; ((o.pathOffset) == 0))" />
    <mutant id="mutant_8278" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;)" to="(((getMode().toString()) + &quot; &quot;) * -1)" />
    <mutant id="mutant_8277" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;)" to="(((getMode().toString()) + &quot; &quot;) - 1)" />
    <mutant id="mutant_8270" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="((c[ci]) &amp; 255) - ((p[ci]) &amp; 255)" to="(((c[ci]) &amp; 255) - ((p[ci]) &amp; 255)) * -1" />
    <mutant id="mutant_8269" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="((c[ci]) &amp; 255) - ((p[ci]) &amp; 255)" to="(((c[ci]) &amp; 255) - ((p[ci]) &amp; 255)) - 1" />
    <mutant id="mutant_8268" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="((c[ci]) &amp; 255) - ((p[ci]) &amp; 255)" to="(((c[ci]) &amp; 255) - ((p[ci]) &amp; 255)) + 1" />
    <mutant id="mutant_9599" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr == end) || ((buf[ptr++]) != '-')" to="!((ptr == end) || ((buf[ptr++]) != '-'))" />
    <mutant id="mutant_8261" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(pLen - i)" to="((pLen - i) * -1)" />
    <mutant id="mutant_9593" viable="true" in="org.eclipse.jgit.patch.FileHeader.hasMetaDataChanges()" from="((changeType) != (DiffEntry.ChangeType.MODIFY)) || ((newMode) != (oldMode))" to="!(((changeType) != (DiffEntry.ChangeType.MODIFY)) || ((newMode) != (oldMode)))" />
    <mutant id="mutant_8260" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(pLen - i)" to="((pLen - i) - 1)" />
    <mutant id="mutant_9594" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((buf[ptr]) == '@')" to="!((ptr &lt; end) &amp;&amp; ((buf[ptr]) == '@'))" />
    <mutant id="mutant_8263" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.next()" from="(recursive) &amp;&amp; (FileMode.TREE.equals(t.mode))" to="!((recursive) &amp;&amp; (FileMode.TREE.equals(t.mode)))" />
    <mutant id="mutant_9591" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(bEnd - bPtr)" to="((bEnd - bPtr) + 1)" />
    <mutant id="mutant_8262" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPostChildren()" from="(postChildren) &amp;&amp; (isSubtree())" to="!((postChildren) &amp;&amp; (isSubtree()))" />
    <mutant id="mutant_9592" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(bEnd - bPtr)" to="((bEnd - bPtr) * -1)" />
    <mutant id="mutant_8265" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.addTree(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="n + 1" to="(n + 1) - 1" />
    <mutant id="mutant_9597" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - start)" to="((ptr - start) * -1)" />
    <mutant id="mutant_8264" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.addTree(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="n + 1" to="(n + 1) + 1" />
    <mutant id="mutant_9598" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr == end) || ((buf[ptr++]) != ' ')" to="!((ptr == end) || ((buf[ptr++]) != ' '))" />
    <mutant id="mutant_8267" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="(ci &lt; cLen) &amp;&amp; (ci &lt; pLen)" to="!((ci &lt; cLen) &amp;&amp; (ci &lt; pLen))" />
    <mutant id="mutant_9595" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - start)" to="((ptr - start) - 1)" />
    <mutant id="mutant_8266" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.addTree(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="n + 1" to="(n + 1) * -1" />
    <mutant id="mutant_9596" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - start)" to="((ptr - start) + 1)" />
    <mutant id="mutant_9590" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(bEnd - bPtr)" to="((bEnd - bPtr) - 1)" />
    <mutant id="mutant_8258" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(cLen - i)" to="((cLen - i) * -1)" />
    <mutant id="mutant_8257" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(cLen - i)" to="((cLen - i) - 1)" />
    <mutant id="mutant_9588" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(aEnd - aPtr)" to="((aEnd - aPtr) * -1)" />
    <mutant id="mutant_8259" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(pLen - i)" to="((pLen - i) + 1)" />
    <mutant id="mutant_9589" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(aEnd - aPtr)" to="((aEnd - aPtr) - 1)" />
    <mutant id="mutant_8250" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(t, minRef))" to="!((((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(t, minRef)))" />
    <mutant id="mutant_9582" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) - 1)" />
    <mutant id="mutant_9583" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) * -1)" />
    <mutant id="mutant_8252" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(hasConflict &amp;&amp; (fastMinHasMatch)) &amp;&amp; ((dfConflict) == null)" to="!((hasConflict &amp;&amp; (fastMinHasMatch)) &amp;&amp; ((dfConflict) == null))" />
    <mutant id="mutant_9580" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) * -1)" />
    <mutant id="mutant_8251" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(hasConflict &amp;&amp; (fastMinHasMatch))" to="(!(hasConflict &amp;&amp; (fastMinHasMatch)))" />
    <mutant id="mutant_9581" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) + 1)" />
    <mutant id="mutant_8254" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="(!(a.hasId())) || (!(b.hasId()))" to="!((!(a.hasId())) || (!(b.hasId())))" />
    <mutant id="mutant_9586" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) * -1)" />
    <mutant id="mutant_8253" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="((a.matches) != ch) &amp;&amp; ((b.matches) != ch)" to="!(((a.matches) != ch) &amp;&amp; ((b.matches) != ch))" />
    <mutant id="mutant_9587" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(aEnd - aPtr)" to="((aEnd - aPtr) + 1)" />
    <mutant id="mutant_8256" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(cLen - i)" to="((cLen - i) + 1)" />
    <mutant id="mutant_9584" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) + 1)" />
    <mutant id="mutant_8255" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="((a.matches) == ch) &amp;&amp; ((b.matches) == ch)" to="!(((a.matches) == ch) &amp;&amp; ((b.matches) == ch))" />
    <mutant id="mutant_9585" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) - 1)" />
    <mutant id="mutant_8247" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(minRef, t))" to="!((((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(minRef, t)))" />
    <mutant id="mutant_9579" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) - 1)" />
    <mutant id="mutant_8246" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t))))" to="(!(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t)))))" />
    <mutant id="mutant_8249" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef))))" to="(!(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef)))))" />
    <mutant id="mutant_9577" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(ptr + ancestor)" to="((ptr + ancestor) + 1)" />
    <mutant id="mutant_8248" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t)))" to="(!((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))))" />
    <mutant id="mutant_9578" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="(((ptr.value) + 1) + 1)" />
    <mutant id="mutant_9571" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(eol - ptr)" to="((eol - ptr) * -1)" />
    <mutant id="mutant_9572" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="((old.length) + 1)" to="(((old.length) + 1) - 1)" />
    <mutant id="mutant_8241" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.skipEntry(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((t.matches) == minRef) || (t.first())" to="!(((t.matches) == minRef) || (t.first()))" />
    <mutant id="mutant_8240" viable="true" in="org.eclipse.jgit.treewalk.EmptyTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator,byte[],int)" from="childPathOffset - 1" to="(childPathOffset - 1) + 1" />
    <mutant id="mutant_9570" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(eol - ptr)" to="((eol - ptr) - 1)" />
    <mutant id="mutant_8243" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.combineDF(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((t.matches) == minRef) || (t.eof())" to="!(((t.matches) == minRef) || (t.eof()))" />
    <mutant id="mutant_9575" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(ptr + ancestor)" to="((ptr + ancestor) - 1)" />
    <mutant id="mutant_8242" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.skipEntry(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(cmp &lt; 0) || (t.first())" to="!((cmp &lt; 0) || (t.first()))" />
    <mutant id="mutant_9576" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(ptr + ancestor)" to="((ptr + ancestor) * -1)" />
    <mutant id="mutant_8245" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef)))" to="(!((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))))" />
    <mutant id="mutant_9573" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="((old.length) + 1)" to="(((old.length) + 1) * -1)" />
    <mutant id="mutant_8244" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length))" to="!((minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length)))" />
    <mutant id="mutant_9574" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="((old.length) + 1)" to="(((old.length) + 1) + 1)" />
    <mutant id="mutant_8236" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="ptr + (Constants.OBJECT_ID_LENGTH)" to="(ptr + (Constants.OBJECT_ID_LENGTH)) * -1" />
    <mutant id="mutant_9568" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) * -1)" />
    <mutant id="mutant_8235" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="ptr + (Constants.OBJECT_ID_LENGTH)" to="(ptr + (Constants.OBJECT_ID_LENGTH)) + 1" />
    <mutant id="mutant_9569" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(eol - ptr)" to="((eol - ptr) + 1)" />
    <mutant id="mutant_8238" viable="true" in="org.eclipse.jgit.treewalk.EmptyTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator,byte[],int)" from="childPathOffset - 1" to="(childPathOffset - 1) * -1" />
    <mutant id="mutant_9566" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) + 1)" />
    <mutant id="mutant_8237" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="ptr + (Constants.OBJECT_ID_LENGTH)" to="(ptr + (Constants.OBJECT_ID_LENGTH)) - 1" />
    <mutant id="mutant_9567" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="((eol - ptr) - 1)" />
    <mutant id="mutant_8239" viable="true" in="org.eclipse.jgit.treewalk.EmptyTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator,byte[],int)" from="childPathOffset - 1" to="(childPathOffset - 1) - 1" />
    <mutant id="mutant_4709" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.isIgnored(java.lang.String,boolean,boolean)" from="(rules.size()) - 1" to="((rules.size()) - 1) * -1" />
    <mutant id="mutant_4700" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (dirOnly ? 1231 : 1237)" to="((prime * result) + (dirOnly ? 1231 : 1237)) - 1" />
    <mutant id="mutant_4708" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + ((matcher) == null ? 0 : matcher.hashCode())" to="((prime * result) + ((matcher) == null ? 0 : matcher.hashCode())) - 1" />
    <mutant id="mutant_4707" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + ((matcher) == null ? 0 : matcher.hashCode())" to="((prime * result) + ((matcher) == null ? 0 : matcher.hashCode())) + 1" />
    <mutant id="mutant_4706" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + ((matcher) == null ? 0 : matcher.hashCode())" to="((prime * result) + ((matcher) == null ? 0 : matcher.hashCode())) * -1" />
    <mutant id="mutant_4705" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="((prime * result) * -1)" />
    <mutant id="mutant_4704" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="((prime * result) + 1)" />
    <mutant id="mutant_4703" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="((prime * result) - 1)" />
    <mutant id="mutant_4702" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (dirOnly ? 1231 : 1237)" to="((prime * result) + (dirOnly ? 1231 : 1237)) * -1" />
    <mutant id="mutant_4701" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (dirOnly ? 1231 : 1237)" to="((prime * result) + (dirOnly ? 1231 : 1237)) + 1" />
    <mutant id="mutant_8294" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="((org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))) - 1" />
    <mutant id="mutant_8293" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="((org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))) + 1" />
    <mutant id="mutant_8296" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="((int)(sz % 10))" to="(((int)((sz % 10))) + 1)" />
    <mutant id="mutant_8295" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="((org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))) * -1" />
    <mutant id="mutant_8298" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="((int)(sz % 10))" to="(((int)((sz % 10))) - 1)" />
    <mutant id="mutant_8297" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="((int)(sz % 10))" to="(((int)((sz % 10))) * -1)" />
    <mutant id="mutant_8299" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="(bufn - p)" to="((bufn - p) * -1)" />
    <mutant id="mutant_8290" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - ((b[cPos]) &amp; 255)" to="((org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - ((b[cPos]) &amp; 255)) * -1" />
    <mutant id="mutant_8292" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - ((b[cPos]) &amp; 255)" to="((org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - ((b[cPos]) &amp; 255)) - 1" />
    <mutant id="mutant_8291" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - ((b[cPos]) &amp; 255)" to="((org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - ((b[cPos]) &amp; 255)) + 1" />
    <mutant id="mutant_8283" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="!((cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen))" />
    <mutant id="mutant_8282" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.encodeName(java.nio.charset.CharsetEncoder)" from="(b.hasArray()) &amp;&amp; ((b.arrayOffset()) == 0)" to="!((b.hasArray()) &amp;&amp; ((b.arrayOffset()) == 0))" />
    <mutant id="mutant_8285" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="(((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)) - 1" />
    <mutant id="mutant_8284" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="(((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)) + 1" />
    <mutant id="mutant_8287" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="(((a[cPos]) &amp; 255) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))) - 1" />
    <mutant id="mutant_8286" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="(((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)) * -1" />
    <mutant id="mutant_8289" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="(((a[cPos]) &amp; 255) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))) + 1" />
    <mutant id="mutant_8288" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="(((a[cPos]) &amp; 255) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))) * -1" />
    <mutant id="mutant_8281" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;) + (getName())" to="(((getMode().toString()) + &quot; &quot;) + (getName())) - 1" />
    <mutant id="mutant_8280" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;) + (getName())" to="(((getMode().toString()) + &quot; &quot;) + (getName())) * -1" />
    <mutant id="mutant_8279" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;) + (getName())" to="(((getMode().toString()) + &quot; &quot;) + (getName())) + 1" />
    <mutant id="mutant_3413" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((Constants.LOGS) + '/') + refname)" to="((((Constants.LOGS) + '/') + refname) - 1)" />
    <mutant id="mutant_4744" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;)" to="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) * -1)" />
    <mutant id="mutant_3412" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((Constants.LOGS) + '/') + refname)" to="((((Constants.LOGS) + '/') + refname) * -1)" />
    <mutant id="mutant_4743" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;)" to="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) + 1)" />
    <mutant id="mutant_3411" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((Constants.LOGS) + '/')" to="(((Constants.LOGS) + '/') - 1)" />
    <mutant id="mutant_4742" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;)" to="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) - 1)" />
    <mutant id="mutant_3410" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((Constants.LOGS) + '/')" to="(((Constants.LOGS) + '/') + 1)" />
    <mutant id="mutant_4741" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="((ref + &quot;:&quot;) + path)" to="(((ref + &quot;:&quot;) + path) + 1)" />
    <mutant id="mutant_4740" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="((ref + &quot;:&quot;) + path)" to="(((ref + &quot;:&quot;) + path) * -1)" />
    <mutant id="mutant_3419" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntry(int)" from="rs + 2" to="(rs + 2) * -1" />
    <mutant id="mutant_3418" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="rs + 2" to="(rs + 2) + 1" />
    <mutant id="mutant_4749" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((path) == null) || ((path.length()) == 0)" to="!(((path) == null) || ((path.length()) == 0))" />
    <mutant id="mutant_3417" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="rs + 2" to="(rs + 2) - 1" />
    <mutant id="mutant_4748" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((uri) == null) || ((uri.length()) == 0)" to="!(((uri) == null) || ((uri.length()) == 0))" />
    <mutant id="mutant_3416" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="rs + 2" to="(rs + 2) * -1" />
    <mutant id="mutant_4747" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) + ref)" to="((((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) + ref) * -1)" />
    <mutant id="mutant_3415" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="(rs &gt;= 0) &amp;&amp; ((max--) &gt; 0)" to="!((rs &gt;= 0) &amp;&amp; ((max--) &gt; 0))" />
    <mutant id="mutant_4746" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) + ref)" to="((((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) + ref) + 1)" />
    <mutant id="mutant_3414" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((Constants.LOGS) + '/') + refname)" to="((((Constants.LOGS) + '/') + refname) + 1)" />
    <mutant id="mutant_4745" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) + ref)" to="((((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) + ref) - 1)" />
    <mutant id="mutant_3402" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;)" to="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + 1)" />
    <mutant id="mutant_4733" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(filename.substring(0, (index + 1))) + name" to="((filename.substring(0, (index + 1))) + name) * -1" />
    <mutant id="mutant_3401" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;)" to="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) - 1)" />
    <mutant id="mutant_4732" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(index + 1)" to="((index + 1) + 1)" />
    <mutant id="mutant_3400" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;)" to="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) * -1)" />
    <mutant id="mutant_4731" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(index + 1)" to="((index + 1) * -1)" />
    <mutant id="mutant_4730" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(index + 1)" to="((index + 1) - 1)" />
    <mutant id="mutant_3409" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((Constants.LOGS) + '/')" to="(((Constants.LOGS) + '/') * -1)" />
    <mutant id="mutant_3408" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) + &quot;]&quot;" to="((((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_4739" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="((ref + &quot;:&quot;) + path)" to="(((ref + &quot;:&quot;) + path) - 1)" />
    <mutant id="mutant_3407" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) + &quot;]&quot;" to="((((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_4738" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="(ref + &quot;:&quot;)" to="((ref + &quot;:&quot;) - 1)" />
    <mutant id="mutant_3406" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) + &quot;]&quot;" to="((((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_4737" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="(ref + &quot;:&quot;)" to="((ref + &quot;:&quot;) + 1)" />
    <mutant id="mutant_3405" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment()))" to="((((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) - 1)" />
    <mutant id="mutant_4736" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="(ref + &quot;:&quot;)" to="((ref + &quot;:&quot;) * -1)" />
    <mutant id="mutant_3404" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment()))" to="((((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) + 1)" />
    <mutant id="mutant_4735" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(filename.substring(0, (index + 1))) + name" to="((filename.substring(0, (index + 1))) + name) - 1" />
    <mutant id="mutant_3403" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment()))" to="((((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) * -1)" />
    <mutant id="mutant_4734" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(filename.substring(0, (index + 1))) + name" to="((filename.substring(0, (index + 1))) + name) + 1" />
    <mutant id="mutant_4722" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="((groups == null) || ((groups.length()) == 0)) || (groups.equals(&quot;default&quot;))" to="!(((groups == null) || ((groups.length()) == 0)) || (groups.equals(&quot;default&quot;)))" />
    <mutant id="mutant_4721" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="((groups == null) || ((groups.length()) == 0))" to="(!((groups == null) || ((groups.length()) == 0)))" />
    <mutant id="mutant_4720" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex + 1)" to="((lastIndex + 1) + 1)" />
    <mutant id="mutant_4729" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="(remoteUrl + (proj.getName()))" to="((remoteUrl + (proj.getName())) + 1)" />
    <mutant id="mutant_4728" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="(remoteUrl + (proj.getName()))" to="((remoteUrl + (proj.getName())) - 1)" />
    <mutant id="mutant_4727" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="(remoteUrl + (proj.getName()))" to="((remoteUrl + (proj.getName())) * -1)" />
    <mutant id="mutant_4726" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="remoteUrl + &quot;/&quot;" to="(remoteUrl + &quot;/&quot;) + 1" />
    <mutant id="mutant_4725" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="remoteUrl + &quot;/&quot;" to="(remoteUrl + &quot;/&quot;) - 1" />
    <mutant id="mutant_4724" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="remoteUrl + &quot;/&quot;" to="(remoteUrl + &quot;/&quot;) * -1" />
    <mutant id="mutant_4723" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.inGroups(org.eclipse.jgit.gitrepo.RepoProject)" from="(plusGroups.isEmpty()) || (plusGroups.contains(&quot;all&quot;))" to="!((plusGroups.isEmpty()) || (plusGroups.contains(&quot;all&quot;)))" />
    <mutant id="mutant_4711" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.isIgnored(java.lang.String,boolean,boolean)" from="(rules.size()) - 1" to="((rules.size()) - 1) + 1" />
    <mutant id="mutant_4710" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.isIgnored(java.lang.String,boolean,boolean)" from="(rules.size()) - 1" to="((rules.size()) - 1) - 1" />
    <mutant id="mutant_4719" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex + 1)" to="((lastIndex + 1) - 1)" />
    <mutant id="mutant_4718" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex + 1)" to="((lastIndex + 1) * -1)" />
    <mutant id="mutant_4717" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex &gt;= 0) &amp;&amp; ((baseUrl.charAt(lastIndex)) == '/')" to="!((lastIndex &gt;= 0) &amp;&amp; ((baseUrl.charAt(lastIndex)) == '/'))" />
    <mutant id="mutant_4716" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(baseUrl.length()) - 1" to="((baseUrl.length()) - 1) - 1" />
    <mutant id="mutant_4715" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(baseUrl.length()) - 1" to="((baseUrl.length()) - 1) * -1" />
    <mutant id="mutant_4714" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(baseUrl.length()) - 1" to="((baseUrl.length()) - 1) + 1" />
    <mutant id="mutant_4713" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.equals(&quot;/&quot;)))" to="!((((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.equals(&quot;/&quot;))))" />
    <mutant id="mutant_4712" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;))))" to="(!(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))))" />
    <mutant id="mutant_3460" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((int)((tableSize) * 0.1))" to="((int)(((tableSize) * 0.1))) + 1" />
    <mutant id="mutant_4791" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((((hh.getNewStartLine()) - 1) + pos) * -1)" />
    <mutant id="mutant_4790" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(((hh.getNewStartLine()) - 1) * -1)" />
    <mutant id="mutant_2125" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(oldDirLen + dirIdx)" to="((oldDirLen + dirIdx) - 1)" />
    <mutant id="mutant_3457" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache.add(org.eclipse.jgit.lib.AnyObjectId)" from="((t.bits) + 1)" to="(((t.bits) + 1) * -1)" />
    <mutant id="mutant_4788" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(((hh.getNewStartLine()) - 1) + 1)" />
    <mutant id="mutant_2126" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.addIfAbsent(Q)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_3456" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache$Table(int)" from="32 - bits" to="(32 - bits) * -1" />
    <mutant id="mutant_4787" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((lhrt.size()) - 1)" to="(((lhrt.size()) - 1) * -1)" />
    <mutant id="mutant_2123" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(oldDirLen + dirIdx)" to="((oldDirLen + dirIdx) + 1)" />
    <mutant id="mutant_3455" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache$Table(int)" from="32 - bits" to="(32 - bits) + 1" />
    <mutant id="mutant_4786" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((lhrt.size()) - 1)" to="(((lhrt.size()) - 1) + 1)" />
    <mutant id="mutant_2124" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(oldDirLen + dirIdx)" to="((oldDirLen + dirIdx) * -1)" />
    <mutant id="mutant_3454" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache$Table(int)" from="32 - bits" to="(32 - bits) - 1" />
    <mutant id="mutant_4785" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((lhrt.size()) - 1)" to="(((lhrt.size()) - 1) - 1)" />
    <mutant id="mutant_2121" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(1 &lt;&lt; (bits)) - 1" to="((1 &lt;&lt; (bits)) - 1) - 1" />
    <mutant id="mutant_3453" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.checkValidEndOfStream(java.io.InputStream,java.util.zip.Inflater,org.eclipse.jgit.lib.AnyObjectId,byte[])" from="((inf.getRemaining()) != 0) || ((in.read()) != (-1))" to="!(((inf.getRemaining()) != 0) || ((in.read()) != (-1)))" />
    <mutant id="mutant_4784" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((fh.getHunks().size()) - 1)" to="(((fh.getHunks().size()) - 1) + 1)" />
    <mutant id="mutant_2122" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(1 &lt;&lt; (bits)) - 1" to="((1 &lt;&lt; (bits)) - 1) * -1" />
    <mutant id="mutant_3452" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(size &lt; (wc.getStreamFileThreshold())) || (path == null)" to="!((size &lt; (wc.getStreamFileThreshold())) || (path == null))" />
    <mutant id="mutant_4783" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((fh.getHunks().size()) - 1)" to="(((fh.getHunks().size()) - 1) - 1)" />
    <mutant id="mutant_3451" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size)" to="!((path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size))" />
    <mutant id="mutant_4782" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((fh.getHunks().size()) - 1)" to="(((fh.getHunks().size()) - 1) * -1)" />
    <mutant id="mutant_2120" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(1 &lt;&lt; (bits)) - 1" to="((1 &lt;&lt; (bits)) - 1) + 1" />
    <mutant id="mutant_3450" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((data.length) - n)" to="(((data.length) - n) - 1)" />
    <mutant id="mutant_4781" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(c != null) &amp;&amp; ((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode())))" to="!((c != null) &amp;&amp; ((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode()))))" />
    <mutant id="mutant_2129" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.get(org.eclipse.jgit.lib.AnyObjectId)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_2127" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.addIfAbsent(Q)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_3459" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache.add(org.eclipse.jgit.lib.AnyObjectId)" from="((t.bits) + 1)" to="(((t.bits) + 1) - 1)" />
    <mutant id="mutant_2128" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.addIfAbsent(Q)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_3458" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache.add(org.eclipse.jgit.lib.AnyObjectId)" from="((t.bits) + 1)" to="(((t.bits) + 1) + 1)" />
    <mutant id="mutant_4789" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(((hh.getNewStartLine()) - 1) - 1)" />
    <mutant id="mutant_4780" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode())))" to="(!((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode()))))" />
    <mutant id="mutant_2114" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" to="(!((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))))" />
    <mutant id="mutant_3446" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="avail - (p.value)" to="(avail - (p.value)) + 1" />
    <mutant id="mutant_4777" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((update) &amp;&amp; ((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null))" to="(!((update) &amp;&amp; ((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null)))" />
    <mutant id="mutant_2115" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5)))" to="(!(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))))" />
    <mutant id="mutant_3445" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="avail - (p.value)" to="(avail - (p.value)) * -1" />
    <mutant id="mutant_4776" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null)) &amp;&amp; (f.isEntryIgnored())" to="!((((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null)) &amp;&amp; (f.isEntryIgnored()))" />
    <mutant id="mutant_2112" viable="false" in="?" from="32 - (ObjectIdOwnerMap.SEGMENT_BITS)" to="(32 - (ObjectIdOwnerMap.SEGMENT_BITS)) - 1" />
    <mutant id="mutant_3444" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(size &lt; (wc.getStreamFileThreshold())) || (path == null)" to="!((size &lt; (wc.getStreamFileThreshold())) || (path == null))" />
    <mutant id="mutant_4775" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null))" to="(!(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null)))" />
    <mutant id="mutant_2113" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" to="(!(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))))" />
    <mutant id="mutant_3443" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size)" to="!((path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size))" />
    <mutant id="mutant_4774" viable="true" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="((message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))) + 1" />
    <mutant id="mutant_2110" viable="false" in="?" from="32 - (ObjectIdOwnerMap.SEGMENT_BITS)" to="(32 - (ObjectIdOwnerMap.SEGMENT_BITS)) + 1" />
    <mutant id="mutant_3442" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="((fb &amp; 143) == 8) &amp;&amp; ((((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31) == 0)" to="!(((fb &amp; 143) == 8) &amp;&amp; ((((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31) == 0))" />
    <mutant id="mutant_4773" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="((message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))) - 1" />
    <mutant id="mutant_2111" viable="false" in="?" from="32 - (ObjectIdOwnerMap.SEGMENT_BITS)" to="(32 - (ObjectIdOwnerMap.SEGMENT_BITS)) * -1" />
    <mutant id="mutant_3441" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31)" to="((((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31) + 1)" />
    <mutant id="mutant_4772" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="((message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))) * -1" />
    <mutant id="mutant_3440" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31)" to="((((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31) - 1)" />
    <mutant id="mutant_4771" viable="true" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;)" to="((message + &quot;. &quot;) + 1)" />
    <mutant id="mutant_4770" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;)" to="((message + &quot;. &quot;) * -1)" />
    <mutant id="mutant_2118" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.computeGrowAt(int)" from="(bits + (ObjectIdOwnerMap.SEGMENT_BITS))" to="((bits + (ObjectIdOwnerMap.SEGMENT_BITS)) - 1)" />
    <mutant id="mutant_2119" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.computeGrowAt(int)" from="(bits + (ObjectIdOwnerMap.SEGMENT_BITS))" to="((bits + (ObjectIdOwnerMap.SEGMENT_BITS)) + 1)" />
    <mutant id="mutant_3449" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((data.length) - n)" to="(((data.length) - n) * -1)" />
    <mutant id="mutant_2116" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1))" to="!((((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1)))" />
    <mutant id="mutant_3448" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((data.length) - n)" to="(((data.length) - n) + 1)" />
    <mutant id="mutant_4779" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((c == null) || ((c.getDirCacheEntry()) == null)) || (!(c.getDirCacheEntry().isAssumeValid()))" to="!(((c == null) || ((c.getDirCacheEntry()) == null)) || (!(c.getDirCacheEntry().isAssumeValid())))" />
    <mutant id="mutant_2117" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.computeGrowAt(int)" from="(bits + (ObjectIdOwnerMap.SEGMENT_BITS))" to="((bits + (ObjectIdOwnerMap.SEGMENT_BITS)) * -1)" />
    <mutant id="mutant_3447" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="avail - (p.value)" to="(avail - (p.value)) - 1" />
    <mutant id="mutant_4778" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((c == null) || ((c.getDirCacheEntry()) == null))" to="(!((c == null) || ((c.getDirCacheEntry()) == null)))" />
    <mutant id="mutant_2103" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 2)" to="((p + 2) * -1)" />
    <mutant id="mutant_3435" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName))))" to="(!((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))))" />
    <mutant id="mutant_4766" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="((message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))) * -1" />
    <mutant id="mutant_2104" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 3)" to="((p + 3) + 1)" />
    <mutant id="mutant_3434" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))" to="(!((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName))))" />
    <mutant id="mutant_4765" viable="true" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;)" to="((message + &quot;. &quot;) + 1)" />
    <mutant id="mutant_2101" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 2)" to="((p + 2) - 1)" />
    <mutant id="mutant_3433" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.refLockFor(java.lang.String)" from="name + (LockFile.SUFFIX)" to="(name + (LockFile.SUFFIX)) + 1" />
    <mutant id="mutant_4764" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;)" to="((message + &quot;. &quot;) * -1)" />
    <mutant id="mutant_2102" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 2)" to="((p + 2) + 1)" />
    <mutant id="mutant_3432" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.refLockFor(java.lang.String)" from="name + (LockFile.SUFFIX)" to="(name + (LockFile.SUFFIX)) - 1" />
    <mutant id="mutant_4763" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;)" to="((message + &quot;. &quot;) - 1)" />
    <mutant id="mutant_3431" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.refLockFor(java.lang.String)" from="name + (LockFile.SUFFIX)" to="(name + (LockFile.SUFFIX)) * -1" />
    <mutant id="mutant_4762" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject.getPathWithSlash()" from="(path) + &quot;/&quot;" to="((path) + &quot;/&quot;) + 1" />
    <mutant id="mutant_2100" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_3430" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))) || (refName.equals(org.eclipse.jgit.lib.Constants.R_STASH))" to="!((((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))) || (refName.equals(org.eclipse.jgit.lib.Constants.R_STASH)))" />
    <mutant id="mutant_4761" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject.getPathWithSlash()" from="(path) + &quot;/&quot;" to="((path) + &quot;/&quot;) * -1" />
    <mutant id="mutant_4760" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject.getPathWithSlash()" from="(path) + &quot;/&quot;" to="((path) + &quot;/&quot;) - 1" />
    <mutant id="mutant_2109" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 4)" to="((p + 4) + 1)" />
    <mutant id="mutant_2107" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 4)" to="((p + 4) * -1)" />
    <mutant id="mutant_3439" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31)" to="((((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31) * -1)" />
    <mutant id="mutant_2108" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 4)" to="((p + 4) - 1)" />
    <mutant id="mutant_3438" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(org.eclipse.jgit.lib.RefUpdate,java.lang.String,boolean)" from="deref &amp;&amp; (ref.isSymbolic())" to="!(deref &amp;&amp; (ref.isSymbolic()))" />
    <mutant id="mutant_4769" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;)" to="((message + &quot;. &quot;) - 1)" />
    <mutant id="mutant_2105" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 3)" to="((p + 3) * -1)" />
    <mutant id="mutant_3437" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="(!(dir.mkdirs())) &amp;&amp; (!(dir.isDirectory()))" to="!((!(dir.mkdirs())) &amp;&amp; (!(dir.isDirectory())))" />
    <mutant id="mutant_4768" viable="true" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="((message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))) + 1" />
    <mutant id="mutant_2106" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 3)" to="((p + 3) - 1)" />
    <mutant id="mutant_3436" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))) || (log.isFile())" to="!(((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))) || (log.isFile()))" />
    <mutant id="mutant_4767" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="((message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))) - 1" />
    <mutant id="mutant_3424" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="((Constants.LOGS) + '/')" to="(((Constants.LOGS) + '/') - 1)" />
    <mutant id="mutant_4755" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="((path) + &quot;/&quot;)" to="(((path) + &quot;/&quot;) - 1)" />
    <mutant id="mutant_3423" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="((Constants.LOGS) + '/')" to="(((Constants.LOGS) + '/') + 1)" />
    <mutant id="mutant_4754" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="((path) + &quot;/&quot;)" to="(((path) + &quot;/&quot;) * -1)" />
    <mutant id="mutant_3422" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="((Constants.LOGS) + '/')" to="(((Constants.LOGS) + '/') * -1)" />
    <mutant id="mutant_4753" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="((path) + &quot;/&quot;)" to="(((path) + &quot;/&quot;) + 1)" />
    <mutant id="mutant_3421" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntry(int)" from="rs + 2" to="(rs + 2) + 1" />
    <mutant id="mutant_4752" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="(((Constants.HEAD) + &quot;^{commit}&quot;) - 1)" />
    <mutant id="mutant_3420" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntry(int)" from="rs + 2" to="(rs + 2) - 1" />
    <mutant id="mutant_4751" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="(((Constants.HEAD) + &quot;^{commit}&quot;) * -1)" />
    <mutant id="mutant_4750" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="(((Constants.HEAD) + &quot;^{commit}&quot;) + 1)" />
    <mutant id="mutant_3429" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES)))" to="(!(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))))" />
    <mutant id="mutant_3428" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" to="(!((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))))" />
    <mutant id="mutant_4759" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(groups != null) &amp;&amp; ((groups.length()) &gt; 0)" to="!((groups != null) &amp;&amp; ((groups.length()) &gt; 0))" />
    <mutant id="mutant_3427" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="(((Constants.LOGS) + '/') + (Constants.R_REFS))" to="((((Constants.LOGS) + '/') + (Constants.R_REFS)) + 1)" />
    <mutant id="mutant_4758" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="(((path) + &quot;/&quot;) + (src))" to="((((path) + &quot;/&quot;) + (src)) - 1)" />
    <mutant id="mutant_3426" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="(((Constants.LOGS) + '/') + (Constants.R_REFS))" to="((((Constants.LOGS) + '/') + (Constants.R_REFS)) * -1)" />
    <mutant id="mutant_4757" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="(((path) + &quot;/&quot;) + (src))" to="((((path) + &quot;/&quot;) + (src)) + 1)" />
    <mutant id="mutant_3425" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="(((Constants.LOGS) + '/') + (Constants.R_REFS))" to="((((Constants.LOGS) + '/') + (Constants.R_REFS)) - 1)" />
    <mutant id="mutant_4756" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="(((path) + &quot;/&quot;) + (src))" to="((((path) + &quot;/&quot;) + (src)) * -1)" />
    <mutant id="mutant_327" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;-Subproject commit &quot; + (ent.getOldId().name()))" to="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) * -1)" />
    <mutant id="mutant_328" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) + &quot;\n&quot;)" to="(((&quot;-Subproject commit &quot; + (ent.getOldId().name())) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_329" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) + &quot;\n&quot;)" to="(((&quot;-Subproject commit &quot; + (ent.getOldId().name())) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_323" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+++ &quot; + newp) + &quot;\n&quot;)" to="(((&quot;+++ &quot; + newp) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_324" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.setDetectRenames(boolean)" from="on &amp;&amp; ((renameDetector) == null)" to="!(on &amp;&amp; ((renameDetector) == null))" />
    <mutant id="mutant_325" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;-Subproject commit &quot; + (ent.getOldId().name()))" to="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) + 1)" />
    <mutant id="mutant_326" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;-Subproject commit &quot; + (ent.getOldId().name()))" to="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) - 1)" />
    <mutant id="mutant_3262" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(bucket - 1)" to="((bucket - 1) - 1)" />
    <mutant id="mutant_4593" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(slash) + path" to="((slash) + path) + 1" />
    <mutant id="mutant_3261" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="((int)(offset / (bucketSize)))" to="((int)((offset / (bucketSize)))) + 1" />
    <mutant id="mutant_4592" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(beginning) &amp;&amp; (!hasSlash)" to="!((beginning) &amp;&amp; (!hasSlash))" />
    <mutant id="mutant_3260" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="((int)(offset / (bucketSize)))" to="((int)((offset / (bucketSize)))) * -1" />
    <mutant id="mutant_4591" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="lastWildmatch + 1" to="(lastWildmatch + 1) * -1" />
    <mutant id="mutant_4590" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="lastWildmatch + 1" to="(lastWildmatch + 1) + 1" />
    <mutant id="mutant_3259" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="((int)(offset / (bucketSize)))" to="((int)((offset / (bucketSize)))) - 1" />
    <mutant id="mutant_3258" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="((insertion - 1) - 1)" />
    <mutant id="mutant_4589" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="lastWildmatch + 1" to="(lastWildmatch + 1) - 1" />
    <mutant id="mutant_3257" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="((insertion - 1) + 1)" />
    <mutant id="mutant_4588" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="left - 1" to="(left - 1) - 1" />
    <mutant id="mutant_3256" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="((insertion - 1) * -1)" />
    <mutant id="mutant_4587" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="left - 1" to="(left - 1) + 1" />
    <mutant id="mutant_3255" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="((insertion - 1) - 1)" />
    <mutant id="mutant_4586" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="left - 1" to="(left - 1) * -1" />
    <mutant id="mutant_3254" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="((insertion - 1) + 1)" />
    <mutant id="mutant_4585" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(right - left)" to="((right - left) - 1)" />
    <mutant id="mutant_3253" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="((insertion - 1) * -1)" />
    <mutant id="mutant_4584" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(right - left)" to="((right - left) * -1)" />
    <mutant id="mutant_3252" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="vi - 1" to="(vi - 1) + 1" />
    <mutant id="mutant_4583" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(right - left)" to="((right - left) + 1)" />
    <mutant id="mutant_320" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+++ &quot; + newp)" to="((&quot;+++ &quot; + newp) + 1)" />
    <mutant id="mutant_321" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+++ &quot; + newp) + &quot;\n&quot;)" to="(((&quot;+++ &quot; + newp) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_322" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+++ &quot; + newp) + &quot;\n&quot;)" to="(((&quot;+++ &quot; + newp) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_338" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aStartLine + 1)" to="((aStartLine + 1) + 1)" />
    <mutant id="mutant_339" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aStartLine + 1)" to="((aStartLine + 1) - 1)" />
    <mutant id="mutant_334" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) + &quot;\n&quot;)" to="(((&quot;+Subproject commit &quot; + (ent.getNewId().name())) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_335" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) + &quot;\n&quot;)" to="(((&quot;+Subproject commit &quot; + (ent.getNewId().name())) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_336" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) + &quot;\n&quot;)" to="(((&quot;+Subproject commit &quot; + (ent.getNewId().name())) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_337" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aStartLine + 1)" to="((aStartLine + 1) * -1)" />
    <mutant id="mutant_3251" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="vi - 1" to="(vi - 1) - 1" />
    <mutant id="mutant_4582" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="match &amp;&amp; ((matcher + 1) == (matchers.size()))" to="!(match &amp;&amp; ((matcher + 1) == (matchers.size())))" />
    <mutant id="mutant_3250" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="vi - 1" to="(vi - 1) * -1" />
    <mutant id="mutant_4581" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="((matcher + 1) - 1)" />
    <mutant id="mutant_4580" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="((matcher + 1) + 1)" />
    <mutant id="mutant_3248" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="oi + 1" to="(oi + 1) - 1" />
    <mutant id="mutant_4579" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="((matcher + 1) * -1)" />
    <mutant id="mutant_3247" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="oi + 1" to="(oi + 1) * -1" />
    <mutant id="mutant_4578" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(dirOnly) &amp;&amp; (!assumeDirectory)" to="!((dirOnly) &amp;&amp; (!assumeDirectory))" />
    <mutant id="mutant_3246" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(o / (bucketSize)))" to="((int)((o / (bucketSize)))) * -1" />
    <mutant id="mutant_4577" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher &lt; ((matchers.size()) - 1)) &amp;&amp; ((matchers.get(matcher)) == (PathMatcher.WILD))" to="!((matcher &lt; ((matchers.size()) - 1)) &amp;&amp; ((matchers.get(matcher)) == (PathMatcher.WILD)))" />
    <mutant id="mutant_3245" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(o / (bucketSize)))" to="((int)((o / (bucketSize)))) + 1" />
    <mutant id="mutant_4576" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 1)" to="(((matchers.size()) - 1) + 1)" />
    <mutant id="mutant_3244" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(o / (bucketSize)))" to="((int)((o / (bucketSize)))) - 1" />
    <mutant id="mutant_4575" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 1)" to="(((matchers.size()) - 1) - 1)" />
    <mutant id="mutant_3243" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(cnt)) + 1" to="(((int)(cnt)) + 1) - 1" />
    <mutant id="mutant_4574" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 1)" to="(((matchers.size()) - 1) * -1)" />
    <mutant id="mutant_3242" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(cnt)) + 1" to="(((int)(cnt)) + 1) + 1" />
    <mutant id="mutant_4573" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher == ((matchers.size()) - 2)) &amp;&amp; ((matchers.get((matcher + 1))) == (PathMatcher.WILD))" to="!((matcher == ((matchers.size()) - 2)) &amp;&amp; ((matchers.get((matcher + 1))) == (PathMatcher.WILD)))" />
    <mutant id="mutant_3241" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(cnt)) + 1" to="(((int)(cnt)) + 1) * -1" />
    <mutant id="mutant_4572" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="((matcher + 1) - 1)" />
    <mutant id="mutant_330" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) + &quot;\n&quot;)" to="(((&quot;-Subproject commit &quot; + (ent.getOldId().name())) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_331" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+Subproject commit &quot; + (ent.getNewId().name()))" to="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) * -1)" />
    <mutant id="mutant_332" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+Subproject commit &quot; + (ent.getNewId().name()))" to="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) + 1)" />
    <mutant id="mutant_333" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+Subproject commit &quot; + (ent.getNewId().name()))" to="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) - 1)" />
    <mutant id="mutant_3249" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="oi + 1" to="(oi + 1) + 1" />
    <mutant id="mutant_349" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeRange(char,int,int)" from="(begin - 1)" to="((begin - 1) + 1)" />
    <mutant id="mutant_345" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bStartLine + 1)" to="((bStartLine + 1) * -1)" />
    <mutant id="mutant_346" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bEndLine - bStartLine)" to="((bEndLine - bStartLine) - 1)" />
    <mutant id="mutant_347" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bEndLine - bStartLine)" to="((bEndLine - bStartLine) * -1)" />
    <mutant id="mutant_348" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bEndLine - bStartLine)" to="((bEndLine - bStartLine) + 1)" />
    <mutant id="mutant_3240" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt) + 1" to="((maxOffset / cnt) + 1) - 1" />
    <mutant id="mutant_4571" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="((matcher + 1) + 1)" />
    <mutant id="mutant_4570" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="((matcher + 1) * -1)" />
    <mutant id="mutant_3237" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt)" to="((maxOffset / cnt) + 1)" />
    <mutant id="mutant_4568" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 2)" to="(((matchers.size()) - 2) - 1)" />
    <mutant id="mutant_3236" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt)" to="((maxOffset / cnt) - 1)" />
    <mutant id="mutant_4567" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 2)" to="(((matchers.size()) - 2) * -1)" />
    <mutant id="mutant_3235" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt)" to="((maxOffset / cnt) * -1)" />
    <mutant id="mutant_4566" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.isSimplePathWithSegments(java.lang.String)" from="(!(org.eclipse.jgit.ignore.internal.Strings.isWildCard(path))) &amp;&amp; ((org.eclipse.jgit.ignore.internal.Strings.count(path, slash, true)) &gt; 0)" to="!((!(org.eclipse.jgit.ignore.internal.Strings.isWildCard(path))) &amp;&amp; ((org.eclipse.jgit.ignore.internal.Strings.count(path, slash, true)) &gt; 0))" />
    <mutant id="mutant_3234" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(cnt + 1)" to="((cnt + 1) - 1)" />
    <mutant id="mutant_4565" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.getFirstNotSlash(java.lang.String,int)" from="start + 1" to="(start + 1) + 1" />
    <mutant id="mutant_3233" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(cnt + 1)" to="((cnt + 1) + 1)" />
    <mutant id="mutant_4564" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.getFirstNotSlash(java.lang.String,int)" from="start + 1" to="(start + 1) - 1" />
    <mutant id="mutant_3232" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(cnt + 1)" to="((cnt + 1) * -1)" />
    <mutant id="mutant_4563" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.getFirstNotSlash(java.lang.String,int)" from="start + 1" to="(start + 1) * -1" />
    <mutant id="mutant_3231" viable="true" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.substring(0, ((n.length()) - 5))) + &quot;.keep&quot;)" to="(((n.substring(0, ((n.length()) - 5))) + &quot;.keep&quot;) + 1)" />
    <mutant id="mutant_4562" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="((i + startIncl) + 1)" />
    <mutant id="mutant_3230" viable="false" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.substring(0, ((n.length()) - 5))) + &quot;.keep&quot;)" to="(((n.substring(0, ((n.length()) - 5))) + &quot;.keep&quot;) * -1)" />
    <mutant id="mutant_4561" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="((i + startIncl) - 1)" />
    <mutant id="mutant_341" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aEndLine - aStartLine)" to="((aEndLine - aStartLine) - 1)" />
    <mutant id="mutant_5892" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="((p.pathLen) + 1)" to="(((p.pathLen) + 1) * -1)" />
    <mutant id="mutant_342" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aEndLine - aStartLine)" to="((aEndLine - aStartLine) * -1)" />
    <mutant id="mutant_5893" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="((p.pathLen) + 1)" to="(((p.pathLen) + 1) - 1)" />
    <mutant id="mutant_343" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bStartLine + 1)" to="((bStartLine + 1) + 1)" />
    <mutant id="mutant_5894" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="((p.pathLen) + 1)" to="(((p.pathLen) + 1) + 1)" />
    <mutant id="mutant_344" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bStartLine + 1)" to="((bStartLine + 1) - 1)" />
    <mutant id="mutant_5895" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="(treeStart) + (tree.getEntrySpan())" to="((treeStart) + (tree.getEntrySpan())) - 1" />
    <mutant id="mutant_5896" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="(treeStart) + (tree.getEntrySpan())" to="((treeStart) + (tree.getEntrySpan())) + 1" />
    <mutant id="mutant_5897" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="(treeStart) + (tree.getEntrySpan())" to="((treeStart) + (tree.getEntrySpan())) * -1" />
    <mutant id="mutant_3239" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt) + 1" to="((maxOffset / cnt) + 1) + 1" />
    <mutant id="mutant_5898" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="(((pathLen) + 1) * -1)" />
    <mutant id="mutant_340" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aEndLine - aStartLine)" to="((aEndLine - aStartLine) + 1)" />
    <mutant id="mutant_3238" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt) + 1" to="((maxOffset / cnt) + 1) * -1" />
    <mutant id="mutant_4569" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 2)" to="(((matchers.size()) - 2) + 1)" />
    <mutant id="mutant_5899" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="(((pathLen) + 1) - 1)" />
    <mutant id="mutant_356" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthA()" from="(endA) - (beginA)" to="((endA) - (beginA)) - 1" />
    <mutant id="mutant_357" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthA()" from="(endA) - (beginA)" to="((endA) - (beginA)) + 1" />
    <mutant id="mutant_358" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthA()" from="(endA) - (beginA)" to="((endA) - (beginA)) * -1" />
    <mutant id="mutant_5890" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(expLen - actLen)" to="((expLen - actLen) * -1)" />
    <mutant id="mutant_359" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthB()" from="(endB) - (beginB)" to="((endB) - (beginB)) + 1" />
    <mutant id="mutant_5891" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(expLen - actLen)" to="((expLen - actLen) - 1)" />
    <mutant id="mutant_4560" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="((i + startIncl) * -1)" />
    <mutant id="mutant_3226" viable="true" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.length()) - 5)" to="(((n.length()) - 5) * -1)" />
    <mutant id="mutant_4557" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="((endExcl - startIncl) * -1)" />
    <mutant id="mutant_5889" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(expLen - actLen)" to="((expLen - actLen) + 1)" />
    <mutant id="mutant_3225" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter.writeFanOutTable()" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_4556" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="((end &gt; 0) &amp;&amp; (end != (path.length()))) || assumeDirectory" to="!(((end &gt; 0) &amp;&amp; (end != (path.length()))) || assumeDirectory)" />
    <mutant id="mutant_3224" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter.writeFanOutTable()" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_4555" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="((end &gt; 0) &amp;&amp; (end != (path.length())))" to="(!((end &gt; 0) &amp;&amp; (end != (path.length()))))" />
    <mutant id="mutant_3223" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter.writeFanOutTable()" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_4554" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="(!(beginning)) &amp;&amp; (end != (path.length()))" to="!((!(beginning)) &amp;&amp; (end != (path.length())))" />
    <mutant id="mutant_3222" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter(java.io.OutputStream)" from="4 + (Constants.OBJECT_ID_LENGTH)" to="(4 + (Constants.OBJECT_ID_LENGTH)) * -1" />
    <mutant id="mutant_4553" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="endExcl - 1" to="(endExcl - 1) - 1" />
    <mutant id="mutant_3221" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter(java.io.OutputStream)" from="4 + (Constants.OBJECT_ID_LENGTH)" to="(4 + (Constants.OBJECT_ID_LENGTH)) - 1" />
    <mutant id="mutant_4552" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="endExcl - 1" to="(endExcl - 1) + 1" />
    <mutant id="mutant_3220" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter(java.io.OutputStream)" from="4 + (Constants.OBJECT_ID_LENGTH)" to="(4 + (Constants.OBJECT_ID_LENGTH)) + 1" />
    <mutant id="mutant_4551" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="endExcl - 1" to="(endExcl - 1) * -1" />
    <mutant id="mutant_4550" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="((endExcl - startIncl) - 1)" />
    <mutant id="mutant_352" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="(((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA)))" to="(!(((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))))" />
    <mutant id="mutant_5881" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(base + 4)" to="((base + 4) - 1)" />
    <mutant id="mutant_353" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB)))" to="(!((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB))))" />
    <mutant id="mutant_5882" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(base + 4)" to="((base + 4) + 1)" />
    <mutant id="mutant_354" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB))) &amp;&amp; ((this.endB) == (e.endB))" to="!(((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB))) &amp;&amp; ((this.endB) == (e.endB)))" />
    <mutant id="mutant_5883" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="len + pathLen" to="(len + pathLen) * -1" />
    <mutant id="mutant_355" viable="true" in="org.eclipse.jgit.diff.Edit.isEmpty()" from="((beginA) == (endA)) &amp;&amp; ((beginB) == (endB))" to="!(((beginA) == (endA)) &amp;&amp; ((beginB) == (endB)))" />
    <mutant id="mutant_5884" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="len + pathLen" to="(len + pathLen) - 1" />
    <mutant id="mutant_5885" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="len + pathLen" to="(len + pathLen) + 1" />
    <mutant id="mutant_3229" viable="false" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.substring(0, ((n.length()) - 5))) + &quot;.keep&quot;)" to="(((n.substring(0, ((n.length()) - 5))) + &quot;.keep&quot;) - 1)" />
    <mutant id="mutant_5886" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(actLen + 8)" to="((actLen + 8) * -1)" />
    <mutant id="mutant_350" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeRange(char,int,int)" from="(begin - 1)" to="((begin - 1) * -1)" />
    <mutant id="mutant_3228" viable="true" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.length()) - 5)" to="(((n.length()) - 5) + 1)" />
    <mutant id="mutant_4559" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="((endExcl - startIncl) - 1)" />
    <mutant id="mutant_5887" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(actLen + 8)" to="((actLen + 8) - 1)" />
    <mutant id="mutant_351" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeRange(char,int,int)" from="(begin - 1)" to="((begin - 1) - 1)" />
    <mutant id="mutant_3227" viable="true" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.length()) - 5)" to="(((n.length()) - 5) - 1)" />
    <mutant id="mutant_4558" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="((endExcl - startIncl) + 1)" />
    <mutant id="mutant_5888" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(actLen + 8)" to="((actLen + 8) + 1)" />
    <mutant id="mutant_367" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((t + &quot;(&quot;) + (beginA))" to="(((t + &quot;(&quot;) + (beginA)) + 1)" />
    <mutant id="mutant_368" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="(((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;)" to="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + 1)" />
    <mutant id="mutant_369" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;)" to="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) * -1)" />
    <mutant id="mutant_3299" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((packed.find(prefix)) + 1)" to="(((packed.find(prefix)) + 1) - 1)" />
    <mutant id="mutant_3298" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="name + '/'" to="(name + '/') + 1" />
    <mutant id="mutant_3297" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="name + '/'" to="(name + '/') * -1" />
    <mutant id="mutant_3296" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="name + '/'" to="(name + '/') - 1" />
    <mutant id="mutant_363" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="(t + &quot;(&quot;)" to="((t + &quot;(&quot;) + 1)" />
    <mutant id="mutant_364" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(t + &quot;(&quot;)" to="((t + &quot;(&quot;) - 1)" />
    <mutant id="mutant_365" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((t + &quot;(&quot;) + (beginA))" to="(((t + &quot;(&quot;) + (beginA)) * -1)" />
    <mutant id="mutant_366" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((t + &quot;(&quot;) + (beginA))" to="(((t + &quot;(&quot;) + (beginA)) - 1)" />
    <mutant id="mutant_360" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthB()" from="(endB) - (beginB)" to="((endB) - (beginB)) * -1" />
    <mutant id="mutant_361" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthB()" from="(endB) - (beginB)" to="((endB) - (beginB)) - 1" />
    <mutant id="mutant_362" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(t + &quot;(&quot;)" to="((t + &quot;(&quot;) * -1)" />
    <mutant id="mutant_378" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB))" to="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) - 1)" />
    <mutant id="mutant_379" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB))" to="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) * -1)" />
    <mutant id="mutant_3295" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="((lastSlash - 1) - 1)" />
    <mutant id="mutant_3294" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="((lastSlash - 1) * -1)" />
    <mutant id="mutant_3293" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="((lastSlash - 1) + 1)" />
    <mutant id="mutant_3292" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(loose.contains(needle)) || (packed.contains(needle))" to="!((loose.contains(needle)) || (packed.contains(needle)))" />
    <mutant id="mutant_3291" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanOne(java.lang.String)" from="(cur != n) &amp;&amp; ((newLoose) == null)" to="!((cur != n) &amp;&amp; ((newLoose) == null))" />
    <mutant id="mutant_3290" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((curLoose.find(prefix)) + 1)" to="(((curLoose.find(prefix)) + 1) + 1)" />
    <mutant id="mutant_3289" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((curLoose.find(prefix)) + 1)" to="(((curLoose.find(prefix)) + 1) * -1)" />
    <mutant id="mutant_3288" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((curLoose.find(prefix)) + 1)" to="(((curLoose.find(prefix)) + 1) - 1)" />
    <mutant id="mutant_3287" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="(prefix.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)) &amp;&amp; (prefix.endsWith(&quot;/&quot;))" to="!((prefix.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)) &amp;&amp; (prefix.endsWith(&quot;/&quot;)))" />
    <mutant id="mutant_3286" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((newLoose) == null) &amp;&amp; ((curIdx) &lt; (curLoose.size()))" to="!(((newLoose) == null) &amp;&amp; ((curIdx) &lt; (curLoose.size())))" />
    <mutant id="mutant_3285" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="((prefix + name) + 1)" />
    <mutant id="mutant_374" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;)" to="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) * -1)" />
    <mutant id="mutant_375" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;)" to="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) - 1)" />
    <mutant id="mutant_376" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;)" to="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + 1)" />
    <mutant id="mutant_377" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB))" to="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + 1)" />
    <mutant id="mutant_370" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;)" to="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) - 1)" />
    <mutant id="mutant_371" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA))" to="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) * -1)" />
    <mutant id="mutant_372" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA))" to="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + 1)" />
    <mutant id="mutant_373" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA))" to="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) - 1)" />
    <mutant id="mutant_389" viable="false" in="org.eclipse.jgit.diff.EditList.toString()" from="&quot;EditList&quot; + (super.toString())" to="(&quot;EditList&quot; + (super.toString())) * -1" />
    <mutant id="mutant_3284" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="((prefix + name) - 1)" />
    <mutant id="mutant_3283" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="((prefix + name) * -1)" />
    <mutant id="mutant_3282" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="((prefix + name) + 1)" />
    <mutant id="mutant_3281" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="((prefix + name) - 1)" />
    <mutant id="mutant_3280" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="((prefix + name) * -1)" />
    <mutant id="mutant_3279" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="((name.length()) - 1)" to="(((name.length()) - 1) - 1)" />
    <mutant id="mutant_380" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;)" to="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) * -1)" />
    <mutant id="mutant_3278" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="((name.length()) - 1)" to="(((name.length()) - 1) * -1)" />
    <mutant id="mutant_3277" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="((name.length()) - 1)" to="(((name.length()) - 1) + 1)" />
    <mutant id="mutant_3276" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="((ith + 1) * -1)" />
    <mutant id="mutant_3275" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="((ith + 1) - 1)" />
    <mutant id="mutant_3274" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="((ith + 1) + 1)" />
    <mutant id="mutant_385" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB))" to="(((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) - 1)" />
    <mutant id="mutant_386" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) + &quot;)&quot;" to="(((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) + &quot;)&quot;) + 1" />
    <mutant id="mutant_387" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) + &quot;)&quot;" to="(((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) + &quot;)&quot;) - 1" />
    <mutant id="mutant_388" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) + &quot;)&quot;" to="(((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) + &quot;)&quot;) * -1" />
    <mutant id="mutant_381" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;)" to="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + 1)" />
    <mutant id="mutant_382" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;)" to="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) - 1)" />
    <mutant id="mutant_383" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB))" to="(((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) * -1)" />
    <mutant id="mutant_384" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB))" to="(((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) + 1)" />
    <mutant id="mutant_3273" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="((ith + 1) * -1)" />
    <mutant id="mutant_3272" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="((ith + 1) - 1)" />
    <mutant id="mutant_3271" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="((ith + 1) + 1)" />
    <mutant id="mutant_3270" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="mid + 1" to="(mid + 1) - 1" />
    <mutant id="mutant_3269" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="mid + 1" to="(mid + 1) + 1" />
    <mutant id="mutant_390" viable="true" in="org.eclipse.jgit.diff.EditList.toString()" from="&quot;EditList&quot; + (super.toString())" to="(&quot;EditList&quot; + (super.toString())) + 1" />
    <mutant id="mutant_3268" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="mid + 1" to="(mid + 1) * -1" />
    <mutant id="mutant_4599" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="((pattern) + (FastIgnoreRule.PATH_SEPARATOR))" to="(((pattern) + (FastIgnoreRule.PATH_SEPARATOR)) - 1)" />
    <mutant id="mutant_391" viable="false" in="org.eclipse.jgit.diff.EditList.toString()" from="&quot;EditList&quot; + (super.toString())" to="(&quot;EditList&quot; + (super.toString())) - 1" />
    <mutant id="mutant_3267" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(low + high)" to="((low + high) - 1)" />
    <mutant id="mutant_4598" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="((pattern) + (FastIgnoreRule.PATH_SEPARATOR))" to="(((pattern) + (FastIgnoreRule.PATH_SEPARATOR)) * -1)" />
    <mutant id="mutant_3266" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(low + high)" to="((low + high) * -1)" />
    <mutant id="mutant_4597" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(dirOnly) &amp;&amp; (!assumeDirectory)" to="!((dirOnly) &amp;&amp; (!assumeDirectory))" />
    <mutant id="mutant_3265" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(low + high)" to="((low + high) + 1)" />
    <mutant id="mutant_4596" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(!(beginning)) &amp;&amp; hasSlash" to="!((!(beginning)) &amp;&amp; hasSlash)" />
    <mutant id="mutant_3264" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(bucket - 1)" to="((bucket - 1) * -1)" />
    <mutant id="mutant_4595" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(slash) + path" to="((slash) + path) - 1" />
    <mutant id="mutant_3263" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(bucket - 1)" to="((bucket - 1) + 1)" />
    <mutant id="mutant_4594" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(slash) + path" to="((slash) + path) * -1" />
    <mutant id="mutant_396" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diffRegion(org.eclipse.jgit.diff.Edit)" from="((queue.size()) - 1)" to="(((queue.size()) - 1) + 1)" />
    <mutant id="mutant_397" viable="false" in="?" from="28 + 8" to="(28 + 8) - 1" />
    <mutant id="mutant_398" viable="false" in="?" from="28 + 8" to="(28 + 8) * -1" />
    <mutant id="mutant_399" viable="false" in="?" from="28 + 8" to="(28 + 8) + 1" />
    <mutant id="mutant_392" viable="true" in="org.eclipse.jgit.diff.HashedSequenceComparator.equals(org.eclipse.jgit.diff.HashedSequence,int,org.eclipse.jgit.diff.HashedSequence,int)" from="((a.hashes[ai]) == (b.hashes[bi])) &amp;&amp; (cmp.equals(a.base, ai, b.base, bi))" to="!(((a.hashes[ai]) == (b.hashes[bi])) &amp;&amp; (cmp.equals(a.base, ai, b.base, bi)))" />
    <mutant id="mutant_393" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diff(org.eclipse.jgit.diff.Edit)" from="((r.getLengthA()) == 1) &amp;&amp; ((r.getLengthB()) == 1)" to="!(((r.getLengthA()) == 1) &amp;&amp; ((r.getLengthB()) == 1))" />
    <mutant id="mutant_394" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diffRegion(org.eclipse.jgit.diff.Edit)" from="((queue.size()) - 1)" to="(((queue.size()) - 1) * -1)" />
    <mutant id="mutant_395" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diffRegion(org.eclipse.jgit.diff.Edit)" from="((queue.size()) - 1)" to="(((queue.size()) - 1) - 1)" />
    <mutant id="mutant_9400" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="((a.length()) - (b.length())) * -1" />
    <mutant id="mutant_9440" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.read(byte[],int,int)" from="((block.count) - (blockPos))" to="(((block.count) - (blockPos)) - 1)" />
    <mutant id="mutant_8111" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="((((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) * -1)" />
    <mutant id="mutant_9443" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.skip(long)" from="((block.count) - (blockPos))" to="(((block.count) - (blockPos)) - 1)" />
    <mutant id="mutant_8110" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="((((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + 1)" />
    <mutant id="mutant_9444" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.skip(long)" from="((block.count) - (blockPos))" to="(((block.count) - (blockPos)) + 1)" />
    <mutant id="mutant_8113" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="((((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;) + 1" />
    <mutant id="mutant_9441" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.read(byte[],int,int)" from="((block.count) - (blockPos))" to="(((block.count) - (blockPos)) + 1)" />
    <mutant id="mutant_8112" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="((((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;) * -1" />
    <mutant id="mutant_9442" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.read(byte[],int,int)" from="((block.count) - (blockPos))" to="(((block.count) - (blockPos)) * -1)" />
    <mutant id="mutant_8104" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="((&quot;(&quot; + (a.toString())) * -1)" />
    <mutant id="mutant_9436" viable="true" in="org.eclipse.jgit.util.SystemReader.isMacOS()" from="(&quot;Mac OS X&quot;.equals(osDotName)) || (&quot;Darwin&quot;.equals(osDotName))" to="!((&quot;Mac OS X&quot;.equals(osDotName)) || (&quot;Darwin&quot;.equals(osDotName)))" />
    <mutant id="mutant_8103" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="((&quot;(&quot; + (a.toString())) - 1)" />
    <mutant id="mutant_9437" viable="false" in="?" from="8 * 1024" to="(8 * 1024) - 1" />
    <mutant id="mutant_8106" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + 1)" />
    <mutant id="mutant_9434" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(getTimeZone().getOffset(when)) / (60 * 1000)" to="((getTimeZone().getOffset(when)) / (60 * 1000)) - 1" />
    <mutant id="mutant_8105" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="((&quot;(&quot; + (a.toString())) + 1)" />
    <mutant id="mutant_9435" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(getTimeZone().getOffset(when)) / (60 * 1000)" to="((getTimeZone().getOffset(when)) / (60 * 1000)) + 1" />
    <mutant id="mutant_8108" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) * -1)" />
    <mutant id="mutant_8107" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) - 1)" />
    <mutant id="mutant_9438" viable="false" in="?" from="8 * 1024" to="(8 * 1024) * -1" />
    <mutant id="mutant_8109" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="((((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) - 1)" />
    <mutant id="mutant_9439" viable="false" in="?" from="8 * 1024" to="(8 * 1024) + 1" />
    <mutant id="mutant_8100" viable="false" in="org.eclipse.jgit.treewalk.filter.NotTreeFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="(&quot;NOT &quot; + (a.toString())) * -1" />
    <mutant id="mutant_9432" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(60 * 1000)" to="((60 * 1000) + 1)" />
    <mutant id="mutant_9433" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(getTimeZone().getOffset(when)) / (60 * 1000)" to="((getTimeZone().getOffset(when)) / (60 * 1000)) * -1" />
    <mutant id="mutant_8102" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.shouldBeRecursive()" from="(a.shouldBeRecursive()) || (b.shouldBeRecursive())" to="!((a.shouldBeRecursive()) || (b.shouldBeRecursive()))" />
    <mutant id="mutant_9430" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(60 * 1000)" to="((60 * 1000) * -1)" />
    <mutant id="mutant_8101" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(a.include(walker)) || (b.include(walker))" to="!((a.include(walker)) || (b.include(walker)))" />
    <mutant id="mutant_9431" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(60 * 1000)" to="((60 * 1000) - 1)" />
    <mutant id="mutant_9425" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_9426" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_9423" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_9424" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_9429" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="((i + 1) &lt; (buf.length)) &amp;&amp; ((in.charAt((i + 1))) == '\n')" to="!(((i + 1) &lt; (buf.length)) &amp;&amp; ((in.charAt((i + 1))) == '\n'))" />
    <mutant id="mutant_9427" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_9428" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_9421" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(lastIndex - 1)" to="((lastIndex - 1) * -1)" />
    <mutant id="mutant_9422" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(lastIndex - 1)" to="((lastIndex - 1) + 1)" />
    <mutant id="mutant_9420" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(lastIndex - 1)" to="((lastIndex - 1) - 1)" />
    <mutant id="mutant_9414" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue)))" to="(!(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue))))" />
    <mutant id="mutant_9415" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;off&quot;, stringValue))" to="!((((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;off&quot;, stringValue)))" />
    <mutant id="mutant_9412" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;on&quot;, stringValue))" to="!((((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;on&quot;, stringValue)))" />
    <mutant id="mutant_9413" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue)))" to="(!((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))))" />
    <mutant id="mutant_9418" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(parts.size()) - 1" to="((parts.size()) - 1) * -1" />
    <mutant id="mutant_9419" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(parts.size()) - 1" to="((parts.size()) - 1) - 1" />
    <mutant id="mutant_9416" viable="false" in="org.eclipse.jgit.util.StringUtils.capitalize(java.lang.String)" from="(str == null) || ((strLen = str.length()) == 0)" to="!((str == null) || ((strLen = str.length()) == 0))" />
    <mutant id="mutant_9417" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(parts.size()) - 1" to="((parts.size()) - 1) + 1" />
    <mutant id="mutant_9410" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue)))" to="(!((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))))" />
    <mutant id="mutant_9411" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue)))" to="(!(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue))))" />
    <mutant id="mutant_9409" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="((a.length()) - (b.length())) - 1" />
    <mutant id="mutant_9403" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(i &lt; (a.length())) &amp;&amp; (i &lt; (b.length()))" to="!((i &lt; (a.length())) &amp;&amp; (i &lt; (b.length())))" />
    <mutant id="mutant_9404" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.charAt(i)) - (b.charAt(i))" to="((a.charAt(i)) - (b.charAt(i))) - 1" />
    <mutant id="mutant_9401" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="((a.length()) - (b.length())) + 1" />
    <mutant id="mutant_9402" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="((a.length()) - (b.length())) - 1" />
    <mutant id="mutant_9407" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="((a.length()) - (b.length())) * -1" />
    <mutant id="mutant_9408" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="((a.length()) - (b.length())) + 1" />
    <mutant id="mutant_9405" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.charAt(i)) - (b.charAt(i))" to="((a.charAt(i)) - (b.charAt(i))) * -1" />
    <mutant id="mutant_9406" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.charAt(i)) - (b.charAt(i))" to="((a.charAt(i)) - (b.charAt(i))) + 1" />
    <mutant id="mutant_8151" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter$AnyDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.TreeFilter.AnyDiffFilter.baseTree)))" to="!(((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.TreeFilter.AnyDiffFilter.baseTree))))" />
    <mutant id="mutant_9483" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="((b.count) / 1024)" to="(((b.count) / 1024) + 1)" />
    <mutant id="mutant_8150" viable="false" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx)) + &quot;)&quot;" to="((&quot;SkipWorkTree(&quot; + (treeIdx)) + &quot;)&quot;) * -1" />
    <mutant id="mutant_9484" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="((b.count) / 1024)" to="(((b.count) / 1024) - 1)" />
    <mutant id="mutant_8153" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter.toString()" from="(lastDot + 1)" to="((lastDot + 1) + 1)" />
    <mutant id="mutant_9481" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.write(byte[],int,int)" from="((s.buffer.length) - (s.count))" to="(((s.buffer.length) - (s.count)) * -1)" />
    <mutant id="mutant_8152" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter.toString()" from="(lastDot + 1)" to="((lastDot + 1) - 1)" />
    <mutant id="mutant_9482" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="((b.count) / 1024)" to="(((b.count) / 1024) * -1)" />
    <mutant id="mutant_8155" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="(prefix != null) &amp;&amp; ((prefix.length) &gt; 0)" to="!((prefix != null) &amp;&amp; ((prefix.length) &gt; 0))" />
    <mutant id="mutant_9487" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.LITERAL.length))" to="((ptr + (BinaryHunk.LITERAL.length)) - 1)" />
    <mutant id="mutant_8154" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter.toString()" from="(lastDot + 1)" to="((lastDot + 1) * -1)" />
    <mutant id="mutant_9488" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.DELTA.length))" to="((ptr + (BinaryHunk.DELTA.length)) + 1)" />
    <mutant id="mutant_8157" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) + 1)" to="(((pathLen) + 1) - 1)" />
    <mutant id="mutant_9485" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.LITERAL.length))" to="((ptr + (BinaryHunk.LITERAL.length)) + 1)" />
    <mutant id="mutant_8156" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) + 1)" to="(((pathLen) + 1) * -1)" />
    <mutant id="mutant_9486" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.LITERAL.length))" to="((ptr + (BinaryHunk.LITERAL.length)) * -1)" />
    <mutant id="mutant_9480" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.write(byte[],int,int)" from="((s.buffer.length) - (s.count))" to="(((s.buffer.length) - (s.count)) + 1)" />
    <mutant id="mutant_8148" viable="true" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx)) + &quot;)&quot;" to="((&quot;SkipWorkTree(&quot; + (treeIdx)) + &quot;)&quot;) + 1" />
    <mutant id="mutant_8147" viable="false" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx))" to="((&quot;SkipWorkTree(&quot; + (treeIdx)) * -1)" />
    <mutant id="mutant_9478" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.switchToOverflow()" from="((blocks.size()) - 1)" to="(((blocks.size()) - 1) * -1)" />
    <mutant id="mutant_8149" viable="false" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx)) + &quot;)&quot;" to="((&quot;SkipWorkTree(&quot; + (treeIdx)) + &quot;)&quot;) - 1" />
    <mutant id="mutant_9479" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.write(byte[],int,int)" from="((s.buffer.length) - (s.count))" to="(((s.buffer.length) - (s.count)) - 1)" />
    <mutant id="mutant_8140" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="(a.length) - (b.length)" to="((a.length) - (b.length)) - 1" />
    <mutant id="mutant_9472" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.last()" from="((blocks.size()) - 1)" to="(((blocks.size()) - 1) * -1)" />
    <mutant id="mutant_9473" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.copy(java.io.InputStream)" from="((s.buffer.length) - (s.count))" to="(((s.buffer.length) - (s.count)) - 1)" />
    <mutant id="mutant_8142" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Single.toString()" from="&quot;FAST_&quot; + (path.toString())" to="(&quot;FAST_&quot; + (path.toString())) - 1" />
    <mutant id="mutant_9470" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.last()" from="((blocks.size()) - 1)" to="(((blocks.size()) - 1) + 1)" />
    <mutant id="mutant_8141" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Single.toString()" from="&quot;FAST_&quot; + (path.toString())" to="(&quot;FAST_&quot; + (path.toString())) * -1" />
    <mutant id="mutant_9471" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.last()" from="((blocks.size()) - 1)" to="(((blocks.size()) - 1) - 1)" />
    <mutant id="mutant_8144" viable="true" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(e == null) || (!(e.isSkipWorkTree()))" to="!((e == null) || (!(e.isSkipWorkTree())))" />
    <mutant id="mutant_9476" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.switchToOverflow()" from="((blocks.size()) - 1)" to="(((blocks.size()) - 1) + 1)" />
    <mutant id="mutant_8143" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Single.toString()" from="&quot;FAST_&quot; + (path.toString())" to="(&quot;FAST_&quot; + (path.toString())) + 1" />
    <mutant id="mutant_9477" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.switchToOverflow()" from="((blocks.size()) - 1)" to="(((blocks.size()) - 1) - 1)" />
    <mutant id="mutant_8146" viable="false" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx))" to="((&quot;SkipWorkTree(&quot; + (treeIdx)) - 1)" />
    <mutant id="mutant_9474" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.copy(java.io.InputStream)" from="((s.buffer.length) - (s.count))" to="(((s.buffer.length) - (s.count)) + 1)" />
    <mutant id="mutant_8145" viable="true" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx))" to="((&quot;SkipWorkTree(&quot; + (treeIdx)) + 1)" />
    <mutant id="mutant_9475" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.copy(java.io.InputStream)" from="((s.buffer.length) - (s.count))" to="(((s.buffer.length) - (s.count)) * -1)" />
    <mutant id="mutant_8137" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="ba - bb" to="(ba - bb) - 1" />
    <mutant id="mutant_9469" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) + (last.count)" to="(((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) + (last.count)) + 1" />
    <mutant id="mutant_8136" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="ba - bb" to="(ba - bb) * -1" />
    <mutant id="mutant_8139" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="(a.length) - (b.length)" to="((a.length) - (b.length)) + 1" />
    <mutant id="mutant_9467" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) + (last.count)" to="(((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) + (last.count)) - 1" />
    <mutant id="mutant_8138" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="(a.length) - (b.length)" to="((a.length) - (b.length)) * -1" />
    <mutant id="mutant_9468" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) + (last.count)" to="(((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) + (last.count)) * -1" />
    <mutant id="mutant_9461" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="(((long)(blocks.size())) - 1)" to="((((long)(blocks.size())) - 1) + 1)" />
    <mutant id="mutant_9462" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="(((long)(blocks.size())) - 1)" to="((((long)(blocks.size())) - 1) - 1)" />
    <mutant id="mutant_8131" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((newMax.length) - 1)" to="(((newMax.length) - 1) * -1)" />
    <mutant id="mutant_8130" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="(max.length) + 1" to="((max.length) + 1) + 1" />
    <mutant id="mutant_9460" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) + 1" to="(((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) + 1) * -1" />
    <mutant id="mutant_8133" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((newMax.length) - 1)" to="(((newMax.length) - 1) + 1)" />
    <mutant id="mutant_9465" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ))" to="(((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) + 1)" />
    <mutant id="mutant_8132" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((newMax.length) - 1)" to="(((newMax.length) - 1) - 1)" />
    <mutant id="mutant_9466" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ))" to="(((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) * -1)" />
    <mutant id="mutant_8135" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="ba - bb" to="(ba - bb) + 1" />
    <mutant id="mutant_9463" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="(((long)(blocks.size())) - 1)" to="((((long)(blocks.size())) - 1) * -1)" />
    <mutant id="mutant_8134" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="(i &lt; (a.length)) &amp;&amp; (i &lt; (b.length))" to="!((i &lt; (a.length)) &amp;&amp; (i &lt; (b.length)))" />
    <mutant id="mutant_9464" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ))" to="(((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) - 1)" />
    <mutant id="mutant_8126" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((pathFilters.length) / 5)" to="(((pathFilters.length) / 5) * -1)" />
    <mutant id="mutant_9458" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) + 1" to="(((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) + 1) + 1" />
    <mutant id="mutant_8125" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((pathFilters.length) / 5)" to="(((pathFilters.length) / 5) + 1)" />
    <mutant id="mutant_9459" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) + 1" to="(((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) + 1) - 1" />
    <mutant id="mutant_8128" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="(max.length) + 1" to="((max.length) + 1) - 1" />
    <mutant id="mutant_9456" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ))" to="(((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) - 1)" />
    <mutant id="mutant_8127" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((pathFilters.length) / 5)" to="(((pathFilters.length) / 5) - 1)" />
    <mutant id="mutant_9457" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ))" to="(((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) + 1)" />
    <mutant id="mutant_8129" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="(max.length) + 1" to="((max.length) + 1) * -1" />
    <mutant id="mutant_9450" viable="false" in="?" from="1024 * 1024" to="(1024 * 1024) + 1" />
    <mutant id="mutant_9451" viable="false" in="?" from="1024 * 1024" to="(1024 * 1024) - 1" />
    <mutant id="mutant_8120" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr)) + &quot;\&quot;)&quot;" to="((&quot;PATH(\&quot;&quot; + (pathStr)) + &quot;\&quot;)&quot;) - 1" />
    <mutant id="mutant_8122" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.create(java.lang.String)" from="((path.length()) - 1)" to="(((path.length()) - 1) + 1)" />
    <mutant id="mutant_9454" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="(estimatedSize - 1)" to="((estimatedSize - 1) * -1)" />
    <mutant id="mutant_8121" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr)) + &quot;\&quot;)&quot;" to="((&quot;PATH(\&quot;&quot; + (pathStr)) + &quot;\&quot;)&quot;) * -1" />
    <mutant id="mutant_9455" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ))" to="(((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) * -1)" />
    <mutant id="mutant_8124" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.create(java.lang.String)" from="((path.length()) - 1)" to="(((path.length()) - 1) - 1)" />
    <mutant id="mutant_9452" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="(estimatedSize - 1)" to="((estimatedSize - 1) - 1)" />
    <mutant id="mutant_8123" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.create(java.lang.String)" from="((path.length()) - 1)" to="(((path.length()) - 1) * -1)" />
    <mutant id="mutant_9453" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="(estimatedSize - 1)" to="((estimatedSize - 1) + 1)" />
    <mutant id="mutant_8115" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter.create(org.eclipse.jgit.treewalk.filter.TreeFilter,org.eclipse.jgit.treewalk.filter.TreeFilter)" from="(a == (TreeFilter.ALL)) || (b == (TreeFilter.ALL))" to="!((a == (TreeFilter.ALL)) || (b == (TreeFilter.ALL)))" />
    <mutant id="mutant_9447" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$LocalFile.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="((cnt / 1024) * -1)" />
    <mutant id="mutant_8114" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="((((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;) - 1" />
    <mutant id="mutant_9448" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$LocalFile.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="((cnt / 1024) - 1)" />
    <mutant id="mutant_8117" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr))" to="((&quot;PATH(\&quot;&quot; + (pathStr)) - 1)" />
    <mutant id="mutant_9445" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.skip(long)" from="((block.count) - (blockPos))" to="(((block.count) - (blockPos)) * -1)" />
    <mutant id="mutant_8116" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr))" to="((&quot;PATH(\&quot;&quot; + (pathStr)) + 1)" />
    <mutant id="mutant_9446" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$LocalFile.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="((cnt / 1024) + 1)" />
    <mutant id="mutant_8119" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr)) + &quot;\&quot;)&quot;" to="((&quot;PATH(\&quot;&quot; + (pathStr)) + &quot;\&quot;)&quot;) + 1" />
    <mutant id="mutant_8118" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr))" to="((&quot;PATH(\&quot;&quot; + (pathStr)) * -1)" />
    <mutant id="mutant_9449" viable="false" in="?" from="1024 * 1024" to="(1024 * 1024) * -1" />
    <mutant id="mutant_8195" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - ((b[bPos]) &amp; 255)" to="((org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - ((b[bPos]) &amp; 255)) - 1" />
    <mutant id="mutant_8194" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="(((a[aPos]) &amp; 255) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))) + 1" />
    <mutant id="mutant_8197" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - ((b[bPos]) &amp; 255)" to="((org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - ((b[bPos]) &amp; 255)) * -1" />
    <mutant id="mutant_8196" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - ((b[bPos]) &amp; 255)" to="((org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - ((b[bPos]) &amp; 255)) + 1" />
    <mutant id="mutant_8199" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="((org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))) - 1" />
    <mutant id="mutant_8198" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="((org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))) + 1" />
    <mutant id="mutant_5919" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="'/' - ((b[cPos]) &amp; 255)" to="('/' - ((b[cPos]) &amp; 255)) + 1" />
    <mutant id="mutant_8191" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="(((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)) + 1" />
    <mutant id="mutant_8190" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="(((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)) - 1" />
    <mutant id="mutant_8193" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="(((a[aPos]) &amp; 255) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))) - 1" />
    <mutant id="mutant_8192" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="(((a[aPos]) &amp; 255) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))) * -1" />
    <mutant id="mutant_5911" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="(pathOffset) + (s.nameLength())" to="((pathOffset) + (s.nameLength())) - 1" />
    <mutant id="mutant_5912" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="(pathOffset) + (s.nameLength())" to="((pathOffset) + (s.nameLength())) * -1" />
    <mutant id="mutant_5913" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="!((cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen))" />
    <mutant id="mutant_5914" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="(((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)) + 1" />
    <mutant id="mutant_5915" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="(((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)) - 1" />
    <mutant id="mutant_5916" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="(((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)) * -1" />
    <mutant id="mutant_5917" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="'/' - ((b[cPos]) &amp; 255)" to="('/' - ((b[cPos]) &amp; 255)) - 1" />
    <mutant id="mutant_5918" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="'/' - ((b[cPos]) &amp; 255)" to="('/' - ((b[cPos]) &amp; 255)) * -1" />
    <mutant id="mutant_5910" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="(pathOffset) + (s.nameLength())" to="((pathOffset) + (s.nameLength())) + 1" />
    <mutant id="mutant_8184" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="((hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)) + 1" />
    <mutant id="mutant_8183" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="((hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)) * -1" />
    <mutant id="mutant_8186" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getNameLength()" from="(pathLen) - (pathOffset)" to="((pathLen) - (pathOffset)) * -1" />
    <mutant id="mutant_8185" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getNameLength()" from="(pathLen) - (pathOffset)" to="((pathLen) - (pathOffset)) + 1" />
    <mutant id="mutant_8188" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="!((aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd))" />
    <mutant id="mutant_8187" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getNameLength()" from="(pathLen) - (pathOffset)" to="((pathLen) - (pathOffset)) - 1" />
    <mutant id="mutant_8189" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="(((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)) * -1" />
    <mutant id="mutant_5908" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="((nextSubtreePos) - 1)" to="(((nextSubtreePos) - 1) * -1)" />
    <mutant id="mutant_5909" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="((nextSubtreePos) - 1)" to="(((nextSubtreePos) - 1) - 1)" />
    <mutant id="mutant_8180" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="((pathLen) - 16)" to="(((pathLen) - 16) + 1)" />
    <mutant id="mutant_8182" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="((hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)) - 1" />
    <mutant id="mutant_8181" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="((pathLen) - 16)" to="(((pathLen) - 16) - 1)" />
    <mutant id="mutant_5900" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="(((pathLen) + 1) + 1)" />
    <mutant id="mutant_5901" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="(((pathLen) + 1) * -1)" />
    <mutant id="mutant_5902" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="(((pathLen) + 1) - 1)" />
    <mutant id="mutant_5903" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="(((pathLen) + 1) + 1)" />
    <mutant id="mutant_5904" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.back(int)" from="(currentSubtree.getEntrySpan()) - 1" to="((currentSubtree.getEntrySpan()) - 1) * -1" />
    <mutant id="mutant_5905" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.back(int)" from="(currentSubtree.getEntrySpan()) - 1" to="((currentSubtree.getEntrySpan()) - 1) + 1" />
    <mutant id="mutant_5906" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.back(int)" from="(currentSubtree.getEntrySpan()) - 1" to="((currentSubtree.getEntrySpan()) - 1) - 1" />
    <mutant id="mutant_5907" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="((nextSubtreePos) - 1)" to="(((nextSubtreePos) - 1) + 1)" />
    <mutant id="mutant_8173" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="(((pathOffset) - 1) - 1)" />
    <mutant id="mutant_8172" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="(((pathOffset) - 1) + 1)" />
    <mutant id="mutant_8175" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="(((pathOffset) - 1) + 1)" />
    <mutant id="mutant_8174" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="(((pathOffset) - 1) * -1)" />
    <mutant id="mutant_8177" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="(((pathOffset) - 1) * -1)" />
    <mutant id="mutant_8176" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="(((pathOffset) - 1) - 1)" />
    <mutant id="mutant_8179" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="((pathLen) - 16)" to="(((pathLen) - 16) * -1)" />
    <mutant id="mutant_8178" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.alreadyMatch(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(ap == null) || (bp == null)" to="!((ap == null) || (bp == null))" />
    <mutant id="mutant_8171" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(p.pathLen) + 1" to="((p.pathLen) + 1) + 1" />
    <mutant id="mutant_8170" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(p.pathLen) + 1" to="((p.pathLen) + 1) - 1" />
    <mutant id="mutant_8169" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(p.pathLen) + 1" to="((p.pathLen) + 1) * -1" />
    <mutant id="mutant_8162" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="(prefix != null) &amp;&amp; ((prefix.length()) &gt; 0)" to="!((prefix != null) &amp;&amp; ((prefix.length()) &gt; 0))" />
    <mutant id="mutant_9494" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.MODE.length))" to="((ptr + (CombinedFileHeader.MODE.length)) + 1)" />
    <mutant id="mutant_8161" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) - 1)" to="(((pathLen) - 1) + 1)" />
    <mutant id="mutant_9495" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.MODE.length))" to="((ptr + (CombinedFileHeader.MODE.length)) * -1)" />
    <mutant id="mutant_8164" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) + 1)" to="(((pathLen) + 1) - 1)" />
    <mutant id="mutant_9492" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.INDEX.length))" to="((ptr + (CombinedFileHeader.INDEX.length)) * -1)" />
    <mutant id="mutant_8163" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) + 1)" to="(((pathLen) + 1) * -1)" />
    <mutant id="mutant_9493" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.INDEX.length))" to="((ptr + (CombinedFileHeader.INDEX.length)) - 1)" />
    <mutant id="mutant_8166" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) - 1)" to="(((pathLen) - 1) * -1)" />
    <mutant id="mutant_9498" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.DELETED_FILE_MODE.length))" to="((ptr + (CombinedFileHeader.DELETED_FILE_MODE.length)) * -1)" />
    <mutant id="mutant_8165" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) + 1)" to="(((pathLen) + 1) + 1)" />
    <mutant id="mutant_9499" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.DELETED_FILE_MODE.length))" to="((ptr + (CombinedFileHeader.DELETED_FILE_MODE.length)) - 1)" />
    <mutant id="mutant_8168" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) - 1)" to="(((pathLen) - 1) + 1)" />
    <mutant id="mutant_9496" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.MODE.length))" to="((ptr + (CombinedFileHeader.MODE.length)) - 1)" />
    <mutant id="mutant_8167" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) - 1)" to="(((pathLen) - 1) - 1)" />
    <mutant id="mutant_9497" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.DELETED_FILE_MODE.length))" to="((ptr + (CombinedFileHeader.DELETED_FILE_MODE.length)) + 1)" />
    <mutant id="mutant_9490" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.DELTA.length))" to="((ptr + (BinaryHunk.DELTA.length)) - 1)" />
    <mutant id="mutant_9491" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.INDEX.length))" to="((ptr + (CombinedFileHeader.INDEX.length)) + 1)" />
    <mutant id="mutant_8160" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) - 1)" to="(((pathLen) - 1) - 1)" />
    <mutant id="mutant_8159" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) - 1)" to="(((pathLen) - 1) * -1)" />
    <mutant id="mutant_8158" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) + 1)" to="(((pathLen) + 1) + 1)" />
    <mutant id="mutant_9489" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.DELTA.length))" to="((ptr + (BinaryHunk.DELTA.length)) * -1)" />
    <mutant id="mutant_4623" viable="false" in="?" from="(&quot;[&quot; + (Strings.DL))" to="((&quot;[&quot; + (Strings.DL)) * -1)" />
    <mutant id="mutant_5955" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="(cIdx + (entrySpan)) + 1" />
    <mutant id="mutant_4622" viable="false" in="?" from="((&quot;[\\p{Print}&quot; + (Strings.DL)) + &quot;]&quot;)" to="(((&quot;[\\p{Print}&quot; + (Strings.DL)) + &quot;]&quot;) - 1)" />
    <mutant id="mutant_5956" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="(cIdx + (entrySpan)) - 1" />
    <mutant id="mutant_4621" viable="false" in="?" from="((&quot;[\\p{Print}&quot; + (Strings.DL)) + &quot;]&quot;)" to="(((&quot;[\\p{Print}&quot; + (Strings.DL)) + &quot;]&quot;) + 1)" />
    <mutant id="mutant_5957" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="(((ep.length) - pathOffset) * -1)" />
    <mutant id="mutant_4620" viable="false" in="?" from="((&quot;[\\p{Print}&quot; + (Strings.DL)) + &quot;]&quot;)" to="(((&quot;[\\p{Print}&quot; + (Strings.DL)) + &quot;]&quot;) * -1)" />
    <mutant id="mutant_5958" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="(((ep.length) - pathOffset) + 1)" />
    <mutant id="mutant_5959" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="(((ep.length) - pathOffset) - 1)" />
    <mutant id="mutant_4629" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(java.lang.String)" from="((pattern.indexOf('?')) != (-1)) || ((pattern.indexOf('\\')) != (-1))" to="!(((pattern.indexOf('?')) != (-1)) || ((pattern.indexOf('\\')) != (-1)))" />
    <mutant id="mutant_4628" viable="false" in="?" from="((&quot;[&quot; + (Strings.DL)) + &quot;_]&quot;)" to="(((&quot;[&quot; + (Strings.DL)) + &quot;_]&quot;) - 1)" />
    <mutant id="mutant_5950" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="(((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)) + 1" />
    <mutant id="mutant_4627" viable="false" in="?" from="((&quot;[&quot; + (Strings.DL)) + &quot;_]&quot;)" to="(((&quot;[&quot; + (Strings.DL)) + &quot;_]&quot;) + 1)" />
    <mutant id="mutant_5951" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="aLen - bLen" to="(aLen - bLen) + 1" />
    <mutant id="mutant_4626" viable="false" in="?" from="((&quot;[&quot; + (Strings.DL)) + &quot;_]&quot;)" to="(((&quot;[&quot; + (Strings.DL)) + &quot;_]&quot;) * -1)" />
    <mutant id="mutant_5952" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="aLen - bLen" to="(aLen - bLen) * -1" />
    <mutant id="mutant_4625" viable="false" in="?" from="(&quot;[&quot; + (Strings.DL))" to="((&quot;[&quot; + (Strings.DL)) - 1)" />
    <mutant id="mutant_5953" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="aLen - bLen" to="(aLen - bLen) - 1" />
    <mutant id="mutant_4624" viable="false" in="?" from="(&quot;[&quot; + (Strings.DL))" to="((&quot;[&quot; + (Strings.DL)) + 1)" />
    <mutant id="mutant_5954" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="(cIdx + (entrySpan)) * -1" />
    <mutant id="mutant_4612" viable="false" in="?" from="(&quot;[\\p{Graph}&quot; + (Strings.DL))" to="((&quot;[\\p{Graph}&quot; + (Strings.DL)) * -1)" />
    <mutant id="mutant_5944" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="(((ep.length) - pathOffset) * -1)" />
    <mutant id="mutant_4611" viable="false" in="?" from="(&quot;[\\p{Graph}&quot; + (Strings.DL))" to="((&quot;[\\p{Graph}&quot; + (Strings.DL)) + 1)" />
    <mutant id="mutant_5945" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="(((ep.length) - pathOffset) + 1)" />
    <mutant id="mutant_4610" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="(slashIdx &gt; 0) &amp;&amp; (slashIdx &lt; ((pattern.length()) - 1))" to="!((slashIdx &gt; 0) &amp;&amp; (slashIdx &lt; ((pattern.length()) - 1)))" />
    <mutant id="mutant_5946" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="(((ep.length) - pathOffset) - 1)" />
    <mutant id="mutant_5947" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="(aPos &lt; aLen) &amp;&amp; (bPos &lt; bLen)" to="!((aPos &lt; aLen) &amp;&amp; (bPos &lt; bLen))" />
    <mutant id="mutant_5948" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="(((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)) * -1" />
    <mutant id="mutant_5949" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="(((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)) - 1" />
    <mutant id="mutant_4619" viable="false" in="?" from="(&quot;[\\p{Print}&quot; + (Strings.DL))" to="((&quot;[\\p{Print}&quot; + (Strings.DL)) * -1)" />
    <mutant id="mutant_4618" viable="false" in="?" from="(&quot;[\\p{Print}&quot; + (Strings.DL))" to="((&quot;[\\p{Print}&quot; + (Strings.DL)) - 1)" />
    <mutant id="mutant_4617" viable="false" in="?" from="(&quot;[\\p{Print}&quot; + (Strings.DL))" to="((&quot;[\\p{Print}&quot; + (Strings.DL)) + 1)" />
    <mutant id="mutant_4616" viable="false" in="?" from="((&quot;[\\p{Graph}&quot; + (Strings.DL)) + &quot;]&quot;)" to="(((&quot;[\\p{Graph}&quot; + (Strings.DL)) + &quot;]&quot;) - 1)" />
    <mutant id="mutant_5940" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength()))" to="((pathOffset + (st.nameLength())) * -1)" />
    <mutant id="mutant_4615" viable="false" in="?" from="((&quot;[\\p{Graph}&quot; + (Strings.DL)) + &quot;]&quot;)" to="(((&quot;[\\p{Graph}&quot; + (Strings.DL)) + &quot;]&quot;) * -1)" />
    <mutant id="mutant_5941" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength())) + 1" to="((pathOffset + (st.nameLength())) + 1) - 1" />
    <mutant id="mutant_4614" viable="false" in="?" from="((&quot;[\\p{Graph}&quot; + (Strings.DL)) + &quot;]&quot;)" to="(((&quot;[\\p{Graph}&quot; + (Strings.DL)) + &quot;]&quot;) + 1)" />
    <mutant id="mutant_5942" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength())) + 1" to="((pathOffset + (st.nameLength())) + 1) + 1" />
    <mutant id="mutant_4613" viable="false" in="?" from="(&quot;[\\p{Graph}&quot; + (Strings.DL))" to="((&quot;[\\p{Graph}&quot; + (Strings.DL)) - 1)" />
    <mutant id="mutant_5943" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength())) + 1" to="((pathOffset + (st.nameLength())) + 1) * -1" />
    <mutant id="mutant_4601" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0))" to="(!((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0)))" />
    <mutant id="mutant_5933" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(alreadySorted &amp;&amp; (i &gt; 0)) &amp;&amp; ((DirCacheTree.TREE_CMP.compare(children[(i - 1)], children[i])) &gt; 0)" to="!((alreadySorted &amp;&amp; (i &gt; 0)) &amp;&amp; ((DirCacheTree.TREE_CMP.compare(children[(i - 1)], children[i])) &gt; 0))" />
    <mutant id="mutant_4600" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="((pattern) + (FastIgnoreRule.PATH_SEPARATOR))" to="(((pattern) + (FastIgnoreRule.PATH_SEPARATOR)) + 1)" />
    <mutant id="mutant_5934" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.contains(byte[],int,int)" from="(eOff &lt; eLen) &amp;&amp; (aOff &lt; aLen)" to="!((eOff &lt; eLen) &amp;&amp; (aOff &lt; aLen))" />
    <mutant id="mutant_5935" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="(cIdx + (entrySpan)) * -1" />
    <mutant id="mutant_5936" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="(cIdx + (entrySpan)) + 1" />
    <mutant id="mutant_5937" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="(cIdx + (entrySpan)) - 1" />
    <mutant id="mutant_5938" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength()))" to="((pathOffset + (st.nameLength())) - 1)" />
    <mutant id="mutant_5939" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength()))" to="((pathOffset + (st.nameLength())) + 1)" />
    <mutant id="mutant_4609" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) - 1)" />
    <mutant id="mutant_4608" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) * -1)" />
    <mutant id="mutant_4607" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) + 1)" />
    <mutant id="mutant_4606" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createNameMatcher0(java.lang.String,java.lang.Character,boolean)" from="(WildMatcher.WILDMATCH.equals(segment)) || (WildMatcher.WILDMATCH2.equals(segment))" to="!((WildMatcher.WILDMATCH.equals(segment)) || (WildMatcher.WILDMATCH2.equals(segment)))" />
    <mutant id="mutant_4605" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0)) &amp;&amp; ((matchers.get(((matchers.size()) - 1))) == (PathMatcher.WILD))" to="!(((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0)) &amp;&amp; ((matchers.get(((matchers.size()) - 1))) == (PathMatcher.WILD)))" />
    <mutant id="mutant_4604" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matchers.size()) - 1)" to="(((matchers.size()) - 1) + 1)" />
    <mutant id="mutant_5930" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_4603" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matchers.size()) - 1)" to="(((matchers.size()) - 1) - 1)" />
    <mutant id="mutant_5931" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_4602" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matchers.size()) - 1)" to="(((matchers.size()) - 1) * -1)" />
    <mutant id="mutant_5932" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_5922" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - '/'" to="(((a[cPos]) &amp; 255) - '/') + 1" />
    <mutant id="mutant_5923" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value))" to="((ptr - (off.value)) + 1)" />
    <mutant id="mutant_5924" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value))" to="((ptr - (off.value)) - 1)" />
    <mutant id="mutant_5925" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value))" to="((ptr - (off.value)) * -1)" />
    <mutant id="mutant_5926" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value)) - 1" to="((ptr - (off.value)) - 1) - 1" />
    <mutant id="mutant_5927" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value)) - 1" to="((ptr - (off.value)) - 1) + 1" />
    <mutant id="mutant_5928" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value)) - 1" to="((ptr - (off.value)) - 1) * -1" />
    <mutant id="mutant_5929" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(alreadySorted &amp;&amp; (i &gt; 0))" to="(!(alreadySorted &amp;&amp; (i &gt; 0)))" />
    <mutant id="mutant_5920" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - '/'" to="(((a[cPos]) &amp; 255) - '/') * -1" />
    <mutant id="mutant_5921" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - '/'" to="(((a[cPos]) &amp; 255) - '/') - 1" />
    <mutant id="mutant_4670" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.checkWildCards(java.lang.String)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) + 1)" />
    <mutant id="mutant_2004" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 10)" to="((fi + 10) * -1)" />
    <mutant id="mutant_3336" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(prefix + needle)" to="((prefix + needle) - 1)" />
    <mutant id="mutant_4667" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((sb.length()) - 4)" to="(((sb.length()) - 4) * -1)" />
    <mutant id="mutant_5999" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((childCnt) - 1)" to="(((childCnt) - 1) * -1)" />
    <mutant id="mutant_2005" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 10)" to="((fi + 10) - 1)" />
    <mutant id="mutant_3335" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(prefix + needle)" to="((prefix + needle) * -1)" />
    <mutant id="mutant_4666" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((lookBehind == '[') &amp;&amp; (!ignoreLastBracket)) || (lookBehind == '^')" to="!(((lookBehind == '[') &amp;&amp; (!ignoreLastBracket)) || (lookBehind == '^'))" />
    <mutant id="mutant_2002" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 9)" to="((si + 9) + 1)" />
    <mutant id="mutant_3334" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newUpdate(java.lang.String,boolean)" from="detach &amp;&amp; (ref.isSymbolic())" to="!(detach &amp;&amp; (ref.isSymbolic()))" />
    <mutant id="mutant_4665" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((lookBehind == '[') &amp;&amp; (!ignoreLastBracket))" to="(!((lookBehind == '[') &amp;&amp; (!ignoreLastBracket)))" />
    <mutant id="mutant_2003" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)])))" to="(!(((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))))" />
    <mutant id="mutant_3333" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newTemporaryUpdate()" from="(Constants.R_REFS) + (tmp.getName())" to="((Constants.R_REFS) + (tmp.getName())) * -1" />
    <mutant id="mutant_4664" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="(lookAhead == ']') || (lookAhead == '[')" to="!((lookAhead == ']') || (lookAhead == '['))" />
    <mutant id="mutant_2000" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 9)" to="((si + 9) - 1)" />
    <mutant id="mutant_3332" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newTemporaryUpdate()" from="(Constants.R_REFS) + (tmp.getName())" to="((Constants.R_REFS) + (tmp.getName())) - 1" />
    <mutant id="mutant_4663" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((org.eclipse.jgit.ignore.internal.Strings.lookBehind(sb)) == '[') &amp;&amp; (java.lang.Character.isLetter(org.eclipse.jgit.ignore.internal.Strings.lookAhead(pattern, i)))" to="!(((org.eclipse.jgit.ignore.internal.Strings.lookBehind(sb)) == '[') &amp;&amp; (java.lang.Character.isLetter(org.eclipse.jgit.ignore.internal.Strings.lookAhead(pattern, i))))" />
    <mutant id="mutant_2001" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 9)" to="((si + 9) * -1)" />
    <mutant id="mutant_3331" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newTemporaryUpdate()" from="(Constants.R_REFS) + (tmp.getName())" to="((Constants.R_REFS) + (tmp.getName())) + 1" />
    <mutant id="mutant_4662" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="seenEscape || (in_brackets &gt; 0)" to="!(seenEscape || (in_brackets &gt; 0))" />
    <mutant id="mutant_3330" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getPackedRefs()" from="(packedRefs.compareAndSet(curList, newList)) &amp;&amp; (!(curList.id.equals(newList.id)))" to="!((packedRefs.compareAndSet(curList, newList)) &amp;&amp; (!(curList.id.equals(newList.id))))" />
    <mutant id="mutant_4661" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="seenEscape || (in_brackets &gt; 0)" to="!(seenEscape || (in_brackets &gt; 0))" />
    <mutant id="mutant_4660" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right + 1)" to="((right + 1) - 1)" />
    <mutant id="mutant_5991" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(p - pathOff)" to="((p - pathOff) - 1)" />
    <mutant id="mutant_5992" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff + (st.nameLength()))" to="((pathOff + (st.nameLength())) - 1)" />
    <mutant id="mutant_5993" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff + (st.nameLength()))" to="((pathOff + (st.nameLength())) * -1)" />
    <mutant id="mutant_5994" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff + (st.nameLength()))" to="((pathOff + (st.nameLength())) + 1)" />
    <mutant id="mutant_2008" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 10)" to="((si + 10) + 1)" />
    <mutant id="mutant_5995" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((pathOff + (st.nameLength())) + 1)" to="(((pathOff + (st.nameLength())) + 1) - 1)" />
    <mutant id="mutant_2009" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 10)" to="((si + 10) * -1)" />
    <mutant id="mutant_3339" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix))) &amp;&amp; ((e.getCause()) instanceof org.eclipse.jgit.errors.InvalidObjectIdException))" to="(!(((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix))) &amp;&amp; ((e.getCause()) instanceof org.eclipse.jgit.errors.InvalidObjectIdException)))" />
    <mutant id="mutant_5996" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((pathOff + (st.nameLength())) + 1)" to="(((pathOff + (st.nameLength())) + 1) * -1)" />
    <mutant id="mutant_2006" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 10)" to="((fi + 10) + 1)" />
    <mutant id="mutant_3338" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix)))" to="(!((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix))))" />
    <mutant id="mutant_4669" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((sb.length()) - 4)" to="(((sb.length()) - 4) + 1)" />
    <mutant id="mutant_5997" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((pathOff + (st.nameLength())) + 1)" to="(((pathOff + (st.nameLength())) + 1) + 1)" />
    <mutant id="mutant_2007" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 10)" to="((si + 10) - 1)" />
    <mutant id="mutant_3337" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(prefix + needle)" to="((prefix + needle) + 1)" />
    <mutant id="mutant_4668" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((sb.length()) - 4)" to="(((sb.length()) - 4) - 1)" />
    <mutant id="mutant_5998" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((childCnt) - 1)" to="(((childCnt) - 1) + 1)" />
    <mutant id="mutant_5990" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(p - pathOff)" to="((p - pathOff) * -1)" />
    <mutant id="mutant_3325" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (!(ref.isSymbolic()))) &amp;&amp; (ref.getTarget().getObjectId().equals(id))" to="!(((ref != null) &amp;&amp; (!(ref.isSymbolic()))) &amp;&amp; (ref.getTarget().getObjectId().equals(id)))" />
    <mutant id="mutant_4656" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) * -1)" />
    <mutant id="mutant_5988" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff &gt; 0) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheTree.peq(firstPath, currPath, pathOff)))" to="!((pathOff &gt; 0) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheTree.peq(firstPath, currPath, pathOff))))" />
    <mutant id="mutant_3324" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (!(ref.isSymbolic())))" to="(!((ref != null) &amp;&amp; (!(ref.isSymbolic()))))" />
    <mutant id="mutant_4655" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) + 1)" />
    <mutant id="mutant_5989" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(p - pathOff)" to="((p - pathOff) + 1)" />
    <mutant id="mutant_3323" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (ref.isSymbolic())) &amp;&amp; (ref.getTarget().getName().equals(target))" to="!(((ref != null) &amp;&amp; (ref.isSymbolic())) &amp;&amp; (ref.getTarget().getName().equals(target)))" />
    <mutant id="mutant_4654" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(left - 1)" to="((left - 1) - 1)" />
    <mutant id="mutant_3322" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (ref.isSymbolic()))" to="(!((ref != null) &amp;&amp; (ref.isSymbolic())))" />
    <mutant id="mutant_4653" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(left - 1)" to="((left - 1) + 1)" />
    <mutant id="mutant_3321" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)]))" to="!((0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)])))" />
    <mutant id="mutant_4652" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(left - 1)" to="((left - 1) * -1)" />
    <mutant id="mutant_3320" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="((n - 1) + 1)" />
    <mutant id="mutant_4651" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right - left)" to="((right - left) - 1)" />
    <mutant id="mutant_4650" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right - left)" to="((right - left) * -1)" />
    <mutant id="mutant_5980" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(stIdx + 1)" to="((stIdx + 1) - 1)" />
    <mutant id="mutant_5981" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(n - stIdx)" to="((n - stIdx) * -1)" />
    <mutant id="mutant_5982" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(n - stIdx)" to="((n - stIdx) - 1)" />
    <mutant id="mutant_5983" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(n - stIdx)" to="((n - stIdx) + 1)" />
    <mutant id="mutant_3329" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)]))" to="!((0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)])))" />
    <mutant id="mutant_5984" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(cIdx + (entrySpan))" to="((cIdx + (entrySpan)) * -1)" />
    <mutant id="mutant_3328" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="((n - 1) + 1)" />
    <mutant id="mutant_4659" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right + 1)" to="((right + 1) * -1)" />
    <mutant id="mutant_5985" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(cIdx + (entrySpan))" to="((cIdx + (entrySpan)) + 1)" />
    <mutant id="mutant_3327" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="((n - 1) * -1)" />
    <mutant id="mutant_4658" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right + 1)" to="((right + 1) + 1)" />
    <mutant id="mutant_5986" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(cIdx + (entrySpan))" to="((cIdx + (entrySpan)) - 1)" />
    <mutant id="mutant_3326" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="((n - 1) - 1)" />
    <mutant id="mutant_4657" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) - 1)" />
    <mutant id="mutant_5987" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((entrySpan) &gt;= 0) &amp;&amp; ((cIdx + (entrySpan)) &lt;= cCnt)" to="!(((entrySpan) &gt;= 0) &amp;&amp; ((cIdx + (entrySpan)) &lt;= cCnt))" />
    <mutant id="mutant_305" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="(((oldPrefix) + (ent.getOldPath())) - 1)" />
    <mutant id="mutant_306" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="(((oldPrefix) + (ent.getOldPath())) * -1)" />
    <mutant id="mutant_307" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="(((oldPrefix) + (ent.getOldPath())) + 1)" />
    <mutant id="mutant_308" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="(((oldPrefix) + (ent.getOldPath())) - 1)" />
    <mutant id="mutant_301" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="(((newPrefix) + (ent.getNewPath())) - 1)" />
    <mutant id="mutant_302" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="(((newPrefix) + (ent.getNewPath())) * -1)" />
    <mutant id="mutant_303" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="(((oldPrefix) + (ent.getOldPath())) * -1)" />
    <mutant id="mutant_304" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="(((oldPrefix) + (ent.getOldPath())) + 1)" />
    <mutant id="mutant_309" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="(((newPrefix) + (ent.getNewPath())) + 1)" />
    <mutant id="mutant_3314" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.copy(java.lang.String,int,int)" from="(end - off)" to="((end - off) + 1)" />
    <mutant id="mutant_4645" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) - 1)" />
    <mutant id="mutant_5977" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(n - stIdx)" to="((n - stIdx) + 1)" />
    <mutant id="mutant_3313" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(java.lang.String)" from="(p + 1)" to="((p + 1) + 1)" />
    <mutant id="mutant_4644" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) * -1)" />
    <mutant id="mutant_5978" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(stIdx + 1)" to="((stIdx + 1) * -1)" />
    <mutant id="mutant_3312" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(java.lang.String)" from="(p + 1)" to="((p + 1) * -1)" />
    <mutant id="mutant_4643" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) + 1)" />
    <mutant id="mutant_5979" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(stIdx + 1)" to="((stIdx + 1) + 1)" />
    <mutant id="mutant_3311" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(java.lang.String)" from="(p + 1)" to="((p + 1) - 1)" />
    <mutant id="mutant_4642" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) &gt; 0) &amp;&amp; ((pattern.charAt(((pattern.length()) - 1))) == c)" to="!(((pattern.length()) &gt; 0) &amp;&amp; ((pattern.charAt(((pattern.length()) - 1))) == c))" />
    <mutant id="mutant_3310" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':')) &amp;&amp; ((buf[4]) == ' ')" to="!((((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':')) &amp;&amp; ((buf[4]) == ' '))" />
    <mutant id="mutant_4641" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) - 1)" />
    <mutant id="mutant_4640" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) * -1)" />
    <mutant id="mutant_5970" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="n + 1" to="(n + 1) - 1" />
    <mutant id="mutant_5971" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="n + 1" to="(n + 1) * -1" />
    <mutant id="mutant_300" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="(((newPrefix) + (ent.getNewPath())) + 1)" />
    <mutant id="mutant_3319" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="((n - 1) * -1)" />
    <mutant id="mutant_5972" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="((stIdx + 1) * -1)" />
    <mutant id="mutant_3318" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="((n - 1) - 1)" />
    <mutant id="mutant_4649" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right - left)" to="((right - left) + 1)" />
    <mutant id="mutant_5973" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="((stIdx + 1) + 1)" />
    <mutant id="mutant_3317" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRefs(java.lang.String)" from="(resolvedRef != null) &amp;&amp; ((resolvedRef.getObjectId()) != null)" to="!((resolvedRef != null) &amp;&amp; ((resolvedRef.getObjectId()) != null))" />
    <mutant id="mutant_4648" viable="false" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(&quot;Pattern must have at least two segments: &quot; + pattern)" to="((&quot;Pattern must have at least two segments: &quot; + pattern) * -1)" />
    <mutant id="mutant_5974" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="((stIdx + 1) - 1)" />
    <mutant id="mutant_3316" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.copy(java.lang.String,int,int)" from="(end - off)" to="((end - off) - 1)" />
    <mutant id="mutant_4647" viable="false" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(&quot;Pattern must have at least two segments: &quot; + pattern)" to="((&quot;Pattern must have at least two segments: &quot; + pattern) - 1)" />
    <mutant id="mutant_5975" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(n - stIdx)" to="((n - stIdx) * -1)" />
    <mutant id="mutant_3315" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.copy(java.lang.String,int,int)" from="(end - off)" to="((end - off) * -1)" />
    <mutant id="mutant_4646" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(&quot;Pattern must have at least two segments: &quot; + pattern)" to="((&quot;Pattern must have at least two segments: &quot; + pattern) + 1)" />
    <mutant id="mutant_5976" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(n - stIdx)" to="((n - stIdx) - 1)" />
    <mutant id="mutant_316" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;--- &quot; + oldp) + &quot;\n&quot;)" to="(((&quot;--- &quot; + oldp) + &quot;\n&quot;) * -1)" />
    <mutant id="mutant_317" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;--- &quot; + oldp) + &quot;\n&quot;)" to="(((&quot;--- &quot; + oldp) + &quot;\n&quot;) + 1)" />
    <mutant id="mutant_318" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+++ &quot; + newp)" to="((&quot;+++ &quot; + newp) - 1)" />
    <mutant id="mutant_319" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+++ &quot; + newp)" to="((&quot;+++ &quot; + newp) * -1)" />
    <mutant id="mutant_312" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;--- &quot; + oldp)" to="((&quot;--- &quot; + oldp) * -1)" />
    <mutant id="mutant_313" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;--- &quot; + oldp)" to="((&quot;--- &quot; + oldp) - 1)" />
    <mutant id="mutant_314" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;--- &quot; + oldp)" to="((&quot;--- &quot; + oldp) + 1)" />
    <mutant id="mutant_315" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;--- &quot; + oldp) + &quot;\n&quot;)" to="(((&quot;--- &quot; + oldp) + &quot;\n&quot;) - 1)" />
    <mutant id="mutant_3303" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((loose.find(prefix)) + 1)" to="(((loose.find(prefix)) + 1) - 1)" />
    <mutant id="mutant_4634" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookBehind(java.lang.StringBuilder)" from="((buffer.length()) - 1)" to="(((buffer.length()) - 1) * -1)" />
    <mutant id="mutant_5966" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) - stIdx)" to="(((childCnt) - stIdx) + 1)" />
    <mutant id="mutant_3302" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(idx &lt; (packed.size())) &amp;&amp; (packed.get(idx).getName().startsWith(prefix))" to="!((idx &lt; (packed.size())) &amp;&amp; (packed.get(idx).getName().startsWith(prefix)))" />
    <mutant id="mutant_4633" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookAhead(java.lang.String,int)" from="i + 1" to="(i + 1) + 1" />
    <mutant id="mutant_5967" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) - stIdx)" to="(((childCnt) - stIdx) * -1)" />
    <mutant id="mutant_3301" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((packed.find(prefix)) + 1)" to="(((packed.find(prefix)) + 1) + 1)" />
    <mutant id="mutant_4632" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookAhead(java.lang.String,int)" from="i + 1" to="(i + 1) - 1" />
    <mutant id="mutant_5968" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) - stIdx)" to="(((childCnt) - stIdx) - 1)" />
    <mutant id="mutant_3300" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((packed.find(prefix)) + 1)" to="(((packed.find(prefix)) + 1) * -1)" />
    <mutant id="mutant_4631" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookAhead(java.lang.String,int)" from="i + 1" to="(i + 1) * -1" />
    <mutant id="mutant_5969" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="n + 1" to="(n + 1) + 1" />
    <mutant id="mutant_4630" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.isWildCard(java.lang.String)" from="((pattern.indexOf('*')) != (-1)) || (org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(pattern))" to="!(((pattern.indexOf('*')) != (-1)) || (org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(pattern)))" />
    <mutant id="mutant_310" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="(((newPrefix) + (ent.getNewPath())) - 1)" />
    <mutant id="mutant_3309" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':'))" to="(!(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':')))" />
    <mutant id="mutant_5960" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) + 1)" to="(((childCnt) + 1) * -1)" />
    <mutant id="mutant_311" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="(((newPrefix) + (ent.getNewPath())) * -1)" />
    <mutant id="mutant_3308" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f'))" to="(!((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')))" />
    <mutant id="mutant_4639" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="(((pattern.length()) - 1) + 1)" />
    <mutant id="mutant_5961" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) + 1)" to="(((childCnt) + 1) - 1)" />
    <mutant id="mutant_3307" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e'))" to="(!(((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')))" />
    <mutant id="mutant_4638" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.count(java.lang.String,char,boolean)" from="(!ignoreFirstLast) || ((start != 0) &amp;&amp; (start != (s.length())))" to="!((!ignoreFirstLast) || ((start != 0) &amp;&amp; (start != (s.length()))))" />
    <mutant id="mutant_5962" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) + 1)" to="(((childCnt) + 1) + 1)" />
    <mutant id="mutant_3306" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(idx &lt; (loose.size())) &amp;&amp; (loose.get(idx).getName().startsWith(prefix))" to="!((idx &lt; (loose.size())) &amp;&amp; (loose.get(idx).getName().startsWith(prefix)))" />
    <mutant id="mutant_4637" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.count(java.lang.String,char,boolean)" from="((start != 0) &amp;&amp; (start != (s.length())))" to="(!((start != 0) &amp;&amp; (start != (s.length()))))" />
    <mutant id="mutant_5963" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="((stIdx + 1) * -1)" />
    <mutant id="mutant_3305" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((loose.find(prefix)) + 1)" to="(((loose.find(prefix)) + 1) + 1)" />
    <mutant id="mutant_4636" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookBehind(java.lang.StringBuilder)" from="((buffer.length()) - 1)" to="(((buffer.length()) - 1) - 1)" />
    <mutant id="mutant_5964" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="((stIdx + 1) + 1)" />
    <mutant id="mutant_3304" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((loose.find(prefix)) + 1)" to="(((loose.find(prefix)) + 1) * -1)" />
    <mutant id="mutant_4635" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookBehind(java.lang.StringBuilder)" from="((buffer.length()) - 1)" to="(((buffer.length()) - 1) + 1)" />
    <mutant id="mutant_5965" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="((stIdx + 1) - 1)" />
    <mutant id="mutant_206" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="(line + 1)" to="((line + 1) + 1)" />
    <mutant id="mutant_207" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="((line + 1) == (text.size())) &amp;&amp; (text.isMissingNewlineAtEnd())" to="!(((line + 1) == (text.size())) &amp;&amp; (text.isMissingNewlineAtEnd()))" />
    <mutant id="mutant_208" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="!(((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY)))" />
    <mutant id="mutant_209" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="i + 1" to="(i + 1) * -1" />
    <mutant id="mutant_202" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.end(org.eclipse.jgit.diff.Edit,int,int)" from="((edit.getEndA()) &lt;= a) &amp;&amp; ((edit.getEndB()) &lt;= b)" to="!(((edit.getEndA()) &lt;= a) &amp;&amp; ((edit.getEndB()) &lt;= b))" />
    <mutant id="mutant_203" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isAdd(java.util.List)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.ADD)) &amp;&amp; (ent.getNewPath().equals(oldPath))" to="!(((ent.getChangeType()) == (DiffEntry.ChangeType.ADD)) &amp;&amp; (ent.getNewPath().equals(oldPath)))" />
    <mutant id="mutant_204" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="(line + 1)" to="((line + 1) * -1)" />
    <mutant id="mutant_205" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="(line + 1)" to="((line + 1) - 1)" />
    <mutant id="mutant_3141" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="(Constants.OBJECT_ID_LENGTH) / 4" to="((Constants.OBJECT_ID_LENGTH) / 4) * -1" />
    <mutant id="mutant_4472" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(nFmt == (StoredObjectRepresentation.PACK_WHOLE)) &amp;&amp; (config.isReuseObjects())" to="!((nFmt == (StoredObjectRepresentation.PACK_WHOLE)) &amp;&amp; (config.isReuseObjects()))" />
    <mutant id="mutant_3140" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="(Constants.OBJECT_ID_LENGTH) / 4" to="((Constants.OBJECT_ID_LENGTH) / 4) - 1" />
    <mutant id="mutant_4471" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(thin) &amp;&amp; (have(ptr, baseId))" to="!((thin) &amp;&amp; (have(ptr, baseId)))" />
    <mutant id="mutant_4470" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(ptr != null) &amp;&amp; (!(ptr.isEdge()))" to="!((ptr != null) &amp;&amp; (!(ptr.isEdge())))" />
    <mutant id="mutant_3138" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="8 * ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))" to="(8 * ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))) + 1" />
    <mutant id="mutant_4469" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas)) &amp;&amp; (reuseDeltaFor(otp))" to="!(((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas)) &amp;&amp; (reuseDeltaFor(otp)))" />
    <mutant id="mutant_3137" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="8 * ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))" to="(8 * ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))) - 1" />
    <mutant id="mutant_4468" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas))" to="(!((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas)))" />
    <mutant id="mutant_3136" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="8 * ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))" to="(8 * ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))) * -1" />
    <mutant id="mutant_4467" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(config.isReuseDeltas()) &amp;&amp; (config.getCutDeltaChains())" to="!((config.isReuseDeltas()) &amp;&amp; (config.getCutDeltaChains()))" />
    <mutant id="mutant_3135" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) * 4" to="(((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) * 4) + 1" />
    <mutant id="mutant_4466" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - start" to="((System.currentTimeMillis()) - start) * -1" />
    <mutant id="mutant_3134" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) * 4" to="(((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) * 4) * -1" />
    <mutant id="mutant_4465" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - start" to="((System.currentTimeMillis()) - start) + 1" />
    <mutant id="mutant_3133" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) * 4" to="(((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) * 4) - 1" />
    <mutant id="mutant_4464" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - start" to="((System.currentTimeMillis()) - start) - 1" />
    <mutant id="mutant_3132" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4))" to="(((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) + 1)" />
    <mutant id="mutant_4463" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(threads &lt;= 1) || (cnt &lt;= (config.getDeltaSearchWindowSize()))" to="!((threads &lt;= 1) || (cnt &lt;= (config.getDeltaSearchWindowSize())))" />
    <mutant id="mutant_3131" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4))" to="(((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) - 1)" />
    <mutant id="mutant_4462" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(!(list[i].isEdge())) &amp;&amp; (list[i].isDeltaRepresentation())" to="!((!(list[i].isEdge())) &amp;&amp; (list[i].isDeltaRepresentation()))" />
    <mutant id="mutant_5793" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((getFileMode()) + &quot; &quot;)" to="(((getFileMode()) + &quot; &quot;) + 1)" />
    <mutant id="mutant_5794" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((getFileMode()) + &quot; &quot;)" to="(((getFileMode()) + &quot; &quot;) - 1)" />
    <mutant id="mutant_200" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(2 * (context))" to="((2 * (context)) - 1)" />
    <mutant id="mutant_5795" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((getFileMode()) + &quot; &quot;)" to="(((getFileMode()) + &quot; &quot;) * -1)" />
    <mutant id="mutant_201" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(2 * (context))" to="((2 * (context)) * -1)" />
    <mutant id="mutant_5796" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((getFileMode()) + &quot; &quot;) + (getLength()))" to="((((getFileMode()) + &quot; &quot;) + (getLength())) * -1)" />
    <mutant id="mutant_5797" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((getFileMode()) + &quot; &quot;) + (getLength()))" to="((((getFileMode()) + &quot; &quot;) + (getLength())) - 1)" />
    <mutant id="mutant_5798" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((getFileMode()) + &quot; &quot;) + (getLength()))" to="((((getFileMode()) + &quot; &quot;) + (getLength())) + 1)" />
    <mutant id="mutant_5799" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;)" to="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) * -1)" />
    <mutant id="mutant_3139" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="(Constants.OBJECT_ID_LENGTH) / 4" to="((Constants.OBJECT_ID_LENGTH) / 4) + 1" />
    <mutant id="mutant_217" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(id.isComplete()) &amp;&amp; ((db) != null)" to="!((id.isComplete()) &amp;&amp; ((db) != null))" />
    <mutant id="mutant_218" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.scan(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathFilter) instanceof org.eclipse.jgit.revwalk.FollowFilter) &amp;&amp; (isAdd(files))" to="!(((pathFilter) instanceof org.eclipse.jgit.revwalk.FollowFilter) &amp;&amp; (isAdd(files)))" />
    <mutant id="mutant_219" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.updateFollowFilter(java.util.List)" from="(org.eclipse.jgit.diff.DiffFormatter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldPath))" to="!((org.eclipse.jgit.diff.DiffFormatter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldPath)))" />
    <mutant id="mutant_213" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="(end &lt; (edits.size())) &amp;&amp; ((combineA(edits, end)) || (combineB(edits, end)))" to="!((end &lt; (edits.size())) &amp;&amp; ((combineA(edits, end)) || (combineB(edits, end))))" />
    <mutant id="mutant_214" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="end - 1" to="(end - 1) * -1" />
    <mutant id="mutant_5790" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.idOffset()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="((infoOffset) + (DirCacheEntry.P_OBJECTID)) - 1" />
    <mutant id="mutant_215" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="end - 1" to="(end - 1) + 1" />
    <mutant id="mutant_5791" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.idOffset()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="((infoOffset) + (DirCacheEntry.P_OBJECTID)) + 1" />
    <mutant id="mutant_216" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="end - 1" to="(end - 1) - 1" />
    <mutant id="mutant_5792" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.idOffset()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="((infoOffset) + (DirCacheEntry.P_OBJECTID)) * -1" />
    <mutant id="mutant_3130" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4))" to="(((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) * -1)" />
    <mutant id="mutant_4461" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - searchStart" to="((System.currentTimeMillis()) - searchStart) * -1" />
    <mutant id="mutant_4460" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - searchStart" to="((System.currentTimeMillis()) - searchStart) - 1" />
    <mutant id="mutant_3127" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="(((Constants.OBJECT_ID_LENGTH) / 4) + 1)" />
    <mutant id="mutant_4458" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="((cnt - 1) + 1)" />
    <mutant id="mutant_3126" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((levelTwo) - ((Constants.OBJECT_ID_LENGTH) / 4))" to="(((levelTwo) - ((Constants.OBJECT_ID_LENGTH) / 4)) + 1)" />
    <mutant id="mutant_4457" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="((cnt - 1) * -1)" />
    <mutant id="mutant_3125" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((levelTwo) - ((Constants.OBJECT_ID_LENGTH) / 4))" to="(((levelTwo) - ((Constants.OBJECT_ID_LENGTH) / 4)) * -1)" />
    <mutant id="mutant_4456" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="((cnt - 1) - 1)" />
    <mutant id="mutant_3124" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((levelTwo) - ((Constants.OBJECT_ID_LENGTH) / 4))" to="(((levelTwo) - ((Constants.OBJECT_ID_LENGTH) / 4)) - 1)" />
    <mutant id="mutant_4455" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(0 &lt; cnt) &amp;&amp; (list[(cnt - 1)].isDoNotDelta())" to="!((0 &lt; cnt) &amp;&amp; (list[(cnt - 1)].isDoNotDelta()))" />
    <mutant id="mutant_3123" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="(((Constants.OBJECT_ID_LENGTH) / 4) * -1)" />
    <mutant id="mutant_4454" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="((cnt - 1) + 1)" />
    <mutant id="mutant_3122" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="(((Constants.OBJECT_ID_LENGTH) / 4) - 1)" />
    <mutant id="mutant_4453" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="((cnt - 1) * -1)" />
    <mutant id="mutant_3121" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="(((Constants.OBJECT_ID_LENGTH) / 4) + 1)" />
    <mutant id="mutant_4452" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="((cnt - 1) - 1)" />
    <mutant id="mutant_3120" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="(p + 1) + 1" />
    <mutant id="mutant_4451" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(b.getWeight()) - (a.getWeight())" to="((b.getWeight()) - (a.getWeight())) - 1" />
    <mutant id="mutant_5782" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getLength()" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="(((infoOffset) + (DirCacheEntry.P_SIZE)) * -1)" />
    <mutant id="mutant_210" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="i + 1" to="(i + 1) - 1" />
    <mutant id="mutant_5783" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getLength()" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="(((infoOffset) + (DirCacheEntry.P_SIZE)) - 1)" />
    <mutant id="mutant_211" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="i + 1" to="(i + 1) + 1" />
    <mutant id="mutant_5784" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getRawMode()" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="(((infoOffset) + (DirCacheEntry.P_MODE)) + 1)" />
    <mutant id="mutant_212" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="((combineA(edits, end)) || (combineB(edits, end)))" to="(!((combineA(edits, end)) || (combineB(edits, end))))" />
    <mutant id="mutant_5785" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getRawMode()" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="(((infoOffset) + (DirCacheEntry.P_MODE)) - 1)" />
    <mutant id="mutant_5786" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getRawMode()" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="(((infoOffset) + (DirCacheEntry.P_MODE)) * -1)" />
    <mutant id="mutant_5787" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getStage()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) * -1)" />
    <mutant id="mutant_3129" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="(((Constants.OBJECT_ID_LENGTH) / 4) * -1)" />
    <mutant id="mutant_5788" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getStage()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) - 1)" />
    <mutant id="mutant_3128" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="(((Constants.OBJECT_ID_LENGTH) / 4) - 1)" />
    <mutant id="mutant_4459" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - searchStart" to="((System.currentTimeMillis()) - searchStart) + 1" />
    <mutant id="mutant_5789" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getStage()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) + 1)" />
    <mutant id="mutant_228" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginA())) - (context))" to="((((long)(curEdit.getBeginA())) - (context)) - 1)" />
    <mutant id="mutant_229" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginA())) - (context))" to="((((long)(curEdit.getBeginA())) - (context)) * -1)" />
    <mutant id="mutant_224" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw))) || (RawText.isBinary(bRaw))" to="!((((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw))) || (RawText.isBinary(bRaw)))" />
    <mutant id="mutant_225" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.getDiffTreeFilterFor(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(a instanceof org.eclipse.jgit.dircache.DirCacheIterator) &amp;&amp; (b instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator)" to="!((a instanceof org.eclipse.jgit.dircache.DirCacheIterator) &amp;&amp; (b instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator))" />
    <mutant id="mutant_226" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.getDiffTreeFilterFor(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(a instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator) &amp;&amp; (b instanceof org.eclipse.jgit.dircache.DirCacheIterator)" to="!((a instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator) &amp;&amp; (b instanceof org.eclipse.jgit.dircache.DirCacheIterator))" />
    <mutant id="mutant_5780" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getExtendedFlags()" from="((infoOffset) + (DirCacheEntry.P_FLAGS2))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS2)) - 1)" />
    <mutant id="mutant_227" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginA())) - (context))" to="((((long)(curEdit.getBeginA())) - (context)) + 1)" />
    <mutant id="mutant_5781" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getLength()" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="(((infoOffset) + (DirCacheEntry.P_SIZE)) + 1)" />
    <mutant id="mutant_4450" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(b.getWeight()) - (a.getWeight())" to="((b.getWeight()) - (a.getWeight())) * -1" />
    <mutant id="mutant_3116" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset((p - 1)))) == 0)" to="!((0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset((p - 1)))) == 0))" />
    <mutant id="mutant_4447" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isEdge() ? 0 : 1) - (b.isEdge() ? 0 : 1)" to="((a.isEdge() ? 0 : 1) - (b.isEdge() ? 0 : 1)) - 1" />
    <mutant id="mutant_5779" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getExtendedFlags()" from="((infoOffset) + (DirCacheEntry.P_FLAGS2))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS2)) + 1)" />
    <mutant id="mutant_3115" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="((p - 1) + 1)" />
    <mutant id="mutant_4446" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isEdge() ? 0 : 1) - (b.isEdge() ? 0 : 1)" to="((a.isEdge() ? 0 : 1) - (b.isEdge() ? 0 : 1)) * -1" />
    <mutant id="mutant_3114" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="((p - 1) * -1)" />
    <mutant id="mutant_4445" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &amp; 1) - ((b.getPathHash()) &amp; 1)" to="(((a.getPathHash()) &amp; 1) - ((b.getPathHash()) &amp; 1)) + 1" />
    <mutant id="mutant_3113" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="((p - 1) - 1)" />
    <mutant id="mutant_4444" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &amp; 1) - ((b.getPathHash()) &amp; 1)" to="(((a.getPathHash()) &amp; 1) - ((b.getPathHash()) &amp; 1)) * -1" />
    <mutant id="mutant_3112" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="((low + high) - 1)" />
    <mutant id="mutant_4443" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &amp; 1) - ((b.getPathHash()) &amp; 1)" to="(((a.getPathHash()) &amp; 1) - ((b.getPathHash()) &amp; 1)) - 1" />
    <mutant id="mutant_3111" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="((low + high) * -1)" />
    <mutant id="mutant_4442" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &gt;&gt;&gt; 1) - ((b.getPathHash()) &gt;&gt;&gt; 1)" to="(((a.getPathHash()) &gt;&gt;&gt; 1) - ((b.getPathHash()) &gt;&gt;&gt; 1)) * -1" />
    <mutant id="mutant_3110" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="((low + high) + 1)" />
    <mutant id="mutant_4441" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &gt;&gt;&gt; 1) - ((b.getPathHash()) &gt;&gt;&gt; 1)" to="(((a.getPathHash()) &gt;&gt;&gt; 1) - ((b.getPathHash()) &gt;&gt;&gt; 1)) - 1" />
    <mutant id="mutant_4440" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &gt;&gt;&gt; 1) - ((b.getPathHash()) &gt;&gt;&gt; 1)" to="(((a.getPathHash()) &gt;&gt;&gt; 1) - ((b.getPathHash()) &gt;&gt;&gt; 1)) + 1" />
    <mutant id="mutant_220" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldMode()) == (FileMode.GITLINK)) || ((ent.getNewMode()) == (FileMode.GITLINK))" to="!(((ent.getOldMode()) == (FileMode.GITLINK)) || ((ent.getNewMode()) == (FileMode.GITLINK)))" />
    <mutant id="mutant_5771" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="((getLength()) == 0) &amp;&amp; ((Constants.EMPTY_BLOB_ID.compareTo(info, base)) != 0)" to="!(((getLength()) == 0) &amp;&amp; ((Constants.EMPTY_BLOB_ID.compareTo(info, base)) != 0))" />
    <mutant id="mutant_221" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldId()) == null) || ((ent.getNewId()) == null)" to="!(((ent.getOldId()) == null) || ((ent.getNewId()) == null))" />
    <mutant id="mutant_5772" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(infoOffset) + (DirCacheEntry.P_MTIME)" to="((infoOffset) + (DirCacheEntry.P_MTIME)) + 1" />
    <mutant id="mutant_222" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY)))" to="(!((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))))" />
    <mutant id="mutant_5773" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(infoOffset) + (DirCacheEntry.P_MTIME)" to="((infoOffset) + (DirCacheEntry.P_MTIME)) * -1" />
    <mutant id="mutant_223" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw)))" to="(!(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw))))" />
    <mutant id="mutant_5774" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(infoOffset) + (DirCacheEntry.P_MTIME)" to="((infoOffset) + (DirCacheEntry.P_MTIME)) - 1" />
    <mutant id="mutant_5775" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(base + 4)" to="((base + 4) * -1)" />
    <mutant id="mutant_3119" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="(p + 1) * -1" />
    <mutant id="mutant_5776" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(base + 4)" to="((base + 4) - 1)" />
    <mutant id="mutant_3118" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="(p + 1) - 1" />
    <mutant id="mutant_4449" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(b.getWeight()) - (a.getWeight())" to="((b.getWeight()) - (a.getWeight())) + 1" />
    <mutant id="mutant_5777" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(base + 4)" to="((base + 4) + 1)" />
    <mutant id="mutant_3117" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(p))) == 0)" to="!((p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(p))) == 0))" />
    <mutant id="mutant_4448" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isEdge() ? 0 : 1) - (b.isEdge() ? 0 : 1)" to="((a.isEdge() ? 0 : 1) - (b.isEdge() ? 0 : 1)) + 1" />
    <mutant id="mutant_5778" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getExtendedFlags()" from="((infoOffset) + (DirCacheEntry.P_FLAGS2))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS2)) * -1)" />
    <mutant id="mutant_239" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(aCur &lt; aEnd) || (bCur &lt; bEnd)" to="!((aCur &lt; aEnd) || (bCur &lt; bEnd))" />
    <mutant id="mutant_235" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndA())) + (context))" to="((((long)(endEdit.getEndA())) + (context)) * -1)" />
    <mutant id="mutant_236" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndB())) + (context))" to="((((long)(endEdit.getEndB())) + (context)) * -1)" />
    <mutant id="mutant_237" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndB())) + (context))" to="((((long)(endEdit.getEndB())) + (context)) - 1)" />
    <mutant id="mutant_238" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndB())) + (context))" to="((((long)(endEdit.getEndB())) + (context)) + 1)" />
    <mutant id="mutant_5770" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="((infoOffset) + (DirCacheEntry.P_OBJECTID)) * -1" />
    <mutant id="mutant_3105" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="((4 + (Constants.OBJECT_ID_LENGTH)) - 1)" />
    <mutant id="mutant_4436" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isDoNotDelta() ? 1 : 0) - (b.isDoNotDelta() ? 1 : 0)" to="((a.isDoNotDelta() ? 1 : 0) - (b.isDoNotDelta() ? 1 : 0)) - 1" />
    <mutant id="mutant_5768" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="((infoOffset) + (DirCacheEntry.P_OBJECTID)) - 1" />
    <mutant id="mutant_3104" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="((4 + (Constants.OBJECT_ID_LENGTH)) + 1)" />
    <mutant id="mutant_4435" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isDoNotDelta() ? 1 : 0) - (b.isDoNotDelta() ? 1 : 0)" to="((a.isDoNotDelta() ? 1 : 0) - (b.isDoNotDelta() ? 1 : 0)) * -1" />
    <mutant id="mutant_5769" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="((infoOffset) + (DirCacheEntry.P_OBJECTID)) + 1" />
    <mutant id="mutant_3103" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH)) * levelTwo" to="((4 + (Constants.OBJECT_ID_LENGTH)) * levelTwo) * -1" />
    <mutant id="mutant_4434" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isDoNotDelta() ? 1 : 0) - (b.isDoNotDelta() ? 1 : 0)" to="((a.isDoNotDelta() ? 1 : 0) - (b.isDoNotDelta() ? 1 : 0)) + 1" />
    <mutant id="mutant_3102" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH)) * levelTwo" to="((4 + (Constants.OBJECT_ID_LENGTH)) * levelTwo) + 1" />
    <mutant id="mutant_4433" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - sizingStart" to="((System.currentTimeMillis()) - sizingStart) * -1" />
    <mutant id="mutant_3101" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH)) * levelTwo" to="((4 + (Constants.OBJECT_ID_LENGTH)) * levelTwo) - 1" />
    <mutant id="mutant_4432" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - sizingStart" to="((System.currentTimeMillis()) - sizingStart) - 1" />
    <mutant id="mutant_3100" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="((4 + (Constants.OBJECT_ID_LENGTH)) * -1)" />
    <mutant id="mutant_4431" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - sizingStart" to="((System.currentTimeMillis()) - sizingStart) + 1" />
    <mutant id="mutant_4430" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((DeltaIndex.BLKSZ) &lt; sz) &amp;&amp; (sz &lt; limit)" to="!(((DeltaIndex.BLKSZ) &lt; sz) &amp;&amp; (sz &lt; limit))" />
    <mutant id="mutant_231" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginB())) - (context))" to="((((long)(curEdit.getBeginB())) - (context)) + 1)" />
    <mutant id="mutant_5760" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen) - skipped" to="((expLen - actLen) - skipped) + 1" />
    <mutant id="mutant_232" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginB())) - (context))" to="((((long)(curEdit.getBeginB())) - (context)) - 1)" />
    <mutant id="mutant_5761" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen) - skipped" to="((expLen - actLen) - skipped) * -1" />
    <mutant id="mutant_233" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndA())) + (context))" to="((((long)(endEdit.getEndA())) + (context)) - 1)" />
    <mutant id="mutant_5762" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isAssumeValid()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) * -1)" />
    <mutant id="mutant_234" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndA())) + (context))" to="((((long)(endEdit.getEndA())) + (context)) + 1)" />
    <mutant id="mutant_5763" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isAssumeValid()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) - 1)" />
    <mutant id="mutant_3109" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="((data.length) / (4 + (Constants.OBJECT_ID_LENGTH))) + 1" />
    <mutant id="mutant_5764" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isAssumeValid()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) + 1)" />
    <mutant id="mutant_3108" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="((data.length) / (4 + (Constants.OBJECT_ID_LENGTH))) - 1" />
    <mutant id="mutant_4439" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.getType()) - (b.getType())" to="((a.getType()) - (b.getType())) - 1" />
    <mutant id="mutant_5765" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isExtended()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) * -1)" />
    <mutant id="mutant_3107" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="((data.length) / (4 + (Constants.OBJECT_ID_LENGTH))) * -1" />
    <mutant id="mutant_4438" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.getType()) - (b.getType())" to="((a.getType()) - (b.getType())) * -1" />
    <mutant id="mutant_5766" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isExtended()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) - 1)" />
    <mutant id="mutant_230" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginB())) - (context))" to="((((long)(curEdit.getBeginB())) - (context)) * -1)" />
    <mutant id="mutant_3106" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="((4 + (Constants.OBJECT_ID_LENGTH)) * -1)" />
    <mutant id="mutant_4437" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.getType()) - (b.getType())" to="((a.getType()) - (b.getType())) + 1" />
    <mutant id="mutant_5767" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isExtended()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) + 1)" />
    <mutant id="mutant_246" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(end - start)" to="((end - start) - 1)" />
    <mutant id="mutant_247" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(end - start)" to="((end - start) * -1)" />
    <mutant id="mutant_248" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((oldPrefix) + (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath))" to="(((oldPrefix) + (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath)) * -1)" />
    <mutant id="mutant_249" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((oldPrefix) + (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath))" to="(((oldPrefix) + (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath)) + 1)" />
    <mutant id="mutant_3185" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne - 1)" to="((levelOne - 1) + 1)" />
    <mutant id="mutant_3184" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne - 1)" to="((levelOne - 1) * -1)" />
    <mutant id="mutant_3183" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(nthPosition + 1)" to="((nthPosition + 1) + 1)" />
    <mutant id="mutant_3182" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(nthPosition + 1)" to="((nthPosition + 1) - 1)" />
    <mutant id="mutant_3181" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(nthPosition + 1)" to="((nthPosition + 1) * -1)" />
    <mutant id="mutant_3180" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="mid + 1" to="(mid + 1) - 1" />
    <mutant id="mutant_3179" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="mid + 1" to="(mid + 1) + 1" />
    <mutant id="mutant_3178" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="mid + 1" to="(mid + 1) * -1" />
    <mutant id="mutant_3177" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(mid4 + mid)" to="((mid4 + mid) + 1)" />
    <mutant id="mutant_3176" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(mid4 + mid)" to="((mid4 + mid) * -1)" />
    <mutant id="mutant_3175" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(mid4 + mid)" to="((mid4 + mid) - 1)" />
    <mutant id="mutant_242" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(endIdx + 1)" to="((endIdx + 1) * -1)" />
    <mutant id="mutant_243" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(aCur &lt; (curEdit.getBeginA())) || ((endIdx + 1) &lt; curIdx)" to="!((aCur &lt; (curEdit.getBeginA())) || ((endIdx + 1) &lt; curIdx))" />
    <mutant id="mutant_244" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(org.eclipse.jgit.diff.DiffFormatter.end(curEdit, aCur, bCur)) &amp;&amp; ((++curIdx) &lt; (edits.size()))" to="!((org.eclipse.jgit.diff.DiffFormatter.end(curEdit, aCur, bCur)) &amp;&amp; ((++curIdx) &lt; (edits.size())))" />
    <mutant id="mutant_245" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(end - start)" to="((end - start) + 1)" />
    <mutant id="mutant_240" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(endIdx + 1)" to="((endIdx + 1) - 1)" />
    <mutant id="mutant_241" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(endIdx + 1)" to="((endIdx + 1) + 1)" />
    <mutant id="mutant_257" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="((&quot;similarity index &quot; + (ent.getScore())) + 1)" />
    <mutant id="mutant_258" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="((&quot;similarity index &quot; + (ent.getScore())) - 1)" />
    <mutant id="mutant_259" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="((&quot;similarity index &quot; + (ent.getScore())) * -1)" />
    <mutant id="mutant_3174" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(low + high)" to="((low + high) - 1)" />
    <mutant id="mutant_3173" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(low + high)" to="((low + high) * -1)" />
    <mutant id="mutant_3172" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(low + high)" to="((low + high) + 1)" />
    <mutant id="mutant_3171" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="o64cnt * 8" to="(o64cnt * 8) + 1" />
    <mutant id="mutant_3170" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="o64cnt * 8" to="(o64cnt * 8) - 1" />
    <mutant id="mutant_3169" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="o64cnt * 8" to="(o64cnt * 8) * -1" />
    <mutant id="mutant_3168" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="((int)((bucketCnt * 4))) * -1" />
    <mutant id="mutant_4499" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjects(org.eclipse.jgit.internal.storage.pack.PackOutputStream,java.util.List)" from="(out.length()) - beginOffset" to="((out.length()) - beginOffset) - 1" />
    <mutant id="mutant_3167" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="((int)((bucketCnt * 4))) - 1" />
    <mutant id="mutant_4498" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjects(org.eclipse.jgit.internal.storage.pack.PackOutputStream,java.util.List)" from="(out.length()) - beginOffset" to="((out.length()) - beginOffset) + 1" />
    <mutant id="mutant_3166" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="((int)((bucketCnt * 4))) + 1" />
    <mutant id="mutant_4497" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjectImpl(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="((out.length()) - (otp.getOffset())) - 1" />
    <mutant id="mutant_3165" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="((int)((bucketCnt * 4))) * -1" />
    <mutant id="mutant_4496" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjectImpl(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="((out.length()) - (otp.getOffset())) * -1" />
    <mutant id="mutant_3164" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="((int)((bucketCnt * 4))) - 1" />
    <mutant id="mutant_4495" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjectImpl(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="((out.length()) - (otp.getOffset())) + 1" />
    <mutant id="mutant_253" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((newPrefix) + (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath))" to="(((newPrefix) + (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath)) + 1)" />
    <mutant id="mutant_254" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY)))" to="(!((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))))" />
    <mutant id="mutant_255" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME)))" to="(!(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME))))" />
    <mutant id="mutant_256" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME))) &amp;&amp; (!(oldMode.equals(newMode)))" to="!((((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME))) &amp;&amp; (!(oldMode.equals(newMode))))" />
    <mutant id="mutant_250" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((oldPrefix) + (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath))" to="(((oldPrefix) + (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath)) - 1)" />
    <mutant id="mutant_251" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((newPrefix) + (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath))" to="(((newPrefix) + (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath)) * -1)" />
    <mutant id="mutant_252" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((newPrefix) + (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath))" to="(((newPrefix) + (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath)) - 1)" />
    <mutant id="mutant_268" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="((&quot;rename to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp))) + 1)" />
    <mutant id="mutant_269" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="((&quot;similarity index &quot; + (ent.getScore())) + 1)" />
    <mutant id="mutant_3163" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="((int)((bucketCnt * 4))) + 1" />
    <mutant id="mutant_4494" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="((System.currentTimeMillis()) - writeStart) + 1" />
    <mutant id="mutant_3162" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((Integer.MAX_VALUE) - 8)" to="(((Integer.MAX_VALUE) - 8) + 1)" />
    <mutant id="mutant_4493" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="((System.currentTimeMillis()) - writeStart) - 1" />
    <mutant id="mutant_3161" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((Integer.MAX_VALUE) - 8)" to="(((Integer.MAX_VALUE) - 8) - 1)" />
    <mutant id="mutant_4492" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="((System.currentTimeMillis()) - writeStart) * -1" />
    <mutant id="mutant_3160" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((Integer.MAX_VALUE) - 8)" to="(((Integer.MAX_VALUE) - 8) * -1)" />
    <mutant id="mutant_4491" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="((out.length()) - (otp.getOffset())) - 1" />
    <mutant id="mutant_4490" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="((out.length()) - (otp.getOffset())) * -1" />
    <mutant id="mutant_3159" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="bucketCnt * (Constants.OBJECT_ID_LENGTH)" to="(bucketCnt * (Constants.OBJECT_ID_LENGTH)) - 1" />
    <mutant id="mutant_3158" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="bucketCnt * (Constants.OBJECT_ID_LENGTH)" to="(bucketCnt * (Constants.OBJECT_ID_LENGTH)) * -1" />
    <mutant id="mutant_4489" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="((out.length()) - (otp.getOffset())) + 1" />
    <mutant id="mutant_3157" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="bucketCnt * (Constants.OBJECT_ID_LENGTH)" to="(bucketCnt * (Constants.OBJECT_ID_LENGTH)) + 1" />
    <mutant id="mutant_4488" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBitmapIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="((System.currentTimeMillis()) - writeStart) + 1" />
    <mutant id="mutant_3156" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(fanoutTable[k]) - (fanoutTable[(k - 1)])" to="((fanoutTable[k]) - (fanoutTable[(k - 1)])) + 1" />
    <mutant id="mutant_4487" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBitmapIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="((System.currentTimeMillis()) - writeStart) - 1" />
    <mutant id="mutant_3155" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(fanoutTable[k]) - (fanoutTable[(k - 1)])" to="((fanoutTable[k]) - (fanoutTable[(k - 1)])) * -1" />
    <mutant id="mutant_4486" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBitmapIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="((System.currentTimeMillis()) - writeStart) * -1" />
    <mutant id="mutant_3154" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(fanoutTable[k]) - (fanoutTable[(k - 1)])" to="((fanoutTable[k]) - (fanoutTable[(k - 1)])) - 1" />
    <mutant id="mutant_4485" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBase(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((base != null) &amp;&amp; (!(base.isWritten()))) &amp;&amp; (!(base.isEdge()))" to="!(((base != null) &amp;&amp; (!(base.isWritten()))) &amp;&amp; (!(base.isEdge())))" />
    <mutant id="mutant_3153" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k - 1)" to="((k - 1) - 1)" />
    <mutant id="mutant_4484" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBase(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((base != null) &amp;&amp; (!(base.isWritten())))" to="(!((base != null) &amp;&amp; (!(base.isWritten()))))" />
    <mutant id="mutant_264" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="((&quot;rename from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp))) + 1)" />
    <mutant id="mutant_265" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="((&quot;rename from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp))) * -1)" />
    <mutant id="mutant_266" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="((&quot;rename to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp))) * -1)" />
    <mutant id="mutant_267" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="((&quot;rename to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp))) - 1)" />
    <mutant id="mutant_260" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="(((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;) + 1)" />
    <mutant id="mutant_261" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="(((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;) * -1)" />
    <mutant id="mutant_262" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="(((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;) - 1)" />
    <mutant id="mutant_263" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="((&quot;rename from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp))) - 1)" />
    <mutant id="mutant_279" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="((&quot;copy to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp))) - 1)" />
    <mutant id="mutant_3152" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k - 1)" to="((k - 1) + 1)" />
    <mutant id="mutant_4483" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight % bytesPerUnit)" to="((totalWeight % bytesPerUnit) - 1)" />
    <mutant id="mutant_3151" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k - 1)" to="((k - 1) * -1)" />
    <mutant id="mutant_4482" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight % bytesPerUnit)" to="((totalWeight % bytesPerUnit) + 1)" />
    <mutant id="mutant_3150" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((PackIndexV2.FANOUT) - 1)" to="(((PackIndexV2.FANOUT) - 1) * -1)" />
    <mutant id="mutant_4481" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight % bytesPerUnit)" to="((totalWeight % bytesPerUnit) * -1)" />
    <mutant id="mutant_4480" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="((int)(totalWeight / bytesPerUnit))" to="((int)((totalWeight / bytesPerUnit))) + 1" />
    <mutant id="mutant_3149" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((PackIndexV2.FANOUT) - 1)" to="(((PackIndexV2.FANOUT) - 1) - 1)" />
    <mutant id="mutant_3148" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((PackIndexV2.FANOUT) - 1)" to="(((PackIndexV2.FANOUT) - 1) + 1)" />
    <mutant id="mutant_4479" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="((int)(totalWeight / bytesPerUnit))" to="((int)((totalWeight / bytesPerUnit))) * -1" />
    <mutant id="mutant_3147" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k * 4)" to="((k * 4) + 1)" />
    <mutant id="mutant_4478" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="((int)(totalWeight / bytesPerUnit))" to="((int)((totalWeight / bytesPerUnit))) - 1" />
    <mutant id="mutant_270" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="((&quot;similarity index &quot; + (ent.getScore())) - 1)" />
    <mutant id="mutant_3146" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k * 4)" to="((k * 4) - 1)" />
    <mutant id="mutant_4477" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight / bytesPerUnit)" to="((totalWeight / bytesPerUnit) + 1)" />
    <mutant id="mutant_3145" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k * 4)" to="((k * 4) * -1)" />
    <mutant id="mutant_4476" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight / bytesPerUnit)" to="((totalWeight / bytesPerUnit) * -1)" />
    <mutant id="mutant_3144" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="4 * (PackIndexV2.FANOUT)" to="(4 * (PackIndexV2.FANOUT)) + 1" />
    <mutant id="mutant_4475" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight / bytesPerUnit)" to="((totalWeight / bytesPerUnit) - 1)" />
    <mutant id="mutant_3143" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="4 * (PackIndexV2.FANOUT)" to="(4 * (PackIndexV2.FANOUT)) * -1" />
    <mutant id="mutant_4474" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(!(o.isEdge())) &amp;&amp; (!(o.doNotAttemptDelta()))" to="!((!(o.isEdge())) &amp;&amp; (!(o.doNotAttemptDelta())))" />
    <mutant id="mutant_3142" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="4 * (PackIndexV2.FANOUT)" to="(4 * (PackIndexV2.FANOUT)) - 1" />
    <mutant id="mutant_4473" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(otp.isReuseAsIs()) &amp;&amp; (!(otp.isDeltaRepresentation()))" to="!((otp.isReuseAsIs()) &amp;&amp; (!(otp.isDeltaRepresentation())))" />
    <mutant id="mutant_275" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="((&quot;copy from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp))) * -1)" />
    <mutant id="mutant_276" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="((&quot;copy from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp))) - 1)" />
    <mutant id="mutant_277" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="((&quot;copy from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp))) + 1)" />
    <mutant id="mutant_278" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="((&quot;copy to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp))) + 1)" />
    <mutant id="mutant_271" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="((&quot;similarity index &quot; + (ent.getScore())) * -1)" />
    <mutant id="mutant_272" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="(((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;) + 1)" />
    <mutant id="mutant_273" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="(((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;) * -1)" />
    <mutant id="mutant_274" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="(((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;) - 1)" />
    <mutant id="mutant_280" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="((&quot;copy to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp))) * -1)" />
    <mutant id="mutant_281" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(100 - (ent.getScore()))" to="((100 - (ent.getScore())) * -1)" />
    <mutant id="mutant_286" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;dissimilarity index &quot; + (100 - (ent.getScore())))" to="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) * -1)" />
    <mutant id="mutant_287" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) + &quot;%&quot;)" to="(((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) + &quot;%&quot;) * -1)" />
    <mutant id="mutant_288" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) + &quot;%&quot;)" to="(((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) + &quot;%&quot;) - 1)" />
    <mutant id="mutant_289" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) + &quot;%&quot;)" to="(((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) + &quot;%&quot;) + 1)" />
    <mutant id="mutant_282" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(100 - (ent.getScore()))" to="((100 - (ent.getScore())) + 1)" />
    <mutant id="mutant_283" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(100 - (ent.getScore()))" to="((100 - (ent.getScore())) - 1)" />
    <mutant id="mutant_284" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;dissimilarity index &quot; + (100 - (ent.getScore())))" to="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) + 1)" />
    <mutant id="mutant_285" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;dissimilarity index &quot; + (100 - (ent.getScore())))" to="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) - 1)" />
    <mutant id="mutant_290" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldId()) != null) &amp;&amp; (!(ent.getOldId().equals(ent.getNewId())))" to="!(((ent.getOldId()) != null) &amp;&amp; (!(ent.getOldId().equals(ent.getNewId()))))" />
    <mutant id="mutant_291" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;index &quot; + (format(ent.getOldId())))" to="((&quot;index &quot; + (format(ent.getOldId()))) * -1)" />
    <mutant id="mutant_292" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;index &quot; + (format(ent.getOldId())))" to="((&quot;index &quot; + (format(ent.getOldId()))) - 1)" />
    <mutant id="mutant_297" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) + (format(ent.getNewId())))" to="((((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) + (format(ent.getNewId()))) - 1)" />
    <mutant id="mutant_298" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) + (format(ent.getNewId())))" to="((((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) + (format(ent.getNewId()))) * -1)" />
    <mutant id="mutant_299" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) + (format(ent.getNewId())))" to="((((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) + (format(ent.getNewId()))) + 1)" />
    <mutant id="mutant_293" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;index &quot; + (format(ent.getOldId())))" to="((&quot;index &quot; + (format(ent.getOldId()))) + 1)" />
    <mutant id="mutant_294" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;)" to="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) + 1)" />
    <mutant id="mutant_295" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;)" to="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) - 1)" />
    <mutant id="mutant_296" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;)" to="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) * -1)" />
    <mutant id="mutant_3199" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(int)" from="(p &lt;&lt; 2) + p" to="((p &lt;&lt; 2) + p) * -1" />
    <mutant id="mutant_3198" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(int)" from="(p &lt;&lt; 2) + p" to="((p &lt;&lt; 2) + p) + 1" />
    <mutant id="mutant_3197" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(int)" from="(p &lt;&lt; 2) + p" to="((p &lt;&lt; 2) + p) - 1" />
    <mutant id="mutant_3196" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="((int)((nthPosition - base))) * -1" />
    <mutant id="mutant_3195" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="((int)((nthPosition - base))) - 1" />
    <mutant id="mutant_3194" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="((int)((nthPosition - base))) + 1" />
    <mutant id="mutant_3193" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="(levelOne - 1)" to="((levelOne - 1) - 1)" />
    <mutant id="mutant_3192" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="(levelOne - 1)" to="((levelOne - 1) + 1)" />
    <mutant id="mutant_3191" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="(levelOne - 1)" to="((levelOne - 1) * -1)" />
    <mutant id="mutant_3190" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne + 1)" to="((levelOne + 1) + 1)" />
    <mutant id="mutant_3189" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne + 1)" to="((levelOne + 1) * -1)" />
    <mutant id="mutant_3188" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne + 1)" to="((levelOne + 1) - 1)" />
    <mutant id="mutant_3187" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne &gt; 0) &amp;&amp; (base == (fanoutTable[(levelOne - 1)]))" to="!((levelOne &gt; 0) &amp;&amp; (base == (fanoutTable[(levelOne - 1)])))" />
    <mutant id="mutant_3186" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne - 1)" to="((levelOne - 1) - 1)" />
    <mutant id="mutant_9322" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((packed.find(prefix)) + 1)" to="(((packed.find(prefix)) + 1) - 1)" />
    <mutant id="mutant_9323" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((packed.find(prefix)) + 1)" to="(((packed.find(prefix)) + 1) * -1)" />
    <mutant id="mutant_9320" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="((a != null) &amp;&amp; (b != null))" to="(!((a != null) &amp;&amp; (b != null)))" />
    <mutant id="mutant_9321" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b))" to="!(((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b)))" />
    <mutant id="mutant_9315" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - (idx + 1))" to="(((cnt) - (idx + 1)) - 1)" />
    <mutant id="mutant_9316" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - 1)" to="(((cnt) - 1) + 1)" />
    <mutant id="mutant_9313" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - (idx + 1))" to="(((cnt) - (idx + 1)) * -1)" />
    <mutant id="mutant_9314" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - (idx + 1))" to="(((cnt) - (idx + 1)) + 1)" />
    <mutant id="mutant_9319" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="(key instanceof java.lang.String) &amp;&amp; (val instanceof org.eclipse.jgit.lib.Ref)" to="!((key instanceof java.lang.String) &amp;&amp; (val instanceof org.eclipse.jgit.lib.Ref))" />
    <mutant id="mutant_9317" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - 1)" to="(((cnt) - 1) - 1)" />
    <mutant id="mutant_9318" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - 1)" to="(((cnt) - 1) * -1)" />
    <mutant id="mutant_9311" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="((idx + 1) - 1)" />
    <mutant id="mutant_9312" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="((idx + 1) * -1)" />
    <mutant id="mutant_9310" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="((idx + 1) + 1)" />
    <mutant id="mutant_9304" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="((idx + 1) + 1)" />
    <mutant id="mutant_9305" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="((idx + 1) - 1)" />
    <mutant id="mutant_9302" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(cnt) - 1" to="((cnt) - 1) - 1" />
    <mutant id="mutant_9303" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(cnt) - 1" to="((cnt) - 1) * -1" />
    <mutant id="mutant_9308" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="((idx + 1) - 1)" />
    <mutant id="mutant_9309" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="((idx + 1) * -1)" />
    <mutant id="mutant_9306" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="((idx + 1) * -1)" />
    <mutant id="mutant_9307" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="((idx + 1) + 1)" />
    <mutant id="mutant_9300" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) + 1)" to="(((cnt) + 1) - 1)" />
    <mutant id="mutant_9301" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(cnt) - 1" to="((cnt) - 1) + 1" />
    <mutant id="mutant_8030" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) * -1)" />
    <mutant id="mutant_9362" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(5 * (RelativeDateFormatter.YEAR_IN_MILLIS))" to="((5 * (RelativeDateFormatter.YEAR_IN_MILLIS)) * -1)" />
    <mutant id="mutant_9363" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(5 * (RelativeDateFormatter.YEAR_IN_MILLIS))" to="((5 * (RelativeDateFormatter.YEAR_IN_MILLIS)) - 1)" />
    <mutant id="mutant_8032" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + 1)" />
    <mutant id="mutant_9360" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(10 * (RelativeDateFormatter.WEEK_IN_MILLIS))" to="((10 * (RelativeDateFormatter.WEEK_IN_MILLIS)) - 1)" />
    <mutant id="mutant_8031" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) - 1)" />
    <mutant id="mutant_9361" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(10 * (RelativeDateFormatter.WEEK_IN_MILLIS))" to="((10 * (RelativeDateFormatter.WEEK_IN_MILLIS)) * -1)" />
    <mutant id="mutant_8034" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="((((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) * -1)" />
    <mutant id="mutant_9366" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="ageMillis / (RelativeDateFormatter.YEAR_IN_MILLIS)" to="(ageMillis / (RelativeDateFormatter.YEAR_IN_MILLIS)) - 1" />
    <mutant id="mutant_8033" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="((((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) - 1)" />
    <mutant id="mutant_9367" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="ageMillis / (RelativeDateFormatter.YEAR_IN_MILLIS)" to="(ageMillis / (RelativeDateFormatter.YEAR_IN_MILLIS)) * -1" />
    <mutant id="mutant_8036" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="((((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;) * -1" />
    <mutant id="mutant_9364" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(5 * (RelativeDateFormatter.YEAR_IN_MILLIS))" to="((5 * (RelativeDateFormatter.YEAR_IN_MILLIS)) + 1)" />
    <mutant id="mutant_8035" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="((((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + 1)" />
    <mutant id="mutant_9365" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="ageMillis / (RelativeDateFormatter.YEAR_IN_MILLIS)" to="(ageMillis / (RelativeDateFormatter.YEAR_IN_MILLIS)) + 1" />
    <mutant id="mutant_8027" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="((&quot;(&quot; + (a.toString())) - 1)" />
    <mutant id="mutant_9359" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(10 * (RelativeDateFormatter.WEEK_IN_MILLIS))" to="((10 * (RelativeDateFormatter.WEEK_IN_MILLIS)) + 1)" />
    <mutant id="mutant_8026" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.shouldBeRecursive()" from="(a.shouldBeRecursive()) || (b.shouldBeRecursive())" to="!((a.shouldBeRecursive()) || (b.shouldBeRecursive()))" />
    <mutant id="mutant_8029" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="((&quot;(&quot; + (a.toString())) + 1)" />
    <mutant id="mutant_9357" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(14 * (RelativeDateFormatter.DAY_IN_MILLIS))" to="((14 * (RelativeDateFormatter.DAY_IN_MILLIS)) * -1)" />
    <mutant id="mutant_8028" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="((&quot;(&quot; + (a.toString())) * -1)" />
    <mutant id="mutant_9358" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(14 * (RelativeDateFormatter.DAY_IN_MILLIS))" to="((14 * (RelativeDateFormatter.DAY_IN_MILLIS)) + 1)" />
    <mutant id="mutant_9351" viable="false" in="?" from="365 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="(365 * (RelativeDateFormatter.DAY_IN_MILLIS)) + 1" />
    <mutant id="mutant_9352" viable="false" in="?" from="365 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="(365 * (RelativeDateFormatter.DAY_IN_MILLIS)) - 1" />
    <mutant id="mutant_8021" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing))" to="(((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) * -1)" />
    <mutant id="mutant_8020" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing))" to="(((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) - 1)" />
    <mutant id="mutant_9350" viable="false" in="?" from="365 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="(365 * (RelativeDateFormatter.DAY_IN_MILLIS)) * -1" />
    <mutant id="mutant_8023" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) + (statistics.timeWriting)" to="(((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) + (statistics.timeWriting)) * -1" />
    <mutant id="mutant_9355" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(SystemReader.getInstance().getCurrentTime()) - (when.getTime())" to="((SystemReader.getInstance().getCurrentTime()) - (when.getTime())) - 1" />
    <mutant id="mutant_8022" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) + (statistics.timeWriting)" to="(((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) + (statistics.timeWriting)) - 1" />
    <mutant id="mutant_9356" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(14 * (RelativeDateFormatter.DAY_IN_MILLIS))" to="((14 * (RelativeDateFormatter.DAY_IN_MILLIS)) - 1)" />
    <mutant id="mutant_8025" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(a.include(walker)) &amp;&amp; (b.include(walker))" to="!((a.include(walker)) &amp;&amp; (b.include(walker)))" />
    <mutant id="mutant_9353" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(SystemReader.getInstance().getCurrentTime()) - (when.getTime())" to="((SystemReader.getInstance().getCurrentTime()) - (when.getTime())) * -1" />
    <mutant id="mutant_8024" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) + (statistics.timeWriting)" to="(((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) + (statistics.timeWriting)) + 1" />
    <mutant id="mutant_9354" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(SystemReader.getInstance().getCurrentTime()) - (when.getTime())" to="((SystemReader.getInstance().getCurrentTime()) - (when.getTime())) + 1" />
    <mutant id="mutant_8016" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes))" to="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) - 1)" />
    <mutant id="mutant_9348" viable="false" in="?" from="30 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="(30 * (RelativeDateFormatter.DAY_IN_MILLIS)) - 1" />
    <mutant id="mutant_8015" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((statistics.timeCounting) + (statistics.timeSearchingForReuse))" to="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) - 1)" />
    <mutant id="mutant_9349" viable="false" in="?" from="30 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="(30 * (RelativeDateFormatter.DAY_IN_MILLIS)) * -1" />
    <mutant id="mutant_8018" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes))" to="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) * -1)" />
    <mutant id="mutant_9346" viable="false" in="?" from="7 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="(7 * (RelativeDateFormatter.DAY_IN_MILLIS)) + 1" />
    <mutant id="mutant_8017" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes))" to="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + 1)" />
    <mutant id="mutant_9347" viable="false" in="?" from="30 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="(30 * (RelativeDateFormatter.DAY_IN_MILLIS)) + 1" />
    <mutant id="mutant_8019" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing))" to="(((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) + 1)" />
    <mutant id="mutant_9340" viable="false" in="?" from="60 * (RelativeDateFormatter.MINUTE_IN_MILLIS)" to="(60 * (RelativeDateFormatter.MINUTE_IN_MILLIS)) * -1" />
    <mutant id="mutant_9341" viable="false" in="?" from="24 * (RelativeDateFormatter.HOUR_IN_MILLIS)" to="(24 * (RelativeDateFormatter.HOUR_IN_MILLIS)) + 1" />
    <mutant id="mutant_8010" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="(getTotalBytes()) / ((getTimeWriting()) / 1000.0)" to="((getTotalBytes()) / ((getTimeWriting()) / 1000.0)) * -1" />
    <mutant id="mutant_8012" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="(getTotalBytes()) / ((getTimeWriting()) / 1000.0)" to="((getTotalBytes()) / ((getTimeWriting()) / 1000.0)) + 1" />
    <mutant id="mutant_9344" viable="false" in="?" from="7 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="(7 * (RelativeDateFormatter.DAY_IN_MILLIS)) - 1" />
    <mutant id="mutant_8011" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="(getTotalBytes()) / ((getTimeWriting()) / 1000.0)" to="((getTotalBytes()) / ((getTimeWriting()) / 1000.0)) - 1" />
    <mutant id="mutant_9345" viable="false" in="?" from="7 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="(7 * (RelativeDateFormatter.DAY_IN_MILLIS)) * -1" />
    <mutant id="mutant_8014" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((statistics.timeCounting) + (statistics.timeSearchingForReuse))" to="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) * -1)" />
    <mutant id="mutant_9342" viable="false" in="?" from="24 * (RelativeDateFormatter.HOUR_IN_MILLIS)" to="(24 * (RelativeDateFormatter.HOUR_IN_MILLIS)) - 1" />
    <mutant id="mutant_8013" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((statistics.timeCounting) + (statistics.timeSearchingForReuse))" to="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + 1)" />
    <mutant id="mutant_9343" viable="false" in="?" from="24 * (RelativeDateFormatter.HOUR_IN_MILLIS)" to="(24 * (RelativeDateFormatter.HOUR_IN_MILLIS)) * -1" />
    <mutant id="mutant_8005" viable="false" in="?" from="(50 * 1024) * 1024" to="((50 * 1024) * 1024) + 1" />
    <mutant id="mutant_9337" viable="false" in="?" from="60 * (RelativeDateFormatter.SECOND_IN_MILLIS)" to="(60 * (RelativeDateFormatter.SECOND_IN_MILLIS)) - 1" />
    <mutant id="mutant_8004" viable="false" in="?" from="(50 * 1024) * 1024" to="((50 * 1024) * 1024) - 1" />
    <mutant id="mutant_9338" viable="false" in="?" from="60 * (RelativeDateFormatter.MINUTE_IN_MILLIS)" to="(60 * (RelativeDateFormatter.MINUTE_IN_MILLIS)) + 1" />
    <mutant id="mutant_8007" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="((getTimeWriting()) / 1000.0)" to="(((getTimeWriting()) / 1000.0) - 1)" />
    <mutant id="mutant_9335" viable="false" in="?" from="60 * (RelativeDateFormatter.SECOND_IN_MILLIS)" to="(60 * (RelativeDateFormatter.SECOND_IN_MILLIS)) + 1" />
    <mutant id="mutant_8006" viable="false" in="?" from="(50 * 1024) * 1024" to="((50 * 1024) * 1024) * -1" />
    <mutant id="mutant_9336" viable="false" in="?" from="60 * (RelativeDateFormatter.SECOND_IN_MILLIS)" to="(60 * (RelativeDateFormatter.SECOND_IN_MILLIS)) * -1" />
    <mutant id="mutant_8009" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="((getTimeWriting()) / 1000.0)" to="(((getTimeWriting()) / 1000.0) + 1)" />
    <mutant id="mutant_8008" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="((getTimeWriting()) / 1000.0)" to="(((getTimeWriting()) / 1000.0) * -1)" />
    <mutant id="mutant_9339" viable="false" in="?" from="60 * (RelativeDateFormatter.MINUTE_IN_MILLIS)" to="(60 * (RelativeDateFormatter.MINUTE_IN_MILLIS)) - 1" />
    <mutant id="mutant_9330" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((resolved.find(prefix)) + 1)" to="(((resolved.find(prefix)) + 1) + 1)" />
    <mutant id="mutant_8001" viable="false" in="?" from="(50 * 1024)" to="((50 * 1024) + 1)" />
    <mutant id="mutant_9333" viable="false" in="org.eclipse.jgit.util.RefMap.toRefName(java.lang.String)" from="(prefix) + name" to="((prefix) + name) * -1" />
    <mutant id="mutant_8000" viable="false" in="?" from="(50 * 1024) * 1024" to="((50 * 1024) * 1024) * -1" />
    <mutant id="mutant_9334" viable="false" in="org.eclipse.jgit.util.RefMap.toRefName(java.lang.String)" from="(prefix) + name" to="((prefix) + name) - 1" />
    <mutant id="mutant_8003" viable="false" in="?" from="(50 * 1024)" to="((50 * 1024) * -1)" />
    <mutant id="mutant_9331" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator.peek()" from="((packedIdx) &lt; (packed.size())) &amp;&amp; ((looseIdx) &lt; (loose.size()))" to="!(((packedIdx) &lt; (packed.size())) &amp;&amp; ((looseIdx) &lt; (loose.size())))" />
    <mutant id="mutant_8002" viable="false" in="?" from="(50 * 1024)" to="((50 * 1024) - 1)" />
    <mutant id="mutant_9332" viable="true" in="org.eclipse.jgit.util.RefMap.toRefName(java.lang.String)" from="(prefix) + name" to="((prefix) + name) + 1" />
    <mutant id="mutant_9326" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((loose.find(prefix)) + 1)" to="(((loose.find(prefix)) + 1) * -1)" />
    <mutant id="mutant_9327" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((loose.find(prefix)) + 1)" to="(((loose.find(prefix)) + 1) + 1)" />
    <mutant id="mutant_9324" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((packed.find(prefix)) + 1)" to="(((packed.find(prefix)) + 1) + 1)" />
    <mutant id="mutant_9325" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((loose.find(prefix)) + 1)" to="(((loose.find(prefix)) + 1) - 1)" />
    <mutant id="mutant_9328" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((resolved.find(prefix)) + 1)" to="(((resolved.find(prefix)) + 1) - 1)" />
    <mutant id="mutant_9329" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((resolved.find(prefix)) + 1)" to="(((resolved.find(prefix)) + 1) * -1)" />
    <mutant id="mutant_8074" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((honorIgnores) &amp;&amp; (wi.isEntryIgnored()))" to="(!((honorIgnores) &amp;&amp; (wi.isEntryIgnored())))" />
    <mutant id="mutant_8073" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.insert(byte[],int)" from="(j + 1)" to="((j + 1) + 1)" />
    <mutant id="mutant_8076" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING)))" to="(!((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING))))" />
    <mutant id="mutant_8075" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(FileMode.TREE.equals(wm)) &amp;&amp; (!((honorIgnores) &amp;&amp; (wi.isEntryIgnored())))" to="!((FileMode.TREE.equals(wm)) &amp;&amp; (!((honorIgnores) &amp;&amp; (wi.isEntryIgnored()))))" />
    <mutant id="mutant_8078" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(honorIgnores) &amp;&amp; (wi.isEntryIgnored())" to="!((honorIgnores) &amp;&amp; (wi.isEntryIgnored()))" />
    <mutant id="mutant_8077" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING))) &amp;&amp; (FileMode.TREE.equals(rmode))" to="!(((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING))) &amp;&amp; (FileMode.TREE.equals(rmode)))" />
    <mutant id="mutant_8079" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == (dirCache)) || (i == (workingTree))" to="!((i == (dirCache)) || (i == (workingTree)))" />
    <mutant id="mutant_8070" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.initTable(int)" from="sz - 1" to="(sz - 1) * -1" />
    <mutant id="mutant_8072" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.insert(byte[],int)" from="(j + 1)" to="((j + 1) * -1)" />
    <mutant id="mutant_8071" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.insert(byte[],int)" from="(j + 1)" to="((j + 1) - 1)" />
    <mutant id="mutant_8063" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.get(byte[],int,int)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_9395" viable="true" in="org.eclipse.jgit.util.StringUtils.isEmptyOrNull(java.lang.String)" from="(stringValue == null) || ((stringValue.length()) == 0)" to="!((stringValue == null) || ((stringValue.length()) == 0))" />
    <mutant id="mutant_8062" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.get(byte[],int,int)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_9396" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(i &lt; (a.length())) &amp;&amp; (i &lt; (b.length()))" to="!((i &lt; (a.length())) &amp;&amp; (i &lt; (b.length())))" />
    <mutant id="mutant_8065" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.chainlength(byte[])" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_9393" viable="false" in="?" from="((char)('a' + (c - 'A')))" to="((char)(('a' + (c - 'A')))) * -1" />
    <mutant id="mutant_8064" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.get(byte[],int,int)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_9394" viable="false" in="?" from="((char)('a' + (c - 'A')))" to="((char)(('a' + (c - 'A')))) + 1" />
    <mutant id="mutant_8067" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.chainlength(byte[])" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_9399" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) - (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))" to="((org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) - (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))) * -1" />
    <mutant id="mutant_8066" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.chainlength(byte[])" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_8069" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.initTable(int)" from="sz - 1" to="(sz - 1) - 1" />
    <mutant id="mutant_9397" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) - (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))" to="((org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) - (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))) + 1" />
    <mutant id="mutant_8068" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.initTable(int)" from="sz - 1" to="(sz - 1) + 1" />
    <mutant id="mutant_9398" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) - (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))" to="((org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) - (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))) - 1" />
    <mutant id="mutant_9391" viable="false" in="?" from="(c - 'A')" to="((c - 'A') - 1)" />
    <mutant id="mutant_9392" viable="false" in="?" from="((char)('a' + (c - 'A')))" to="((char)(('a' + (c - 'A')))) - 1" />
    <mutant id="mutant_8061" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.addIfAbsent(byte[],int,int)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_8060" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.addIfAbsent(byte[],int,int)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_9390" viable="false" in="?" from="(c - 'A')" to="((c - 'A') + 1)" />
    <mutant id="mutant_8059" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.addIfAbsent(byte[],int,int)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_8052" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="(capacity * 2)" to="((capacity * 2) * -1)" />
    <mutant id="mutant_9384" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="unit + (unit / 2)" to="(unit + (unit / 2)) + 1" />
    <mutant id="mutant_8051" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((pos) == (length)) || ((data[pos]) == '/')" to="!(((pos) == (length)) || ((data[pos]) == '/'))" />
    <mutant id="mutant_9385" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="unit + (unit / 2)" to="(unit + (unit / 2)) - 1" />
    <mutant id="mutant_8054" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="(capacity * 2)" to="((capacity * 2) + 1)" />
    <mutant id="mutant_9382" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="(unit / 2)" to="((unit / 2) - 1)" />
    <mutant id="mutant_8053" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="(capacity * 2)" to="((capacity * 2) - 1)" />
    <mutant id="mutant_9383" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="unit + (unit / 2)" to="(unit + (unit / 2)) * -1" />
    <mutant id="mutant_8056" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="((capacity * 2) - 1)" to="(((capacity * 2) - 1) - 1)" />
    <mutant id="mutant_9388" viable="false" in="?" from="'Z' + 1" to="('Z' + 1) - 1" />
    <mutant id="mutant_8055" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="((capacity * 2) - 1)" to="(((capacity * 2) - 1) * -1)" />
    <mutant id="mutant_9389" viable="false" in="?" from="(c - 'A')" to="((c - 'A') * -1)" />
    <mutant id="mutant_8058" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.equals(byte[],byte[],int)" from="((storedObj.length) != length) || ((toFind.length) &lt; length)" to="!(((storedObj.length) != length) || ((toFind.length) &lt; length))" />
    <mutant id="mutant_9386" viable="false" in="?" from="'Z' + 1" to="('Z' + 1) + 1" />
    <mutant id="mutant_8057" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="((capacity * 2) - 1)" to="(((capacity * 2) - 1) + 1)" />
    <mutant id="mutant_9387" viable="false" in="?" from="'Z' + 1" to="('Z' + 1) * -1" />
    <mutant id="mutant_9380" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="(unit / 2)" to="((unit / 2) * -1)" />
    <mutant id="mutant_9381" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="(unit / 2)" to="((unit / 2) + 1)" />
    <mutant id="mutant_8050" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31) + (data[pos])" to="(((hash) * 31) + (data[pos])) * -1" />
    <mutant id="mutant_8049" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31) + (data[pos])" to="(((hash) * 31) + (data[pos])) - 1" />
    <mutant id="mutant_8048" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31) + (data[pos])" to="(((hash) * 31) + (data[pos])) + 1" />
    <mutant id="mutant_9379" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2)) / unit" to="((n + (unit / 2)) / unit) - 1" />
    <mutant id="mutant_8041" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31)" to="(((hash) * 31) + 1)" />
    <mutant id="mutant_9373" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(unit / 2)" to="((unit / 2) - 1)" />
    <mutant id="mutant_8040" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31)" to="(((hash) * 31) * -1)" />
    <mutant id="mutant_9374" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2))" to="((n + (unit / 2)) * -1)" />
    <mutant id="mutant_8043" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31) + (data[(pos)++])" to="(((hash) * 31) + (data[(pos)++])) - 1" />
    <mutant id="mutant_9371" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(unit / 2)" to="((unit / 2) * -1)" />
    <mutant id="mutant_8042" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31) + (data[(pos)++])" to="(((hash) * 31) + (data[(pos)++])) + 1" />
    <mutant id="mutant_9372" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(unit / 2)" to="((unit / 2) + 1)" />
    <mutant id="mutant_8045" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31)" to="(((hash) * 31) - 1)" />
    <mutant id="mutant_9377" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2)) / unit" to="((n + (unit / 2)) / unit) * -1" />
    <mutant id="mutant_8044" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31) + (data[(pos)++])" to="(((hash) * 31) + (data[(pos)++])) * -1" />
    <mutant id="mutant_9378" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2)) / unit" to="((n + (unit / 2)) / unit) + 1" />
    <mutant id="mutant_8047" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31)" to="(((hash) * 31) + 1)" />
    <mutant id="mutant_9375" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2))" to="((n + (unit / 2)) + 1)" />
    <mutant id="mutant_8046" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31)" to="(((hash) * 31) * -1)" />
    <mutant id="mutant_9376" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2))" to="((n + (unit / 2)) - 1)" />
    <mutant id="mutant_9370" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(ageMillis % (RelativeDateFormatter.YEAR_IN_MILLIS))" to="((ageMillis % (RelativeDateFormatter.YEAR_IN_MILLIS)) * -1)" />
    <mutant id="mutant_8038" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="((((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;) - 1" />
    <mutant id="mutant_8037" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="((((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;) + 1" />
    <mutant id="mutant_9368" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(ageMillis % (RelativeDateFormatter.YEAR_IN_MILLIS))" to="((ageMillis % (RelativeDateFormatter.YEAR_IN_MILLIS)) - 1)" />
    <mutant id="mutant_8039" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31)" to="(((hash) * 31) - 1)" />
    <mutant id="mutant_9369" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(ageMillis % (RelativeDateFormatter.YEAR_IN_MILLIS))" to="((ageMillis % (RelativeDateFormatter.YEAR_IN_MILLIS)) + 1)" />
    <mutant id="mutant_4502" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty())))" to="(!(((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty()))))" />
    <mutant id="mutant_5834" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(NB.decodeInt32(info, (base + 4))) / 1000000" to="((NB.decodeInt32(info, (base + 4))) / 1000000) * -1" />
    <mutant id="mutant_4501" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="((reuseDeltas) || (config.isReuseObjects()))" to="(!((reuseDeltas) || (config.isReuseObjects())))" />
    <mutant id="mutant_5835" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec)" to="((1000L * sec) * -1)" />
    <mutant id="mutant_4500" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjects(org.eclipse.jgit.internal.storage.pack.PackOutputStream,java.util.List)" from="(out.length()) - beginOffset" to="((out.length()) - beginOffset) * -1" />
    <mutant id="mutant_5836" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec)" to="((1000L * sec) - 1)" />
    <mutant id="mutant_5837" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec)" to="((1000L * sec) + 1)" />
    <mutant id="mutant_5838" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec) + ms" to="((1000L * sec) + ms) + 1" />
    <mutant id="mutant_5839" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec) + ms" to="((1000L * sec) + ms) * -1" />
    <mutant id="mutant_4509" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$1.compare(org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder,org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder)" from="((b.cardinality()) - (a.cardinality()))" to="(((b.cardinality()) - (a.cardinality())) * -1)" />
    <mutant id="mutant_4508" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="((System.currentTimeMillis()) - writeStart) + 1" />
    <mutant id="mutant_4507" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="((System.currentTimeMillis()) - writeStart) - 1" />
    <mutant id="mutant_4506" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="((System.currentTimeMillis()) - writeStart) * -1" />
    <mutant id="mutant_5830" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(base + 4)" to="((base + 4) - 1)" />
    <mutant id="mutant_4505" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(!(edgeObjects.isEmpty())) || (!(cachedPacks.isEmpty()))" to="!((!(edgeObjects.isEmpty())) || (!(cachedPacks.isEmpty())))" />
    <mutant id="mutant_5831" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(base + 4)" to="((base + 4) + 1)" />
    <mutant id="mutant_4504" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="needSearchForReuse &amp;&amp; (config.isDeltaCompress())" to="!(needSearchForReuse &amp;&amp; (config.isDeltaCompress()))" />
    <mutant id="mutant_5832" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(NB.decodeInt32(info, (base + 4))) / 1000000" to="((NB.decodeInt32(info, (base + 4))) / 1000000) + 1" />
    <mutant id="mutant_4503" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="((reuseSupport) != null) &amp;&amp; (((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty())))" to="!(((reuseSupport) != null) &amp;&amp; (((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty()))))" />
    <mutant id="mutant_5833" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(NB.decodeInt32(info, (base + 4))) / 1000000" to="((NB.decodeInt32(info, (base + 4))) / 1000000) - 1" />
    <mutant id="mutant_5823" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) + &quot;\n&quot;" to="((((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) + &quot;\n&quot;) * -1" />
    <mutant id="mutant_5824" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) + &quot;\n&quot;" to="((((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) + &quot;\n&quot;) - 1" />
    <mutant id="mutant_5825" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) + &quot;\n&quot;" to="((((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) + &quot;\n&quot;) + 1" />
    <mutant id="mutant_5826" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(infoOffset) + pIdx" to="((infoOffset) + pIdx) - 1" />
    <mutant id="mutant_5827" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(infoOffset) + pIdx" to="((infoOffset) + pIdx) + 1" />
    <mutant id="mutant_5828" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(infoOffset) + pIdx" to="((infoOffset) + pIdx) * -1" />
    <mutant id="mutant_5829" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(base + 4)" to="((base + 4) * -1)" />
    <mutant id="mutant_5820" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString()))" to="((((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) + 1)" />
    <mutant id="mutant_5821" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString()))" to="((((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) - 1)" />
    <mutant id="mutant_5822" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString()))" to="((((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) * -1)" />
    <mutant id="mutant_8096" viable="false" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index)) + &quot;)&quot;" to="((&quot;NotIgnored(&quot; + (index)) + &quot;)&quot;) * -1" />
    <mutant id="mutant_8095" viable="true" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index)) + &quot;)&quot;" to="((&quot;NotIgnored(&quot; + (index)) + &quot;)&quot;) + 1" />
    <mutant id="mutant_8098" viable="true" in="org.eclipse.jgit.treewalk.filter.NotTreeFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="(&quot;NOT &quot; + (a.toString())) + 1" />
    <mutant id="mutant_8097" viable="false" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index)) + &quot;)&quot;" to="((&quot;NotIgnored(&quot; + (index)) + &quot;)&quot;) - 1" />
    <mutant id="mutant_8099" viable="false" in="org.eclipse.jgit.treewalk.filter.NotTreeFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="(&quot;NOT &quot; + (a.toString())) - 1" />
    <mutant id="mutant_8090" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.baseTree)))" to="!(((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.baseTree))))" />
    <mutant id="mutant_8092" viable="true" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index))" to="((&quot;NotIgnored(&quot; + (index)) + 1)" />
    <mutant id="mutant_8091" viable="true" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == null) || (!(i.isEntryIgnored()))" to="!((i == null) || (!(i.isEntryIgnored())))" />
    <mutant id="mutant_8094" viable="false" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index))" to="((&quot;NotIgnored(&quot; + (index)) * -1)" />
    <mutant id="mutant_8093" viable="false" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index))" to="((&quot;NotIgnored(&quot; + (index)) - 1)" />
    <mutant id="mutant_5812" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;)" to="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) - 1)" />
    <mutant id="mutant_5813" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;)" to="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) * -1)" />
    <mutant id="mutant_5814" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage()))" to="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + 1)" />
    <mutant id="mutant_5815" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage()))" to="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) * -1)" />
    <mutant id="mutant_5816" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage()))" to="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) - 1)" />
    <mutant id="mutant_5817" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;)" to="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + 1)" />
    <mutant id="mutant_5818" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;)" to="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) * -1)" />
    <mutant id="mutant_5819" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;)" to="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) - 1)" />
    <mutant id="mutant_5810" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId()))" to="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) - 1)" />
    <mutant id="mutant_5811" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;)" to="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + 1)" />
    <mutant id="mutant_8085" viable="false" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="((untrackedParentFolders.getFirst()) + &quot;/&quot;)" to="(((untrackedParentFolders.getFirst()) + &quot;/&quot;) - 1)" />
    <mutant id="mutant_8084" viable="false" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="((untrackedParentFolders.getFirst()) + &quot;/&quot;)" to="(((untrackedParentFolders.getFirst()) + &quot;/&quot;) * -1)" />
    <mutant id="mutant_8087" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="(!(untrackedFolders.isEmpty())) &amp;&amp; (untrackedFolders.getLast().startsWith(pathToBeSaved))" to="!((!(untrackedFolders.isEmpty())) &amp;&amp; (untrackedFolders.getLast().startsWith(pathToBeSaved)))" />
    <mutant id="mutant_8086" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="(!(untrackedParentFolders.isEmpty())) &amp;&amp; (!(currentPath.startsWith(((untrackedParentFolders.getFirst()) + &quot;/&quot;))))" to="!((!(untrackedParentFolders.isEmpty())) &amp;&amp; (!(currentPath.startsWith(((untrackedParentFolders.getFirst()) + &quot;/&quot;)))))" />
    <mutant id="mutant_8089" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(baseDci != null) &amp;&amp; (newDci != null)" to="!((baseDci != null) &amp;&amp; (newDci != null))" />
    <mutant id="mutant_8088" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(baseDirCache != null) &amp;&amp; (newDirCache != null)" to="!((baseDirCache != null) &amp;&amp; (newDirCache != null))" />
    <mutant id="mutant_5809" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId()))" to="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) * -1)" />
    <mutant id="mutant_8081" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((tw.getRawMode(i)) != dm) || (!(tw.idEqual(i, dirCache)))" to="!(((tw.getRawMode(i)) != dm) || (!(tw.idEqual(i, dirCache))))" />
    <mutant id="mutant_8080" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == (dirCache)) || (i == (workingTree))" to="!((i == (dirCache)) || (i == (workingTree)))" />
    <mutant id="mutant_8083" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="((untrackedParentFolders.getFirst()) + &quot;/&quot;)" to="(((untrackedParentFolders.getFirst()) + &quot;/&quot;) + 1)" />
    <mutant id="mutant_8082" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.getUntrackedFolders()" from="(!(ret.isEmpty())) &amp;&amp; (ret.getLast().startsWith(toBeAdded))" to="!((!(ret.isEmpty())) &amp;&amp; (ret.getLast().startsWith(toBeAdded)))" />
    <mutant id="mutant_5801" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;)" to="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + 1)" />
    <mutant id="mutant_5802" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified()))" to="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) - 1)" />
    <mutant id="mutant_5803" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified()))" to="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) * -1)" />
    <mutant id="mutant_5804" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified()))" to="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + 1)" />
    <mutant id="mutant_5805" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;)" to="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + 1)" />
    <mutant id="mutant_5806" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;)" to="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) * -1)" />
    <mutant id="mutant_5807" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;)" to="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) - 1)" />
    <mutant id="mutant_5808" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId()))" to="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + 1)" />
    <mutant id="mutant_5800" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;)" to="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) - 1)" />
    <mutant id="mutant_5880" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(base + 4)" to="((base + 4) * -1)" />
    <mutant id="mutant_3215" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset((p - 1)))) == 0)" to="!((0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset((p - 1)))) == 0))" />
    <mutant id="mutant_4546" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="((s.length()) - 1) * -1" />
    <mutant id="mutant_5878" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(infoOffset) + (DirCacheEntry.P_SIZE)" to="((infoOffset) + (DirCacheEntry.P_SIZE)) * -1" />
    <mutant id="mutant_3214" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="((p - 1) + 1)" />
    <mutant id="mutant_4545" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="((s.length()) - 1) + 1" />
    <mutant id="mutant_5879" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(infoOffset) + (DirCacheEntry.P_SIZE)" to="((infoOffset) + (DirCacheEntry.P_SIZE)) - 1" />
    <mutant id="mutant_3213" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="((p - 1) * -1)" />
    <mutant id="mutant_4544" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have leading asterisk: &quot; + pattern)" to="((&quot;Pattern must have leading asterisk: &quot; + pattern) + 1)" />
    <mutant id="mutant_3212" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="((p - 1) - 1)" />
    <mutant id="mutant_4543" viable="false" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have leading asterisk: &quot; + pattern)" to="((&quot;Pattern must have leading asterisk: &quot; + pattern) - 1)" />
    <mutant id="mutant_3211" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="((low + high) - 1)" />
    <mutant id="mutant_4542" viable="false" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have leading asterisk: &quot; + pattern)" to="((&quot;Pattern must have leading asterisk: &quot; + pattern) * -1)" />
    <mutant id="mutant_3210" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="((low + high) * -1)" />
    <mutant id="mutant_4541" viable="true" in="org.eclipse.jgit.ignore.internal.AbstractMatcher.equals(java.lang.Object)" from="((dirOnly) == (other.dirOnly)) &amp;&amp; (pattern.equals(other.pattern))" to="!(((dirOnly) == (other.dirOnly)) &amp;&amp; (pattern.equals(other.pattern)))" />
    <mutant id="mutant_4540" viable="true" in="org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation.wasDeltaAttempted()" from="(fmt == (StoredObjectRepresentation.PACK_DELTA)) || (fmt == (StoredObjectRepresentation.PACK_WHOLE))" to="!((fmt == (StoredObjectRepresentation.PACK_DELTA)) || (fmt == (StoredObjectRepresentation.PACK_WHOLE)))" />
    <mutant id="mutant_5870" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) + 1)" />
    <mutant id="mutant_5871" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode)" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="(((infoOffset) + (DirCacheEntry.P_MODE)) + 1)" />
    <mutant id="mutant_5872" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode)" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="(((infoOffset) + (DirCacheEntry.P_MODE)) - 1)" />
    <mutant id="mutant_5873" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode)" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="(((infoOffset) + (DirCacheEntry.P_MODE)) * -1)" />
    <mutant id="mutant_3219" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="(p + 1) + 1" />
    <mutant id="mutant_5874" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setLength(int)" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="(((infoOffset) + (DirCacheEntry.P_SIZE)) + 1)" />
    <mutant id="mutant_3218" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="(p + 1) * -1" />
    <mutant id="mutant_4549" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="((endExcl - startIncl) + 1)" />
    <mutant id="mutant_5875" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setLength(int)" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="(((infoOffset) + (DirCacheEntry.P_SIZE)) * -1)" />
    <mutant id="mutant_3217" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="(p + 1) - 1" />
    <mutant id="mutant_4548" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="((endExcl - startIncl) * -1)" />
    <mutant id="mutant_5876" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setLength(int)" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="(((infoOffset) + (DirCacheEntry.P_SIZE)) - 1)" />
    <mutant id="mutant_3216" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(p))) == 0)" to="!((p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(p))) == 0))" />
    <mutant id="mutant_4547" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="((s.length()) - 1) - 1" />
    <mutant id="mutant_5877" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(infoOffset) + (DirCacheEntry.P_SIZE)" to="((infoOffset) + (DirCacheEntry.P_SIZE)) + 1" />
    <mutant id="mutant_3204" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset64Count()" from="(offset64.length) / 8" to="((offset64.length) / 8) + 1" />
    <mutant id="mutant_4535" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((list.size()) - 1)" to="(((list.size()) - 1) + 1)" />
    <mutant id="mutant_5867" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) + 1)" />
    <mutant id="mutant_3203" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset64Count()" from="(offset64.length) / 8" to="((offset64.length) / 8) - 1" />
    <mutant id="mutant_4534" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((list.size()) - 1)" to="(((list.size()) - 1) - 1)" />
    <mutant id="mutant_5868" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) * -1)" />
    <mutant id="mutant_3202" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset(int,int)" from="(8 * ((int)((p &amp; (~(PackIndexV2.IS_O64))))))" to="((8 * ((int)((p &amp; (~(PackIndexV2.IS_O64)))))) + 1)" />
    <mutant id="mutant_4533" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((list.size()) - 1)" to="(((list.size()) - 1) * -1)" />
    <mutant id="mutant_5869" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) - 1)" />
    <mutant id="mutant_3201" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset(int,int)" from="(8 * ((int)((p &amp; (~(PackIndexV2.IS_O64))))))" to="((8 * ((int)((p &amp; (~(PackIndexV2.IS_O64)))))) - 1)" />
    <mutant id="mutant_4532" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(!mustPick) &amp;&amp; ((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" to="!((!mustPick) &amp;&amp; ((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits))))))" />
    <mutant id="mutant_3200" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset(int,int)" from="(8 * ((int)((p &amp; (~(PackIndexV2.IS_O64))))))" to="((8 * ((int)((p &amp; (~(PackIndexV2.IS_O64)))))) * -1)" />
    <mutant id="mutant_4531" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" to="(!((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits))))))" />
    <mutant id="mutant_4530" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits))))" to="(!(((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" />
    <mutant id="mutant_5860" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)((when % 1000)))" to="(((int)((when % 1000))) - 1)" />
    <mutant id="mutant_5861" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)((when % 1000)))" to="(((int)((when % 1000))) + 1)" />
    <mutant id="mutant_3209" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="((low + high) + 1)" />
    <mutant id="mutant_5862" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(((int)((when % 1000))) * 1000000)" to="((((int)((when % 1000))) * 1000000) + 1)" />
    <mutant id="mutant_3208" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getObjectId(long)" from="(p4 + p)" to="((p4 + p) - 1)" />
    <mutant id="mutant_4539" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(paths.size()) - 1" to="((paths.size()) - 1) + 1" />
    <mutant id="mutant_5863" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(((int)((when % 1000))) * 1000000)" to="((((int)((when % 1000))) * 1000000) - 1)" />
    <mutant id="mutant_3207" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getObjectId(long)" from="(p4 + p)" to="((p4 + p) * -1)" />
    <mutant id="mutant_4538" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(paths.size()) - 1" to="((paths.size()) - 1) - 1" />
    <mutant id="mutant_5864" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(((int)((when % 1000))) * 1000000)" to="((((int)((when % 1000))) * 1000000) * -1)" />
    <mutant id="mutant_3206" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getObjectId(long)" from="(p4 + p)" to="((p4 + p) + 1)" />
    <mutant id="mutant_4537" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(paths.size()) - 1" to="((paths.size()) - 1) * -1" />
    <mutant id="mutant_5865" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) * -1)" />
    <mutant id="mutant_3205" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset64Count()" from="(offset64.length) / 8" to="((offset64.length) / 8) * -1" />
    <mutant id="mutant_4536" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(ro instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (!(reuseBitmap.contains(ro)))" to="!((ro instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (!(reuseBitmap.contains(ro))))" />
    <mutant id="mutant_5866" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) - 1)" />
    <mutant id="mutant_4524" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(totCommits / (minCommits))" to="((totCommits / (minCommits)) + 1)" />
    <mutant id="mutant_5856" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(base + 4)" to="((base + 4) * -1)" />
    <mutant id="mutant_4523" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(result.commitsByOldest.length) - (result.commitStartPos)" to="((result.commitsByOldest.length) - (result.commitStartPos)) - 1" />
    <mutant id="mutant_5857" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(base + 4)" to="((base + 4) - 1)" />
    <mutant id="mutant_4522" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(result.commitsByOldest.length) - (result.commitStartPos)" to="((result.commitsByOldest.length) - (result.commitStartPos)) * -1" />
    <mutant id="mutant_5858" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(base + 4)" to="((base + 4) + 1)" />
    <mutant id="mutant_4521" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(result.commitsByOldest.length) - (result.commitStartPos)" to="((result.commitsByOldest.length) - (result.commitStartPos)) + 1" />
    <mutant id="mutant_5859" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)((when % 1000)))" to="(((int)((when % 1000))) * -1)" />
    <mutant id="mutant_4520" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - minRegionEnd)" to="((idxFromStart - minRegionEnd) * -1)" />
    <mutant id="mutant_5850" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(infoOffset) + pIdx" to="((infoOffset) + pIdx) - 1" />
    <mutant id="mutant_4529" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((totCommits / (minCommits)) + 1)" to="(((totCommits / (minCommits)) + 1) - 1)" />
    <mutant id="mutant_5851" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(infoOffset) + pIdx" to="((infoOffset) + pIdx) + 1" />
    <mutant id="mutant_4528" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((totCommits / (minCommits)) + 1)" to="(((totCommits / (minCommits)) + 1) * -1)" />
    <mutant id="mutant_5852" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(infoOffset) + pIdx" to="((infoOffset) + pIdx) * -1" />
    <mutant id="mutant_4527" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((totCommits / (minCommits)) + 1)" to="(((totCommits / (minCommits)) + 1) + 1)" />
    <mutant id="mutant_5853" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)(when / 1000))" to="(((int)((when / 1000))) * -1)" />
    <mutant id="mutant_4526" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(totCommits / (minCommits))" to="((totCommits / (minCommits)) * -1)" />
    <mutant id="mutant_5854" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)(when / 1000))" to="(((int)((when / 1000))) - 1)" />
    <mutant id="mutant_4525" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(totCommits / (minCommits))" to="((totCommits / (minCommits)) - 1)" />
    <mutant id="mutant_5855" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)(when / 1000))" to="(((int)((when / 1000))) + 1)" />
    <mutant id="mutant_4513" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="cardinality - idx" to="(cardinality - idx) - 1" />
    <mutant id="mutant_5845" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((src.infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((src.infoOffset) + (DirCacheEntry.P_FLAGS)) - 1)" />
    <mutant id="mutant_4512" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="cardinality - idx" to="(cardinality - idx) + 1" />
    <mutant id="mutant_5846" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((src.infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((src.infoOffset) + (DirCacheEntry.P_FLAGS)) + 1)" />
    <mutant id="mutant_4511" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$1.compare(org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder,org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder)" from="((b.cardinality()) - (a.cardinality()))" to="(((b.cardinality()) - (a.cardinality())) - 1)" />
    <mutant id="mutant_5847" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) * -1)" />
    <mutant id="mutant_4510" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$1.compare(org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder,org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder)" from="((b.cardinality()) - (a.cardinality()))" to="(((b.cardinality()) - (a.cardinality())) + 1)" />
    <mutant id="mutant_5848" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) - 1)" />
    <mutant id="mutant_5849" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) + 1)" />
    <mutant id="mutant_4519" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - minRegionEnd)" to="((idxFromStart - minRegionEnd) - 1)" />
    <mutant id="mutant_4518" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - minRegionEnd)" to="((idxFromStart - minRegionEnd) + 1)" />
    <mutant id="mutant_5840" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec) + ms" to="((1000L * sec) + ms) - 1" />
    <mutant id="mutant_4517" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - mustRegionEnd)" to="((idxFromStart - mustRegionEnd) + 1)" />
    <mutant id="mutant_5841" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) * -1)" />
    <mutant id="mutant_4516" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - mustRegionEnd)" to="((idxFromStart - mustRegionEnd) - 1)" />
    <mutant id="mutant_5842" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) - 1)" />
    <mutant id="mutant_4515" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - mustRegionEnd)" to="((idxFromStart - mustRegionEnd) * -1)" />
    <mutant id="mutant_5843" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((infoOffset) + (DirCacheEntry.P_FLAGS)) + 1)" />
    <mutant id="mutant_4514" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="cardinality - idx" to="(cardinality - idx) * -1" />
    <mutant id="mutant_5844" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((src.infoOffset) + (DirCacheEntry.P_FLAGS))" to="(((src.infoOffset) + (DirCacheEntry.P_FLAGS)) * -1)" />
  </mutants>
</mutation>
