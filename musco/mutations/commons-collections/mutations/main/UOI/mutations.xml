<?xml version="1.0" encoding="UTF-8"?>
<mutation operator-id="UOI" parent="../../../smf.run.xml" name="main" config-file="mutations.xml" time="200111">
  <class-to-mutate />
  <mutants>
    <mutant id="mutant_569" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.equals(java.lang.Object)" from="(key == null ? (other.getKey()) == null : key.equals(other.getKey())) &amp;&amp; (value == null ? (other.getValue()) == null : value.equals(other.getValue()))" to="!((key == null ? (other.getKey()) == null : key.equals(other.getKey())) &amp;&amp; (value == null ? (other.getValue()) == null : value.equals(other.getValue())))" />
    <mutant id="mutant_565" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getValue()" from="(&quot;Invalid map index: &quot; + (index))" to="((&quot;Invalid map index: &quot; + (index)) - 1)" />
    <mutant id="mutant_566" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.setValue(V)" from="(&quot;Invalid map index: &quot; + (index))" to="((&quot;Invalid map index: &quot; + (index)) * -1)" />
    <mutant id="mutant_567" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.setValue(V)" from="(&quot;Invalid map index: &quot; + (index))" to="((&quot;Invalid map index: &quot; + (index)) + 1)" />
    <mutant id="mutant_568" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.setValue(V)" from="(&quot;Invalid map index: &quot; + (index))" to="((&quot;Invalid map index: &quot; + (index)) - 1)" />
    <mutant id="mutant_561" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getKey()" from="(&quot;Invalid map index: &quot; + (index))" to="((&quot;Invalid map index: &quot; + (index)) + 1)" />
    <mutant id="mutant_562" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getKey()" from="(&quot;Invalid map index: &quot; + (index))" to="((&quot;Invalid map index: &quot; + (index)) - 1)" />
    <mutant id="mutant_563" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getValue()" from="(&quot;Invalid map index: &quot; + (index))" to="((&quot;Invalid map index: &quot; + (index)) * -1)" />
    <mutant id="mutant_564" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getValue()" from="(&quot;Invalid map index: &quot; + (index))" to="((&quot;Invalid map index: &quot; + (index)) + 1)" />
    <mutant id="mutant_560" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getKey()" from="(&quot;Invalid map index: &quot; + (index))" to="((&quot;Invalid map index: &quot; + (index)) * -1)" />
    <mutant id="mutant_576" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getKey()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="((&quot;Invalid map index: &quot; + (nextIndex)) + 1)" />
    <mutant id="mutant_577" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getKey()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="((&quot;Invalid map index: &quot; + (nextIndex)) - 1)" />
    <mutant id="mutant_578" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getKey()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="((&quot;Invalid map index: &quot; + (nextIndex)) * -1)" />
    <mutant id="mutant_579" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getValue()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="((&quot;Invalid map index: &quot; + (nextIndex)) + 1)" />
    <mutant id="mutant_572" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="(((getKey()) + &quot;=&quot;) * -1)" />
    <mutant id="mutant_573" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="(((getKey()) + &quot;=&quot;) + (getValue())) - 1" />
    <mutant id="mutant_574" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="(((getKey()) + &quot;=&quot;) + (getValue())) * -1" />
    <mutant id="mutant_575" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="(((getKey()) + &quot;=&quot;) + (getValue())) + 1" />
    <mutant id="mutant_570" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="(((getKey()) + &quot;=&quot;) - 1)" />
    <mutant id="mutant_571" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="(((getKey()) + &quot;=&quot;) + 1)" />
    <mutant id="mutant_107" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) * -1)" />
    <mutant id="mutant_108" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + 1)" />
    <mutant id="mutant_109" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) - 1)" />
    <mutant id="mutant_103" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(!endMarkerAllowed) &amp;&amp; (index == (size))" to="!((!endMarkerAllowed) &amp;&amp; (index == (size)))" />
    <mutant id="mutant_587" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="((&quot;Iterator[&quot; + (getKey())) - 1)" />
    <mutant id="mutant_104" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) * -1)" />
    <mutant id="mutant_588" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + 1)" />
    <mutant id="mutant_105" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) - 1)" />
    <mutant id="mutant_589" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) - 1)" />
    <mutant id="mutant_106" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + 1)" />
    <mutant id="mutant_1298" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + i" to="(beginIndex1 + i) - 1" />
    <mutant id="mutant_1299" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + i" to="(beginIndex1 + i) * -1" />
    <mutant id="mutant_1296" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + (otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="(beginIndex2 + (otherLengthInBits / (StringKeyAnalyzer.LENGTH))) + 1" />
    <mutant id="mutant_1297" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + i" to="(beginIndex1 + i) + 1" />
    <mutant id="mutant_1294" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + (otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="(beginIndex2 + (otherLengthInBits / (StringKeyAnalyzer.LENGTH))) - 1" />
    <mutant id="mutant_1295" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + (otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="(beginIndex2 + (otherLengthInBits / (StringKeyAnalyzer.LENGTH))) * -1" />
    <mutant id="mutant_583" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.setValue(V)" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="((&quot;Invalid map index: &quot; + (nextIndex)) - 1)" />
    <mutant id="mutant_100" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) less than zero.&quot;)" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) less than zero.&quot;) * -1)" />
    <mutant id="mutant_584" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.setValue(V)" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="((&quot;Invalid map index: &quot; + (nextIndex)) * -1)" />
    <mutant id="mutant_101" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) less than zero.&quot;)" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) less than zero.&quot;) - 1)" />
    <mutant id="mutant_585" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="((&quot;Iterator[&quot; + (getKey())) * -1)" />
    <mutant id="mutant_102" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) less than zero.&quot;)" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) less than zero.&quot;) + 1)" />
    <mutant id="mutant_586" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="((&quot;Iterator[&quot; + (getKey())) + 1)" />
    <mutant id="mutant_580" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getValue()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="((&quot;Invalid map index: &quot; + (nextIndex)) - 1)" />
    <mutant id="mutant_581" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getValue()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="((&quot;Invalid map index: &quot; + (nextIndex)) * -1)" />
    <mutant id="mutant_582" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.setValue(V)" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="((&quot;Invalid map index: &quot; + (nextIndex)) + 1)" />
    <mutant id="mutant_118" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) - 1)" />
    <mutant id="mutant_119" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;)" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + 1)" />
    <mutant id="mutant_114" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) - 1)" />
    <mutant id="mutant_598" viable="true" in="org.apache.commons.collections4.map.Flat3Map.get(java.lang.Object)" from="((hash2) == hashCode) &amp;&amp; (key.equals(key2))" to="!(((hash2) == hashCode) &amp;&amp; (key.equals(key2)))" />
    <mutant id="mutant_115" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + 1)" />
    <mutant id="mutant_599" viable="true" in="org.apache.commons.collections4.map.Flat3Map.get(java.lang.Object)" from="((hash1) == hashCode) &amp;&amp; (key.equals(key1))" to="!(((hash1) == hashCode) &amp;&amp; (key.equals(key1)))" />
    <mutant id="mutant_116" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) * -1)" />
    <mutant id="mutant_117" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + 1)" />
    <mutant id="mutant_1292" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="((otherLengthInBits / (StringKeyAnalyzer.LENGTH)) + 1)" />
    <mutant id="mutant_1293" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="((otherLengthInBits / (StringKeyAnalyzer.LENGTH)) - 1)" />
    <mutant id="mutant_1290" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + (lengthInBits / (StringKeyAnalyzer.LENGTH))" to="(beginIndex1 + (lengthInBits / (StringKeyAnalyzer.LENGTH))) + 1" />
    <mutant id="mutant_1291" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="((otherLengthInBits / (StringKeyAnalyzer.LENGTH)) * -1)" />
    <mutant id="mutant_1289" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + (lengthInBits / (StringKeyAnalyzer.LENGTH))" to="(beginIndex1 + (lengthInBits / (StringKeyAnalyzer.LENGTH))) * -1" />
    <mutant id="mutant_1287" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="((lengthInBits / (StringKeyAnalyzer.LENGTH)) - 1)" />
    <mutant id="mutant_1288" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + (lengthInBits / (StringKeyAnalyzer.LENGTH))" to="(beginIndex1 + (lengthInBits / (StringKeyAnalyzer.LENGTH))) - 1" />
    <mutant id="mutant_1285" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="((lengthInBits / (StringKeyAnalyzer.LENGTH)) + 1)" />
    <mutant id="mutant_1286" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="((lengthInBits / (StringKeyAnalyzer.LENGTH)) * -1)" />
    <mutant id="mutant_1283" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="otherOffsetInBits / (StringKeyAnalyzer.LENGTH)" to="(otherOffsetInBits / (StringKeyAnalyzer.LENGTH)) - 1" />
    <mutant id="mutant_1284" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="otherOffsetInBits / (StringKeyAnalyzer.LENGTH)" to="(otherOffsetInBits / (StringKeyAnalyzer.LENGTH)) + 1" />
    <mutant id="mutant_110" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) is the size of the list.&quot;)" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) is the size of the list.&quot;) * -1)" />
    <mutant id="mutant_594" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_111" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) is the size of the list.&quot;)" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) is the size of the list.&quot;) - 1)" />
    <mutant id="mutant_595" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_112" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) is the size of the list.&quot;)" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) is the size of the list.&quot;) + 1)" />
    <mutant id="mutant_596" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_113" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) * -1)" />
    <mutant id="mutant_597" viable="true" in="org.apache.commons.collections4.map.Flat3Map.get(java.lang.Object)" from="((hash3) == hashCode) &amp;&amp; (key.equals(key3))" to="!(((hash3) == hashCode) &amp;&amp; (key.equals(key3)))" />
    <mutant id="mutant_590" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) * -1)" />
    <mutant id="mutant_591" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) * -1)" />
    <mutant id="mutant_592" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + 1)" />
    <mutant id="mutant_593" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) - 1)" />
    <mutant id="mutant_129" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) + &quot;).&quot;)" to="(((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) + &quot;).&quot;) * -1)" />
    <mutant id="mutant_125" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size))" to="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) - 1)" />
    <mutant id="mutant_126" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size))" to="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) + 1)" />
    <mutant id="mutant_127" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size))" to="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) * -1)" />
    <mutant id="mutant_128" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) + &quot;).&quot;)" to="(((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) + &quot;).&quot;) + 1)" />
    <mutant id="mutant_121" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;)" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) - 1)" />
    <mutant id="mutant_122" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;)" to="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + 1)" />
    <mutant id="mutant_123" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;)" to="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) - 1)" />
    <mutant id="mutant_124" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;)" to="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) * -1)" />
    <mutant id="mutant_120" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;)" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) * -1)" />
    <mutant id="mutant_136" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(index + (sub.offset))" to="((index + (sub.offset)) + 1)" />
    <mutant id="mutant_137" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(index + (sub.offset))" to="((index + (sub.offset)) * -1)" />
    <mutant id="mutant_138" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(index + (sub.offset))" to="((index + (sub.offset)) - 1)" />
    <mutant id="mutant_139" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="((super.nextIndex()) - (sub.offset)) + 1" />
    <mutant id="mutant_132" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((size) / 2)" to="(((size) / 2) + 1)" />
    <mutant id="mutant_133" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((size) / 2)" to="(((size) / 2) * -1)" />
    <mutant id="mutant_134" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$Cursor.nodeRemoved(org.apache.commons.collections4.list.AbstractLinkedList$Node)" from="(node == (next)) &amp;&amp; (node == (current))" to="!((node == (next)) &amp;&amp; (node == (current)))" />
    <mutant id="mutant_135" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$Cursor.remove()" from="((current) == null) &amp;&amp; (currentRemovedByAnother)" to="!(((current) == null) &amp;&amp; (currentRemovedByAnother))" />
    <mutant id="mutant_130" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) + &quot;).&quot;)" to="(((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) + &quot;).&quot;) - 1)" />
    <mutant id="mutant_131" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((size) / 2)" to="(((size) / 2) - 1)" />
    <mutant id="mutant_147" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="((index - size) + 1)" to="(((index - size) + 1) + 1)" />
    <mutant id="mutant_148" viable="true" in="org.apache.commons.collections4.list.GrowthList.addAll(int,java.util.Collection)" from="(index - size)" to="((index - size) - 1)" />
    <mutant id="mutant_149" viable="true" in="org.apache.commons.collections4.list.GrowthList.addAll(int,java.util.Collection)" from="(index - size)" to="((index - size) * -1)" />
    <mutant id="mutant_143" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="(index - size)" to="((index - size) * -1)" />
    <mutant id="mutant_144" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="(index - size)" to="((index - size) + 1)" />
    <mutant id="mutant_145" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="((index - size) + 1)" to="(((index - size) + 1) * -1)" />
    <mutant id="mutant_146" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="((index - size) + 1)" to="(((index - size) + 1) - 1)" />
    <mutant id="mutant_140" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="((super.nextIndex()) - (sub.offset)) - 1" />
    <mutant id="mutant_141" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="((super.nextIndex()) - (sub.offset)) * -1" />
    <mutant id="mutant_142" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="(index - size)" to="((index - size) - 1)" />
    <mutant id="mutant_158" viable="true" in="org.apache.commons.collections4.list.TransformedList.transformedList(java.util.List,org.apache.commons.collections4.Transformer)" from="((transformer != null) &amp;&amp; (list != null))" to="(!((transformer != null) &amp;&amp; (list != null)))" />
    <mutant id="mutant_159" viable="true" in="org.apache.commons.collections4.list.TransformedList.transformedList(java.util.List,org.apache.commons.collections4.Transformer)" from="((transformer != null) &amp;&amp; (list != null)) &amp;&amp; ((list.size()) &gt; 0)" to="!(((transformer != null) &amp;&amp; (list != null)) &amp;&amp; ((list.size()) &gt; 0))" />
    <mutant id="mutant_154" viable="true" in="org.apache.commons.collections4.list.NodeCachingLinkedList.removeAllNodes()" from="((maximumCacheSize) - (cacheSize))" to="(((maximumCacheSize) - (cacheSize)) + 1)" />
    <mutant id="mutant_155" viable="true" in="org.apache.commons.collections4.list.NodeCachingLinkedList.removeAllNodes()" from="((maximumCacheSize) - (cacheSize))" to="(((maximumCacheSize) - (cacheSize)) - 1)" />
    <mutant id="mutant_156" viable="true" in="org.apache.commons.collections4.list.NodeCachingLinkedList.removeAllNodes()" from="((maximumCacheSize) - (cacheSize))" to="(((maximumCacheSize) - (cacheSize)) * -1)" />
    <mutant id="mutant_157" viable="true" in="org.apache.commons.collections4.list.SetUniqueList.set(int,E)" from="(pos != (-1)) &amp;&amp; (pos != index)" to="!((pos != (-1)) &amp;&amp; (pos != index))" />
    <mutant id="mutant_150" viable="true" in="org.apache.commons.collections4.list.GrowthList.addAll(int,java.util.Collection)" from="(index - size)" to="((index - size) + 1)" />
    <mutant id="mutant_151" viable="true" in="org.apache.commons.collections4.list.GrowthList.add(int,E)" from="(index - size)" to="((index - size) - 1)" />
    <mutant id="mutant_152" viable="true" in="org.apache.commons.collections4.list.GrowthList.add(int,E)" from="(index - size)" to="((index - size) * -1)" />
    <mutant id="mutant_153" viable="true" in="org.apache.commons.collections4.list.GrowthList.add(int,E)" from="(index - size)" to="((index - size) + 1)" />
    <mutant id="mutant_169" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="start + ((end - start) / 2)" to="(start + ((end - start) / 2)) * -1" />
    <mutant id="mutant_160" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Collection)" from="((coll.size()) - 1)" to="(((coll.size()) - 1) + 1)" />
    <mutant id="mutant_165" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(end - start)" to="((end - start) * -1)" />
    <mutant id="mutant_166" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="((end - start) / 2)" to="(((end - start) / 2) + 1)" />
    <mutant id="mutant_167" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="((end - start) / 2)" to="(((end - start) / 2) * -1)" />
    <mutant id="mutant_168" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="((end - start) / 2)" to="(((end - start) / 2) - 1)" />
    <mutant id="mutant_161" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Collection)" from="((coll.size()) - 1)" to="(((coll.size()) - 1) * -1)" />
    <mutant id="mutant_162" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Collection)" from="((coll.size()) - 1)" to="(((coll.size()) - 1) - 1)" />
    <mutant id="mutant_163" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(end - start)" to="((end - start) + 1)" />
    <mutant id="mutant_164" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(end - start)" to="((end - start) - 1)" />
    <mutant id="mutant_170" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="start + ((end - start) / 2)" to="(start + ((end - start) / 2)) - 1" />
    <mutant id="mutant_171" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="start + ((end - start) / 2)" to="(start + ((end - start) / 2)) + 1" />
    <mutant id="mutant_176" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="mid - absolutePositionOfParent" to="(mid - absolutePositionOfParent) - 1" />
    <mutant id="mutant_177" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="mid - absolutePositionOfParent" to="(mid - absolutePositionOfParent) + 1" />
    <mutant id="mutant_178" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid + 1)" to="((mid + 1) * -1)" />
    <mutant id="mutant_179" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid + 1)" to="((mid + 1) + 1)" />
    <mutant id="mutant_172" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid - 1)" to="((mid - 1) - 1)" />
    <mutant id="mutant_173" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid - 1)" to="((mid - 1) * -1)" />
    <mutant id="mutant_174" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid - 1)" to="((mid - 1) + 1)" />
    <mutant id="mutant_175" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="mid - absolutePositionOfParent" to="(mid - absolutePositionOfParent) * -1" />
    <mutant id="mutant_180" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid + 1)" to="((mid + 1) - 1)" />
    <mutant id="mutant_181" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.heightRightMinusLeft()" from="(getHeight(getRightSubTree())) - (getHeight(getLeftSubTree()))" to="((getHeight(getRightSubTree())) - (getHeight(getLeftSubTree()))) + 1" />
    <mutant id="mutant_182" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.heightRightMinusLeft()" from="(getHeight(getRightSubTree())) - (getHeight(getLeftSubTree()))" to="((getHeight(getRightSubTree())) - (getHeight(getLeftSubTree()))) - 1" />
    <mutant id="mutant_187" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (right.relativePosition))" to="((index + (right.relativePosition)) - 1)" />
    <mutant id="mutant_188" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (right.relativePosition))" to="((index + (right.relativePosition)) * -1)" />
    <mutant id="mutant_189" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (right.relativePosition))" to="((index + (right.relativePosition)) + 1)" />
    <mutant id="mutant_183" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.heightRightMinusLeft()" from="(getHeight(getRightSubTree())) - (getHeight(getLeftSubTree()))" to="((getHeight(getRightSubTree())) - (getHeight(getLeftSubTree()))) * -1" />
    <mutant id="mutant_184" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (left.relativePosition))" to="((index + (left.relativePosition)) - 1)" />
    <mutant id="mutant_185" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (left.relativePosition))" to="((index + (left.relativePosition)) * -1)" />
    <mutant id="mutant_186" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (left.relativePosition))" to="((index + (left.relativePosition)) + 1)" />
    <mutant id="mutant_190" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(s.relativePosition) + currentSize" to="((s.relativePosition) + currentSize) - 1" />
    <mutant id="mutant_191" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(s.relativePosition) + currentSize" to="((s.relativePosition) + currentSize) * -1" />
    <mutant id="mutant_192" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(s.relativePosition) + currentSize" to="((s.relativePosition) + currentSize) + 1" />
    <mutant id="mutant_193" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(s != null) &amp;&amp; ((s.height) &gt; (getHeight(leftSubTree)))" to="!((s != null) &amp;&amp; ((s.height) &gt; (getHeight(leftSubTree))))" />
    <mutant id="mutant_198" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize)" to="((sAbsolutePosition - currentSize) + 1)" />
    <mutant id="mutant_199" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize)" to="((sAbsolutePosition - currentSize) * -1)" />
    <mutant id="mutant_194" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - 1" to="(currentSize - 1) + 1" />
    <mutant id="mutant_195" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - 1" to="(currentSize - 1) - 1" />
    <mutant id="mutant_196" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - 1" to="(currentSize - 1) * -1" />
    <mutant id="mutant_197" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize)" to="((sAbsolutePosition - currentSize) - 1)" />
    <mutant id="mutant_1719" viable="true" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="((&quot;Entry does not exist: &quot; + i) + 1)" />
    <mutant id="mutant_1717" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="((&quot;Entry does not exist: &quot; + i) * -1)" />
    <mutant id="mutant_1718" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="((&quot;Entry does not exist: &quot; + i) - 1)" />
    <mutant id="mutant_1715" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Index cannot be negative: &quot; + i)" to="((&quot;Index cannot be negative: &quot; + i) - 1)" />
    <mutant id="mutant_1716" viable="true" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Index cannot be negative: &quot; + i)" to="((&quot;Index cannot be negative: &quot; + i) + 1)" />
    <mutant id="mutant_1713" viable="true" in="org.apache.commons.collections4.CollectionUtils.size(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="((&quot;Unsupported object type: &quot; + (object.getClass().getName())) + 1)" />
    <mutant id="mutant_1714" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Index cannot be negative: &quot; + i)" to="((&quot;Index cannot be negative: &quot; + i) * -1)" />
    <mutant id="mutant_1711" viable="false" in="org.apache.commons.collections4.CollectionUtils.size(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="((&quot;Unsupported object type: &quot; + (object.getClass().getName())) * -1)" />
    <mutant id="mutant_1712" viable="false" in="org.apache.commons.collections4.CollectionUtils.size(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="((&quot;Unsupported object type: &quot; + (object.getClass().getName())) - 1)" />
    <mutant id="mutant_1710" viable="true" in="org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="((&quot;Unsupported object type: &quot; + (object.getClass().getName())) + 1)" />
    <mutant id="mutant_1708" viable="false" in="org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="((&quot;Unsupported object type: &quot; + (object.getClass().getName())) * -1)" />
    <mutant id="mutant_1709" viable="false" in="org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="((&quot;Unsupported object type: &quot; + (object.getClass().getName())) - 1)" />
    <mutant id="mutant_1706" viable="true" in="org.apache.commons.collections4.CollectionUtils.isEmpty(java.util.Collection)" from="(coll == null) || (coll.isEmpty())" to="!((coll == null) || (coll.isEmpty()))" />
    <mutant id="mutant_1707" viable="true" in="org.apache.commons.collections4.CollectionUtils.isProperSubCollection(java.util.Collection,java.util.Collection)" from="((a.size()) &lt; (b.size())) &amp;&amp; (CollectionUtils.isSubCollection(a, b))" to="!(((a.size()) &lt; (b.size())) &amp;&amp; (CollectionUtils.isSubCollection(a, b)))" />
    <mutant id="mutant_1704" viable="true" in="org.apache.commons.collections4.CollectionUtils.addIgnoreNull(java.util.Collection,T)" from="(object != null) &amp;&amp; (collection.add(object))" to="!((object != null) &amp;&amp; (collection.add(object)))" />
    <mutant id="mutant_1705" viable="true" in="org.apache.commons.collections4.CollectionUtils.filter(java.lang.Iterable,org.apache.commons.collections4.Predicate)" from="(collection != null) &amp;&amp; (predicate != null)" to="!((collection != null) &amp;&amp; (predicate != null))" />
    <mutant id="mutant_1702" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.util.Iterator,int)" from="(&quot;Entry does not exist: &quot; + i)" to="((&quot;Entry does not exist: &quot; + i) - 1)" />
    <mutant id="mutant_1703" viable="true" in="org.apache.commons.collections4.CollectionUtils.get(java.util.Iterator,int)" from="(&quot;Entry does not exist: &quot; + i)" to="((&quot;Entry does not exist: &quot; + i) + 1)" />
    <mutant id="mutant_1700" viable="true" in="org.apache.commons.collections4.CollectionUtils.find(java.lang.Iterable,org.apache.commons.collections4.Predicate)" from="(collection != null) &amp;&amp; (predicate != null)" to="!((collection != null) &amp;&amp; (predicate != null))" />
    <mutant id="mutant_1701" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.util.Iterator,int)" from="(&quot;Entry does not exist: &quot; + i)" to="((&quot;Entry does not exist: &quot; + i) * -1)" />
    <mutant id="mutant_1751" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="((&quot;Index &quot; + index) - 1)" />
    <mutant id="mutant_1752" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="((&quot;Index &quot; + index) * -1)" />
    <mutant id="mutant_1750" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="((&quot;Index &quot; + index) + 1)" />
    <mutant id="mutant_1759" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="index * (size)" to="(index * (size)) + 1" />
    <mutant id="mutant_1757" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) + listSize)" to="((((&quot;Index &quot; + index) + &quot; must be less than size &quot;) + listSize) - 1)" />
    <mutant id="mutant_1758" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) + listSize)" to="((((&quot;Index &quot; + index) + &quot; must be less than size &quot;) + listSize) * -1)" />
    <mutant id="mutant_1755" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must be less than size &quot;)" to="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) * -1)" />
    <mutant id="mutant_1756" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) + listSize)" to="((((&quot;Index &quot; + index) + &quot; must be less than size &quot;) + listSize) + 1)" />
    <mutant id="mutant_1753" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must be less than size &quot;)" to="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) + 1)" />
    <mutant id="mutant_1754" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must be less than size &quot;)" to="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) - 1)" />
    <mutant id="mutant_1740" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1) / (size)" to="((((list.size()) + (size)) - 1) / (size)) - 1" />
    <mutant id="mutant_1741" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;negative size: &quot; + listSize)" to="((&quot;negative size: &quot; + listSize) * -1)" />
    <mutant id="mutant_1748" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must not be negative&quot;)" to="(((&quot;Index &quot; + index) + &quot; must not be negative&quot;) - 1)" />
    <mutant id="mutant_1749" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must not be negative&quot;)" to="(((&quot;Index &quot; + index) + &quot; must not be negative&quot;) * -1)" />
    <mutant id="mutant_1746" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="((&quot;Index &quot; + index) * -1)" />
    <mutant id="mutant_1747" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must not be negative&quot;)" to="(((&quot;Index &quot; + index) + &quot; must not be negative&quot;) + 1)" />
    <mutant id="mutant_1744" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="((&quot;Index &quot; + index) + 1)" />
    <mutant id="mutant_1745" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="((&quot;Index &quot; + index) - 1)" />
    <mutant id="mutant_1742" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;negative size: &quot; + listSize)" to="((&quot;negative size: &quot; + listSize) + 1)" />
    <mutant id="mutant_1743" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;negative size: &quot; + listSize)" to="((&quot;negative size: &quot; + listSize) - 1)" />
    <mutant id="mutant_900" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeAll(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="(((multi.size()) &gt;= 4) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0))))" to="(!(((multi.size()) &gt;= 4) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))))" />
    <mutant id="mutant_901" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeAll(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((((multi.size()) &gt;= 4) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) &amp;&amp; (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1))))" to="(!((((multi.size()) &gt;= 4) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) &amp;&amp; (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1)))))" />
    <mutant id="mutant_902" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeAll(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="(((((multi.size()) &gt;= 4) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) &amp;&amp; (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1)))) &amp;&amp; (key3 == null ? (multi.getKey(2)) == null : key3.equals(multi.getKey(2))))" to="(!(((((multi.size()) &gt;= 4) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) &amp;&amp; (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1)))) &amp;&amp; (key3 == null ? (multi.getKey(2)) == null : key3.equals(multi.getKey(2)))))" />
    <mutant id="mutant_1739" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1) / (size)" to="((((list.size()) + (size)) - 1) / (size)) * -1" />
    <mutant id="mutant_907" viable="true" in="org.apache.commons.collections4.map.MultiValueMap.putAll(K,java.util.Collection)" from="(values == null) || ((values.size()) == 0)" to="!((values == null) || ((values.size()) == 0))" />
    <mutant id="mutant_908" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="((Long.MAX_VALUE) - (timeToLiveMillis))" to="(((Long.MAX_VALUE) - (timeToLiveMillis)) * -1)" />
    <mutant id="mutant_909" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="((Long.MAX_VALUE) - (timeToLiveMillis))" to="(((Long.MAX_VALUE) - (timeToLiveMillis)) - 1)" />
    <mutant id="mutant_903" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeAll(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="(((((multi.size()) &gt;= 4) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) &amp;&amp; (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1)))) &amp;&amp; (key3 == null ? (multi.getKey(2)) == null : key3.equals(multi.getKey(2)))) &amp;&amp; (key4 == null ? (multi.getKey(3)) == null : key4.equals(multi.getKey(3)))" to="!((((((multi.size()) &gt;= 4) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) &amp;&amp; (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1)))) &amp;&amp; (key3 == null ? (multi.getKey(2)) == null : key3.equals(multi.getKey(2)))) &amp;&amp; (key4 == null ? (multi.getKey(3)) == null : key4.equals(multi.getKey(3))))" />
    <mutant id="mutant_904" viable="false" in="org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory.create()" from="(&quot;Cannot instantiate class: &quot; + (clazz))" to="((&quot;Cannot instantiate class: &quot; + (clazz)) - 1)" />
    <mutant id="mutant_905" viable="false" in="org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory.create()" from="(&quot;Cannot instantiate class: &quot; + (clazz))" to="((&quot;Cannot instantiate class: &quot; + (clazz)) * -1)" />
    <mutant id="mutant_906" viable="true" in="org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory.create()" from="(&quot;Cannot instantiate class: &quot; + (clazz))" to="((&quot;Cannot instantiate class: &quot; + (clazz)) + 1)" />
    <mutant id="mutant_1730" viable="true" in="org.apache.commons.collections4.CollectionUtils.reverseArray(java.lang.Object[])" from="(array.length) - 1" to="((array.length) - 1) - 1" />
    <mutant id="mutant_1737" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1)" to="((((list.size()) + (size)) - 1) * -1)" />
    <mutant id="mutant_1738" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1) / (size)" to="((((list.size()) + (size)) - 1) / (size)) + 1" />
    <mutant id="mutant_1735" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1)" to="((((list.size()) + (size)) - 1) + 1)" />
    <mutant id="mutant_1736" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1)" to="((((list.size()) + (size)) - 1) - 1)" />
    <mutant id="mutant_1733" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="((list.size()) + (size))" to="(((list.size()) + (size)) - 1)" />
    <mutant id="mutant_1734" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="((list.size()) + (size))" to="(((list.size()) + (size)) + 1)" />
    <mutant id="mutant_1731" viable="true" in="org.apache.commons.collections4.CollectionUtils.reverseArray(java.lang.Object[])" from="(array.length) - 1" to="((array.length) - 1) + 1" />
    <mutant id="mutant_1732" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="((list.size()) + (size))" to="(((list.size()) + (size)) * -1)" />
    <mutant id="mutant_910" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="((Long.MAX_VALUE) - (timeToLiveMillis))" to="(((Long.MAX_VALUE) - (timeToLiveMillis)) + 1)" />
    <mutant id="mutant_911" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="now + (timeToLiveMillis)" to="(now + (timeToLiveMillis)) + 1" />
    <mutant id="mutant_912" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="now + (timeToLiveMillis)" to="(now + (timeToLiveMillis)) - 1" />
    <mutant id="mutant_913" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="now + (timeToLiveMillis)" to="(now + (timeToLiveMillis)) * -1" />
    <mutant id="mutant_1728" viable="false" in="org.apache.commons.collections4.CollectionUtils.checkIndexBounds(int)" from="(&quot;Index cannot be negative: &quot; + index)" to="((&quot;Index cannot be negative: &quot; + index) * -1)" />
    <mutant id="mutant_1729" viable="true" in="org.apache.commons.collections4.CollectionUtils.reverseArray(java.lang.Object[])" from="(array.length) - 1" to="((array.length) - 1) * -1" />
    <mutant id="mutant_918" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="((&quot;Iterator[&quot; + (getKey())) * -1)" />
    <mutant id="mutant_919" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="((&quot;Iterator[&quot; + (getKey())) - 1)" />
    <mutant id="mutant_914" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap.isExpired(long,java.lang.Long)" from="(expirationTime &gt;= 0) &amp;&amp; (now &gt;= expirationTime)" to="!((expirationTime &gt;= 0) &amp;&amp; (now &gt;= expirationTime))" />
    <mutant id="mutant_915" viable="true" in="org.apache.commons.collections4.map.PredicatedMap.validate(K,V)" from="((keyPredicate) != null) &amp;&amp; ((keyPredicate.evaluate(key)) == false)" to="!(((keyPredicate) != null) &amp;&amp; ((keyPredicate.evaluate(key)) == false))" />
    <mutant id="mutant_916" viable="true" in="org.apache.commons.collections4.map.PredicatedMap.validate(K,V)" from="((valuePredicate) != null) &amp;&amp; ((valuePredicate.evaluate(value)) == false)" to="!(((valuePredicate) != null) &amp;&amp; ((valuePredicate.evaluate(value)) == false))" />
    <mutant id="mutant_917" viable="true" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="((&quot;Iterator[&quot; + (getKey())) + 1)" />
    <mutant id="mutant_1726" viable="true" in="org.apache.commons.collections4.CollectionUtils.checkIndexBounds(int)" from="(&quot;Index cannot be negative: &quot; + index)" to="((&quot;Index cannot be negative: &quot; + index) + 1)" />
    <mutant id="mutant_1727" viable="false" in="org.apache.commons.collections4.CollectionUtils.checkIndexBounds(int)" from="(&quot;Index cannot be negative: &quot; + index)" to="((&quot;Index cannot be negative: &quot; + index) - 1)" />
    <mutant id="mutant_1724" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="((&quot;Unsupported object type: &quot; + (object.getClass().getName())) - 1)" />
    <mutant id="mutant_1725" viable="true" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="((&quot;Unsupported object type: &quot; + (object.getClass().getName())) + 1)" />
    <mutant id="mutant_1722" viable="true" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="((&quot;Entry does not exist: &quot; + i) + 1)" />
    <mutant id="mutant_1723" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="((&quot;Unsupported object type: &quot; + (object.getClass().getName())) * -1)" />
    <mutant id="mutant_1720" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="((&quot;Entry does not exist: &quot; + i) * -1)" />
    <mutant id="mutant_1721" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="((&quot;Entry does not exist: &quot; + i) - 1)" />
    <mutant id="mutant_921" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) * -1)" />
    <mutant id="mutant_922" viable="true" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + 1)" />
    <mutant id="mutant_923" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) * -1)" />
    <mutant id="mutant_924" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) - 1)" />
    <mutant id="mutant_920" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) - 1)" />
    <mutant id="mutant_929" viable="true" in="org.apache.commons.collections4.map.SingletonMap.equals(java.lang.Object)" from="(isEqualKey(entry.getKey())) &amp;&amp; (isEqualValue(entry.getValue()))" to="!((isEqualKey(entry.getKey())) &amp;&amp; (isEqualValue(entry.getValue())))" />
    <mutant id="mutant_925" viable="true" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + 1)" />
    <mutant id="mutant_926" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_927" viable="true" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_928" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_1311" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) - (StringKeyAnalyzer.LENGTH)" to="(((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) - (StringKeyAnalyzer.LENGTH)) + 1" />
    <mutant id="mutant_1795" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(((lineage.size()) - 1) - lineageIndex)" to="((((lineage.size()) - 1) - lineageIndex) * -1)" />
    <mutant id="mutant_1312" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) - (StringKeyAnalyzer.LENGTH)" to="(((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) - (StringKeyAnalyzer.LENGTH)) * -1" />
    <mutant id="mutant_1796" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(((lineage.size()) - 1) - lineageIndex)" to="((((lineage.size()) - 1) - lineageIndex) + 1)" />
    <mutant id="mutant_1793" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="(((lineage.size()) - 1) - 1)" />
    <mutant id="mutant_1310" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) - (StringKeyAnalyzer.LENGTH)" to="(((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) - (StringKeyAnalyzer.LENGTH)) - 1" />
    <mutant id="mutant_1794" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="(((lineage.size()) - 1) * -1)" />
    <mutant id="mutant_1791" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="(((lineage.size()) - 1) * -1)" />
    <mutant id="mutant_1792" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="(((lineage.size()) - 1) + 1)" />
    <mutant id="mutant_1790" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="(((lineage.size()) - 1) - 1)" />
    <mutant id="mutant_1319" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;)" to="(((key) + &quot;=&quot;) * -1)" />
    <mutant id="mutant_1317" viable="true" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;)" to="(((key) + &quot;=&quot;) + 1)" />
    <mutant id="mutant_1318" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;)" to="(((key) + &quot;=&quot;) - 1)" />
    <mutant id="mutant_1315" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)" from="(key.length()) * (StringKeyAnalyzer.LENGTH)" to="((key.length()) * (StringKeyAnalyzer.LENGTH)) - 1" />
    <mutant id="mutant_1799" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((((lineage.size()) - 1) - lineageIndex) - 1)" to="(((((lineage.size()) - 1) - lineageIndex) - 1) + 1)" />
    <mutant id="mutant_1316" viable="true" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.equals(java.lang.Object)" from="(org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(key, other.getKey())) &amp;&amp; (org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(value, other.getValue()))" to="!((org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(key, other.getKey())) &amp;&amp; (org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(value, other.getValue())))" />
    <mutant id="mutant_1313" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)" from="(key.length()) * (StringKeyAnalyzer.LENGTH)" to="((key.length()) * (StringKeyAnalyzer.LENGTH)) * -1" />
    <mutant id="mutant_1797" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(((lineage.size()) - 1) - lineageIndex)" to="((((lineage.size()) - 1) - lineageIndex) - 1)" />
    <mutant id="mutant_1314" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)" from="(key.length()) * (StringKeyAnalyzer.LENGTH)" to="((key.length()) * (StringKeyAnalyzer.LENGTH)) + 1" />
    <mutant id="mutant_1798" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((((lineage.size()) - 1) - lineageIndex) - 1)" to="(((((lineage.size()) - 1) - lineageIndex) - 1) * -1)" />
    <mutant id="mutant_932" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap$BaseIterator.nextEntry()" from="((current.size()) - 1)" to="(((current.size()) - 1) * -1)" />
    <mutant id="mutant_933" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap$KeySet.remove(java.lang.Object)" from="((k != null) &amp;&amp; (k.equals(obj)))" to="(!((k != null) &amp;&amp; (k.equals(obj))))" />
    <mutant id="mutant_934" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap$KeySet.remove(java.lang.Object)" from="(k == obj) || ((k != null) &amp;&amp; (k.equals(obj)))" to="!((k == obj) || ((k != null) &amp;&amp; (k.equals(obj))))" />
    <mutant id="mutant_935" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap$Node.equals(java.lang.Object)" from="((key) == null ? (e2.getKey()) == null : key.equals(e2.getKey())) &amp;&amp; ((value) == null ? (e2.getValue()) == null : value.equals(e2.getValue()))" to="!(((key) == null ? (e2.getKey()) == null : key.equals(e2.getKey())) &amp;&amp; ((value) == null ? (e2.getValue()) == null : value.equals(e2.getValue())))" />
    <mutant id="mutant_930" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap$BaseIterator.nextEntry()" from="((current.size()) - 1)" to="(((current.size()) - 1) + 1)" />
    <mutant id="mutant_931" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap$BaseIterator.nextEntry()" from="((current.size()) - 1)" to="(((current.size()) - 1) - 1)" />
    <mutant id="mutant_936" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap(int)" from="(size % 2)" to="((size % 2) + 1)" />
    <mutant id="mutant_937" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap(int)" from="(size % 2)" to="((size % 2) - 1)" />
    <mutant id="mutant_938" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap(int)" from="(size % 2)" to="((size % 2) * -1)" />
    <mutant id="mutant_939" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.get(java.lang.Object)" from="(((n.key) != null) &amp;&amp; (n.key.equals(key)))" to="(!(((n.key) != null) &amp;&amp; (n.key.equals(key))))" />
    <mutant id="mutant_1300" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + i" to="(beginIndex2 + i) - 1" />
    <mutant id="mutant_1784" viable="true" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="((array.length) - 1)" to="(((array.length) - 1) - 1)" />
    <mutant id="mutant_1301" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + i" to="(beginIndex2 + i) * -1" />
    <mutant id="mutant_1785" viable="true" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="((array.length) - 1)" to="(((array.length) - 1) + 1)" />
    <mutant id="mutant_1782" viable="false" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="(&quot;Invalid array element: &quot; + i)" to="((&quot;Invalid array element: &quot; + i) * -1)" />
    <mutant id="mutant_1783" viable="true" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="((array.length) - 1)" to="(((array.length) - 1) * -1)" />
    <mutant id="mutant_1780" viable="false" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="(&quot;Invalid array element: &quot; + i)" to="((&quot;Invalid array element: &quot; + i) - 1)" />
    <mutant id="mutant_1781" viable="true" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="(&quot;Invalid array element: &quot; + i)" to="((&quot;Invalid array element: &quot; + i) + 1)" />
    <mutant id="mutant_1308" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x)))" to="(((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) + 1)" />
    <mutant id="mutant_1309" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x)))" to="(((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) * -1)" />
    <mutant id="mutant_1306" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(i * (StringKeyAnalyzer.LENGTH))" to="((i * (StringKeyAnalyzer.LENGTH)) * -1)" />
    <mutant id="mutant_1307" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x)))" to="(((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) - 1)" />
    <mutant id="mutant_1304" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(i * (StringKeyAnalyzer.LENGTH))" to="((i * (StringKeyAnalyzer.LENGTH)) + 1)" />
    <mutant id="mutant_1788" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(childValue instanceof Map) &amp;&amp; (!(lineage.contains(childValue)))" to="!((childValue instanceof Map) &amp;&amp; (!(lineage.contains(childValue))))" />
    <mutant id="mutant_1305" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(i * (StringKeyAnalyzer.LENGTH))" to="((i * (StringKeyAnalyzer.LENGTH)) - 1)" />
    <mutant id="mutant_1789" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="(((lineage.size()) - 1) + 1)" />
    <mutant id="mutant_1302" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + i" to="(beginIndex2 + i) + 1" />
    <mutant id="mutant_1786" viable="true" in="org.apache.commons.collections4.MapUtils.getMap(java.util.Map,K)" from="(answer != null) &amp;&amp; (answer instanceof java.util.Map)" to="!((answer != null) &amp;&amp; (answer instanceof java.util.Map))" />
    <mutant id="mutant_1303" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(other == null) || (index2 &gt;= endIndex2)" to="!((other == null) || (index2 &gt;= endIndex2))" />
    <mutant id="mutant_1787" viable="true" in="org.apache.commons.collections4.MapUtils.isEmpty(java.util.Map)" from="(map == null) || (map.isEmpty())" to="!((map == null) || (map.isEmpty()))" />
    <mutant id="mutant_943" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.remove(java.lang.Object)" from="(((n.key) != null) &amp;&amp; (n.key.equals(key)))" to="(!(((n.key) != null) &amp;&amp; (n.key.equals(key))))" />
    <mutant id="mutant_944" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.remove(java.lang.Object)" from="((n.key) == key) || (((n.key) != null) &amp;&amp; (n.key.equals(key)))" to="!(((n.key) == key) || (((n.key) != null) &amp;&amp; (n.key.equals(key))))" />
    <mutant id="mutant_945" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.containsKey(java.lang.Object)" from="(((n.key) != null) &amp;&amp; (n.key.equals(key)))" to="(!(((n.key) != null) &amp;&amp; (n.key.equals(key))))" />
    <mutant id="mutant_946" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.containsKey(java.lang.Object)" from="((n.key) == key) || (((n.key) != null) &amp;&amp; (n.key.equals(key)))" to="!(((n.key) == key) || (((n.key) != null) &amp;&amp; (n.key.equals(key))))" />
    <mutant id="mutant_940" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.get(java.lang.Object)" from="((n.key) == key) || (((n.key) != null) &amp;&amp; (n.key.equals(key)))" to="!(((n.key) == key) || (((n.key) != null) &amp;&amp; (n.key.equals(key))))" />
    <mutant id="mutant_941" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.put(K,V)" from="(((n.key) != null) &amp;&amp; (n.key.equals(key)))" to="(!(((n.key) != null) &amp;&amp; (n.key.equals(key))))" />
    <mutant id="mutant_942" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.put(K,V)" from="((n.key) == key) || (((n.key) != null) &amp;&amp; (n.key.equals(key)))" to="!(((n.key) == key) || (((n.key) != null) &amp;&amp; (n.key.equals(key))))" />
    <mutant id="mutant_947" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.containsValue(java.lang.Object)" from="(((n.value) != null) &amp;&amp; (n.value.equals(value)))" to="(!(((n.value) != null) &amp;&amp; (n.value.equals(value))))" />
    <mutant id="mutant_948" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.containsValue(java.lang.Object)" from="((n.value) == value) || (((n.value) != null) &amp;&amp; (n.value.equals(value)))" to="!(((n.value) == value) || (((n.value) != null) &amp;&amp; (n.value.equals(value))))" />
    <mutant id="mutant_949" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.getHash(java.lang.Object)" from="hash * (-1)" to="(hash * (-1)) - 1" />
    <mutant id="mutant_1773" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode)" to="((31 * hashCode) - 1)" />
    <mutant id="mutant_1774" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode) + (obj == null ? 0 : obj.hashCode())" to="((31 * hashCode) + (obj == null ? 0 : obj.hashCode())) - 1" />
    <mutant id="mutant_1771" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode)" to="((31 * hashCode) + 1)" />
    <mutant id="mutant_1772" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode)" to="((31 * hashCode) * -1)" />
    <mutant id="mutant_1770" viable="true" in="org.apache.commons.collections4.ListUtils.isEqualList(java.util.Collection,java.util.Collection)" from="((it1.hasNext()) || (it2.hasNext()))" to="(!((it1.hasNext()) || (it2.hasNext())))" />
    <mutant id="mutant_1779" viable="true" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="(sub == null) || ((sub.length) &lt; 2)" to="!((sub == null) || ((sub.length) &lt; 2))" />
    <mutant id="mutant_1777" viable="true" in="org.apache.commons.collections4.ListUtils.longestCommonSubsequence(java.lang.CharSequence,java.lang.CharSequence)" from="(a == null) || (b == null)" to="!((a == null) || (b == null))" />
    <mutant id="mutant_1778" viable="true" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="(array == null) || ((array.length) == 0)" to="!((array == null) || ((array.length) == 0))" />
    <mutant id="mutant_1775" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode) + (obj == null ? 0 : obj.hashCode())" to="((31 * hashCode) + (obj == null ? 0 : obj.hashCode())) + 1" />
    <mutant id="mutant_1776" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode) + (obj == null ? 0 : obj.hashCode())" to="((31 * hashCode) + (obj == null ? 0 : obj.hashCode())) * -1" />
    <mutant id="mutant_954" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.atomic(java.lang.Runnable,int)" from="(bucket + 1)" to="((bucket + 1) - 1)" />
    <mutant id="mutant_955" viable="true" in="org.apache.commons.collections4.bag.AbstractMapBag$BagIterator.hasNext()" from="((itemCount) &gt; 0) || (entryIterator.hasNext())" to="!(((itemCount) &gt; 0) || (entryIterator.hasNext()))" />
    <mutant id="mutant_956" viable="true" in="org.apache.commons.collections4.bag.AbstractMapBag.addAll(java.util.Collection)" from="changed || added" to="!(changed || added)" />
    <mutant id="mutant_957" viable="true" in="org.apache.commons.collections4.bag.AbstractMapBag.removeAll(java.util.Collection)" from="result || changed" to="!(result || changed)" />
    <mutant id="mutant_950" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.getHash(java.lang.Object)" from="hash * (-1)" to="(hash * (-1)) + 1" />
    <mutant id="mutant_951" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.getHash(java.lang.Object)" from="hash * (-1)" to="(hash * (-1)) * -1" />
    <mutant id="mutant_952" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.atomic(java.lang.Runnable,int)" from="(bucket + 1)" to="((bucket + 1) * -1)" />
    <mutant id="mutant_953" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.atomic(java.lang.Runnable,int)" from="(bucket + 1)" to="((bucket + 1) + 1)" />
    <mutant id="mutant_958" viable="true" in="org.apache.commons.collections4.bag.AbstractMapBag.retainAll(org.apache.commons.collections4.Bag)" from="(1 &lt;= otherCount) &amp;&amp; (otherCount &lt;= myCount)" to="!((1 &lt;= otherCount) &amp;&amp; (otherCount &lt;= myCount))" />
    <mutant id="mutant_959" viable="true" in="org.apache.commons.collections4.bag.AbstractMapBag.retainAll(org.apache.commons.collections4.Bag)" from="(myCount - otherCount)" to="((myCount - otherCount) - 1)" />
    <mutant id="mutant_1762" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(start + (size))" to="((start + (size)) - 1)" />
    <mutant id="mutant_1763" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(start + (size))" to="((start + (size)) * -1)" />
    <mutant id="mutant_1760" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="index * (size)" to="(index * (size)) * -1" />
    <mutant id="mutant_1761" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="index * (size)" to="(index * (size)) - 1" />
    <mutant id="mutant_1768" viable="true" in="org.apache.commons.collections4.ListUtils.isEqualList(java.util.Collection,java.util.Collection)" from="((list1 == null) || (list2 == null)) || ((list1.size()) != (list2.size()))" to="!(((list1 == null) || (list2 == null)) || ((list1.size()) != (list2.size())))" />
    <mutant id="mutant_1769" viable="true" in="org.apache.commons.collections4.ListUtils.isEqualList(java.util.Collection,java.util.Collection)" from="(it1.hasNext()) &amp;&amp; (it2.hasNext())" to="!((it1.hasNext()) &amp;&amp; (it2.hasNext()))" />
    <mutant id="mutant_1766" viable="true" in="org.apache.commons.collections4.ListUtils.longestCommonSubsequence(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="(a == null) || (b == null)" to="!((a == null) || (b == null))" />
    <mutant id="mutant_1767" viable="true" in="org.apache.commons.collections4.ListUtils.isEqualList(java.util.Collection,java.util.Collection)" from="((list1 == null) || (list2 == null))" to="(!((list1 == null) || (list2 == null)))" />
    <mutant id="mutant_1764" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(start + (size))" to="((start + (size)) + 1)" />
    <mutant id="mutant_1765" viable="true" in="org.apache.commons.collections4.ListUtils.indexOf(java.util.List,org.apache.commons.collections4.Predicate)" from="(list != null) &amp;&amp; (predicate != null)" to="!((list != null) &amp;&amp; (predicate != null))" />
    <mutant id="mutant_965" viable="true" in="org.apache.commons.collections4.bag.CollectionSortedBag.removeAll(java.util.Collection)" from="result || changed" to="!(result || changed)" />
    <mutant id="mutant_966" viable="true" in="org.apache.commons.collections4.bag.TransformedBag.transformedBag(org.apache.commons.collections4.Bag,org.apache.commons.collections4.Transformer)" from="((transformer != null) &amp;&amp; (bag != null))" to="(!((transformer != null) &amp;&amp; (bag != null)))" />
    <mutant id="mutant_967" viable="true" in="org.apache.commons.collections4.bag.TransformedBag.transformedBag(org.apache.commons.collections4.Bag,org.apache.commons.collections4.Transformer)" from="((transformer != null) &amp;&amp; (bag != null)) &amp;&amp; ((bag.size()) &gt; 0)" to="!(((transformer != null) &amp;&amp; (bag != null)) &amp;&amp; ((bag.size()) &gt; 0))" />
    <mutant id="mutant_968" viable="true" in="org.apache.commons.collections4.bag.TransformedSortedBag.transformedSortedBag(org.apache.commons.collections4.SortedBag,org.apache.commons.collections4.Transformer)" from="((transformer != null) &amp;&amp; (bag != null))" to="(!((transformer != null) &amp;&amp; (bag != null)))" />
    <mutant id="mutant_961" viable="true" in="org.apache.commons.collections4.bag.AbstractMapBag.retainAll(org.apache.commons.collections4.Bag)" from="(myCount - otherCount)" to="((myCount - otherCount) + 1)" />
    <mutant id="mutant_962" viable="true" in="org.apache.commons.collections4.bag.CollectionBag.addAll(java.util.Collection)" from="changed || added" to="!(changed || added)" />
    <mutant id="mutant_963" viable="true" in="org.apache.commons.collections4.bag.CollectionBag.removeAll(java.util.Collection)" from="result || changed" to="!(result || changed)" />
    <mutant id="mutant_964" viable="true" in="org.apache.commons.collections4.bag.CollectionSortedBag.addAll(java.util.Collection)" from="changed || added" to="!(changed || added)" />
    <mutant id="mutant_969" viable="true" in="org.apache.commons.collections4.bag.TransformedSortedBag.transformedSortedBag(org.apache.commons.collections4.SortedBag,org.apache.commons.collections4.Transformer)" from="((transformer != null) &amp;&amp; (bag != null)) &amp;&amp; ((bag.size()) &gt; 0)" to="!(((transformer != null) &amp;&amp; (bag != null)) &amp;&amp; ((bag.size()) &gt; 0))" />
    <mutant id="mutant_1355" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="((&quot;FromKey is out of range: &quot; + fromKey) * -1)" />
    <mutant id="mutant_1356" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="((&quot;FromKey is out of range: &quot; + fromKey) - 1)" />
    <mutant id="mutant_1353" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="((&quot;ToKey is out of range: &quot; + toKey) * -1)" />
    <mutant id="mutant_1354" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="((&quot;FromKey is out of range: &quot; + fromKey) + 1)" />
    <mutant id="mutant_1351" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="((&quot;ToKey is out of range: &quot; + toKey) + 1)" />
    <mutant id="mutant_1352" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="((&quot;ToKey is out of range: &quot; + toKey) - 1)" />
    <mutant id="mutant_1350" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inToRange(K,boolean)" from="toInclusive || forceInclusive" to="!(toInclusive || forceInclusive)" />
    <mutant id="mutant_960" viable="true" in="org.apache.commons.collections4.bag.AbstractMapBag.retainAll(org.apache.commons.collections4.Bag)" from="(myCount - otherCount)" to="((myCount - otherCount) * -1)" />
    <mutant id="mutant_1359" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="((&quot;ToKey is out of range: &quot; + toKey) * -1)" />
    <mutant id="mutant_1357" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="((&quot;ToKey is out of range: &quot; + toKey) + 1)" />
    <mutant id="mutant_1358" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="((&quot;ToKey is out of range: &quot; + toKey) - 1)" />
    <mutant id="mutant_976" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;)" to="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) * -1)" />
    <mutant id="mutant_977" viable="true" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) + &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;)" to="((((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) + &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;) + 1)" />
    <mutant id="mutant_978" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) + &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;)" to="((((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) + &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;) - 1)" />
    <mutant id="mutant_979" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) + &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;)" to="((((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) + &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;) * -1)" />
    <mutant id="mutant_972" viable="true" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(&quot;Objects of type &quot; + (object.getClass()))" to="((&quot;Objects of type &quot; + (object.getClass())) + 1)" />
    <mutant id="mutant_973" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(&quot;Objects of type &quot; + (object.getClass()))" to="((&quot;Objects of type &quot; + (object.getClass())) - 1)" />
    <mutant id="mutant_974" viable="true" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;)" to="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) + 1)" />
    <mutant id="mutant_975" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;)" to="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) - 1)" />
    <mutant id="mutant_1344" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange(K)" from="((fromKey == null) || (inFromRange(key, false)))" to="(!((fromKey == null) || (inFromRange(key, false))))" />
    <mutant id="mutant_1345" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange(K)" from="((toKey == null) || (inToRange(key, false)))" to="(!((toKey == null) || (inToRange(key, false))))" />
    <mutant id="mutant_1342" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(K,V)" from="(&quot;Key is out of range: &quot; + key)" to="((&quot;Key is out of range: &quot; + key) * -1)" />
    <mutant id="mutant_1343" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inFromRange(K,boolean)" from="fromInclusive || forceInclusive" to="!(fromInclusive || forceInclusive)" />
    <mutant id="mutant_1340" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(K,V)" from="(&quot;Key is out of range: &quot; + key)" to="((&quot;Key is out of range: &quot; + key) + 1)" />
    <mutant id="mutant_1341" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(K,V)" from="(&quot;Key is out of range: &quot; + key)" to="((&quot;Key is out of range: &quot; + key) - 1)" />
    <mutant id="mutant_970" viable="true" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="((comparator()) == null) &amp;&amp; (!(object instanceof java.lang.Comparable))" to="!(((comparator()) == null) &amp;&amp; (!(object instanceof java.lang.Comparable)))" />
    <mutant id="mutant_971" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(&quot;Objects of type &quot; + (object.getClass()))" to="((&quot;Objects of type &quot; + (object.getClass())) * -1)" />
    <mutant id="mutant_1348" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange2(K)" from="((toKey == null) || (inToRange(key, true)))" to="(!((toKey == null) || (inToRange(key, true))))" />
    <mutant id="mutant_1349" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange2(K)" from="((fromKey == null) || (inFromRange(key, false))) &amp;&amp; ((toKey == null) || (inToRange(key, true)))" to="!(((fromKey == null) || (inFromRange(key, false))) &amp;&amp; ((toKey == null) || (inToRange(key, true))))" />
    <mutant id="mutant_1346" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange(K)" from="((fromKey == null) || (inFromRange(key, false))) &amp;&amp; ((toKey == null) || (inToRange(key, false)))" to="!(((fromKey == null) || (inFromRange(key, false))) &amp;&amp; ((toKey == null) || (inToRange(key, false))))" />
    <mutant id="mutant_1347" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange2(K)" from="((fromKey == null) || (inFromRange(key, false)))" to="(!((fromKey == null) || (inFromRange(key, false))))" />
    <mutant id="mutant_503" viable="true" in="org.apache.commons.collections4.map.CaseInsensitiveMap.convertKey(java.lang.Object)" from="(chars.length) - 1" to="((chars.length) - 1) * -1" />
    <mutant id="mutant_987" viable="true" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) + 1)" />
    <mutant id="mutant_504" viable="true" in="org.apache.commons.collections4.map.CaseInsensitiveMap.convertKey(java.lang.Object)" from="(chars.length) - 1" to="((chars.length) - 1) - 1" />
    <mutant id="mutant_988" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) - 1)" />
    <mutant id="mutant_505" viable="true" in="org.apache.commons.collections4.map.CaseInsensitiveMap.convertKey(java.lang.Object)" from="(chars.length) - 1" to="((chars.length) - 1) + 1" />
    <mutant id="mutant_989" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s before the start of the array. &quot;)" to="(((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s before the start of the array. &quot;) * -1)" />
    <mutant id="mutant_506" viable="true" in="org.apache.commons.collections4.map.CompositeMap(java.util.Map[],org.apache.commons.collections4.map.CompositeMap$MapMutator)" from="(composite.length) - 1" to="((composite.length) - 1) * -1" />
    <mutant id="mutant_983" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s beyond the end of the array. &quot;)" to="(((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s beyond the end of the array. &quot;) - 1)" />
    <mutant id="mutant_500" viable="true" in="org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry.purge(java.lang.ref.Reference)" from="(((parent.valueType) != (AbstractReferenceMap.ReferenceStrength.HARD)) &amp;&amp; ((value) == ref))" to="(!(((parent.valueType) != (AbstractReferenceMap.ReferenceStrength.HARD)) &amp;&amp; ((value) == ref)))" />
    <mutant id="mutant_984" viable="true" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s beyond the end of the array. &quot;)" to="(((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s beyond the end of the array. &quot;) + 1)" />
    <mutant id="mutant_501" viable="true" in="org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry.purge(java.lang.ref.Reference)" from="r || (((parent.valueType) != (AbstractReferenceMap.ReferenceStrength.HARD)) &amp;&amp; ((value) == ref))" to="!(r || (((parent.valueType) != (AbstractReferenceMap.ReferenceStrength.HARD)) &amp;&amp; ((value) == ref)))" />
    <mutant id="mutant_985" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s beyond the end of the array. &quot;)" to="(((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s beyond the end of the array. &quot;) * -1)" />
    <mutant id="mutant_502" viable="true" in="org.apache.commons.collections4.map.AbstractReferenceMap.isEqualKey(java.lang.Object,java.lang.Object)" from="(key1 == key2) || (key1.equals(key2))" to="!((key1 == key2) || (key1.equals(key2)))" />
    <mutant id="mutant_986" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) * -1)" />
    <mutant id="mutant_507" viable="true" in="org.apache.commons.collections4.map.CompositeMap(java.util.Map[],org.apache.commons.collections4.map.CompositeMap$MapMutator)" from="(composite.length) - 1" to="((composite.length) - 1) - 1" />
    <mutant id="mutant_508" viable="true" in="org.apache.commons.collections4.map.CompositeMap(java.util.Map[],org.apache.commons.collections4.map.CompositeMap$MapMutator)" from="(composite.length) - 1" to="((composite.length) - 1) + 1" />
    <mutant id="mutant_509" viable="true" in="org.apache.commons.collections4.map.CompositeMap.get(java.lang.Object)" from="(this.composite.length) - 1" to="((this.composite.length) - 1) * -1" />
    <mutant id="mutant_1333" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()" from="(((fromKey) != null) &amp;&amp; (!(inFromRange(last, false))))" to="(!(((fromKey) != null) &amp;&amp; (!(inFromRange(last, false)))))" />
    <mutant id="mutant_1334" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()" from="(e == null) || (((fromKey) != null) &amp;&amp; (!(inFromRange(last, false))))" to="!((e == null) || (((fromKey) != null) &amp;&amp; (!(inFromRange(last, false)))))" />
    <mutant id="mutant_1331" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()" from="(((toKey) != null) &amp;&amp; (!(inToRange(first, false))))" to="(!(((toKey) != null) &amp;&amp; (!(inToRange(first, false)))))" />
    <mutant id="mutant_1332" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()" from="(e == null) || (((toKey) != null) &amp;&amp; (!(inToRange(first, false))))" to="!((e == null) || (((toKey) != null) &amp;&amp; (!(inToRange(first, false)))))" />
    <mutant id="mutant_1330" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap(K,boolean,K,boolean)" from="((fromKey != null) &amp;&amp; (toKey != null)) &amp;&amp; ((getKeyAnalyzer().compare(fromKey, toKey)) &gt; 0)" to="!(((fromKey != null) &amp;&amp; (toKey != null)) &amp;&amp; ((getKeyAnalyzer().compare(fromKey, toKey)) &gt; 0))" />
    <mutant id="mutant_980" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) * -1)" />
    <mutant id="mutant_981" viable="true" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) + 1)" />
    <mutant id="mutant_1339" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.size()" from="((size) == (-1)) || ((expectedModCount) != (org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.modCount))" to="!(((size) == (-1)) || ((expectedModCount) != (org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.modCount)))" />
    <mutant id="mutant_982" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) - 1)" />
    <mutant id="mutant_1337" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.contains(java.lang.Object)" from="(node != null) &amp;&amp; (org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(node.getValue(), entry.getValue()))" to="!((node != null) &amp;&amp; (org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(node.getValue(), entry.getValue())))" />
    <mutant id="mutant_1338" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.remove(java.lang.Object)" from="(node != null) &amp;&amp; (org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(node.getValue(), entry.getValue()))" to="!((node != null) &amp;&amp; (org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(node.getValue(), entry.getValue())))" />
    <mutant id="mutant_1335" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.hasNext()" from="((next) != null) &amp;&amp; (!(org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(next.key, excludedKey)))" to="!(((next) != null) &amp;&amp; (!(org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(next.key, excludedKey))))" />
    <mutant id="mutant_1336" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.next()" from="((next) == null) || (org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(next.key, excludedKey))" to="!(((next) == null) || (org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(next.key, excludedKey)))" />
    <mutant id="mutant_514" viable="true" in="org.apache.commons.collections4.map.CompositeMap.remove(java.lang.Object)" from="(this.composite.length) - 1" to="((this.composite.length) - 1) + 1" />
    <mutant id="mutant_998" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex)) - 1" to="(((this.index) - (this.startIndex)) - 1) + 1" />
    <mutant id="mutant_515" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsKey(java.lang.Object)" from="(this.composite.length) - 1" to="((this.composite.length) - 1) * -1" />
    <mutant id="mutant_999" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex)) - 1" to="(((this.index) - (this.startIndex)) - 1) - 1" />
    <mutant id="mutant_516" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsKey(java.lang.Object)" from="(this.composite.length) - 1" to="((this.composite.length) - 1) - 1" />
    <mutant id="mutant_517" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsKey(java.lang.Object)" from="(this.composite.length) - 1" to="((this.composite.length) - 1) + 1" />
    <mutant id="mutant_510" viable="true" in="org.apache.commons.collections4.map.CompositeMap.get(java.lang.Object)" from="(this.composite.length) - 1" to="((this.composite.length) - 1) - 1" />
    <mutant id="mutant_994" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.nextIndex()" from="(this.index) - (this.startIndex)" to="((this.index) - (this.startIndex)) + 1" />
    <mutant id="mutant_511" viable="true" in="org.apache.commons.collections4.map.CompositeMap.get(java.lang.Object)" from="(this.composite.length) - 1" to="((this.composite.length) - 1) + 1" />
    <mutant id="mutant_995" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex))" to="(((this.index) - (this.startIndex)) - 1)" />
    <mutant id="mutant_512" viable="true" in="org.apache.commons.collections4.map.CompositeMap.remove(java.lang.Object)" from="(this.composite.length) - 1" to="((this.composite.length) - 1) * -1" />
    <mutant id="mutant_996" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex))" to="(((this.index) - (this.startIndex)) * -1)" />
    <mutant id="mutant_513" viable="true" in="org.apache.commons.collections4.map.CompositeMap.remove(java.lang.Object)" from="(this.composite.length) - 1" to="((this.composite.length) - 1) - 1" />
    <mutant id="mutant_997" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex))" to="(((this.index) - (this.startIndex)) + 1)" />
    <mutant id="mutant_518" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsValue(java.lang.Object)" from="(this.composite.length) - 1" to="((this.composite.length) - 1) * -1" />
    <mutant id="mutant_519" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsValue(java.lang.Object)" from="(this.composite.length) - 1" to="((this.composite.length) - 1) - 1" />
    <mutant id="mutant_1322" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;) + (value)" to="(((key) + &quot;=&quot;) + (value)) * -1" />
    <mutant id="mutant_1323" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.contains(java.lang.Object)" from="(candidate != null) &amp;&amp; (candidate.equals(o))" to="!((candidate != null) &amp;&amp; (candidate.equals(o)))" />
    <mutant id="mutant_1320" viable="true" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;) + (value)" to="(((key) + &quot;=&quot;) + (value)) + 1" />
    <mutant id="mutant_1321" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;) + (value)" to="(((key) + &quot;=&quot;) + (value)) - 1" />
    <mutant id="mutant_990" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s before the start of the array. &quot;)" to="(((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s before the start of the array. &quot;) - 1)" />
    <mutant id="mutant_991" viable="true" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s before the start of the array. &quot;)" to="(((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s before the start of the array. &quot;) + 1)" />
    <mutant id="mutant_992" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.nextIndex()" from="(this.index) - (this.startIndex)" to="((this.index) - (this.startIndex)) - 1" />
    <mutant id="mutant_1328" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap(K,boolean,K,boolean)" from="(fromKey == null) &amp;&amp; (toKey == null)" to="!((fromKey == null) &amp;&amp; (toKey == null))" />
    <mutant id="mutant_993" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.nextIndex()" from="(this.index) - (this.startIndex)" to="((this.index) - (this.startIndex)) * -1" />
    <mutant id="mutant_1329" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap(K,boolean,K,boolean)" from="((fromKey != null) &amp;&amp; (toKey != null))" to="(!((fromKey != null) &amp;&amp; (toKey != null)))" />
    <mutant id="mutant_1326" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()" from="(e == null) || (!(getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, last)))" to="!((e == null) || (!(getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, last))))" />
    <mutant id="mutant_1327" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.fixup()" from="((size) == (-1)) || ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.modCount) != (expectedModCount))" to="!(((size) == (-1)) || ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.modCount) != (expectedModCount)))" />
    <mutant id="mutant_1324" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()" from="(bitIdx != (subtree.bitIndex)) || needsFixing" to="!((bitIdx != (subtree.bitIndex)) || needsFixing)" />
    <mutant id="mutant_1325" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()" from="(e == null) || (!(getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, first)))" to="!((e == null) || (!(getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, first))))" />
    <mutant id="mutant_525" viable="true" in="org.apache.commons.collections4.map.CompositeMap.size()" from="(this.composite.length) - 1" to="((this.composite.length) - 1) - 1" />
    <mutant id="mutant_526" viable="true" in="org.apache.commons.collections4.map.CompositeMap.size()" from="(this.composite.length) - 1" to="((this.composite.length) - 1) + 1" />
    <mutant id="mutant_527" viable="true" in="org.apache.commons.collections4.map.CompositeMap.values()" from="(composite.length) - 1" to="((composite.length) - 1) * -1" />
    <mutant id="mutant_528" viable="true" in="org.apache.commons.collections4.map.CompositeMap.values()" from="(composite.length) - 1" to="((composite.length) - 1) - 1" />
    <mutant id="mutant_521" viable="true" in="org.apache.commons.collections4.map.CompositeMap.isEmpty()" from="(this.composite.length) - 1" to="((this.composite.length) - 1) * -1" />
    <mutant id="mutant_522" viable="true" in="org.apache.commons.collections4.map.CompositeMap.isEmpty()" from="(this.composite.length) - 1" to="((this.composite.length) - 1) - 1" />
    <mutant id="mutant_523" viable="true" in="org.apache.commons.collections4.map.CompositeMap.isEmpty()" from="(this.composite.length) - 1" to="((this.composite.length) - 1) + 1" />
    <mutant id="mutant_524" viable="true" in="org.apache.commons.collections4.map.CompositeMap.size()" from="(this.composite.length) - 1" to="((this.composite.length) - 1) * -1" />
    <mutant id="mutant_529" viable="true" in="org.apache.commons.collections4.map.CompositeMap.values()" from="(composite.length) - 1" to="((composite.length) - 1) + 1" />
    <mutant id="mutant_1399" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,int)" from="(path == (root)) || (!(isBitSet(entry.key, path.bitIndex, lengthInBits)))" to="!((path == (root)) || (!(isBitSet(entry.key, path.bitIndex, lengthInBits))))" />
    <mutant id="mutant_1397" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) + (lengthInBits(key)))" to="(((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) + (lengthInBits(key))) + 1)" />
    <mutant id="mutant_1398" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,int)" from="((current.bitIndex) &gt;= (entry.bitIndex)) || ((current.bitIndex) &lt;= (path.bitIndex))" to="!(((current.bitIndex) &gt;= (entry.bitIndex)) || ((current.bitIndex) &lt;= (path.bitIndex)))" />
    <mutant id="mutant_1395" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) + (lengthInBits(key)))" to="(((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) + (lengthInBits(key))) * -1)" />
    <mutant id="mutant_1396" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) + (lengthInBits(key)))" to="(((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) + (lengthInBits(key))) - 1)" />
    <mutant id="mutant_1393" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;)" to="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) - 1)" />
    <mutant id="mutant_1394" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;)" to="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) * -1)" />
    <mutant id="mutant_520" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsValue(java.lang.Object)" from="(this.composite.length) - 1" to="((this.composite.length) - 1) + 1" />
    <mutant id="mutant_536" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(size - i)" to="((size - i) - 1)" />
    <mutant id="mutant_537" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(size - i)" to="((size - i) * -1)" />
    <mutant id="mutant_538" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(size - i)" to="((size - i) + 1)" />
    <mutant id="mutant_539" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="((size - i) - 1)" to="(((size - i) - 1) + 1)" />
    <mutant id="mutant_532" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="size - 1" to="(size - 1) + 1" />
    <mutant id="mutant_533" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_534" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_535" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_1391" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((offsetInBits + &quot; + &quot;) + lengthInBits)" to="(((offsetInBits + &quot; + &quot;) + lengthInBits) + 1)" />
    <mutant id="mutant_1392" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;)" to="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) + 1)" />
    <mutant id="mutant_1390" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((offsetInBits + &quot; + &quot;) + lengthInBits)" to="(((offsetInBits + &quot; + &quot;) + lengthInBits) - 1)" />
    <mutant id="mutant_1388" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(offsetInBits + &quot; + &quot;)" to="((offsetInBits + &quot; + &quot;) + 1)" />
    <mutant id="mutant_1389" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((offsetInBits + &quot; + &quot;) + lengthInBits)" to="(((offsetInBits + &quot; + &quot;) + lengthInBits) * -1)" />
    <mutant id="mutant_1386" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(offsetInBits + &quot; + &quot;)" to="((offsetInBits + &quot; + &quot;) * -1)" />
    <mutant id="mutant_1387" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(offsetInBits + &quot; + &quot;)" to="((offsetInBits + &quot; + &quot;) - 1)" />
    <mutant id="mutant_1384" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="offsetInBits + lengthInBits" to="(offsetInBits + lengthInBits) - 1" />
    <mutant id="mutant_1385" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="offsetInBits + lengthInBits" to="(offsetInBits + lengthInBits) + 1" />
    <mutant id="mutant_1382" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="((next != null) &amp;&amp; ((next.bitIndex) &lt;= (from.bitIndex))) &amp;&amp; (!(next.isEmpty()))" to="!(((next != null) &amp;&amp; ((next.bitIndex) &lt;= (from.bitIndex))) &amp;&amp; (!(next.isEmpty())))" />
    <mutant id="mutant_1383" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="offsetInBits + lengthInBits" to="(offsetInBits + lengthInBits) * -1" />
    <mutant id="mutant_530" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="size - 1" to="(size - 1) * -1" />
    <mutant id="mutant_531" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="size - 1" to="(size - 1) - 1" />
    <mutant id="mutant_547" viable="true" in="org.apache.commons.collections4.map.CompositeMap.keySet()" from="(this.composite.length) - 1" to="((this.composite.length) - 1) + 1" />
    <mutant id="mutant_548" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(composite.length) - 1" to="((composite.length) - 1) * -1" />
    <mutant id="mutant_549" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(composite.length) - 1" to="((composite.length) - 1) - 1" />
    <mutant id="mutant_543" viable="true" in="org.apache.commons.collections4.map.CompositeMap.entrySet()" from="(composite.length) - 1" to="((composite.length) - 1) - 1" />
    <mutant id="mutant_544" viable="true" in="org.apache.commons.collections4.map.CompositeMap.entrySet()" from="(composite.length) - 1" to="((composite.length) - 1) + 1" />
    <mutant id="mutant_545" viable="true" in="org.apache.commons.collections4.map.CompositeMap.keySet()" from="(this.composite.length) - 1" to="((this.composite.length) - 1) * -1" />
    <mutant id="mutant_546" viable="true" in="org.apache.commons.collections4.map.CompositeMap.keySet()" from="(this.composite.length) - 1" to="((this.composite.length) - 1) - 1" />
    <mutant id="mutant_1380" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.containsKey(java.lang.Object)" from="(!(entry.isEmpty())) &amp;&amp; (compareKeys(key, entry.key))" to="!((!(entry.isEmpty())) &amp;&amp; (compareKeys(key, entry.key)))" />
    <mutant id="mutant_1381" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="((next != null) &amp;&amp; ((next.bitIndex) &lt;= (from.bitIndex)))" to="(!((next != null) &amp;&amp; ((next.bitIndex) &lt;= (from.bitIndex))))" />
    <mutant id="mutant_1377" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) + bitIndex)" to="((((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) + bitIndex) + 1)" />
    <mutant id="mutant_1378" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) + bitIndex)" to="((((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) + bitIndex) * -1)" />
    <mutant id="mutant_1375" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;)" to="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) - 1)" />
    <mutant id="mutant_1376" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) + bitIndex)" to="((((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) + bitIndex) - 1)" />
    <mutant id="mutant_1373" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;)" to="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) + 1)" />
    <mutant id="mutant_1374" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;)" to="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) * -1)" />
    <mutant id="mutant_1371" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value)" to="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + 1)" />
    <mutant id="mutant_1372" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value)" to="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) * -1)" />
    <mutant id="mutant_540" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="((size - i) - 1)" to="(((size - i) - 1) * -1)" />
    <mutant id="mutant_541" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="((size - i) - 1)" to="(((size - i) - 1) - 1)" />
    <mutant id="mutant_542" viable="true" in="org.apache.commons.collections4.map.CompositeMap.entrySet()" from="(composite.length) - 1" to="((composite.length) - 1) * -1" />
    <mutant id="mutant_1379" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(java.lang.Object)" from="(!(current.isEmpty())) &amp;&amp; (compareKeys(key, current.key))" to="!((!(current.isEmpty())) &amp;&amp; (compareKeys(key, current.key)))" />
    <mutant id="mutant_558" viable="true" in="org.apache.commons.collections4.map.CompositeMap.clear()" from="(this.composite.length) - 1" to="((this.composite.length) - 1) - 1" />
    <mutant id="mutant_559" viable="true" in="org.apache.commons.collections4.map.CompositeMap.clear()" from="(this.composite.length) - 1" to="((this.composite.length) - 1) + 1" />
    <mutant id="mutant_554" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="((temp.length) - 1)" to="(((temp.length) - 1) * -1)" />
    <mutant id="mutant_555" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="((temp.length) - 1)" to="(((temp.length) - 1) - 1)" />
    <mutant id="mutant_556" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="((temp.length) - 1)" to="(((temp.length) - 1) + 1)" />
    <mutant id="mutant_557" viable="true" in="org.apache.commons.collections4.map.CompositeMap.clear()" from="(this.composite.length) - 1" to="((this.composite.length) - 1) * -1" />
    <mutant id="mutant_1370" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value)" to="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) - 1)" />
    <mutant id="mutant_1366" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(&quot;Failed to put: &quot; + key)" to="((&quot;Failed to put: &quot; + key) * -1)" />
    <mutant id="mutant_1367" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;)" to="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + 1)" />
    <mutant id="mutant_1364" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(&quot;Failed to put: &quot; + key)" to="((&quot;Failed to put: &quot; + key) + 1)" />
    <mutant id="mutant_1365" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(&quot;Failed to put: &quot; + key)" to="((&quot;Failed to put: &quot; + key) - 1)" />
    <mutant id="mutant_1362" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="((&quot;FromKey is out of range: &quot; + fromKey) - 1)" />
    <mutant id="mutant_1363" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.isInternalNode()" from="((left) != (this)) &amp;&amp; ((right) != (this))" to="!(((left) != (this)) &amp;&amp; ((right) != (this)))" />
    <mutant id="mutant_1360" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="((&quot;FromKey is out of range: &quot; + fromKey) + 1)" />
    <mutant id="mutant_1361" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="((&quot;FromKey is out of range: &quot; + fromKey) * -1)" />
    <mutant id="mutant_550" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(composite.length) - 1" to="((composite.length) - 1) + 1" />
    <mutant id="mutant_551" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(this.composite.length) + 1" to="((this.composite.length) + 1) - 1" />
    <mutant id="mutant_552" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(this.composite.length) + 1" to="((this.composite.length) + 1) * -1" />
    <mutant id="mutant_553" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(this.composite.length) + 1" to="((this.composite.length) + 1) + 1" />
    <mutant id="mutant_1368" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;)" to="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) - 1)" />
    <mutant id="mutant_1369" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;)" to="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) * -1)" />
    <mutant id="mutant_448" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="(((size) + mapSize) / (loadFactor))" to="((((size) + mapSize) / (loadFactor)) * -1)" />
    <mutant id="mutant_449" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="(((size) + mapSize) / (loadFactor))" to="((((size) + mapSize) / (loadFactor)) + 1)" />
    <mutant id="mutant_444" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((size) + mapSize)" to="(((size) + mapSize) + 1)" />
    <mutant id="mutant_445" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((size) + mapSize)" to="(((size) + mapSize) - 1)" />
    <mutant id="mutant_446" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((size) + mapSize)" to="(((size) + mapSize) * -1)" />
    <mutant id="mutant_447" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="(((size) + mapSize) / (loadFactor))" to="((((size) + mapSize) / (loadFactor)) - 1)" />
    <mutant id="mutant_1199" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="((total * 37) * -1)" />
    <mutant id="mutant_1197" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="((total * 37) + 1)" />
    <mutant id="mutant_1198" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="((total * 37) - 1)" />
    <mutant id="mutant_1195" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((map) == null ? 0 : map.hashCode())" to="((total * 37) + ((map) == null ? 0 : map.hashCode())) * -1" />
    <mutant id="mutant_1196" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((map) == null ? 0 : map.hashCode())" to="((total * 37) + ((map) == null ? 0 : map.hashCode())) - 1" />
    <mutant id="mutant_440" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.toString()" from="(32 * (size()))" to="((32 * (size())) + 1)" />
    <mutant id="mutant_441" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.toString()" from="(32 * (size()))" to="((32 * (size())) * -1)" />
    <mutant id="mutant_442" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.toString()" from="(32 * (size()))" to="((32 * (size())) - 1)" />
    <mutant id="mutant_443" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.getEntry(java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(key, entry.key))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(key, entry.key)))" />
    <mutant id="mutant_459" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.ensureCapacity(int)" from="oldCapacity - 1" to="(oldCapacity - 1) - 1" />
    <mutant id="mutant_455" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.checkCapacity()" from="(data.length) * 2" to="((data.length) * 2) + 1" />
    <mutant id="mutant_456" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.clear()" from="(data.length) - 1" to="((data.length) - 1) * -1" />
    <mutant id="mutant_457" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.clear()" from="(data.length) - 1" to="((data.length) - 1) - 1" />
    <mutant id="mutant_458" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.clear()" from="(data.length) - 1" to="((data.length) - 1) + 1" />
    <mutant id="mutant_1193" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="((total * 37) * -1)" />
    <mutant id="mutant_1194" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((map) == null ? 0 : map.hashCode())" to="((total * 37) + ((map) == null ? 0 : map.hashCode())) + 1" />
    <mutant id="mutant_1191" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="((total * 37) + 1)" />
    <mutant id="mutant_1192" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="((total * 37) - 1)" />
    <mutant id="mutant_1190" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Unknown unknownObjectBehavior: &quot; + (unknownObjectBehavior))" to="((&quot;Unknown unknownObjectBehavior: &quot; + (unknownObjectBehavior)) * -1)" />
    <mutant id="mutant_1188" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Unknown unknownObjectBehavior: &quot; + (unknownObjectBehavior))" to="((&quot;Unknown unknownObjectBehavior: &quot; + (unknownObjectBehavior)) + 1)" />
    <mutant id="mutant_1189" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Unknown unknownObjectBehavior: &quot; + (unknownObjectBehavior))" to="((&quot;Unknown unknownObjectBehavior: &quot; + (unknownObjectBehavior)) - 1)" />
    <mutant id="mutant_1186" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Attempting to compare unknown object &quot; + unknownObj)" to="((&quot;Attempting to compare unknown object &quot; + unknownObj) - 1)" />
    <mutant id="mutant_1187" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Attempting to compare unknown object &quot; + unknownObj)" to="((&quot;Attempting to compare unknown object &quot; + unknownObj) * -1)" />
    <mutant id="mutant_1184" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(position1 == null) || (position2 == null)" to="!((position1 == null) || (position2 == null))" />
    <mutant id="mutant_1185" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Attempting to compare unknown object &quot; + unknownObj)" to="((&quot;Attempting to compare unknown object &quot; + unknownObj) + 1)" />
    <mutant id="mutant_451" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((int)((((size) + mapSize) / (loadFactor)) + 1))" to="((int)(((((size) + mapSize) / (loadFactor)) + 1))) * -1" />
    <mutant id="mutant_452" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((int)((((size) + mapSize) / (loadFactor)) + 1))" to="((int)(((((size) + mapSize) / (loadFactor)) + 1))) - 1" />
    <mutant id="mutant_453" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.checkCapacity()" from="(data.length) * 2" to="((data.length) * 2) - 1" />
    <mutant id="mutant_454" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.checkCapacity()" from="(data.length) * 2" to="((data.length) * 2) * -1" />
    <mutant id="mutant_450" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((int)((((size) + mapSize) / (loadFactor)) + 1))" to="((int)(((((size) + mapSize) / (loadFactor)) + 1))) + 1" />
    <mutant id="mutant_466" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) * -1)" />
    <mutant id="mutant_467" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) - 1)" />
    <mutant id="mutant_468" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="((((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + 1)" />
    <mutant id="mutant_469" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="((((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) * -1)" />
    <mutant id="mutant_1182" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.equals(java.lang.Object)" from="((((unknownObjectBehavior) == (comp.unknownObjectBehavior)) &amp;&amp; ((counter) == (comp.counter))) &amp;&amp; ((isLocked) == (comp.isLocked))) &amp;&amp; ((unknownObjectBehavior) == (comp.unknownObjectBehavior))" to="!(((((unknownObjectBehavior) == (comp.unknownObjectBehavior)) &amp;&amp; ((counter) == (comp.counter))) &amp;&amp; ((isLocked) == (comp.isLocked))) &amp;&amp; ((unknownObjectBehavior) == (comp.unknownObjectBehavior)))" />
    <mutant id="mutant_1183" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.equals(java.lang.Object)" from="(null == (map) ? null == (comp.map) : map.equals(comp.map)) &amp;&amp; (null == (unknownObjectBehavior) ? null == (comp.unknownObjectBehavior) : ((((unknownObjectBehavior) == (comp.unknownObjectBehavior)) &amp;&amp; ((counter) == (comp.counter))) &amp;&amp; ((isLocked) == (comp.isLocked))) &amp;&amp; ((unknownObjectBehavior) == (comp.unknownObjectBehavior)))" to="!((null == (map) ? null == (comp.map) : map.equals(comp.map)) &amp;&amp; (null == (unknownObjectBehavior) ? null == (comp.unknownObjectBehavior) : ((((unknownObjectBehavior) == (comp.unknownObjectBehavior)) &amp;&amp; ((counter) == (comp.counter))) &amp;&amp; ((isLocked) == (comp.isLocked))) &amp;&amp; ((unknownObjectBehavior) == (comp.unknownObjectBehavior))))" />
    <mutant id="mutant_1180" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.equals(java.lang.Object)" from="(((unknownObjectBehavior) == (comp.unknownObjectBehavior)) &amp;&amp; ((counter) == (comp.counter)))" to="(!(((unknownObjectBehavior) == (comp.unknownObjectBehavior)) &amp;&amp; ((counter) == (comp.counter))))" />
    <mutant id="mutant_1181" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.equals(java.lang.Object)" from="((((unknownObjectBehavior) == (comp.unknownObjectBehavior)) &amp;&amp; ((counter) == (comp.counter))) &amp;&amp; ((isLocked) == (comp.isLocked)))" to="(!((((unknownObjectBehavior) == (comp.unknownObjectBehavior)) &amp;&amp; ((counter) == (comp.counter))) &amp;&amp; ((isLocked) == (comp.isLocked))))" />
    <mutant id="mutant_1179" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="((existingObj + &quot; not known to &quot;) + (this))" to="(((existingObj + &quot; not known to &quot;) + (this)) * -1)" />
    <mutant id="mutant_1177" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="((existingObj + &quot; not known to &quot;) + (this))" to="(((existingObj + &quot; not known to &quot;) + (this)) + 1)" />
    <mutant id="mutant_1178" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="((existingObj + &quot; not known to &quot;) + (this))" to="(((existingObj + &quot; not known to &quot;) + (this)) - 1)" />
    <mutant id="mutant_1175" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="(existingObj + &quot; not known to &quot;)" to="((existingObj + &quot; not known to &quot;) - 1)" />
    <mutant id="mutant_1176" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="(existingObj + &quot; not known to &quot;)" to="((existingObj + &quot; not known to &quot;) + 1)" />
    <mutant id="mutant_1173" viable="true" in="org.apache.commons.collections4.comparators.ComparatorChain.addComparator(java.util.Comparator,boolean)" from="((comparatorChain.size()) - 1)" to="(((comparatorChain.size()) - 1) + 1)" />
    <mutant id="mutant_1174" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="(existingObj + &quot; not known to &quot;)" to="((existingObj + &quot; not known to &quot;) * -1)" />
    <mutant id="mutant_462" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="((&quot;Iterator[&quot; + (last.getKey())) * -1)" />
    <mutant id="mutant_463" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="((&quot;Iterator[&quot; + (last.getKey())) - 1)" />
    <mutant id="mutant_464" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="((&quot;Iterator[&quot; + (last.getKey())) + 1)" />
    <mutant id="mutant_465" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + 1)" />
    <mutant id="mutant_460" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.ensureCapacity(int)" from="oldCapacity - 1" to="(oldCapacity - 1) * -1" />
    <mutant id="mutant_461" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.ensureCapacity(int)" from="oldCapacity - 1" to="(oldCapacity - 1) + 1" />
    <mutant id="mutant_477" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="((&quot;Index &quot; + index) - 1)" />
    <mutant id="mutant_478" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="((&quot;Index &quot; + index) * -1)" />
    <mutant id="mutant_479" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is less than zero&quot;)" to="(((&quot;Index &quot; + index) + &quot; is less than zero&quot;) * -1)" />
    <mutant id="mutant_1171" viable="true" in="org.apache.commons.collections4.comparators.ComparatorChain.addComparator(java.util.Comparator,boolean)" from="((comparatorChain.size()) - 1)" to="(((comparatorChain.size()) - 1) * -1)" />
    <mutant id="mutant_1172" viable="true" in="org.apache.commons.collections4.comparators.ComparatorChain.addComparator(java.util.Comparator,boolean)" from="((comparatorChain.size()) - 1)" to="(((comparatorChain.size()) - 1) - 1)" />
    <mutant id="mutant_1170" viable="true" in="org.apache.commons.collections4.comparators.ComparatorChain.equals(java.lang.Object)" from="(null == (orderingBits) ? null == (chain.orderingBits) : orderingBits.equals(chain.orderingBits)) &amp;&amp; (null == (comparatorChain) ? null == (chain.comparatorChain) : comparatorChain.equals(chain.comparatorChain))" to="!((null == (orderingBits) ? null == (chain.orderingBits) : orderingBits.equals(chain.orderingBits)) &amp;&amp; (null == (comparatorChain) ? null == (chain.comparatorChain) : comparatorChain.equals(chain.comparatorChain)))" />
    <mutant id="mutant_1168" viable="true" in="org.apache.commons.collections4.comparators.ComparableComparator.equals(java.lang.Object)" from="((null != object) &amp;&amp; (object.getClass().equals(getClass())))" to="(!((null != object) &amp;&amp; (object.getClass().equals(getClass()))))" />
    <mutant id="mutant_1169" viable="true" in="org.apache.commons.collections4.comparators.ComparableComparator.equals(java.lang.Object)" from="((this) == object) || ((null != object) &amp;&amp; (object.getClass().equals(getClass())))" to="!(((this) == object) || ((null != object) &amp;&amp; (object.getClass().equals(getClass()))))" />
    <mutant id="mutant_1166" viable="true" in="org.apache.commons.collections4.comparators.BooleanComparator.hashCode()" from="(-1) * hash" to="((-1) * hash) - 1" />
    <mutant id="mutant_1167" viable="true" in="org.apache.commons.collections4.comparators.BooleanComparator.hashCode()" from="(-1) * hash" to="((-1) * hash) * -1" />
    <mutant id="mutant_1164" viable="true" in="org.apache.commons.collections4.comparators.BooleanComparator.equals(java.lang.Object)" from="((this) == object) || ((object instanceof BooleanComparator) &amp;&amp; ((this.trueFirst) == (((BooleanComparator)(object)).trueFirst)))" to="!(((this) == object) || ((object instanceof BooleanComparator) &amp;&amp; ((this.trueFirst) == (((BooleanComparator)(object)).trueFirst))))" />
    <mutant id="mutant_1165" viable="true" in="org.apache.commons.collections4.comparators.BooleanComparator.hashCode()" from="(-1) * hash" to="((-1) * hash) + 1" />
    <mutant id="mutant_1162" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.swapPosition(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((y.getParent(dataElement)) != null) &amp;&amp; (y == (y.getParent(dataElement).getLeft(dataElement)))" to="!(((y.getParent(dataElement)) != null) &amp;&amp; (y == (y.getParent(dataElement).getLeft(dataElement))))" />
    <mutant id="mutant_1163" viable="true" in="org.apache.commons.collections4.comparators.BooleanComparator.equals(java.lang.Object)" from="((object instanceof BooleanComparator) &amp;&amp; ((this.trueFirst) == (((BooleanComparator)(object)).trueFirst)))" to="(!((object instanceof BooleanComparator) &amp;&amp; ((this.trueFirst) == (((BooleanComparator)(object)).trueFirst))))" />
    <mutant id="mutant_473" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_474" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.nextKey(java.lang.Object)" from="(entry == null) || ((entry.after) == (header))" to="!((entry == null) || ((entry.after) == (header)))" />
    <mutant id="mutant_475" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.previousKey(java.lang.Object)" from="(entry == null) || ((entry.before) == (header))" to="!((entry == null) || ((entry.before) == (header)))" />
    <mutant id="mutant_476" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="((&quot;Index &quot; + index) + 1)" />
    <mutant id="mutant_470" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="((((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) - 1)" />
    <mutant id="mutant_471" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_472" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_488" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) + (size))" to="((((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) + (size)) * -1)" />
    <mutant id="mutant_489" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) + (size))" to="((((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) + (size)) - 1)" />
    <mutant id="mutant_484" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="((&quot;Index &quot; + index) * -1)" />
    <mutant id="mutant_485" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is invalid for size &quot;)" to="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) * -1)" />
    <mutant id="mutant_486" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is invalid for size &quot;)" to="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) - 1)" />
    <mutant id="mutant_487" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is invalid for size &quot;)" to="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) + 1)" />
    <mutant id="mutant_480" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is less than zero&quot;)" to="(((&quot;Index &quot; + index) + &quot; is less than zero&quot;) - 1)" />
    <mutant id="mutant_481" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is less than zero&quot;)" to="(((&quot;Index &quot; + index) + &quot; is less than zero&quot;) + 1)" />
    <mutant id="mutant_482" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="((&quot;Index &quot; + index) + 1)" />
    <mutant id="mutant_483" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="((&quot;Index &quot; + index) - 1)" />
    <mutant id="mutant_499" viable="true" in="org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry.purge(java.lang.ref.Reference)" from="((parent.keyType) != (AbstractReferenceMap.ReferenceStrength.HARD)) &amp;&amp; ((key) == ref)" to="!(((parent.keyType) != (AbstractReferenceMap.ReferenceStrength.HARD)) &amp;&amp; ((key) == ref))" />
    <mutant id="mutant_490" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) + (size))" to="((((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) + (size)) + 1)" />
    <mutant id="mutant_495" viable="true" in="org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.nextNull()" from="((nextKey) == null) || ((nextValue) == null)" to="!(((nextKey) == null) || ((nextValue) == null))" />
    <mutant id="mutant_496" viable="true" in="org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.nextEntry()" from="(nextNull()) &amp;&amp; (!(hasNext()))" to="!((nextNull()) &amp;&amp; (!(hasNext())))" />
    <mutant id="mutant_497" viable="true" in="org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry.equals(java.lang.Object)" from="(entryKey == null) || (entryValue == null)" to="!((entryKey == null) || (entryValue == null))" />
    <mutant id="mutant_498" viable="true" in="org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry.equals(java.lang.Object)" from="(parent.isEqualKey(entryKey, key)) &amp;&amp; (parent.isEqualValue(entryValue, getValue()))" to="!((parent.isEqualKey(entryKey, key)) &amp;&amp; (parent.isEqualValue(entryValue, getValue())))" />
    <mutant id="mutant_491" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((size) / 2)" to="(((size) / 2) * -1)" />
    <mutant id="mutant_492" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((size) / 2)" to="(((size) / 2) - 1)" />
    <mutant id="mutant_493" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((size) / 2)" to="(((size) / 2) + 1)" />
    <mutant id="mutant_494" viable="true" in="org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.hasNext()" from="(e == null) &amp;&amp; (i &gt; 0)" to="!((e == null) &amp;&amp; (i &gt; 0))" />
    <mutant id="mutant_1630" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.decrement(int)" from="(maxElements) - 1" to="((maxElements) - 1) - 1" />
    <mutant id="mutant_1631" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.decrement(int)" from="(maxElements) - 1" to="((maxElements) - 1) + 1" />
    <mutant id="mutant_1638" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start)) + (end)" to="(((maxElements) - (start)) + (end)) * -1" />
    <mutant id="mutant_1639" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="(end) - (start)" to="((end) - (start)) * -1" />
    <mutant id="mutant_1636" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start)) + (end)" to="(((maxElements) - (start)) + (end)) - 1" />
    <mutant id="mutant_1637" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start)) + (end)" to="(((maxElements) - (start)) + (end)) + 1" />
    <mutant id="mutant_1634" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start))" to="(((maxElements) - (start)) * -1)" />
    <mutant id="mutant_1635" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start))" to="(((maxElements) - (start)) - 1)" />
    <mutant id="mutant_1632" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.decrement(int)" from="(maxElements) - 1" to="((maxElements) - 1) * -1" />
    <mutant id="mutant_1633" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start))" to="(((maxElements) - (start)) + 1)" />
    <mutant id="mutant_1629" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index) % (maxElements)" to="(((start) + index) % (maxElements)) + 1" />
    <mutant id="mutant_1620" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getEnd()) - (middle.getDiag()))" to="(((middle.getEnd()) - (middle.getDiag())) + 1)" />
    <mutant id="mutant_1627" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index) % (maxElements)" to="(((start) + index) % (maxElements)) * -1" />
    <mutant id="mutant_1628" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index) % (maxElements)" to="(((start) + index) % (maxElements)) - 1" />
    <mutant id="mutant_1625" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index)" to="(((start) + index) - 1)" />
    <mutant id="mutant_1626" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index)" to="(((start) + index) * -1)" />
    <mutant id="mutant_1623" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="(index &lt; 0) || (index &gt;= sz)" to="!((index &lt; 0) || (index &gt;= sz))" />
    <mutant id="mutant_1624" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index)" to="(((start) + index) + 1)" />
    <mutant id="mutant_1621" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getEnd()) - (middle.getDiag()))" to="(((middle.getEnd()) - (middle.getDiag())) * -1)" />
    <mutant id="mutant_1622" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getEnd()) - (middle.getDiag()))" to="(((middle.getEnd()) - (middle.getDiag())) - 1)" />
    <mutant id="mutant_1618" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getStart()) - (middle.getDiag()))" to="(((middle.getStart()) - (middle.getDiag())) - 1)" />
    <mutant id="mutant_1619" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getStart()) - (middle.getDiag()))" to="(((middle.getStart()) - (middle.getDiag())) + 1)" />
    <mutant id="mutant_1616" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end2 - start2)" to="((end2 - start2) * -1)" />
    <mutant id="mutant_1617" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getStart()) - (middle.getDiag()))" to="(((middle.getStart()) - (middle.getDiag())) * -1)" />
    <mutant id="mutant_1614" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end2 - start2)" to="((end2 - start2) + 1)" />
    <mutant id="mutant_1615" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end2 - start2)" to="((end2 - start2) - 1)" />
    <mutant id="mutant_1612" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - start1)" to="((end1 - start1) * -1)" />
    <mutant id="mutant_1613" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - start1)" to="((end1 - start1) - 1)" />
    <mutant id="mutant_1610" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((i &lt; end1) &amp;&amp; (j &lt; end2)) &amp;&amp; (equator.equate(sequence1.get(i), sequence2.get(j)))" to="!(((i &lt; end1) &amp;&amp; (j &lt; end2)) &amp;&amp; (equator.equate(sequence1.get(i), sequence2.get(j))))" />
    <mutant id="mutant_1611" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - start1)" to="((end1 - start1) + 1)" />
    <mutant id="mutant_1609" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((i &lt; end1) &amp;&amp; (j &lt; end2))" to="(!((i &lt; end1) &amp;&amp; (j &lt; end2)))" />
    <mutant id="mutant_1607" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle == null) || (((middle.getStart()) == end1) &amp;&amp; ((middle.getDiag()) == (end1 - end2)))) || (((middle.getEnd()) == start1) &amp;&amp; ((middle.getDiag()) == (start1 - start2)))" to="!(((middle == null) || (((middle.getStart()) == end1) &amp;&amp; ((middle.getDiag()) == (end1 - end2)))) || (((middle.getEnd()) == start1) &amp;&amp; ((middle.getDiag()) == (start1 - start2))))" />
    <mutant id="mutant_1608" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(i &lt; end1) || (j &lt; end2)" to="!((i &lt; end1) || (j &lt; end2))" />
    <mutant id="mutant_1605" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(start1 - start2)" to="((start1 - start2) * -1)" />
    <mutant id="mutant_1606" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(((middle.getEnd()) == start1) &amp;&amp; ((middle.getDiag()) == (start1 - start2)))" to="(!(((middle.getEnd()) == start1) &amp;&amp; ((middle.getDiag()) == (start1 - start2))))" />
    <mutant id="mutant_1603" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(start1 - start2)" to="((start1 - start2) - 1)" />
    <mutant id="mutant_1604" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(start1 - start2)" to="((start1 - start2) + 1)" />
    <mutant id="mutant_1601" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(((middle.getStart()) == end1) &amp;&amp; ((middle.getDiag()) == (end1 - end2)))" to="(!(((middle.getStart()) == end1) &amp;&amp; ((middle.getDiag()) == (end1 - end2))))" />
    <mutant id="mutant_1602" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle == null) || (((middle.getStart()) == end1) &amp;&amp; ((middle.getDiag()) == (end1 - end2))))" to="(!((middle == null) || (((middle.getStart()) == end1) &amp;&amp; ((middle.getDiag()) == (end1 - end2)))))" />
    <mutant id="mutant_1600" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - end2)" to="((end1 - end2) * -1)" />
    <mutant id="mutant_800" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.lastKey()" from="((size()) - 1)" to="(((size()) - 1) * -1)" />
    <mutant id="mutant_801" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.lastKey()" from="((size()) - 1)" to="(((size()) - 1) - 1)" />
    <mutant id="mutant_802" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.lastKey()" from="((size()) - 1)" to="(((size()) - 1) + 1)" />
    <mutant id="mutant_803" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="((size()) - 1)" to="(((size()) - 1) * -1)" />
    <mutant id="mutant_808" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="(index + 1)" to="((index + 1) * -1)" />
    <mutant id="mutant_809" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="(index + 1)" to="((index + 1) + 1)" />
    <mutant id="mutant_804" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="((size()) - 1)" to="(((size()) - 1) - 1)" />
    <mutant id="mutant_805" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="((size()) - 1)" to="(((size()) - 1) + 1)" />
    <mutant id="mutant_806" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="(index &gt;= 0) &amp;&amp; (index &lt; ((size()) - 1))" to="!((index &gt;= 0) &amp;&amp; (index &lt; ((size()) - 1)))" />
    <mutant id="mutant_807" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="(index + 1)" to="((index + 1) - 1)" />
    <mutant id="mutant_1674" viable="true" in="org.apache.commons.collections4.ArrayStack.search(java.lang.Object)" from="((object == null) &amp;&amp; (current == null))" to="(!((object == null) &amp;&amp; (current == null)))" />
    <mutant id="mutant_1675" viable="true" in="org.apache.commons.collections4.ArrayStack.search(java.lang.Object)" from="((object != null) &amp;&amp; (object.equals(current)))" to="(!((object != null) &amp;&amp; (object.equals(current))))" />
    <mutant id="mutant_1672" viable="true" in="org.apache.commons.collections4.ArrayStack.search(java.lang.Object)" from="(size()) - 1" to="((size()) - 1) - 1" />
    <mutant id="mutant_1673" viable="true" in="org.apache.commons.collections4.ArrayStack.search(java.lang.Object)" from="(size()) - 1" to="((size()) - 1) * -1" />
    <mutant id="mutant_1670" viable="true" in="org.apache.commons.collections4.ArrayStack.pop()" from="(n - 1)" to="((n - 1) + 1)" />
    <mutant id="mutant_1671" viable="true" in="org.apache.commons.collections4.ArrayStack.search(java.lang.Object)" from="(size()) - 1" to="((size()) - 1) + 1" />
    <mutant id="mutant_1678" viable="true" in="org.apache.commons.collections4.CollectionUtils.countMatches(java.lang.Iterable,org.apache.commons.collections4.Predicate)" from="(input != null) &amp;&amp; (predicate != null)" to="!((input != null) &amp;&amp; (predicate != null))" />
    <mutant id="mutant_1679" viable="true" in="org.apache.commons.collections4.CollectionUtils.transform(java.util.Collection,org.apache.commons.collections4.Transformer)" from="(collection != null) &amp;&amp; (transformer != null)" to="!((collection != null) &amp;&amp; (transformer != null))" />
    <mutant id="mutant_1676" viable="true" in="org.apache.commons.collections4.ArrayStack.search(java.lang.Object)" from="((object == null) &amp;&amp; (current == null)) || ((object != null) &amp;&amp; (object.equals(current)))" to="!(((object == null) &amp;&amp; (current == null)) || ((object != null) &amp;&amp; (object.equals(current))))" />
    <mutant id="mutant_1677" viable="true" in="org.apache.commons.collections4.CollectionUtils.exists(java.lang.Iterable,org.apache.commons.collections4.Predicate)" from="(input != null) &amp;&amp; (predicate != null)" to="!((input != null) &amp;&amp; (predicate != null))" />
    <mutant id="mutant_811" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.previousKey(java.lang.Object)" from="(index - 1)" to="((index - 1) * -1)" />
    <mutant id="mutant_812" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.previousKey(java.lang.Object)" from="(index - 1)" to="((index - 1) + 1)" />
    <mutant id="mutant_813" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(index &lt; 0) || (index &gt; (insertOrder.size()))" to="!((index &lt; 0) || (index &gt; (insertOrder.size())))" />
    <mutant id="mutant_814" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(&quot;Index: &quot; + index)" to="((&quot;Index: &quot; + index) - 1)" />
    <mutant id="mutant_810" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.previousKey(java.lang.Object)" from="(index - 1)" to="((index - 1) - 1)" />
    <mutant id="mutant_819" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) - 1)" />
    <mutant id="mutant_815" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(&quot;Index: &quot; + index)" to="((&quot;Index: &quot; + index) * -1)" />
    <mutant id="mutant_816" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(&quot;Index: &quot; + index)" to="((&quot;Index: &quot; + index) + 1)" />
    <mutant id="mutant_817" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + 1)" />
    <mutant id="mutant_818" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) * -1)" />
    <mutant id="mutant_1663" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n)" to="(((size()) - n) + 1)" />
    <mutant id="mutant_1664" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n)" to="(((size()) - n) * -1)" />
    <mutant id="mutant_1661" viable="true" in="org.apache.commons.collections4.ArrayStack.peek()" from="(n - 1)" to="((n - 1) + 1)" />
    <mutant id="mutant_1662" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n)" to="(((size()) - n) - 1)" />
    <mutant id="mutant_1660" viable="true" in="org.apache.commons.collections4.ArrayStack.peek()" from="(n - 1)" to="((n - 1) * -1)" />
    <mutant id="mutant_1669" viable="true" in="org.apache.commons.collections4.ArrayStack.pop()" from="(n - 1)" to="((n - 1) * -1)" />
    <mutant id="mutant_1667" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n) - 1" to="(((size()) - n) - 1) - 1" />
    <mutant id="mutant_1668" viable="true" in="org.apache.commons.collections4.ArrayStack.pop()" from="(n - 1)" to="((n - 1) - 1)" />
    <mutant id="mutant_1665" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n) - 1" to="(((size()) - n) - 1) * -1" />
    <mutant id="mutant_1666" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n) - 1" to="(((size()) - n) - 1) + 1" />
    <mutant id="mutant_822" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="((((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size())) - 1)" />
    <mutant id="mutant_823" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(index &lt; 0) || (index &gt; (insertOrder.size()))" to="!((index &lt; 0) || (index &gt; (insertOrder.size())))" />
    <mutant id="mutant_824" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(&quot;Index: &quot; + index)" to="((&quot;Index: &quot; + index) - 1)" />
    <mutant id="mutant_825" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(&quot;Index: &quot; + index)" to="((&quot;Index: &quot; + index) * -1)" />
    <mutant id="mutant_820" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="((((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size())) + 1)" />
    <mutant id="mutant_821" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="((((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size())) * -1)" />
    <mutant id="mutant_826" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(&quot;Index: &quot; + index)" to="((&quot;Index: &quot; + index) + 1)" />
    <mutant id="mutant_827" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + 1)" />
    <mutant id="mutant_828" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) * -1)" />
    <mutant id="mutant_829" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) - 1)" />
    <mutant id="mutant_1652" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(pos - 1)" to="((pos - 1) - 1)" />
    <mutant id="mutant_1653" viable="true" in="org.apache.commons.collections4.set.CompositeSet.equals(java.lang.Object)" from="((set.size()) == (size())) &amp;&amp; (set.containsAll(this))" to="!(((set.size()) == (size())) &amp;&amp; (set.containsAll(this)))" />
    <mutant id="mutant_1650" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(pos - 1)" to="((pos - 1) + 1)" />
    <mutant id="mutant_1651" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(pos - 1)" to="((pos - 1) * -1)" />
    <mutant id="mutant_1658" viable="true" in="org.apache.commons.collections4.set.TransformedSortedSet.transformedSortedSet(java.util.SortedSet,org.apache.commons.collections4.Transformer)" from="((transformer != null) &amp;&amp; (set != null)) &amp;&amp; ((set.size()) &gt; 0)" to="!(((transformer != null) &amp;&amp; (set != null)) &amp;&amp; ((set.size()) &gt; 0))" />
    <mutant id="mutant_1659" viable="true" in="org.apache.commons.collections4.ArrayStack.peek()" from="(n - 1)" to="((n - 1) - 1)" />
    <mutant id="mutant_1656" viable="true" in="org.apache.commons.collections4.set.TransformedSet.transformedSet(java.util.Set,org.apache.commons.collections4.Transformer)" from="((transformer != null) &amp;&amp; (set != null)) &amp;&amp; ((set.size()) &gt; 0)" to="!(((transformer != null) &amp;&amp; (set != null)) &amp;&amp; ((set.size()) &gt; 0))" />
    <mutant id="mutant_1657" viable="true" in="org.apache.commons.collections4.set.TransformedSortedSet.transformedSortedSet(java.util.SortedSet,org.apache.commons.collections4.Transformer)" from="((transformer != null) &amp;&amp; (set != null))" to="(!((transformer != null) &amp;&amp; (set != null)))" />
    <mutant id="mutant_1654" viable="true" in="org.apache.commons.collections4.set.ListOrderedSet.listOrderedSet(java.util.Set,java.util.List)" from="((set.size()) &gt; 0) || ((list.size()) &gt; 0)" to="!(((set.size()) &gt; 0) || ((list.size()) &gt; 0))" />
    <mutant id="mutant_1655" viable="true" in="org.apache.commons.collections4.set.TransformedSet.transformedSet(java.util.Set,org.apache.commons.collections4.Transformer)" from="((transformer != null) &amp;&amp; (set != null))" to="(!((transformer != null) &amp;&amp; (set != null)))" />
    <mutant id="mutant_833" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(indexOf(entry.getKey())) + 1" to="((indexOf(entry.getKey())) + 1) + 1" />
    <mutant id="mutant_834" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(indexOf(entry.getKey())) + 1" to="((indexOf(entry.getKey())) + 1) * -1" />
    <mutant id="mutant_835" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(indexOf(entry.getKey())) + 1" to="((indexOf(entry.getKey())) + 1) - 1" />
    <mutant id="mutant_836" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.get(java.lang.Object,java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2)))" />
    <mutant id="mutant_830" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="((((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size())) + 1)" />
    <mutant id="mutant_831" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="((((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size())) * -1)" />
    <mutant id="mutant_832" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="((((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size())) - 1)" />
    <mutant id="mutant_837" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.get(java.lang.Object,java.lang.Object,java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3)))" />
    <mutant id="mutant_838" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.get(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4)))" />
    <mutant id="mutant_839" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.get(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4, key5))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4, key5)))" />
    <mutant id="mutant_1641" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="(end) - (start)" to="((end) - (start)) + 1" />
    <mutant id="mutant_1642" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.hasNext()" from="(isFirst) || ((index) != (end))" to="!((isFirst) || ((index) != (end)))" />
    <mutant id="mutant_1640" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="(end) - (start)" to="((end) - (start)) - 1" />
    <mutant id="mutant_1649" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="((end) - pos)" to="(((end) - pos) - 1)" />
    <mutant id="mutant_1647" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="((end) - pos)" to="(((end) - pos) + 1)" />
    <mutant id="mutant_1648" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="((end) - pos)" to="(((end) - pos) * -1)" />
    <mutant id="mutant_1645" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(lastReturnedIndex) + 1" to="((lastReturnedIndex) + 1) - 1" />
    <mutant id="mutant_1646" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="((start) &lt; (lastReturnedIndex)) &amp;&amp; (pos &lt; (end))" to="!(((start) &lt; (lastReturnedIndex)) &amp;&amp; (pos &lt; (end)))" />
    <mutant id="mutant_1643" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(lastReturnedIndex) + 1" to="((lastReturnedIndex) + 1) * -1" />
    <mutant id="mutant_1644" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(lastReturnedIndex) + 1" to="((lastReturnedIndex) + 1) + 1" />
    <mutant id="mutant_844" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeMultiKey(java.lang.Object,java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2)))" />
    <mutant id="mutant_845" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeMultiKey(java.lang.Object,java.lang.Object,java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3)))" />
    <mutant id="mutant_846" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeMultiKey(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4)))" />
    <mutant id="mutant_847" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeMultiKey(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4, key5))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4, key5)))" />
    <mutant id="mutant_840" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.put(K,K,K,K,K,V)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4, key5))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4, key5)))" />
    <mutant id="mutant_841" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.put(K,K,K,K,V)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4)))" />
    <mutant id="mutant_842" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.put(K,K,K,V)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3)))" />
    <mutant id="mutant_843" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.put(K,K,V)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2)))" />
    <mutant id="mutant_848" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.containsKey(java.lang.Object,java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2)))" />
    <mutant id="mutant_849" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.containsKey(java.lang.Object,java.lang.Object,java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3)))" />
    <mutant id="mutant_1234" viable="false" in="org.apache.commons.collections4.keyvalue.MultiKey.toString()" from="&quot;MultiKey&quot; + (Arrays.toString(keys))" to="(&quot;MultiKey&quot; + (Arrays.toString(keys))) * -1" />
    <mutant id="mutant_1235" viable="false" in="org.apache.commons.collections4.keyvalue.MultiKey.toString()" from="&quot;MultiKey&quot; + (Arrays.toString(keys))" to="(&quot;MultiKey&quot; + (Arrays.toString(keys))) - 1" />
    <mutant id="mutant_1232" viable="true" in="org.apache.commons.collections4.keyvalue.AbstractMapEntry.equals(java.lang.Object)" from="((getKey()) == null ? (other.getKey()) == null : getKey().equals(other.getKey())) &amp;&amp; ((getValue()) == null ? (other.getValue()) == null : getValue().equals(other.getValue()))" to="!(((getKey()) == null ? (other.getKey()) == null : getKey().equals(other.getKey())) &amp;&amp; ((getValue()) == null ? (other.getValue()) == null : getValue().equals(other.getValue())))" />
    <mutant id="mutant_1233" viable="true" in="org.apache.commons.collections4.keyvalue.DefaultKeyValue.equals(java.lang.Object)" from="((getKey()) == null ? (other.getKey()) == null : getKey().equals(other.getKey())) &amp;&amp; ((getValue()) == null ? (other.getValue()) == null : getValue().equals(other.getValue()))" to="!(((getKey()) == null ? (other.getKey()) == null : getKey().equals(other.getKey())) &amp;&amp; ((getValue()) == null ? (other.getValue()) == null : getValue().equals(other.getValue())))" />
    <mutant id="mutant_1230" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((transformer) == null ? 0 : transformer.hashCode())" to="((total * 37) + ((transformer) == null ? 0 : transformer.hashCode())) + 1" />
    <mutant id="mutant_1231" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((transformer) == null ? 0 : transformer.hashCode())" to="((total * 37) + ((transformer) == null ? 0 : transformer.hashCode())) * -1" />
    <mutant id="mutant_1238" viable="true" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="(((getKey()) + &quot;=&quot;) + 1)" />
    <mutant id="mutant_1239" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="(((getKey()) + &quot;=&quot;) - 1)" />
    <mutant id="mutant_1236" viable="true" in="org.apache.commons.collections4.keyvalue.MultiKey.toString()" from="&quot;MultiKey&quot; + (Arrays.toString(keys))" to="(&quot;MultiKey&quot; + (Arrays.toString(keys))) + 1" />
    <mutant id="mutant_1237" viable="true" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.equals(java.lang.Object)" from="((key) == null ? (other.getKey()) == null : key.equals(other.getKey())) &amp;&amp; (value == null ? (other.getValue()) == null : value.equals(other.getValue()))" to="!(((key) == null ? (other.getKey()) == null : key.equals(other.getKey())) &amp;&amp; (value == null ? (other.getValue()) == null : value.equals(other.getValue())))" />
    <mutant id="mutant_855" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object)" from="((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1))))" to="(!((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))" />
    <mutant id="mutant_856" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object)" from="((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))" to="(!((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1))))))" />
    <mutant id="mutant_857" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object)" from="(((multi.size()) == 2) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))" to="!((((multi.size()) == 2) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1))))))" />
    <mutant id="mutant_858" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0))))" to="(!((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))" />
    <mutant id="mutant_851" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.containsKey(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4, key5))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4, key5)))" />
    <mutant id="mutant_852" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object)" from="((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0))))" to="(!((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))" />
    <mutant id="mutant_853" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object)" from="((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))" to="(!((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0))))))" />
    <mutant id="mutant_854" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object)" from="(((multi.size()) == 2) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0))))))" to="(!(((multi.size()) == 2) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))))" />
    <mutant id="mutant_859" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))" to="(!((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0))))))" />
    <mutant id="mutant_1223" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((decorated) == null ? 0 : decorated.hashCode())" to="((total * 37) + ((decorated) == null ? 0 : decorated.hashCode())) * -1" />
    <mutant id="mutant_1224" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((decorated) == null ? 0 : decorated.hashCode())" to="((total * 37) + ((decorated) == null ? 0 : decorated.hashCode())) - 1" />
    <mutant id="mutant_1221" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="((total * 37) - 1)" />
    <mutant id="mutant_1222" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="((total * 37) * -1)" />
    <mutant id="mutant_1220" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="((total * 37) + 1)" />
    <mutant id="mutant_1229" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((transformer) == null ? 0 : transformer.hashCode())" to="((total * 37) + ((transformer) == null ? 0 : transformer.hashCode())) - 1" />
    <mutant id="mutant_850" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.containsKey(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(entry, key1, key2, key3, key4)))" />
    <mutant id="mutant_1227" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="((total * 37) - 1)" />
    <mutant id="mutant_1228" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="((total * 37) * -1)" />
    <mutant id="mutant_1225" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((decorated) == null ? 0 : decorated.hashCode())" to="((total * 37) + ((decorated) == null ? 0 : decorated.hashCode())) + 1" />
    <mutant id="mutant_1226" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="((total * 37) + 1)" />
    <mutant id="mutant_866" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)" from="((((multi.size()) == 3) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))) &amp;&amp; ((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))" to="!(((((multi.size()) == 3) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))) &amp;&amp; ((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2))))))" />
    <mutant id="mutant_867" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0))))" to="(!((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))" />
    <mutant id="mutant_868" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))" to="(!((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0))))))" />
    <mutant id="mutant_869" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="(((multi.size()) == 4) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0))))))" to="(!(((multi.size()) == 4) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))))" />
    <mutant id="mutant_862" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))" to="(!((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1))))))" />
    <mutant id="mutant_863" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)" from="((((multi.size()) == 3) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1))))))" to="(!((((multi.size()) == 3) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))))" />
    <mutant id="mutant_864" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2))))" to="(!((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))" />
    <mutant id="mutant_865" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))" to="(!((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2))))))" />
    <mutant id="mutant_1212" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (isLocked ? 0 : 1)" to="((total * 37) + (isLocked ? 0 : 1)) - 1" />
    <mutant id="mutant_1696" viable="true" in="org.apache.commons.collections4.CollectionUtils.forAllDo(java.lang.Iterable,C)" from="(collection != null) &amp;&amp; (closure != null)" to="!((collection != null) &amp;&amp; (closure != null))" />
    <mutant id="mutant_1213" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (isLocked ? 0 : 1)" to="((total * 37) + (isLocked ? 0 : 1)) * -1" />
    <mutant id="mutant_1697" viable="true" in="org.apache.commons.collections4.CollectionUtils.forAllDo(java.util.Iterator,C)" from="(iterator != null) &amp;&amp; (closure != null)" to="!((iterator != null) &amp;&amp; (closure != null))" />
    <mutant id="mutant_1210" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="((total * 37) - 1)" />
    <mutant id="mutant_1694" viable="true" in="org.apache.commons.collections4.CollectionUtils.getCardinalityMap(java.lang.Iterable)" from="((c.intValue()) + 1)" to="(((c.intValue()) + 1) - 1)" />
    <mutant id="mutant_1211" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="((total * 37) * -1)" />
    <mutant id="mutant_1695" viable="true" in="org.apache.commons.collections4.CollectionUtils.getCardinalityMap(java.lang.Iterable)" from="((c.intValue()) + 1)" to="(((c.intValue()) + 1) * -1)" />
    <mutant id="mutant_1692" viable="true" in="org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)" from="(lastItem == null) || (!(lastItem.equals(item)))" to="!((lastItem == null) || (!(lastItem.equals(item))))" />
    <mutant id="mutant_1693" viable="true" in="org.apache.commons.collections4.CollectionUtils.getCardinalityMap(java.lang.Iterable)" from="((c.intValue()) + 1)" to="(((c.intValue()) + 1) + 1)" />
    <mutant id="mutant_1690" viable="true" in="org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)" from="((((Collection&lt;?&gt;)(a)).size()) + (((Collection&lt;?&gt;)(b)).size()))" to="(((((Collection&lt;?&gt;)(a)).size()) + (((Collection&lt;?&gt;)(b)).size())) + 1)" />
    <mutant id="mutant_1691" viable="true" in="org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)" from="((((Collection&lt;?&gt;)(a)).size()) + (((Collection&lt;?&gt;)(b)).size()))" to="(((((Collection&lt;?&gt;)(a)).size()) + (((Collection&lt;?&gt;)(b)).size())) * -1)" />
    <mutant id="mutant_860" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)" from="(((multi.size()) == 3) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0))))))" to="(!(((multi.size()) == 3) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))))" />
    <mutant id="mutant_1218" viable="true" in="org.apache.commons.collections4.comparators.NullComparator.hashCode()" from="(nullsAreHigh ? -1 : 1) * (nonNullComparator.hashCode())" to="((nullsAreHigh ? -1 : 1) * (nonNullComparator.hashCode())) + 1" />
    <mutant id="mutant_861" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1))))" to="(!((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))" />
    <mutant id="mutant_1219" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.equals(java.lang.Object)" from="(null == (decorated) ? null == (comp.decorated) : decorated.equals(comp.decorated)) &amp;&amp; (null == (transformer) ? null == (comp.transformer) : transformer.equals(comp.transformer))" to="!((null == (decorated) ? null == (comp.decorated) : decorated.equals(comp.decorated)) &amp;&amp; (null == (transformer) ? null == (comp.transformer) : transformer.equals(comp.transformer)))" />
    <mutant id="mutant_1216" viable="true" in="org.apache.commons.collections4.comparators.NullComparator.hashCode()" from="(nullsAreHigh ? -1 : 1) * (nonNullComparator.hashCode())" to="((nullsAreHigh ? -1 : 1) * (nonNullComparator.hashCode())) * -1" />
    <mutant id="mutant_1217" viable="true" in="org.apache.commons.collections4.comparators.NullComparator.hashCode()" from="(nullsAreHigh ? -1 : 1) * (nonNullComparator.hashCode())" to="((nullsAreHigh ? -1 : 1) * (nonNullComparator.hashCode())) - 1" />
    <mutant id="mutant_1214" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (isLocked ? 0 : 1)" to="((total * 37) + (isLocked ? 0 : 1)) + 1" />
    <mutant id="mutant_1698" viable="true" in="org.apache.commons.collections4.CollectionUtils.forAllButLastDo(java.lang.Iterable,C)" from="(collection != null) &amp;&amp; (closure != null)" to="!((collection != null) &amp;&amp; (closure != null))" />
    <mutant id="mutant_1215" viable="true" in="org.apache.commons.collections4.comparators.NullComparator.equals(java.lang.Object)" from="((this.nullsAreHigh) == (other.nullsAreHigh)) &amp;&amp; (this.nonNullComparator.equals(other.nonNullComparator))" to="!(((this.nullsAreHigh) == (other.nullsAreHigh)) &amp;&amp; (this.nonNullComparator.equals(other.nonNullComparator)))" />
    <mutant id="mutant_1699" viable="true" in="org.apache.commons.collections4.CollectionUtils.forAllButLastDo(java.util.Iterator,C)" from="(iterator != null) &amp;&amp; (closure != null)" to="!((iterator != null) &amp;&amp; (closure != null))" />
    <mutant id="mutant_877" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key4 == (multi.getKey(3))) || ((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3)))))" to="(!((key4 == (multi.getKey(3))) || ((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3))))))" />
    <mutant id="mutant_878" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="(((((multi.size()) == 4) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))) &amp;&amp; ((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))) &amp;&amp; ((key4 == (multi.getKey(3))) || ((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3)))))" to="!((((((multi.size()) == 4) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))) &amp;&amp; ((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))) &amp;&amp; ((key4 == (multi.getKey(3))) || ((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3))))))" />
    <mutant id="mutant_879" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0))))" to="(!((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))" />
    <mutant id="mutant_873" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2))))" to="(!((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))" />
    <mutant id="mutant_874" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))" to="(!((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2))))))" />
    <mutant id="mutant_875" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="(((((multi.size()) == 4) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))) &amp;&amp; ((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2))))))" to="(!(((((multi.size()) == 4) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))) &amp;&amp; ((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))))" />
    <mutant id="mutant_876" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3))))" to="(!((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3)))))" />
    <mutant id="mutant_1201" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())" to="((total * 37) + ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())) * -1" />
    <mutant id="mutant_1685" viable="true" in="org.apache.commons.collections4.CollectionUtils.disjunction(java.lang.Iterable,java.lang.Iterable)" from="((helper.max(obj)) - (helper.min(obj)))" to="(((helper.max(obj)) - (helper.min(obj))) - 1)" />
    <mutant id="mutant_1202" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())" to="((total * 37) + ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())) - 1" />
    <mutant id="mutant_1686" viable="true" in="org.apache.commons.collections4.CollectionUtils.disjunction(java.lang.Iterable,java.lang.Iterable)" from="((helper.max(obj)) - (helper.min(obj)))" to="(((helper.max(obj)) - (helper.min(obj))) + 1)" />
    <mutant id="mutant_1683" viable="true" in="org.apache.commons.collections4.CollectionUtils.selectRejected(java.lang.Iterable,org.apache.commons.collections4.Predicate,R)" from="(inputCollection != null) &amp;&amp; (predicate != null)" to="!((inputCollection != null) &amp;&amp; (predicate != null))" />
    <mutant id="mutant_1200" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())" to="((total * 37) + ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())) + 1" />
    <mutant id="mutant_1684" viable="true" in="org.apache.commons.collections4.CollectionUtils.disjunction(java.lang.Iterable,java.lang.Iterable)" from="((helper.max(obj)) - (helper.min(obj)))" to="(((helper.max(obj)) - (helper.min(obj))) * -1)" />
    <mutant id="mutant_1681" viable="true" in="org.apache.commons.collections4.CollectionUtils.collect(java.util.Iterator,org.apache.commons.collections4.Transformer,R)" from="(inputIterator != null) &amp;&amp; (transformer != null)" to="!((inputIterator != null) &amp;&amp; (transformer != null))" />
    <mutant id="mutant_1682" viable="true" in="org.apache.commons.collections4.CollectionUtils.select(java.lang.Iterable,org.apache.commons.collections4.Predicate,R)" from="(inputCollection != null) &amp;&amp; (predicate != null)" to="!((inputCollection != null) &amp;&amp; (predicate != null))" />
    <mutant id="mutant_1680" viable="true" in="org.apache.commons.collections4.CollectionUtils.extractSingleton(java.util.Collection)" from="(collection == null) || ((collection.size()) != 1)" to="!((collection == null) || ((collection.size()) != 1))" />
    <mutant id="mutant_1209" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="((total * 37) + 1)" />
    <mutant id="mutant_870" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1))))" to="(!((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))" />
    <mutant id="mutant_871" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))" to="(!((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1))))))" />
    <mutant id="mutant_1207" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (counter)" to="((total * 37) + (counter)) + 1" />
    <mutant id="mutant_872" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((((multi.size()) == 4) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1))))))" to="(!((((multi.size()) == 4) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))))" />
    <mutant id="mutant_1208" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (counter)" to="((total * 37) + (counter)) * -1" />
    <mutant id="mutant_1205" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="((total * 37) * -1)" />
    <mutant id="mutant_1689" viable="true" in="org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)" from="((((Collection&lt;?&gt;)(a)).size()) + (((Collection&lt;?&gt;)(b)).size()))" to="(((((Collection&lt;?&gt;)(a)).size()) + (((Collection&lt;?&gt;)(b)).size())) - 1)" />
    <mutant id="mutant_1206" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (counter)" to="((total * 37) + (counter)) - 1" />
    <mutant id="mutant_1203" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="((total * 37) + 1)" />
    <mutant id="mutant_1687" viable="true" in="org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)" from="(a == null) || (b == null)" to="!((a == null) || (b == null))" />
    <mutant id="mutant_1204" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="((total * 37) - 1)" />
    <mutant id="mutant_1688" viable="true" in="org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)" from="(a instanceof java.util.Collection&lt;?&gt;) &amp;&amp; (b instanceof java.util.Collection&lt;?&gt;)" to="!((a instanceof java.util.Collection&lt;?&gt;) &amp;&amp; (b instanceof java.util.Collection&lt;?&gt;))" />
    <mutant id="mutant_404" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) + &quot;\' rejected it&quot;)" to="(((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) + &quot;\' rejected it&quot;) - 1)" />
    <mutant id="mutant_888" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3))))" to="(!((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3)))))" />
    <mutant id="mutant_405" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) + &quot;\' rejected it&quot;)" to="(((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) + &quot;\' rejected it&quot;) * -1)" />
    <mutant id="mutant_889" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key4 == (multi.getKey(3))) || ((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3)))))" to="(!((key4 == (multi.getKey(3))) || ((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3))))))" />
    <mutant id="mutant_406" viable="true" in="org.apache.commons.collections4.collection.SynchronizedCollection.equals(java.lang.Object)" from="(object == (this)) || (decorated().equals(object))" to="!((object == (this)) || (decorated().equals(object)))" />
    <mutant id="mutant_407" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$EntrySet.contains(java.lang.Object)" from="(match != null) &amp;&amp; (match.equals(e))" to="!((match != null) &amp;&amp; (match.equals(e)))" />
    <mutant id="mutant_400" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate))" to="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) * -1)" />
    <mutant id="mutant_884" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((((multi.size()) == 5) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1))))))" to="(!((((multi.size()) == 5) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))))" />
    <mutant id="mutant_401" viable="true" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate))" to="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) + 1)" />
    <mutant id="mutant_885" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2))))" to="(!((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))" />
    <mutant id="mutant_402" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate))" to="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) - 1)" />
    <mutant id="mutant_886" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))" to="(!((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2))))))" />
    <mutant id="mutant_403" viable="true" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) + &quot;\' rejected it&quot;)" to="(((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) + &quot;\' rejected it&quot;) + 1)" />
    <mutant id="mutant_887" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="(((((multi.size()) == 5) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))) &amp;&amp; ((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2))))))" to="(!(((((multi.size()) == 5) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))) &amp;&amp; ((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))))" />
    <mutant id="mutant_1281" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="offsetInBits / (StringKeyAnalyzer.LENGTH)" to="(offsetInBits / (StringKeyAnalyzer.LENGTH)) + 1" />
    <mutant id="mutant_1282" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="otherOffsetInBits / (StringKeyAnalyzer.LENGTH)" to="(otherOffsetInBits / (StringKeyAnalyzer.LENGTH)) * -1" />
    <mutant id="mutant_1280" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="offsetInBits / (StringKeyAnalyzer.LENGTH)" to="(offsetInBits / (StringKeyAnalyzer.LENGTH)) - 1" />
    <mutant id="mutant_408" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.equals(java.lang.Object)" from="((getKey()) == null ? (other.getKey()) == null : getKey().equals(other.getKey())) &amp;&amp; ((getValue()) == null ? (other.getValue()) == null : getValue().equals(other.getValue()))" to="!(((getKey()) == null ? (other.getKey()) == null : getKey().equals(other.getKey())) &amp;&amp; ((getValue()) == null ? (other.getValue()) == null : getValue().equals(other.getValue())))" />
    <mutant id="mutant_409" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)" from="(i &gt; 0) &amp;&amp; (next == null)" to="!((i &gt; 0) &amp;&amp; (next == null))" />
    <mutant id="mutant_1278" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((((offsetInBits % (StringKeyAnalyzer.LENGTH)) != 0) || ((otherOffsetInBits % (StringKeyAnalyzer.LENGTH)) != 0)) || ((lengthInBits % (StringKeyAnalyzer.LENGTH)) != 0)) || ((otherLengthInBits % (StringKeyAnalyzer.LENGTH)) != 0)" to="!(((((offsetInBits % (StringKeyAnalyzer.LENGTH)) != 0) || ((otherOffsetInBits % (StringKeyAnalyzer.LENGTH)) != 0)) || ((lengthInBits % (StringKeyAnalyzer.LENGTH)) != 0)) || ((otherLengthInBits % (StringKeyAnalyzer.LENGTH)) != 0))" />
    <mutant id="mutant_1279" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="offsetInBits / (StringKeyAnalyzer.LENGTH)" to="(offsetInBits / (StringKeyAnalyzer.LENGTH)) * -1" />
    <mutant id="mutant_1276" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits % (StringKeyAnalyzer.LENGTH))" to="((otherLengthInBits % (StringKeyAnalyzer.LENGTH)) + 1)" />
    <mutant id="mutant_1277" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits % (StringKeyAnalyzer.LENGTH))" to="((otherLengthInBits % (StringKeyAnalyzer.LENGTH)) * -1)" />
    <mutant id="mutant_1274" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((((offsetInBits % (StringKeyAnalyzer.LENGTH)) != 0) || ((otherOffsetInBits % (StringKeyAnalyzer.LENGTH)) != 0)) || ((lengthInBits % (StringKeyAnalyzer.LENGTH)) != 0))" to="(!((((offsetInBits % (StringKeyAnalyzer.LENGTH)) != 0) || ((otherOffsetInBits % (StringKeyAnalyzer.LENGTH)) != 0)) || ((lengthInBits % (StringKeyAnalyzer.LENGTH)) != 0)))" />
    <mutant id="mutant_1275" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits % (StringKeyAnalyzer.LENGTH))" to="((otherLengthInBits % (StringKeyAnalyzer.LENGTH)) - 1)" />
    <mutant id="mutant_1272" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="((lengthInBits % (StringKeyAnalyzer.LENGTH)) + 1)" />
    <mutant id="mutant_1273" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="((lengthInBits % (StringKeyAnalyzer.LENGTH)) - 1)" />
    <mutant id="mutant_880" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))" to="(!((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0))))))" />
    <mutant id="mutant_881" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="(((multi.size()) == 5) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0))))))" to="(!(((multi.size()) == 5) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))))" />
    <mutant id="mutant_882" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1))))" to="(!((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))" />
    <mutant id="mutant_883" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))" to="(!((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1))))))" />
    <mutant id="mutant_415" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) - 1)" />
    <mutant id="mutant_899" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeAll(java.lang.Object,java.lang.Object,java.lang.Object)" from="((((multi.size()) &gt;= 3) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) &amp;&amp; (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1)))) &amp;&amp; (key3 == null ? (multi.getKey(2)) == null : key3.equals(multi.getKey(2)))" to="!(((((multi.size()) &gt;= 3) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) &amp;&amp; (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1)))) &amp;&amp; (key3 == null ? (multi.getKey(2)) == null : key3.equals(multi.getKey(2))))" />
    <mutant id="mutant_416" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="((((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + 1)" />
    <mutant id="mutant_417" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="((((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) * -1)" />
    <mutant id="mutant_418" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="((((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) - 1)" />
    <mutant id="mutant_411" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="((&quot;Iterator[&quot; + (last.getKey())) - 1)" />
    <mutant id="mutant_895" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeAll(java.lang.Object,java.lang.Object)" from="(((multi.size()) &gt;= 2) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0))))" to="(!(((multi.size()) &gt;= 2) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))))" />
    <mutant id="mutant_412" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="((&quot;Iterator[&quot; + (last.getKey())) + 1)" />
    <mutant id="mutant_896" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeAll(java.lang.Object,java.lang.Object)" from="(((multi.size()) &gt;= 2) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) &amp;&amp; (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1)))" to="!((((multi.size()) &gt;= 2) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) &amp;&amp; (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1))))" />
    <mutant id="mutant_413" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + 1)" />
    <mutant id="mutant_897" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeAll(java.lang.Object,java.lang.Object,java.lang.Object)" from="(((multi.size()) &gt;= 3) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0))))" to="(!(((multi.size()) &gt;= 3) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))))" />
    <mutant id="mutant_414" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) * -1)" />
    <mutant id="mutant_898" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeAll(java.lang.Object,java.lang.Object,java.lang.Object)" from="((((multi.size()) &gt;= 3) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) &amp;&amp; (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1))))" to="(!((((multi.size()) &gt;= 3) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) &amp;&amp; (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1)))))" />
    <mutant id="mutant_1270" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(((offsetInBits % (StringKeyAnalyzer.LENGTH)) != 0) || ((otherOffsetInBits % (StringKeyAnalyzer.LENGTH)) != 0))" to="(!(((offsetInBits % (StringKeyAnalyzer.LENGTH)) != 0) || ((otherOffsetInBits % (StringKeyAnalyzer.LENGTH)) != 0)))" />
    <mutant id="mutant_1271" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="((lengthInBits % (StringKeyAnalyzer.LENGTH)) * -1)" />
    <mutant id="mutant_419" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_1267" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherOffsetInBits % (StringKeyAnalyzer.LENGTH))" to="((otherOffsetInBits % (StringKeyAnalyzer.LENGTH)) - 1)" />
    <mutant id="mutant_1268" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherOffsetInBits % (StringKeyAnalyzer.LENGTH))" to="((otherOffsetInBits % (StringKeyAnalyzer.LENGTH)) + 1)" />
    <mutant id="mutant_1265" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="((offsetInBits % (StringKeyAnalyzer.LENGTH)) * -1)" />
    <mutant id="mutant_1266" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="((offsetInBits % (StringKeyAnalyzer.LENGTH)) + 1)" />
    <mutant id="mutant_1263" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="((lengthInBits / (StringKeyAnalyzer.LENGTH)) - 1)" />
    <mutant id="mutant_1264" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="((offsetInBits % (StringKeyAnalyzer.LENGTH)) - 1)" />
    <mutant id="mutant_1261" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="((lengthInBits / (StringKeyAnalyzer.LENGTH)) + 1)" />
    <mutant id="mutant_1262" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="((lengthInBits / (StringKeyAnalyzer.LENGTH)) * -1)" />
    <mutant id="mutant_891" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key5 != null) &amp;&amp; (key5.equals(multi.getKey(4))))" to="(!((key5 != null) &amp;&amp; (key5.equals(multi.getKey(4)))))" />
    <mutant id="mutant_892" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((key5 == (multi.getKey(4))) || ((key5 != null) &amp;&amp; (key5.equals(multi.getKey(4)))))" to="(!((key5 == (multi.getKey(4))) || ((key5 != null) &amp;&amp; (key5.equals(multi.getKey(4))))))" />
    <mutant id="mutant_893" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((((((multi.size()) == 5) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))) &amp;&amp; ((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))) &amp;&amp; ((key4 == (multi.getKey(3))) || ((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3)))))) &amp;&amp; ((key5 == (multi.getKey(4))) || ((key5 != null) &amp;&amp; (key5.equals(multi.getKey(4)))))" to="!(((((((multi.size()) == 5) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))) &amp;&amp; ((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))) &amp;&amp; ((key4 == (multi.getKey(3))) || ((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3)))))) &amp;&amp; ((key5 == (multi.getKey(4))) || ((key5 != null) &amp;&amp; (key5.equals(multi.getKey(4))))))" />
    <mutant id="mutant_410" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="((&quot;Iterator[&quot; + (last.getKey())) * -1)" />
    <mutant id="mutant_894" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.removeAll(java.lang.Object)" from="((multi.size()) &gt;= 1) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))" to="!(((multi.size()) &gt;= 1) &amp;&amp; (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0))))" />
    <mutant id="mutant_1269" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherOffsetInBits % (StringKeyAnalyzer.LENGTH))" to="((otherOffsetInBits % (StringKeyAnalyzer.LENGTH)) * -1)" />
    <mutant id="mutant_890" viable="true" in="org.apache.commons.collections4.map.MultiKeyMap.isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" from="((((((multi.size()) == 5) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))) &amp;&amp; ((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))) &amp;&amp; ((key4 == (multi.getKey(3))) || ((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3))))))" to="(!((((((multi.size()) == 5) &amp;&amp; ((key1 == (multi.getKey(0))) || ((key1 != null) &amp;&amp; (key1.equals(multi.getKey(0)))))) &amp;&amp; ((key2 == (multi.getKey(1))) || ((key2 != null) &amp;&amp; (key2.equals(multi.getKey(1)))))) &amp;&amp; ((key3 == (multi.getKey(2))) || ((key3 != null) &amp;&amp; (key3.equals(multi.getKey(2)))))) &amp;&amp; ((key4 == (multi.getKey(3))) || ((key4 != null) &amp;&amp; (key4.equals(multi.getKey(3)))))))" />
    <mutant id="mutant_426" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap(java.util.Map)" from="(2 * (map.size()))" to="((2 * (map.size())) * -1)" />
    <mutant id="mutant_427" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.get(java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(key, entry.key))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(key, entry.key)))" />
    <mutant id="mutant_428" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.put(K,V)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(convertedKey, entry.key))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(convertedKey, entry.key)))" />
    <mutant id="mutant_429" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.remove(java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(key, entry.key))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(key, entry.key)))" />
    <mutant id="mutant_422" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.nextEntry()" from="(n == null) &amp;&amp; (i &gt; 0)" to="!((n == null) &amp;&amp; (i &gt; 0))" />
    <mutant id="mutant_423" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap(int,float)" from="(loadFactor &lt;= 0.0F) || (Float.isNaN(loadFactor))" to="!((loadFactor &lt;= 0.0F) || (Float.isNaN(loadFactor)))" />
    <mutant id="mutant_424" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap(java.util.Map)" from="(2 * (map.size()))" to="((2 * (map.size())) + 1)" />
    <mutant id="mutant_425" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap(java.util.Map)" from="(2 * (map.size()))" to="((2 * (map.size())) - 1)" />
    <mutant id="mutant_1260" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits / (StringKeyAnalyzer.LENGTH))" to="((offsetInBits / (StringKeyAnalyzer.LENGTH)) + 1)" />
    <mutant id="mutant_1256" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="((lengthInBits % (StringKeyAnalyzer.LENGTH)) - 1)" />
    <mutant id="mutant_1257" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="((offsetInBits % (StringKeyAnalyzer.LENGTH)) != 0) || ((lengthInBits % (StringKeyAnalyzer.LENGTH)) != 0)" to="!(((offsetInBits % (StringKeyAnalyzer.LENGTH)) != 0) || ((lengthInBits % (StringKeyAnalyzer.LENGTH)) != 0))" />
    <mutant id="mutant_1254" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="((lengthInBits % (StringKeyAnalyzer.LENGTH)) * -1)" />
    <mutant id="mutant_1255" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="((lengthInBits % (StringKeyAnalyzer.LENGTH)) + 1)" />
    <mutant id="mutant_1252" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="((offsetInBits % (StringKeyAnalyzer.LENGTH)) * -1)" />
    <mutant id="mutant_1253" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="((offsetInBits % (StringKeyAnalyzer.LENGTH)) + 1)" />
    <mutant id="mutant_1250" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex % (StringKeyAnalyzer.LENGTH)" to="(bitIndex % (StringKeyAnalyzer.LENGTH)) * -1" />
    <mutant id="mutant_1251" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="((offsetInBits % (StringKeyAnalyzer.LENGTH)) - 1)" />
    <mutant id="mutant_420" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_421" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_1258" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits / (StringKeyAnalyzer.LENGTH))" to="((offsetInBits / (StringKeyAnalyzer.LENGTH)) * -1)" />
    <mutant id="mutant_1259" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits / (StringKeyAnalyzer.LENGTH))" to="((offsetInBits / (StringKeyAnalyzer.LENGTH)) - 1)" />
    <mutant id="mutant_437" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.hashIndex(int,int)" from="(dataSize - 1)" to="((dataSize - 1) * -1)" />
    <mutant id="mutant_438" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.hashIndex(int,int)" from="(dataSize - 1)" to="((dataSize - 1) - 1)" />
    <mutant id="mutant_439" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.hashIndex(int,int)" from="(dataSize - 1)" to="((dataSize - 1) + 1)" />
    <mutant id="mutant_433" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.isEqualValue(java.lang.Object,java.lang.Object)" from="(value1 == value2) || (value1.equals(value2))" to="!((value1 == value2) || (value1.equals(value2)))" />
    <mutant id="mutant_434" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.calculateThreshold(int,float)" from="((int)(newCapacity * factor))" to="((int)((newCapacity * factor))) - 1" />
    <mutant id="mutant_435" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.calculateThreshold(int,float)" from="((int)(newCapacity * factor))" to="((int)((newCapacity * factor))) * -1" />
    <mutant id="mutant_436" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.calculateThreshold(int,float)" from="((int)(newCapacity * factor))" to="((int)((newCapacity * factor))) + 1" />
    <mutant id="mutant_1245" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex / (StringKeyAnalyzer.LENGTH)" to="(bitIndex / (StringKeyAnalyzer.LENGTH)) - 1" />
    <mutant id="mutant_1246" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex / (StringKeyAnalyzer.LENGTH)" to="(bitIndex / (StringKeyAnalyzer.LENGTH)) + 1" />
    <mutant id="mutant_1243" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="(((getKey()) + &quot;=&quot;) + (getValue())) * -1" />
    <mutant id="mutant_1244" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="(key == null) || (bitIndex &gt;= lengthInBits)" to="!((key == null) || (bitIndex &gt;= lengthInBits))" />
    <mutant id="mutant_1241" viable="true" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="(((getKey()) + &quot;=&quot;) + (getValue())) + 1" />
    <mutant id="mutant_1242" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="(((getKey()) + &quot;=&quot;) + (getValue())) - 1" />
    <mutant id="mutant_1240" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="(((getKey()) + &quot;=&quot;) * -1)" />
    <mutant id="mutant_430" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.containsKey(java.lang.Object)" from="((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(key, entry.key))" to="!(((entry.hashCode) == hashCode) &amp;&amp; (isEqualKey(key, entry.key)))" />
    <mutant id="mutant_431" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.equals(java.lang.Object)" from="((map.get(key)) != null) || ((map.containsKey(key)) == false)" to="!(((map.get(key)) != null) || ((map.containsKey(key)) == false))" />
    <mutant id="mutant_432" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.isEqualKey(java.lang.Object,java.lang.Object)" from="(key1 == key2) || (key1.equals(key2))" to="!((key1 == key2) || (key1.equals(key2)))" />
    <mutant id="mutant_1249" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex % (StringKeyAnalyzer.LENGTH)" to="(bitIndex % (StringKeyAnalyzer.LENGTH)) + 1" />
    <mutant id="mutant_1247" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex / (StringKeyAnalyzer.LENGTH)" to="(bitIndex / (StringKeyAnalyzer.LENGTH)) * -1" />
    <mutant id="mutant_1248" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex % (StringKeyAnalyzer.LENGTH)" to="(bitIndex % (StringKeyAnalyzer.LENGTH)) - 1" />
    <mutant id="mutant_327" viable="true" in="org.apache.commons.collections4.functors.InstantiateFactory.instantiateFactory(java.lang.Class,java.lang.Class[],java.lang.Object[])" from="(((paramTypes == null) &amp;&amp; (args != null)) || ((paramTypes != null) &amp;&amp; (args == null)))" to="(!(((paramTypes == null) &amp;&amp; (args != null)) || ((paramTypes != null) &amp;&amp; (args == null))))" />
    <mutant id="mutant_328" viable="true" in="org.apache.commons.collections4.functors.InstantiateFactory.instantiateFactory(java.lang.Class,java.lang.Class[],java.lang.Object[])" from="((paramTypes != null) &amp;&amp; (args != null))" to="(!((paramTypes != null) &amp;&amp; (args != null)))" />
    <mutant id="mutant_329" viable="true" in="org.apache.commons.collections4.functors.InstantiateFactory.instantiateFactory(java.lang.Class,java.lang.Class[],java.lang.Object[])" from="(((paramTypes != null) &amp;&amp; (args != null)) &amp;&amp; ((paramTypes.length) != (args.length)))" to="(!(((paramTypes != null) &amp;&amp; (args != null)) &amp;&amp; ((paramTypes.length) != (args.length))))" />
    <mutant id="mutant_323" viable="true" in="org.apache.commons.collections4.functors.IfClosure.ifClosure(org.apache.commons.collections4.Predicate,org.apache.commons.collections4.Closure,org.apache.commons.collections4.Closure)" from="(trueClosure == null) || (falseClosure == null)" to="!((trueClosure == null) || (falseClosure == null))" />
    <mutant id="mutant_324" viable="true" in="org.apache.commons.collections4.functors.IfTransformer.ifTransformer(org.apache.commons.collections4.Predicate,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)" from="(trueTransformer == null) || (falseTransformer == null)" to="!((trueTransformer == null) || (falseTransformer == null))" />
    <mutant id="mutant_325" viable="true" in="org.apache.commons.collections4.functors.InstantiateFactory.instantiateFactory(java.lang.Class,java.lang.Class[],java.lang.Object[])" from="((paramTypes == null) &amp;&amp; (args != null))" to="(!((paramTypes == null) &amp;&amp; (args != null)))" />
    <mutant id="mutant_326" viable="true" in="org.apache.commons.collections4.functors.InstantiateFactory.instantiateFactory(java.lang.Class,java.lang.Class[],java.lang.Object[])" from="((paramTypes != null) &amp;&amp; (args == null))" to="(!((paramTypes != null) &amp;&amp; (args == null)))" />
    <mutant id="mutant_1083" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="((indexOfLargestMobileInteger + offset) * -1)" />
    <mutant id="mutant_1084" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="((indexOfLargestMobileInteger + offset) + 1)" />
    <mutant id="mutant_1081" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="((indexOfLargestMobileInteger + offset) + 1)" />
    <mutant id="mutant_1082" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="((indexOfLargestMobileInteger + offset) - 1)" />
    <mutant id="mutant_1080" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="((indexOfLargestMobileInteger + offset) * -1)" />
    <mutant id="mutant_1078" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="((indexOfLargestMobileInteger + offset) + 1)" />
    <mutant id="mutant_1079" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="((indexOfLargestMobileInteger + offset) - 1)" />
    <mutant id="mutant_1076" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="((indexOfLargestMobileInteger + offset) - 1)" />
    <mutant id="mutant_1077" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="((indexOfLargestMobileInteger + offset) * -1)" />
    <mutant id="mutant_1074" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="((indexOfLargestMobileInteger + offset) * -1)" />
    <mutant id="mutant_1075" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="((indexOfLargestMobileInteger + offset) + 1)" />
    <mutant id="mutant_320" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="((&quot;The transformer array must not contain a null transformer, index &quot; + i) + &quot; was null&quot;)" to="(((&quot;The transformer array must not contain a null transformer, index &quot; + i) + &quot; was null&quot;) * -1)" />
    <mutant id="mutant_321" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="((&quot;The transformer array must not contain a null transformer, index &quot; + i) + &quot; was null&quot;)" to="(((&quot;The transformer array must not contain a null transformer, index &quot; + i) + &quot; was null&quot;) - 1)" />
    <mutant id="mutant_322" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="((&quot;The transformer array must not contain a null transformer, index &quot; + i) + &quot; was null&quot;)" to="(((&quot;The transformer array must not contain a null transformer, index &quot; + i) + &quot; was null&quot;) + 1)" />
    <mutant id="mutant_338" viable="true" in="org.apache.commons.collections4.functors.InstantiateTransformer.instantiateTransformer(java.lang.Class[],java.lang.Object[])" from="(paramTypes == null) || ((paramTypes.length) == 0)" to="!((paramTypes == null) || ((paramTypes.length) == 0))" />
    <mutant id="mutant_339" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.invokerTransformer(java.lang.String,java.lang.Class[],java.lang.Object[])" from="((paramTypes == null) &amp;&amp; (args != null))" to="(!((paramTypes == null) &amp;&amp; (args != null)))" />
    <mutant id="mutant_334" viable="true" in="org.apache.commons.collections4.functors.InstantiateTransformer.instantiateTransformer(java.lang.Class[],java.lang.Object[])" from="(((paramTypes == null) &amp;&amp; (args != null)) || ((paramTypes != null) &amp;&amp; (args == null)))" to="(!(((paramTypes == null) &amp;&amp; (args != null)) || ((paramTypes != null) &amp;&amp; (args == null))))" />
    <mutant id="mutant_335" viable="true" in="org.apache.commons.collections4.functors.InstantiateTransformer.instantiateTransformer(java.lang.Class[],java.lang.Object[])" from="((paramTypes != null) &amp;&amp; (args != null))" to="(!((paramTypes != null) &amp;&amp; (args != null)))" />
    <mutant id="mutant_336" viable="true" in="org.apache.commons.collections4.functors.InstantiateTransformer.instantiateTransformer(java.lang.Class[],java.lang.Object[])" from="(((paramTypes != null) &amp;&amp; (args != null)) &amp;&amp; ((paramTypes.length) != (args.length)))" to="(!(((paramTypes != null) &amp;&amp; (args != null)) &amp;&amp; ((paramTypes.length) != (args.length))))" />
    <mutant id="mutant_337" viable="true" in="org.apache.commons.collections4.functors.InstantiateTransformer.instantiateTransformer(java.lang.Class[],java.lang.Object[])" from="(((paramTypes == null) &amp;&amp; (args != null)) || ((paramTypes != null) &amp;&amp; (args == null))) || (((paramTypes != null) &amp;&amp; (args != null)) &amp;&amp; ((paramTypes.length) != (args.length)))" to="!((((paramTypes == null) &amp;&amp; (args != null)) || ((paramTypes != null) &amp;&amp; (args == null))) || (((paramTypes != null) &amp;&amp; (args != null)) &amp;&amp; ((paramTypes.length) != (args.length))))" />
    <mutant id="mutant_1072" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(((!(direction[i])) &amp;&amp; (i &gt; 0)) &amp;&amp; ((keys[i]) &gt; (keys[(i - 1)])))" to="(!(((!(direction[i])) &amp;&amp; (i &gt; 0)) &amp;&amp; ((keys[i]) &gt; (keys[(i - 1)]))))" />
    <mutant id="mutant_1073" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(((direction[i]) &amp;&amp; (i &lt; ((keys.length) - 1))) &amp;&amp; ((keys[i]) &gt; (keys[(i + 1)]))) || (((!(direction[i])) &amp;&amp; (i &gt; 0)) &amp;&amp; ((keys[i]) &gt; (keys[(i - 1)])))" to="!((((direction[i]) &amp;&amp; (i &lt; ((keys.length) - 1))) &amp;&amp; ((keys[i]) &gt; (keys[(i + 1)]))) || (((!(direction[i])) &amp;&amp; (i &gt; 0)) &amp;&amp; ((keys[i]) &gt; (keys[(i - 1)]))))" />
    <mutant id="mutant_1070" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_1071" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_1069" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_1067" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(((direction[i]) &amp;&amp; (i &lt; ((keys.length) - 1))) &amp;&amp; ((keys[i]) &gt; (keys[(i + 1)])))" to="(!(((direction[i]) &amp;&amp; (i &lt; ((keys.length) - 1))) &amp;&amp; ((keys[i]) &gt; (keys[(i + 1)]))))" />
    <mutant id="mutant_1068" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="((!(direction[i])) &amp;&amp; (i &gt; 0))" to="(!((!(direction[i])) &amp;&amp; (i &gt; 0)))" />
    <mutant id="mutant_1065" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_1066" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_1063" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="((direction[i]) &amp;&amp; (i &lt; ((keys.length) - 1)))" to="(!((direction[i]) &amp;&amp; (i &lt; ((keys.length) - 1))))" />
    <mutant id="mutant_1064" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_330" viable="true" in="org.apache.commons.collections4.functors.InstantiateFactory.instantiateFactory(java.lang.Class,java.lang.Class[],java.lang.Object[])" from="(((paramTypes == null) &amp;&amp; (args != null)) || ((paramTypes != null) &amp;&amp; (args == null))) || (((paramTypes != null) &amp;&amp; (args != null)) &amp;&amp; ((paramTypes.length) != (args.length)))" to="!((((paramTypes == null) &amp;&amp; (args != null)) || ((paramTypes != null) &amp;&amp; (args == null))) || (((paramTypes != null) &amp;&amp; (args != null)) &amp;&amp; ((paramTypes.length) != (args.length))))" />
    <mutant id="mutant_331" viable="true" in="org.apache.commons.collections4.functors.InstantiateFactory.instantiateFactory(java.lang.Class,java.lang.Class[],java.lang.Object[])" from="(paramTypes == null) || ((paramTypes.length) == 0)" to="!((paramTypes == null) || ((paramTypes.length) == 0))" />
    <mutant id="mutant_332" viable="true" in="org.apache.commons.collections4.functors.InstantiateTransformer.instantiateTransformer(java.lang.Class[],java.lang.Object[])" from="((paramTypes == null) &amp;&amp; (args != null))" to="(!((paramTypes == null) &amp;&amp; (args != null)))" />
    <mutant id="mutant_333" viable="true" in="org.apache.commons.collections4.functors.InstantiateTransformer.instantiateTransformer(java.lang.Class[],java.lang.Object[])" from="((paramTypes != null) &amp;&amp; (args == null))" to="(!((paramTypes != null) &amp;&amp; (args == null)))" />
    <mutant id="mutant_349" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) * -1)" />
    <mutant id="mutant_345" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.invokerTransformer(java.lang.String,java.lang.Class[],java.lang.Object[])" from="(paramTypes == null) || ((paramTypes.length) == 0)" to="!((paramTypes == null) || ((paramTypes.length) == 0))" />
    <mutant id="mutant_346" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) * -1)" />
    <mutant id="mutant_347" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + 1)" />
    <mutant id="mutant_348" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) - 1)" />
    <mutant id="mutant_1061" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="((keys.length) - 1)" to="(((keys.length) - 1) - 1)" />
    <mutant id="mutant_1062" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="((keys.length) - 1)" to="(((keys.length) - 1) + 1)" />
    <mutant id="mutant_1060" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="((keys.length) - 1)" to="(((keys.length) - 1) * -1)" />
    <mutant id="mutant_1058" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator(java.util.Collection)" from="(value - 1)" to="((value - 1) + 1)" />
    <mutant id="mutant_1059" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator(java.util.Collection)" from="(value - 1)" to="((value - 1) - 1)" />
    <mutant id="mutant_1056" viable="true" in="org.apache.commons.collections4.iterators.PeekingIterator.fill()" from="(exhausted) || (slotFilled)" to="!((exhausted) || (slotFilled))" />
    <mutant id="mutant_1057" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator(java.util.Collection)" from="(value - 1)" to="((value - 1) * -1)" />
    <mutant id="mutant_1054" viable="true" in="org.apache.commons.collections4.iterators.ObjectGraphIterator.findNextByIterator(java.util.Iterator)" from="(currentIterator.hasNext()) &amp;&amp; ((hasNext) == false)" to="!((currentIterator.hasNext()) &amp;&amp; ((hasNext) == false))" />
    <mutant id="mutant_1055" viable="true" in="org.apache.commons.collections4.iterators.ObjectGraphIterator.findNextByIterator(java.util.Iterator)" from="(!(hasNext)) &amp;&amp; (!(stack.isEmpty()))" to="!((!(hasNext)) &amp;&amp; (!(stack.isEmpty())))" />
    <mutant id="mutant_1052" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex())) - 1" to="(((this.index) - (getStartIndex())) - 1) + 1" />
    <mutant id="mutant_1053" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex())) - 1" to="(((this.index) - (getStartIndex())) - 1) * -1" />
    <mutant id="mutant_341" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.invokerTransformer(java.lang.String,java.lang.Class[],java.lang.Object[])" from="(((paramTypes == null) &amp;&amp; (args != null)) || ((paramTypes != null) &amp;&amp; (args == null)))" to="(!(((paramTypes == null) &amp;&amp; (args != null)) || ((paramTypes != null) &amp;&amp; (args == null))))" />
    <mutant id="mutant_342" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.invokerTransformer(java.lang.String,java.lang.Class[],java.lang.Object[])" from="((paramTypes != null) &amp;&amp; (args != null))" to="(!((paramTypes != null) &amp;&amp; (args != null)))" />
    <mutant id="mutant_343" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.invokerTransformer(java.lang.String,java.lang.Class[],java.lang.Object[])" from="(((paramTypes != null) &amp;&amp; (args != null)) &amp;&amp; ((paramTypes.length) != (args.length)))" to="(!(((paramTypes != null) &amp;&amp; (args != null)) &amp;&amp; ((paramTypes.length) != (args.length))))" />
    <mutant id="mutant_344" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.invokerTransformer(java.lang.String,java.lang.Class[],java.lang.Object[])" from="(((paramTypes == null) &amp;&amp; (args != null)) || ((paramTypes != null) &amp;&amp; (args == null))) || (((paramTypes != null) &amp;&amp; (args != null)) &amp;&amp; ((paramTypes.length) != (args.length)))" to="!((((paramTypes == null) &amp;&amp; (args != null)) || ((paramTypes != null) &amp;&amp; (args == null))) || (((paramTypes != null) &amp;&amp; (args != null)) &amp;&amp; ((paramTypes.length) != (args.length))))" />
    <mutant id="mutant_340" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.invokerTransformer(java.lang.String,java.lang.Class[],java.lang.Object[])" from="((paramTypes != null) &amp;&amp; (args == null))" to="(!((paramTypes != null) &amp;&amp; (args == null)))" />
    <mutant id="mutant_356" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' does not exist&quot;)" to="(((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' does not exist&quot;) * -1)" />
    <mutant id="mutant_357" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' does not exist&quot;)" to="(((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' does not exist&quot;) - 1)" />
    <mutant id="mutant_358" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) * -1)" />
    <mutant id="mutant_359" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + 1)" />
    <mutant id="mutant_1050" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex()))" to="(((this.index) - (getStartIndex())) + 1)" />
    <mutant id="mutant_1051" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex())) - 1" to="(((this.index) - (getStartIndex())) - 1) - 1" />
    <mutant id="mutant_1047" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.nextIndex()" from="(this.index) - (getStartIndex())" to="((this.index) - (getStartIndex())) + 1" />
    <mutant id="mutant_1048" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex()))" to="(((this.index) - (getStartIndex())) - 1)" />
    <mutant id="mutant_1045" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.nextIndex()" from="(this.index) - (getStartIndex())" to="((this.index) - (getStartIndex())) - 1" />
    <mutant id="mutant_1046" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.nextIndex()" from="(this.index) - (getStartIndex())" to="((this.index) - (getStartIndex())) * -1" />
    <mutant id="mutant_1043" viable="true" in="org.apache.commons.collections4.iterators.LoopingListIterator.previousIndex()" from="(list.size()) - 1" to="((list.size()) - 1) + 1" />
    <mutant id="mutant_1044" viable="true" in="org.apache.commons.collections4.iterators.NodeListIterator.next()" from="((nodeList) != null) &amp;&amp; ((index) &lt; (nodeList.getLength()))" to="!(((nodeList) != null) &amp;&amp; ((index) &lt; (nodeList.getLength())))" />
    <mutant id="mutant_1041" viable="true" in="org.apache.commons.collections4.iterators.LoopingListIterator.previousIndex()" from="(list.size()) - 1" to="((list.size()) - 1) * -1" />
    <mutant id="mutant_1042" viable="true" in="org.apache.commons.collections4.iterators.LoopingListIterator.previousIndex()" from="(list.size()) - 1" to="((list.size()) - 1) - 1" />
    <mutant id="mutant_352" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + 1)" />
    <mutant id="mutant_353" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) * -1)" />
    <mutant id="mutant_354" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) - 1)" />
    <mutant id="mutant_355" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' does not exist&quot;)" to="(((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' does not exist&quot;) + 1)" />
    <mutant id="mutant_350" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) - 1)" />
    <mutant id="mutant_1049" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex()))" to="(((this.index) - (getStartIndex())) * -1)" />
    <mutant id="mutant_351" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + 1)" />
    <mutant id="mutant_367" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' cannot be accessed&quot;)" to="(((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' cannot be accessed&quot;) + 1)" />
    <mutant id="mutant_368" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' cannot be accessed&quot;)" to="(((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' cannot be accessed&quot;) * -1)" />
    <mutant id="mutant_369" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' cannot be accessed&quot;)" to="(((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' cannot be accessed&quot;) - 1)" />
    <mutant id="mutant_363" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + 1)" />
    <mutant id="mutant_364" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + 1)" />
    <mutant id="mutant_365" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) * -1)" />
    <mutant id="mutant_366" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) - 1)" />
    <mutant id="mutant_360" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) - 1)" />
    <mutant id="mutant_361" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) * -1)" />
    <mutant id="mutant_362" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) - 1)" />
    <mutant id="mutant_378" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) - 1)" />
    <mutant id="mutant_379" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' threw an exception&quot;)" to="(((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' threw an exception&quot;) * -1)" />
    <mutant id="mutant_374" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) - 1)" />
    <mutant id="mutant_375" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + 1)" />
    <mutant id="mutant_376" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + 1)" />
    <mutant id="mutant_377" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) * -1)" />
    <mutant id="mutant_370" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) * -1)" />
    <mutant id="mutant_371" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + 1)" />
    <mutant id="mutant_372" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) - 1)" />
    <mutant id="mutant_373" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) * -1)" />
    <mutant id="mutant_389" viable="true" in="org.apache.commons.collections4.multimap.AbstractMultiValuedMap.putAll(K,java.lang.Iterable)" from="(!result) &amp;&amp; tmpResult" to="!((!result) &amp;&amp; tmpResult)" />
    <mutant id="mutant_380" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' threw an exception&quot;)" to="(((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' threw an exception&quot;) + 1)" />
    <mutant id="mutant_1098" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="((&quot;MapIterator[&quot; + (getKey())) + 1)" />
    <mutant id="mutant_1099" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) * -1)" />
    <mutant id="mutant_1096" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="((&quot;MapIterator[&quot; + (getKey())) - 1)" />
    <mutant id="mutant_1097" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="((&quot;MapIterator[&quot; + (getKey())) * -1)" />
    <mutant id="mutant_385" viable="false" in="org.apache.commons.collections4.multimap.AbstractMultiValuedMap(java.util.Map,java.lang.Class,int)" from="(&quot;Illegal Capacity: &quot; + initialCollectionCapacity)" to="((&quot;Illegal Capacity: &quot; + initialCollectionCapacity) * -1)" />
    <mutant id="mutant_386" viable="false" in="org.apache.commons.collections4.multimap.AbstractMultiValuedMap(java.util.Map,java.lang.Class,int)" from="(&quot;Illegal Capacity: &quot; + initialCollectionCapacity)" to="((&quot;Illegal Capacity: &quot; + initialCollectionCapacity) - 1)" />
    <mutant id="mutant_387" viable="true" in="org.apache.commons.collections4.multimap.AbstractMultiValuedMap.putAll(K,java.lang.Iterable)" from="((values == null) || ((values.iterator()) == null))" to="(!((values == null) || ((values.iterator()) == null)))" />
    <mutant id="mutant_388" viable="true" in="org.apache.commons.collections4.multimap.AbstractMultiValuedMap.putAll(K,java.lang.Iterable)" from="((values == null) || ((values.iterator()) == null)) || (!(values.iterator().hasNext()))" to="!(((values == null) || ((values.iterator()) == null)) || (!(values.iterator().hasNext())))" />
    <mutant id="mutant_381" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' threw an exception&quot;)" to="(((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' threw an exception&quot;) - 1)" />
    <mutant id="mutant_382" viable="true" in="org.apache.commons.collections4.functors.OrPredicate.orPredicate(org.apache.commons.collections4.Predicate,org.apache.commons.collections4.Predicate)" from="(predicate1 == null) || (predicate2 == null)" to="!((predicate1 == null) || (predicate2 == null))" />
    <mutant id="mutant_383" viable="true" in="org.apache.commons.collections4.functors.OrPredicate.evaluate(T)" from="(iPredicate1.evaluate(object)) || (iPredicate2.evaluate(object))" to="!((iPredicate1.evaluate(object)) || (iPredicate2.evaluate(object)))" />
    <mutant id="mutant_384" viable="true" in="org.apache.commons.collections4.multimap.AbstractMultiValuedMap(java.util.Map,java.lang.Class,int)" from="(&quot;Illegal Capacity: &quot; + initialCollectionCapacity)" to="((&quot;Illegal Capacity: &quot; + initialCollectionCapacity) + 1)" />
    <mutant id="mutant_1094" viable="true" in="org.apache.commons.collections4.iterators.SingletonListIterator.set(E)" from="(!(nextCalled)) || (removed)" to="!((!(nextCalled)) || (removed))" />
    <mutant id="mutant_1095" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.setValue(V)" from="(parent.reverseMap.containsKey(value)) &amp;&amp; ((parent.reverseMap.get(value)) != (last.getKey()))" to="!((parent.reverseMap.containsKey(value)) &amp;&amp; ((parent.reverseMap.get(value)) != (last.getKey())))" />
    <mutant id="mutant_1092" viable="true" in="org.apache.commons.collections4.iterators.SingletonListIterator.hasPrevious()" from="(!(beforeFirst)) &amp;&amp; (!(removed))" to="!((!(beforeFirst)) &amp;&amp; (!(removed)))" />
    <mutant id="mutant_1093" viable="true" in="org.apache.commons.collections4.iterators.SingletonListIterator.remove()" from="(!(nextCalled)) || (removed)" to="!((!(nextCalled)) || (removed))" />
    <mutant id="mutant_1090" viable="true" in="org.apache.commons.collections4.iterators.SingletonListIterator.previous()" from="(beforeFirst) || (removed)" to="!((beforeFirst) || (removed))" />
    <mutant id="mutant_1091" viable="true" in="org.apache.commons.collections4.iterators.SingletonListIterator.hasNext()" from="(beforeFirst) &amp;&amp; (!(removed))" to="!((beforeFirst) &amp;&amp; (!(removed)))" />
    <mutant id="mutant_390" viable="true" in="org.apache.commons.collections4.multimap.TransformedMultiValuedMap.putAll(K,java.lang.Iterable)" from="((values == null) || ((values.iterator()) == null))" to="(!((values == null) || ((values.iterator()) == null)))" />
    <mutant id="mutant_1089" viable="true" in="org.apache.commons.collections4.iterators.SingletonListIterator.next()" from="(!(beforeFirst)) || (removed)" to="!((!(beforeFirst)) || (removed))" />
    <mutant id="mutant_391" viable="true" in="org.apache.commons.collections4.multimap.TransformedMultiValuedMap.putAll(K,java.lang.Iterable)" from="((values == null) || ((values.iterator()) == null)) || (!(values.iterator().hasNext()))" to="!(((values == null) || ((values.iterator()) == null)) || (!(values.iterator().hasNext())))" />
    <mutant id="mutant_1087" viable="true" in="org.apache.commons.collections4.iterators.SingletonIterator.hasNext()" from="(beforeFirst) &amp;&amp; (!(removed))" to="!((beforeFirst) &amp;&amp; (!(removed)))" />
    <mutant id="mutant_1088" viable="true" in="org.apache.commons.collections4.iterators.SingletonIterator.remove()" from="(removed) || (beforeFirst)" to="!((removed) || (beforeFirst))" />
    <mutant id="mutant_1085" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="((indexOfLargestMobileInteger + offset) - 1)" />
    <mutant id="mutant_1086" viable="true" in="org.apache.commons.collections4.iterators.SingletonIterator.next()" from="(!(beforeFirst)) || (removed)" to="!((!(beforeFirst)) || (removed))" />
    <mutant id="mutant_396" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(&quot;Cannot add Object \'&quot; + object)" to="((&quot;Cannot add Object \'&quot; + object) - 1)" />
    <mutant id="mutant_397" viable="true" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;)" to="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + 1)" />
    <mutant id="mutant_398" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;)" to="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) * -1)" />
    <mutant id="mutant_399" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;)" to="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) - 1)" />
    <mutant id="mutant_392" viable="true" in="org.apache.commons.collections4.collection.AbstractCollectionDecorator.equals(java.lang.Object)" from="(object == (this)) || (decorated().equals(object))" to="!((object == (this)) || (decorated().equals(object)))" />
    <mutant id="mutant_393" viable="true" in="org.apache.commons.collections4.collection.IndexedCollection.addToIndex(C)" from="(uniqueIndex) &amp;&amp; (index.containsKey(key))" to="!((uniqueIndex) &amp;&amp; (index.containsKey(key)))" />
    <mutant id="mutant_394" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(&quot;Cannot add Object \'&quot; + object)" to="((&quot;Cannot add Object \'&quot; + object) * -1)" />
    <mutant id="mutant_395" viable="true" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(&quot;Cannot add Object \'&quot; + object)" to="((&quot;Cannot add Object \'&quot; + object) + 1)" />
    <mutant id="mutant_1519" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="((delta + d) + 1)" />
    <mutant id="mutant_1510" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x &lt; end1) &amp;&amp; (y &lt; end2))" to="(!((x &lt; end1) &amp;&amp; (y &lt; end2)))" />
    <mutant id="mutant_1517" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="((delta - d) + 1)" />
    <mutant id="mutant_1518" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(((delta % 2) != 0) &amp;&amp; ((delta - d) &lt;= k))" to="(!(((delta % 2) != 0) &amp;&amp; ((delta - d) &lt;= k)))" />
    <mutant id="mutant_1515" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="((delta - d) * -1)" />
    <mutant id="mutant_1516" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="((delta - d) - 1)" />
    <mutant id="mutant_1513" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="((delta % 2) + 1)" />
    <mutant id="mutant_1514" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="((delta % 2) - 1)" />
    <mutant id="mutant_1511" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x &lt; end1) &amp;&amp; (y &lt; end2)) &amp;&amp; (equator.equate(sequence1.get(x), sequence2.get(y)))" to="!(((x &lt; end1) &amp;&amp; (y &lt; end2)) &amp;&amp; (equator.equate(sequence1.get(x), sequence2.get(y))))" />
    <mutant id="mutant_1512" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="((delta % 2) * -1)" />
    <mutant id="mutant_1508" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="(((x - start1) + start2) - k) + 1" />
    <mutant id="mutant_1509" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="(((x - start1) + start2) - k) - 1" />
    <mutant id="mutant_1506" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="(((x - start1) + start2) - 1)" />
    <mutant id="mutant_1507" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="(((x - start1) + start2) - k) * -1" />
    <mutant id="mutant_1504" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="(((x - start1) + start2) * -1)" />
    <mutant id="mutant_1505" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="(((x - start1) + start2) + 1)" />
    <mutant id="mutant_1502" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="((x - start1) - 1)" />
    <mutant id="mutant_1503" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="((x - start1) * -1)" />
    <mutant id="mutant_1500" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vDown[(i - 1)]) + 1" to="((vDown[(i - 1)]) + 1) * -1" />
    <mutant id="mutant_1501" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="((x - start1) + 1)" />
    <mutant id="mutant_1553" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_1554" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_1551" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="((delta + d) * -1)" />
    <mutant id="mutant_1552" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="((delta + d) - 1)" />
    <mutant id="mutant_1550" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="((delta + d) + 1)" />
    <mutant id="mutant_1559" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k != (delta + d)) &amp;&amp; ((vUp[(i + 1)]) &lt;= (vUp[(i - 1)])))" to="(!((k != (delta + d)) &amp;&amp; ((vUp[(i + 1)]) &lt;= (vUp[(i - 1)]))))" />
    <mutant id="mutant_1557" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_1558" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_1555" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_1556" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_1542" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset)" to="((k + offset) + 1)" />
    <mutant id="mutant_1543" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset)" to="((k + offset) - 1)" />
    <mutant id="mutant_1540" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="((delta + d) - 1)" />
    <mutant id="mutant_1541" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset)" to="((k + offset) * -1)" />
    <mutant id="mutant_1548" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="((delta - d) - 1)" />
    <mutant id="mutant_1549" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="((delta - d) + 1)" />
    <mutant id="mutant_1546" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset) - delta" to="((k + offset) - delta) + 1" />
    <mutant id="mutant_1547" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="((delta - d) * -1)" />
    <mutant id="mutant_1544" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset) - delta" to="((k + offset) - delta) - 1" />
    <mutant id="mutant_1545" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset) - delta" to="((k + offset) - delta) * -1" />
    <mutant id="mutant_701" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) * -1)" />
    <mutant id="mutant_702" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) - 1)" />
    <mutant id="mutant_703" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Entry.before is null.&quot; + (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;))" to="((&quot;Entry.before is null.&quot; + (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)) * -1)" />
    <mutant id="mutant_704" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Entry.before is null.&quot; + (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;))" to="((&quot;Entry.before is null.&quot; + (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)) - 1)" />
    <mutant id="mutant_700" viable="true" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) + 1)" />
    <mutant id="mutant_709" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(loop != entry) &amp;&amp; (loop != null)" to="!((loop != entry) &amp;&amp; (loop != null))" />
    <mutant id="mutant_705" viable="true" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Entry.before is null.&quot; + (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;))" to="((&quot;Entry.before is null.&quot; + (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)) + 1)" />
    <mutant id="mutant_706" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Can\'t move header to MRU&quot; + &quot; (please report this to dev@commons.apache.org)&quot;)" to="((&quot;Can\'t move header to MRU&quot; + &quot; (please report this to dev@commons.apache.org)&quot;) - 1)" />
    <mutant id="mutant_707" viable="true" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Can\'t move header to MRU&quot; + &quot; (please report this to dev@commons.apache.org)&quot;)" to="((&quot;Can\'t move header to MRU&quot; + &quot; (please report this to dev@commons.apache.org)&quot;) + 1)" />
    <mutant id="mutant_708" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Can\'t move header to MRU&quot; + &quot; (please report this to dev@commons.apache.org)&quot;)" to="((&quot;Can\'t move header to MRU&quot; + &quot; (please report this to dev@commons.apache.org)&quot;) * -1)" />
    <mutant id="mutant_1531" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="((k + start1) * -1)" />
    <mutant id="mutant_1532" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="(((k + start1) - start2) * -1)" />
    <mutant id="mutant_1530" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="((k + start1) + 1)" />
    <mutant id="mutant_1539" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="((delta + d) * -1)" />
    <mutant id="mutant_1537" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="delta - d" to="(delta - d) + 1" />
    <mutant id="mutant_1538" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="((delta + d) + 1)" />
    <mutant id="mutant_1535" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="delta - d" to="(delta - d) * -1" />
    <mutant id="mutant_1536" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="delta - d" to="(delta - d) - 1" />
    <mutant id="mutant_1533" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="(((k + start1) - start2) - 1)" />
    <mutant id="mutant_1534" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="(((k + start1) - start2) + 1)" />
    <mutant id="mutant_712" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex]))" to="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) - 1)" />
    <mutant id="mutant_713" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;)" to="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) * -1)" />
    <mutant id="mutant_714" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;)" to="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + 1)" />
    <mutant id="mutant_715" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;)" to="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) - 1)" />
    <mutant id="mutant_710" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex]))" to="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) * -1)" />
    <mutant id="mutant_711" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex]))" to="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + 1)" />
    <mutant id="mutant_716" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous)" to="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) - 1)" />
    <mutant id="mutant_717" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous)" to="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + 1)" />
    <mutant id="mutant_718" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous)" to="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) * -1)" />
    <mutant id="mutant_719" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;)" to="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) - 1)" />
    <mutant id="mutant_1520" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="((delta + d) * -1)" />
    <mutant id="mutant_1521" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="((delta + d) - 1)" />
    <mutant id="mutant_1528" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="((i - delta) + 1)" />
    <mutant id="mutant_1529" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="((k + start1) - 1)" />
    <mutant id="mutant_1526" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="((i - delta) - 1)" />
    <mutant id="mutant_1527" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="((i - delta) * -1)" />
    <mutant id="mutant_1524" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="((i - delta) * -1)" />
    <mutant id="mutant_1525" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="((i - delta) + 1)" />
    <mutant id="mutant_1522" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(((delta % 2) != 0) &amp;&amp; ((delta - d) &lt;= k)) &amp;&amp; (k &lt;= (delta + d))" to="!((((delta % 2) != 0) &amp;&amp; ((delta - d) &lt;= k)) &amp;&amp; (k &lt;= (delta + d)))" />
    <mutant id="mutant_1523" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="((i - delta) - 1)" />
    <mutant id="mutant_723" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key)" to="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + 1)" />
    <mutant id="mutant_724" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key)" to="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) - 1)" />
    <mutant id="mutant_725" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + 1)" />
    <mutant id="mutant_726" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) * -1)" />
    <mutant id="mutant_720" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;)" to="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) * -1)" />
    <mutant id="mutant_721" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;)" to="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + 1)" />
    <mutant id="mutant_722" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key)" to="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) * -1)" />
    <mutant id="mutant_727" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) - 1)" />
    <mutant id="mutant_728" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) * -1)" />
    <mutant id="mutant_729" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) - 1)" />
    <mutant id="mutant_1113" viable="true" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="((&quot;MapIterator[&quot; + (getKey())) + 1)" />
    <mutant id="mutant_1597" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="(((k + start1) - start2) + 1)" />
    <mutant id="mutant_1114" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) * -1)" />
    <mutant id="mutant_1598" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - end2)" to="((end1 - end2) + 1)" />
    <mutant id="mutant_1111" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="((&quot;MapIterator[&quot; + (getKey())) * -1)" />
    <mutant id="mutant_1595" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="(((k + start1) - start2) * -1)" />
    <mutant id="mutant_1112" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="((&quot;MapIterator[&quot; + (getKey())) - 1)" />
    <mutant id="mutant_1596" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="(((k + start1) - start2) - 1)" />
    <mutant id="mutant_1593" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="((k + start1) + 1)" />
    <mutant id="mutant_1110" viable="true" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.setValue(V)" from="(parent.reverseMap.containsKey(value)) &amp;&amp; ((parent.reverseMap.get(value)) != (last.getKey()))" to="!((parent.reverseMap.containsKey(value)) &amp;&amp; ((parent.reverseMap.get(value)) != (last.getKey())))" />
    <mutant id="mutant_1594" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="((k + start1) * -1)" />
    <mutant id="mutant_1591" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + delta)" to="((i + delta) + 1)" />
    <mutant id="mutant_1592" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="((k + start1) - 1)" />
    <mutant id="mutant_1119" viable="true" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + 1)" />
    <mutant id="mutant_1117" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) * -1)" />
    <mutant id="mutant_1118" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) - 1)" />
    <mutant id="mutant_1115" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) - 1)" />
    <mutant id="mutant_1599" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - end2)" to="((end1 - end2) - 1)" />
    <mutant id="mutant_1116" viable="true" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + 1)" />
    <mutant id="mutant_734" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) * -1)" />
    <mutant id="mutant_735" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) - 1)" />
    <mutant id="mutant_736" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + 1)" />
    <mutant id="mutant_737" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) * -1)" />
    <mutant id="mutant_730" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + 1)" />
    <mutant id="mutant_731" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + 1)" />
    <mutant id="mutant_732" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) * -1)" />
    <mutant id="mutant_733" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) - 1)" />
    <mutant id="mutant_1590" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + delta)" to="((i + delta) - 1)" />
    <mutant id="mutant_738" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) - 1)" />
    <mutant id="mutant_739" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + 1)" />
    <mutant id="mutant_1102" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + 1)" />
    <mutant id="mutant_1586" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="((delta % 2) - 1)" />
    <mutant id="mutant_1103" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) * -1)" />
    <mutant id="mutant_1587" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(((delta % 2) == 0) &amp;&amp; ((-d) &lt;= k))" to="(!(((delta % 2) == 0) &amp;&amp; ((-d) &lt;= k)))" />
    <mutant id="mutant_1100" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) - 1)" />
    <mutant id="mutant_1584" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="((delta % 2) * -1)" />
    <mutant id="mutant_1101" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + 1)" />
    <mutant id="mutant_1585" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="((delta % 2) + 1)" />
    <mutant id="mutant_1582" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x &gt;= start1) &amp;&amp; (y &gt;= start2))" to="(!((x &gt;= start1) &amp;&amp; (y &gt;= start2)))" />
    <mutant id="mutant_1583" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x &gt;= start1) &amp;&amp; (y &gt;= start2)) &amp;&amp; (equator.equate(sequence1.get(x), sequence2.get(y)))" to="!(((x &gt;= start1) &amp;&amp; (y &gt;= start2)) &amp;&amp; (equator.equate(sequence1.get(x), sequence2.get(y))))" />
    <mutant id="mutant_1580" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="(((x - start1) + start2) - k) + 1" />
    <mutant id="mutant_1581" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="(((x - start1) + start2) - k) - 1" />
    <mutant id="mutant_1108" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$MapEntry.setValue(V)" from="(parent.reverseMap.containsKey(value)) &amp;&amp; ((parent.reverseMap.get(value)) != key)" to="!((parent.reverseMap.containsKey(value)) &amp;&amp; ((parent.reverseMap.get(value)) != key))" />
    <mutant id="mutant_1109" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$View.removeAll(java.util.Collection)" from="(parent.isEmpty()) || (coll.isEmpty())" to="!((parent.isEmpty()) || (coll.isEmpty()))" />
    <mutant id="mutant_1106" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_1107" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_1104" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) - 1)" />
    <mutant id="mutant_1588" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(((delta % 2) == 0) &amp;&amp; ((-d) &lt;= k)) &amp;&amp; (k &lt;= d)" to="!((((delta % 2) == 0) &amp;&amp; ((-d) &lt;= k)) &amp;&amp; (k &lt;= d))" />
    <mutant id="mutant_1105" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_1589" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + delta)" to="((i + delta) * -1)" />
    <mutant id="mutant_745" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) - 1)" />
    <mutant id="mutant_746" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) - 1)" />
    <mutant id="mutant_747" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) + 1)" />
    <mutant id="mutant_748" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) * -1)" />
    <mutant id="mutant_741" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) - 1)" />
    <mutant id="mutant_742" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) * -1)" />
    <mutant id="mutant_743" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + 1)" />
    <mutant id="mutant_744" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) * -1)" />
    <mutant id="mutant_749" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;NPE, entry=&quot; + entry)" to="((&quot;NPE, entry=&quot; + entry) + 1)" />
    <mutant id="mutant_1575" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="((x - start1) * -1)" />
    <mutant id="mutant_1576" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="(((x - start1) + start2) * -1)" />
    <mutant id="mutant_1573" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="((x - start1) + 1)" />
    <mutant id="mutant_1574" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="((x - start1) - 1)" />
    <mutant id="mutant_1571" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[i]) - 1" to="((vUp[i]) - 1) * -1" />
    <mutant id="mutant_1572" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[i]) - 1" to="((vUp[i]) - 1) - 1" />
    <mutant id="mutant_1570" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[i]) - 1" to="((vUp[i]) - 1) + 1" />
    <mutant id="mutant_740" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + 1)" />
    <mutant id="mutant_1579" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="(((x - start1) + start2) - k) * -1" />
    <mutant id="mutant_1577" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="(((x - start1) + start2) + 1)" />
    <mutant id="mutant_1578" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="(((x - start1) + start2) - 1)" />
    <mutant id="mutant_756" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header)))" to="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + 1)" />
    <mutant id="mutant_757" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header)))" to="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) - 1)" />
    <mutant id="mutant_758" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;)" to="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + 1)" />
    <mutant id="mutant_759" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;)" to="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) - 1)" />
    <mutant id="mutant_752" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;)" to="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) * -1)" />
    <mutant id="mutant_753" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;)" to="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + 1)" />
    <mutant id="mutant_754" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;)" to="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) - 1)" />
    <mutant id="mutant_755" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header)))" to="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) * -1)" />
    <mutant id="mutant_1564" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[(i + 1)]) - 1" to="((vUp[(i + 1)]) - 1) - 1" />
    <mutant id="mutant_1565" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[(i + 1)]) - 1" to="((vUp[(i + 1)]) - 1) * -1" />
    <mutant id="mutant_1562" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_1563" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_1560" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k == (delta - d)) || ((k != (delta + d)) &amp;&amp; ((vUp[(i + 1)]) &lt;= (vUp[(i - 1)])))" to="!((k == (delta - d)) || ((k != (delta + d)) &amp;&amp; ((vUp[(i + 1)]) &lt;= (vUp[(i - 1)]))))" />
    <mutant id="mutant_1561" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_750" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;NPE, entry=&quot; + entry)" to="((&quot;NPE, entry=&quot; + entry) - 1)" />
    <mutant id="mutant_751" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;NPE, entry=&quot; + entry)" to="((&quot;NPE, entry=&quot; + entry) * -1)" />
    <mutant id="mutant_1568" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_1569" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_1566" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[(i + 1)]) - 1" to="((vUp[(i + 1)]) - 1) + 1" />
    <mutant id="mutant_1567" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_767" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) * -1)" />
    <mutant id="mutant_768" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + 1)" />
    <mutant id="mutant_769" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) - 1)" />
    <mutant id="mutant_763" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key)" to="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) * -1)" />
    <mutant id="mutant_764" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) - 1)" />
    <mutant id="mutant_765" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + 1)" />
    <mutant id="mutant_766" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) * -1)" />
    <mutant id="mutant_1160" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) + &quot;\&quot;) in this Map&quot;)" to="(((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) + &quot;\&quot;) in this Map&quot;) + 1)" />
    <mutant id="mutant_1161" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.swapPosition(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((x.getParent(dataElement)) != null) &amp;&amp; (x == (x.getParent(dataElement).getLeft(dataElement)))" to="!(((x.getParent(dataElement)) != null) &amp;&amp; (x == (x.getParent(dataElement).getLeft(dataElement))))" />
    <mutant id="mutant_1157" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="(&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE)))" to="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) * -1)" />
    <mutant id="mutant_1158" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) + &quot;\&quot;) in this Map&quot;)" to="(((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) + &quot;\&quot;) in this Map&quot;) - 1)" />
    <mutant id="mutant_1155" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="(&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE)))" to="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) + 1)" />
    <mutant id="mutant_1156" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="(&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE)))" to="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) - 1)" />
    <mutant id="mutant_1153" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doRedBlackInsert(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((currentNode != null) &amp;&amp; (currentNode != (rootNode[dataElement.ordinal()])))" to="(!((currentNode != null) &amp;&amp; (currentNode != (rootNode[dataElement.ordinal()]))))" />
    <mutant id="mutant_1154" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doRedBlackInsert(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((currentNode != null) &amp;&amp; (currentNode != (rootNode[dataElement.ordinal()]))) &amp;&amp; (TreeBidiMap.isRed(currentNode.getParent(dataElement), dataElement))" to="!(((currentNode != null) &amp;&amp; (currentNode != (rootNode[dataElement.ordinal()]))) &amp;&amp; (TreeBidiMap.isRed(currentNode.getParent(dataElement), dataElement)))" />
    <mutant id="mutant_1151" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doRedBlackDeleteFixup(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(getLeftChild(siblingNode, dataElement), dataElement)) &amp;&amp; (org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(getRightChild(siblingNode, dataElement), dataElement))" to="!((org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(getLeftChild(siblingNode, dataElement), dataElement)) &amp;&amp; (org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(getRightChild(siblingNode, dataElement), dataElement)))" />
    <mutant id="mutant_1152" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doRedBlackDeleteFixup(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(getRightChild(siblingNode, dataElement), dataElement)) &amp;&amp; (org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(getLeftChild(siblingNode, dataElement), dataElement))" to="!((org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(getRightChild(siblingNode, dataElement), dataElement)) &amp;&amp; (org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(getLeftChild(siblingNode, dataElement), dataElement)))" />
    <mutant id="mutant_760" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;)" to="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) * -1)" />
    <mutant id="mutant_761" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key)" to="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + 1)" />
    <mutant id="mutant_762" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key)" to="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) - 1)" />
    <mutant id="mutant_1159" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) + &quot;\&quot;) in this Map&quot;)" to="(((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) + &quot;\&quot;) in this Map&quot;) * -1)" />
    <mutant id="mutant_778" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + 1)" />
    <mutant id="mutant_779" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) - 1)" />
    <mutant id="mutant_774" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) * -1)" />
    <mutant id="mutant_775" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) - 1)" />
    <mutant id="mutant_776" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) * -1)" />
    <mutant id="mutant_777" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) - 1)" />
    <mutant id="mutant_1150" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doRedBlackDeleteFixup(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(currentNode != (rootNode[dataElement.ordinal()])) &amp;&amp; (TreeBidiMap.isBlack(currentNode, dataElement))" to="!((currentNode != (rootNode[dataElement.ordinal()])) &amp;&amp; (TreeBidiMap.isBlack(currentNode, dataElement)))" />
    <mutant id="mutant_1146" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) + &quot;\&quot;) in this Map&quot;)" to="(((&quot;Cannot store a duplicate key (\&quot;&quot; + key) + &quot;\&quot;) in this Map&quot;) + 1)" />
    <mutant id="mutant_1147" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) + &quot;\&quot;) in this Map&quot;)" to="(((&quot;Cannot store a duplicate key (\&quot;&quot; + key) + &quot;\&quot;) in this Map&quot;) - 1)" />
    <mutant id="mutant_1144" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="(&quot;Cannot store a duplicate key (\&quot;&quot; + key)" to="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) - 1)" />
    <mutant id="mutant_1145" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="(&quot;Cannot store a duplicate key (\&quot;&quot; + key)" to="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) + 1)" />
    <mutant id="mutant_1142" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; must be Comparable&quot;)" to="((dataElement + &quot; must be Comparable&quot;) - 1)" />
    <mutant id="mutant_1143" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="(&quot;Cannot store a duplicate key (\&quot;&quot; + key)" to="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) * -1)" />
    <mutant id="mutant_1140" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; must be Comparable&quot;)" to="((dataElement + &quot; must be Comparable&quot;) + 1)" />
    <mutant id="mutant_1141" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; must be Comparable&quot;)" to="((dataElement + &quot; must be Comparable&quot;) * -1)" />
    <mutant id="mutant_770" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + 1)" />
    <mutant id="mutant_771" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) - 1)" />
    <mutant id="mutant_772" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) * -1)" />
    <mutant id="mutant_773" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + 1)" />
    <mutant id="mutant_1148" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) + &quot;\&quot;) in this Map&quot;)" to="(((&quot;Cannot store a duplicate key (\&quot;&quot; + key) + &quot;\&quot;) in this Map&quot;) * -1)" />
    <mutant id="mutant_1149" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doRedBlackDelete(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="((deletedNode.getLeft(dataElement)) != null) &amp;&amp; ((deletedNode.getRight(dataElement)) != null)" to="!(((deletedNode.getLeft(dataElement)) != null) &amp;&amp; ((deletedNode.getRight(dataElement)) != null))" />
    <mutant id="mutant_305" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="(&quot;The closure array must not contain a null closure, index &quot; + i)" to="((&quot;The closure array must not contain a null closure, index &quot; + i) * -1)" />
    <mutant id="mutant_789" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="((&quot;Iterator[&quot; + (getKey())) + 1)" />
    <mutant id="mutant_306" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="(&quot;The closure array must not contain a null closure, index &quot; + i)" to="((&quot;The closure array must not contain a null closure, index &quot; + i) - 1)" />
    <mutant id="mutant_307" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="(&quot;The closure array must not contain a null closure, index &quot; + i)" to="((&quot;The closure array must not contain a null closure, index &quot; + i) + 1)" />
    <mutant id="mutant_308" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="((&quot;The closure array must not contain a null closure, index &quot; + i) + &quot; was null&quot;)" to="(((&quot;The closure array must not contain a null closure, index &quot; + i) + &quot; was null&quot;) * -1)" />
    <mutant id="mutant_301" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="(&quot;The predicate collection must not contain a null predicate, index &quot; + i)" to="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) * -1)" />
    <mutant id="mutant_785" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) + 1)" />
    <mutant id="mutant_302" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="(((&quot;The predicate collection must not contain a null predicate, index &quot; + i) + &quot; was null&quot;) + 1)" />
    <mutant id="mutant_786" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) * -1)" />
    <mutant id="mutant_303" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="(((&quot;The predicate collection must not contain a null predicate, index &quot; + i) + &quot; was null&quot;) - 1)" />
    <mutant id="mutant_787" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) - 1)" />
    <mutant id="mutant_304" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="(((&quot;The predicate collection must not contain a null predicate, index &quot; + i) + &quot; was null&quot;) * -1)" />
    <mutant id="mutant_788" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="((&quot;Iterator[&quot; + (getKey())) * -1)" />
    <mutant id="mutant_309" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="((&quot;The closure array must not contain a null closure, index &quot; + i) + &quot; was null&quot;)" to="(((&quot;The closure array must not contain a null closure, index &quot; + i) + &quot; was null&quot;) - 1)" />
    <mutant id="mutant_1135" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.nextGreater(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(parent != null) &amp;&amp; (child == (parent.getRight(dataElement)))" to="!((parent != null) &amp;&amp; (child == (parent.getRight(dataElement))))" />
    <mutant id="mutant_1136" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.nextSmaller(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(parent != null) &amp;&amp; (child == (parent.getLeft(dataElement)))" to="!((parent != null) &amp;&amp; (child == (parent.getLeft(dataElement))))" />
    <mutant id="mutant_1133" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doToString(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((nodeCount) * 32)" to="(((nodeCount) * 32) - 1)" />
    <mutant id="mutant_1134" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doToString(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((nodeCount) * 32)" to="(((nodeCount) * 32) * -1)" />
    <mutant id="mutant_1131" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.isRed(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(node != null) &amp;&amp; (node.isRed(dataElement))" to="!((node != null) &amp;&amp; (node.isRed(dataElement)))" />
    <mutant id="mutant_1132" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doToString(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((nodeCount) * 32)" to="(((nodeCount) * 32) + 1)" />
    <mutant id="mutant_1130" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(node == null) || (node.isBlack(dataElement))" to="!((node == null) || (node.isBlack(dataElement)))" />
    <mutant id="mutant_781" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) * -1)" />
    <mutant id="mutant_782" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) - 1)" />
    <mutant id="mutant_783" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + 1)" />
    <mutant id="mutant_300" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="(&quot;The predicate collection must not contain a null predicate, index &quot; + i)" to="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) + 1)" />
    <mutant id="mutant_784" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) * -1)" />
    <mutant id="mutant_1139" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; cannot be null&quot;)" to="((dataElement + &quot; cannot be null&quot;) * -1)" />
    <mutant id="mutant_1137" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; cannot be null&quot;)" to="((dataElement + &quot; cannot be null&quot;) + 1)" />
    <mutant id="mutant_780" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + 1)" />
    <mutant id="mutant_1138" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; cannot be null&quot;)" to="((dataElement + &quot; cannot be null&quot;) - 1)" />
    <mutant id="mutant_316" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="((&quot;The predicate array must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="(((&quot;The predicate array must not contain a null predicate, index &quot; + i) + &quot; was null&quot;) * -1)" />
    <mutant id="mutant_317" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="(&quot;The transformer array must not contain a null transformer, index &quot; + i)" to="((&quot;The transformer array must not contain a null transformer, index &quot; + i) + 1)" />
    <mutant id="mutant_318" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="(&quot;The transformer array must not contain a null transformer, index &quot; + i)" to="((&quot;The transformer array must not contain a null transformer, index &quot; + i) * -1)" />
    <mutant id="mutant_319" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="(&quot;The transformer array must not contain a null transformer, index &quot; + i)" to="((&quot;The transformer array must not contain a null transformer, index &quot; + i) - 1)" />
    <mutant id="mutant_312" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="(&quot;The predicate array must not contain a null predicate, index &quot; + i)" to="((&quot;The predicate array must not contain a null predicate, index &quot; + i) + 1)" />
    <mutant id="mutant_796" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + 1)" />
    <mutant id="mutant_313" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="(&quot;The predicate array must not contain a null predicate, index &quot; + i)" to="((&quot;The predicate array must not contain a null predicate, index &quot; + i) - 1)" />
    <mutant id="mutant_797" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_314" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="((&quot;The predicate array must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="(((&quot;The predicate array must not contain a null predicate, index &quot; + i) + &quot; was null&quot;) + 1)" />
    <mutant id="mutant_798" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_315" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="((&quot;The predicate array must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="(((&quot;The predicate array must not contain a null predicate, index &quot; + i) + &quot; was null&quot;) - 1)" />
    <mutant id="mutant_799" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_1124" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap$EntryView.remove(java.lang.Object)" from="(node != null) &amp;&amp; (node.getValue().equals(value))" to="!((node != null) &amp;&amp; (node.getValue().equals(value)))" />
    <mutant id="mutant_1125" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap$InverseEntryView.contains(java.lang.Object)" from="(node != null) &amp;&amp; (node.getKey().equals(value))" to="!((node != null) &amp;&amp; (node.getKey().equals(value)))" />
    <mutant id="mutant_1122" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_1123" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap$EntryView.contains(java.lang.Object)" from="(node != null) &amp;&amp; (node.getValue().equals(value))" to="!((node != null) &amp;&amp; (node.getValue().equals(value)))" />
    <mutant id="mutant_1120" viable="true" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_1121" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_792" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + 1)" />
    <mutant id="mutant_793" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) - 1)" />
    <mutant id="mutant_310" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="((&quot;The closure array must not contain a null closure, index &quot; + i) + &quot; was null&quot;)" to="(((&quot;The closure array must not contain a null closure, index &quot; + i) + &quot; was null&quot;) + 1)" />
    <mutant id="mutant_794" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) * -1)" />
    <mutant id="mutant_311" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="(&quot;The predicate array must not contain a null predicate, index &quot; + i)" to="((&quot;The predicate array must not contain a null predicate, index &quot; + i) * -1)" />
    <mutant id="mutant_795" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) - 1)" />
    <mutant id="mutant_1128" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap$Node.isLeftChild(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((parentNode[dataElement.ordinal()]) != null) &amp;&amp; ((parentNode[dataElement.ordinal()].leftNode[dataElement.ordinal()]) == (this))" to="!(((parentNode[dataElement.ordinal()]) != null) &amp;&amp; ((parentNode[dataElement.ordinal()].leftNode[dataElement.ordinal()]) == (this)))" />
    <mutant id="mutant_1129" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap$Node.isRightChild(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((parentNode[dataElement.ordinal()]) != null) &amp;&amp; ((parentNode[dataElement.ordinal()].rightNode[dataElement.ordinal()]) == (this))" to="!(((parentNode[dataElement.ordinal()]) != null) &amp;&amp; ((parentNode[dataElement.ordinal()].rightNode[dataElement.ordinal()]) == (this)))" />
    <mutant id="mutant_790" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="((&quot;Iterator[&quot; + (getKey())) - 1)" />
    <mutant id="mutant_1126" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap$InverseEntryView.remove(java.lang.Object)" from="(node != null) &amp;&amp; (node.getKey().equals(value))" to="!((node != null) &amp;&amp; (node.getKey().equals(value)))" />
    <mutant id="mutant_791" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) * -1)" />
    <mutant id="mutant_1127" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap$Node.equals(java.lang.Object)" from="(getKey().equals(e.getKey())) &amp;&amp; (getValue().equals(e.getValue()))" to="!((getKey().equals(e.getKey())) &amp;&amp; (getValue().equals(e.getValue())))" />
    <mutant id="mutant_9" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex = &quot; + fromIndex)" to="((&quot;fromIndex = &quot; + fromIndex) * -1)" />
    <mutant id="mutant_206" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1) - sParentAbsolutePosition" to="((currentSize - 1) - sParentAbsolutePosition) * -1" />
    <mutant id="mutant_8" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.previousIndex()" from="(nextIndex()) - 1" to="((nextIndex()) - 1) * -1" />
    <mutant id="mutant_207" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1) - sParentAbsolutePosition" to="((currentSize - 1) - sParentAbsolutePosition) - 1" />
    <mutant id="mutant_208" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1) - sParentAbsolutePosition" to="((currentSize - 1) - sParentAbsolutePosition) + 1" />
    <mutant id="mutant_209" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(s != null) &amp;&amp; ((s.height) &gt; (getHeight(otherTree)))" to="!((s != null) &amp;&amp; ((s.height) &gt; (getHeight(otherTree))))" />
    <mutant id="mutant_5" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="(((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;) + 1)" />
    <mutant id="mutant_202" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize) + 1" to="((sAbsolutePosition - currentSize) + 1) * -1" />
    <mutant id="mutant_686" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) - 1)" />
    <mutant id="mutant_4" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="(((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;) - 1)" />
    <mutant id="mutant_203" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1)" to="((currentSize - 1) + 1)" />
    <mutant id="mutant_687" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + 1)" />
    <mutant id="mutant_7" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.previousIndex()" from="(nextIndex()) - 1" to="((nextIndex()) - 1) + 1" />
    <mutant id="mutant_204" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1)" to="((currentSize - 1) - 1)" />
    <mutant id="mutant_688" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + 1)" />
    <mutant id="mutant_6" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.previousIndex()" from="(nextIndex()) - 1" to="((nextIndex()) - 1) - 1" />
    <mutant id="mutant_205" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1)" to="((currentSize - 1) * -1)" />
    <mutant id="mutant_689" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) * -1)" />
    <mutant id="mutant_85" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode) + (e == null ? 0 : e.hashCode())" to="((31 * hashCode) + (e == null ? 0 : e.hashCode())) + 1" />
    <mutant id="mutant_84" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode)" to="((31 * hashCode) - 1)" />
    <mutant id="mutant_87" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode) + (e == null ? 0 : e.hashCode())" to="((31 * hashCode) + (e == null ? 0 : e.hashCode())) - 1" />
    <mutant id="mutant_86" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode) + (e == null ? 0 : e.hashCode())" to="((31 * hashCode) + (e == null ? 0 : e.hashCode())) * -1" />
    <mutant id="mutant_89" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.lastIndexOf(java.lang.Object)" from="(size) - 1" to="((size) - 1) - 1" />
    <mutant id="mutant_88" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.lastIndexOf(java.lang.Object)" from="(size) - 1" to="((size) - 1) * -1" />
    <mutant id="mutant_90" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.lastIndexOf(java.lang.Object)" from="(size) - 1" to="((size) - 1) + 1" />
    <mutant id="mutant_92" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.toString()" from="(16 * (size()))" to="((16 * (size())) + 1)" />
    <mutant id="mutant_91" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.toString()" from="(16 * (size()))" to="((16 * (size())) - 1)" />
    <mutant id="mutant_94" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) * -1)" />
    <mutant id="mutant_93" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.toString()" from="(16 * (size()))" to="((16 * (size())) * -1)" />
    <mutant id="mutant_1" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="((&quot;No element at index &quot; + (nextIndex)) + 1)" />
    <mutant id="mutant_682" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) - 1)" />
    <mutant id="mutant_0" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="((&quot;No element at index &quot; + (nextIndex)) * -1)" />
    <mutant id="mutant_683" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + 1)" />
    <mutant id="mutant_3" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="(((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;) * -1)" />
    <mutant id="mutant_200" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize) + 1" to="((sAbsolutePosition - currentSize) + 1) - 1" />
    <mutant id="mutant_684" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) * -1)" />
    <mutant id="mutant_2" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="((&quot;No element at index &quot; + (nextIndex)) - 1)" />
    <mutant id="mutant_201" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize) + 1" to="((sAbsolutePosition - currentSize) + 1) + 1" />
    <mutant id="mutant_685" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) * -1)" />
    <mutant id="mutant_680" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + 1)" />
    <mutant id="mutant_681" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) * -1)" />
    <mutant id="mutant_217" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.get(int)" from="index - (relativePosition)" to="(index - (relativePosition)) * -1" />
    <mutant id="mutant_218" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.get(int)" from="index - (relativePosition)" to="(index - (relativePosition)) - 1" />
    <mutant id="mutant_219" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.insert(int,E)" from="index - (relativePosition)" to="(index - (relativePosition)) + 1" />
    <mutant id="mutant_213" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - sParentAbsolutePosition" to="(currentSize - sParentAbsolutePosition) + 1" />
    <mutant id="mutant_697" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) - 1)" />
    <mutant id="mutant_214" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - sParentAbsolutePosition" to="(currentSize - sParentAbsolutePosition) - 1" />
    <mutant id="mutant_698" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) + 1)" />
    <mutant id="mutant_215" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - sParentAbsolutePosition" to="(currentSize - sParentAbsolutePosition) * -1" />
    <mutant id="mutant_699" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) * -1)" />
    <mutant id="mutant_216" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.get(int)" from="index - (relativePosition)" to="(index - (relativePosition)) + 1" />
    <mutant id="mutant_74" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(startIndex + (sub.offset))" to="((startIndex + (sub.offset)) + 1)" />
    <mutant id="mutant_73" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(startIndex + (sub.offset))" to="((startIndex + (sub.offset)) - 1)" />
    <mutant id="mutant_76" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="((super.nextIndex()) - (sub.offset)) - 1" />
    <mutant id="mutant_75" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(startIndex + (sub.offset))" to="((startIndex + (sub.offset)) * -1)" />
    <mutant id="mutant_78" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="((super.nextIndex()) - (sub.offset)) + 1" />
    <mutant id="mutant_77" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="((super.nextIndex()) - (sub.offset)) * -1" />
    <mutant id="mutant_79" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.equals(java.lang.Object)" from="(it1.hasNext()) &amp;&amp; (it2.hasNext())" to="!((it1.hasNext()) &amp;&amp; (it2.hasNext()))" />
    <mutant id="mutant_81" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.isEqualValue(java.lang.Object,java.lang.Object)" from="(value1 == value2) || (value1 == null ? false : value1.equals(value2))" to="!((value1 == value2) || (value1 == null ? false : value1.equals(value2)))" />
    <mutant id="mutant_80" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.equals(java.lang.Object)" from="((it1.hasNext()) || (it2.hasNext()))" to="(!((it1.hasNext()) || (it2.hasNext())))" />
    <mutant id="mutant_83" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode)" to="((31 * hashCode) * -1)" />
    <mutant id="mutant_82" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode)" to="((31 * hashCode) + 1)" />
    <mutant id="mutant_693" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) - 1)" />
    <mutant id="mutant_210" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="sAbsolutePosition - currentSize" to="(sAbsolutePosition - currentSize) - 1" />
    <mutant id="mutant_694" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + 1)" />
    <mutant id="mutant_211" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="sAbsolutePosition - currentSize" to="(sAbsolutePosition - currentSize) + 1" />
    <mutant id="mutant_695" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) - 1)" />
    <mutant id="mutant_212" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="sAbsolutePosition - currentSize" to="(sAbsolutePosition - currentSize) * -1" />
    <mutant id="mutant_696" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) * -1)" />
    <mutant id="mutant_690" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) - 1)" />
    <mutant id="mutant_691" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + 1)" />
    <mutant id="mutant_692" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) * -1)" />
    <mutant id="mutant_228" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) + ((relativePosition) &gt; 0 ? 0 : 1)" to="((relativePosition) + ((relativePosition) &gt; 0 ? 0 : 1)) + 1" />
    <mutant id="mutant_229" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) + ((relativePosition) &gt; 0 ? 0 : 1)" to="((relativePosition) + ((relativePosition) &gt; 0 ? 0 : 1)) * -1" />
    <mutant id="mutant_224" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.remove(int)" from="index - (relativePosition)" to="(index - (relativePosition)) + 1" />
    <mutant id="mutant_225" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.remove(int)" from="index - (relativePosition)" to="(index - (relativePosition)) * -1" />
    <mutant id="mutant_226" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.remove(int)" from="index - (relativePosition)" to="(index - (relativePosition)) - 1" />
    <mutant id="mutant_227" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="((getRightSubTree()) == null) &amp;&amp; ((getLeftSubTree()) == null)" to="!(((getRightSubTree()) == null) &amp;&amp; ((getLeftSubTree()) == null))" />
    <mutant id="mutant_220" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.insert(int,E)" from="index - (relativePosition)" to="(index - (relativePosition)) * -1" />
    <mutant id="mutant_221" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.insert(int,E)" from="index - (relativePosition)" to="(index - (relativePosition)) - 1" />
    <mutant id="mutant_222" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.next()" from="(rightIsNext) || ((right) == null)" to="!((rightIsNext) || ((right) == null))" />
    <mutant id="mutant_223" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.previous()" from="(leftIsPrevious) || ((left) == null)" to="!((leftIsPrevious) || ((left) == null))" />
    <mutant id="mutant_239" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="((getOffset(newTop)) + (getOffset(movedNode))) + 1" />
    <mutant id="mutant_235" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(relativePosition) + (getOffset(newTop))" to="((relativePosition) + (getOffset(newTop))) + 1" />
    <mutant id="mutant_236" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(relativePosition) + (getOffset(newTop))" to="((relativePosition) + (getOffset(newTop))) * -1" />
    <mutant id="mutant_237" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="((getOffset(newTop)) + (getOffset(movedNode))) * -1" />
    <mutant id="mutant_238" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="((getOffset(newTop)) + (getOffset(movedNode))) - 1" />
    <mutant id="mutant_96" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + 1)" />
    <mutant id="mutant_95" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) - 1)" />
    <mutant id="mutant_98" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + 1)" />
    <mutant id="mutant_97" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) * -1)" />
    <mutant id="mutant_99" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) - 1)" />
    <mutant id="mutant_231" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) - ((relativePosition) &lt; 0 ? 0 : 1)" to="((relativePosition) - ((relativePosition) &lt; 0 ? 0 : 1)) + 1" />
    <mutant id="mutant_232" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) - ((relativePosition) &lt; 0 ? 0 : 1)" to="((relativePosition) - ((relativePosition) &lt; 0 ? 0 : 1)) * -1" />
    <mutant id="mutant_233" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) - ((relativePosition) &lt; 0 ? 0 : 1)" to="((relativePosition) - ((relativePosition) &lt; 0 ? 0 : 1)) - 1" />
    <mutant id="mutant_234" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(relativePosition) + (getOffset(newTop))" to="((relativePosition) + (getOffset(newTop))) - 1" />
    <mutant id="mutant_230" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) + ((relativePosition) &gt; 0 ? 0 : 1)" to="((relativePosition) + ((relativePosition) &gt; 0 ? 0 : 1)) - 1" />
    <mutant id="mutant_246" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.recalcHeight()" from="(Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) + 1" to="((Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) + 1) + 1" />
    <mutant id="mutant_247" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.recalcHeight()" from="(Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) + 1" to="((Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) + 1) - 1" />
    <mutant id="mutant_248" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.recalcHeight()" from="(Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) + 1" to="((Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) + 1) * -1" />
    <mutant id="mutant_249" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (left.relativePosition))" to="((index + (left.relativePosition)) - 1)" />
    <mutant id="mutant_242" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(relativePosition) + (getOffset(newTop))" to="((relativePosition) + (getOffset(newTop))) * -1" />
    <mutant id="mutant_243" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="((getOffset(newTop)) + (getOffset(movedNode))) * -1" />
    <mutant id="mutant_244" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="((getOffset(newTop)) + (getOffset(movedNode))) - 1" />
    <mutant id="mutant_245" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="((getOffset(newTop)) + (getOffset(movedNode))) + 1" />
    <mutant id="mutant_240" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(relativePosition) + (getOffset(newTop))" to="((relativePosition) + (getOffset(newTop))) - 1" />
    <mutant id="mutant_241" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(relativePosition) + (getOffset(newTop))" to="((relativePosition) + (getOffset(newTop))) + 1" />
    <mutant id="mutant_257" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="((&quot;No element at index &quot; + (nextIndex)) + 1)" />
    <mutant id="mutant_258" viable="false" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="(((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;) - 1)" />
    <mutant id="mutant_259" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="(((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;) + 1)" />
    <mutant id="mutant_253" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (right.relativePosition))" to="((index + (right.relativePosition)) * -1)" />
    <mutant id="mutant_254" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (right.relativePosition))" to="((index + (right.relativePosition)) + 1)" />
    <mutant id="mutant_255" viable="false" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="((&quot;No element at index &quot; + (nextIndex)) * -1)" />
    <mutant id="mutant_256" viable="false" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="((&quot;No element at index &quot; + (nextIndex)) - 1)" />
    <mutant id="mutant_250" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (left.relativePosition))" to="((index + (left.relativePosition)) * -1)" />
    <mutant id="mutant_251" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (left.relativePosition))" to="((index + (left.relativePosition)) + 1)" />
    <mutant id="mutant_252" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (right.relativePosition))" to="((index + (right.relativePosition)) - 1)" />
    <mutant id="mutant_268" viable="true" in="org.apache.commons.collections4.list.TreeList.get(int)" from="((size()) - 1)" to="(((size()) - 1) + 1)" />
    <mutant id="mutant_269" viable="true" in="org.apache.commons.collections4.list.TreeList.get(int)" from="((size()) - 1)" to="(((size()) - 1) - 1)" />
    <mutant id="mutant_264" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previousIndex()" from="(nextIndex()) - 1" to="((nextIndex()) - 1) * -1" />
    <mutant id="mutant_265" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previousIndex()" from="(nextIndex()) - 1" to="((nextIndex()) - 1) + 1" />
    <mutant id="mutant_266" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previousIndex()" from="(nextIndex()) - 1" to="((nextIndex()) - 1) - 1" />
    <mutant id="mutant_267" viable="true" in="org.apache.commons.collections4.list.TreeList.get(int)" from="((size()) - 1)" to="(((size()) - 1) * -1)" />
    <mutant id="mutant_260" viable="false" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="(((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;) * -1)" />
    <mutant id="mutant_261" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previous()" from="((nextIndex) - 1)" to="(((nextIndex) - 1) + 1)" />
    <mutant id="mutant_262" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previous()" from="((nextIndex) - 1)" to="(((nextIndex) - 1) * -1)" />
    <mutant id="mutant_263" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previous()" from="((nextIndex) - 1)" to="(((nextIndex) - 1) - 1)" />
    <mutant id="mutant_279" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(&quot;Invalid index:&quot; + index)" to="((&quot;Invalid index:&quot; + index) * -1)" />
    <mutant id="mutant_270" viable="true" in="org.apache.commons.collections4.list.TreeList.remove(int)" from="((size()) - 1)" to="(((size()) - 1) * -1)" />
    <mutant id="mutant_275" viable="true" in="org.apache.commons.collections4.list.TreeList.set(int,E)" from="((size()) - 1)" to="(((size()) - 1) - 1)" />
    <mutant id="mutant_276" viable="true" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(index &lt; startIndex) || (index &gt; endIndex)" to="!((index &lt; startIndex) || (index &gt; endIndex))" />
    <mutant id="mutant_277" viable="true" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(&quot;Invalid index:&quot; + index)" to="((&quot;Invalid index:&quot; + index) + 1)" />
    <mutant id="mutant_278" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(&quot;Invalid index:&quot; + index)" to="((&quot;Invalid index:&quot; + index) - 1)" />
    <mutant id="mutant_271" viable="true" in="org.apache.commons.collections4.list.TreeList.remove(int)" from="((size()) - 1)" to="(((size()) - 1) + 1)" />
    <mutant id="mutant_272" viable="true" in="org.apache.commons.collections4.list.TreeList.remove(int)" from="((size()) - 1)" to="(((size()) - 1) - 1)" />
    <mutant id="mutant_273" viable="true" in="org.apache.commons.collections4.list.TreeList.set(int,E)" from="((size()) - 1)" to="(((size()) - 1) * -1)" />
    <mutant id="mutant_274" viable="true" in="org.apache.commons.collections4.list.TreeList.set(int,E)" from="((size()) - 1)" to="(((size()) - 1) + 1)" />
    <mutant id="mutant_280" viable="true" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;)" to="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) + 1)" />
    <mutant id="mutant_281" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;)" to="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) - 1)" />
    <mutant id="mutant_286" viable="true" in="org.apache.commons.collections4.functors.AndPredicate.andPredicate(org.apache.commons.collections4.Predicate,org.apache.commons.collections4.Predicate)" from="(predicate1 == null) || (predicate2 == null)" to="!((predicate1 == null) || (predicate2 == null))" />
    <mutant id="mutant_287" viable="true" in="org.apache.commons.collections4.functors.AndPredicate.evaluate(T)" from="(iPredicate1.evaluate(object)) &amp;&amp; (iPredicate2.evaluate(object))" to="!((iPredicate1.evaluate(object)) &amp;&amp; (iPredicate2.evaluate(object)))" />
    <mutant id="mutant_288" viable="false" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="(&quot;The current criterion \'&quot; + (criterion))" to="((&quot;The current criterion \'&quot; + (criterion)) - 1)" />
    <mutant id="mutant_289" viable="false" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="(&quot;The current criterion \'&quot; + (criterion))" to="((&quot;The current criterion \'&quot; + (criterion)) * -1)" />
    <mutant id="mutant_282" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;)" to="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) * -1)" />
    <mutant id="mutant_283" viable="true" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) + (size()))" to="((((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) + (size())) + 1)" />
    <mutant id="mutant_284" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) + (size()))" to="((((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) + (size())) * -1)" />
    <mutant id="mutant_285" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) + (size()))" to="((((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) + (size())) - 1)" />
    <mutant id="mutant_290" viable="true" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="(&quot;The current criterion \'&quot; + (criterion))" to="((&quot;The current criterion \'&quot; + (criterion)) + 1)" />
    <mutant id="mutant_291" viable="true" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="((&quot;The current criterion \'&quot; + (criterion)) + &quot;\' is invalid.&quot;)" to="(((&quot;The current criterion \'&quot; + (criterion)) + &quot;\' is invalid.&quot;) + 1)" />
    <mutant id="mutant_292" viable="false" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="((&quot;The current criterion \'&quot; + (criterion)) + &quot;\' is invalid.&quot;)" to="(((&quot;The current criterion \'&quot; + (criterion)) + &quot;\' is invalid.&quot;) * -1)" />
    <mutant id="mutant_297" viable="true" in="org.apache.commons.collections4.functors.DefaultEquator.equate(T,T)" from="(o1 == o2) || ((o1 != null) &amp;&amp; (o1.equals(o2)))" to="!((o1 == o2) || ((o1 != null) &amp;&amp; (o1.equals(o2))))" />
    <mutant id="mutant_298" viable="true" in="org.apache.commons.collections4.functors.ForClosure.forClosure(int,org.apache.commons.collections4.Closure)" from="(count &lt;= 0) || (closure == null)" to="!((count &lt;= 0) || (closure == null))" />
    <mutant id="mutant_299" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="(&quot;The predicate collection must not contain a null predicate, index &quot; + i)" to="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) - 1)" />
    <mutant id="mutant_293" viable="false" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="((&quot;The current criterion \'&quot; + (criterion)) + &quot;\' is invalid.&quot;)" to="(((&quot;The current criterion \'&quot; + (criterion)) + &quot;\' is invalid.&quot;) - 1)" />
    <mutant id="mutant_294" viable="true" in="org.apache.commons.collections4.functors.ConstantTransformer.equals(java.lang.Object)" from="((otherConstant != null) &amp;&amp; (otherConstant.equals(getConstant())))" to="(!((otherConstant != null) &amp;&amp; (otherConstant.equals(getConstant()))))" />
    <mutant id="mutant_295" viable="true" in="org.apache.commons.collections4.functors.ConstantTransformer.equals(java.lang.Object)" from="(otherConstant == (getConstant())) || ((otherConstant != null) &amp;&amp; (otherConstant.equals(getConstant())))" to="!((otherConstant == (getConstant())) || ((otherConstant != null) &amp;&amp; (otherConstant.equals(getConstant()))))" />
    <mutant id="mutant_296" viable="true" in="org.apache.commons.collections4.functors.DefaultEquator.equate(T,T)" from="((o1 != null) &amp;&amp; (o1.equals(o2)))" to="(!((o1 != null) &amp;&amp; (o1.equals(o2))))" />
    <mutant id="mutant_27" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="toIndex - fromIndex" to="(toIndex - fromIndex) - 1" />
    <mutant id="mutant_26" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) + &quot;)&quot;)" to="(((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) + &quot;)&quot;) * -1)" />
    <mutant id="mutant_29" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="toIndex - fromIndex" to="(toIndex - fromIndex) * -1" />
    <mutant id="mutant_28" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="toIndex - fromIndex" to="(toIndex - fromIndex) + 1" />
    <mutant id="mutant_21" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex)" to="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) + 1)" />
    <mutant id="mutant_20" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;)" to="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + 1)" />
    <mutant id="mutant_23" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex)" to="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) - 1)" />
    <mutant id="mutant_22" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex)" to="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) * -1)" />
    <mutant id="mutant_25" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) + &quot;)&quot;)" to="(((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) + &quot;)&quot;) + 1)" />
    <mutant id="mutant_24" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) + &quot;)&quot;)" to="(((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) + &quot;)&quot;) - 1)" />
    <mutant id="mutant_16" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex(&quot; + fromIndex)" to="((&quot;fromIndex(&quot; + fromIndex) + 1)" />
    <mutant id="mutant_15" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex(&quot; + fromIndex)" to="((&quot;fromIndex(&quot; + fromIndex) * -1)" />
    <mutant id="mutant_18" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;)" to="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) - 1)" />
    <mutant id="mutant_17" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex(&quot; + fromIndex)" to="((&quot;fromIndex(&quot; + fromIndex) - 1)" />
    <mutant id="mutant_19" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;)" to="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) * -1)" />
    <mutant id="mutant_10" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex = &quot; + fromIndex)" to="((&quot;fromIndex = &quot; + fromIndex) + 1)" />
    <mutant id="mutant_12" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;toIndex = &quot; + toIndex)" to="((&quot;toIndex = &quot; + toIndex) * -1)" />
    <mutant id="mutant_11" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex = &quot; + fromIndex)" to="((&quot;fromIndex = &quot; + fromIndex) - 1)" />
    <mutant id="mutant_14" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;toIndex = &quot; + toIndex)" to="((&quot;toIndex = &quot; + toIndex) + 1)" />
    <mutant id="mutant_13" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;toIndex = &quot; + toIndex)" to="((&quot;toIndex = &quot; + toIndex) - 1)" />
    <mutant id="mutant_49" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(toIndexExclusive + (offset))" to="((toIndexExclusive + (offset)) + 1)" />
    <mutant id="mutant_48" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(toIndexExclusive + (offset))" to="((toIndexExclusive + (offset)) - 1)" />
    <mutant id="mutant_41" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((size) + 1)" to="(((size) + 1) - 1)" />
    <mutant id="mutant_40" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((size) + 1)" to="(((size) + 1) + 1)" />
    <mutant id="mutant_43" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((offset) + index)" to="(((offset) + index) + 1)" />
    <mutant id="mutant_42" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((offset) + index)" to="(((offset) + index) * -1)" />
    <mutant id="mutant_45" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(fromIndexInclusive + (offset))" to="((fromIndexInclusive + (offset)) * -1)" />
    <mutant id="mutant_44" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((offset) + index)" to="(((offset) + index) - 1)" />
    <mutant id="mutant_47" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(fromIndexInclusive + (offset))" to="((fromIndexInclusive + (offset)) + 1)" />
    <mutant id="mutant_46" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(fromIndexInclusive + (offset))" to="((fromIndexInclusive + (offset)) - 1)" />
    <mutant id="mutant_50" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(toIndexExclusive + (offset))" to="((toIndexExclusive + (offset)) * -1)" />
    <mutant id="mutant_38" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.set(int,E)" from="(index + (offset))" to="((index + (offset)) - 1)" />
    <mutant id="mutant_37" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.set(int,E)" from="(index + (offset))" to="((index + (offset)) * -1)" />
    <mutant id="mutant_39" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((size) + 1)" to="(((size) + 1) * -1)" />
    <mutant id="mutant_30" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.get(int)" from="(index + (offset))" to="((index + (offset)) + 1)" />
    <mutant id="mutant_32" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.get(int)" from="(index + (offset))" to="((index + (offset)) - 1)" />
    <mutant id="mutant_31" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.get(int)" from="(index + (offset))" to="((index + (offset)) * -1)" />
    <mutant id="mutant_34" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.remove(int)" from="(index + (offset))" to="((index + (offset)) * -1)" />
    <mutant id="mutant_33" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.remove(int)" from="(index + (offset))" to="((index + (offset)) + 1)" />
    <mutant id="mutant_36" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.set(int,E)" from="(index + (offset))" to="((index + (offset)) + 1)" />
    <mutant id="mutant_35" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.remove(int)" from="(index + (offset))" to="((index + (offset)) - 1)" />
    <mutant id="mutant_63" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(&quot;Index \'&quot; + index)" to="((&quot;Index \'&quot; + index) - 1)" />
    <mutant id="mutant_62" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(&quot;Index \'&quot; + index)" to="((&quot;Index \'&quot; + index) + 1)" />
    <mutant id="mutant_65" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;)" to="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) * -1)" />
    <mutant id="mutant_64" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;)" to="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + 1)" />
    <mutant id="mutant_67" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size))" to="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) + 1)" />
    <mutant id="mutant_66" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;)" to="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) - 1)" />
    <mutant id="mutant_69" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size))" to="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) * -1)" />
    <mutant id="mutant_68" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size))" to="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) - 1)" />
    <mutant id="mutant_70" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) + &quot;\'&quot;)" to="(((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) + &quot;\'&quot;) * -1)" />
    <mutant id="mutant_72" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) + &quot;\'&quot;)" to="(((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) + &quot;\'&quot;) - 1)" />
    <mutant id="mutant_71" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) + &quot;\'&quot;)" to="(((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) + &quot;\'&quot;) + 1)" />
    <mutant id="mutant_1814" viable="true" in="org.apache.commons.collections4.SplitMapUtils$WrappedGet.equals(java.lang.Object)" from="(arg0 instanceof SplitMapUtils.WrappedGet) &amp;&amp; (((SplitMapUtils.WrappedGet&lt;?, ?&gt;)(arg0)).get.equals(this.get))" to="!((arg0 instanceof SplitMapUtils.WrappedGet) &amp;&amp; (((SplitMapUtils.WrappedGet&lt;?, ?&gt;)(arg0)).get.equals(this.get)))" />
    <mutant id="mutant_1815" viable="true" in="org.apache.commons.collections4.SplitMapUtils$WrappedPut.equals(java.lang.Object)" from="(obj instanceof SplitMapUtils.WrappedPut) &amp;&amp; (((SplitMapUtils.WrappedPut&lt;?, ?&gt;)(obj)).put.equals(this.put))" to="!((obj instanceof SplitMapUtils.WrappedPut) &amp;&amp; (((SplitMapUtils.WrappedPut&lt;?, ?&gt;)(obj)).put.equals(this.put)))" />
    <mutant id="mutant_1812" viable="true" in="org.apache.commons.collections4.SetUtils.isEqualSet(java.util.Collection,java.util.Collection)" from="((set1 == null) || (set2 == null))" to="(!((set1 == null) || (set2 == null)))" />
    <mutant id="mutant_1813" viable="true" in="org.apache.commons.collections4.SetUtils.isEqualSet(java.util.Collection,java.util.Collection)" from="((set1 == null) || (set2 == null)) || ((set1.size()) != (set2.size()))" to="!(((set1 == null) || (set2 == null)) || ((set1.size()) != (set2.size())))" />
    <mutant id="mutant_1810" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="&quot;} &quot; + (map.getClass().getName())" to="(&quot;} &quot; + (map.getClass().getName())) * -1" />
    <mutant id="mutant_1811" viable="true" in="org.apache.commons.collections4.MultiMapUtils.isEmpty(org.apache.commons.collections4.MultiValuedMap)" from="(map == null) || (map.isEmpty())" to="!((map == null) || (map.isEmpty()))" />
    <mutant id="mutant_59" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="(index + (offset))" to="((index + (offset)) - 1)" />
    <mutant id="mutant_1809" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="&quot;} &quot; + (map.getClass().getName())" to="(&quot;} &quot; + (map.getClass().getName())) + 1" />
    <mutant id="mutant_1807" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="debug &amp;&amp; (childValue != null)" to="!(debug &amp;&amp; (childValue != null))" />
    <mutant id="mutant_1808" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="&quot;} &quot; + (map.getClass().getName())" to="(&quot;} &quot; + (map.getClass().getName())) - 1" />
    <mutant id="mutant_1805" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) + &quot;] Map)&quot;)" to="(((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) + &quot;] Map)&quot;) - 1)" />
    <mutant id="mutant_1806" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) + &quot;] Map)&quot;)" to="(((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) + &quot;] Map)&quot;) + 1)" />
    <mutant id="mutant_52" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.listIterator(int)" from="((size) + 1)" to="(((size) + 1) + 1)" />
    <mutant id="mutant_51" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.listIterator(int)" from="((size) + 1)" to="(((size) + 1) * -1)" />
    <mutant id="mutant_54" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="((size) + 1)" to="(((size) + 1) * -1)" />
    <mutant id="mutant_53" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.listIterator(int)" from="((size) + 1)" to="(((size) + 1) - 1)" />
    <mutant id="mutant_56" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="((size) + 1)" to="(((size) + 1) - 1)" />
    <mutant id="mutant_55" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="((size) + 1)" to="(((size) + 1) + 1)" />
    <mutant id="mutant_58" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="(index + (offset))" to="((index + (offset)) * -1)" />
    <mutant id="mutant_57" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="(index + (offset))" to="((index + (offset)) + 1)" />
    <mutant id="mutant_61" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(&quot;Index \'&quot; + index)" to="((&quot;Index \'&quot; + index) * -1)" />
    <mutant id="mutant_60" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(index &lt; 0) || (index &gt;= beyond)" to="!((index &lt; 0) || (index &gt;= beyond))" />
    <mutant id="mutant_1803" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1))" to="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) + 1)" />
    <mutant id="mutant_1804" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) + &quot;] Map)&quot;)" to="(((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) + &quot;] Map)&quot;) * -1)" />
    <mutant id="mutant_1801" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1))" to="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) - 1)" />
    <mutant id="mutant_1802" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1))" to="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) * -1)" />
    <mutant id="mutant_1800" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((((lineage.size()) - 1) - lineageIndex) - 1)" to="(((((lineage.size()) - 1) - lineageIndex) - 1) - 1)" />
    <mutant id="mutant_1432" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an internal Entry!&quot;)" to="((h + &quot; is not an internal Entry!&quot;) + 1)" />
    <mutant id="mutant_1433" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an internal Entry!&quot;)" to="((h + &quot; is not an internal Entry!&quot;) - 1)" />
    <mutant id="mutant_1430" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an external Entry!&quot;)" to="((h + &quot; is not an external Entry!&quot;) - 1)" />
    <mutant id="mutant_1431" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an internal Entry!&quot;)" to="((h + &quot; is not an internal Entry!&quot;) * -1)" />
    <mutant id="mutant_1438" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size()))" to="(((sequence1.size()) + (sequence2.size())) * -1)" />
    <mutant id="mutant_1439" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size())) + 2" to="(((sequence1.size()) + (sequence2.size())) + 2) * -1" />
    <mutant id="mutant_1436" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size()))" to="(((sequence1.size()) + (sequence2.size())) + 1)" />
    <mutant id="mutant_1437" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size()))" to="(((sequence1.size()) + (sequence2.size())) - 1)" />
    <mutant id="mutant_1434" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="((p.predecessor) == p) &amp;&amp; ((p.parent) != h)" to="!(((p.predecessor) == p) &amp;&amp; ((p.parent) != h))" />
    <mutant id="mutant_1435" viable="true" in="org.apache.commons.collections4.sequence.ReplacementsFinder.visitKeepCommand(T)" from="(pendingDeletions.isEmpty()) &amp;&amp; (pendingInsertions.isEmpty())" to="!((pendingDeletions.isEmpty()) &amp;&amp; (pendingInsertions.isEmpty()))" />
    <mutant id="mutant_1421" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + lengthInBits)" to="((offsetInBits + lengthInBits) - 1)" />
    <mutant id="mutant_1422" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + lengthInBits)" to="((offsetInBits + lengthInBits) + 1)" />
    <mutant id="mutant_1420" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + lengthInBits)" to="((offsetInBits + lengthInBits) * -1)" />
    <mutant id="mutant_1429" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an external Entry!&quot;)" to="((h + &quot; is not an external Entry!&quot;) + 1)" />
    <mutant id="mutant_1427" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(bitIndex &gt;= 0) &amp;&amp; (bitIndex &lt; lengthInBits)" to="!((bitIndex &gt;= 0) &amp;&amp; (bitIndex &lt; lengthInBits))" />
    <mutant id="mutant_1428" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an external Entry!&quot;)" to="((h + &quot; is not an external Entry!&quot;) * -1)" />
    <mutant id="mutant_1425" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="offsetInBits + lengthInBits" to="(offsetInBits + lengthInBits) + 1" />
    <mutant id="mutant_1426" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(entry == (root)) &amp;&amp; ((lengthInBits(entry.getKey())) &lt; endIndexInBits)" to="!((entry == (root)) &amp;&amp; ((lengthInBits(entry.getKey())) &lt; endIndexInBits))" />
    <mutant id="mutant_1423" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="offsetInBits + lengthInBits" to="(offsetInBits + lengthInBits) * -1" />
    <mutant id="mutant_1424" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="offsetInBits + lengthInBits" to="(offsetInBits + lengthInBits) - 1" />
    <mutant id="mutant_1410" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="((&quot;invalid lookup: &quot; + key) * -1)" />
    <mutant id="mutant_1411" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="((&quot;invalid lookup: &quot; + key) - 1)" />
    <mutant id="mutant_1418" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + (current.bitIndex))" to="((offsetInBits + (current.bitIndex)) - 1)" />
    <mutant id="mutant_1419" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + (current.bitIndex))" to="((offsetInBits + (current.bitIndex)) * -1)" />
    <mutant id="mutant_1416" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="((current.bitIndex) &lt;= (path.bitIndex)) || (lengthInBits &lt; (current.bitIndex))" to="!(((current.bitIndex) &lt;= (path.bitIndex)) || (lengthInBits &lt; (current.bitIndex)))" />
    <mutant id="mutant_1417" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + (current.bitIndex))" to="((offsetInBits + (current.bitIndex)) + 1)" />
    <mutant id="mutant_1414" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(previous != (current.parent.right)) &amp;&amp; (AbstractPatriciaTrie.isValidUplink(current.parent.right, current.parent))" to="!((previous != (current.parent.right)) &amp;&amp; (AbstractPatriciaTrie.isValidUplink(current.parent.right, current.parent)))" />
    <mutant id="mutant_1415" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="((node.parent) != null) &amp;&amp; (node == (node.parent.left))" to="!(((node.parent) != null) &amp;&amp; (node == (node.parent.left)))" />
    <mutant id="mutant_1412" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="((&quot;invalid lookup: &quot; + key) + 1)" />
    <mutant id="mutant_1413" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(previous == null) || (start != (previous.predecessor))" to="!((previous == null) || (start != (previous.predecessor)))" />
    <mutant id="mutant_1409" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="((&quot;invalid lookup: &quot; + key) + 1)" />
    <mutant id="mutant_1400" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="((&quot;invalid lookup: &quot; + key) * -1)" />
    <mutant id="mutant_1407" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="((&quot;invalid lookup: &quot; + key) * -1)" />
    <mutant id="mutant_1408" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="((&quot;invalid lookup: &quot; + key) - 1)" />
    <mutant id="mutant_1405" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="((&quot;invalid lookup: &quot; + key) + 1)" />
    <mutant id="mutant_1406" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getEntry(java.lang.Object)" from="(!(entry.isEmpty())) &amp;&amp; (compareKeys(key, entry.key))" to="!((!(entry.isEmpty())) &amp;&amp; (compareKeys(key, entry.key)))" />
    <mutant id="mutant_1403" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="((&quot;invalid lookup: &quot; + key) * -1)" />
    <mutant id="mutant_1404" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="((&quot;invalid lookup: &quot; + key) - 1)" />
    <mutant id="mutant_1401" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="((&quot;invalid lookup: &quot; + key) - 1)" />
    <mutant id="mutant_1402" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="((&quot;invalid lookup: &quot; + key) + 1)" />
    <mutant id="mutant_602" viable="true" in="org.apache.commons.collections4.map.Flat3Map.put(K,V)" from="((hash1) == hashCode) &amp;&amp; (key.equals(key1))" to="!(((hash1) == hashCode) &amp;&amp; (key.equals(key1)))" />
    <mutant id="mutant_603" viable="true" in="org.apache.commons.collections4.map.Flat3Map.remove(java.lang.Object)" from="((hash3) == hashCode) &amp;&amp; (key.equals(key3))" to="!(((hash3) == hashCode) &amp;&amp; (key.equals(key3)))" />
    <mutant id="mutant_604" viable="true" in="org.apache.commons.collections4.map.Flat3Map.remove(java.lang.Object)" from="((hash2) == hashCode) &amp;&amp; (key.equals(key2))" to="!(((hash2) == hashCode) &amp;&amp; (key.equals(key2)))" />
    <mutant id="mutant_605" viable="true" in="org.apache.commons.collections4.map.Flat3Map.remove(java.lang.Object)" from="((hash1) == hashCode) &amp;&amp; (key.equals(key1))" to="!(((hash1) == hashCode) &amp;&amp; (key.equals(key1)))" />
    <mutant id="mutant_600" viable="true" in="org.apache.commons.collections4.map.Flat3Map.put(K,V)" from="((hash3) == hashCode) &amp;&amp; (key.equals(key3))" to="!(((hash3) == hashCode) &amp;&amp; (key.equals(key3)))" />
    <mutant id="mutant_601" viable="true" in="org.apache.commons.collections4.map.Flat3Map.put(K,V)" from="((hash2) == hashCode) &amp;&amp; (key.equals(key2))" to="!(((hash2) == hashCode) &amp;&amp; (key.equals(key2)))" />
    <mutant id="mutant_1480" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 + 1" to="(end1 + 1) * -1" />
    <mutant id="mutant_606" viable="true" in="org.apache.commons.collections4.map.Flat3Map.remove(java.lang.Object)" from="((hash2) == hashCode) &amp;&amp; (key.equals(key2))" to="!(((hash2) == hashCode) &amp;&amp; (key.equals(key2)))" />
    <mutant id="mutant_607" viable="true" in="org.apache.commons.collections4.map.Flat3Map.remove(java.lang.Object)" from="((hash1) == hashCode) &amp;&amp; (key.equals(key1))" to="!(((hash1) == hashCode) &amp;&amp; (key.equals(key1)))" />
    <mutant id="mutant_608" viable="true" in="org.apache.commons.collections4.map.Flat3Map.remove(java.lang.Object)" from="((hash1) == hashCode) &amp;&amp; (key.equals(key1))" to="!(((hash1) == hashCode) &amp;&amp; (key.equals(key1)))" />
    <mutant id="mutant_609" viable="true" in="org.apache.commons.collections4.map.Flat3Map.containsKey(java.lang.Object)" from="((hash3) == hashCode) &amp;&amp; (key.equals(key3))" to="!(((hash3) == hashCode) &amp;&amp; (key.equals(key3)))" />
    <mutant id="mutant_1476" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="((1 + offset) + 1)" />
    <mutant id="mutant_1477" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="((1 + offset) - 1)" />
    <mutant id="mutant_1474" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="((1 + offset) - 1)" />
    <mutant id="mutant_1475" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="((1 + offset) * -1)" />
    <mutant id="mutant_1472" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="((1 + offset) * -1)" />
    <mutant id="mutant_1473" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="((1 + offset) + 1)" />
    <mutant id="mutant_1470" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((sum % 2) == 0 ? sum : sum + 1) / 2" to="(((sum % 2) == 0 ? sum : sum + 1) / 2) + 1" />
    <mutant id="mutant_1471" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((sum % 2) == 0 ? sum : sum + 1) / 2" to="(((sum % 2) == 0 ? sum : sum + 1) / 2) * -1" />
    <mutant id="mutant_1478" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 + 1" to="(end1 + 1) + 1" />
    <mutant id="mutant_1479" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 + 1" to="(end1 + 1) - 1" />
    <mutant id="mutant_613" viable="true" in="org.apache.commons.collections4.map.Flat3Map.hashCode()" from="(&quot;Invalid map index: &quot; + (size))" to="((&quot;Invalid map index: &quot; + (size)) + 1)" />
    <mutant id="mutant_614" viable="false" in="org.apache.commons.collections4.map.Flat3Map.hashCode()" from="(&quot;Invalid map index: &quot; + (size))" to="((&quot;Invalid map index: &quot; + (size)) * -1)" />
    <mutant id="mutant_615" viable="false" in="org.apache.commons.collections4.map.Flat3Map.toString()" from="(&quot;Invalid map index: &quot; + (size))" to="((&quot;Invalid map index: &quot; + (size)) - 1)" />
    <mutant id="mutant_616" viable="true" in="org.apache.commons.collections4.map.Flat3Map.toString()" from="(&quot;Invalid map index: &quot; + (size))" to="((&quot;Invalid map index: &quot; + (size)) + 1)" />
    <mutant id="mutant_610" viable="true" in="org.apache.commons.collections4.map.Flat3Map.containsKey(java.lang.Object)" from="((hash2) == hashCode) &amp;&amp; (key.equals(key2))" to="!(((hash2) == hashCode) &amp;&amp; (key.equals(key2)))" />
    <mutant id="mutant_611" viable="true" in="org.apache.commons.collections4.map.Flat3Map.containsKey(java.lang.Object)" from="((hash1) == hashCode) &amp;&amp; (key.equals(key1))" to="!(((hash1) == hashCode) &amp;&amp; (key.equals(key1)))" />
    <mutant id="mutant_612" viable="false" in="org.apache.commons.collections4.map.Flat3Map.hashCode()" from="(&quot;Invalid map index: &quot; + (size))" to="((&quot;Invalid map index: &quot; + (size)) - 1)" />
    <mutant id="mutant_617" viable="false" in="org.apache.commons.collections4.map.Flat3Map.toString()" from="(&quot;Invalid map index: &quot; + (size))" to="((&quot;Invalid map index: &quot; + (size)) * -1)" />
    <mutant id="mutant_618" viable="false" in="org.apache.commons.collections4.map.Flat3Map.convertToMap()" from="(&quot;Invalid map index: &quot; + (size))" to="((&quot;Invalid map index: &quot; + (size)) - 1)" />
    <mutant id="mutant_619" viable="true" in="org.apache.commons.collections4.map.Flat3Map.convertToMap()" from="(&quot;Invalid map index: &quot; + (size))" to="((&quot;Invalid map index: &quot; + (size)) + 1)" />
    <mutant id="mutant_1465" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(sum % 2)" to="((sum % 2) - 1)" />
    <mutant id="mutant_1466" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="sum + 1" to="(sum + 1) * -1" />
    <mutant id="mutant_1463" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(sum % 2)" to="((sum % 2) + 1)" />
    <mutant id="mutant_1464" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(sum % 2)" to="((sum % 2) * -1)" />
    <mutant id="mutant_1461" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="n + m" to="(n + m) + 1" />
    <mutant id="mutant_1462" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="n + m" to="(n + m) * -1" />
    <mutant id="mutant_1460" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="n + m" to="(n + m) - 1" />
    <mutant id="mutant_1469" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((sum % 2) == 0 ? sum : sum + 1) / 2" to="(((sum % 2) == 0 ? sum : sum + 1) / 2) - 1" />
    <mutant id="mutant_1467" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="sum + 1" to="(sum + 1) - 1" />
    <mutant id="mutant_1468" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="sum + 1" to="(sum + 1) + 1" />
    <mutant id="mutant_624" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;Entry.after=null, header.after&quot; + (header.after))" to="((&quot;Entry.after=null, header.after&quot; + (header.after)) - 1)" />
    <mutant id="mutant_625" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;)" to="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + 1)" />
    <mutant id="mutant_626" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;)" to="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) - 1)" />
    <mutant id="mutant_627" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;)" to="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) * -1)" />
    <mutant id="mutant_620" viable="false" in="org.apache.commons.collections4.map.Flat3Map.convertToMap()" from="(&quot;Invalid map index: &quot; + (size))" to="((&quot;Invalid map index: &quot; + (size)) * -1)" />
    <mutant id="mutant_621" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(reuse != (header)) &amp;&amp; (reuse != null)" to="!((reuse != (header)) &amp;&amp; (reuse != null))" />
    <mutant id="mutant_622" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;Entry.after=null, header.after&quot; + (header.after))" to="((&quot;Entry.after=null, header.after&quot; + (header.after)) + 1)" />
    <mutant id="mutant_623" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;Entry.after=null, header.after&quot; + (header.after))" to="((&quot;Entry.after=null, header.after&quot; + (header.after)) * -1)" />
    <mutant id="mutant_628" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) - 1)" />
    <mutant id="mutant_629" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + 1)" />
    <mutant id="mutant_1454" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end2 - start2" to="(end2 - start2) - 1" />
    <mutant id="mutant_1455" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end2 - start2" to="(end2 - start2) * -1" />
    <mutant id="mutant_1452" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 - start1" to="(end1 - start1) - 1" />
    <mutant id="mutant_1453" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end2 - start2" to="(end2 - start2) + 1" />
    <mutant id="mutant_1450" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 - start1" to="(end1 - start1) + 1" />
    <mutant id="mutant_1451" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 - start1" to="(end1 - start1) * -1" />
    <mutant id="mutant_1458" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="m - n" to="(m - n) + 1" />
    <mutant id="mutant_1459" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="m - n" to="(m - n) * -1" />
    <mutant id="mutant_1456" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(m == 0) || (n == 0)" to="!((m == 0) || (n == 0))" />
    <mutant id="mutant_1457" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="m - n" to="(m - n) - 1" />
    <mutant id="mutant_635" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) * -1)" />
    <mutant id="mutant_636" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) - 1)" />
    <mutant id="mutant_637" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + 1)" />
    <mutant id="mutant_638" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) - 1)" />
    <mutant id="mutant_631" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + 1)" />
    <mutant id="mutant_632" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) - 1)" />
    <mutant id="mutant_633" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) * -1)" />
    <mutant id="mutant_634" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + 1)" />
    <mutant id="mutant_639" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) * -1)" />
    <mutant id="mutant_1443" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="((end - diag) * -1)" />
    <mutant id="mutant_1444" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="((end - diag) - 1)" />
    <mutant id="mutant_1441" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size())) + 2" to="(((sequence1.size()) + (sequence2.size())) + 2) - 1" />
    <mutant id="mutant_1442" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="((end - diag) + 1)" />
    <mutant id="mutant_1440" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size())) + 2" to="(((sequence1.size()) + (sequence2.size())) + 2) + 1" />
    <mutant id="mutant_1449" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(((end - diag) &lt; end2) &amp;&amp; (end &lt; end1)) &amp;&amp; (equator.equate(sequence1.get(end), sequence2.get((end - diag))))" to="!((((end - diag) &lt; end2) &amp;&amp; (end &lt; end1)) &amp;&amp; (equator.equate(sequence1.get(end), sequence2.get((end - diag)))))" />
    <mutant id="mutant_630" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) * -1)" />
    <mutant id="mutant_1447" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="((end - diag) * -1)" />
    <mutant id="mutant_1448" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="((end - diag) - 1)" />
    <mutant id="mutant_1445" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(((end - diag) &lt; end2) &amp;&amp; (end &lt; end1))" to="(!(((end - diag) &lt; end2) &amp;&amp; (end &lt; end1)))" />
    <mutant id="mutant_1446" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="((end - diag) + 1)" />
    <mutant id="mutant_646" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) * -1)" />
    <mutant id="mutant_647" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + 1)" />
    <mutant id="mutant_648" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) - 1)" />
    <mutant id="mutant_649" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + 1)" />
    <mutant id="mutant_642" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) * -1)" />
    <mutant id="mutant_643" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) * -1)" />
    <mutant id="mutant_644" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) - 1)" />
    <mutant id="mutant_645" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + 1)" />
    <mutant id="mutant_1040" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.remove()" from="(!(removeState)) || (((wrappedIteratorIndex) - (currentIndex)) &gt; 1)" to="!((!(removeState)) || (((wrappedIteratorIndex) - (currentIndex)) &gt; 1))" />
    <mutant id="mutant_1036" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.previousIndex()" from="(currentIndex) - 1" to="((currentIndex) - 1) * -1" />
    <mutant id="mutant_1037" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.remove()" from="((wrappedIteratorIndex) - (currentIndex))" to="(((wrappedIteratorIndex) - (currentIndex)) * -1)" />
    <mutant id="mutant_1034" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.previousIndex()" from="(currentIndex) - 1" to="((currentIndex) - 1) + 1" />
    <mutant id="mutant_1035" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.previousIndex()" from="(currentIndex) - 1" to="((currentIndex) - 1) - 1" />
    <mutant id="mutant_1032" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.next()" from="((currentIndex) - 1)" to="(((currentIndex) - 1) * -1)" />
    <mutant id="mutant_1033" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.hasNext()" from="((currentIndex) == (wrappedIteratorIndex)) || ((iterator) instanceof java.util.ListIterator)" to="!(((currentIndex) == (wrappedIteratorIndex)) || ((iterator) instanceof java.util.ListIterator))" />
    <mutant id="mutant_1030" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.next()" from="((currentIndex) - 1)" to="(((currentIndex) - 1) + 1)" />
    <mutant id="mutant_1031" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.next()" from="((currentIndex) - 1)" to="(((currentIndex) - 1) - 1)" />
    <mutant id="mutant_640" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + 1)" />
    <mutant id="mutant_641" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) - 1)" />
    <mutant id="mutant_1038" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.remove()" from="((wrappedIteratorIndex) - (currentIndex))" to="(((wrappedIteratorIndex) - (currentIndex)) - 1)" />
    <mutant id="mutant_1039" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.remove()" from="((wrappedIteratorIndex) - (currentIndex))" to="(((wrappedIteratorIndex) - (currentIndex)) + 1)" />
    <mutant id="mutant_657" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + 1)" />
    <mutant id="mutant_658" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) + 1)" />
    <mutant id="mutant_659" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) - 1)" />
    <mutant id="mutant_653" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) - 1)" />
    <mutant id="mutant_654" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + 1)" />
    <mutant id="mutant_655" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) * -1)" />
    <mutant id="mutant_656" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) - 1)" />
    <mutant id="mutant_1025" viable="true" in="org.apache.commons.collections4.iterators.FilterListIterator.previousIndex()" from="(nextIndex) - 1" to="((nextIndex) - 1) * -1" />
    <mutant id="mutant_1026" viable="true" in="org.apache.commons.collections4.iterators.FilterListIterator.previousIndex()" from="(nextIndex) - 1" to="((nextIndex) - 1) + 1" />
    <mutant id="mutant_1023" viable="true" in="org.apache.commons.collections4.iterators.FilterListIterator.hasPrevious()" from="(previousObjectSet) || (setPreviousObject())" to="!((previousObjectSet) || (setPreviousObject()))" />
    <mutant id="mutant_1024" viable="true" in="org.apache.commons.collections4.iterators.FilterListIterator.previousIndex()" from="(nextIndex) - 1" to="((nextIndex) - 1) - 1" />
    <mutant id="mutant_1021" viable="true" in="org.apache.commons.collections4.iterators.FilterIterator.hasNext()" from="(nextObjectSet) || (setNextObject())" to="!((nextObjectSet) || (setNextObject()))" />
    <mutant id="mutant_1022" viable="true" in="org.apache.commons.collections4.iterators.FilterListIterator.hasNext()" from="(nextObjectSet) || (setNextObject())" to="!((nextObjectSet) || (setNextObject()))" />
    <mutant id="mutant_1020" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_650" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) * -1)" />
    <mutant id="mutant_651" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) - 1)" />
    <mutant id="mutant_652" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) * -1)" />
    <mutant id="mutant_1029" viable="true" in="org.apache.commons.collections4.iterators.LazyIteratorChain.updateCurrentIterator()" from="((currentIterator.hasNext()) == false) &amp;&amp; (!(chainExhausted))" to="!(((currentIterator.hasNext()) == false) &amp;&amp; (!(chainExhausted)))" />
    <mutant id="mutant_1027" viable="true" in="org.apache.commons.collections4.iterators.IteratorChain.updateCurrentIterator()" from="((currentIterator.hasNext()) == false) &amp;&amp; (!(iteratorChain.isEmpty()))" to="!(((currentIterator.hasNext()) == false) &amp;&amp; (!(iteratorChain.isEmpty())))" />
    <mutant id="mutant_1028" viable="true" in="org.apache.commons.collections4.iterators.IteratorIterable(java.util.Iterator,boolean)" from="multipleUse &amp;&amp; (!(iterator instanceof org.apache.commons.collections4.ResettableIterator))" to="!(multipleUse &amp;&amp; (!(iterator instanceof org.apache.commons.collections4.ResettableIterator)))" />
    <mutant id="mutant_668" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) * -1)" />
    <mutant id="mutant_669" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + 1)" />
    <mutant id="mutant_664" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;)" to="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) * -1)" />
    <mutant id="mutant_665" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;)" to="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) - 1)" />
    <mutant id="mutant_666" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;)" to="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + 1)" />
    <mutant id="mutant_667" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) - 1)" />
    <mutant id="mutant_1014" viable="true" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + 1)" />
    <mutant id="mutant_1498" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vDown[(i - 1)]) + 1" to="((vDown[(i - 1)]) + 1) + 1" />
    <mutant id="mutant_1015" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) - 1)" />
    <mutant id="mutant_1499" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vDown[(i - 1)]) + 1" to="((vDown[(i - 1)]) + 1) - 1" />
    <mutant id="mutant_1012" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) * -1)" />
    <mutant id="mutant_1496" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_1013" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) - 1)" />
    <mutant id="mutant_1497" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_1010" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="((&quot;MapIterator[&quot; + (getKey())) - 1)" />
    <mutant id="mutant_1494" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_1011" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="((&quot;MapIterator[&quot; + (getKey())) * -1)" />
    <mutant id="mutant_1495" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_1492" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_1493" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_660" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;) * -1)" />
    <mutant id="mutant_661" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;reuse=null, header.after=&quot; + (header.after))" to="((&quot;reuse=null, header.after=&quot; + (header.after)) * -1)" />
    <mutant id="mutant_662" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;reuse=null, header.after=&quot; + (header.after))" to="((&quot;reuse=null, header.after=&quot; + (header.after)) - 1)" />
    <mutant id="mutant_663" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;reuse=null, header.after=&quot; + (header.after))" to="((&quot;reuse=null, header.after=&quot; + (header.after)) + 1)" />
    <mutant id="mutant_1018" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_1019" viable="true" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_1016" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) * -1)" />
    <mutant id="mutant_1017" viable="true" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + 1)" />
    <mutant id="mutant_679" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) - 1)" />
    <mutant id="mutant_675" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) * -1)" />
    <mutant id="mutant_676" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + 1)" />
    <mutant id="mutant_677" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) - 1)" />
    <mutant id="mutant_678" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) * -1)" />
    <mutant id="mutant_1490" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k != d) &amp;&amp; ((vDown[(i - 1)]) &lt; (vDown[(i + 1)])))" to="(!((k != d) &amp;&amp; ((vDown[(i - 1)]) &lt; (vDown[(i + 1)]))))" />
    <mutant id="mutant_1491" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k == (-d)) || ((k != d) &amp;&amp; ((vDown[(i - 1)]) &lt; (vDown[(i + 1)])))" to="!((k == (-d)) || ((k != d) &amp;&amp; ((vDown[(i - 1)]) &lt; (vDown[(i + 1)]))))" />
    <mutant id="mutant_1003" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="((pos) - (offset))" to="(((pos) - (offset)) + 1)" />
    <mutant id="mutant_1487" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_1004" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="(((pos) - (offset)) + 1)" to="((((pos) - (offset)) + 1) - 1)" />
    <mutant id="mutant_1488" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_1001" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="((pos) - (offset))" to="(((pos) - (offset)) * -1)" />
    <mutant id="mutant_1485" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_1002" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="((pos) - (offset))" to="(((pos) - (offset)) - 1)" />
    <mutant id="mutant_1486" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_1483" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="k + offset" to="(k + offset) - 1" />
    <mutant id="mutant_1000" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex)) - 1" to="(((this.index) - (this.startIndex)) - 1) * -1" />
    <mutant id="mutant_1484" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_1481" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="k + offset" to="(k + offset) * -1" />
    <mutant id="mutant_1482" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="k + offset" to="(k + offset) + 1" />
    <mutant id="mutant_671" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + 1)" />
    <mutant id="mutant_672" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) - 1)" />
    <mutant id="mutant_673" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + 1)" />
    <mutant id="mutant_1009" viable="true" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="((&quot;MapIterator[&quot; + (getKey())) + 1)" />
    <mutant id="mutant_674" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) - 1)" />
    <mutant id="mutant_1007" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.init()" from="((pos) &lt; (offset)) &amp;&amp; (iterator.hasNext())" to="!(((pos) &lt; (offset)) &amp;&amp; (iterator.hasNext()))" />
    <mutant id="mutant_1008" viable="true" in="org.apache.commons.collections4.iterators.CollatingIterator.hasNext()" from="(anyValueSet(valueSet)) || (anyHasNext(iterators))" to="!((anyValueSet(valueSet)) || (anyHasNext(iterators)))" />
    <mutant id="mutant_1005" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="(((pos) - (offset)) + 1)" to="((((pos) - (offset)) + 1) * -1)" />
    <mutant id="mutant_1489" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_670" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) * -1)" />
    <mutant id="mutant_1006" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="(((pos) - (offset)) + 1)" to="((((pos) - (offset)) + 1) + 1)" />
  </mutants>
</mutation>
