<?xml version="1.0" encoding="UTF-8"?>
<mutation operator-id="AOR" parent="../../../smf.run.xml" name="main" config-file="mutations.xml" time="35281">
  <class-to-mutate />
  <mutants>
    <mutant id="mutant_9" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((childMap) == null ? 0 : childMap.hashCode())" to="(childMap) == null ? 0 : childMap.hashCode()" />
    <mutant id="mutant_49" viable="false" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) + (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)" to="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) / (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)" />
    <mutant id="mutant_8" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((childMap) == null ? 0 : childMap.hashCode())" to="(prime * result) / ((childMap) == null ? 0 : childMap.hashCode())" />
    <mutant id="mutant_48" viable="true" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) + (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)" to="(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))" />
    <mutant id="mutant_5" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="prime" />
    <mutant id="mutant_4" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="(prime % result)" />
    <mutant id="mutant_7" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((childMap) == null ? 0 : childMap.hashCode())" to="(prime * result) * ((childMap) == null ? 0 : childMap.hashCode())" />
    <mutant id="mutant_6" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((childMap) == null ? 0 : childMap.hashCode())" to="(prime * result) - ((childMap) == null ? 0 : childMap.hashCode())" />
    <mutant id="mutant_41" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.generate2String(com.github.sworm.spojo.data.Property)" from="(length - 1)" to="(length % 1)" />
    <mutant id="mutant_40" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.generate2String(com.github.sworm.spojo.data.Property)" from="(length - 1)" to="(length * 1)" />
    <mutant id="mutant_43" viable="false" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg)))" to="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) % (ClassUtils.convertClassNameToResourcePath(pkg)))" />
    <mutant id="mutant_42" viable="true" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg)))" to="(ClassUtils.convertClassNameToResourcePath(pkg))" />
    <mutant id="mutant_45" viable="false" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg)))" to="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) / (ClassUtils.convertClassNameToResourcePath(pkg)))" />
    <mutant id="mutant_44" viable="true" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg)))" to="(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX)" />
    <mutant id="mutant_47" viable="false" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg)))" to="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) - (ClassUtils.convertClassNameToResourcePath(pkg)))" />
    <mutant id="mutant_46" viable="false" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg)))" to="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) * (ClassUtils.convertClassNameToResourcePath(pkg)))" />
    <mutant id="mutant_50" viable="true" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) + (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)" to="AnnotationLoaderFactoryBean.RESOURCE_PATTERN" />
    <mutant id="mutant_1" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="result" />
    <mutant id="mutant_0" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="(prime / result)" />
    <mutant id="mutant_3" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="(prime - result)" />
    <mutant id="mutant_2" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="(prime + result)" />
    <mutant id="mutant_38" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.generate2String(com.github.sworm.spojo.data.Property)" from="(length - 1)" to="(length / 1)" />
    <mutant id="mutant_37" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.generate2String(com.github.sworm.spojo.data.Property)" from="(length - 1)" to="length" />
    <mutant id="mutant_39" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.generate2String(com.github.sworm.spojo.data.Property)" from="(length - 1)" to="(length + 1)" />
    <mutant id="mutant_30" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((definition) == null ? 0 : definition.hashCode())" to="(prime * result) / ((definition) == null ? 0 : definition.hashCode())" />
    <mutant id="mutant_32" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((definition) == null ? 0 : definition.hashCode())" to="(prime * result) * ((definition) == null ? 0 : definition.hashCode())" />
    <mutant id="mutant_31" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((definition) == null ? 0 : definition.hashCode())" to="(prime * result) - ((definition) == null ? 0 : definition.hashCode())" />
    <mutant id="mutant_34" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((definition) == null ? 0 : definition.hashCode())" to="prime * result" />
    <mutant id="mutant_33" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((definition) == null ? 0 : definition.hashCode())" to="(prime * result) % ((definition) == null ? 0 : definition.hashCode())" />
    <mutant id="mutant_36" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.generate2String(com.github.sworm.spojo.data.Property)" from="(length - 1)" to="1" />
    <mutant id="mutant_35" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((definition) == null ? 0 : definition.hashCode())" to="(definition) == null ? 0 : definition.hashCode()" />
    <mutant id="mutant_27" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="(prime - result)" />
    <mutant id="mutant_26" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="(prime + result)" />
    <mutant id="mutant_29" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="prime" />
    <mutant id="mutant_28" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="(prime % result)" />
    <mutant id="mutant_63" viable="false" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="((&quot;The interface: \'&quot; + ret) + &quot;\' can\'t be instanciated&quot;)" to="((&quot;The interface: \'&quot; + ret) - &quot;\' can\'t be instanciated&quot;)" />
    <mutant id="mutant_62" viable="false" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="((&quot;The interface: \'&quot; + ret) + &quot;\' can\'t be instanciated&quot;)" to="((&quot;The interface: \'&quot; + ret) % &quot;\' can\'t be instanciated&quot;)" />
    <mutant id="mutant_21" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((name) == null ? 0 : name.hashCode())" to="(prime * result) % ((name) == null ? 0 : name.hashCode())" />
    <mutant id="mutant_65" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="((&quot;The interface: \'&quot; + ret) + &quot;\' can\'t be instanciated&quot;)" to="(&quot;The interface: \'&quot; + ret)" />
    <mutant id="mutant_20" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((name) == null ? 0 : name.hashCode())" to="(prime * result) - ((name) == null ? 0 : name.hashCode())" />
    <mutant id="mutant_64" viable="false" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="((&quot;The interface: \'&quot; + ret) + &quot;\' can\'t be instanciated&quot;)" to="((&quot;The interface: \'&quot; + ret) * &quot;\' can\'t be instanciated&quot;)" />
    <mutant id="mutant_23" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((name) == null ? 0 : name.hashCode())" to="(name) == null ? 0 : name.hashCode()" />
    <mutant id="mutant_22" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((name) == null ? 0 : name.hashCode())" to="prime * result" />
    <mutant id="mutant_25" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="result" />
    <mutant id="mutant_24" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="(prime / result)" />
    <mutant id="mutant_16" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="(prime % result)" />
    <mutant id="mutant_15" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="(prime - result)" />
    <mutant id="mutant_59" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="(&quot;The interface: \'&quot; + ret)" to="ret" />
    <mutant id="mutant_18" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((name) == null ? 0 : name.hashCode())" to="(prime * result) / ((name) == null ? 0 : name.hashCode())" />
    <mutant id="mutant_17" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="prime" />
    <mutant id="mutant_19" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((name) == null ? 0 : name.hashCode())" to="(prime * result) * ((name) == null ? 0 : name.hashCode())" />
    <mutant id="mutant_52" viable="false" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) + (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)" to="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) % (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)" />
    <mutant id="mutant_51" viable="false" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) + (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)" to="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) - (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)" />
    <mutant id="mutant_10" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((childMap) == null ? 0 : childMap.hashCode())" to="(prime * result) % ((childMap) == null ? 0 : childMap.hashCode())" />
    <mutant id="mutant_54" viable="false" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="(&quot;The interface: \'&quot; + ret)" to="(&quot;The interface: \'&quot; / ret)" />
    <mutant id="mutant_53" viable="false" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) + (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)" to="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) * (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)" />
    <mutant id="mutant_12" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="(prime / result)" />
    <mutant id="mutant_56" viable="false" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="(&quot;The interface: \'&quot; + ret)" to="(&quot;The interface: \'&quot; - ret)" />
    <mutant id="mutant_11" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((childMap) == null ? 0 : childMap.hashCode())" to="prime * result" />
    <mutant id="mutant_55" viable="false" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="(&quot;The interface: \'&quot; + ret)" to="(&quot;The interface: \'&quot; * ret)" />
    <mutant id="mutant_14" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="(prime + result)" />
    <mutant id="mutant_58" viable="false" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="(&quot;The interface: \'&quot; + ret)" to="(&quot;The interface: \'&quot; % ret)" />
    <mutant id="mutant_13" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="result" />
    <mutant id="mutant_57" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="(&quot;The interface: \'&quot; + ret)" to="&quot;The interface: \'&quot;" />
    <mutant id="mutant_61" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="((&quot;The interface: \'&quot; + ret) + &quot;\' can\'t be instanciated&quot;)" to="&quot;\' can\'t be instanciated&quot;" />
    <mutant id="mutant_60" viable="false" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="((&quot;The interface: \'&quot; + ret) + &quot;\' can\'t be instanciated&quot;)" to="((&quot;The interface: \'&quot; + ret) / &quot;\' can\'t be instanciated&quot;)" />
  </mutants>
</mutation>
