<?xml version="1.0" encoding="UTF-8"?>
<mutation operator-id="AOR" parent="../../../smf.run.xml" name="main" config-file="mutations.xml" time="105731">
  <class-to-mutate />
  <mutants>
    <mutant id="mutant_569" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)" to="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) * (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_565" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size * 1)" />
    <mutant id="mutant_566" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(line.length()) - 1" to="(line.length()) * 1" />
    <mutant id="mutant_567" viable="false" in="?" from="1024 * 4" to="4" />
    <mutant id="mutant_568" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;)" to="&quot;\' after copy to \'&quot;" />
    <mutant id="mutant_2172" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) + length)" to="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) * length)" />
    <mutant id="mutant_2173" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart) + 1" to="(currentLastBytePos) - lineStart" />
    <mutant id="mutant_2170" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) * createDestDir)" />
    <mutant id="mutant_2171" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) + timeout)" to="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;)" />
    <mutant id="mutant_2169" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="&quot;Destination \'&quot;" />
    <mutant id="mutant_2167" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; is not a directory&quot;" to="directory % &quot; is not a directory&quot;" />
    <mutant id="mutant_2168" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)" to="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) / (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_2165" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" from="(&quot;Stream not configure to detect &quot; + bom)" to="(&quot;Stream not configure to detect &quot; - bom)" />
    <mutant id="mutant_2166" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) - &quot;(&quot;)" />
    <mutant id="mutant_2163" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 2)" to="(offset / 2)" />
    <mutant id="mutant_2164" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; is not a directory&quot;)" to="(directory * &quot; is not a directory&quot;)" />
    <mutant id="mutant_561" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="srcFile" />
    <mutant id="mutant_562" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path)" to="(&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;)" />
    <mutant id="mutant_563" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;Directory \'&quot; + parent)" to="parent" />
    <mutant id="mutant_564" viable="false" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not write to lockDir: &quot; + (lockDir.getAbsolutePath()))" to="(&quot;Could not write to lockDir: &quot; - (lockDir.getAbsolutePath()))" />
    <mutant id="mutant_560" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;)" to="&quot; expected=&quot;" />
    <mutant id="mutant_576" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;)" to="(&quot;Failed to delete original file \'&quot; + srcFile)" />
    <mutant id="mutant_577" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="prefix % 1" />
    <mutant id="mutant_578" viable="true" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString())) + &quot;]&quot;" to="((super.toString()) + &quot;[&quot;) + (delegate.toString())" />
    <mutant id="mutant_579" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_KB)" to="FileUtils.ONE_KB" />
    <mutant id="mutant_2161" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="i" />
    <mutant id="mutant_2162" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)" to="((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_2160" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;)" to="((&quot;Length to read: &quot; + expected) % &quot; actual: &quot;)" />
    <mutant id="mutant_2158" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="length - ((int)(((position) - (size))))" to="length * ((int)(((position) - (size))))" />
    <mutant id="mutant_2159" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) / &quot;\' did not return numeric data as expected &quot;)" />
    <mutant id="mutant_2156" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="destFile" />
    <mutant id="mutant_2157" viable="true" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="&quot;(&quot;" />
    <mutant id="mutant_2154" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="offset + index" to="offset * index" />
    <mutant id="mutant_2155" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="(size / i)" />
    <mutant id="mutant_2152" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 1)" to="offset" />
    <mutant id="mutant_2153" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) * destFile)" />
    <mutant id="mutant_572" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' already exists&quot;)" to="&quot;\' already exists&quot;" />
    <mutant id="mutant_573" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="&quot;Destination \'&quot;" />
    <mutant id="mutant_574" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="((&quot;The reference file \'&quot; + reference) * &quot;\' doesn\'t exist&quot;)" />
    <mutant id="mutant_575" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="((&quot;Array Size=&quot; + (b.length)) * &quot;, offset=&quot;)" />
    <mutant id="mutant_570" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 7)" to="(offset % 7)" />
    <mutant id="mutant_571" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="(Math.min(posUnix, posWin)) / 1" />
    <mutant id="mutant_107" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' directory cannot be created&quot;)" to="((&quot;Destination \'&quot; + destDir) - &quot;\' directory cannot be created&quot;)" />
    <mutant id="mutant_108" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) / &quot;]&quot;)" />
    <mutant id="mutant_109" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(&quot;Destination \'&quot; + destDir)" />
    <mutant id="mutant_103" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;)" to="(&quot;Command line threw an InterruptedException &quot; / &quot;for command &quot;)" />
    <mutant id="mutant_587" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; / destDir)" />
    <mutant id="mutant_104" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) % off)" />
    <mutant id="mutant_588" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) / actual)" />
    <mutant id="mutant_105" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(&quot;Destination \'&quot; + destDir)" />
    <mutant id="mutant_589" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; * file)" />
    <mutant id="mutant_106" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) + &quot; PB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) - &quot; PB&quot;" />
    <mutant id="mutant_2150" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) % &quot;(&quot;)" />
    <mutant id="mutant_2151" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(&quot;Length to read: &quot; + length)" to="length" />
    <mutant id="mutant_2147" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart) + 1" to="((currentLastBytePos) - lineStart) % 1" />
    <mutant id="mutant_2148" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 3)" to="(i / 3)" />
    <mutant id="mutant_1298" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="((&quot;The filter[&quot; + i) + &quot;] is null&quot;)" to="((&quot;The filter[&quot; + i) * &quot;] is null&quot;)" />
    <mutant id="mutant_2145" viable="true" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not write to lockDir: &quot; + (lockDir.getAbsolutePath()))" to="&quot;Could not write to lockDir: &quot;" />
    <mutant id="mutant_1299" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString())) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + (filter.toString())) - &quot;)&quot;" />
    <mutant id="mutant_2146" viable="false" in="org.apache.commons.io.FileUtils.touch(java.io.File)" from="(&quot;Unable to set the last modification time for &quot; + file)" to="(&quot;Unable to set the last modification time for &quot; / file)" />
    <mutant id="mutant_1296" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(&quot;Number of characters to skip is less than zero: &quot; + n)" to="(&quot;Number of characters to skip is less than zero: &quot; % n)" />
    <mutant id="mutant_2143" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) + &quot;]&quot;" to="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) - &quot;]&quot;" />
    <mutant id="mutant_1297" viable="true" in="org.apache.commons.io.FilenameUtils.getName(java.lang.String)" from="(index + 1)" to="(index / 1)" />
    <mutant id="mutant_2144" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; does not exist&quot;" to="directory / &quot; does not exist&quot;" />
    <mutant id="mutant_1294" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="(pos + i) - 1" />
    <mutant id="mutant_2141" viable="false" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="(&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath()))" to="(&quot;Can\'t write file, lock &quot; % (lockFile.getAbsolutePath()))" />
    <mutant id="mutant_1295" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((&quot;XML prolog or ROOT element not found on first &quot; + offset) + &quot; bytes&quot;)" to="((&quot;XML prolog or ROOT element not found on first &quot; + offset) * &quot; bytes&quot;)" />
    <mutant id="mutant_2142" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="index + separatorAdd" to="separatorAdd" />
    <mutant id="mutant_583" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; * destDir)" />
    <mutant id="mutant_100" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString()))" to="(((super.toString()) + &quot;(&quot;) * (filter.toString()))" />
    <mutant id="mutant_584" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_101" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) % &quot;for path \'&quot;)" />
    <mutant id="mutant_585" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) + lines)" to="lines" />
    <mutant id="mutant_102" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_586" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is read-only&quot;)" to="((&quot;Destination \'&quot; + destFile) - &quot;\' exists but is read-only&quot;)" />
    <mutant id="mutant_580" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;)" to="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) * &quot;\' for command &quot;)" />
    <mutant id="mutant_581" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="((&quot;File \'&quot; + file) / &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_2149" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) - &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_582" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' does not exist&quot;)" to="((&quot;File \'&quot; + file) * &quot;\' does not exist&quot;)" />
    <mutant id="mutant_118" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="length - ((int)(((position) - (size))))" to="length" />
    <mutant id="mutant_119" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_114" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 2)" to="(offset - 2)" />
    <mutant id="mutant_598" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(off + size)" to="size" />
    <mutant id="mutant_115" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) % &quot;\'- check path is valid&quot;)" />
    <mutant id="mutant_599" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) + &quot;\'&quot;)" to="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) - &quot;\'&quot;)" />
    <mutant id="mutant_116" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(textIdx + 1)" to="(textIdx % 1)" />
    <mutant id="mutant_117" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="(&quot;File &quot; + directory)" to="directory" />
    <mutant id="mutant_1292" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size))" to="(((super.toString()) + &quot;(&quot;) + condition)" />
    <mutant id="mutant_1293" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 3)" to="(offset * 3)" />
    <mutant id="mutant_2140" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream(int)" from="(&quot;Negative initial size: &quot; + size)" to="&quot;Negative initial size: &quot;" />
    <mutant id="mutant_1290" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) + &quot;]&quot;" to="((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)" />
    <mutant id="mutant_1291" viable="true" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="(&quot;write(&quot; + b)" to="b" />
    <mutant id="mutant_1289" viable="false" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="((&quot;write(&quot; + b) + &quot;) failed: stream is closed&quot;)" to="((&quot;write(&quot; + b) * &quot;) failed: stream is closed&quot;)" />
    <mutant id="mutant_2136" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="(position + c)" to="position" />
    <mutant id="mutant_2137" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(length - totalRead)" to="totalRead" />
    <mutant id="mutant_1287" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 1)" to="1" />
    <mutant id="mutant_2134" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) + maxBytesPerChar)" to="(((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) % maxBytesPerChar)" />
    <mutant id="mutant_1288" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="(size) - (position)" to="position" />
    <mutant id="mutant_2135" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is a directory&quot;)" to="(&quot;Destination \'&quot; + destFile)" />
    <mutant id="mutant_1285" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="&quot;Unable to delete file: &quot; + file" to="file" />
    <mutant id="mutant_2132" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" />
    <mutant id="mutant_1286" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="inBufferPos" />
    <mutant id="mutant_2133" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="(&quot;Array Size=&quot; - (b.length))" />
    <mutant id="mutant_1283" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40))" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) * (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40))" />
    <mutant id="mutant_2130" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="(freeSpaceWindows(path, timeout)) / (FileUtils.ONE_KB)" to="FileUtils.ONE_KB" />
    <mutant id="mutant_1284" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="off" />
    <mutant id="mutant_2131" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="(prefix % 2)" />
    <mutant id="mutant_110" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;)" to="(&quot;Source \'&quot; + srcFile)" />
    <mutant id="mutant_594" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) - &quot;, length=&quot;)" />
    <mutant id="mutant_111" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) - &quot;]&quot;)" />
    <mutant id="mutant_595" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;) + &quot;not a directory. Unable to create directory.&quot;" to="((&quot;File &quot; + directory) + &quot; exists and is &quot;) / &quot;not a directory. Unable to create directory.&quot;" />
    <mutant id="mutant_112" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate)" to="(((super.toString()) + &quot;(&quot;) - delegate)" />
    <mutant id="mutant_596" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16))" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) * ((value3 &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_113" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_TB)" to="(FileUtils.ONE_KB) + (FileUtils.ONE_TB)" />
    <mutant id="mutant_597" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="len" />
    <mutant id="mutant_590" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="((int)(((position) - (size))))" to="((position) + (size))" />
    <mutant id="mutant_591" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(textIdx + 1)" to="(textIdx / 1)" />
    <mutant id="mutant_592" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) * (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_2138" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position()))" to="(&quot;Unexpected CharBuffer postion: actual=&quot; * (cbuf.position()))" />
    <mutant id="mutant_593" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) % (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_2139" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(count) - (filledBufferSum)" to="(count) + (filledBufferSum)" />
    <mutant id="mutant_129" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_125" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) * &quot;]&quot;" />
    <mutant id="mutant_126" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; % srcFile)" />
    <mutant id="mutant_127" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((&quot;XML prolog or ROOT element not found on first &quot; + offset) + &quot; bytes&quot;)" to="((&quot;XML prolog or ROOT element not found on first &quot; + offset) - &quot; bytes&quot;)" />
    <mutant id="mutant_128" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; * destFile)" />
    <mutant id="mutant_121" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="&quot;Destination directory \'&quot;" />
    <mutant id="mutant_122" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 2)" to="(offset % 2)" />
    <mutant id="mutant_123" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) * &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_124" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(newLineSequence.length) - 1" to="newLineSequence.length" />
    <mutant id="mutant_120" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be written to&quot;)" to="((&quot;File \'&quot; + file) - &quot;\' cannot be written to&quot;)" />
    <mutant id="mutant_136" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="(count) - (filledBufferSum)" to="(count) * (filledBufferSum)" />
    <mutant id="mutant_137" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="((&quot;Length to read: &quot; + length) - &quot; actual: &quot;)" />
    <mutant id="mutant_138" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 1)" to="(prefix * 1)" />
    <mutant id="mutant_139" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="(&quot;Length must not be negative: &quot; * length)" />
    <mutant id="mutant_2198" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) % &quot;\'&quot;)" />
    <mutant id="mutant_2199" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) + &quot;]&quot;" to="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) / &quot;]&quot;" />
    <mutant id="mutant_2196" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; % destDir)" />
    <mutant id="mutant_2197" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="((newLineSequence.length) - 1)" to="((newLineSequence.length) % 1)" />
    <mutant id="mutant_132" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 2)" to="(offset / 2)" />
    <mutant id="mutant_133" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;)" to="((&quot;Unexpected readed size. current: &quot; + offset) % &quot;, excepted: &quot;)" />
    <mutant id="mutant_134" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="&quot;Array Size=&quot;" />
    <mutant id="mutant_135" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) + &quot;\' are the same&quot;)" to="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) * &quot;\' are the same&quot;)" />
    <mutant id="mutant_130" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path) + &quot;\&quot;&quot;" to="&quot;\&quot;&quot;" />
    <mutant id="mutant_131" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((xmlProlog.length()) + len)" to="len" />
    <mutant id="mutant_147" viable="false" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="filename + (FilenameUtils.UNIX_SEPARATOR)" to="filename % (FilenameUtils.UNIX_SEPARATOR)" />
    <mutant id="mutant_148" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="((short)((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)))" to="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) / (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_149" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="((wcs.length) - 1)" to="((wcs.length) / 1)" />
    <mutant id="mutant_2194" viable="true" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(caseSensitivity)" />
    <mutant id="mutant_2195" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcFile) - &quot;\' does not exist&quot;)" />
    <mutant id="mutant_2192" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) * &quot;\' did not return info as expected &quot;)" />
    <mutant id="mutant_2193" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size))" to="((((super.toString()) + &quot;(&quot;) + condition) / (size))" />
    <mutant id="mutant_2190" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="((int)(((position) - (size))))" to="(position)" />
    <mutant id="mutant_2191" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="(end + start)" />
    <mutant id="mutant_2189" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(XmlStreamWriter.BUFFER_SIZE) - (xmlProlog.length())" to="(XmlStreamWriter.BUFFER_SIZE) * (xmlProlog.length())" />
    <mutant id="mutant_2187" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="destDir" />
    <mutant id="mutant_2188" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcFile) - &quot;\' does not exist&quot;)" />
    <mutant id="mutant_2185" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((int)((totalByteLength) % blockSize))" to="blockSize" />
    <mutant id="mutant_2186" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' exists but is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) / &quot;\' exists but is not a directory&quot;)" />
    <mutant id="mutant_143" viable="false" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="((file.getName()) + (LockableFileWriter.LCK))" to="((file.getName()) * (LockableFileWriter.LCK))" />
    <mutant id="mutant_144" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) / &quot;\'- check path is valid&quot;)" />
    <mutant id="mutant_145" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;)" to="(&quot;Buffer size &quot; + bufferSize)" />
    <mutant id="mutant_146" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j) - ((newLineSequence.length) - 1)" to="(i + j) * ((newLineSequence.length) - 1)" />
    <mutant id="mutant_140" viable="false" in="?" from="1024 * 4" to="1024 % 4" />
    <mutant id="mutant_141" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="(Arrays.asList(cmdAttribs))" />
    <mutant id="mutant_142" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="&quot;Skip count must be non-negative, actual: &quot;" />
    <mutant id="mutant_158" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="(&quot;Skip count must be non-negative, actual: &quot; % toSkip)" />
    <mutant id="mutant_159" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 2)" to="(offset % 2)" />
    <mutant id="mutant_2183" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path)" to="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) - path)" />
    <mutant id="mutant_2184" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="i" />
    <mutant id="mutant_2181" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) * &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_2182" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) / &quot;)&quot;" />
    <mutant id="mutant_2180" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; - destFile)" />
    <mutant id="mutant_2178" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) * &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_2179" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - j" to="i / j" />
    <mutant id="mutant_2176" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="(i % 2)" />
    <mutant id="mutant_2177" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - j" to="i * j" />
    <mutant id="mutant_2174" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Failed to list contents of &quot; + srcDir)" to="(&quot;Failed to list contents of &quot; - srcDir)" />
    <mutant id="mutant_2175" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(&quot;Array Size=&quot; + (array.length))" to="&quot;Array Size=&quot;" />
    <mutant id="mutant_154" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' does not exist&quot;)" to="((&quot;File \'&quot; + file) - &quot;\' does not exist&quot;)" />
    <mutant id="mutant_155" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream(int)" from="(&quot;Negative initial size: &quot; + size)" to="(&quot;Negative initial size: &quot; % size)" />
    <mutant id="mutant_156" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="length" />
    <mutant id="mutant_157" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8))" to="(((data[(offset + 4)]) &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_150" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)" to="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) % (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_151" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) + (currentLastBytePos))" to="currentLastBytePos" />
    <mutant id="mutant_152" viable="false" in="org.apache.commons.io.FileUtils.touch(java.io.File)" from="(&quot;Unable to set the last modification time for &quot; + file)" to="&quot;Unable to set the last modification time for &quot;" />
    <mutant id="mutant_153" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 4)" to="(offset / 4)" />
    <mutant id="mutant_169" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 1)" to="(offset % 1)" />
    <mutant id="mutant_160" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 1)" to="1" />
    <mutant id="mutant_165" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="&quot;Command line \'&quot;" />
    <mutant id="mutant_166" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + fullFilenameToAdd)" to="basePath" />
    <mutant id="mutant_167" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((xmlProlog.length()) + len)" to="((xmlProlog.length()) / len)" />
    <mutant id="mutant_168" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; % srcFile)" />
    <mutant id="mutant_161" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) / (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_162" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip - remain" to="toSkip * remain" />
    <mutant id="mutant_163" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k % j)" />
    <mutant id="mutant_164" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' is a directory&quot;)" to="((&quot;Source \'&quot; + srcFile) / &quot;\' is a directory&quot;)" />
    <mutant id="mutant_170" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="&quot;File \'&quot;" />
    <mutant id="mutant_171" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(&quot;URL could not be converted to a File: &quot; + url)" to="url" />
    <mutant id="mutant_176" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' exists but is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) * &quot;\' exists but is not a directory&quot;)" />
    <mutant id="mutant_177" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="(&quot;Array Size=&quot; + (b.length))" />
    <mutant id="mutant_178" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="(position + c)" to="(position / c)" />
    <mutant id="mutant_179" viable="true" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="((super.toString()) + &quot;(&quot;)" />
    <mutant id="mutant_172" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="(pos + i) % 1" />
    <mutant id="mutant_173" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;)" to="(&quot;Array Size=&quot; + (array.length))" />
    <mutant id="mutant_174" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) % (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_175" viable="true" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="((super.toString()) + &quot;[caseSensitivity=&quot;)" />
    <mutant id="mutant_180" viable="false" in="?" from="1024 * 4" to="1024 - 4" />
    <mutant id="mutant_181" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Size must be equal or greater than zero: &quot; + size)" to="(&quot;Size must be equal or greater than zero: &quot; * size)" />
    <mutant id="mutant_182" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="(&quot;File does not exist: &quot; + file)" to="(&quot;File does not exist: &quot; % file)" />
    <mutant id="mutant_187" viable="false" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="&quot;text/xml&quot; + httpContentType" to="&quot;text/xml&quot; - httpContentType" />
    <mutant id="mutant_188" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_189" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; is not a directory&quot;)" to="directory" />
    <mutant id="mutant_183" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;)" to="&quot;\' for command &quot;" />
    <mutant id="mutant_184" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="&quot;]&quot;" />
    <mutant id="mutant_185" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; does not exist&quot;" to="&quot; does not exist&quot;" />
    <mutant id="mutant_186" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(&quot;Command line \'&quot; - (FileSystemUtils.DF))" />
    <mutant id="mutant_190" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; * srcFile)" />
    <mutant id="mutant_191" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="(end % start)" />
    <mutant id="mutant_192" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_TB)" to="(FileUtils.ONE_KB) - (FileUtils.ONE_TB)" />
    <mutant id="mutant_193" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="(&quot;Skip count must be non-negative, actual: &quot; % toSkip)" />
    <mutant id="mutant_198" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="((charsRead) - (markedAt))" to="((charsRead) * (markedAt))" />
    <mutant id="mutant_199" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 2)" to="(offset - 2)" />
    <mutant id="mutant_194" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) + &quot;\' are the same&quot;)" to="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) * &quot;\' are the same&quot;)" />
    <mutant id="mutant_195" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; * file)" />
    <mutant id="mutant_196" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;)" to="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) * &quot; Actual: &quot;)" />
    <mutant id="mutant_197" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 0)" to="offset" />
    <mutant id="mutant_1719" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j + 1" to="j" />
    <mutant id="mutant_1717" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="((charsRead) - (markedAt))" to="(markedAt)" />
    <mutant id="mutant_1718" viable="false" in="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)" from="(&quot;Parameter \'directory\' is not a directory: &quot; + directory)" to="directory" />
    <mutant id="mutant_1715" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' directory cannot be created&quot;)" to="((&quot;Destination \'&quot; + destDir) % &quot;\' directory cannot be created&quot;)" />
    <mutant id="mutant_1716" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 2)" to="(offset % 2)" />
    <mutant id="mutant_1713" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="((super.toString()) - &quot;[caseSensitivity=&quot;)" />
    <mutant id="mutant_1714" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) + (currentLastBytePos))" to="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) % (currentLastBytePos))" />
    <mutant id="mutant_1711" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path)" to="(&quot;\&quot;&quot; - path)" />
    <mutant id="mutant_1712" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="(&quot;Length must not be negative: &quot; * length)" />
    <mutant id="mutant_1710" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) * (caseSensitivity))" />
    <mutant id="mutant_1708" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="((buffers.size()) - 1)" to="(buffers.size())" />
    <mutant id="mutant_1709" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_PB)" to="(FileUtils.ONE_KB) - (FileUtils.ONE_PB)" />
    <mutant id="mutant_1706" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="(&quot;Bytes to skip must not be negative: &quot; / toSkip)" />
    <mutant id="mutant_1707" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(&quot;Encoding &quot; + encoding)" to="(&quot;Encoding &quot; % encoding)" />
    <mutant id="mutant_1704" viable="true" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not find lockDir: &quot; + (lockDir.getAbsolutePath()))" to="lockDir.getAbsolutePath()" />
    <mutant id="mutant_1705" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="&quot;The reference file \'&quot;" />
    <mutant id="mutant_1702" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; / srcFile)" />
    <mutant id="mutant_1703" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(&quot;Unexpected negative line length=&quot; + lineLengthBytes)" to="(&quot;Unexpected negative line length=&quot; * lineLengthBytes)" />
    <mutant id="mutant_1700" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="(&quot;Length must not be negative: &quot; % length)" />
    <mutant id="mutant_1701" viable="false" in="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)" from="(&quot;Deletion failed: &quot; + fileToDelete)" to="(&quot;Deletion failed: &quot; / fileToDelete)" />
    <mutant id="mutant_2608" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(length - totalRead)" to="(length / totalRead)" />
    <mutant id="mutant_2609" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(off + len)" to="off" />
    <mutant id="mutant_1751" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be written to&quot;)" to="((&quot;File \'&quot; + file) / &quot;\' cannot be written to&quot;)" />
    <mutant id="mutant_1752" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="((&quot;Bytes to skip: &quot; + toSkip) % &quot; actual: &quot;)" />
    <mutant id="mutant_1750" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="size - pos" to="pos" />
    <mutant id="mutant_1759" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - j" to="i" />
    <mutant id="mutant_2606" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="(&quot;Length must not be negative: &quot; % length)" />
    <mutant id="mutant_2607" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;)" />
    <mutant id="mutant_1757" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(&quot;Source \'&quot; + destDir)" />
    <mutant id="mutant_2604" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16))" to="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) - (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_1758" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) % &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_2605" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + i)" to="(offset / i)" />
    <mutant id="mutant_1755" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) + &quot; TB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) / &quot; TB&quot;" />
    <mutant id="mutant_2602" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) + &quot; PB&quot;" to="&quot; PB&quot;" />
    <mutant id="mutant_1756" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="&quot;.&quot; + (extensions[i])" to="&quot;.&quot; / (extensions[i])" />
    <mutant id="mutant_2603" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream(int)" from="(&quot;Negative initial size: &quot; + size)" to="(&quot;Negative initial size: &quot; - size)" />
    <mutant id="mutant_1753" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="1" />
    <mutant id="mutant_2600" viable="true" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="&quot;[caseSensitivity=&quot;" />
    <mutant id="mutant_1754" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="length / remaining" />
    <mutant id="mutant_2601" viable="false" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="&quot;text/xml&quot; + httpContentType" to="&quot;text/xml&quot; / httpContentType" />
    <mutant id="mutant_1740" viable="true" in="org.apache.commons.io.comparator.DirectoryFileComparator.compare(java.io.File,java.io.File)" from="(getType(file1)) - (getType(file2))" to="(getType(file1)) / (getType(file2))" />
    <mutant id="mutant_1741" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; % result)" />
    <mutant id="mutant_1748" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile)" to="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) % destFile)" />
    <mutant id="mutant_1749" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(&quot;Length to read: &quot; + expected)" to="(&quot;Length to read: &quot; / expected)" />
    <mutant id="mutant_1746" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; / destDir)" />
    <mutant id="mutant_1747" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) % &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_1744" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) * &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_1745" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="&quot; actual: &quot;" />
    <mutant id="mutant_1742" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(line.length()) - 1" to="(line.length()) + 1" />
    <mutant id="mutant_1743" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) * &quot;\' did not return numeric data as expected &quot;)" />
    <mutant id="mutant_900" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;)" />
    <mutant id="mutant_901" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 2)" to="offset" />
    <mutant id="mutant_902" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) + destDir)" to="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) - destDir)" />
    <mutant id="mutant_1739" viable="false" in="?" from="1024 * 4" to="1024 / 4" />
    <mutant id="mutant_907" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) % &quot;for path \'&quot;)" />
    <mutant id="mutant_908" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(&quot;Encoding &quot; + encoding)" to="(&quot;Encoding &quot; - encoding)" />
    <mutant id="mutant_909" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="(((super.toString()) + &quot;(&quot;) / condition)" />
    <mutant id="mutant_903" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="(&quot;File \'&quot; + file)" />
    <mutant id="mutant_904" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="(count) - (filledBufferSum)" to="(count) + (filledBufferSum)" />
    <mutant id="mutant_905" viable="true" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="(index + 1)" to="index" />
    <mutant id="mutant_906" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k / j)" />
    <mutant id="mutant_1730" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) - &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_1737" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k / j)" />
    <mutant id="mutant_1738" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip - remain" to="toSkip % remain" />
    <mutant id="mutant_1735" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;Directory \'&quot; + parent)" to="&quot;Directory \'&quot;" />
    <mutant id="mutant_1736" viable="true" in="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)" from="(&quot;Deletion failed: &quot; + fileToDelete)" to="&quot;Deletion failed: &quot;" />
    <mutant id="mutant_1733" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_1734" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;)" to="&quot; is less than maxBytesPerChar &quot;" />
    <mutant id="mutant_1731" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="index + (includeSeparator ? 1 : 0)" to="index * (includeSeparator ? 1 : 0)" />
    <mutant id="mutant_1732" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size * 1)" />
    <mutant id="mutant_910" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="((int)(((position) - (size))))" to="((position) / (size))" />
    <mutant id="mutant_911" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="condition" />
    <mutant id="mutant_912" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) * &quot;for path \'&quot;)" />
    <mutant id="mutant_913" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 1)" to="(prefix % 1)" />
    <mutant id="mutant_1728" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - 4" to="i / 4" />
    <mutant id="mutant_1729" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(len - size)" to="len" />
    <mutant id="mutant_918" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) % &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_919" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="(((value1 &amp; 255) &lt;&lt; 0) - ((value2 &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_914" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(length - totalRead)" to="length" />
    <mutant id="mutant_915" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48))" to="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) * (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48))" />
    <mutant id="mutant_916" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" />
    <mutant id="mutant_917" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)" from="((short)((((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) + (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)))" to="(((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) * (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_1726" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="reference" />
    <mutant id="mutant_1727" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 2" to="prefix - 2" />
    <mutant id="mutant_1724" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 0)" to="(offset - 0)" />
    <mutant id="mutant_1725" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="((&quot;Length to read: &quot; + length) % &quot; actual: &quot;)" />
    <mutant id="mutant_1722" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="((super.toString()) + &quot;[sumDirectoryContents=&quot;)" to="((super.toString()) - &quot;[sumDirectoryContents=&quot;)" />
    <mutant id="mutant_1723" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="(high &lt;&lt; 24) % (4294967295L &amp; low)" />
    <mutant id="mutant_1720" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_1721" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="start" />
    <mutant id="mutant_921" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) - &quot;\' did not return data as expected &quot;)" />
    <mutant id="mutant_922" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(line.length()) - 1" to="(line.length()) / 1" />
    <mutant id="mutant_923" viable="false" in="org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)" from="file + &quot; does not exist&quot;" to="file * &quot; does not exist&quot;" />
    <mutant id="mutant_924" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) * actual)" />
    <mutant id="mutant_920" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="(&quot;File does not exist: &quot; + file)" to="(&quot;File does not exist: &quot; - file)" />
    <mutant id="mutant_929" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + length)" to="(offset - length)" />
    <mutant id="mutant_925" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 0)" to="(offset * 0)" />
    <mutant id="mutant_926" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;)" to="&quot;\' after copy to \'&quot;" />
    <mutant id="mutant_927" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;)" to="((&quot;Buffer size &quot; + bufferSize) - &quot; is less than maxBytesPerChar &quot;)" />
    <mutant id="mutant_928" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="(size / i)" />
    <mutant id="mutant_1311" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="((&quot;Destination directory \'&quot; + destDir) * &quot;\' does not exist [createDestDir=&quot;)" />
    <mutant id="mutant_1795" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; + (new String(leftOver , encoding)))" to="(&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; % (new String(leftOver , encoding)))" />
    <mutant id="mutant_2642" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8))" to="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) / (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_1312" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart)" to="lineStart" />
    <mutant id="mutant_1796" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) + length)" to="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) / length)" />
    <mutant id="mutant_2643" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="((short)((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)))" to="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) % (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_1793" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line did not return any info &quot; + &quot;for command &quot;)" to="&quot;for command &quot;" />
    <mutant id="mutant_2640" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;)" to="&quot; Actual: &quot;" />
    <mutant id="mutant_1310" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="2" />
    <mutant id="mutant_1794" viable="true" in="org.apache.commons.io.input.BoundedReader.mark(int)" from="readAheadLimit - (charsRead)" to="readAheadLimit * (charsRead)" />
    <mutant id="mutant_2641" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart)" to="(currentLastBytePos)" />
    <mutant id="mutant_1791" viable="false" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="((file.getName()) + (LockableFileWriter.LCK))" to="((file.getName()) - (LockableFileWriter.LCK))" />
    <mutant id="mutant_1792" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) - &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_1790" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1) * (blockSize)" to="(no - 1) / (blockSize)" />
    <mutant id="mutant_1319" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="&quot;Array Size=&quot;" />
    <mutant id="mutant_1317" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="(position + c)" to="(position - c)" />
    <mutant id="mutant_2648" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(&quot;Command line \'&quot; / (FileSystemUtils.DF))" />
    <mutant id="mutant_1318" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="&quot;(&quot;" />
    <mutant id="mutant_2649" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(&quot;Command line \'&quot; - (FileSystemUtils.DF))" />
    <mutant id="mutant_1315" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="((charsRead) - (markedAt))" to="((charsRead) / (markedAt))" />
    <mutant id="mutant_1799" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) * (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_2646" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; % srcDir)" />
    <mutant id="mutant_1316" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) % (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" />
    <mutant id="mutant_2647" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="i" />
    <mutant id="mutant_1313" viable="true" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(&quot;The byte count &quot; + result)" />
    <mutant id="mutant_1797" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="length - ((int)(((position) - (size))))" to="length * ((int)(((position) - (size))))" />
    <mutant id="mutant_2644" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' does not exist&quot;)" to="((&quot;File \'&quot; + file) % &quot;\' does not exist&quot;)" />
    <mutant id="mutant_1314" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 3)" to="(offset * 3)" />
    <mutant id="mutant_1798" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((srcDir.getCanonicalPath()) + (File.separator))" to="((srcDir.getCanonicalPath()) / (File.separator))" />
    <mutant id="mutant_2645" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; * srcDir)" />
    <mutant id="mutant_932" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) * off)" />
    <mutant id="mutant_933" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1) * (blockSize)" to="blockSize" />
    <mutant id="mutant_934" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" />
    <mutant id="mutant_935" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="actual" />
    <mutant id="mutant_930" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; / srcDir)" />
    <mutant id="mutant_931" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 0)" to="(offset * 0)" />
    <mutant id="mutant_936" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + parentFile)" to="(&quot;Destination \'&quot; % parentFile)" />
    <mutant id="mutant_937" viable="false" in="org.apache.commons.io.FileExistsException(java.io.File)" from="(&quot;File &quot; + file)" to="(&quot;File &quot; * file)" />
    <mutant id="mutant_938" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" from="(&quot;Stream not configure to detect &quot; + bom)" to="(&quot;Stream not configure to detect &quot; * bom)" />
    <mutant id="mutant_939" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcDir) * &quot;\' does not exist&quot;)" />
    <mutant id="mutant_1300" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 6)" to="(offset - 6)" />
    <mutant id="mutant_1784" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="((&quot;Marked position [&quot; + (mark)) * &quot;] is no longer valid - passed the read limit [&quot;)" />
    <mutant id="mutant_2631" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir)" to="destDir" />
    <mutant id="mutant_1301" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; does not exist&quot;)" to="(directory * &quot; does not exist&quot;)" />
    <mutant id="mutant_1785" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 4)" to="4" />
    <mutant id="mutant_2632" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 6)" to="(offset / 6)" />
    <mutant id="mutant_1782" viable="true" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString()))" to="(filter.toString())" />
    <mutant id="mutant_1783" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; * file)" />
    <mutant id="mutant_2630" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="(&quot;Skip count must be non-negative, actual: &quot; / toSkip)" />
    <mutant id="mutant_1780" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="(pos + i) % 1" />
    <mutant id="mutant_1781" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="length - ((int)(((position) - (size))))" to="length + ((int)(((position) - (size))))" />
    <mutant id="mutant_1308" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;)" to="((&quot;Source \'&quot; + srcDir) * &quot;\' and destination \'&quot;)" />
    <mutant id="mutant_2639" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) % &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_1309" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="((&quot;Marked position [&quot; + (mark)) - &quot;] is no longer valid - passed the read limit [&quot;)" />
    <mutant id="mutant_1306" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="size - pos" to="size * pos" />
    <mutant id="mutant_2637" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;)" to="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) / &quot; Actual: &quot;)" />
    <mutant id="mutant_1307" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip - remain" to="toSkip / remain" />
    <mutant id="mutant_2638" viable="false" in="org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)" from="file + &quot; does not exist&quot;" to="file / &quot; does not exist&quot;" />
    <mutant id="mutant_1304" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="prefix - 1" />
    <mutant id="mutant_1788" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) + &quot; KB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) % &quot; KB&quot;" />
    <mutant id="mutant_2635" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;)" to="((&quot;Array Size=&quot; + (array.length)) / &quot;, offset=&quot;)" />
    <mutant id="mutant_1305" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="(((value1 &amp; 255) &lt;&lt; 0) / ((value2 &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_1789" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 1)" to="offset" />
    <mutant id="mutant_2636" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 5)" to="(offset - 5)" />
    <mutant id="mutant_1302" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;)" />
    <mutant id="mutant_1786" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString()))" to="(((super.toString()) + &quot;[&quot;) / (delegate.toString()))" />
    <mutant id="mutant_2633" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="&quot;Failed to list contents of &quot;" />
    <mutant id="mutant_1303" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k * j)" />
    <mutant id="mutant_1787" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(off + len)" to="(off * len)" />
    <mutant id="mutant_2634" viable="true" in="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)" from="((str.length()) - endLen)" to="endLen" />
    <mutant id="mutant_943" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) / &quot;]&quot;)" />
    <mutant id="mutant_944" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) - off)" />
    <mutant id="mutant_945" viable="false" in="?" from="1024 * 4" to="4" />
    <mutant id="mutant_946" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) / &quot;for path \'&quot;)" />
    <mutant id="mutant_940" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="(b.length)" />
    <mutant id="mutant_941" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Failed to list contents of &quot; + srcDir)" to="&quot;Failed to list contents of &quot;" />
    <mutant id="mutant_942" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;)" to="&quot;last readLine() should have returned something! currentLastCharPos=&quot;" />
    <mutant id="mutant_947" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="index + separatorAdd" to="index / separatorAdd" />
    <mutant id="mutant_948" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; does not exist&quot;" to="directory * &quot; does not exist&quot;" />
    <mutant id="mutant_949" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_1773" viable="false" in="org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)" from="file + &quot; does not exist&quot;" to="file % &quot; does not exist&quot;" />
    <mutant id="mutant_2620" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="&quot;\' does not exist&quot;" />
    <mutant id="mutant_1774" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) * &quot;(&quot;)" />
    <mutant id="mutant_2621" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) - (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_1771" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="(&quot;Skip count must be non-negative, actual: &quot; % toSkip)" />
    <mutant id="mutant_1772" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate)" to="(((super.toString()) + &quot;(&quot;) / delegate)" />
    <mutant id="mutant_1770" viable="true" in="org.apache.commons.io.IOCase.forName(java.lang.String)" from="(&quot;Invalid IOCase name: &quot; + name)" to="&quot;Invalid IOCase name: &quot;" />
    <mutant id="mutant_2628" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(data.length) - 1" to="1" />
    <mutant id="mutant_2629" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) / &quot;\'- response was &quot;)" />
    <mutant id="mutant_1779" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length)" to="(offset / length)" />
    <mutant id="mutant_2626" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" from="(&quot;Size cannot be greater than Integer max value: &quot; + size)" to="(&quot;Size cannot be greater than Integer max value: &quot; / size)" />
    <mutant id="mutant_2627" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="&quot;]&quot;" />
    <mutant id="mutant_1777" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_2624" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_1778" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) * path)" />
    <mutant id="mutant_2625" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((mark) + (readlimit))" to="((mark) * (readlimit))" />
    <mutant id="mutant_1775" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 3)" to="offset" />
    <mutant id="mutant_2622" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile)" to="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) - destFile)" />
    <mutant id="mutant_1776" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) + destDir)" to="((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;)" />
    <mutant id="mutant_2623" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="(&quot;Source \'&quot; + srcFile)" />
    <mutant id="mutant_954" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)" to="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) - (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_955" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="remaining" />
    <mutant id="mutant_956" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="((super.toString()) + &quot;[&quot;)" to="((super.toString()) * &quot;[&quot;)" />
    <mutant id="mutant_957" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="i" />
    <mutant id="mutant_950" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) % (caseSensitivity))" />
    <mutant id="mutant_951" viable="true" in="org.apache.commons.io.comparator.DirectoryFileComparator.compare(java.io.File,java.io.File)" from="(getType(file1)) - (getType(file2))" to="(getType(file1)) + (getType(file2))" />
    <mutant id="mutant_952" viable="true" in="org.apache.commons.io.input.BoundedReader.mark(int)" from="readAheadLimit - (charsRead)" to="readAheadLimit / (charsRead)" />
    <mutant id="mutant_2619" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; * srcDir)" />
    <mutant id="mutant_953" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((xmlProlog.length()) + len)" to="((xmlProlog.length()) - len)" />
    <mutant id="mutant_958" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="(j + 6)" to="(j * 6)" />
    <mutant id="mutant_959" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="((idx) + n)" to="((idx) % n)" />
    <mutant id="mutant_1762" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="((&quot;The reference file \'&quot; + reference) / &quot;\' doesn\'t exist&quot;)" />
    <mutant id="mutant_1763" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="((&quot;Marked position [&quot; + (mark)) / &quot;] is no longer valid - passed the read limit [&quot;)" />
    <mutant id="mutant_2610" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(&quot;Marked position [&quot; + (mark))" to="(&quot;Marked position [&quot; % (mark))" />
    <mutant id="mutant_1760" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir)" to="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) - destDir)" />
    <mutant id="mutant_1761" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString())) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + (filter.toString())) % &quot;)&quot;" />
    <mutant id="mutant_2617" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) + len" to="len" />
    <mutant id="mutant_2618" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="(&quot;The reference file \'&quot; * reference)" />
    <mutant id="mutant_1768" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_2615" viable="false" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="(&quot;write(&quot; + b)" to="(&quot;write(&quot; % b)" />
    <mutant id="mutant_1769" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate)" to="(((super.toString()) + &quot;(&quot;) % delegate)" />
    <mutant id="mutant_2616" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; / file)" />
    <mutant id="mutant_1766" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) % (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_2613" viable="true" in="org.apache.commons.io.input.BoundedReader.mark(int)" from="readAheadLimit - (charsRead)" to="charsRead" />
    <mutant id="mutant_1767" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)" from="((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)" to="((value1 &amp; 255) &lt;&lt; 0) * ((value2 &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_2614" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="&quot;Bytes to skip: &quot;" />
    <mutant id="mutant_1764" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) + (data.length))" to="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) - (data.length))" />
    <mutant id="mutant_2611" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 2)" to="(offset * 2)" />
    <mutant id="mutant_1765" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="((&quot;Destination directory \'&quot; + destDir) % &quot;\' does not exist [createDestDir=&quot;)" />
    <mutant id="mutant_2612" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) + &quot; EB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) % &quot; EB&quot;" />
    <mutant id="mutant_965" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;)" to="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) - &quot;\' for command &quot;)" />
    <mutant id="mutant_966" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(off + size)" to="(off * size)" />
    <mutant id="mutant_967" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="((&quot;The reference file \'&quot; + reference) - &quot;\' doesn\'t exist&quot;)" />
    <mutant id="mutant_968" viable="true" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="&quot;(&quot;" />
    <mutant id="mutant_961" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="&quot;Source \'&quot;" />
    <mutant id="mutant_962" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="((position) - (size))" to="(position)" />
    <mutant id="mutant_963" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="(&quot;The reference file \'&quot; / reference)" />
    <mutant id="mutant_964" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + delegate) % &quot;)&quot;" />
    <mutant id="mutant_2690" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; does not exist&quot;)" to="directory" />
    <mutant id="mutant_969" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) + &quot; KB&quot;" to="String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))" />
    <mutant id="mutant_1355" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" from="((written) + count)" to="count" />
    <mutant id="mutant_2202" viable="false" in="org.apache.commons.io.FileExistsException(java.io.File)" from="((&quot;File &quot; + file) + &quot; exists&quot;)" to="((&quot;File &quot; + file) - &quot; exists&quot;)" />
    <mutant id="mutant_2686" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(firstGT + 1)" to="(firstGT % 1)" />
    <mutant id="mutant_1356" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size + 2" to="size * 2" />
    <mutant id="mutant_2203" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + delegate) * &quot;)&quot;" />
    <mutant id="mutant_2687" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path)" to="path" />
    <mutant id="mutant_1353" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) + &quot;\'&quot;)" to="&quot;\'&quot;" />
    <mutant id="mutant_2200" viable="false" in="?" from="1024 * 4" to="1024 + 4" />
    <mutant id="mutant_2684" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(newLineSequence.length) - 1" to="(newLineSequence.length) + 1" />
    <mutant id="mutant_1354" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_2201" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="((super.toString()) + &quot;[sumDirectoryContents=&quot;)" to="((super.toString()) / &quot;[sumDirectoryContents=&quot;)" />
    <mutant id="mutant_2685" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is a directory&quot;)" to="((&quot;Destination \'&quot; + destFile) % &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_1351" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;)" to="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) % &quot; timeout=&quot;)" />
    <mutant id="mutant_2682" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((off + len) - remaining)" to="((off + len) + remaining)" />
    <mutant id="mutant_1352" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40))" />
    <mutant id="mutant_2683" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="toSkip" />
    <mutant id="mutant_2680" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(off + len)" to="(off / len)" />
    <mutant id="mutant_1350" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size + 2" to="size" />
    <mutant id="mutant_2681" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) + dstLen)" to="dstLen" />
    <mutant id="mutant_2208" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;)" to="&quot;\' and destination \'&quot;" />
    <mutant id="mutant_960" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="&quot;Source \'&quot;" />
    <mutant id="mutant_2209" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="(&quot;The reference file \'&quot; % reference)" />
    <mutant id="mutant_1359" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="((max) - (pos))" to="pos" />
    <mutant id="mutant_2206" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(off + size)" to="(off - size)" />
    <mutant id="mutant_2207" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; - srcFile)" />
    <mutant id="mutant_1357" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(&quot;URL could not be converted to a File: &quot; + url)" to="(&quot;URL could not be converted to a File: &quot; % url)" />
    <mutant id="mutant_2204" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; * file)" />
    <mutant id="mutant_2688" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((mark) + (readlimit))" to="((mark) / (readlimit))" />
    <mutant id="mutant_1358" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="((&quot;Bytes to skip: &quot; + toSkip) / &quot; actual: &quot;)" />
    <mutant id="mutant_2205" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) - &quot;(&quot;)" />
    <mutant id="mutant_2689" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 3)" to="(offset % 3)" />
    <mutant id="mutant_976" viable="true" in="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)" from="((str.length()) - endLen)" to="((str.length()) + endLen)" />
    <mutant id="mutant_977" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" />
    <mutant id="mutant_978" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="(off * len)" />
    <mutant id="mutant_979" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size)) + &quot; bytes&quot;" to="(String.valueOf(size)) % &quot; bytes&quot;" />
    <mutant id="mutant_972" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j + 1" to="j / 1" />
    <mutant id="mutant_973" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;)" to="((&quot;Source \'&quot; + srcFile) * &quot;\' and destination \'&quot;)" />
    <mutant id="mutant_974" viable="true" in="org.apache.commons.io.input.BoundedReader.mark(int)" from="readAheadLimit - (charsRead)" to="readAheadLimit % (charsRead)" />
    <mutant id="mutant_975" viable="true" in="org.apache.commons.io.FileExistsException(java.io.File)" from="(&quot;File &quot; + file)" to="file" />
    <mutant id="mutant_1344" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="((&quot;Array Size=&quot; + (b.length)) % &quot;, offset=&quot;)" />
    <mutant id="mutant_2675" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; % destFile)" />
    <mutant id="mutant_1345" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) + (data.length))" to="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) / (data.length))" />
    <mutant id="mutant_2676" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) / path)" />
    <mutant id="mutant_1342" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + destDir)" to="(&quot;Source \'&quot; * destDir)" />
    <mutant id="mutant_2673" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="((buffers.size()) - 1)" to="((buffers.size()) % 1)" />
    <mutant id="mutant_1343" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_PB)" to="(FileUtils.ONE_KB) + (FileUtils.ONE_PB)" />
    <mutant id="mutant_2674" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="&quot;File \'&quot;" />
    <mutant id="mutant_1340" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="(size) - (position)" to="(size) + (position)" />
    <mutant id="mutant_2671" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;)" to="(&quot;Current currentLastCharPos unexpectedly positive... &quot; * &quot;last readLine() should have returned something! currentLastCharPos=&quot;)" />
    <mutant id="mutant_1341" viable="false" in="org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)" from="file + &quot; does not exist&quot;" to="file - &quot; does not exist&quot;" />
    <mutant id="mutant_2672" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 4)" to="(offset % 4)" />
    <mutant id="mutant_2670" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' is not a directory&quot;)" to="((&quot;Source \'&quot; + srcDir) % &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_970" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="(size % i)" />
    <mutant id="mutant_971" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="((&quot;The reference file \'&quot; + reference) * &quot;\' doesn\'t exist&quot;)" />
    <mutant id="mutant_1348" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;)" />
    <mutant id="mutant_2679" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; % destFile)" />
    <mutant id="mutant_1349" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) + &quot;\' are the same&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile)" />
    <mutant id="mutant_1346" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(offset + location)" to="location" />
    <mutant id="mutant_2677" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;)" to="&quot; timeout=&quot;" />
    <mutant id="mutant_1347" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) - &quot;\'- check path is valid&quot;)" />
    <mutant id="mutant_2678" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size)) + &quot; bytes&quot;" to="(String.valueOf(size)) - &quot; bytes&quot;" />
    <mutant id="mutant_503" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(offset + location)" to="(offset % location)" />
    <mutant id="mutant_987" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 1)" to="offset" />
    <mutant id="mutant_504" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="(&quot;Array Size=&quot; / (b.length))" />
    <mutant id="mutant_988" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(offset + location)" to="(offset * location)" />
    <mutant id="mutant_505" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) * (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" />
    <mutant id="mutant_989" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="(&quot;File &quot; + directory)" to="(&quot;File &quot; % directory)" />
    <mutant id="mutant_506" viable="false" in="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="length - (buffer.remaining())" to="buffer.remaining()" />
    <mutant id="mutant_983" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="(((super.toString()) + &quot;(&quot;) * condition)" />
    <mutant id="mutant_500" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.available()" from="(this.bbuf.remaining()) + (this.cbuf.remaining())" to="(this.bbuf.remaining()) % (this.cbuf.remaining())" />
    <mutant id="mutant_984" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + parentFile) + &quot;\' directory cannot be created&quot;)" to="(&quot;Destination \'&quot; + parentFile)" />
    <mutant id="mutant_501" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_985" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)" to="(value3 &amp; 255) &lt;&lt; 16" />
    <mutant id="mutant_502" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16))" to="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_986" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 7)" to="(offset / 7)" />
    <mutant id="mutant_507" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" />
    <mutant id="mutant_508" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; * file)" />
    <mutant id="mutant_509" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="(&quot;Skip count must be non-negative, actual: &quot; * toSkip)" />
    <mutant id="mutant_1333" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="((&quot;Bytes to skip: &quot; + toSkip) / &quot; actual: &quot;)" />
    <mutant id="mutant_2664" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) + length)" to="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) % length)" />
    <mutant id="mutant_1334" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(&quot;Length to read: &quot; + expected)" to="(&quot;Length to read: &quot; * expected)" />
    <mutant id="mutant_2665" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;)" to="&quot;for command &quot;" />
    <mutant id="mutant_1331" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="srcDir" />
    <mutant id="mutant_2662" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="(high &lt;&lt; 24) - (4294967295L &amp; low)" />
    <mutant id="mutant_1332" viable="false" in="?" from="1024 * 4" to="1024 + 4" />
    <mutant id="mutant_2663" viable="false" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="((file.getName()) + (LockableFileWriter.LCK))" to="((file.getName()) / (LockableFileWriter.LCK))" />
    <mutant id="mutant_2660" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + '/')" to="'/'" />
    <mutant id="mutant_1330" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="(off + i)" to="(off - i)" />
    <mutant id="mutant_2661" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is read-only&quot;)" to="&quot;\' exists but is read-only&quot;" />
    <mutant id="mutant_980" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k * j)" />
    <mutant id="mutant_981" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k / j)" />
    <mutant id="mutant_1339" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) - &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_982" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory) + &quot;.&quot;" to="(&quot;Unable to delete directory &quot; + directory) % &quot;.&quot;" />
    <mutant id="mutant_1337" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="&quot;Source \'&quot;" />
    <mutant id="mutant_2668" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="length - ((int)(((position) - (size))))" to="length + ((int)(((position) - (size))))" />
    <mutant id="mutant_1338" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="(&quot;Destination directory \'&quot; * destDir)" />
    <mutant id="mutant_2669" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) + (currentLastBytePos))" to="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) - (currentLastBytePos))" />
    <mutant id="mutant_1335" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="length" />
    <mutant id="mutant_2666" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile)" to="((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;)" />
    <mutant id="mutant_1336" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(off + len)" to="len" />
    <mutant id="mutant_2667" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="(&quot;Failed to list contents of &quot; * directory)" />
    <mutant id="mutant_514" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="(i / 2)" />
    <mutant id="mutant_998" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) + dstLen)" to="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) * dstLen)" />
    <mutant id="mutant_515" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="((super.toString()) % &quot;[caseSensitivity=&quot;)" />
    <mutant id="mutant_999" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1) - prefix" to="(i + 1) % prefix" />
    <mutant id="mutant_516" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) * actual)" />
    <mutant id="mutant_517" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" />
    <mutant id="mutant_510" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((no) - 1)" to="((no) % 1)" />
    <mutant id="mutant_994" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="size - pos" to="size % pos" />
    <mutant id="mutant_511" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="((int)(((position) - (size))))" to="((position) / (size))" />
    <mutant id="mutant_995" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) + &quot;]&quot;" to="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) * &quot;]&quot;" />
    <mutant id="mutant_512" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="length - ((int)(((position) - (size))))" to="length % ((int)(((position) - (size))))" />
    <mutant id="mutant_996" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size + 1)" />
    <mutant id="mutant_513" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="(&quot;Bytes to skip: &quot; % toSkip)" />
    <mutant id="mutant_997" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) + &quot; EB&quot;" to="&quot; EB&quot;" />
    <mutant id="mutant_518" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(data.length) - 1" to="(data.length) + 1" />
    <mutant id="mutant_519" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((totalByteLength) / blockSize) + 1" to="((totalByteLength) / blockSize) / 1" />
    <mutant id="mutant_1322" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;)" to="(&quot;Command line \'dir /-c\' did not return valid info &quot; / &quot;for path \'&quot;)" />
    <mutant id="mutant_2653" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory)" to="(&quot;Unable to delete directory &quot; * directory)" />
    <mutant id="mutant_1323" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="((super.toString()) + &quot;[&quot;)" to="((super.toString()) - &quot;[&quot;)" />
    <mutant id="mutant_2654" viable="true" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_1320" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 0)" to="(offset / 0)" />
    <mutant id="mutant_2651" viable="true" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not find lockDir: &quot; + (lockDir.getAbsolutePath()))" to="&quot;Could not find lockDir: &quot;" />
    <mutant id="mutant_1321" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)" from="((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)" to="(value1 &amp; 255) &lt;&lt; 0" />
    <mutant id="mutant_2652" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(count) - (filledBufferSum)" to="count" />
    <mutant id="mutant_2650" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) % &quot;\' did not return numeric data as expected &quot;)" />
    <mutant id="mutant_990" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="(size % i)" />
    <mutant id="mutant_991" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 0)" to="(offset % 0)" />
    <mutant id="mutant_992" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.available()" from="(this.bbuf.remaining()) + (this.cbuf.remaining())" to="this.bbuf.remaining()" />
    <mutant id="mutant_1328" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="&quot;] is no longer valid - passed the read limit [&quot;" />
    <mutant id="mutant_2659" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) % (readlimit))" />
    <mutant id="mutant_993" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream(int)" from="(&quot;Negative initial size: &quot; + size)" to="(&quot;Negative initial size: &quot; / size)" />
    <mutant id="mutant_1329" viable="true" in="org.apache.commons.io.input.BoundedReader.mark(int)" from="readAheadLimit - (charsRead)" to="readAheadLimit + (charsRead)" />
    <mutant id="mutant_1326" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="&quot;Source \'&quot;" />
    <mutant id="mutant_2657" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; * srcDir)" />
    <mutant id="mutant_1327" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(&quot;Number of characters to skip is less than zero: &quot; + n)" to="n" />
    <mutant id="mutant_2658" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((mark) + (readlimit))" to="(readlimit)" />
    <mutant id="mutant_1324" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="start" />
    <mutant id="mutant_2655" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="prefix" />
    <mutant id="mutant_1325" viable="true" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="(&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath()))" to="(lockFile.getAbsolutePath())" />
    <mutant id="mutant_2656" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcDir) * &quot;\' does not exist&quot;)" />
    <mutant id="mutant_525" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="length / remaining" />
    <mutant id="mutant_526" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="(pos - i)" />
    <mutant id="mutant_527" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) / len)" />
    <mutant id="mutant_528" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) % skipped)" />
    <mutant id="mutant_521" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_GB)" to="FileUtils.ONE_GB" />
    <mutant id="mutant_522" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 4)" to="offset" />
    <mutant id="mutant_523" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) + &quot;\'&quot;)" to="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) % &quot;\'&quot;)" />
    <mutant id="mutant_524" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(high &lt;&lt; 32) + (4294967295L &amp; low)" to="(high &lt;&lt; 32) / (4294967295L &amp; low)" />
    <mutant id="mutant_2250" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="destDir" />
    <mutant id="mutant_529" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="(((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) % &quot;\'&quot;)" />
    <mutant id="mutant_1399" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path)" />
    <mutant id="mutant_2246" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="(size * i)" />
    <mutant id="mutant_2247" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="(&quot;Failed to list contents of &quot; / directory)" />
    <mutant id="mutant_1397" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) - &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_2244" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) / (Arrays.asList(cmdAttribs)))" />
    <mutant id="mutant_1398" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) / &quot;(&quot;)" />
    <mutant id="mutant_2245" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) - (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" />
    <mutant id="mutant_1395" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 0)" to="offset" />
    <mutant id="mutant_2242" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="((int)(((position) - (size))))" to="((position) * (size))" />
    <mutant id="mutant_1396" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="(file1.lastModified()) - (file2.lastModified())" to="(file1.lastModified()) % (file2.lastModified())" />
    <mutant id="mutant_2243" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(j + 1)" to="(j / 1)" />
    <mutant id="mutant_1393" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) / &quot;(&quot;)" />
    <mutant id="mutant_2240" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="((currentBuffer.length) / inBufferPos)" />
    <mutant id="mutant_1394" viable="true" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="&quot;(&quot;" />
    <mutant id="mutant_2241" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 0)" to="0" />
    <mutant id="mutant_520" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="(end / start)" />
    <mutant id="mutant_2248" viable="false" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) + &quot; exists&quot;)" to="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) / &quot; exists&quot;)" />
    <mutant id="mutant_2249" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="((super.toString()) * &quot;[caseSensitivity=&quot;)" />
    <mutant id="mutant_536" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) / &quot;\'- check path is valid&quot;)" />
    <mutant id="mutant_537" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(len - size)" to="(len * size)" />
    <mutant id="mutant_538" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="((&quot;File \'&quot; + file) * &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_539" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="length + remaining" />
    <mutant id="mutant_532" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="(&quot;Bytes to skip: &quot; * toSkip)" />
    <mutant id="mutant_533" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j)" to="j" />
    <mutant id="mutant_534" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) * destDir)" />
    <mutant id="mutant_535" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="(newcount - (filledBufferSum))" to="(newcount * (filledBufferSum))" />
    <mutant id="mutant_1391" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="file" />
    <mutant id="mutant_1392" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="&quot;\' does not exist&quot;" />
    <mutant id="mutant_1390" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1)" to="(no % 1)" />
    <mutant id="mutant_1388" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Size must be equal or greater than zero: &quot; + size)" to="(&quot;Size must be equal or greater than zero: &quot; / size)" />
    <mutant id="mutant_2235" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) - skipped)" />
    <mutant id="mutant_1389" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Source \'&quot; + destDir) - &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_2236" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(textIdx + 1)" to="(textIdx - 1)" />
    <mutant id="mutant_1386" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) * off)" />
    <mutant id="mutant_2233" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="((&quot;Destination directory \'&quot; + destDir) % &quot;\' does not exist [createDestDir=&quot;)" />
    <mutant id="mutant_1387" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(&quot;Number of characters to skip is less than zero: &quot; + n)" to="&quot;Number of characters to skip is less than zero: &quot;" />
    <mutant id="mutant_2234" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="(currentLastBytePos) + 1" to="(currentLastBytePos) * 1" />
    <mutant id="mutant_1384" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="((position) - (size))" to="((position) / (size))" />
    <mutant id="mutant_2231" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="len" />
    <mutant id="mutant_1385" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) % &quot;]&quot;)" />
    <mutant id="mutant_2232" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="(&quot;Bytes to skip: &quot; - toSkip)" />
    <mutant id="mutant_1382" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen)" to="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) % srcLen)" />
    <mutant id="mutant_1383" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="length - ((int)(((position) - (size))))" to="length % ((int)(((position) - (size))))" />
    <mutant id="mutant_2230" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="&quot;\' is not a directory&quot;" />
    <mutant id="mutant_530" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) / &quot;]&quot;)" />
    <mutant id="mutant_531" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 2)" to="2" />
    <mutant id="mutant_2239" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip - remain" to="toSkip" />
    <mutant id="mutant_2237" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 3)" to="i" />
    <mutant id="mutant_2238" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i + 1" to="i % 1" />
    <mutant id="mutant_547" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="(&quot;File &quot; + directory)" to="(&quot;File &quot; / directory)" />
    <mutant id="mutant_548" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="1" />
    <mutant id="mutant_549" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(&quot;URL could not be converted to a File: &quot; + url)" to="(&quot;URL could not be converted to a File: &quot; / url)" />
    <mutant id="mutant_543" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="((position) - (size))" to="((position) + (size))" />
    <mutant id="mutant_544" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;)" to="&quot;, offset=&quot;" />
    <mutant id="mutant_545" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i + 1" to="i * 1" />
    <mutant id="mutant_546" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 3)" to="offset" />
    <mutant id="mutant_1380" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;)" to="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) * &quot;, length=&quot;)" />
    <mutant id="mutant_1381" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((int)((totalByteLength) % blockSize))" to="(totalByteLength) - blockSize" />
    <mutant id="mutant_1377" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) + &quot; KB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) * &quot; KB&quot;" />
    <mutant id="mutant_2224" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="pos" />
    <mutant id="mutant_1378" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="&quot;\'- check path is valid&quot;" />
    <mutant id="mutant_2225" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="&quot;Length must not be negative: &quot;" />
    <mutant id="mutant_1375" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;)" to="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) % &quot; Actual: &quot;)" />
    <mutant id="mutant_2222" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="(readlimit)" />
    <mutant id="mutant_1376" viable="true" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString()))" to="((super.toString()) + &quot;[&quot;)" />
    <mutant id="mutant_2223" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_1373" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) % &quot;\' did not find free space in response &quot;)" />
    <mutant id="mutant_2220" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="&quot;\'- check path is valid&quot;" />
    <mutant id="mutant_1374" viable="false" in="org.apache.commons.io.FileUtils.touch(java.io.File)" from="(&quot;Unable to set the last modification time for &quot; + file)" to="(&quot;Unable to set the last modification time for &quot; % file)" />
    <mutant id="mutant_2221" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_1371" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="1" />
    <mutant id="mutant_1372" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_540" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(count) - (filledBufferSum)" to="(count) % (filledBufferSum)" />
    <mutant id="mutant_541" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(&quot;illegal index: &quot; + index)" to="&quot;illegal index: &quot;" />
    <mutant id="mutant_542" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="(&quot;Skip count must be non-negative, actual: &quot; * toSkip)" />
    <mutant id="mutant_2228" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="skipped" />
    <mutant id="mutant_2229" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(&quot;Array Size=&quot; + (array.length))" to="(&quot;Array Size=&quot; / (array.length))" />
    <mutant id="mutant_1379" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) / &quot;]&quot;" />
    <mutant id="mutant_2226" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="(j + 6)" to="(j % 6)" />
    <mutant id="mutant_2227" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;)" to="(&quot;Source \'&quot; + srcDir)" />
    <mutant id="mutant_558" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="srcDir" />
    <mutant id="mutant_559" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="(j + 6)" to="j" />
    <mutant id="mutant_554" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="((position) - (size))" to="((position) * (size))" />
    <mutant id="mutant_555" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 1)" to="(offset % 1)" />
    <mutant id="mutant_556" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(high &lt;&lt; 32) + (4294967295L &amp; low)" to="4294967295L &amp; low" />
    <mutant id="mutant_557" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + destDir)" to="&quot;Source \'&quot;" />
    <mutant id="mutant_1370" viable="true" in="org.apache.commons.io.FilenameUtils.getName(java.lang.String)" from="(index + 1)" to="(index % 1)" />
    <mutant id="mutant_1366" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; is not a directory&quot;)" to="&quot; is not a directory&quot;" />
    <mutant id="mutant_2213" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="(i / 2)" />
    <mutant id="mutant_2697" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Unexpected readed size. current: &quot; + offset)" to="(&quot;Unexpected readed size. current: &quot; - offset)" />
    <mutant id="mutant_1367" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="dest - (idx)" to="dest + (idx)" />
    <mutant id="mutant_2214" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size)) + &quot; bytes&quot;" to="(String.valueOf(size)) / &quot; bytes&quot;" />
    <mutant id="mutant_2698" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 1)" to="offset" />
    <mutant id="mutant_1364" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;)" to="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) - &quot;\' Expected length: &quot;)" />
    <mutant id="mutant_2211" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="destDir" />
    <mutant id="mutant_2695" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size % 1)" />
    <mutant id="mutant_1365" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; does not exist&quot;" to="directory % &quot; does not exist&quot;" />
    <mutant id="mutant_2212" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="((value1 &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_2696" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16))" to="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) * (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_1362" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; - destDir)" />
    <mutant id="mutant_2693" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; / file)" />
    <mutant id="mutant_1363" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;)" to="(&quot;Command line threw an InterruptedException &quot; % &quot;for command &quot;)" />
    <mutant id="mutant_2210" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) % (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_2694" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="(count) - (filledBufferSum)" to="(count) / (filledBufferSum)" />
    <mutant id="mutant_1360" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16))" to="((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_2691" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; / srcFile)" />
    <mutant id="mutant_1361" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path)" />
    <mutant id="mutant_2692" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="(end / start)" />
    <mutant id="mutant_550" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Failed to list contents of &quot; + srcDir)" to="srcDir" />
    <mutant id="mutant_551" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" from="(&quot;Size cannot be greater than Integer max value: &quot; + size)" to="(&quot;Size cannot be greater than Integer max value: &quot; % size)" />
    <mutant id="mutant_552" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="(&quot;Array Size=&quot; * (b.length))" />
    <mutant id="mutant_2219" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) % skipped)" />
    <mutant id="mutant_553" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="((charsRead) - (markedAt))" to="(charsRead)" />
    <mutant id="mutant_2217" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 0)" to="(offset / 0)" />
    <mutant id="mutant_2218" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 2)" to="(offset - 2)" />
    <mutant id="mutant_1368" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;)" to="((&quot;Failed to copy full contents from \'&quot; + srcFile) / &quot;\' to \'&quot;)" />
    <mutant id="mutant_2215" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="&quot;Destination \'&quot;" />
    <mutant id="mutant_2699" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="((max) - (pos))" to="((max) * (pos))" />
    <mutant id="mutant_1369" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(off + len)" to="(off * len)" />
    <mutant id="mutant_2216" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="(&quot;Length must not be negative: &quot; - length)" />
    <mutant id="mutant_448" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)" to="((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0" />
    <mutant id="mutant_449" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((totalByteLength) / blockSize)" to="((totalByteLength) + blockSize)" />
    <mutant id="mutant_444" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) + (Arrays.asList(cmdAttribs)))" to="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;)" />
    <mutant id="mutant_445" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;)" to="((&quot;File &quot; + directory) % &quot; exists and is &quot;)" />
    <mutant id="mutant_446" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" from="(&quot;Size cannot be greater than Integer max value: &quot; + size)" to="(&quot;Size cannot be greater than Integer max value: &quot; * size)" />
    <mutant id="mutant_447" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(high &lt;&lt; 32) + (4294967295L &amp; low)" to="(high &lt;&lt; 32) % (4294967295L &amp; low)" />
    <mutant id="mutant_2051" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="((super.toString()) + &quot;[sumDirectoryContents=&quot;)" to="((super.toString()) * &quot;[sumDirectoryContents=&quot;)" />
    <mutant id="mutant_2052" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) / skipped)" />
    <mutant id="mutant_2050" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Failed to copy full contents from \'&quot; + srcFile)" to="(&quot;Failed to copy full contents from \'&quot; / srcFile)" />
    <mutant id="mutant_2048" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; % srcDir)" />
    <mutant id="mutant_2049" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_MB)" to="(FileUtils.ONE_KB) + (FileUtils.ONE_MB)" />
    <mutant id="mutant_1199" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 2)" to="(offset % 2)" />
    <mutant id="mutant_2046" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="directory" />
    <mutant id="mutant_2047" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;)" to="&quot;\' did not return info as expected &quot;" />
    <mutant id="mutant_1197" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="((&quot;Destination directory \'&quot; + destDir) / &quot;\' does not exist [createDestDir=&quot;)" />
    <mutant id="mutant_2044" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i - newLineMatchByteCount" to="i * newLineMatchByteCount" />
    <mutant id="mutant_1198" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) / (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_2045" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="&quot;Destination \'&quot;" />
    <mutant id="mutant_1195" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be read&quot;)" to="&quot;\' cannot be read&quot;" />
    <mutant id="mutant_2042" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(firstGT + 1)" to="(firstGT * 1)" />
    <mutant id="mutant_1196" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="(&quot;The reference file \'&quot; * reference)" />
    <mutant id="mutant_2043" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="(newcount - (filledBufferSum))" to="(newcount % (filledBufferSum))" />
    <mutant id="mutant_440" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_441" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 4)" to="(offset * 4)" />
    <mutant id="mutant_442" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_443" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="depth + 1" to="depth - 1" />
    <mutant id="mutant_459" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; - srcFile)" />
    <mutant id="mutant_455" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="(str.length()) - (search.length())" to="(str.length()) % (search.length())" />
    <mutant id="mutant_456" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) + ((value4 &amp; 255) &lt;&lt; 24)" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) - ((value4 &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_457" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(XmlStreamWriter.BUFFER_SIZE) - (xmlProlog.length())" to="xmlProlog.length()" />
    <mutant id="mutant_458" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="i" />
    <mutant id="mutant_1193" viable="true" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="(&quot;write(&quot; + b)" to="&quot;write(&quot;" />
    <mutant id="mutant_2040" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) + (this.mark_cbuf))" to="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) % (this.mark_cbuf))" />
    <mutant id="mutant_1194" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' exists but is a directory&quot;)" to="((&quot;Source \'&quot; + srcFile) - &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_2041" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="&quot; actual: &quot;" />
    <mutant id="mutant_1191" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) / &quot;for path \'&quot;)" />
    <mutant id="mutant_1192" viable="false" in="?" from="(FileUtils.ONE_MB) * 30" to="(FileUtils.ONE_MB) / 30" />
    <mutant id="mutant_1190" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;)" to="((&quot;Cannot move directory: &quot; + srcDir) - &quot; to a subdirectory of itself: &quot;)" />
    <mutant id="mutant_2037" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="offset + index" to="offset % index" />
    <mutant id="mutant_2038" viable="true" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="((super.toString()) + &quot;[&quot;)" to="&quot;[&quot;" />
    <mutant id="mutant_1188" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="(off - len)" />
    <mutant id="mutant_2035" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(offset + location)" to="(offset * location)" />
    <mutant id="mutant_1189" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="prefix / 1" />
    <mutant id="mutant_2036" viable="false" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not find lockDir: &quot; + (lockDir.getAbsolutePath()))" to="(&quot;Could not find lockDir: &quot; - (lockDir.getAbsolutePath()))" />
    <mutant id="mutant_1186" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(j + 1)" to="(j * 1)" />
    <mutant id="mutant_2033" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' does not exist&quot;)" to="((&quot;File \'&quot; + file) / &quot;\' does not exist&quot;)" />
    <mutant id="mutant_1187" viable="false" in="?" from="1024 * 4" to="4" />
    <mutant id="mutant_2034" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8))" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) - (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_1184" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="&quot;Failed to list contents of &quot;" />
    <mutant id="mutant_2031" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; - destFile)" />
    <mutant id="mutant_1185" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="length - ((int)(((position) - (size))))" to="length / ((int)(((position) - (size))))" />
    <mutant id="mutant_2032" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; - destFile)" />
    <mutant id="mutant_451" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(XmlStreamWriter.BUFFER_SIZE) - (xmlProlog.length())" to="XmlStreamWriter.BUFFER_SIZE" />
    <mutant id="mutant_452" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) * len)" />
    <mutant id="mutant_453" viable="false" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="((file.getName()) + (LockableFileWriter.LCK))" to="((file.getName()) % (LockableFileWriter.LCK))" />
    <mutant id="mutant_454" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; does not exist&quot;" to="directory - &quot; does not exist&quot;" />
    <mutant id="mutant_2039" viable="false" in="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)" from="(&quot;Parameter \'directory\' is not a directory: &quot; + directory)" to="(&quot;Parameter \'directory\' is not a directory: &quot; - directory)" />
    <mutant id="mutant_450" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + length)" to="(offset % length)" />
    <mutant id="mutant_466" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16))" to="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) * (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_467" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 7)" to="(offset / 7)" />
    <mutant id="mutant_468" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="((idx) + n)" to="((idx) / n)" />
    <mutant id="mutant_469" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; / destFile)" />
    <mutant id="mutant_1182" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" />
    <mutant id="mutant_1183" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="(&quot;Source \'&quot; + srcDir)" />
    <mutant id="mutant_2030" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="(freeSpaceWindows(path, timeout)) / (FileUtils.ONE_KB)" to="(freeSpaceWindows(path, timeout)) - (FileUtils.ONE_KB)" />
    <mutant id="mutant_1180" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)" to="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_1181" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="&quot;Source \'&quot;" />
    <mutant id="mutant_1179" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 2" to="prefix % 2" />
    <mutant id="mutant_2026" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((mark) + (readlimit))" to="((mark) - (readlimit))" />
    <mutant id="mutant_2027" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be written to&quot;)" to="&quot;\' cannot be written to&quot;" />
    <mutant id="mutant_1177" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(&quot;Encoding &quot; + encoding)" to="(&quot;Encoding &quot; / encoding)" />
    <mutant id="mutant_2024" viable="false" in="org.apache.commons.io.EndianUtils.swapShort(short)" from="((short)((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)))" to="(((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) / (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_1178" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="((super.toString()) - &quot;[caseSensitivity=&quot;)" />
    <mutant id="mutant_2025" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;)" />
    <mutant id="mutant_1175" viable="true" in="org.apache.commons.io.comparator.DirectoryFileComparator.compare(java.io.File,java.io.File)" from="(getType(file1)) - (getType(file2))" to="(getType(file1)) % (getType(file2))" />
    <mutant id="mutant_2022" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((&quot;Encoding &quot; + encoding) + &quot; is not supported yet (feel free to submit a patch)&quot;)" to="((&quot;Encoding &quot; + encoding) * &quot; is not supported yet (feel free to submit a patch)&quot;)" />
    <mutant id="mutant_1176" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="1" />
    <mutant id="mutant_2023" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset)" to="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) * offset)" />
    <mutant id="mutant_1173" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="file" />
    <mutant id="mutant_2020" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) * &quot;(&quot;)" />
    <mutant id="mutant_1174" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) + &quot; PB&quot;" to="String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))" />
    <mutant id="mutant_2021" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;)" to="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) % &quot;\' Expected length: &quot;)" />
    <mutant id="mutant_462" viable="false" in="org.apache.commons.io.FileUtils.sizeOf(java.io.File)" from="file + &quot; does not exist&quot;" to="file % &quot; does not exist&quot;" />
    <mutant id="mutant_463" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="((&quot;Length to read: &quot; + length) / &quot; actual: &quot;)" />
    <mutant id="mutant_464" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; / srcFile)" />
    <mutant id="mutant_465" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; % result)" />
    <mutant id="mutant_460" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) - &quot;\'- check path is valid&quot;)" />
    <mutant id="mutant_2028" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;)" to="(&quot;Command line \'dir /-c\' did not return valid info &quot; - &quot;for path \'&quot;)" />
    <mutant id="mutant_461" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory)" to="(&quot;Unable to delete directory &quot; / directory)" />
    <mutant id="mutant_2029" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)" from="((short)((((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) + (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)))" to="(((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) - (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_477" viable="true" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_478" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="1" />
    <mutant id="mutant_479" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="(&quot;Array Size=&quot; % (b.length))" />
    <mutant id="mutant_1171" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="((max) - (pos))" to="pos" />
    <mutant id="mutant_1172" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_PB)" to="(FileUtils.ONE_KB) % (FileUtils.ONE_PB)" />
    <mutant id="mutant_1170" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 2)" to="(offset * 2)" />
    <mutant id="mutant_1168" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(&quot;Length to read: &quot; + length)" to="(&quot;Length to read: &quot; * length)" />
    <mutant id="mutant_2015" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1)" to="(no / 1)" />
    <mutant id="mutant_2499" viable="false" in="org.apache.commons.io.FileUtils.touch(java.io.File)" from="(&quot;Unable to set the last modification time for &quot; + file)" to="(&quot;Unable to set the last modification time for &quot; * file)" />
    <mutant id="mutant_1169" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="k" />
    <mutant id="mutant_2016" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_1166" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(&quot;Command line \'&quot; % (FileSystemUtils.DF))" />
    <mutant id="mutant_2013" viable="false" in="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="length - (buffer.remaining())" to="length % (buffer.remaining())" />
    <mutant id="mutant_2497" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; / destDir)" />
    <mutant id="mutant_1167" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" />
    <mutant id="mutant_2014" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 0)" to="0" />
    <mutant id="mutant_2498" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(&quot;Chars to skip: &quot; + toSkip)" to="toSkip" />
    <mutant id="mutant_1164" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="j" />
    <mutant id="mutant_2011" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="k" />
    <mutant id="mutant_2495" viable="false" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="filename + (FilenameUtils.UNIX_SEPARATOR)" to="FilenameUtils.UNIX_SEPARATOR" />
    <mutant id="mutant_1165" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(super.toString())" />
    <mutant id="mutant_2012" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) + &quot; KB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) - &quot; KB&quot;" />
    <mutant id="mutant_2496" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 0)" to="(offset * 0)" />
    <mutant id="mutant_1162" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' already exists&quot;)" to="((&quot;Destination \'&quot; + destFile) % &quot;\' already exists&quot;)" />
    <mutant id="mutant_2493" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="(str.length()) - (search.length())" to="str.length()" />
    <mutant id="mutant_1163" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) + &quot;\' are the same&quot;)" to="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) / &quot;\' are the same&quot;)" />
    <mutant id="mutant_2010" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="&quot;\' does not exist [createDestDir=&quot;" />
    <mutant id="mutant_2494" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(&quot;URL could not be converted to a File: &quot; + url)" to="(&quot;URL could not be converted to a File: &quot; * url)" />
    <mutant id="mutant_473" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(line.length()) - 1" to="1" />
    <mutant id="mutant_474" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="firstCount + secondCount" to="firstCount" />
    <mutant id="mutant_475" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcDir) - &quot;\' does not exist&quot;)" />
    <mutant id="mutant_476" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" from="(&quot;Stream not configure to detect &quot; + bom)" to="(&quot;Stream not configure to detect &quot; / bom)" />
    <mutant id="mutant_2019" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="length * remaining" />
    <mutant id="mutant_470" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Cannot move directory: &quot; + srcDir)" to="(&quot;Cannot move directory: &quot; / srcDir)" />
    <mutant id="mutant_471" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="offset + index" to="offset / index" />
    <mutant id="mutant_2017" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((mark) + (readlimit))" to="((mark) - (readlimit))" />
    <mutant id="mutant_472" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir)" to="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) / destDir)" />
    <mutant id="mutant_2018" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' exists but is not a directory&quot;)" to="&quot;\' exists but is not a directory&quot;" />
    <mutant id="mutant_488" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) % &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_489" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="(pos * i)" />
    <mutant id="mutant_2095" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;)" to="((&quot;Cannot move directory: &quot; + srcDir) % &quot; to a subdirectory of itself: &quot;)" />
    <mutant id="mutant_2096" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(data.length) - 1" to="(data.length) % 1" />
    <mutant id="mutant_2093" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 2)" to="2" />
    <mutant id="mutant_2094" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;)" to="((&quot;Length to read: &quot; + expected) / &quot; actual: &quot;)" />
    <mutant id="mutant_2091" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)" from="(maxSizeInclusive + 1L)" to="(maxSizeInclusive - 1L)" />
    <mutant id="mutant_2092" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 0)" to="0" />
    <mutant id="mutant_2090" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="(&quot;Destination directory \'&quot; % destDir)" />
    <mutant id="mutant_2088" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16))" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) / ((value3 &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_2089" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + '/')" to="(basePath * '/')" />
    <mutant id="mutant_2086" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile)" to="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) * destFile)" />
    <mutant id="mutant_2087" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) - (Arrays.asList(cmdAttribs)))" />
    <mutant id="mutant_484" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((mark) + (readlimit))" to="(mark)" />
    <mutant id="mutant_485" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="1" />
    <mutant id="mutant_486" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="(((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_487" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' is not a directory&quot;)" to="(&quot;Source \'&quot; + srcDir)" />
    <mutant id="mutant_480" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="((super.toString()) * &quot;[caseSensitivity=&quot;)" />
    <mutant id="mutant_481" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="((&quot;Marked position [&quot; + (mark)) / &quot;] is no longer valid - passed the read limit [&quot;)" />
    <mutant id="mutant_482" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(&quot;Destination \'&quot; + destDir)" />
    <mutant id="mutant_483" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;)" to="((&quot;Failed to delete original file \'&quot; + srcFile) / &quot;\' after copy to \'&quot;)" />
    <mutant id="mutant_499" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(&quot;Command line \'&quot; - (FileSystemUtils.DF))" />
    <mutant id="mutant_2084" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) % (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_2085" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart) + 1" to="((currentLastBytePos) - lineStart) / 1" />
    <mutant id="mutant_2082" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 7)" to="(offset * 7)" />
    <mutant id="mutant_2083" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) / &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_2080" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' exists but is a directory&quot;)" to="((&quot;Source \'&quot; + srcFile) * &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_2081" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; - file)" />
    <mutant id="mutant_2079" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(off + len)" to="off" />
    <mutant id="mutant_490" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;)" to="((&quot;Source \'&quot; + srcDir) - &quot;\' and destination \'&quot;)" />
    <mutant id="mutant_2077" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + src)" to="(&quot;Source \'&quot; - src)" />
    <mutant id="mutant_2078" viable="true" in="org.apache.commons.io.comparator.DirectoryFileComparator.compare(java.io.File,java.io.File)" from="(getType(file1)) - (getType(file2))" to="getType(file2)" />
    <mutant id="mutant_2075" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i - newLineMatchByteCount" to="i % newLineMatchByteCount" />
    <mutant id="mutant_2076" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;)" to="((&quot;Failed to delete original directory \'&quot; + srcDir) * &quot;\' after copy to \'&quot;)" />
    <mutant id="mutant_495" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Source \'&quot; + destDir) / &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_496" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;)" to="&quot;\' did not find free space in response &quot;" />
    <mutant id="mutant_497" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) + &quot; PB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) * &quot; PB&quot;" />
    <mutant id="mutant_498" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="j - 1" />
    <mutant id="mutant_491" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(length - totalRead)" to="(length * totalRead)" />
    <mutant id="mutant_492" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) % destDir)" />
    <mutant id="mutant_493" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 3)" to="(offset % 3)" />
    <mutant id="mutant_494" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString()))" to="(((super.toString()) + &quot;(&quot;) - (filter.toString()))" />
    <mutant id="mutant_2073" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 3)" to="offset" />
    <mutant id="mutant_2074" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="&quot;]&quot;" />
    <mutant id="mutant_2071" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position()))" to="(&quot;Unexpected CharBuffer postion: actual=&quot; / (cbuf.position()))" />
    <mutant id="mutant_2072" viable="false" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="filename + (FilenameUtils.UNIX_SEPARATOR)" to="filename - (FilenameUtils.UNIX_SEPARATOR)" />
    <mutant id="mutant_2070" viable="true" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="((&quot;write(&quot; + b) + &quot;) failed: stream is closed&quot;)" to="&quot;) failed: stream is closed&quot;" />
    <mutant id="mutant_2068" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) % &quot;for path \'&quot;)" />
    <mutant id="mutant_2069" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) / skipped)" />
    <mutant id="mutant_2066" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" from="(&quot;Size cannot be greater than Integer max value: &quot; + size)" to="(&quot;Size cannot be greater than Integer max value: &quot; - size)" />
    <mutant id="mutant_2067" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="((newLineSequence.length) - 1)" to="((newLineSequence.length) + 1)" />
    <mutant id="mutant_2064" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="i" />
    <mutant id="mutant_2065" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="1" />
    <mutant id="mutant_2062" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcFile) / &quot;\' does not exist&quot;)" />
    <mutant id="mutant_2063" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) + &quot;\'&quot;)" to="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir)" />
    <mutant id="mutant_2060" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)" from="((short)((((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) + (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)))" to="(((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) / (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_2061" viable="true" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_2059" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) * &quot;\'&quot;)" />
    <mutant id="mutant_2057" viable="false" in="?" from="1024 * 4" to="1024 % 4" />
    <mutant id="mutant_2058" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; is not a directory&quot;" to="directory % &quot; is not a directory&quot;" />
    <mutant id="mutant_2055" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="((&quot;Array Size=&quot; + (b.length)) % &quot;, offset=&quot;)" />
    <mutant id="mutant_2056" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;)" to="((&quot;Source \'&quot; + srcFile) / &quot;\' and destination \'&quot;)" />
    <mutant id="mutant_2053" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length) - remaining" to="(offset + length) / remaining" />
    <mutant id="mutant_2054" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; * srcDir)" />
    <mutant id="mutant_2099" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="depth + 1" to="depth * 1" />
    <mutant id="mutant_2097" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(&quot;Command line \'&quot; - (FileSystemUtils.DF))" />
    <mutant id="mutant_2098" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 3)" to="(i % 3)" />
    <mutant id="mutant_1630" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(&quot;Unexpected negative line length=&quot; + lineLengthBytes)" to="lineLengthBytes" />
    <mutant id="mutant_1631" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;)" to="&quot;\' did not return data as expected &quot;" />
    <mutant id="mutant_1638" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) / createDestDir)" />
    <mutant id="mutant_1639" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) / off)" />
    <mutant id="mutant_1636" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + '/')" to="(basePath - '/')" />
    <mutant id="mutant_1637" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="index + separatorAdd" to="index * separatorAdd" />
    <mutant id="mutant_1634" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) + &quot;\' are the same&quot;)" to="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) - &quot;\' are the same&quot;)" />
    <mutant id="mutant_1635" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents))" to="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) - (sumDirectoryContents))" />
    <mutant id="mutant_1632" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 0)" to="(offset - 0)" />
    <mutant id="mutant_1633" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(&quot;illegal index: &quot; + index)" to="index" />
    <mutant id="mutant_1629" viable="false" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name))" to="(&quot;FileDeleteStrategy[&quot; % (name))" />
    <mutant id="mutant_1620" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(&quot;Marked position [&quot; + (mark))" to="(&quot;Marked position [&quot; - (mark))" />
    <mutant id="mutant_1627" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i + 1" to="1" />
    <mutant id="mutant_1628" viable="false" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) * &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_1625" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="toSkip - remain" to="toSkip % remain" />
    <mutant id="mutant_1626" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;)" to="(&quot;Command line returned OS error code \'&quot; + (proc.exitValue()))" />
    <mutant id="mutant_1623" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((int)((totalByteLength) % blockSize))" to="totalByteLength" />
    <mutant id="mutant_1624" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) + &quot;\'&quot;)" to="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) / &quot;\'&quot;)" />
    <mutant id="mutant_1621" viable="false" in="org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)" from="file + &quot; does not exist&quot;" to="file" />
    <mutant id="mutant_1622" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="(&quot;Destination directory \'&quot; * destDir)" />
    <mutant id="mutant_1618" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j)" to="i" />
    <mutant id="mutant_1619" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="((position) - (size))" to="(size)" />
    <mutant id="mutant_1616" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 0)" to="(offset * 0)" />
    <mutant id="mutant_1617" viable="false" in="org.apache.commons.io.FileUtils.sizeOf(java.io.File)" from="file + &quot; does not exist&quot;" to="file" />
    <mutant id="mutant_1614" viable="true" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_1615" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="(newcount - (filledBufferSum))" to="(newcount + (filledBufferSum))" />
    <mutant id="mutant_1612" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(&quot;Buffer size &quot; + bufferSize)" to="(&quot;Buffer size &quot; % bufferSize)" />
    <mutant id="mutant_1613" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 7)" to="offset" />
    <mutant id="mutant_1610" viable="true" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="&quot;The byte count &quot;" />
    <mutant id="mutant_1611" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="(&quot;Array Size=&quot; / (b.length))" />
    <mutant id="mutant_1609" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="((data[(offset + 3)]) &amp; 255) &lt;&lt; 24" />
    <mutant id="mutant_1607" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) % len)" />
    <mutant id="mutant_1608" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="length - ((int)(((position) - (size))))" to="((int)((position) - (size)))" />
    <mutant id="mutant_1605" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) + maxBytesPerChar)" to="((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;)" />
    <mutant id="mutant_1606" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;)" to="&quot;Command line threw an InterruptedException &quot;" />
    <mutant id="mutant_1603" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(&quot;URL could not be converted to a File: &quot; + url)" to="&quot;URL could not be converted to a File: &quot;" />
    <mutant id="mutant_1604" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;) + &quot;not a directory. Unable to create directory.&quot;" to="(&quot;File &quot; + directory) + &quot; exists and is &quot;" />
    <mutant id="mutant_1601" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="((&quot;Array Size=&quot; + (b.length)) / &quot;, offset=&quot;)" />
    <mutant id="mutant_1602" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString())) + &quot;]&quot;" to="(((super.toString()) + &quot;[&quot;) + (delegate.toString())) % &quot;]&quot;" />
    <mutant id="mutant_1600" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;)" to="&quot;for path \'&quot;" />
    <mutant id="mutant_800" viable="false" in="org.apache.commons.io.EndianUtils.swapShort(short)" from="((short)((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)))" to="(((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) % (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_801" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' already exists&quot;)" to="((&quot;Destination \'&quot; + destDir) * &quot;\' already exists&quot;)" />
    <mutant id="mutant_802" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) / &quot;, length=&quot;)" />
    <mutant id="mutant_803" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;)" to="((&quot;illegal index: &quot; + index) / &quot; into array of length &quot;)" />
    <mutant id="mutant_808" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k % j)" />
    <mutant id="mutant_809" viable="true" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="&quot;text/xml&quot; + httpContentType" to="&quot;text/xml&quot;" />
    <mutant id="mutant_804" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_805" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)" to="((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_806" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="length + (leftOverOfLastFilePart != null ? leftOverOfLastFilePart.length : 0)" to="length * (leftOverOfLastFilePart != null ? leftOverOfLastFilePart.length : 0)" />
    <mutant id="mutant_807" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line returned OS error code \'&quot; + (proc.exitValue()))" to="(&quot;Command line returned OS error code \'&quot; / (proc.exitValue()))" />
    <mutant id="mutant_1674" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;)" to="((&quot;illegal index: &quot; + index) * &quot; into array of length &quot;)" />
    <mutant id="mutant_2521" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 3)" to="(i * 3)" />
    <mutant id="mutant_1675" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) - (filledBufferSum)" to="(count) + (filledBufferSum)" />
    <mutant id="mutant_2522" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((srcDir.getCanonicalPath()) + (File.separator))" to="((srcDir.getCanonicalPath()) * (File.separator))" />
    <mutant id="mutant_1672" viable="false" in="org.apache.commons.io.FileUtils.touch(java.io.File)" from="(&quot;Unable to set the last modification time for &quot; + file)" to="file" />
    <mutant id="mutant_1673" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) / (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_2520" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;)" to="&quot;Command line \'dir /-c\' did not return any info &quot;" />
    <mutant id="mutant_1670" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 3)" to="(i + 3)" />
    <mutant id="mutant_1671" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((srcDir.getCanonicalPath()) + (File.separator))" to="srcDir.getCanonicalPath()" />
    <mutant id="mutant_2529" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(&quot;illegal index: &quot; + index)" to="(&quot;illegal index: &quot; - index)" />
    <mutant id="mutant_2527" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="k" />
    <mutant id="mutant_2528" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="((idx) + n)" to="idx" />
    <mutant id="mutant_1678" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size * 1)" />
    <mutant id="mutant_2525" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="&quot;Destination \'&quot;" />
    <mutant id="mutant_1679" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size / 1)" />
    <mutant id="mutant_2526" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="size - pos" to="size / pos" />
    <mutant id="mutant_1676" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)" from="(maxSizeInclusive + 1L)" to="1L" />
    <mutant id="mutant_2523" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) + &quot;\' are the same&quot;)" to="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) % &quot;\' are the same&quot;)" />
    <mutant id="mutant_1677" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_MB)" to="(FileUtils.ONE_KB) - (FileUtils.ONE_MB)" />
    <mutant id="mutant_2524" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(&quot;Array Size=&quot; + (array.length))" to="(array.length)" />
    <mutant id="mutant_811" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="(&quot;Bytes to skip must not be negative: &quot; - toSkip)" />
    <mutant id="mutant_812" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="createDestDir" />
    <mutant id="mutant_813" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;)" to="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) * &quot; expected=&quot;)" />
    <mutant id="mutant_814" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 3)" to="(offset / 3)" />
    <mutant id="mutant_810" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8))" to="(((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_819" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="(((value1 &amp; 255) &lt;&lt; 0) / ((value2 &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_815" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) / &quot;]&quot;" />
    <mutant id="mutant_816" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((no) - 1)" to="((no) * 1)" />
    <mutant id="mutant_817" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="(&quot;File does not exist: &quot; + file)" to="(&quot;File does not exist: &quot; / file)" />
    <mutant id="mutant_818" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(j + 1)" to="j" />
    <mutant id="mutant_1663" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI))) + &quot; MB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI))) % &quot; MB&quot;" />
    <mutant id="mutant_2510" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) * (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_1664" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_KB)" to="(FileUtils.ONE_KB) / (FileUtils.ONE_KB)" />
    <mutant id="mutant_2511" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(&quot;Length to read: &quot; + length)" to="(&quot;Length to read: &quot; / length)" />
    <mutant id="mutant_1661" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="&quot;Unable to delete file: &quot; + file" to="&quot;Unable to delete file: &quot; % file" />
    <mutant id="mutant_1662" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="&quot;Bytes to skip must not be negative: &quot;" />
    <mutant id="mutant_1660" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="(&quot;The filter[&quot; + i)" to="(&quot;The filter[&quot; - i)" />
    <mutant id="mutant_2518" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((encoding.length()) - 1)" to="((encoding.length()) / 1)" />
    <mutant id="mutant_2519" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) * (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_1669" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="(&quot;Bytes to skip: &quot; + toSkip)" />
    <mutant id="mutant_2516" viable="true" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="((super.toString()) + &quot;[caseSensitivity=&quot;)" />
    <mutant id="mutant_2517" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + src)" to="(&quot;Source \'&quot; % src)" />
    <mutant id="mutant_1667" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 3)" to="(offset * 3)" />
    <mutant id="mutant_2514" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; * destFile)" />
    <mutant id="mutant_1668" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_TB)" to="FileUtils.ONE_KB" />
    <mutant id="mutant_2515" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;)" to="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) - &quot; timeout=&quot;)" />
    <mutant id="mutant_1665" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) + dstLen)" to="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;)" />
    <mutant id="mutant_2512" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="((buffers.size()) - 1)" to="1" />
    <mutant id="mutant_1666" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="&quot;\'- check path is valid&quot;" />
    <mutant id="mutant_2513" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="((position) - (size))" to="((position) % (size))" />
    <mutant id="mutant_822" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + destDir)" to="(&quot;Source \'&quot; - destDir)" />
    <mutant id="mutant_823" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) + lines)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;)" />
    <mutant id="mutant_824" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) - path)" />
    <mutant id="mutant_825" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' exists but is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) - &quot;\' exists but is not a directory&quot;)" />
    <mutant id="mutant_820" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(&quot;Chars to skip: &quot; + toSkip)" to="(&quot;Chars to skip: &quot; / toSkip)" />
    <mutant id="mutant_2509" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) % &quot;\' did not return data as expected &quot;)" />
    <mutant id="mutant_821" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="Math.min(posUnix, posWin)" />
    <mutant id="mutant_826" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="(&quot;Source \'&quot; + srcDir)" />
    <mutant id="mutant_827" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="j / 1" />
    <mutant id="mutant_828" viable="false" in="org.apache.commons.io.EndianUtils.swapShort(short)" from="((short)((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)))" to="(((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) - (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_829" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent.getLevel()) + 1" to="(parent.getLevel()) - 1" />
    <mutant id="mutant_1652" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; / result)" />
    <mutant id="mutant_1653" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size1 - size2" to="size1 * size2" />
    <mutant id="mutant_2500" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path) + &quot;\&quot;&quot;" to="(&quot;\&quot;&quot; + path) - &quot;\&quot;&quot;" />
    <mutant id="mutant_1650" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' directory cannot be created&quot;)" to="&quot;\' directory cannot be created&quot;" />
    <mutant id="mutant_1651" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' already exists&quot;)" to="((&quot;Destination \'&quot; + destDir) - &quot;\' already exists&quot;)" />
    <mutant id="mutant_2507" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 4)" to="(offset - 4)" />
    <mutant id="mutant_2508" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;)" to="((&quot;Failed to delete original directory \'&quot; + srcDir) % &quot;\' after copy to \'&quot;)" />
    <mutant id="mutant_1658" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line did not return any info &quot; + &quot;for command &quot;)" to="(&quot;Command line did not return any info &quot; * &quot;for command &quot;)" />
    <mutant id="mutant_2505" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(totalByteLength) / blockSize" to="totalByteLength" />
    <mutant id="mutant_1659" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 6)" to="6" />
    <mutant id="mutant_2506" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="toSkip - remain" to="toSkip * remain" />
    <mutant id="mutant_1656" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_2503" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="j" />
    <mutant id="mutant_1657" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="((count) + 1)" to="((count) / 1)" />
    <mutant id="mutant_2504" viable="true" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="&quot; is too large to be converted to an int&quot;" />
    <mutant id="mutant_1654" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 5)" to="(offset / 5)" />
    <mutant id="mutant_2501" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + i)" to="offset" />
    <mutant id="mutant_1655" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) + length)" to="length" />
    <mutant id="mutant_2502" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) % path)" />
    <mutant id="mutant_833" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip - remain" to="toSkip / remain" />
    <mutant id="mutant_834" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(data.length) - j" to="j" />
    <mutant id="mutant_835" viable="false" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name)) + &quot;]&quot;" to="(&quot;FileDeleteStrategy[&quot; + (name)) * &quot;]&quot;" />
    <mutant id="mutant_836" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) - (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_830" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)" to="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) / (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_831" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(length - totalRead)" to="(length * totalRead)" />
    <mutant id="mutant_832" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="((&quot;Length to read: &quot; + length) / &quot; actual: &quot;)" />
    <mutant id="mutant_837" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) / (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" />
    <mutant id="mutant_838" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) + &quot; EB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) * &quot; EB&quot;" />
    <mutant id="mutant_839" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 3)" to="3" />
    <mutant id="mutant_1641" viable="false" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name))" to="(&quot;FileDeleteStrategy[&quot; * (name))" />
    <mutant id="mutant_1642" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_KB)" to="(FileUtils.ONE_KB) - (FileUtils.ONE_KB)" />
    <mutant id="mutant_1640" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="numberOfChars - ((position) - (size))" to="numberOfChars * ((position) - (size))" />
    <mutant id="mutant_1649" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; % file)" />
    <mutant id="mutant_1647" viable="true" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString())) + &quot;)&quot;" to="((super.toString()) + &quot;(&quot;) + (filter.toString())" />
    <mutant id="mutant_1648" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) % (readlimit))" />
    <mutant id="mutant_1645" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size)) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + condition) + (size)) - &quot;)&quot;" />
    <mutant id="mutant_1646" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="toSkip" />
    <mutant id="mutant_1643" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(len - size)" to="(len + size)" />
    <mutant id="mutant_1644" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' directory cannot be created&quot;)" to="((&quot;Destination \'&quot; + destDir) * &quot;\' directory cannot be created&quot;)" />
    <mutant id="mutant_844" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; does not exist&quot;" to="directory" />
    <mutant id="mutant_845" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + i)" to="(offset % i)" />
    <mutant id="mutant_846" viable="true" in="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)" from="((str.length()) - endLen)" to="((str.length()) / endLen)" />
    <mutant id="mutant_847" viable="false" in="?" from="(FileUtils.ONE_MB) * 30" to="30" />
    <mutant id="mutant_840" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString()))" to="(((super.toString()) + &quot;(&quot;) % (filter.toString()))" />
    <mutant id="mutant_841" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="((currentBuffer.length) * inBufferPos)" />
    <mutant id="mutant_842" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) + size)" to="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) * size)" />
    <mutant id="mutant_843" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) * &quot;]&quot;)" />
    <mutant id="mutant_848" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path)" to="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) * path)" />
    <mutant id="mutant_849" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="toSkip - remain" to="toSkip" />
    <mutant id="mutant_1234" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 0)" to="(offset / 0)" />
    <mutant id="mutant_2565" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24))" to="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) % (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24))" />
    <mutant id="mutant_1235" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k / j)" />
    <mutant id="mutant_2566" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) - (caseSensitivity))" />
    <mutant id="mutant_1232" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8))" to="(((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_2563" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) / &quot;]&quot;)" />
    <mutant id="mutant_1233" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)" from="((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)" to="((value1 &amp; 255) &lt;&lt; 0) / ((value2 &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_2564" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) - path)" />
    <mutant id="mutant_1230" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 0)" to="(offset * 0)" />
    <mutant id="mutant_2561" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size / 1)" />
    <mutant id="mutant_1231" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;)" to="&quot;Command line \'dir /-c\' did not return valid info &quot;" />
    <mutant id="mutant_2562" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="&quot;\' doesn\'t exist&quot;" />
    <mutant id="mutant_2560" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' already exists&quot;)" to="((&quot;Destination \'&quot; + destDir) % &quot;\' already exists&quot;)" />
    <mutant id="mutant_1238" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_PB)" to="(FileUtils.ONE_KB) / (FileUtils.ONE_PB)" />
    <mutant id="mutant_2569" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) - &quot;\' did not return info as expected &quot;)" />
    <mutant id="mutant_1239" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1) - prefix" to="(i + 1) + prefix" />
    <mutant id="mutant_1236" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; % destDir)" />
    <mutant id="mutant_2567" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;)" to="((&quot;Cannot move directory: &quot; + srcDir) / &quot; to a subdirectory of itself: &quot;)" />
    <mutant id="mutant_1237" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size / 1)" />
    <mutant id="mutant_2568" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;)" to="&quot;for path \'&quot;" />
    <mutant id="mutant_855" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' exists but is not a directory&quot;)" to="(&quot;Destination \'&quot; + destDir)" />
    <mutant id="mutant_856" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="size" />
    <mutant id="mutant_857" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="((basePath + '/') + fullFilenameToAdd)" to="(basePath + '/')" />
    <mutant id="mutant_858" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="((position) - (size))" to="(position)" />
    <mutant id="mutant_851" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 0)" to="(offset / 0)" />
    <mutant id="mutant_852" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path)" to="path" />
    <mutant id="mutant_853" viable="false" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not write to lockDir: &quot; + (lockDir.getAbsolutePath()))" to="(&quot;Could not write to lockDir: &quot; % (lockDir.getAbsolutePath()))" />
    <mutant id="mutant_854" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="offset + index" to="index" />
    <mutant id="mutant_859" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent.getLevel()) + 1" to="(parent.getLevel()) / 1" />
    <mutant id="mutant_1223" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length)" to="offset" />
    <mutant id="mutant_2554" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="((super.toString()) + &quot;(&quot;)" />
    <mutant id="mutant_1224" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len + 1" to="len - 1" />
    <mutant id="mutant_2555" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="&quot;Destination \'&quot;" />
    <mutant id="mutant_1221" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) - actual)" />
    <mutant id="mutant_2552" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="dest - (idx)" to="dest / (idx)" />
    <mutant id="mutant_1222" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;)" to="(&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position()))" />
    <mutant id="mutant_2553" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) + size)" to="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) - size)" />
    <mutant id="mutant_2550" viable="false" in="org.apache.commons.io.FileExistsException(java.io.File)" from="(&quot;File &quot; + file)" to="(&quot;File &quot; / file)" />
    <mutant id="mutant_1220" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="2" />
    <mutant id="mutant_2551" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="(end * start)" />
    <mutant id="mutant_1229" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="index + (includeSeparator ? 1 : 0)" to="index / (includeSeparator ? 1 : 0)" />
    <mutant id="mutant_850" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(XmlStreamWriter.BUFFER_SIZE) - (xmlProlog.length())" to="(XmlStreamWriter.BUFFER_SIZE) / (xmlProlog.length())" />
    <mutant id="mutant_1227" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) / &quot;, length=&quot;)" />
    <mutant id="mutant_2558" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" to="(((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)" />
    <mutant id="mutant_1228" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="directory" />
    <mutant id="mutant_2559" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((encoding.length()) - 1)" to="encoding.length()" />
    <mutant id="mutant_1225" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="((&quot;Length to read: &quot; + length) * &quot; actual: &quot;)" />
    <mutant id="mutant_2556" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' cannot be written to&quot;)" to="((&quot;Destination \'&quot; + destDir) % &quot;\' cannot be written to&quot;)" />
    <mutant id="mutant_1226" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="((newLineSequence.length) - 1)" to="(newLineSequence.length)" />
    <mutant id="mutant_2557" viable="false" in="?" from="1024 * 4" to="1024 % 4" />
    <mutant id="mutant_866" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;)" to="(&quot;Command line threw an InterruptedException &quot; - &quot;for command &quot;)" />
    <mutant id="mutant_867" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="length + remaining" />
    <mutant id="mutant_868" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI))) + &quot; MB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI))) * &quot; MB&quot;" />
    <mutant id="mutant_869" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;)" to="((&quot;File &quot; + directory) - &quot; exists and is &quot;)" />
    <mutant id="mutant_862" viable="false" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) + &quot; exists&quot;)" to="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) * &quot; exists&quot;)" />
    <mutant id="mutant_863" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="&quot;\'&quot;" />
    <mutant id="mutant_864" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_MB)" to="(FileUtils.ONE_KB) % (FileUtils.ONE_MB)" />
    <mutant id="mutant_865" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="(size + i)" />
    <mutant id="mutant_1212" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent.getLevel()) + 1" to="parent.getLevel()" />
    <mutant id="mutant_1696" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) / (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_2543" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="end" />
    <mutant id="mutant_1213" viable="false" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="(&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath()))" to="(&quot;Can\'t write file, lock &quot; * (lockFile.getAbsolutePath()))" />
    <mutant id="mutant_1697" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;)" to="((&quot;Failed to delete original file \'&quot; + srcFile) % &quot;\' after copy to \'&quot;)" />
    <mutant id="mutant_2544" viable="false" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; / result)" />
    <mutant id="mutant_1210" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' is a directory&quot;)" to="&quot;\' is a directory&quot;" />
    <mutant id="mutant_1694" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="file" />
    <mutant id="mutant_2541" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 2" to="prefix" />
    <mutant id="mutant_1211" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) - &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_1695" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 3)" to="offset" />
    <mutant id="mutant_2542" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="(&quot;Command line did not return any info &quot; + &quot;for command &quot;)" />
    <mutant id="mutant_1692" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) * &quot;]&quot;)" />
    <mutant id="mutant_1693" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="&quot;\' does not exist [createDestDir=&quot;" />
    <mutant id="mutant_2540" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_GB)" to="(FileUtils.ONE_KB) % (FileUtils.ONE_GB)" />
    <mutant id="mutant_1690" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 2)" to="offset" />
    <mutant id="mutant_1691" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) - (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_860" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;)" />
    <mutant id="mutant_1218" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((&quot;Encoding &quot; + encoding) + &quot; is not supported yet (feel free to submit a patch)&quot;)" to="((&quot;Encoding &quot; + encoding) / &quot; is not supported yet (feel free to submit a patch)&quot;)" />
    <mutant id="mutant_2549" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; - destDir)" />
    <mutant id="mutant_861" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)" from="(maxSizeInclusive + 1L)" to="(maxSizeInclusive * 1L)" />
    <mutant id="mutant_1219" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="((basePath + '/') + fullFilenameToAdd)" to="((basePath + '/') % fullFilenameToAdd)" />
    <mutant id="mutant_1216" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(&quot;Unexpected negative line length=&quot; + lineLengthBytes)" to="(&quot;Unexpected negative line length=&quot; / lineLengthBytes)" />
    <mutant id="mutant_2547" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) - (caseSensitivity))" />
    <mutant id="mutant_1217" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k % j)" />
    <mutant id="mutant_2548" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="destDir" />
    <mutant id="mutant_1214" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="(i * 2)" />
    <mutant id="mutant_1698" viable="true" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(super.toString())" />
    <mutant id="mutant_2545" viable="true" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="(super.toString())" />
    <mutant id="mutant_1215" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(lines.size()) - 1" to="(lines.size()) + 1" />
    <mutant id="mutant_1699" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; is not a directory&quot;)" to="(directory % &quot; is not a directory&quot;)" />
    <mutant id="mutant_2546" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="((int)(((position) - (size))))" to="((position) + (size))" />
    <mutant id="mutant_877" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) / &quot;\' did not find free space in response &quot;)" />
    <mutant id="mutant_878" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) % &quot;]&quot;" />
    <mutant id="mutant_879" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(&quot;Length to read: &quot; + length)" to="&quot;Length to read: &quot;" />
    <mutant id="mutant_873" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 4)" to="4" />
    <mutant id="mutant_874" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48))" to="(((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)" />
    <mutant id="mutant_875" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="&quot;Unable to create directory &quot; + directory" to="&quot;Unable to create directory &quot; % directory" />
    <mutant id="mutant_876" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(&quot;illegal index: &quot; + index)" to="(&quot;illegal index: &quot; % index)" />
    <mutant id="mutant_1201" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="((super.toString()) + &quot;[&quot;)" to="((super.toString()) / &quot;[&quot;)" />
    <mutant id="mutant_1685" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16))" to="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) % (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_2532" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) / actual)" />
    <mutant id="mutant_1202" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) + &quot; EB&quot;" to="String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))" />
    <mutant id="mutant_1686" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff))" to="((((super.toString()) + &quot;(&quot;) + condition) * (cutoff))" />
    <mutant id="mutant_2533" viable="false" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) % &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_1683" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="&quot;\' exists but is a directory&quot;" />
    <mutant id="mutant_2530" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(off + size)" to="(off % size)" />
    <mutant id="mutant_1200" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="prefix * 1" />
    <mutant id="mutant_1684" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size % 1)" />
    <mutant id="mutant_2531" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(&quot;Command line \'&quot; % (FileSystemUtils.DF))" />
    <mutant id="mutant_1681" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="&quot;\' does not exist&quot;" />
    <mutant id="mutant_1682" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="length - ((int)(((position) - (size))))" to="((int)((position) - (size)))" />
    <mutant id="mutant_1680" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;)" to="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" />
    <mutant id="mutant_1209" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' already exists&quot;)" to="(&quot;Destination \'&quot; + destDir)" />
    <mutant id="mutant_870" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40))" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) - (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40))" />
    <mutant id="mutant_871" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent.getLevel()) + 1" to="1" />
    <mutant id="mutant_1207" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="off" />
    <mutant id="mutant_2538" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="(high &lt;&lt; 24) / (4294967295L &amp; low)" />
    <mutant id="mutant_872" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) - &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_1208" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' is a directory&quot;)" to="(&quot;Source \'&quot; + srcFile)" />
    <mutant id="mutant_2539" viable="true" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString()))" to="((super.toString()) + &quot;(&quot;)" />
    <mutant id="mutant_1205" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="srcFile" />
    <mutant id="mutant_1689" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length) - remaining" to="remaining" />
    <mutant id="mutant_2536" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 0)" to="(offset / 0)" />
    <mutant id="mutant_1206" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) / &quot;\' did not return info as expected &quot;)" />
    <mutant id="mutant_2537" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 2" to="2" />
    <mutant id="mutant_1203" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) / path)" />
    <mutant id="mutant_1687" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16))" to="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) * (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_2534" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) % &quot;]&quot;)" />
    <mutant id="mutant_1204" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) + &quot;\'&quot;)" to="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) * &quot;\'&quot;)" />
    <mutant id="mutant_1688" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="(off / len)" />
    <mutant id="mutant_2535" viable="true" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="&quot;[caseSensitivity=&quot;" />
    <mutant id="mutant_404" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="(&quot;Destination directory \'&quot; / destDir)" />
    <mutant id="mutant_888" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset)" to="offset" />
    <mutant id="mutant_405" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="(&quot;File does not exist: &quot; + file)" to="(&quot;File does not exist: &quot; * file)" />
    <mutant id="mutant_889" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="(&quot;Array Size=&quot; - (b.length))" />
    <mutant id="mutant_406" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) % &quot;(&quot;)" />
    <mutant id="mutant_407" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - j" to="i % j" />
    <mutant id="mutant_400" viable="false" in="?" from="1024 * 4" to="4" />
    <mutant id="mutant_884" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) % &quot;(&quot;)" />
    <mutant id="mutant_401" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path)" to="((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) - path)" />
    <mutant id="mutant_885" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is read-only&quot;)" to="((&quot;Destination \'&quot; + destFile) / &quot;\' exists but is read-only&quot;)" />
    <mutant id="mutant_402" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position()))" to="(cbuf.position())" />
    <mutant id="mutant_886" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' is not a directory&quot;)" to="((&quot;Source \'&quot; + srcDir) - &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_403" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - 4" to="4" />
    <mutant id="mutant_887" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be read&quot;)" to="((&quot;File \'&quot; + file) - &quot;\' cannot be read&quot;)" />
    <mutant id="mutant_1281" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_1282" viable="true" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="(index + 1)" to="1" />
    <mutant id="mutant_1280" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="(position + c)" to="(position * c)" />
    <mutant id="mutant_408" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 0)" to="offset" />
    <mutant id="mutant_409" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;)" to="((&quot;Failed to delete original directory \'&quot; + srcDir) - &quot;\' after copy to \'&quot;)" />
    <mutant id="mutant_1278" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16))" to="((value3 &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_2125" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcFile) * &quot;\' does not exist&quot;)" />
    <mutant id="mutant_1279" viable="true" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="&quot;text/xml&quot; + httpContentType" to="httpContentType" />
    <mutant id="mutant_2126" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(&quot;Length to read: &quot; + length)" to="(&quot;Length to read: &quot; % length)" />
    <mutant id="mutant_1276" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; - result)" />
    <mutant id="mutant_2123" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(newLineSequence.length) - 1" to="(newLineSequence.length) % 1" />
    <mutant id="mutant_1277" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i + 1" to="i - 1" />
    <mutant id="mutant_2124" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1) * (blockSize)" to="no - 1" />
    <mutant id="mutant_1274" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="&quot;Destination \'&quot;" />
    <mutant id="mutant_2121" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) - (filledBufferSum)" to="(count) % (filledBufferSum)" />
    <mutant id="mutant_1275" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) * createDestDir)" />
    <mutant id="mutant_2122" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(lines.size()) - 1" to="1" />
    <mutant id="mutant_1272" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; * destDir)" />
    <mutant id="mutant_1273" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="(&quot;Destination directory \'&quot; + destDir)" />
    <mutant id="mutant_2120" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48))" to="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) / (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48))" />
    <mutant id="mutant_880" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="length % remaining" />
    <mutant id="mutant_881" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;)" to="&quot;for path \'&quot;" />
    <mutant id="mutant_882" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) + timeout)" to="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) % timeout)" />
    <mutant id="mutant_883" viable="false" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name)) + &quot;]&quot;" to="(&quot;FileDeleteStrategy[&quot; + (name)) - &quot;]&quot;" />
    <mutant id="mutant_2129" viable="false" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="filename + (FilenameUtils.UNIX_SEPARATOR)" to="filename * (FilenameUtils.UNIX_SEPARATOR)" />
    <mutant id="mutant_2127" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path)" to="(&quot;\&quot;&quot; % path)" />
    <mutant id="mutant_2128" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(&quot;XML prolog or ROOT element not found on first &quot; + offset)" to="(&quot;XML prolog or ROOT element not found on first &quot; / offset)" />
    <mutant id="mutant_415" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i + 1" to="i" />
    <mutant id="mutant_899" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="prefix - 1" />
    <mutant id="mutant_416" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size)) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + condition) + (size)" />
    <mutant id="mutant_417" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) + len" to="(count) * len" />
    <mutant id="mutant_418" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) - &quot;for path \'&quot;)" />
    <mutant id="mutant_411" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="length % remaining" />
    <mutant id="mutant_895" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) / (caseSensitivity))" />
    <mutant id="mutant_412" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) + dstLen)" to="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) % dstLen)" />
    <mutant id="mutant_896" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;Directory \'&quot; + parent) + &quot;\' could not be created&quot;)" to="((&quot;Directory \'&quot; + parent) - &quot;\' could not be created&quot;)" />
    <mutant id="mutant_413" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcFile) % &quot;\' does not exist&quot;)" />
    <mutant id="mutant_897" viable="false" in="org.apache.commons.io.EndianUtils.swapShort(short)" from="((short)((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)))" to="(((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) * (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_414" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="index + (includeSeparator ? 1 : 0)" to="index" />
    <mutant id="mutant_898" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="j - 1" />
    <mutant id="mutant_1270" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j)" to="(i * j)" />
    <mutant id="mutant_1271" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(totalByteLength) / blockSize" to="(totalByteLength) * blockSize" />
    <mutant id="mutant_419" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len + 1" to="len / 1" />
    <mutant id="mutant_1267" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 2)" to="2" />
    <mutant id="mutant_2114" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(&quot;Marked position [&quot; + (mark))" to="(mark)" />
    <mutant id="mutant_2598" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 0)" to="(offset - 0)" />
    <mutant id="mutant_1268" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)" from="(maxSizeInclusive + 1L)" to="maxSizeInclusive" />
    <mutant id="mutant_2115" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;)" to="((&quot;Array Size=&quot; + (array.length)) - &quot;, offset=&quot;)" />
    <mutant id="mutant_2599" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size + 1)" />
    <mutant id="mutant_1265" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 7)" to="(offset % 7)" />
    <mutant id="mutant_2112" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart) + 1" to="((currentLastBytePos) - lineStart) * 1" />
    <mutant id="mutant_2596" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) + (this.mark_cbuf))" to="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) - (this.mark_cbuf))" />
    <mutant id="mutant_1266" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_2113" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="&quot;Unable to delete file: &quot; + file" to="&quot;Unable to delete file: &quot; / file" />
    <mutant id="mutant_2597" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - 4" to="i" />
    <mutant id="mutant_1263" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="(off * len)" />
    <mutant id="mutant_2110" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="Math.min(posUnix, posWin)" />
    <mutant id="mutant_2594" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="srcDir" />
    <mutant id="mutant_1264" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) % actual)" />
    <mutant id="mutant_2111" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; - destDir)" />
    <mutant id="mutant_2595" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) / (readlimit))" />
    <mutant id="mutant_1261" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="j" />
    <mutant id="mutant_2592" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 0)" to="(offset % 0)" />
    <mutant id="mutant_1262" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; % result)" />
    <mutant id="mutant_2593" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="(&quot;Destination directory \'&quot; - destDir)" />
    <mutant id="mutant_891" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;)" to="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) - &quot;, length=&quot;)" />
    <mutant id="mutant_892" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; does not exist&quot;)" to="(directory % &quot; does not exist&quot;)" />
    <mutant id="mutant_893" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="(size + i)" />
    <mutant id="mutant_410" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) - off)" />
    <mutant id="mutant_894" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Failed to delete original file \'&quot; + srcFile)" to="(&quot;Failed to delete original file \'&quot; - srcFile)" />
    <mutant id="mutant_2118" viable="false" in="org.apache.commons.io.IOCase.forName(java.lang.String)" from="(&quot;Invalid IOCase name: &quot; + name)" to="(&quot;Invalid IOCase name: &quot; * name)" />
    <mutant id="mutant_2119" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="toSkip - remain" to="remain" />
    <mutant id="mutant_1269" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="off" />
    <mutant id="mutant_2116" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_890" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString())) + &quot;]&quot;" to="(((super.toString()) + &quot;[&quot;) + (delegate.toString())) / &quot;]&quot;" />
    <mutant id="mutant_2117" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) / (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_426" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 3)" to="3" />
    <mutant id="mutant_427" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="(&quot;File does not exist: &quot; + file)" to="&quot;File does not exist: &quot;" />
    <mutant id="mutant_428" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="1" />
    <mutant id="mutant_429" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(&quot;Length to read: &quot; + length)" to="&quot;Length to read: &quot;" />
    <mutant id="mutant_422" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path)" to="((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) * path)" />
    <mutant id="mutant_423" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="(&quot;Not a directory: &quot; + directory)" to="(&quot;Not a directory: &quot; - directory)" />
    <mutant id="mutant_424" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="(high &lt;&lt; 24) - (4294967295L &amp; low)" />
    <mutant id="mutant_425" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="(high &lt;&lt; 24) % (4294967295L &amp; low)" />
    <mutant id="mutant_2590" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" />
    <mutant id="mutant_1260" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; does not exist&quot;)" to="&quot; does not exist&quot;" />
    <mutant id="mutant_2591" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 7)" to="(offset - 7)" />
    <mutant id="mutant_1256" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(j + 1)" to="1" />
    <mutant id="mutant_2103" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) % (Arrays.asList(cmdAttribs)))" />
    <mutant id="mutant_2587" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="(off + i)" to="(off * i)" />
    <mutant id="mutant_1257" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size1 - size2" to="size2" />
    <mutant id="mutant_2104" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line did not return any info &quot; + &quot;for command &quot;)" to="&quot;Command line did not return any info &quot;" />
    <mutant id="mutant_2588" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="length" />
    <mutant id="mutant_1254" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) / &quot;for path \'&quot;)" />
    <mutant id="mutant_2101" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="((&quot;Chars to skip: &quot; + toSkip) % &quot; actual: &quot;)" />
    <mutant id="mutant_2585" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((mark) + (readlimit))" to="(mark)" />
    <mutant id="mutant_1255" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="(((super.toString()) + &quot;(&quot;) % condition)" />
    <mutant id="mutant_2102" viable="true" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="&quot;[caseSensitivity=&quot;" />
    <mutant id="mutant_2586" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 0)" to="(offset % 0)" />
    <mutant id="mutant_1252" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;)" to="((&quot;Length to read: &quot; + expected) * &quot; actual: &quot;)" />
    <mutant id="mutant_2583" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="(pos / i)" />
    <mutant id="mutant_1253" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(&quot;Command line \'&quot; / (FileSystemUtils.DF))" />
    <mutant id="mutant_2100" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory)" to="directory" />
    <mutant id="mutant_2584" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Failed to copy full contents from \'&quot; + srcFile)" to="srcFile" />
    <mutant id="mutant_1250" viable="true" in="org.apache.commons.io.input.BoundedReader.mark(int)" from="readAheadLimit - (charsRead)" to="readAheadLimit" />
    <mutant id="mutant_2581" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(&quot;Buffer size &quot; + bufferSize)" to="bufferSize" />
    <mutant id="mutant_1251" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + destDir)" to="(&quot;Source \'&quot; / destDir)" />
    <mutant id="mutant_2582" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="(&quot;Failed to list contents of &quot; % directory)" />
    <mutant id="mutant_420" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) / &quot;\'- check path is valid&quot;)" />
    <mutant id="mutant_2109" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) * &quot;, length=&quot;)" />
    <mutant id="mutant_421" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="prefix - 1" />
    <mutant id="mutant_2107" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="&quot; actual: &quot;" />
    <mutant id="mutant_2108" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; / destDir)" />
    <mutant id="mutant_1258" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path) + &quot;\&quot;&quot;" to="(&quot;\&quot;&quot; + path) * &quot;\&quot;&quot;" />
    <mutant id="mutant_2105" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8))" to="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) % (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_2589" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; - destDir)" />
    <mutant id="mutant_1259" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="(&quot;Not a directory: &quot; + directory)" to="(&quot;Not a directory: &quot; * directory)" />
    <mutant id="mutant_2106" viable="true" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_437" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="(off / len)" />
    <mutant id="mutant_438" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="(end * start)" />
    <mutant id="mutant_439" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((currentBuffer.length) - inBufferPos)" to="((currentBuffer.length) / inBufferPos)" />
    <mutant id="mutant_433" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(XmlStreamWriter.BUFFER_SIZE) - (xmlProlog.length())" to="(XmlStreamWriter.BUFFER_SIZE) + (xmlProlog.length())" />
    <mutant id="mutant_434" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="((&quot;Length to read: &quot; + length) * &quot; actual: &quot;)" />
    <mutant id="mutant_435" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) + actual)" to="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) / actual)" />
    <mutant id="mutant_436" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="&quot;The byte count &quot;" />
    <mutant id="mutant_2580" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="1" />
    <mutant id="mutant_1245" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_2576" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="(&quot;Bytes to skip must not be negative: &quot; / toSkip)" />
    <mutant id="mutant_1246" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) + len" to="count" />
    <mutant id="mutant_2577" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + delegate) / &quot;)&quot;" />
    <mutant id="mutant_1243" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="&quot;File \'&quot;" />
    <mutant id="mutant_2574" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="depth + 1" to="1" />
    <mutant id="mutant_1244" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Unexpected readed size. current: &quot; + offset)" to="(&quot;Unexpected readed size. current: &quot; % offset)" />
    <mutant id="mutant_2575" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile)" to="((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;)" />
    <mutant id="mutant_1241" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) * (readlimit))" />
    <mutant id="mutant_2572" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="(&quot;Bytes to skip: &quot; % toSkip)" />
    <mutant id="mutant_1242" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="1" />
    <mutant id="mutant_2573" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="&quot; actual: &quot;" />
    <mutant id="mutant_2570" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1) - prefix" to="i + 1" />
    <mutant id="mutant_1240" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;)" to="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) - &quot; expected=&quot;)" />
    <mutant id="mutant_2571" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 5)" to="(offset - 5)" />
    <mutant id="mutant_430" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length) - remaining" to="(offset + length) * remaining" />
    <mutant id="mutant_431" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)" from="((short)((((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) + (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)))" to="(((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) % (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_432" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="(&quot;Array Size=&quot; + (b.length))" />
    <mutant id="mutant_1249" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) - path)" />
    <mutant id="mutant_1247" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; - destDir)" />
    <mutant id="mutant_2578" viable="true" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not write to lockDir: &quot; + (lockDir.getAbsolutePath()))" to="lockDir.getAbsolutePath()" />
    <mutant id="mutant_1248" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="(((value1 &amp; 255) &lt;&lt; 0) * ((value2 &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_2579" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) - &quot;]&quot;)" />
    <mutant id="mutant_327" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) + &quot; TB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) * &quot; TB&quot;" />
    <mutant id="mutant_328" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; * destDir)" />
    <mutant id="mutant_329" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) + timeout)" to="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) / timeout)" />
    <mutant id="mutant_323" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="numberOfBytes - ((position) - (size))" to="(position) - (size)" />
    <mutant id="mutant_324" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 5)" to="(offset % 5)" />
    <mutant id="mutant_325" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(offset + location)" to="offset" />
    <mutant id="mutant_326" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 0)" to="offset" />
    <mutant id="mutant_1083" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' exists but is not a directory&quot;)" to="&quot;\' exists but is not a directory&quot;" />
    <mutant id="mutant_1084" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="&quot;Command line \'&quot;" />
    <mutant id="mutant_1081" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j) - ((newLineSequence.length) - 1)" to="(i + j) / ((newLineSequence.length) - 1)" />
    <mutant id="mutant_1082" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 2)" to="(offset / 2)" />
    <mutant id="mutant_1080" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 1)" to="1" />
    <mutant id="mutant_1078" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1) * (blockSize)" to="(no - 1) - (blockSize)" />
    <mutant id="mutant_1079" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Failed to delete original file \'&quot; + srcFile)" to="(&quot;Failed to delete original file \'&quot; / srcFile)" />
    <mutant id="mutant_1076" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) * &quot;\' did not return data as expected &quot;)" />
    <mutant id="mutant_1077" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 0)" to="(offset - 0)" />
    <mutant id="mutant_1074" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(size - offset)" to="offset" />
    <mutant id="mutant_1075" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_320" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; is not a directory&quot;" to="directory - &quot; is not a directory&quot;" />
    <mutant id="mutant_321" viable="false" in="org.apache.commons.io.FileUtils.touch(java.io.File)" from="(&quot;Unable to set the last modification time for &quot; + file)" to="(&quot;Unable to set the last modification time for &quot; - file)" />
    <mutant id="mutant_322" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_338" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_GB)" to="FileUtils.ONE_KB" />
    <mutant id="mutant_339" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) + length)" to="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;)" />
    <mutant id="mutant_334" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="(j + 6)" to="(j - 6)" />
    <mutant id="mutant_335" viable="true" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="((file.getName()) + (LockableFileWriter.LCK))" to="LockableFileWriter.LCK" />
    <mutant id="mutant_336" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) % &quot;]&quot;)" />
    <mutant id="mutant_337" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) + &quot; PB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) / &quot; PB&quot;" />
    <mutant id="mutant_1072" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="((basePath + '/') + fullFilenameToAdd)" to="((basePath + '/') * fullFilenameToAdd)" />
    <mutant id="mutant_1073" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="length" />
    <mutant id="mutant_1070" viable="false" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="((&quot;write(&quot; + b) + &quot;) failed: stream is closed&quot;)" to="((&quot;write(&quot; + b) % &quot;) failed: stream is closed&quot;)" />
    <mutant id="mutant_1071" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(&quot;XML prolog or ROOT element not found on first &quot; + offset)" to="(&quot;XML prolog or ROOT element not found on first &quot; - offset)" />
    <mutant id="mutant_1069" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="length - ((int)(((position) - (size))))" to="length / ((int)(((position) - (size))))" />
    <mutant id="mutant_1067" viable="true" in="org.apache.commons.io.IOCase.forName(java.lang.String)" from="(&quot;Invalid IOCase name: &quot; + name)" to="name" />
    <mutant id="mutant_2398" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_1068" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcFile) * &quot;\' does not exist&quot;)" />
    <mutant id="mutant_2399" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; is not a directory&quot;" to="directory - &quot; is not a directory&quot;" />
    <mutant id="mutant_1065" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="((&quot;Array Size=&quot; + (b.length)) * &quot;, offset=&quot;)" />
    <mutant id="mutant_2396" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) / &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_1066" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="((&quot;Array Size=&quot; + (b.length)) - &quot;, offset=&quot;)" />
    <mutant id="mutant_2397" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="&quot;\' is not a directory&quot;" />
    <mutant id="mutant_1063" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) / (caseSensitivity))" />
    <mutant id="mutant_2394" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' already exists&quot;)" to="((&quot;Destination \'&quot; + destFile) - &quot;\' already exists&quot;)" />
    <mutant id="mutant_1064" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="(off + i)" to="i" />
    <mutant id="mutant_2395" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + '/')" to="(basePath / '/')" />
    <mutant id="mutant_330" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(&quot;Length to read: &quot; + length)" to="(&quot;Length to read: &quot; / length)" />
    <mutant id="mutant_331" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="index + separatorAdd" to="index % separatorAdd" />
    <mutant id="mutant_332" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_MB)" to="FileUtils.ONE_MB" />
    <mutant id="mutant_333" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(j + 1)" to="(j - 1)" />
    <mutant id="mutant_349" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="depth + 1" to="depth" />
    <mutant id="mutant_345" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(offset + location)" to="(offset / location)" />
    <mutant id="mutant_346" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="(str.length()) - (search.length())" to="(str.length()) + (search.length())" />
    <mutant id="mutant_347" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; is not a directory&quot;)" to="(directory - &quot; is not a directory&quot;)" />
    <mutant id="mutant_348" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; - file)" />
    <mutant id="mutant_1061" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) * path)" />
    <mutant id="mutant_2392" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_1062" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be read&quot;)" to="((&quot;File \'&quot; + file) / &quot;\' cannot be read&quot;)" />
    <mutant id="mutant_2393" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="(&quot;Failed to list contents of &quot; - directory)" />
    <mutant id="mutant_2390" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + parentFile) + &quot;\' directory cannot be created&quot;)" to="((&quot;Destination \'&quot; + parentFile) / &quot;\' directory cannot be created&quot;)" />
    <mutant id="mutant_1060" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 6)" to="offset" />
    <mutant id="mutant_2391" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(offset + location)" to="(offset % location)" />
    <mutant id="mutant_1058" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="srcFile" />
    <mutant id="mutant_2389" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" />
    <mutant id="mutant_1059" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 3)" to="offset" />
    <mutant id="mutant_1056" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;)" to="((&quot;Unexpected readed size. current: &quot; + offset) / &quot;, excepted: &quot;)" />
    <mutant id="mutant_2387" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; does not exist&quot;" to="directory" />
    <mutant id="mutant_1057" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart)" to="((currentLastBytePos) + lineStart)" />
    <mutant id="mutant_2388" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length) - remaining" to="(offset + length) + remaining" />
    <mutant id="mutant_1054" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) - (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_2385" viable="false" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not write to lockDir: &quot; + (lockDir.getAbsolutePath()))" to="(&quot;Could not write to lockDir: &quot; / (lockDir.getAbsolutePath()))" />
    <mutant id="mutant_1055" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + fullFilenameToAdd)" to="(basePath * fullFilenameToAdd)" />
    <mutant id="mutant_2386" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(size - offset)" to="(size % offset)" />
    <mutant id="mutant_1052" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) / skipped)" />
    <mutant id="mutant_2383" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path)" />
    <mutant id="mutant_1053" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' is not a directory&quot;)" to="((&quot;Source \'&quot; + srcDir) * &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_2384" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;)" to="(&quot;File &quot; + directory)" />
    <mutant id="mutant_341" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) % &quot;\' did not return info as expected &quot;)" />
    <mutant id="mutant_342" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) % &quot;, length=&quot;)" />
    <mutant id="mutant_343" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="((currentBuffer.length) + inBufferPos)" />
    <mutant id="mutant_344" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) + lines)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) - lines)" />
    <mutant id="mutant_340" viable="true" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="(index + 1)" to="(index - 1)" />
    <mutant id="mutant_356" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="&quot;Unable to create directory &quot; + directory" to="&quot;Unable to create directory &quot; * directory" />
    <mutant id="mutant_357" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_358" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="(pos % i)" />
    <mutant id="mutant_359" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 1)" to="(offset % 1)" />
    <mutant id="mutant_1050" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="(file1.lastModified()) - (file2.lastModified())" to="file1.lastModified()" />
    <mutant id="mutant_2381" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen)" to="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;)" />
    <mutant id="mutant_1051" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 2)" to="offset" />
    <mutant id="mutant_2382" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_2380" viable="true" in="org.apache.commons.io.FilenameUtils.getName(java.lang.String)" from="(index + 1)" to="1" />
    <mutant id="mutant_1047" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="((&quot;Array Size=&quot; + (b.length)) - &quot;, offset=&quot;)" />
    <mutant id="mutant_2378" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="((&quot;File \'&quot; + file) - &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_1048" viable="false" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name)) + &quot;]&quot;" to="(&quot;FileDeleteStrategy[&quot; + (name)) / &quot;]&quot;" />
    <mutant id="mutant_2379" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="((&quot;Bytes to skip: &quot; + toSkip) * &quot; actual: &quot;)" />
    <mutant id="mutant_1045" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 1)" to="1" />
    <mutant id="mutant_2376" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.available()" from="(this.bbuf.remaining()) + (this.cbuf.remaining())" to="(this.bbuf.remaining()) * (this.cbuf.remaining())" />
    <mutant id="mutant_1046" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;)" to="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) * &quot; timeout=&quot;)" />
    <mutant id="mutant_2377" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;)" to="((&quot;Failed to delete original file \'&quot; + srcFile) - &quot;\' after copy to \'&quot;)" />
    <mutant id="mutant_1043" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) % &quot;)&quot;" />
    <mutant id="mutant_2374" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="prefix % 1" />
    <mutant id="mutant_1044" viable="false" in="?" from="1024 * 4" to="1024" />
    <mutant id="mutant_2375" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; does not exist&quot;" to="directory % &quot; does not exist&quot;" />
    <mutant id="mutant_1041" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="(pos / i)" />
    <mutant id="mutant_2372" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_GB)" to="(FileUtils.ONE_KB) - (FileUtils.ONE_GB)" />
    <mutant id="mutant_1042" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="(&quot;The reference file \'&quot; / reference)" />
    <mutant id="mutant_2373" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" to="((data[(offset + 0)]) &amp; 255) &lt;&lt; 0" />
    <mutant id="mutant_352" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="size" />
    <mutant id="mutant_353" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) / (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_354" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="(&quot;Skip count must be non-negative, actual: &quot; / toSkip)" />
    <mutant id="mutant_355" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="numberOfChars - ((position) - (size))" to="numberOfChars / ((position) - (size))" />
    <mutant id="mutant_350" viable="false" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="(&quot;write(&quot; + b)" to="(&quot;write(&quot; * b)" />
    <mutant id="mutant_1049" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((totalByteLength) / blockSize) + 1" to="((totalByteLength) / blockSize) - 1" />
    <mutant id="mutant_351" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="j % 1" />
    <mutant id="mutant_367" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="(str.length()) - (search.length())" to="(str.length()) * (search.length())" />
    <mutant id="mutant_368" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + src)" to="(&quot;Source \'&quot; / src)" />
    <mutant id="mutant_369" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + fullFilenameToAdd)" to="(basePath - fullFilenameToAdd)" />
    <mutant id="mutant_363" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 1)" to="1" />
    <mutant id="mutant_364" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) - actual)" />
    <mutant id="mutant_365" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory) + &quot;.&quot;" to="&quot;Unable to delete directory &quot; + directory" />
    <mutant id="mutant_366" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(length - totalRead)" to="(length % totalRead)" />
    <mutant id="mutant_360" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="(size / i)" />
    <mutant id="mutant_361" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' is a directory&quot;)" to="((&quot;Destination \'&quot; + destFile) - &quot;\' is a directory&quot;)" />
    <mutant id="mutant_362" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(&quot;Marked position [&quot; + (mark))" to="(&quot;Marked position [&quot; - (mark))" />
    <mutant id="mutant_378" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) - (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_379" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16))" to="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) % (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_374" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 1)" to="1" />
    <mutant id="mutant_375" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="(&quot;Not a directory: &quot; + directory)" to="&quot;Not a directory: &quot;" />
    <mutant id="mutant_376" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.available()" from="(this.bbuf.remaining()) + (this.cbuf.remaining())" to="(this.bbuf.remaining()) / (this.cbuf.remaining())" />
    <mutant id="mutant_377" viable="false" in="?" from="(FileUtils.ONE_MB) * 30" to="FileUtils.ONE_MB" />
    <mutant id="mutant_370" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line did not return any info &quot; + &quot;for command &quot;)" to="(&quot;Command line did not return any info &quot; % &quot;for command &quot;)" />
    <mutant id="mutant_371" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; / srcFile)" />
    <mutant id="mutant_372" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)" from="((short)((((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) + (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)))" to="((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8" />
    <mutant id="mutant_373" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="(&quot;File &quot; + directory)" to="(&quot;File &quot; - directory)" />
    <mutant id="mutant_389" viable="false" in="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)" from="(&quot;Parameter \'directory\' is not a directory: &quot; + directory)" to="(&quot;Parameter \'directory\' is not a directory: &quot; / directory)" />
    <mutant id="mutant_380" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) + size)" to="((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;)" />
    <mutant id="mutant_1098" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1) - prefix" to="(i + 1) * prefix" />
    <mutant id="mutant_1099" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart) + 1" to="1" />
    <mutant id="mutant_1096" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(&quot;Array Size=&quot; + (array.length))" to="(&quot;Array Size=&quot; - (array.length))" />
    <mutant id="mutant_1097" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) / (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_385" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((encoding.length()) - 1)" to="((encoding.length()) + 1)" />
    <mutant id="mutant_386" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="((currentBuffer.length) * inBufferPos)" />
    <mutant id="mutant_387" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) / len)" />
    <mutant id="mutant_388" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff))" to="((((super.toString()) + &quot;(&quot;) + condition) - (cutoff))" />
    <mutant id="mutant_381" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Size must be equal or greater than zero: &quot; + size)" to="(&quot;Size must be equal or greater than zero: &quot; % size)" />
    <mutant id="mutant_382" viable="false" in="?" from="1024 * 4" to="1024 - 4" />
    <mutant id="mutant_383" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="srcDir" />
    <mutant id="mutant_384" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Failed to delete original directory \'&quot; + srcDir)" to="(&quot;Failed to delete original directory \'&quot; - srcDir)" />
    <mutant id="mutant_1094" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 1)" to="(offset % 1)" />
    <mutant id="mutant_1095" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_1092" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) - (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_1093" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 3)" to="(offset - 3)" />
    <mutant id="mutant_1090" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size % 1)" />
    <mutant id="mutant_1091" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(&quot;Length to read: &quot; + length)" to="(&quot;Length to read: &quot; - length)" />
    <mutant id="mutant_390" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir)" to="destDir" />
    <mutant id="mutant_1089" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' exists but is a directory&quot;)" to="&quot;\' exists but is a directory&quot;" />
    <mutant id="mutant_391" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) / createDestDir)" />
    <mutant id="mutant_1087" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="&quot;Unable to create directory &quot; + directory" to="directory" />
    <mutant id="mutant_1088" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_1085" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; - srcFile)" />
    <mutant id="mutant_1086" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen)" to="srcLen" />
    <mutant id="mutant_396" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' already exists&quot;)" to="((&quot;Destination \'&quot; + destFile) / &quot;\' already exists&quot;)" />
    <mutant id="mutant_397" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) + (Arrays.asList(cmdAttribs)))" to="(((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) / (Arrays.asList(cmdAttribs)))" />
    <mutant id="mutant_398" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="length" />
    <mutant id="mutant_399" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="(size * i)" />
    <mutant id="mutant_392" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="((&quot;Array Size=&quot; + (b.length)) / &quot;, offset=&quot;)" />
    <mutant id="mutant_393" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + '/')" to="(basePath % '/')" />
    <mutant id="mutant_394" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="2" />
    <mutant id="mutant_395" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="(&quot;Bytes to skip must not be negative: &quot; * toSkip)" />
    <mutant id="mutant_1919" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size + 2" to="size - 2" />
    <mutant id="mutant_1917" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' is a directory&quot;)" to="((&quot;Source \'&quot; + srcFile) * &quot;\' is a directory&quot;)" />
    <mutant id="mutant_1918" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="i" />
    <mutant id="mutant_1915" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) - &quot;for path \'&quot;)" />
    <mutant id="mutant_1916" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="length" />
    <mutant id="mutant_1913" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="(Math.min(posUnix, posWin)) % 1" />
    <mutant id="mutant_1914" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(&quot;Unexpected negative line length=&quot; + lineLengthBytes)" to="&quot;Unexpected negative line length=&quot;" />
    <mutant id="mutant_1911" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) * (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_1912" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;)" to="((&quot;Unexpected readed size. current: &quot; + offset) - &quot;, excepted: &quot;)" />
    <mutant id="mutant_1910" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) - len)" />
    <mutant id="mutant_1908" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; - srcDir)" />
    <mutant id="mutant_1909" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((&quot;Encoding &quot; + encoding) + &quot; is not supported yet (feel free to submit a patch)&quot;)" to="((&quot;Encoding &quot; + encoding) % &quot; is not supported yet (feel free to submit a patch)&quot;)" />
    <mutant id="mutant_1906" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;)" to="&quot; into array of length &quot;" />
    <mutant id="mutant_1907" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Failed to list contents of &quot; + srcDir)" to="(&quot;Failed to list contents of &quot; * srcDir)" />
    <mutant id="mutant_1904" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="(&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;)" />
    <mutant id="mutant_1905" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(&quot;Marked position [&quot; + (mark))" to="&quot;Marked position [&quot;" />
    <mutant id="mutant_1902" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; - destDir)" />
    <mutant id="mutant_1903" viable="false" in="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)" from="(&quot;Deletion failed: &quot; + fileToDelete)" to="(&quot;Deletion failed: &quot; - fileToDelete)" />
    <mutant id="mutant_1900" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size)) + &quot; bytes&quot;" to="(String.valueOf(size)) * &quot; bytes&quot;" />
    <mutant id="mutant_1901" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="(freeSpaceWindows(path, timeout)) / (FileUtils.ONE_KB)" to="(freeSpaceWindows(path, timeout)) * (FileUtils.ONE_KB)" />
    <mutant id="mutant_1959" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) * &quot;]&quot;)" />
    <mutant id="mutant_1950" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(FileSystemUtils.DF)" />
    <mutant id="mutant_1957" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) + (currentLastBytePos))" to="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) / (currentLastBytePos))" />
    <mutant id="mutant_1958" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) - path)" />
    <mutant id="mutant_1955" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" />
    <mutant id="mutant_1956" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="1" />
    <mutant id="mutant_1953" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory) + &quot;.&quot;" to="(&quot;Unable to delete directory &quot; + directory) / &quot;.&quot;" />
    <mutant id="mutant_1954" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="reference" />
    <mutant id="mutant_1951" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) - (filledBufferSum)" to="(count) / (filledBufferSum)" />
    <mutant id="mutant_1952" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" from="((written) + count)" to="((written) / count)" />
    <mutant id="mutant_1948" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI))) + &quot; GB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI))) * &quot; GB&quot;" />
    <mutant id="mutant_1949" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + src)" to="(&quot;Source \'&quot; * src)" />
    <mutant id="mutant_1946" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="(&quot;Skip count must be non-negative, actual: &quot; - toSkip)" />
    <mutant id="mutant_1947" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="((super.toString()) + &quot;[sumDirectoryContents=&quot;)" to="((super.toString()) % &quot;[sumDirectoryContents=&quot;)" />
    <mutant id="mutant_1944" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size))" to="((((super.toString()) + &quot;(&quot;) + condition) - (size))" />
    <mutant id="mutant_1945" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) + destDir)" to="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) / destDir)" />
    <mutant id="mutant_1942" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) + (data.length))" to="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) % (data.length))" />
    <mutant id="mutant_1943" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 0)" to="(offset % 0)" />
    <mutant id="mutant_1940" viable="true" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="((file.getName()) + (LockableFileWriter.LCK))" to="file.getName()" />
    <mutant id="mutant_1941" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="1" />
    <mutant id="mutant_1939" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(lines.size()) - 1" to="(lines.size()) * 1" />
    <mutant id="mutant_1937" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + parentFile)" to="(&quot;Destination \'&quot; - parentFile)" />
    <mutant id="mutant_1938" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="((max) - (pos))" to="((max) / (pos))" />
    <mutant id="mutant_1935" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((currentBuffer.length) - inBufferPos)" to="inBufferPos" />
    <mutant id="mutant_1936" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="length * remaining" />
    <mutant id="mutant_1933" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;)" to="(&quot;Command line \'dir /-c\' did not return valid info &quot; * &quot;for path \'&quot;)" />
    <mutant id="mutant_1934" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="((super.toString()) % &quot;[caseSensitivity=&quot;)" />
    <mutant id="mutant_1931" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="length + (leftOverOfLastFilePart != null ? leftOverOfLastFilePart.length : 0)" to="length" />
    <mutant id="mutant_1932" viable="false" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) + &quot; exists&quot;)" to="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) % &quot; exists&quot;)" />
    <mutant id="mutant_1930" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) % &quot;, length=&quot;)" />
    <mutant id="mutant_1928" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="length % remaining" />
    <mutant id="mutant_1929" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="(&quot;File does not exist: &quot; + file)" to="file" />
    <mutant id="mutant_1926" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) - &quot;]&quot;" />
    <mutant id="mutant_1927" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="((max) - (pos))" to="((max) + (pos))" />
    <mutant id="mutant_1924" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory) + &quot;.&quot;" to="(&quot;Unable to delete directory &quot; + directory) - &quot;.&quot;" />
    <mutant id="mutant_1925" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="(&quot;Bytes to skip: &quot; / toSkip)" />
    <mutant id="mutant_1922" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(size - offset)" to="(size / offset)" />
    <mutant id="mutant_1923" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) % (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_1920" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="((int)(((position) - (size))))" to="((position) % (size))" />
    <mutant id="mutant_1921" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="(prefix * 2)" />
    <mutant id="mutant_1519" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len + 1" to="len % 1" />
    <mutant id="mutant_1993" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size)) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + condition) + (size)) / &quot;)&quot;" />
    <mutant id="mutant_1510" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="prefix * 1" />
    <mutant id="mutant_1994" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; is not a directory&quot;" to="directory * &quot; is not a directory&quot;" />
    <mutant id="mutant_1991" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="((data[(offset + 3)]) &amp; 255) &lt;&lt; 24" />
    <mutant id="mutant_1992" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) + size)" to="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) % size)" />
    <mutant id="mutant_1990" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((xmlProlog.length()) + len)" to="((xmlProlog.length()) % len)" />
    <mutant id="mutant_1517" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16))" to="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) - (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_1518" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="((&quot;Marked position [&quot; + (mark)) * &quot;] is no longer valid - passed the read limit [&quot;)" />
    <mutant id="mutant_1515" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size1 - size2" to="size1 % size2" />
    <mutant id="mutant_1999" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(&quot;Array Size=&quot; + (array.length))" to="(&quot;Array Size=&quot; % (array.length))" />
    <mutant id="mutant_1516" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="(prefix % 2)" />
    <mutant id="mutant_1513" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile)" to="destFile" />
    <mutant id="mutant_1997" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 1)" to="1" />
    <mutant id="mutant_1514" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) * (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_1998" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(data.length) - j" to="data.length" />
    <mutant id="mutant_1511" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line returned OS error code \'&quot; + (proc.exitValue()))" to="(&quot;Command line returned OS error code \'&quot; - (proc.exitValue()))" />
    <mutant id="mutant_1995" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="(pos + i) / 1" />
    <mutant id="mutant_1512" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) % destFile)" />
    <mutant id="mutant_1996" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(high &lt;&lt; 32) + (4294967295L &amp; low)" to="(high &lt;&lt; 32) - (4294967295L &amp; low)" />
    <mutant id="mutant_1508" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="(((super.toString()) + &quot;(&quot;) - condition)" />
    <mutant id="mutant_1509" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="((max) - (pos))" to="max" />
    <mutant id="mutant_1982" viable="true" in="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)" from="((str.length()) - endLen)" to="((str.length()) * endLen)" />
    <mutant id="mutant_1983" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="(&quot;Bytes to skip: &quot; - toSkip)" />
    <mutant id="mutant_1980" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) + (data.length))" to="((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;)" />
    <mutant id="mutant_1981" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16))" to="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24))" />
    <mutant id="mutant_1506" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;)" to="(&quot;Unexpected readed size. current: &quot; + offset)" />
    <mutant id="mutant_1507" viable="false" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name))" to="(&quot;FileDeleteStrategy[&quot; - (name))" />
    <mutant id="mutant_1504" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="&quot;\' is not a directory&quot;" />
    <mutant id="mutant_1988" viable="false" in="org.apache.commons.io.IOCase.forName(java.lang.String)" from="(&quot;Invalid IOCase name: &quot; + name)" to="(&quot;Invalid IOCase name: &quot; - name)" />
    <mutant id="mutant_1505" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 0)" to="offset" />
    <mutant id="mutant_1989" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) % skipped)" />
    <mutant id="mutant_1502" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) % path)" />
    <mutant id="mutant_1986" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="currentBuffer.length" />
    <mutant id="mutant_1503" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(length - totalRead)" to="totalRead" />
    <mutant id="mutant_1987" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="((&quot;The filter[&quot; + i) + &quot;] is null&quot;)" to="&quot;] is null&quot;" />
    <mutant id="mutant_1500" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;)" to="((&quot;File &quot; + directory) * &quot; exists and is &quot;)" />
    <mutant id="mutant_1984" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="1" />
    <mutant id="mutant_1501" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + fullFilenameToAdd)" to="fullFilenameToAdd" />
    <mutant id="mutant_1985" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="(prefix - 2)" />
    <mutant id="mutant_1971" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="(off + i)" to="(off % i)" />
    <mutant id="mutant_1972" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(data.length) - j" to="(data.length) / j" />
    <mutant id="mutant_1970" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;)" to="&quot;\'- response was &quot;" />
    <mutant id="mutant_1979" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="prefix / 1" />
    <mutant id="mutant_1977" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 7)" to="(offset * 7)" />
    <mutant id="mutant_1978" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="(&quot;File &quot; + directory)" to="(&quot;File &quot; * directory)" />
    <mutant id="mutant_1975" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="1" />
    <mutant id="mutant_1976" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) * path)" />
    <mutant id="mutant_1973" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8))" to="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_1974" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) % &quot;\'- check path is valid&quot;)" />
    <mutant id="mutant_1960" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="(&quot;Destination directory \'&quot; + destDir)" />
    <mutant id="mutant_1961" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="&quot; actual: &quot;" />
    <mutant id="mutant_1968" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 6)" to="6" />
    <mutant id="mutant_1969" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcDir) / &quot;\' does not exist&quot;)" />
    <mutant id="mutant_1966" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="((wcs.length) - 1)" to="((wcs.length) * 1)" />
    <mutant id="mutant_1967" viable="false" in="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)" from="(&quot;Parameter \'directory\' is not a directory: &quot; + directory)" to="(&quot;Parameter \'directory\' is not a directory: &quot; % directory)" />
    <mutant id="mutant_1964" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="toSkip" />
    <mutant id="mutant_1965" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) % &quot;]&quot;" />
    <mutant id="mutant_1962" viable="false" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="((&quot;write(&quot; + b) + &quot;) failed: stream is closed&quot;)" to="((&quot;write(&quot; + b) / &quot;) failed: stream is closed&quot;)" />
    <mutant id="mutant_1963" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="size - pos" to="size + pos" />
    <mutant id="mutant_1553" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="(((value1 &amp; 255) &lt;&lt; 0) % ((value2 &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_2400" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(textIdx + 1)" to="(textIdx * 1)" />
    <mutant id="mutant_1554" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; does not exist&quot;" to="&quot; does not exist&quot;" />
    <mutant id="mutant_2401" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path)" to="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) / path)" />
    <mutant id="mutant_1551" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i + 1" to="i / 1" />
    <mutant id="mutant_1552" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;)" to="&quot;\' to \'&quot;" />
    <mutant id="mutant_1550" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + src) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + src) - &quot;\' does not exist&quot;)" />
    <mutant id="mutant_2408" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="length % remaining" />
    <mutant id="mutant_2409" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(&quot;Command line \'&quot; % (FileSystemUtils.DF))" />
    <mutant id="mutant_1559" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; * destDir)" />
    <mutant id="mutant_2406" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;)" to="((&quot;Failed to copy full contents from \'&quot; + srcFile) - &quot;\' to \'&quot;)" />
    <mutant id="mutant_2407" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) + &quot; TB&quot;" to="String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))" />
    <mutant id="mutant_1557" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;Directory \'&quot; + parent) + &quot;\' could not be created&quot;)" to="(&quot;Directory \'&quot; + parent)" />
    <mutant id="mutant_2404" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length)" to="(offset % length)" />
    <mutant id="mutant_1558" viable="false" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not write to lockDir: &quot; + (lockDir.getAbsolutePath()))" to="(&quot;Could not write to lockDir: &quot; * (lockDir.getAbsolutePath()))" />
    <mutant id="mutant_2405" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path)" to="(&quot;\&quot;&quot; * path)" />
    <mutant id="mutant_1555" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 5)" to="offset" />
    <mutant id="mutant_2402" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="((currentBuffer.length) % inBufferPos)" />
    <mutant id="mutant_1556" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;)" to="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" />
    <mutant id="mutant_2403" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="((buffers.size()) - 1)" to="((buffers.size()) * 1)" />
    <mutant id="mutant_1542" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 1)" to="offset" />
    <mutant id="mutant_1543" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="((wcs.length) - 1)" to="1" />
    <mutant id="mutant_1540" viable="true" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_1541" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;)" />
    <mutant id="mutant_1548" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 4)" to="(offset % 4)" />
    <mutant id="mutant_1549" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="((count) + 1)" to="count" />
    <mutant id="mutant_1546" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="(Math.min(posUnix, posWin)) - 1" />
    <mutant id="mutant_1547" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; / file)" />
    <mutant id="mutant_1544" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24))" to="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) * (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24))" />
    <mutant id="mutant_1545" viable="true" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="(super.toString())" />
    <mutant id="mutant_701" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) + maxBytesPerChar)" to="(((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) / maxBytesPerChar)" />
    <mutant id="mutant_702" viable="true" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate)" to="((super.toString()) + &quot;(&quot;)" />
    <mutant id="mutant_703" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;Directory \'&quot; + parent)" to="(&quot;Directory \'&quot; % parent)" />
    <mutant id="mutant_704" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="&quot;dir /a /-c &quot; + path" to="&quot;dir /a /-c &quot; % path" />
    <mutant id="mutant_700" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k - j)" />
    <mutant id="mutant_709" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="j % 1" />
    <mutant id="mutant_705" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; % file)" />
    <mutant id="mutant_706" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="((charsRead) - (markedAt))" to="((charsRead) + (markedAt))" />
    <mutant id="mutant_707" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) + ((value4 &amp; 255) &lt;&lt; 24)" to="(value4 &amp; 255) &lt;&lt; 24" />
    <mutant id="mutant_708" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)" to="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) - (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_1531" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(off + len)" to="len" />
    <mutant id="mutant_1532" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)" to="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) * ((value3 &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_1530" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) - &quot;]&quot;)" />
    <mutant id="mutant_1539" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(length - totalRead)" to="(length + totalRead)" />
    <mutant id="mutant_1537" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 4)" to="(offset / 4)" />
    <mutant id="mutant_1538" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="&quot;Source \'&quot;" />
    <mutant id="mutant_1535" viable="false" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="(&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath()))" to="(&quot;Can\'t write file, lock &quot; / (lockFile.getAbsolutePath()))" />
    <mutant id="mutant_1536" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((off + len) - remaining)" to="remaining" />
    <mutant id="mutant_1533" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 2)" to="(offset * 2)" />
    <mutant id="mutant_1534" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;)" to="(&quot;Current currentLastCharPos unexpectedly positive... &quot; / &quot;last readLine() should have returned something! currentLastCharPos=&quot;)" />
    <mutant id="mutant_712" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((totalByteLength) / blockSize)" to="((totalByteLength) * blockSize)" />
    <mutant id="mutant_713" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="(freeSpaceWindows(path, timeout)) / (FileUtils.ONE_KB)" to="(freeSpaceWindows(path, timeout)) % (FileUtils.ONE_KB)" />
    <mutant id="mutant_714" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + '/')" to="basePath" />
    <mutant id="mutant_715" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path)" to="(&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;)" />
    <mutant id="mutant_710" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_711" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(off + len)" to="(off % len)" />
    <mutant id="mutant_716" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; does not exist&quot;" to="directory / &quot; does not exist&quot;" />
    <mutant id="mutant_717" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;)" to="((&quot;Source \'&quot; + srcDir) / &quot;\' and destination \'&quot;)" />
    <mutant id="mutant_718" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k * j)" />
    <mutant id="mutant_719" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;)" to="&quot;for path \'&quot;" />
    <mutant id="mutant_1520" viable="false" in="org.apache.commons.io.FileUtils.sizeOf(java.io.File)" from="file + &quot; does not exist&quot;" to="file - &quot; does not exist&quot;" />
    <mutant id="mutant_1521" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)" to="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_1528" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8))" to="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) * (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_1529" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="i" />
    <mutant id="mutant_1526" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="(off * len)" />
    <mutant id="mutant_1527" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="((idx) + n)" to="n" />
    <mutant id="mutant_1524" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(FileSystemUtils.DF)" />
    <mutant id="mutant_1525" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(length - totalRead)" to="(length % totalRead)" />
    <mutant id="mutant_1522" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(&quot;Length to read: &quot; + expected)" to="expected" />
    <mutant id="mutant_1523" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_723" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; / file)" />
    <mutant id="mutant_724" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j) - ((newLineSequence.length) - 1)" to="(newLineSequence.length) - 1" />
    <mutant id="mutant_725" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; / destFile)" />
    <mutant id="mutant_726" viable="false" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="(&quot;write(&quot; + b)" to="(&quot;write(&quot; - b)" />
    <mutant id="mutant_720" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="length + remaining" />
    <mutant id="mutant_721" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(lines.size()) - 1" to="(lines.size()) % 1" />
    <mutant id="mutant_722" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) / (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_727" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; * destDir)" />
    <mutant id="mutant_728" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_729" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" to="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) / (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_1113" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8))" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) % (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_1597" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size + 2" to="2" />
    <mutant id="mutant_2444" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="numberOfBytes - ((position) - (size))" to="numberOfBytes % ((position) - (size))" />
    <mutant id="mutant_1114" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) - &quot;for path \'&quot;)" />
    <mutant id="mutant_1598" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;)" to="(&quot;Cannot move directory: &quot; + srcDir)" />
    <mutant id="mutant_2445" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="4294967295L &amp; low" />
    <mutant id="mutant_1111" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="((basePath + '/') + fullFilenameToAdd)" to="((basePath + '/') - fullFilenameToAdd)" />
    <mutant id="mutant_1595" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="((&quot;Length to read: &quot; + length) % &quot; actual: &quot;)" />
    <mutant id="mutant_2442" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="destDir" />
    <mutant id="mutant_1112" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) / (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_1596" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; is not a directory&quot;" to="directory" />
    <mutant id="mutant_2443" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="&quot;] is no longer valid - passed the read limit [&quot;" />
    <mutant id="mutant_1593" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + length)" to="(offset * length)" />
    <mutant id="mutant_2440" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)" to="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_1110" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) / (readlimit))" />
    <mutant id="mutant_1594" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="i" />
    <mutant id="mutant_2441" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip - remain" to="remain" />
    <mutant id="mutant_1591" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="dest - (idx)" to="dest" />
    <mutant id="mutant_1592" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;)" to="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) / &quot; timeout=&quot;)" />
    <mutant id="mutant_1119" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" from="(&quot;Stream not configure to detect &quot; + bom)" to="&quot;Stream not configure to detect &quot;" />
    <mutant id="mutant_1117" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Failed to delete original directory \'&quot; + srcDir)" to="srcDir" />
    <mutant id="mutant_2448" viable="false" in="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="length - (buffer.remaining())" to="length + (buffer.remaining())" />
    <mutant id="mutant_1118" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;Directory \'&quot; + parent) + &quot;\' could not be created&quot;)" to="((&quot;Directory \'&quot; + parent) / &quot;\' could not be created&quot;)" />
    <mutant id="mutant_2449" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="((&quot;Chars to skip: &quot; + toSkip) * &quot; actual: &quot;)" />
    <mutant id="mutant_1115" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent.getLevel()) + 1" to="(parent.getLevel()) % 1" />
    <mutant id="mutant_1599" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((no) - 1)" to="((no) + 1)" />
    <mutant id="mutant_2446" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="((buffers.size()) - 1)" to="((buffers.size()) + 1)" />
    <mutant id="mutant_1116" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) / destDir)" />
    <mutant id="mutant_2447" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 3)" to="3" />
    <mutant id="mutant_734" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="&quot;Command line \'&quot;" />
    <mutant id="mutant_735" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;)" to="((&quot;illegal index: &quot; + index) % &quot; into array of length &quot;)" />
    <mutant id="mutant_736" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(&quot;Encoding &quot; + encoding)" to="&quot;Encoding &quot;" />
    <mutant id="mutant_737" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="&quot;Source \'&quot;" />
    <mutant id="mutant_730" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 3)" to="3" />
    <mutant id="mutant_731" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_732" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be written to&quot;)" to="(&quot;File \'&quot; + file)" />
    <mutant id="mutant_733" viable="true" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)" />
    <mutant id="mutant_1590" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="length * remaining" />
    <mutant id="mutant_738" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;)" to="((&quot;Source \'&quot; + srcDir) % &quot;\' and destination \'&quot;)" />
    <mutant id="mutant_739" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_1102" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j + 1" to="j % 1" />
    <mutant id="mutant_1586" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="(off - len)" />
    <mutant id="mutant_2433" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="((basePath + '/') + fullFilenameToAdd)" to="fullFilenameToAdd" />
    <mutant id="mutant_1103" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; * srcFile)" />
    <mutant id="mutant_1587" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 3)" to="(offset - 3)" />
    <mutant id="mutant_2434" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Unexpected readed size. current: &quot; + offset)" to="(&quot;Unexpected readed size. current: &quot; * offset)" />
    <mutant id="mutant_1100" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString())) + &quot;]&quot;" to="(((super.toString()) + &quot;[&quot;) + (delegate.toString())) - &quot;]&quot;" />
    <mutant id="mutant_1584" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) - createDestDir)" />
    <mutant id="mutant_2431" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="((super.toString()) - &quot;[caseSensitivity=&quot;)" />
    <mutant id="mutant_1101" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" from="((written) + count)" to="((written) * count)" />
    <mutant id="mutant_1585" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position()))" to="&quot;Unexpected CharBuffer postion: actual=&quot;" />
    <mutant id="mutant_2432" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(&quot;Buffer size &quot; + bufferSize)" to="(&quot;Buffer size &quot; * bufferSize)" />
    <mutant id="mutant_1582" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="skipped" />
    <mutant id="mutant_1583" viable="true" in="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)" from="((str.length()) - endLen)" to="((str.length()) % endLen)" />
    <mutant id="mutant_2430" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 2)" to="2" />
    <mutant id="mutant_1580" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="off" />
    <mutant id="mutant_1581" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="(&quot;File &quot; + directory)" to="&quot;File &quot;" />
    <mutant id="mutant_1108" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((xmlProlog.length()) + len)" to="((xmlProlog.length()) * len)" />
    <mutant id="mutant_2439" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="(off % len)" />
    <mutant id="mutant_1109" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; - srcFile)" />
    <mutant id="mutant_1106" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 6)" to="(offset / 6)" />
    <mutant id="mutant_2437" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Cannot move directory: &quot; + srcDir)" to="(&quot;Cannot move directory: &quot; - srcDir)" />
    <mutant id="mutant_1107" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(&quot;Command line \'&quot; * (FileSystemUtils.DF))" />
    <mutant id="mutant_2438" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip - remain" to="remain" />
    <mutant id="mutant_1104" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; % destDir)" />
    <mutant id="mutant_1588" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; * result)" />
    <mutant id="mutant_2435" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) - skipped)" />
    <mutant id="mutant_1105" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) + size)" to="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) / size)" />
    <mutant id="mutant_1589" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="toSkip" />
    <mutant id="mutant_2436" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) * &quot;\'- response was &quot;)" />
    <mutant id="mutant_745" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="(size) - (position)" to="(size) / (position)" />
    <mutant id="mutant_746" viable="true" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name))" to="&quot;FileDeleteStrategy[&quot;" />
    <mutant id="mutant_747" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="(high &lt;&lt; 24) * (4294967295L &amp; low)" />
    <mutant id="mutant_748" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(&quot;Encoding &quot; + encoding)" to="(&quot;Encoding &quot; * encoding)" />
    <mutant id="mutant_741" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;)" to="((&quot;Cannot move directory: &quot; + srcDir) * &quot; to a subdirectory of itself: &quot;)" />
    <mutant id="mutant_742" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="destDir" />
    <mutant id="mutant_743" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(&quot;Command line \'&quot; % (FileSystemUtils.DF))" />
    <mutant id="mutant_744" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(count) - (filledBufferSum)" to="(count) / (filledBufferSum)" />
    <mutant id="mutant_749" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) * &quot;\' did not find free space in response &quot;)" />
    <mutant id="mutant_1575" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="((&quot;File \'&quot; + file) % &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_2422" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Failed to delete original directory \'&quot; + srcDir)" to="&quot;Failed to delete original directory \'&quot;" />
    <mutant id="mutant_1576" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 1)" to="offset" />
    <mutant id="mutant_2423" viable="false" in="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)" from="(&quot;Deletion failed: &quot; + fileToDelete)" to="(&quot;Deletion failed: &quot; * fileToDelete)" />
    <mutant id="mutant_1573" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_2420" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="(file1.lastModified()) - (file2.lastModified())" to="(file1.lastModified()) + (file2.lastModified())" />
    <mutant id="mutant_1574" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="(currentLastBytePos) + 1" to="(currentLastBytePos) - 1" />
    <mutant id="mutant_2421" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(&quot;Number of characters to skip is less than zero: &quot; + n)" to="(&quot;Number of characters to skip is less than zero: &quot; * n)" />
    <mutant id="mutant_1571" viable="true" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(caseSensitivity)" />
    <mutant id="mutant_1572" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile)" to="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) % destFile)" />
    <mutant id="mutant_1570" viable="true" in="org.apache.commons.io.FileExistsException(java.io.File)" from="((&quot;File &quot; + file) + &quot; exists&quot;)" to="&quot; exists&quot;" />
    <mutant id="mutant_2428" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString())) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + (filter.toString())) * &quot;)&quot;" />
    <mutant id="mutant_740" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) / &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_2429" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="((newLineSequence.length) - 1)" to="1" />
    <mutant id="mutant_1579" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((srcDir.getCanonicalPath()) + (File.separator))" to="File.separator" />
    <mutant id="mutant_2426" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="remaining" />
    <mutant id="mutant_2427" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="((max) - (pos))" to="((max) % (pos))" />
    <mutant id="mutant_1577" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="&quot; is too large to be converted to an int&quot;" />
    <mutant id="mutant_2424" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen)" to="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) * srcLen)" />
    <mutant id="mutant_1578" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path)" to="(&quot;\&quot;&quot; / path)" />
    <mutant id="mutant_2425" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) - (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_756" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16))" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) - ((value3 &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_757" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) + &quot;\' are the same&quot;)" to="&quot;\' are the same&quot;" />
    <mutant id="mutant_758" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; + (new String(leftOver , encoding)))" to="(&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; - (new String(leftOver , encoding)))" />
    <mutant id="mutant_759" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 7)" to="offset" />
    <mutant id="mutant_752" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents))" to="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) % (sumDirectoryContents))" />
    <mutant id="mutant_753" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k % j)" />
    <mutant id="mutant_754" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;)" to="(&quot;Command line \'dir /-c\' did not return any info &quot; * &quot;for path \'&quot;)" />
    <mutant id="mutant_755" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="((max) - (pos))" to="((max) % (pos))" />
    <mutant id="mutant_1564" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(&quot;XML prolog or ROOT element not found on first &quot; + offset)" to="offset" />
    <mutant id="mutant_2411" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="&quot;\' exists but is a directory&quot;" />
    <mutant id="mutant_1565" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((xmlProlog.length()) + len)" to="(xmlProlog.length())" />
    <mutant id="mutant_2412" viable="true" in="org.apache.commons.io.FileExistsException(java.io.File)" from="((&quot;File &quot; + file) + &quot; exists&quot;)" to="(&quot;File &quot; + file)" />
    <mutant id="mutant_1562" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="((currentBuffer.length) + inBufferPos)" />
    <mutant id="mutant_1563" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" from="((written) + count)" to="(written)" />
    <mutant id="mutant_2410" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; - result)" />
    <mutant id="mutant_1560" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) - (filledBufferSum)" to="(count) * (filledBufferSum)" />
    <mutant id="mutant_1561" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="pos + i" />
    <mutant id="mutant_2419" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' exists but is a directory&quot;)" to="(&quot;Source \'&quot; + srcFile)" />
    <mutant id="mutant_750" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_2417" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="((&quot;File \'&quot; + file) - &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_751" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;) + &quot;not a directory. Unable to create directory.&quot;" to="&quot;not a directory. Unable to create directory.&quot;" />
    <mutant id="mutant_2418" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="((super.toString()) + &quot;[&quot;)" to="((super.toString()) % &quot;[&quot;)" />
    <mutant id="mutant_1568" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip - remain" to="toSkip + remain" />
    <mutant id="mutant_2415" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(off + size)" to="(off / size)" />
    <mutant id="mutant_1569" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="actual" />
    <mutant id="mutant_2416" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="(count) - (filledBufferSum)" to="count" />
    <mutant id="mutant_1566" viable="false" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not find lockDir: &quot; + (lockDir.getAbsolutePath()))" to="(&quot;Could not find lockDir: &quot; * (lockDir.getAbsolutePath()))" />
    <mutant id="mutant_2413" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="((super.toString()) / &quot;[caseSensitivity=&quot;)" />
    <mutant id="mutant_1567" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="prefix" />
    <mutant id="mutant_2414" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="(&quot;The reference file \'&quot; + reference)" />
    <mutant id="mutant_767" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1)" to="1" />
    <mutant id="mutant_768" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="(((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_769" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - j" to="i + j" />
    <mutant id="mutant_763" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_764" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="&quot;Skip count must be non-negative, actual: &quot;" />
    <mutant id="mutant_765" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be written to&quot;)" to="((&quot;File \'&quot; + file) * &quot;\' cannot be written to&quot;)" />
    <mutant id="mutant_766" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((currentBuffer.length) - inBufferPos)" to="((currentBuffer.length) + inBufferPos)" />
    <mutant id="mutant_1160" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Source \'&quot; + destDir) * &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_2491" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' cannot be written to&quot;)" to="(&quot;Destination \'&quot; + destDir)" />
    <mutant id="mutant_1161" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="(prefix * 2)" />
    <mutant id="mutant_2492" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16))" to="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) / (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_2490" viable="false" in="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="length - (buffer.remaining())" to="length / (buffer.remaining())" />
    <mutant id="mutant_1157" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" />
    <mutant id="mutant_2004" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) / &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_2488" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is a directory&quot;)" to="((&quot;Destination \'&quot; + destFile) * &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_1158" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16))" to="(((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_2005" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="(&quot;Length must not be negative: &quot; / length)" />
    <mutant id="mutant_2489" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)" to="((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0" />
    <mutant id="mutant_1155" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="((&quot;The reference file \'&quot; + reference) / &quot;\' doesn\'t exist&quot;)" />
    <mutant id="mutant_2002" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;)" to="((&quot;Source \'&quot; + srcFile) - &quot;\' and destination \'&quot;)" />
    <mutant id="mutant_2486" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path)" to="path" />
    <mutant id="mutant_1156" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="((max) - (pos))" to="max" />
    <mutant id="mutant_2003" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1) - prefix" to="prefix" />
    <mutant id="mutant_2487" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="result" />
    <mutant id="mutant_1153" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="depth + 1" to="depth % 1" />
    <mutant id="mutant_2000" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="length - ((int)(((position) - (size))))" to="length" />
    <mutant id="mutant_2484" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="((&quot;Destination directory \'&quot; + destDir) * &quot;\' does not exist [createDestDir=&quot;)" />
    <mutant id="mutant_1154" viable="true" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="(index + 1)" to="(index * 1)" />
    <mutant id="mutant_2001" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="2" />
    <mutant id="mutant_2485" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(len - size)" to="size" />
    <mutant id="mutant_1151" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip - remain" to="toSkip" />
    <mutant id="mutant_2482" viable="false" in="org.apache.commons.io.FileUtils.sizeOf(java.io.File)" from="file + &quot; does not exist&quot;" to="file * &quot; does not exist&quot;" />
    <mutant id="mutant_1152" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; * destDir)" />
    <mutant id="mutant_2483" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="(j + 6)" to="(j / 6)" />
    <mutant id="mutant_760" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len + 1" to="len * 1" />
    <mutant id="mutant_761" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="(j + 6)" to="6" />
    <mutant id="mutant_762" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) % (caseSensitivity))" />
    <mutant id="mutant_2008" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_2009" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(off + len)" to="(off / len)" />
    <mutant id="mutant_1159" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" from="(&quot;Stream not configure to detect &quot; + bom)" to="(&quot;Stream not configure to detect &quot; % bom)" />
    <mutant id="mutant_2006" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((totalByteLength) / blockSize)" to="((totalByteLength) % blockSize)" />
    <mutant id="mutant_2007" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI))) + &quot; GB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI))) / &quot; GB&quot;" />
    <mutant id="mutant_778" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + length)" to="offset" />
    <mutant id="mutant_779" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_774" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Failed to delete original directory \'&quot; + srcDir)" to="(&quot;Failed to delete original directory \'&quot; / srcDir)" />
    <mutant id="mutant_775" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="&quot;dir /a /-c &quot; + path" to="path" />
    <mutant id="mutant_776" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 0)" to="(offset - 0)" />
    <mutant id="mutant_777" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; / destDir)" />
    <mutant id="mutant_2480" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((mark) + (readlimit))" to="(readlimit)" />
    <mutant id="mutant_1150" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; % destDir)" />
    <mutant id="mutant_2481" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="((&quot;File \'&quot; + file) * &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_1146" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;)" to="(&quot;Current currentLastCharPos unexpectedly positive... &quot; - &quot;last readLine() should have returned something! currentLastCharPos=&quot;)" />
    <mutant id="mutant_2477" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Unexpected readed size. current: &quot; + offset)" to="offset" />
    <mutant id="mutant_1147" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="((count) + 1)" to="1" />
    <mutant id="mutant_2478" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString()))" to="(((super.toString()) + &quot;(&quot;) / (filter.toString()))" />
    <mutant id="mutant_1144" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) * &quot;]&quot;)" />
    <mutant id="mutant_2475" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(length - totalRead)" to="length" />
    <mutant id="mutant_1145" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; - destDir)" />
    <mutant id="mutant_2476" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(textIdx + 1)" to="textIdx" />
    <mutant id="mutant_1142" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 3)" to="(i / 3)" />
    <mutant id="mutant_2473" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; does not exist&quot;)" to="(directory - &quot; does not exist&quot;)" />
    <mutant id="mutant_1143" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Unexpected readed size. current: &quot; + offset)" to="(&quot;Unexpected readed size. current: &quot; / offset)" />
    <mutant id="mutant_2474" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="offset + index" to="offset" />
    <mutant id="mutant_1140" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; + (new String(leftOver , encoding)))" to="(&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; / (new String(leftOver , encoding)))" />
    <mutant id="mutant_2471" viable="false" in="org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)" from="file + &quot; does not exist&quot;" to="&quot; does not exist&quot;" />
    <mutant id="mutant_1141" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((&quot;XML prolog or ROOT element not found on first &quot; + offset) + &quot; bytes&quot;)" to="((&quot;XML prolog or ROOT element not found on first &quot; + offset) / &quot; bytes&quot;)" />
    <mutant id="mutant_2472" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="prefix * 1" />
    <mutant id="mutant_770" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="numberOfChars - ((position) - (size))" to="numberOfChars" />
    <mutant id="mutant_771" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="(&quot;Length to read: &quot; + length)" />
    <mutant id="mutant_772" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(&quot;Marked position [&quot; + (mark))" to="(&quot;Marked position [&quot; / (mark))" />
    <mutant id="mutant_773" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((currentBuffer.length) - inBufferPos)" to="currentBuffer.length" />
    <mutant id="mutant_1148" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcDir) % &quot;\' does not exist&quot;)" />
    <mutant id="mutant_2479" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 1)" to="(prefix - 1)" />
    <mutant id="mutant_1149" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(line.length()) - 1" to="(line.length()) % 1" />
    <mutant id="mutant_305" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="((&quot;Marked position [&quot; + (mark)) % &quot;] is no longer valid - passed the read limit [&quot;)" />
    <mutant id="mutant_789" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 0)" to="offset" />
    <mutant id="mutant_306" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile)" to="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) * destFile)" />
    <mutant id="mutant_307" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16))" to="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) - (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_308" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path)" to="path" />
    <mutant id="mutant_301" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="&quot;File \'&quot;" />
    <mutant id="mutant_785" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="((idx) + n)" to="((idx) - n)" />
    <mutant id="mutant_302" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) + (this.mark_cbuf))" to="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) * (this.mark_cbuf))" />
    <mutant id="mutant_786" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.available()" from="(this.bbuf.remaining()) + (this.cbuf.remaining())" to="(this.bbuf.remaining()) - (this.cbuf.remaining())" />
    <mutant id="mutant_303" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 3)" to="3" />
    <mutant id="mutant_787" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="size" />
    <mutant id="mutant_304" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) + &quot; KB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) / &quot; KB&quot;" />
    <mutant id="mutant_788" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(j + 1)" to="(j % 1)" />
    <mutant id="mutant_2470" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; / destDir)" />
    <mutant id="mutant_309" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="&quot;Source \'&quot;" />
    <mutant id="mutant_1135" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 3)" to="(offset * 3)" />
    <mutant id="mutant_2466" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; * destDir)" />
    <mutant id="mutant_1136" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; * destFile)" />
    <mutant id="mutant_2467" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((int)((totalByteLength) % blockSize))" to="(totalByteLength) * blockSize" />
    <mutant id="mutant_1133" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(&quot;Length to read: &quot; + length)" to="(&quot;Length to read: &quot; % length)" />
    <mutant id="mutant_2464" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(count) - (filledBufferSum)" to="(count) * (filledBufferSum)" />
    <mutant id="mutant_1134" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) + &quot; TB&quot;" to="&quot; TB&quot;" />
    <mutant id="mutant_2465" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24))" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" />
    <mutant id="mutant_1131" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;)" to="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile)" />
    <mutant id="mutant_2462" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="&quot;Source \'&quot;" />
    <mutant id="mutant_1132" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) % &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_2463" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="((newLineSequence.length) - 1)" to="((newLineSequence.length) / 1)" />
    <mutant id="mutant_2460" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; - file)" />
    <mutant id="mutant_1130" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 4)" to="offset" />
    <mutant id="mutant_2461" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="((&quot;Bytes to skip: &quot; + toSkip) % &quot; actual: &quot;)" />
    <mutant id="mutant_781" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16))" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) % ((value3 &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_782" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="(str.length()) - (search.length())" to="(str.length()) / (search.length())" />
    <mutant id="mutant_783" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="(((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_300" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; - srcDir)" />
    <mutant id="mutant_784" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) % createDestDir)" />
    <mutant id="mutant_1139" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + parentFile) + &quot;\' directory cannot be created&quot;)" to="((&quot;Destination \'&quot; + parentFile) - &quot;\' directory cannot be created&quot;)" />
    <mutant id="mutant_1137" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) + (data.length))" to="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) * (data.length))" />
    <mutant id="mutant_2468" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;)" to="((&quot;Failed to delete original file \'&quot; + srcFile) * &quot;\' after copy to \'&quot;)" />
    <mutant id="mutant_780" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="len" />
    <mutant id="mutant_1138" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Failed to copy full contents from \'&quot; + srcFile)" to="(&quot;Failed to copy full contents from \'&quot; % srcFile)" />
    <mutant id="mutant_2469" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="4294967295L &amp; low" />
    <mutant id="mutant_316" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="destFile" />
    <mutant id="mutant_317" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="numberOfBytes - ((position) - (size))" to="numberOfBytes * ((position) - (size))" />
    <mutant id="mutant_318" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size))" to="((((super.toString()) + &quot;(&quot;) + condition) % (size))" />
    <mutant id="mutant_319" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length)" to="length" />
    <mutant id="mutant_312" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff))" to="((((super.toString()) + &quot;(&quot;) + condition) % (cutoff))" />
    <mutant id="mutant_796" viable="true" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)" />
    <mutant id="mutant_313" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 2)" to="(offset / 2)" />
    <mutant id="mutant_797" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="&quot;Command line \'&quot;" />
    <mutant id="mutant_314" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k - j)" />
    <mutant id="mutant_798" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path)" />
    <mutant id="mutant_315" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) / &quot;]&quot;" />
    <mutant id="mutant_799" viable="false" in="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)" from="(&quot;Deletion failed: &quot; + fileToDelete)" to="(&quot;Deletion failed: &quot; % fileToDelete)" />
    <mutant id="mutant_1124" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(&quot;Command line \'&quot; / (FileSystemUtils.DF))" />
    <mutant id="mutant_2455" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; is not a directory&quot;" to="&quot; is not a directory&quot;" />
    <mutant id="mutant_1125" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents))" to="(sumDirectoryContents)" />
    <mutant id="mutant_2456" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;)" to="(&quot;Command line \'dir /-c\' did not return any info &quot; - &quot;for path \'&quot;)" />
    <mutant id="mutant_1122" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_2453" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) + ((value4 &amp; 255) &lt;&lt; 24)" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) % ((value4 &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_1123" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(&quot;Length to read: &quot; + length)" to="(&quot;Length to read: &quot; * length)" />
    <mutant id="mutant_2454" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) % &quot;]&quot;)" />
    <mutant id="mutant_1120" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_KB)" to="(FileUtils.ONE_KB) + (FileUtils.ONE_KB)" />
    <mutant id="mutant_2451" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) + (Arrays.asList(cmdAttribs)))" to="(((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) % (Arrays.asList(cmdAttribs)))" />
    <mutant id="mutant_1121" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_2452" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) + &quot; EB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) / &quot; EB&quot;" />
    <mutant id="mutant_2450" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;)" />
    <mutant id="mutant_792" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; * result)" />
    <mutant id="mutant_793" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="j" />
    <mutant id="mutant_310" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="(end + start)" />
    <mutant id="mutant_794" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(totalByteLength) / blockSize" to="(totalByteLength) + blockSize" />
    <mutant id="mutant_311" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) * &quot;)&quot;" />
    <mutant id="mutant_795" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' exists but is a directory&quot;)" to="((&quot;Source \'&quot; + srcFile) / &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_1128" viable="false" in="org.apache.commons.io.FileUtils.sizeOf(java.io.File)" from="file + &quot; does not exist&quot;" to="&quot; does not exist&quot;" />
    <mutant id="mutant_2459" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcDir) / &quot;\' does not exist&quot;)" />
    <mutant id="mutant_1129" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="(off % len)" />
    <mutant id="mutant_790" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + length)" to="length" />
    <mutant id="mutant_1126" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="((&quot;Marked position [&quot; + (mark)) % &quot;] is no longer valid - passed the read limit [&quot;)" />
    <mutant id="mutant_2457" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)" from="((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)" to="(value2 &amp; 255) &lt;&lt; 8" />
    <mutant id="mutant_791" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="skipped" />
    <mutant id="mutant_1127" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="(pos + i) * 1" />
    <mutant id="mutant_2458" viable="true" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="(index + 1)" to="(index % 1)" />
    <mutant id="mutant_9" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) / &quot;for path \'&quot;)" />
    <mutant id="mutant_206" viable="false" in="?" from="(FileUtils.ONE_MB) * 30" to="(FileUtils.ONE_MB) % 30" />
    <mutant id="mutant_8" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1)" to="(no * 1)" />
    <mutant id="mutant_207" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="(end % start)" />
    <mutant id="mutant_208" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="size" />
    <mutant id="mutant_209" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(size - offset)" to="size" />
    <mutant id="mutant_5" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="((max) - (pos))" to="((max) / (pos))" />
    <mutant id="mutant_202" viable="false" in="?" from="1024 * 4" to="1024" />
    <mutant id="mutant_686" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" from="(&quot;Size cannot be greater than Integer max value: &quot; + size)" to="&quot;Size cannot be greater than Integer max value: &quot;" />
    <mutant id="mutant_4" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="(&quot;File \'&quot; + file)" />
    <mutant id="mutant_203" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="1" />
    <mutant id="mutant_687" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + i)" to="(offset - i)" />
    <mutant id="mutant_7" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)" to="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) / ((value3 &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_204" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 1)" to="prefix" />
    <mutant id="mutant_688" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="((value1 &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_6" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="dest - (idx)" to="dest * (idx)" />
    <mutant id="mutant_205" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Size must be equal or greater than zero: &quot; + size)" to="(&quot;Size must be equal or greater than zero: &quot; - size)" />
    <mutant id="mutant_689" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; - srcDir)" />
    <mutant id="mutant_85" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + parentFile)" to="(&quot;Destination \'&quot; / parentFile)" />
    <mutant id="mutant_2293" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)" to="((data[(offset + 7)]) &amp; 255) &lt;&lt; 24" />
    <mutant id="mutant_84" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be read&quot;)" to="((&quot;File \'&quot; + file) % &quot;\' cannot be read&quot;)" />
    <mutant id="mutant_2294" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="((&quot;Destination directory \'&quot; + destDir) - &quot;\' does not exist [createDestDir=&quot;)" />
    <mutant id="mutant_87" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="(pos + i) - 1" />
    <mutant id="mutant_2291" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 7)" to="7" />
    <mutant id="mutant_86" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="i" />
    <mutant id="mutant_2292" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) * (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_89" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="dest - (idx)" to="dest % (idx)" />
    <mutant id="mutant_88" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="destDir" />
    <mutant id="mutant_2290" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) - (filledBufferSum)" to="count" />
    <mutant id="mutant_90" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((totalByteLength) / blockSize) + 1" to="(totalByteLength) / blockSize" />
    <mutant id="mutant_2288" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="index + (includeSeparator ? 1 : 0)" to="index % (includeSeparator ? 1 : 0)" />
    <mutant id="mutant_2289" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; - file)" />
    <mutant id="mutant_92" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="(off / len)" />
    <mutant id="mutant_2286" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' directory cannot be created&quot;)" to="(&quot;Destination \'&quot; + destDir)" />
    <mutant id="mutant_91" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) * skipped)" />
    <mutant id="mutant_2287" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) + &quot;\' are the same&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir)" />
    <mutant id="mutant_94" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="length * remaining" />
    <mutant id="mutant_2284" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI))) + &quot; MB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI))) / &quot; MB&quot;" />
    <mutant id="mutant_93" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="(&quot;Bytes to skip must not be negative: &quot; * toSkip)" />
    <mutant id="mutant_2285" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; * destFile)" />
    <mutant id="mutant_1" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="inBufferPos" />
    <mutant id="mutant_682" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 3)" to="(offset % 3)" />
    <mutant id="mutant_0" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(high &lt;&lt; 32) + (4294967295L &amp; low)" to="(high &lt;&lt; 32) * (4294967295L &amp; low)" />
    <mutant id="mutant_683" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_3" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_PB)" to="FileUtils.ONE_PB" />
    <mutant id="mutant_200" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;)" to="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) % &quot;\' for command &quot;)" />
    <mutant id="mutant_684" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) + (currentLastBytePos))" to="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) * (currentLastBytePos))" />
    <mutant id="mutant_2" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) / &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_201" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" from="((written) + count)" to="((written) % count)" />
    <mutant id="mutant_685" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be read&quot;)" to="((&quot;File \'&quot; + file) * &quot;\' cannot be read&quot;)" />
    <mutant id="mutant_680" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcFile) % &quot;\' does not exist&quot;)" />
    <mutant id="mutant_681" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 0)" to="(offset % 0)" />
    <mutant id="mutant_217" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;)" to="((&quot;Failed to delete original directory \'&quot; + srcDir) / &quot;\' after copy to \'&quot;)" />
    <mutant id="mutant_218" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart)" to="((currentLastBytePos) * lineStart)" />
    <mutant id="mutant_219" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' exists but is not a directory&quot;)" to="((&quot;Source \'&quot; + srcDir) % &quot;\' exists but is not a directory&quot;)" />
    <mutant id="mutant_213" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(totalByteLength) / blockSize" to="(totalByteLength) - blockSize" />
    <mutant id="mutant_697" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="(currentLastBytePos) + 1" to="currentLastBytePos" />
    <mutant id="mutant_214" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) % &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_698" viable="false" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="filename + (FilenameUtils.UNIX_SEPARATOR)" to="filename / (FilenameUtils.UNIX_SEPARATOR)" />
    <mutant id="mutant_215" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size1 - size2" to="size1" />
    <mutant id="mutant_699" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="toSkip" />
    <mutant id="mutant_216" viable="true" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate) + &quot;)&quot;" to="((super.toString()) + &quot;(&quot;) + delegate" />
    <mutant id="mutant_74" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip - remain" to="toSkip % remain" />
    <mutant id="mutant_2282" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; - destFile)" />
    <mutant id="mutant_73" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(totalByteLength) / blockSize" to="blockSize" />
    <mutant id="mutant_2283" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size % 1)" />
    <mutant id="mutant_76" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="(newcount - (filledBufferSum))" to="(newcount / (filledBufferSum))" />
    <mutant id="mutant_2280" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(&quot;Marked position [&quot; + (mark))" to="(&quot;Marked position [&quot; * (mark))" />
    <mutant id="mutant_75" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="(&quot;Not a directory: &quot; + directory)" to="directory" />
    <mutant id="mutant_2281" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;)" to="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) / &quot;\' Expected length: &quot;)" />
    <mutant id="mutant_78" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 5)" to="(offset * 5)" />
    <mutant id="mutant_77" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;Directory \'&quot; + parent)" to="(&quot;Directory \'&quot; * parent)" />
    <mutant id="mutant_79" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) + &quot; PB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) % &quot; PB&quot;" />
    <mutant id="mutant_2279" viable="false" in="org.apache.commons.io.FileExistsException(java.io.File)" from="(&quot;File &quot; + file)" to="(&quot;File &quot; - file)" />
    <mutant id="mutant_2277" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len + 1" to="len" />
    <mutant id="mutant_2278" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="((&quot;Length to read: &quot; + length) - &quot; actual: &quot;)" />
    <mutant id="mutant_81" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) - (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_2275" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="((max) - (pos))" to="((max) + (pos))" />
    <mutant id="mutant_80" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory)" to="&quot;Unable to delete directory &quot;" />
    <mutant id="mutant_2276" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) + &quot; TB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) % &quot; TB&quot;" />
    <mutant id="mutant_83" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) + &quot;\'&quot;)" to="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) * &quot;\'&quot;)" />
    <mutant id="mutant_2273" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="((currentBuffer.length) / inBufferPos)" />
    <mutant id="mutant_82" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)" from="(maxSizeInclusive + 1L)" to="(maxSizeInclusive / 1L)" />
    <mutant id="mutant_2274" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" to="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) % (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_693" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 2)" to="offset" />
    <mutant id="mutant_210" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(&quot;XML prolog or ROOT element not found on first &quot; + offset)" to="(&quot;XML prolog or ROOT element not found on first &quot; % offset)" />
    <mutant id="mutant_694" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="(size + i)" />
    <mutant id="mutant_211" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_695" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; % file)" />
    <mutant id="mutant_212" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="((basePath + '/') + fullFilenameToAdd)" to="((basePath + '/') / fullFilenameToAdd)" />
    <mutant id="mutant_696" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="(&quot;Destination directory \'&quot; - destDir)" />
    <mutant id="mutant_690" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="(&quot;Not a directory: &quot; + directory)" to="(&quot;Not a directory: &quot; / directory)" />
    <mutant id="mutant_691" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="(off - len)" />
    <mutant id="mutant_692" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="(size) - (position)" to="(size) % (position)" />
    <mutant id="mutant_228" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="(high &lt;&lt; 24) / (4294967295L &amp; low)" />
    <mutant id="mutant_229" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(textIdx + 1)" to="1" />
    <mutant id="mutant_224" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;)" to="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) % &quot; expected=&quot;)" />
    <mutant id="mutant_225" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="(freeSpaceWindows(path, timeout)) / (FileUtils.ONE_KB)" to="(freeSpaceWindows(path, timeout)) + (FileUtils.ONE_KB)" />
    <mutant id="mutant_226" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_227" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 5)" to="offset" />
    <mutant id="mutant_2271" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="&quot;The byte count &quot;" />
    <mutant id="mutant_2272" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) / (Arrays.asList(cmdAttribs)))" />
    <mutant id="mutant_2270" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; * result)" />
    <mutant id="mutant_2268" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="i" />
    <mutant id="mutant_2269" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) * path)" />
    <mutant id="mutant_2266" viable="true" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="(index + 1)" to="(index / 1)" />
    <mutant id="mutant_2267" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24))" to="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) / (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24))" />
    <mutant id="mutant_2264" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; - srcFile)" />
    <mutant id="mutant_2265" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 0)" to="(offset % 0)" />
    <mutant id="mutant_2262" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Failed to delete original file \'&quot; + srcFile)" to="(&quot;Failed to delete original file \'&quot; * srcFile)" />
    <mutant id="mutant_2263" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) % &quot;]&quot;" />
    <mutant id="mutant_220" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="j / 1" />
    <mutant id="mutant_221" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 0)" to="(offset % 0)" />
    <mutant id="mutant_222" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Cannot move directory: &quot; + srcDir)" to="(&quot;Cannot move directory: &quot; % srcDir)" />
    <mutant id="mutant_223" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="length + (leftOverOfLastFilePart != null ? leftOverOfLastFilePart.length : 0)" to="leftOverOfLastFilePart != null ? leftOverOfLastFilePart.length : 0" />
    <mutant id="mutant_239" viable="true" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="result" />
    <mutant id="mutant_235" viable="false" in="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)" from="(&quot;Parameter \'directory\' is not a directory: &quot; + directory)" to="(&quot;Parameter \'directory\' is not a directory: &quot; * directory)" />
    <mutant id="mutant_236" viable="false" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; % result)" />
    <mutant id="mutant_237" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((mark) + (readlimit))" to="((mark) % (readlimit))" />
    <mutant id="mutant_238" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 3)" to="3" />
    <mutant id="mutant_96" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="size" />
    <mutant id="mutant_2260" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(len - 1)" to="(len % 1)" />
    <mutant id="mutant_95" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) - &quot;)&quot;" />
    <mutant id="mutant_2261" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) - &quot;(&quot;)" />
    <mutant id="mutant_98" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="i" />
    <mutant id="mutant_97" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 0)" to="(offset - 0)" />
    <mutant id="mutant_99" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 3)" to="(i % 3)" />
    <mutant id="mutant_2257" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) / path)" />
    <mutant id="mutant_2258" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="(size * i)" />
    <mutant id="mutant_2255" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16))" to="(((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_2256" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 1)" to="(offset % 1)" />
    <mutant id="mutant_2253" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) + len" to="(count) - len" />
    <mutant id="mutant_2254" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="&quot; is too large to be converted to an int&quot;" />
    <mutant id="mutant_2251" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="(&quot;The reference file \'&quot; % reference)" />
    <mutant id="mutant_2252" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;Directory \'&quot; + parent)" to="(&quot;Directory \'&quot; / parent)" />
    <mutant id="mutant_231" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="((wcs.length) - 1)" to="((wcs.length) % 1)" />
    <mutant id="mutant_232" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) * &quot;\'- check path is valid&quot;)" />
    <mutant id="mutant_233" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40))" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) % (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40))" />
    <mutant id="mutant_234" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(XmlStreamWriter.BUFFER_SIZE) - (xmlProlog.length())" to="(XmlStreamWriter.BUFFER_SIZE) % (xmlProlog.length())" />
    <mutant id="mutant_2259" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_230" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="(&quot;The filter[&quot; + i)" to="(&quot;The filter[&quot; % i)" />
    <mutant id="mutant_246" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size)) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_247" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) + timeout)" to="timeout" />
    <mutant id="mutant_248" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="(&quot;The reference file \'&quot; - reference)" />
    <mutant id="mutant_249" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + src) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + src) % &quot;\' does not exist&quot;)" />
    <mutant id="mutant_242" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) + timeout)" to="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) - timeout)" />
    <mutant id="mutant_243" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="(&quot;Bytes to skip: &quot; / toSkip)" />
    <mutant id="mutant_244" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="(&quot;Length must not be negative: &quot; - length)" />
    <mutant id="mutant_245" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="numberOfChars - ((position) - (size))" to="(position) - (size)" />
    <mutant id="mutant_240" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart)" to="((currentLastBytePos) / lineStart)" />
    <mutant id="mutant_241" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 3)" to="(offset / 3)" />
    <mutant id="mutant_257" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="size" />
    <mutant id="mutant_258" viable="false" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="((&quot;write(&quot; + b) + &quot;) failed: stream is closed&quot;)" to="((&quot;write(&quot; + b) - &quot;) failed: stream is closed&quot;)" />
    <mutant id="mutant_259" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(newLineSequence.length) - 1" to="(newLineSequence.length) / 1" />
    <mutant id="mutant_253" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; + (new String(leftOver , encoding)))" to="(&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; * (new String(leftOver , encoding)))" />
    <mutant id="mutant_254" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="1" />
    <mutant id="mutant_255" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_256" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="((value2 &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_250" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 2)" to="2" />
    <mutant id="mutant_251" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(len - size)" to="(len % size)" />
    <mutant id="mutant_252" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="firstCount + secondCount" to="firstCount % secondCount" />
    <mutant id="mutant_268" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + parentFile) + &quot;\' directory cannot be created&quot;)" to="((&quot;Destination \'&quot; + parentFile) % &quot;\' directory cannot be created&quot;)" />
    <mutant id="mutant_269" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) - &quot;\' did not find free space in response &quot;)" />
    <mutant id="mutant_264" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="file" />
    <mutant id="mutant_265" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="(&quot;File \'&quot; / file)" />
    <mutant id="mutant_266" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length)" to="(offset * length)" />
    <mutant id="mutant_267" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="&quot;]&quot;" />
    <mutant id="mutant_260" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="&quot;.&quot; + (extensions[i])" to="&quot;.&quot; % (extensions[i])" />
    <mutant id="mutant_261" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40))" to="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48))" />
    <mutant id="mutant_262" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) + maxBytesPerChar)" to="maxBytesPerChar" />
    <mutant id="mutant_263" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j)" to="(i / j)" />
    <mutant id="mutant_279" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;)" to="((&quot;Array Size=&quot; + (array.length)) * &quot;, offset=&quot;)" />
    <mutant id="mutant_2299" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; * srcFile)" />
    <mutant id="mutant_270" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) % (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_2297" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="((newLineSequence.length) - 1)" to="((newLineSequence.length) * 1)" />
    <mutant id="mutant_2298" viable="true" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(super.toString())" />
    <mutant id="mutant_2295" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="&quot;Unable to delete file: &quot; + file" to="&quot;Unable to delete file: &quot; * file" />
    <mutant id="mutant_2296" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile)" to="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) / destFile)" />
    <mutant id="mutant_275" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_276" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;)" to="&quot;\' Expected length: &quot;" />
    <mutant id="mutant_277" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 3)" to="(offset - 3)" />
    <mutant id="mutant_278" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="remaining" />
    <mutant id="mutant_271" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="1" />
    <mutant id="mutant_272" viable="false" in="org.apache.commons.io.FileExistsException(java.io.File)" from="((&quot;File &quot; + file) + &quot; exists&quot;)" to="((&quot;File &quot; + file) / &quot; exists&quot;)" />
    <mutant id="mutant_273" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="high &lt;&lt; 24" />
    <mutant id="mutant_274" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path)" to="path" />
    <mutant id="mutant_280" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="(((super.toString()) + &quot;(&quot;) % condition)" />
    <mutant id="mutant_281" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="(((value1 &amp; 255) &lt;&lt; 0) - ((value2 &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_286" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 3)" to="(offset / 3)" />
    <mutant id="mutant_287" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_288" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="&quot;dir /a /-c &quot; + path" to="&quot;dir /a /-c &quot;" />
    <mutant id="mutant_289" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((encoding.length()) - 1)" to="encoding.length()" />
    <mutant id="mutant_282" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((mark) + (readlimit))" to="((mark) / (readlimit))" />
    <mutant id="mutant_283" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(&quot;Length to read: &quot; + expected)" to="(&quot;Length to read: &quot; - expected)" />
    <mutant id="mutant_284" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="((int)(((position) - (size))))" to="((position) * (size))" />
    <mutant id="mutant_285" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) / (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_290" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; + (new String(leftOver , encoding)))" to="new String(leftOver , encoding)" />
    <mutant id="mutant_291" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; % srcFile)" />
    <mutant id="mutant_292" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="(&quot;Array Size=&quot; % (b.length))" />
    <mutant id="mutant_297" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 3)" to="(offset / 3)" />
    <mutant id="mutant_298" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)" to="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) * (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_299" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) + length)" to="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) - length)" />
    <mutant id="mutant_293" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(&quot;URL could not be converted to a File: &quot; + url)" to="(&quot;URL could not be converted to a File: &quot; - url)" />
    <mutant id="mutant_294" viable="true" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) + &quot; exists&quot;)" to="&quot; exists&quot;" />
    <mutant id="mutant_295" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; does not exist&quot;)" to="(directory / &quot; does not exist&quot;)" />
    <mutant id="mutant_296" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="((&quot;File \'&quot; + file) % &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_27" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 0)" to="(offset % 0)" />
    <mutant id="mutant_26" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_29" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="remaining" />
    <mutant id="mutant_28" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="offset + index" to="offset - index" />
    <mutant id="mutant_21" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="(freeSpaceWindows(path, timeout)) / (FileUtils.ONE_KB)" to="freeSpaceWindows(path, timeout)" />
    <mutant id="mutant_20" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; / srcDir)" />
    <mutant id="mutant_23" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(off + size)" to="off" />
    <mutant id="mutant_22" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16))" to="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) / (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_25" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 5)" to="(offset / 5)" />
    <mutant id="mutant_24" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(len - 1)" to="(len / 1)" />
    <mutant id="mutant_16" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position()))" to="(&quot;Unexpected CharBuffer postion: actual=&quot; - (cbuf.position()))" />
    <mutant id="mutant_15" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 2" to="prefix * 2" />
    <mutant id="mutant_18" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(&quot;XML prolog or ROOT element not found on first &quot; + offset)" to="(&quot;XML prolog or ROOT element not found on first &quot; * offset)" />
    <mutant id="mutant_17" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile)" to="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) / destFile)" />
    <mutant id="mutant_19" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size)) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + condition) + (size)) % &quot;)&quot;" />
    <mutant id="mutant_10" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(&quot;Marked position [&quot; + (mark))" to="(&quot;Marked position [&quot; * (mark))" />
    <mutant id="mutant_12" viable="true" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name)) + &quot;]&quot;" to="&quot;FileDeleteStrategy[&quot; + (name)" />
    <mutant id="mutant_11" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset)" to="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) % offset)" />
    <mutant id="mutant_14" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) + &quot;\'&quot;)" to="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) % &quot;\'&quot;)" />
    <mutant id="mutant_13" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((encoding.length()) - 1)" to="1" />
    <mutant id="mutant_49" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="((super.toString()) + &quot;[sumDirectoryContents=&quot;)" to="(super.toString())" />
    <mutant id="mutant_48" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="(&quot;Bytes to skip must not be negative: &quot; - toSkip)" />
    <mutant id="mutant_1838" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;)" to="(&quot;Command line threw an InterruptedException &quot; * &quot;for command &quot;)" />
    <mutant id="mutant_1839" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j) - ((newLineSequence.length) - 1)" to="i + j" />
    <mutant id="mutant_41" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' is not a directory&quot;)" to="((&quot;Source \'&quot; + srcDir) / &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_40" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + parentFile) + &quot;\' directory cannot be created&quot;)" to="((&quot;Destination \'&quot; + parentFile) * &quot;\' directory cannot be created&quot;)" />
    <mutant id="mutant_43" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size))" to="((((super.toString()) + &quot;(&quot;) + condition) * (size))" />
    <mutant id="mutant_42" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size + 2" to="size / 2" />
    <mutant id="mutant_45" viable="false" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not find lockDir: &quot; + (lockDir.getAbsolutePath()))" to="(&quot;Could not find lockDir: &quot; % (lockDir.getAbsolutePath()))" />
    <mutant id="mutant_44" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile)" to="((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;)" />
    <mutant id="mutant_47" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) + (this.mark_cbuf))" to="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;)" />
    <mutant id="mutant_46" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length)" to="(offset - length)" />
    <mutant id="mutant_50" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="pos + i" />
    <mutant id="mutant_1836" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="index + (includeSeparator ? 1 : 0)" to="index - (includeSeparator ? 1 : 0)" />
    <mutant id="mutant_1837" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48))" to="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) % (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48))" />
    <mutant id="mutant_1834" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) - &quot;\'- response was &quot;)" />
    <mutant id="mutant_1835" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(&quot;Unexpected negative line length=&quot; + lineLengthBytes)" to="(&quot;Unexpected negative line length=&quot; - lineLengthBytes)" />
    <mutant id="mutant_1832" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="&quot;Unable to delete file: &quot; + file" to="&quot;Unable to delete file: &quot;" />
    <mutant id="mutant_1833" viable="false" in="org.apache.commons.io.FileUtils.sizeOf(java.io.File)" from="file + &quot; does not exist&quot;" to="file / &quot; does not exist&quot;" />
    <mutant id="mutant_1830" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Failed to delete original file \'&quot; + srcFile)" to="(&quot;Failed to delete original file \'&quot; % srcFile)" />
    <mutant id="mutant_1831" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((&quot;XML prolog or ROOT element not found on first &quot; + offset) + &quot; bytes&quot;)" to="((&quot;XML prolog or ROOT element not found on first &quot; + offset) % &quot; bytes&quot;)" />
    <mutant id="mutant_38" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) + &quot;\' are the same&quot;)" to="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) % &quot;\' are the same&quot;)" />
    <mutant id="mutant_37" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + fullFilenameToAdd)" to="(basePath % fullFilenameToAdd)" />
    <mutant id="mutant_39" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" to="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) - (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_1829" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;)" to="&quot;for path \'&quot;" />
    <mutant id="mutant_1827" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - j" to="j" />
    <mutant id="mutant_1828" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(&quot;Buffer size &quot; + bufferSize)" to="(&quot;Buffer size &quot; - bufferSize)" />
    <mutant id="mutant_30" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(data.length) - 1" to="(data.length) * 1" />
    <mutant id="mutant_32" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) + &quot;\' are the same&quot;)" to="&quot;\' are the same&quot;" />
    <mutant id="mutant_31" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_34" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) + destDir)" to="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) * destDir)" />
    <mutant id="mutant_33" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((mark) + (readlimit))" to="((mark) % (readlimit))" />
    <mutant id="mutant_36" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_35" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="&quot;\' is not a directory&quot;" />
    <mutant id="mutant_1825" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_1826" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i - newLineMatchByteCount" to="i" />
    <mutant id="mutant_1823" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(FileSystemUtils.DF)" />
    <mutant id="mutant_1824" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="((wcs.length) - 1)" to="(wcs.length)" />
    <mutant id="mutant_1821" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((encoding.length()) - 1)" to="((encoding.length()) * 1)" />
    <mutant id="mutant_1822" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="&quot;.&quot; + (extensions[i])" to="&quot;.&quot;" />
    <mutant id="mutant_1820" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_1818" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="((&quot;Destination directory \'&quot; + destDir) - &quot;\' does not exist [createDestDir=&quot;)" />
    <mutant id="mutant_1819" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(length - totalRead)" to="(length / totalRead)" />
    <mutant id="mutant_1816" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; % destDir)" />
    <mutant id="mutant_1817" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) + size)" to="size" />
    <mutant id="mutant_63" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="&quot;The reference file \'&quot;" />
    <mutant id="mutant_62" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents))" to="((super.toString()) + &quot;[sumDirectoryContents=&quot;)" />
    <mutant id="mutant_65" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + src)" to="&quot;Source \'&quot;" />
    <mutant id="mutant_64" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="(&quot;The filter[&quot; + i)" to="&quot;The filter[&quot;" />
    <mutant id="mutant_67" viable="true" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="&quot; is too large to be converted to an int&quot;" />
    <mutant id="mutant_66" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;)" to="((&quot;Array Size=&quot; + (array.length)) % &quot;, offset=&quot;)" />
    <mutant id="mutant_69" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="(readlimit)" />
    <mutant id="mutant_68" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;)" to="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) - &quot; Actual: &quot;)" />
    <mutant id="mutant_70" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) + &quot;\'&quot;)" to="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) - &quot;\'&quot;)" />
    <mutant id="mutant_72" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="(&quot;Array Size=&quot; * (b.length))" />
    <mutant id="mutant_71" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) + (data.length))" to="data.length" />
    <mutant id="mutant_1814" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="(prefix - 2)" />
    <mutant id="mutant_1815" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is a directory&quot;)" to="&quot;\' exists but is a directory&quot;" />
    <mutant id="mutant_1812" viable="true" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString()))" to="(delegate.toString())" />
    <mutant id="mutant_1813" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) + &quot; TB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) - &quot; TB&quot;" />
    <mutant id="mutant_1810" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="(((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) / &quot;\'&quot;)" />
    <mutant id="mutant_1811" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j + 1" to="1" />
    <mutant id="mutant_59" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; % srcDir)" />
    <mutant id="mutant_1809" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;)" to="&quot;, excepted: &quot;" />
    <mutant id="mutant_1807" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="(((super.toString()) + &quot;(&quot;) * condition)" />
    <mutant id="mutant_1808" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(&quot;Chars to skip: &quot; + toSkip)" to="&quot;Chars to skip: &quot;" />
    <mutant id="mutant_1805" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) + lines)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) % lines)" />
    <mutant id="mutant_1806" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="srcFile" />
    <mutant id="mutant_52" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="file" />
    <mutant id="mutant_51" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) * (caseSensitivity))" />
    <mutant id="mutant_54" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="1" />
    <mutant id="mutant_53" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="((&quot;The filter[&quot; + i) + &quot;] is null&quot;)" to="((&quot;The filter[&quot; + i) / &quot;] is null&quot;)" />
    <mutant id="mutant_56" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="((int)(((position) - (size))))" to="(size)" />
    <mutant id="mutant_55" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(&quot;Marked position [&quot; + (mark))" to="(&quot;Marked position [&quot; % (mark))" />
    <mutant id="mutant_58" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) + (currentLastBytePos))" to="(&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;)" />
    <mutant id="mutant_57" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="(&quot;Chars to skip: &quot; + toSkip)" />
    <mutant id="mutant_61" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length) - remaining" to="(offset + length) % remaining" />
    <mutant id="mutant_60" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24))" to="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) - (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24))" />
    <mutant id="mutant_1803" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 6)" to="(offset % 6)" />
    <mutant id="mutant_1804" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + src) + &quot;\' does not exist&quot;)" to="&quot;\' does not exist&quot;" />
    <mutant id="mutant_1801" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen)" to="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) / srcLen)" />
    <mutant id="mutant_1802" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="dest - (idx)" to="idx" />
    <mutant id="mutant_1800" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="&quot;dir /a /-c &quot; + path" to="&quot;dir /a /-c &quot; * path" />
    <mutant id="mutant_2729" viable="true" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name))" to="(name)" />
    <mutant id="mutant_1872" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(&quot;Destination \'&quot; + destDir)" />
    <mutant id="mutant_2720" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)" to="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) - ((value3 &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_1873" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((no) - 1)" to="no" />
    <mutant id="mutant_1870" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 0)" to="(offset * 0)" />
    <mutant id="mutant_1871" viable="true" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString())) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_2728" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) * (caseSensitivity))" />
    <mutant id="mutant_2727" viable="true" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)" />
    <mutant id="mutant_1878" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position()))" to="(&quot;Unexpected CharBuffer postion: actual=&quot; % (cbuf.position()))" />
    <mutant id="mutant_2726" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' already exists&quot;)" to="&quot;\' already exists&quot;" />
    <mutant id="mutant_1879" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((encoding.length()) - 1)" to="((encoding.length()) + 1)" />
    <mutant id="mutant_2725" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="((wcs.length) - 1)" to="((wcs.length) + 1)" />
    <mutant id="mutant_1876" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_MB)" to="FileUtils.ONE_KB" />
    <mutant id="mutant_2724" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" />
    <mutant id="mutant_1877" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' cannot be written to&quot;)" to="((&quot;Destination \'&quot; + destDir) / &quot;\' cannot be written to&quot;)" />
    <mutant id="mutant_2723" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;)" to="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) % &quot;, length=&quot;)" />
    <mutant id="mutant_1874" viable="true" in="org.apache.commons.io.FilenameUtils.getName(java.lang.String)" from="(index + 1)" to="(index * 1)" />
    <mutant id="mutant_2722" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="(((value1 &amp; 255) &lt;&lt; 0) % ((value2 &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_1875" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="i" />
    <mutant id="mutant_2721" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Failed to list contents of &quot; + srcDir)" to="(&quot;Failed to list contents of &quot; / srcDir)" />
    <mutant id="mutant_2719" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="&quot;\' does not exist&quot;" />
    <mutant id="mutant_2718" viable="false" in="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)" from="(&quot;Parameter \'directory\' is not a directory: &quot; + directory)" to="&quot;Parameter \'directory\' is not a directory: &quot;" />
    <mutant id="mutant_1861" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' exists but is not a directory&quot;)" to="((&quot;Source \'&quot; + srcDir) / &quot;\' exists but is not a directory&quot;)" />
    <mutant id="mutant_1862" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="(&quot;The filter[&quot; + i)" to="(&quot;The filter[&quot; * i)" />
    <mutant id="mutant_1860" viable="true" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(caseSensitivity)" />
    <mutant id="mutant_1869" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1)" to="(no + 1)" />
    <mutant id="mutant_2717" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) % (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_2716" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 0)" to="(offset - 0)" />
    <mutant id="mutant_1867" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory) + &quot;.&quot;" to="&quot;.&quot;" />
    <mutant id="mutant_2715" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 2)" to="(offset - 2)" />
    <mutant id="mutant_1868" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - 4" to="i % 4" />
    <mutant id="mutant_2714" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) % &quot;\'- response was &quot;)" />
    <mutant id="mutant_1865" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 3)" to="(offset % 3)" />
    <mutant id="mutant_2713" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen)" to="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) - srcLen)" />
    <mutant id="mutant_1866" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be read&quot;)" to="(&quot;File \'&quot; + file)" />
    <mutant id="mutant_2712" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; / result)" />
    <mutant id="mutant_1863" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) + actual)" to="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) * actual)" />
    <mutant id="mutant_2711" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(high &lt;&lt; 32) + (4294967295L &amp; low)" to="high &lt;&lt; 32" />
    <mutant id="mutant_1864" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((off + len) - remaining)" to="(off + len)" />
    <mutant id="mutant_2710" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) * &quot;]&quot;" />
    <mutant id="mutant_2709" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" from="(&quot;Stream not configure to detect &quot; + bom)" to="bom" />
    <mutant id="mutant_2708" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="firstCount + secondCount" to="firstCount - secondCount" />
    <mutant id="mutant_2707" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be written to&quot;)" to="((&quot;File \'&quot; + file) % &quot;\' cannot be written to&quot;)" />
    <mutant id="mutant_1850" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;)" to="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" />
    <mutant id="mutant_1851" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; / srcDir)" />
    <mutant id="mutant_1858" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) % &quot;for path \'&quot;)" />
    <mutant id="mutant_2706" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="((int)(((position) - (size))))" to="((position) % (size))" />
    <mutant id="mutant_1859" viable="false" in="?" from="1024 * 4" to="1024 % 4" />
    <mutant id="mutant_2705" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="(Math.min(posUnix, posWin)) - 1" />
    <mutant id="mutant_1856" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) + &quot;\'&quot;)" to="&quot;\'&quot;" />
    <mutant id="mutant_2704" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;)" to="&quot;for path \'&quot;" />
    <mutant id="mutant_1857" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) - (Arrays.asList(cmdAttribs)))" />
    <mutant id="mutant_2703" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;Directory \'&quot; + parent) + &quot;\' could not be created&quot;)" to="((&quot;Directory \'&quot; + parent) % &quot;\' could not be created&quot;)" />
    <mutant id="mutant_1854" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8))" to="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) - (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_2702" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="(position + c)" to="(position % c)" />
    <mutant id="mutant_1855" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; * srcDir)" />
    <mutant id="mutant_2701" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(&quot;The byte count &quot; + result)" />
    <mutant id="mutant_1852" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) % actual)" />
    <mutant id="mutant_2700" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; is not a directory&quot;" to="directory" />
    <mutant id="mutant_1853" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream(int)" from="(&quot;Negative initial size: &quot; + size)" to="size" />
    <mutant id="mutant_1849" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;)" to="((&quot;illegal index: &quot; + index) - &quot; into array of length &quot;)" />
    <mutant id="mutant_1840" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(&quot;Chars to skip: &quot; + toSkip)" to="(&quot;Chars to skip: &quot; - toSkip)" />
    <mutant id="mutant_1847" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="numberOfBytes - ((position) - (size))" to="numberOfBytes / ((position) - (size))" />
    <mutant id="mutant_1848" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;)" to="&quot; exists and is &quot;" />
    <mutant id="mutant_1845" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="((super.toString()) + &quot;[sumDirectoryContents=&quot;)" to="&quot;[sumDirectoryContents=&quot;" />
    <mutant id="mutant_1846" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="(&quot;Source \'&quot; / srcDir)" />
    <mutant id="mutant_1843" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 3)" to="(offset / 3)" />
    <mutant id="mutant_1844" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 1)" to="(offset % 1)" />
    <mutant id="mutant_1841" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="(pos % i)" />
    <mutant id="mutant_1842" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="&quot;Destination \'&quot;" />
    <mutant id="mutant_1432" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcDir) % &quot;\' does not exist&quot;)" />
    <mutant id="mutant_1433" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) - &quot;\'&quot;)" />
    <mutant id="mutant_1430" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Unexpected readed size. current: &quot; + offset)" to="&quot;Unexpected readed size. current: &quot;" />
    <mutant id="mutant_1431" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="numberOfChars - ((position) - (size))" to="numberOfChars + ((position) - (size))" />
    <mutant id="mutant_1438" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="(Math.min(posUnix, posWin)) / 1" />
    <mutant id="mutant_1439" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i - newLineMatchByteCount" to="i + newLineMatchByteCount" />
    <mutant id="mutant_1436" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 2)" to="(offset * 2)" />
    <mutant id="mutant_1437" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;Directory \'&quot; + parent) + &quot;\' could not be created&quot;)" to="((&quot;Directory \'&quot; + parent) * &quot;\' could not be created&quot;)" />
    <mutant id="mutant_1434" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="pos" />
    <mutant id="mutant_1435" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip - remain" to="toSkip * remain" />
    <mutant id="mutant_1421" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(&quot;Unexpected negative line length=&quot; + lineLengthBytes)" to="(&quot;Unexpected negative line length=&quot; % lineLengthBytes)" />
    <mutant id="mutant_1422" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line did not return any info &quot; + &quot;for command &quot;)" to="(&quot;Command line did not return any info &quot; - &quot;for command &quot;)" />
    <mutant id="mutant_1420" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="((position) - (size))" to="((position) + (size))" />
    <mutant id="mutant_1429" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="(((super.toString()) + &quot;(&quot;) - condition)" />
    <mutant id="mutant_1427" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile)" to="destFile" />
    <mutant id="mutant_1428" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 0)" to="0" />
    <mutant id="mutant_1425" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' already exists&quot;)" to="(&quot;Destination \'&quot; + destFile)" />
    <mutant id="mutant_1426" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;) + &quot;not a directory. Unable to create directory.&quot;" to="((&quot;File &quot; + directory) + &quot; exists and is &quot;) % &quot;not a directory. Unable to create directory.&quot;" />
    <mutant id="mutant_1423" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 3)" to="(i - 3)" />
    <mutant id="mutant_1424" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(size - offset)" to="(size + offset)" />
    <mutant id="mutant_1410" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1) * (blockSize)" to="(no - 1) % (blockSize)" />
    <mutant id="mutant_1894" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1) - prefix" to="(i + 1) / prefix" />
    <mutant id="mutant_1411" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="size - pos" to="size" />
    <mutant id="mutant_1895" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 5)" to="5" />
    <mutant id="mutant_1892" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path)" />
    <mutant id="mutant_1893" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) + actual)" to="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) - actual)" />
    <mutant id="mutant_1890" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' already exists&quot;)" to="((&quot;Destination \'&quot; + destFile) * &quot;\' already exists&quot;)" />
    <mutant id="mutant_1891" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) + &quot;\' are the same&quot;)" to="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) / &quot;\' are the same&quot;)" />
    <mutant id="mutant_1418" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="j" />
    <mutant id="mutant_1419" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line returned OS error code \'&quot; + (proc.exitValue()))" to="(&quot;Command line returned OS error code \'&quot; * (proc.exitValue()))" />
    <mutant id="mutant_1416" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="&quot;dir /a /-c &quot; + path" to="&quot;dir /a /-c &quot; - path" />
    <mutant id="mutant_1417" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="((super.toString()) / &quot;[caseSensitivity=&quot;)" />
    <mutant id="mutant_1414" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;)" to="&quot;\' and destination \'&quot;" />
    <mutant id="mutant_1898" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;)" to="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) / &quot;\' for command &quot;)" />
    <mutant id="mutant_1415" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="(&quot;Source \'&quot; * srcFile)" />
    <mutant id="mutant_1899" viable="false" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="(&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath()))" to="(&quot;Can\'t write file, lock &quot; - (lockFile.getAbsolutePath()))" />
    <mutant id="mutant_1412" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8))" to="(((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_1896" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;)" to="(&quot;Current currentLastCharPos unexpectedly positive... &quot; % &quot;last readLine() should have returned something! currentLastCharPos=&quot;)" />
    <mutant id="mutant_1413" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;)" to="(&quot;illegal index: &quot; + index)" />
    <mutant id="mutant_1897" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_1409" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="1" />
    <mutant id="mutant_1883" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;)" to="&quot; to a subdirectory of itself: &quot;" />
    <mutant id="mutant_1400" viable="true" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="((&quot;write(&quot; + b) + &quot;) failed: stream is closed&quot;)" to="(&quot;write(&quot; + b)" />
    <mutant id="mutant_1884" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="(&quot;Bytes to skip must not be negative: &quot; % toSkip)" />
    <mutant id="mutant_1881" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 2)" to="offset" />
    <mutant id="mutant_1882" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) * skipped)" />
    <mutant id="mutant_1880" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 0)" to="offset" />
    <mutant id="mutant_1407" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" />
    <mutant id="mutant_1408" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 0)" to="0" />
    <mutant id="mutant_1405" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 4)" to="(offset - 4)" />
    <mutant id="mutant_1889" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(&quot;Length to read: &quot; + length)" to="(&quot;Length to read: &quot; - length)" />
    <mutant id="mutant_1406" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' exists but is not a directory&quot;)" to="(&quot;Source \'&quot; + srcDir)" />
    <mutant id="mutant_1403" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) + len" to="(count) / len" />
    <mutant id="mutant_1887" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(&quot;Number of characters to skip is less than zero: &quot; + n)" to="(&quot;Number of characters to skip is less than zero: &quot; / n)" />
    <mutant id="mutant_1404" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1888" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((int)((totalByteLength) % blockSize))" to="(totalByteLength) / blockSize" />
    <mutant id="mutant_1401" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) + actual)" to="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) % actual)" />
    <mutant id="mutant_1885" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k * j)" />
    <mutant id="mutant_1402" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((totalByteLength) / blockSize)" to="(totalByteLength)" />
    <mutant id="mutant_1886" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="prefix" />
    <mutant id="mutant_602" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + delegate) - &quot;)&quot;" />
    <mutant id="mutant_603" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="(&quot;Failed to list contents of &quot; * directory)" />
    <mutant id="mutant_604" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(offset + location)" to="(offset - location)" />
    <mutant id="mutant_605" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) + (this.mark_cbuf))" to="this.mark_cbuf" />
    <mutant id="mutant_600" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; is not a directory&quot;" to="&quot; is not a directory&quot;" />
    <mutant id="mutant_601" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' exists but is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) % &quot;\' exists but is not a directory&quot;)" />
    <mutant id="mutant_1480" viable="false" in="org.apache.commons.io.FileExistsException(java.io.File)" from="((&quot;File &quot; + file) + &quot; exists&quot;)" to="((&quot;File &quot; + file) * &quot; exists&quot;)" />
    <mutant id="mutant_606" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((currentBuffer.length) - inBufferPos)" to="((currentBuffer.length) % inBufferPos)" />
    <mutant id="mutant_607" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" />
    <mutant id="mutant_608" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 3)" to="(offset - 3)" />
    <mutant id="mutant_609" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) % path)" />
    <mutant id="mutant_1476" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="(&quot;The filter[&quot; + i)" to="i" />
    <mutant id="mutant_2323" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size1 - size2" to="size1 / size2" />
    <mutant id="mutant_1477" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="(&quot;The reference file \'&quot; + reference)" />
    <mutant id="mutant_2324" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 3)" to="(offset - 3)" />
    <mutant id="mutant_1474" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is a directory&quot;)" to="((&quot;Destination \'&quot; + destFile) - &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_2321" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="i" />
    <mutant id="mutant_1475" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="(&quot;Skip count must be non-negative, actual: &quot; * toSkip)" />
    <mutant id="mutant_2322" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 0)" to="0" />
    <mutant id="mutant_1472" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="((&quot;Bytes to skip: &quot; + toSkip) - &quot; actual: &quot;)" />
    <mutant id="mutant_1473" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + parentFile)" to="(&quot;Destination \'&quot; * parentFile)" />
    <mutant id="mutant_2320" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) - (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_1470" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1471" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path)" />
    <mutant id="mutant_2329" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="(currentLastBytePos) + 1" to="1" />
    <mutant id="mutant_2327" viable="false" in="?" from="1024 * 4" to="1024 - 4" />
    <mutant id="mutant_2328" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile)" to="destFile" />
    <mutant id="mutant_1478" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="((idx) + n)" to="((idx) * n)" />
    <mutant id="mutant_2325" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents))" to="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) * (sumDirectoryContents))" />
    <mutant id="mutant_1479" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size + 1)" />
    <mutant id="mutant_2326" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="(file1.lastModified()) - (file2.lastModified())" to="(file1.lastModified()) / (file2.lastModified())" />
    <mutant id="mutant_613" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j)" to="(i % j)" />
    <mutant id="mutant_614" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" to="((data[(offset + 1)]) &amp; 255) &lt;&lt; 8" />
    <mutant id="mutant_615" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart)" to="((currentLastBytePos) % lineStart)" />
    <mutant id="mutant_616" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile)" to="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) - destFile)" />
    <mutant id="mutant_610" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' cannot be written to&quot;)" to="((&quot;Destination \'&quot; + destDir) * &quot;\' cannot be written to&quot;)" />
    <mutant id="mutant_611" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;)" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) / &quot;\' did not return data as expected &quot;)" />
    <mutant id="mutant_612" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) - (caseSensitivity))" />
    <mutant id="mutant_617" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) % (caseSensitivity))" />
    <mutant id="mutant_618" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_MB)" to="(FileUtils.ONE_KB) / (FileUtils.ONE_MB)" />
    <mutant id="mutant_619" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is a directory&quot;)" to="((&quot;Destination \'&quot; + destFile) / &quot;\' exists but is a directory&quot;)" />
    <mutant id="mutant_1465" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) + &quot;\'&quot;)" to="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile)" />
    <mutant id="mutant_2312" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(offset + location)" to="(offset - location)" />
    <mutant id="mutant_1466" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) * (Arrays.asList(cmdAttribs)))" />
    <mutant id="mutant_2313" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path) + &quot;\&quot;&quot;" to="(&quot;\&quot;&quot; + path) % &quot;\&quot;&quot;" />
    <mutant id="mutant_1463" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;)" to="((&quot;Buffer size &quot; + bufferSize) % &quot; is less than maxBytesPerChar &quot;)" />
    <mutant id="mutant_2310" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16))" to="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) / (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16))" />
    <mutant id="mutant_1464" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) + destDir)" to="destDir" />
    <mutant id="mutant_2311" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16))" to="(((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_1461" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) + &quot;\' are the same&quot;)" to="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) - &quot;\' are the same&quot;)" />
    <mutant id="mutant_1462" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="(currentLastBytePos) + 1" to="(currentLastBytePos) % 1" />
    <mutant id="mutant_1460" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="((&quot;The filter[&quot; + i) + &quot;] is null&quot;)" to="((&quot;The filter[&quot; + i) - &quot;] is null&quot;)" />
    <mutant id="mutant_2318" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="srcFile" />
    <mutant id="mutant_2319" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset)" to="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) / offset)" />
    <mutant id="mutant_1469" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; is not a directory&quot;" to="directory / &quot; is not a directory&quot;" />
    <mutant id="mutant_2316" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;)" to="((&quot;Buffer size &quot; + bufferSize) / &quot; is less than maxBytesPerChar &quot;)" />
    <mutant id="mutant_2317" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_1467" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) - &quot;]&quot;" />
    <mutant id="mutant_2314" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) / &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_1468" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) + dstLen)" to="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) / dstLen)" />
    <mutant id="mutant_2315" viable="true" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="condition" />
    <mutant id="mutant_624" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="currentBuffer.length" />
    <mutant id="mutant_625" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; / result)" />
    <mutant id="mutant_626" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j + 1" to="j - 1" />
    <mutant id="mutant_627" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; % destFile)" />
    <mutant id="mutant_620" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="srcDir" />
    <mutant id="mutant_621" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1)" to="no" />
    <mutant id="mutant_622" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="firstCount + secondCount" to="secondCount" />
    <mutant id="mutant_623" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) + &quot;\'&quot;)" to="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) / &quot;\'&quot;)" />
    <mutant id="mutant_628" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="((short)((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)))" to="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) * (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_629" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 6)" to="offset" />
    <mutant id="mutant_1454" viable="false" in="org.apache.commons.io.IOCase.forName(java.lang.String)" from="(&quot;Invalid IOCase name: &quot; + name)" to="(&quot;Invalid IOCase name: &quot; % name)" />
    <mutant id="mutant_2301" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size))" to="(size)" />
    <mutant id="mutant_1455" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((off + len) - remaining)" to="((off + len) * remaining)" />
    <mutant id="mutant_2302" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 3)" to="(offset % 3)" />
    <mutant id="mutant_1452" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;)" to="(&quot;Command line \'dir /-c\' did not return any info &quot; % &quot;for path \'&quot;)" />
    <mutant id="mutant_1453" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="(size) - (position)" to="(size) * (position)" />
    <mutant id="mutant_2300" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((mark) + (readlimit))" to="((mark) * (readlimit))" />
    <mutant id="mutant_1450" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_1451" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="(&quot;Failed to list contents of &quot; / directory)" />
    <mutant id="mutant_2309" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line did not return any info &quot; + &quot;for command &quot;)" to="(&quot;Command line did not return any info &quot; / &quot;for command &quot;)" />
    <mutant id="mutant_2307" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="(&quot;Bytes to skip: &quot; + toSkip)" />
    <mutant id="mutant_2308" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(&quot;Buffer size &quot; + bufferSize)" to="(&quot;Buffer size &quot; / bufferSize)" />
    <mutant id="mutant_1458" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Failed to delete original directory \'&quot; + srcDir)" to="(&quot;Failed to delete original directory \'&quot; * srcDir)" />
    <mutant id="mutant_2305" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)" to="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) % (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)" />
    <mutant id="mutant_1459" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) % &quot;\'- check path is valid&quot;)" />
    <mutant id="mutant_2306" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; * destDir)" />
    <mutant id="mutant_1456" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate)" to="(((super.toString()) + &quot;(&quot;) * delegate)" />
    <mutant id="mutant_2303" viable="true" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="((super.toString()) + &quot;[caseSensitivity=&quot;)" />
    <mutant id="mutant_1457" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) + ((value4 &amp; 255) &lt;&lt; 24)" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) / ((value4 &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_2304" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is read-only&quot;)" to="((&quot;Destination \'&quot; + destFile) * &quot;\' exists but is read-only&quot;)" />
    <mutant id="mutant_635" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI))) + &quot; MB&quot;" to="&quot; MB&quot;" />
    <mutant id="mutant_636" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j)" to="(i - j)" />
    <mutant id="mutant_637" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;)" to="&quot;, length=&quot;" />
    <mutant id="mutant_638" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(data.length) - j" to="(data.length) % j" />
    <mutant id="mutant_631" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) - &quot;, length=&quot;)" />
    <mutant id="mutant_632" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(lines.size()) - 1" to="(lines.size()) / 1" />
    <mutant id="mutant_633" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;)" to="((&quot;Failed to copy full contents from \'&quot; + srcFile) % &quot;\' to \'&quot;)" />
    <mutant id="mutant_634" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((off + len) - remaining)" to="((off + len) / remaining)" />
    <mutant id="mutant_639" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' exists but is not a directory&quot;)" to="((&quot;Source \'&quot; + srcDir) - &quot;\' exists but is not a directory&quot;)" />
    <mutant id="mutant_1443" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="((max) - (pos))" to="((max) * (pos))" />
    <mutant id="mutant_1444" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="createDestDir" />
    <mutant id="mutant_1441" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path) + &quot;\&quot;&quot;" to="(&quot;\&quot;&quot; + path) / &quot;\&quot;&quot;" />
    <mutant id="mutant_1442" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) + &quot; EB&quot;" to="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) - &quot; EB&quot;" />
    <mutant id="mutant_1440" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(firstGT + 1)" to="(firstGT / 1)" />
    <mutant id="mutant_1449" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="size" />
    <mutant id="mutant_630" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="length / remaining" />
    <mutant id="mutant_1447" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(&quot;Array Size=&quot; + (array.length))" to="(&quot;Array Size=&quot; * (array.length))" />
    <mutant id="mutant_1448" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="&quot;Source \'&quot;" />
    <mutant id="mutant_1445" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="(&quot;Destination directory \'&quot; / destDir)" />
    <mutant id="mutant_1446" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 0)" to="(offset - 0)" />
    <mutant id="mutant_646" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size)) + &quot; bytes&quot;" to="&quot; bytes&quot;" />
    <mutant id="mutant_647" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + src) + &quot;\' does not exist&quot;)" to="(&quot;Source \'&quot; + src)" />
    <mutant id="mutant_648" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI))) + &quot; GB&quot;" to="&quot; GB&quot;" />
    <mutant id="mutant_649" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) - skipped)" />
    <mutant id="mutant_642" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="((&quot;The reference file \'&quot; + reference) % &quot;\' doesn\'t exist&quot;)" />
    <mutant id="mutant_643" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + parentFile)" to="&quot;Destination \'&quot;" />
    <mutant id="mutant_644" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) + ((value4 &amp; 255) &lt;&lt; 24)" to="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_645" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) - destFile)" />
    <mutant id="mutant_2370" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + i)" to="i" />
    <mutant id="mutant_1040" viable="false" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not find lockDir: &quot; + (lockDir.getAbsolutePath()))" to="(&quot;Could not find lockDir: &quot; / (lockDir.getAbsolutePath()))" />
    <mutant id="mutant_2371" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="(pos + i) * 1" />
    <mutant id="mutant_1036" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) % (Arrays.asList(cmdAttribs)))" />
    <mutant id="mutant_2367" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="len" />
    <mutant id="mutant_1037" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + length)" to="(offset / length)" />
    <mutant id="mutant_2368" viable="false" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) / &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_1034" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_TB)" to="FileUtils.ONE_TB" />
    <mutant id="mutant_2365" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="&quot;\' is not a directory&quot;" />
    <mutant id="mutant_1035" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir)" to="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) * destDir)" />
    <mutant id="mutant_2366" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; / destDir)" />
    <mutant id="mutant_1032" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_2363" viable="true" in="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)" from="((str.length()) - endLen)" to="str.length()" />
    <mutant id="mutant_1033" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) * &quot;(&quot;)" />
    <mutant id="mutant_2364" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;)" to="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) / &quot; expected=&quot;)" />
    <mutant id="mutant_1030" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="((&quot;Destination directory \'&quot; + destDir) / &quot;\' does not exist [createDestDir=&quot;)" />
    <mutant id="mutant_2361" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) % len)" />
    <mutant id="mutant_1031" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="((&quot;The reference file \'&quot; + reference) - &quot;\' doesn\'t exist&quot;)" />
    <mutant id="mutant_2362" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;)" to="(&quot;Command line \'dir /-c\' did not return any info &quot; / &quot;for path \'&quot;)" />
    <mutant id="mutant_640" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="&quot;dir /a /-c &quot; + path" to="&quot;dir /a /-c &quot; / path" />
    <mutant id="mutant_641" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 6)" to="(offset * 6)" />
    <mutant id="mutant_1038" viable="true" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(super.toString())" />
    <mutant id="mutant_2369" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j + 1" to="j * 1" />
    <mutant id="mutant_1039" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(&quot;Number of characters to skip is less than zero: &quot; + n)" to="(&quot;Number of characters to skip is less than zero: &quot; - n)" />
    <mutant id="mutant_657" viable="false" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) + &quot; exists&quot;)" to="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) - &quot; exists&quot;)" />
    <mutant id="mutant_658" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Failed to delete original file \'&quot; + srcFile)" to="&quot;Failed to delete original file \'&quot;" />
    <mutant id="mutant_659" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; % destFile)" />
    <mutant id="mutant_653" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="high &lt;&lt; 24" />
    <mutant id="mutant_654" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="((int)(((position) - (size))))" to="(position)" />
    <mutant id="mutant_655" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size / 1)" />
    <mutant id="mutant_656" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir)" to="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) % destDir)" />
    <mutant id="mutant_2360" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="end" />
    <mutant id="mutant_1025" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;)" to="((&quot;Length to read: &quot; + expected) - &quot; actual: &quot;)" />
    <mutant id="mutant_2356" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Failed to delete original file \'&quot; + srcFile)" to="srcFile" />
    <mutant id="mutant_1026" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Failed to copy full contents from \'&quot; + srcFile)" to="(&quot;Failed to copy full contents from \'&quot; * srcFile)" />
    <mutant id="mutant_2357" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString())) + &quot;]&quot;" to="(((super.toString()) + &quot;[&quot;) + (delegate.toString())) * &quot;]&quot;" />
    <mutant id="mutant_1023" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)" from="((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)" to="((value1 &amp; 255) &lt;&lt; 0) % ((value2 &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_2354" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset)" to="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) - offset)" />
    <mutant id="mutant_1024" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)" to="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) % ((value3 &amp; 255) &lt;&lt; 16)" />
    <mutant id="mutant_2355" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) - &quot;\'- check path is valid&quot;)" />
    <mutant id="mutant_1021" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="(prefix / 2)" />
    <mutant id="mutant_2352" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_1022" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) * len)" />
    <mutant id="mutant_2353" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_2350" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_TB)" to="(FileUtils.ONE_KB) % (FileUtils.ONE_TB)" />
    <mutant id="mutant_1020" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="&quot;Destination \'&quot;" />
    <mutant id="mutant_2351" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="(&quot;The filter[&quot; + i)" to="(&quot;The filter[&quot; / i)" />
    <mutant id="mutant_650" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;)" to="(&quot;Command line \'dir /-c\' did not return valid info &quot; % &quot;for path \'&quot;)" />
    <mutant id="mutant_651" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="(size + 1)" />
    <mutant id="mutant_652" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 3)" to="3" />
    <mutant id="mutant_1029" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="((short)((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)))" to="((data[(offset + 0)]) &amp; 255) &lt;&lt; 0" />
    <mutant id="mutant_1027" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) * (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" />
    <mutant id="mutant_2358" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size + 2" to="size % 2" />
    <mutant id="mutant_1028" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="(((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" />
    <mutant id="mutant_2359" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="(b.length)" />
    <mutant id="mutant_668" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size1 - size2" to="size1 + size2" />
    <mutant id="mutant_669" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((no) - 1)" to="1" />
    <mutant id="mutant_664" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' directory cannot be created&quot;)" to="((&quot;Destination \'&quot; + destDir) / &quot;\' directory cannot be created&quot;)" />
    <mutant id="mutant_665" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) * &quot;for path \'&quot;)" />
    <mutant id="mutant_666" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) + len" to="(count) % len" />
    <mutant id="mutant_667" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="((int)(((position) - (size))))" to="(size)" />
    <mutant id="mutant_1014" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="destDir" />
    <mutant id="mutant_1498" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" from="(&quot;Size cannot be greater than Integer max value: &quot; + size)" to="size" />
    <mutant id="mutant_2345" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(firstGT + 1)" to="(firstGT - 1)" />
    <mutant id="mutant_1015" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="&quot;Bytes to skip must not be negative: &quot;" />
    <mutant id="mutant_1499" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is read-only&quot;)" to="(&quot;Destination \'&quot; + destFile)" />
    <mutant id="mutant_2346" viable="true" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="result" />
    <mutant id="mutant_1012" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="index + separatorAdd" to="index" />
    <mutant id="mutant_1496" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="(&quot;Destination \'&quot; / destFile)" />
    <mutant id="mutant_2343" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 3)" to="(offset * 3)" />
    <mutant id="mutant_1013" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) / &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_1497" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" />
    <mutant id="mutant_2344" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_TB)" to="(FileUtils.ONE_KB) / (FileUtils.ONE_TB)" />
    <mutant id="mutant_1010" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(FileSystemUtils.DF)" />
    <mutant id="mutant_1494" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;)" to="(&quot;Failed to copy full contents from \'&quot; + srcFile)" />
    <mutant id="mutant_2341" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="(k - j)" />
    <mutant id="mutant_1011" viable="false" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="((&quot;The byte count &quot; + result) - &quot; is too large to be converted to an int&quot;)" />
    <mutant id="mutant_1495" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="((&quot;Source \'&quot; + srcFile) / &quot;\' does not exist&quot;)" />
    <mutant id="mutant_2342" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="(position + c)" to="c" />
    <mutant id="mutant_1492" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_1493" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' cannot be written to&quot;)" to="&quot;\' cannot be written to&quot;" />
    <mutant id="mutant_2340" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path)" to="&quot;\&quot;&quot;" />
    <mutant id="mutant_660" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="(((value1 &amp; 255) &lt;&lt; 0) * ((value2 &amp; 255) &lt;&lt; 8))" />
    <mutant id="mutant_661" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="result" />
    <mutant id="mutant_662" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="j" />
    <mutant id="mutant_663" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;Directory \'&quot; + parent)" to="(&quot;Directory \'&quot; - parent)" />
    <mutant id="mutant_1018" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + fullFilenameToAdd)" to="(basePath / fullFilenameToAdd)" />
    <mutant id="mutant_2349" viable="true" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="((super.toString()) + &quot;[&quot;)" to="(super.toString())" />
    <mutant id="mutant_1019" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="((&quot;The filter[&quot; + i) + &quot;] is null&quot;)" to="((&quot;The filter[&quot; + i) % &quot;] is null&quot;)" />
    <mutant id="mutant_1016" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) / (caseSensitivity))" />
    <mutant id="mutant_2347" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent.getLevel()) + 1" to="(parent.getLevel()) * 1" />
    <mutant id="mutant_1017" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="firstCount + secondCount" to="firstCount * secondCount" />
    <mutant id="mutant_2348" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="(&quot;Destination \'&quot; % destDir)" />
    <mutant id="mutant_679" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="&quot;Unable to create directory &quot; + directory" to="&quot;Unable to create directory &quot; / directory" />
    <mutant id="mutant_675" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' is a directory&quot;)" to="(&quot;Destination \'&quot; + destFile)" />
    <mutant id="mutant_676" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' is a directory&quot;)" to="((&quot;Destination \'&quot; + destFile) % &quot;\' is a directory&quot;)" />
    <mutant id="mutant_677" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) % createDestDir)" />
    <mutant id="mutant_678" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="((&quot;Destination \'&quot; + destDir) * &quot;\' is not a directory&quot;)" />
    <mutant id="mutant_1490" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_1491" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_1003" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;)" to="((&quot;Buffer size &quot; + bufferSize) * &quot; is less than maxBytesPerChar &quot;)" />
    <mutant id="mutant_1487" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_2334" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart) + 1" to="((currentLastBytePos) - lineStart) - 1" />
    <mutant id="mutant_1004" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) + timeout)" to="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) * timeout)" />
    <mutant id="mutant_1488" viable="true" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_2335" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="(&quot;Destination directory \'&quot; % destDir)" />
    <mutant id="mutant_1001" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;)" to="((&quot;File &quot; + directory) / &quot; exists and is &quot;)" />
    <mutant id="mutant_1485" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="(i + 2)" />
    <mutant id="mutant_2332" viable="false" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="(&quot;The byte count &quot; * result)" />
    <mutant id="mutant_1002" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) + &quot;]&quot;" to="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) % &quot;]&quot;" />
    <mutant id="mutant_1486" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; does not exist&quot;" to="directory - &quot; does not exist&quot;" />
    <mutant id="mutant_2333" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="(&quot;Command line \'&quot; * (FileSystemUtils.DF))" />
    <mutant id="mutant_1483" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len + 1" to="1" />
    <mutant id="mutant_2330" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="((currentBuffer.length) % inBufferPos)" />
    <mutant id="mutant_1000" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((srcDir.getCanonicalPath()) + (File.separator))" to="((srcDir.getCanonicalPath()) - (File.separator))" />
    <mutant id="mutant_1484" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 3)" to="(i * 3)" />
    <mutant id="mutant_2331" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(&quot;Marked position [&quot; + (mark))" to="(mark)" />
    <mutant id="mutant_1481" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; does not exist&quot;" to="directory * &quot; does not exist&quot;" />
    <mutant id="mutant_1482" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(data.length) - 1" to="(data.length) / 1" />
    <mutant id="mutant_671" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="&quot;, offset=&quot;" />
    <mutant id="mutant_672" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Cannot move directory: &quot; + srcDir)" to="&quot;Cannot move directory: &quot;" />
    <mutant id="mutant_673" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((&quot;XML prolog or ROOT element not found on first &quot; + offset) + &quot; bytes&quot;)" to="(&quot;XML prolog or ROOT element not found on first &quot; + offset)" />
    <mutant id="mutant_1009" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" />
    <mutant id="mutant_674" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 3)" to="i" />
    <mutant id="mutant_1007" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="size" />
    <mutant id="mutant_2338" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) + dstLen)" to="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) - dstLen)" />
    <mutant id="mutant_1008" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="(size % i)" />
    <mutant id="mutant_2339" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="(&quot;Not a directory: &quot; + directory)" to="(&quot;Not a directory: &quot; % directory)" />
    <mutant id="mutant_1005" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 0)" to="(offset / 0)" />
    <mutant id="mutant_1489" viable="false" in="?" from="1024 * 4" to="1024 / 4" />
    <mutant id="mutant_2336" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="(&quot;Marked position [&quot; + (mark))" />
    <mutant id="mutant_670" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 6)" to="(offset % 6)" />
    <mutant id="mutant_1006" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) - &quot;for path \'&quot;)" />
    <mutant id="mutant_2337" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="prefix % 1" />
  </mutants>
</mutation>
