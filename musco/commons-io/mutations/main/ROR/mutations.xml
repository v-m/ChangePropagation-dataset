<?xml version="1.0" encoding="UTF-8"?>
<mutation operator-id="ROR" parent="../../../smf.run.xml" name="main" config-file="mutations.xml" time="61962">
  <class-to-mutate />
  <mutants>
    <mutant id="mutant_569" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="(((charsRead) - (markedAt)) &gt;= (readAheadLimit))" to="(((charsRead) - (markedAt)) == (readAheadLimit))" />
    <mutant id="mutant_565" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(array[(size - 1)]) != separator" to="(array[(size - 1)]) &gt;= separator" />
    <mutant id="mutant_566" viable="true" in="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,int)" from="pattern == null" to="false" />
    <mutant id="mutant_567" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc != null)" to="false" />
    <mutant id="mutant_568" viable="false" in="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &gt; null" />
    <mutant id="mutant_561" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="b &gt;= 0" to="b &gt; 0" />
    <mutant id="mutant_562" viable="false" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="filename == null" to="filename &gt;= null" />
    <mutant id="mutant_563" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="actual != length" to="true" />
    <mutant id="mutant_564" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read()" from="b != (IOUtils.EOF)" to="b &lt; (IOUtils.EOF)" />
    <mutant id="mutant_560" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(IOUtils.EOF) == count" to="(IOUtils.EOF) &lt;= count" />
    <mutant id="mutant_576" viable="false" in="org.apache.commons.io.output.DeferredFileOutputStream(int,java.lang.String,java.lang.String,java.io.File)" from="prefix == null" to="prefix &gt;= null" />
    <mutant id="mutant_577" viable="false" in="org.apache.commons.io.input.BOMInputStream.skip(long)" from="((readFirstBytes()) &gt;= 0)" to="true" />
    <mutant id="mutant_578" viable="false" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="(httpContentType != null)" to="(httpContentType &gt; null)" />
    <mutant id="mutant_579" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="(IOUtils.SKIP_BYTE_BUFFER) == null" to="(IOUtils.SKIP_BYTE_BUFFER) &lt; null" />
    <mutant id="mutant_572" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(url != null)" to="(url &lt;= null)" />
    <mutant id="mutant_573" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="(max) &gt;= 0" to="(max) &lt; 0" />
    <mutant id="mutant_574" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(array[i]) == otherSeparator" to="(array[i]) != otherSeparator" />
    <mutant id="mutant_575" viable="false" in="org.apache.commons.io.monitor.FileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" from="file == null" to="file &lt; null" />
    <mutant id="mutant_570" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len == 1" to="false" />
    <mutant id="mutant_571" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter(long,boolean)" from="size &lt; 0" to="size &lt;= 0" />
    <mutant id="mutant_107" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(position) &gt; ((mark) + (readlimit))" to="(position) &gt;= ((mark) + (readlimit))" />
    <mutant id="mutant_108" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(this.cbuf.position()) &lt; (this.mark_cbuf)" to="(this.cbuf.position()) == (this.mark_cbuf)" />
    <mutant id="mutant_109" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOMCharsetName()" from="(byteOrderMark) == null" to="(byteOrderMark) &lt;= null" />
    <mutant id="mutant_103" viable="false" in="org.apache.commons.io.output.XmlStreamWriter.write(char[],int,int)" from="(xmlPrologWriter) != null" to="(xmlPrologWriter) &lt;= null" />
    <mutant id="mutant_587" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i &lt; n)" to="(i == n)" />
    <mutant id="mutant_104" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(file.canRead()) == false" to="false" />
    <mutant id="mutant_588" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(xmlProlog.length()) &gt;= 5" to="(xmlProlog.length()) &gt; 5" />
    <mutant id="mutant_105" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="c == (-1)" to="c &gt;= (-1)" />
    <mutant id="mutant_589" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(IOUtils.EOF) == count" to="(IOUtils.EOF) &lt; count" />
    <mutant id="mutant_106" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="i &gt;= 0" to="i &lt; 0" />
    <mutant id="mutant_1298" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((off + len) &gt; (b.length))" to="((off + len) != (b.length))" />
    <mutant id="mutant_1299" viable="false" in="org.apache.commons.io.input.BOMInputStream.skip(long)" from="((readFirstBytes()) &gt;= 0)" to="((readFirstBytes()) &lt;= 0)" />
    <mutant id="mutant_1296" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(this.cbuf.position()) != 0" to="(this.cbuf.position()) &lt; 0" />
    <mutant id="mutant_1297" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="k &lt; (buf.length())" to="k != (buf.length())" />
    <mutant id="mutant_1294" viable="false" in="org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)" from="charsetName == null" to="charsetName &gt;= null" />
    <mutant id="mutant_1295" viable="false" in="?" from="((osName.indexOf(&quot;hp-ux&quot;)) != (-1))" to="false" />
    <mutant id="mutant_583" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix == (FilenameUtils.NOT_FOUND)" to="posUnix &gt; (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_100" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="srcDir == null" to="srcDir &lt; null" />
    <mutant id="mutant_584" viable="true" in="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)" from="((doDelete(fileToDelete)) == false)" to="false" />
    <mutant id="mutant_101" viable="false" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)" from="(extension == null)" to="(extension &gt;= null)" />
    <mutant id="mutant_585" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="(xmlEnc != null)" to="false" />
    <mutant id="mutant_102" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)" from="(file.lastModified()) &gt; timeMillis" to="(file.lastModified()) &gt;= timeMillis" />
    <mutant id="mutant_586" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="((text.indexOf('?')) == (FilenameUtils.NOT_FOUND))" to="true" />
    <mutant id="mutant_580" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="((text.indexOf('*')) == (FilenameUtils.NOT_FOUND))" to="true" />
    <mutant id="mutant_581" viable="false" in="org.apache.commons.io.IOCase.checkCompareTo(java.lang.String,java.lang.String)" from="(str1 == null)" to="(str1 &lt;= null)" />
    <mutant id="mutant_582" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)" from="line != null" to="line &gt; null" />
    <mutant id="mutant_118" viable="true" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="(directoryFilter == null)" to="false" />
    <mutant id="mutant_119" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i == (prefix + 1))" to="(i &gt; (prefix + 1))" />
    <mutant id="mutant_114" viable="false" in="org.apache.commons.io.input.BOMInputStream.mark(int)" from="(firstBytes) == null" to="(firstBytes) != null" />
    <mutant id="mutant_598" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" from="((children.length) &gt; 1)" to="true" />
    <mutant id="mutant_115" viable="true" in="org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)" from="(running) == false" to="false" />
    <mutant id="mutant_599" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(len &lt; 0)" to="true" />
    <mutant id="mutant_116" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI).compareTo(BigInteger.ZERO)) &gt; 0" to="(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI).compareTo(BigInteger.ZERO)) == 0" />
    <mutant id="mutant_117" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.compare(java.io.File,java.io.File)" from="result != 0" to="result &lt; 0" />
    <mutant id="mutant_1292" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(filename == null)" to="false" />
    <mutant id="mutant_1293" viable="false" in="?" from="osName == null" to="osName != null" />
    <mutant id="mutant_1290" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="n &lt; 0" to="n != 0" />
    <mutant id="mutant_1291" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(srcDir.isDirectory()) == false" to="(srcDir.isDirectory()) &gt;= false" />
    <mutant id="mutant_1289" viable="true" in="org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()" from="(prefix) != null" to="false" />
    <mutant id="mutant_1287" viable="false" in="org.apache.commons.io.EndianUtils.read(java.io.InputStream)" from="(IOUtils.EOF) == value" to="(IOUtils.EOF) &gt; value" />
    <mutant id="mutant_1288" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target == (-1)" to="target &lt; (-1)" />
    <mutant id="mutant_1285" viable="false" in="org.apache.commons.io.output.StringBuilderWriter.write(char[],int,int)" from="value != null" to="value &gt; null" />
    <mutant id="mutant_1286" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="i &lt;= endIndex" to="i &gt;= endIndex" />
    <mutant id="mutant_1283" viable="true" in="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" from="(filter1 == null)" to="(filter1 != null)" />
    <mutant id="mutant_1284" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="(position) == (size)" to="(position) &gt;= (size)" />
    <mutant id="mutant_110" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM()" from="(getBOM()) != null" to="true" />
    <mutant id="mutant_594" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="no &gt; 0" to="no &lt; 0" />
    <mutant id="mutant_111" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target == '\n'" to="target &lt; '\n'" />
    <mutant id="mutant_595" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="(position) &gt; (size)" to="(position) == (size)" />
    <mutant id="mutant_112" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="c &lt; (files.length)" to="false" />
    <mutant id="mutant_596" viable="true" in="org.apache.commons.io.IOCase.checkCompareTo(java.lang.String,java.lang.String)" from="(str2 == null)" to="false" />
    <mutant id="mutant_113" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver.toString()" from="(fileFilter) != null" to="(fileFilter) &gt;= null" />
    <mutant id="mutant_597" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="result &gt; (Integer.MAX_VALUE)" to="true" />
    <mutant id="mutant_590" viable="false" in="org.apache.commons.io.input.BOMInputStream.read()" from="b &gt;= 0" to="b &lt; 0" />
    <mutant id="mutant_591" viable="false" in="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)" from="count &gt; (Integer.MAX_VALUE)" to="count &lt; (Integer.MAX_VALUE)" />
    <mutant id="mutant_592" viable="false" in="org.apache.commons.io.filefilter.NameFileFilter.toString()" from="(names) != null" to="(names) &lt;= null" />
    <mutant id="mutant_593" viable="false" in="org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)" from="data != null" to="data &lt;= null" />
    <mutant id="mutant_129" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="(byteOrderMark) != null" to="(byteOrderMark) == null" />
    <mutant id="mutant_125" viable="false" in="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="suffixes == null" to="suffixes &gt; null" />
    <mutant id="mutant_126" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="destDir == null" to="false" />
    <mutant id="mutant_127" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((buf.charAt(k)) == '.')" to="((buf.charAt(k)) &gt; '.')" />
    <mutant id="mutant_128" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip &lt; 0" to="false" />
    <mutant id="mutant_121" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(lines.size()) &lt; 2" to="(lines.size()) == 2" />
    <mutant id="mutant_122" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="toSkip &lt; 0" to="toSkip &gt; 0" />
    <mutant id="mutant_123" viable="false" in="org.apache.commons.io.input.NullReader.read()" from="(position) == (size)" to="(position) &gt;= (size)" />
    <mutant id="mutant_124" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="len &gt; size" to="len &gt;= size" />
    <mutant id="mutant_120" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(charset == (Charsets.UTF_16LE))" to="(charset &gt; (Charsets.UTF_16LE))" />
    <mutant id="mutant_136" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(line.length()) &gt; 0" to="(line.length()) &lt;= 0" />
    <mutant id="mutant_137" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(destDir.canWrite()) == false" to="(destDir.canWrite()) &lt; false" />
    <mutant id="mutant_138" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((off + len) &gt; (b.length))" to="true" />
    <mutant id="mutant_139" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="false" />
    <mutant id="mutant_132" viable="true" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="result &gt; (Integer.MAX_VALUE)" to="result &gt;= (Integer.MAX_VALUE)" />
    <mutant id="mutant_133" viable="true" in="org.apache.commons.io.filefilter.WildcardFileFilter.toString()" from="i &gt; 0" to="true" />
    <mutant id="mutant_134" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((srcDir.isDirectory()) == false)" to="((srcDir.isDirectory()) &lt; false)" />
    <mutant id="mutant_135" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="len == 0" to="true" />
    <mutant id="mutant_130" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="cTEnc == null" to="cTEnc &lt; null" />
    <mutant id="mutant_131" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="j &lt; (data.length)" to="false" />
    <mutant id="mutant_147" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="len &lt; 0" to="true" />
    <mutant id="mutant_148" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(xmlProlog.length()) &gt;= (XmlStreamWriter.BUFFER_SIZE)" to="(xmlProlog.length()) == (XmlStreamWriter.BUFFER_SIZE)" />
    <mutant id="mutant_149" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(len == 2)" to="true" />
    <mutant id="mutant_143" viable="false" in="org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence)" from="charSequence != null" to="charSequence &lt;= null" />
    <mutant id="mutant_144" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="(IOUtils.SKIP_CHAR_BUFFER) == null" to="(IOUtils.SKIP_CHAR_BUFFER) &gt; null" />
    <mutant id="mutant_145" viable="false" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="prefixes == null" to="prefixes &gt; null" />
    <mutant id="mutant_146" viable="false" in="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" from="i &lt; (bom.length())" to="i &lt;= (bom.length())" />
    <mutant id="mutant_140" viable="false" in="org.apache.commons.io.FileUtils.getFile(java.io.File,java.lang.String[])" from="names == null" to="names &lt;= null" />
    <mutant id="mutant_141" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="offset != size" to="offset &lt;= size" />
    <mutant id="mutant_142" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="c &lt; (files.length)" to="c &gt; (files.length)" />
    <mutant id="mutant_158" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="path == null" to="path &gt;= null" />
    <mutant id="mutant_159" viable="false" in="org.apache.commons.io.FileUtils.waitFor(java.io.File,int)" from="(tick++) &gt;= 10" to="(tick++) != 10" />
    <mutant id="mutant_154" viable="false" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="(file.getParentFile()) != null" to="(file.getParentFile()) &gt; null" />
    <mutant id="mutant_155" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc != null)" to="(xmlGuessEnc &gt;= null)" />
    <mutant id="mutant_156" viable="false" in="org.apache.commons.io.IOUtils.buffer(java.io.OutputStream,int)" from="outputStream == null" to="outputStream != null" />
    <mutant id="mutant_157" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="(byteOrderMark.length()) &lt; (firstBytes.length)" to="(byteOrderMark.length()) &gt;= (firstBytes.length)" />
    <mutant id="mutant_150" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="actual != length" to="actual &lt; length" />
    <mutant id="mutant_151" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((path.length()) &gt; 0)" to="((path.length()) &lt;= 0)" />
    <mutant id="mutant_152" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="length &gt; position" to="length &lt;= position" />
    <mutant id="mutant_153" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="i &lt; (prefixes.length)" to="i != (prefixes.length)" />
    <mutant id="mutant_169" viable="false" in="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)" from="(file != null)" to="(file &lt; null)" />
    <mutant id="mutant_160" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="i &lt; (prefixes.length)" to="i &gt; (prefixes.length)" />
    <mutant id="mutant_165" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="(position) &gt; (size)" to="(position) &lt; (size)" />
    <mutant id="mutant_166" viable="true" in="org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)" from="index == (FilenameUtils.NOT_FOUND)" to="index != (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_167" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="((url.indexOf('%')) &gt;= 0)" to="true" />
    <mutant id="mutant_168" viable="false" in="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" from="i &lt; (bom.length())" to="i &gt;= (bom.length())" />
    <mutant id="mutant_161" viable="false" in="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" from="path == null" to="path &lt;= null" />
    <mutant id="mutant_162" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="i &lt; (urls.length)" to="true" />
    <mutant id="mutant_163" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix == (FilenameUtils.NOT_FOUND)" to="true" />
    <mutant id="mutant_164" viable="false" in="org.apache.commons.io.filefilter.AndFileFilter(java.util.List)" from="fileFilters == null" to="fileFilters &gt;= null" />
    <mutant id="mutant_170" viable="false" in="org.apache.commons.io.output.ChunkedOutputStream.write(byte[],int,int)" from="bytes &gt; 0" to="false" />
    <mutant id="mutant_171" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i &lt; 0" to="true" />
    <mutant id="mutant_176" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off &gt; (b.length))" to="(off &gt;= (b.length))" />
    <mutant id="mutant_177" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)" from="(file != null)" to="true" />
    <mutant id="mutant_178" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" from="(files.length) &gt; 0" to="(files.length) &lt;= 0" />
    <mutant id="mutant_179" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posWin == (FilenameUtils.NOT_FOUND))" to="false" />
    <mutant id="mutant_172" viable="false" in="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" from="data != null" to="data &gt;= null" />
    <mutant id="mutant_173" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.util.Date)" from="date == null" to="true" />
    <mutant id="mutant_174" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="k &lt; 16" to="k &gt; 16" />
    <mutant id="mutant_175" viable="false" in="org.apache.commons.io.input.BOMInputStream.readFirstBytes()" from="(fbIndex) &lt; (fbLength)" to="(fbIndex) &lt;= (fbLength)" />
    <mutant id="mutant_180" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((buf.charAt(k)) == ',')" to="false" />
    <mutant id="mutant_181" viable="false" in="org.apache.commons.io.filefilter.AndFileFilter.toString()" from="filter == null" to="filter &lt;= null" />
    <mutant id="mutant_182" viable="false" in="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)" from="(-1) != (n = input.read(buffer))" to="true" />
    <mutant id="mutant_187" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posUnix == 2)" to="(posUnix &lt;= 2)" />
    <mutant id="mutant_188" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="(b &gt;= 0)" to="false" />
    <mutant id="mutant_189" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()" from="target == '\n'" to="target &lt; '\n'" />
    <mutant id="mutant_183" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="(position) == (size)" to="false" />
    <mutant id="mutant_184" viable="true" in="org.apache.commons.io.IOCase.checkCompareTo(java.lang.String,java.lang.String)" from="(str2 == null)" to="(str2 != null)" />
    <mutant id="mutant_185" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="prefix &lt; 0" to="prefix &lt;= 0" />
    <mutant id="mutant_186" viable="true" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="false" />
    <mutant id="mutant_190" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="charset == (Charsets.UTF_16)" to="charset &lt;= (Charsets.UTF_16)" />
    <mutant id="mutant_191" viable="false" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])" from="(extensions == null)" to="(extensions &gt; null)" />
    <mutant id="mutant_192" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="prevChar != '*'" to="prevChar &gt; '*'" />
    <mutant id="mutant_193" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read()" from="((pos) &gt;= (max))" to="true" />
    <mutant id="mutant_198" viable="false" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(backtrack.size()) &gt; 0" to="true" />
    <mutant id="mutant_199" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="line2 == null" to="true" />
    <mutant id="mutant_194" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="(buffer.length()) != 0" to="false" />
    <mutant id="mutant_195" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="bytesCopied == 0" to="true" />
    <mutant id="mutant_196" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="(position) &gt; (size)" to="(position) &lt; (size)" />
    <mutant id="mutant_197" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="((readed = input.read(data, offset, (size - offset))) != (IOUtils.EOF))" to="((readed = input.read(data, offset, (size - offset))) &gt; (IOUtils.EOF))" />
    <mutant id="mutant_900" viable="true" in="org.apache.commons.io.output.DemuxOutputStream.write(int)" from="null != output" to="null == output" />
    <mutant id="mutant_901" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="remaining &gt; 0" to="remaining != 0" />
    <mutant id="mutant_902" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="i &lt; (firstBytes.length)" to="false" />
    <mutant id="mutant_907" viable="false" in="org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence)" from="charSequence != null" to="charSequence &lt; null" />
    <mutant id="mutant_908" viable="false" in="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" from="(filter1 == null)" to="(filter1 &lt; null)" />
    <mutant id="mutant_909" viable="false" in="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])" from="wildcards == null" to="wildcards &lt;= null" />
    <mutant id="mutant_903" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="prefixes == null" to="prefixes != null" />
    <mutant id="mutant_904" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="stream == null" to="stream &gt; null" />
    <mutant id="mutant_905" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="(len &gt; 0)" to="(len != 0)" />
    <mutant id="mutant_906" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(c != '.')" to="(c &lt; '.')" />
    <mutant id="mutant_910" viable="true" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)" from="(extension == null)" to="true" />
    <mutant id="mutant_911" viable="false" in="org.apache.commons.io.input.BoundedInputStream.available()" from="((max) &gt;= 0)" to="false" />
    <mutant id="mutant_912" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="len &lt; 0" to="false" />
    <mutant id="mutant_913" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="(line1 != null)" to="(line1 &gt; null)" />
    <mutant id="mutant_918" viable="false" in="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable)" from="closeable != null" to="closeable == null" />
    <mutant id="mutant_919" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable,T)" from="file == null" to="file &lt;= null" />
    <mutant id="mutant_914" viable="false" in="org.apache.commons.io.filefilter.RegexFileFilter(java.util.regex.Pattern)" from="pattern == null" to="pattern &gt;= null" />
    <mutant id="mutant_915" viable="false" in="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" from="file == null" to="true" />
    <mutant id="mutant_916" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="remain &gt; 0" to="true" />
    <mutant id="mutant_917" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)" from="(file != null)" to="false" />
    <mutant id="mutant_921" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)" from="(rootEntry.getFile()) == null" to="(rootEntry.getFile()) &lt;= null" />
    <mutant id="mutant_922" viable="false" in="org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer)" from="data != null" to="data &gt;= null" />
    <mutant id="mutant_923" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="line2 == null" to="line2 != null" />
    <mutant id="mutant_924" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(no) &gt; 1" to="(no) &lt; 1" />
    <mutant id="mutant_920" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length &lt; 0" to="length != 0" />
    <mutant id="mutant_929" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" from="data != null" to="true" />
    <mutant id="mutant_925" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size == 0" to="size &lt;= 0" />
    <mutant id="mutant_926" viable="true" in="org.apache.commons.io.filefilter.AndFileFilter.toString()" from="i &lt; (fileFilters.size())" to="true" />
    <mutant id="mutant_927" viable="true" in="org.apache.commons.io.ByteOrderMark.toString()" from="i &gt; 0" to="i != 0" />
    <mutant id="mutant_928" viable="true" in="org.apache.commons.io.monitor.FileAlterationMonitor.addObserver(org.apache.commons.io.monitor.FileAlterationObserver)" from="observer != null" to="false" />
    <mutant id="mutant_1311" viable="true" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="wildcards == null" to="wildcards != null" />
    <mutant id="mutant_1312" viable="false" in="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])" from="((boms.length) == 0)" to="((boms.length) &lt;= 0)" />
    <mutant id="mutant_1310" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 2)]) == '.')" to="((array[(i - 2)]) &lt;= '.')" />
    <mutant id="mutant_1319" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read()" from="b != (IOUtils.EOF)" to="b == (IOUtils.EOF)" />
    <mutant id="mutant_1317" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="length &gt; 0" to="length &gt;= 0" />
    <mutant id="mutant_1318" viable="false" in="org.apache.commons.io.output.LockableFileWriter.initWriter(java.io.File,java.nio.charset.Charset,boolean)" from="fileExistedAlready == false" to="fileExistedAlready &gt;= false" />
    <mutant id="mutant_1315" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="toSkip &lt; 0" to="toSkip &gt;= 0" />
    <mutant id="mutant_1316" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)" from="i &lt; 8" to="i &gt; 8" />
    <mutant id="mutant_1313" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="(line1 != null)" to="(line1 &lt;= null)" />
    <mutant id="mutant_1314" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(newLineMatchByteCount = getNewLineMatchByteCount(data, i)) &gt; 0" to="(newLineMatchByteCount = getNewLineMatchByteCount(data, i)) &lt; 0" />
    <mutant id="mutant_932" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(i &lt; (avoidNewlineSplitBufferSize))" to="(i != (avoidNewlineSplitBufferSize))" />
    <mutant id="mutant_933" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="((lastModified) != origLastModified)" to="((lastModified) == origLastModified)" />
    <mutant id="mutant_934" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="c &lt; (files.length)" to="c &lt;= (files.length)" />
    <mutant id="mutant_935" viable="false" in="org.apache.commons.io.monitor.FileAlterationMonitor.start()" from="(threadFactory) != null" to="(threadFactory) &lt; null" />
    <mutant id="mutant_930" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver.toString()" from="(fileFilter) != null" to="(fileFilter) &lt;= null" />
    <mutant id="mutant_931" viable="false" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(wildcardMatcher == null)" to="(wildcardMatcher &lt; null)" />
    <mutant id="mutant_936" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)" from="filter == null" to="true" />
    <mutant id="mutant_937" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="prefix &lt; 0" to="false" />
    <mutant id="mutant_938" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(srcDir.exists()) == false" to="(srcDir.exists()) &lt; false" />
    <mutant id="mutant_939" viable="true" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename1 == null)" to="(filename1 != null)" />
    <mutant id="mutant_1300" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" from="(files.length) &gt; 0" to="true" />
    <mutant id="mutant_1301" viable="true" in="org.apache.commons.io.output.DemuxOutputStream.write(int)" from="null != output" to="false" />
    <mutant id="mutant_1308" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.compare(java.io.File,java.io.File)" from="result != 0" to="false" />
    <mutant id="mutant_1309" viable="true" in="org.apache.commons.io.comparator.NameFileComparator(org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="true" />
    <mutant id="mutant_1306" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j &lt; 0" to="j &lt;= 0" />
    <mutant id="mutant_1307" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="destDir == null" to="destDir &gt; null" />
    <mutant id="mutant_1304" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.skip(long)" from="((available()) &gt; 0)" to="((available()) == 0)" />
    <mutant id="mutant_1305" viable="false" in="org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)" from="data != null" to="true" />
    <mutant id="mutant_1302" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.flush()" from="(writer) != null" to="false" />
    <mutant id="mutant_1303" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter(long,boolean)" from="size &lt; 0" to="true" />
    <mutant id="mutant_943" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="len &gt; 0" to="len == 0" />
    <mutant id="mutant_944" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="separator == (FilenameUtils.SYSTEM_SEPARATOR)" to="separator &lt; (FilenameUtils.SYSTEM_SEPARATOR)" />
    <mutant id="mutant_945" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(url.getProtocol().equals(&quot;file&quot;)) == false" to="(url.getProtocol().equals(&quot;file&quot;)) &lt;= false" />
    <mutant id="mutant_946" viable="false" in="org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)" from="dirFilter == null" to="dirFilter &gt;= null" />
    <mutant id="mutant_940" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(xmlProlog.length()) &gt;= (XmlStreamWriter.BUFFER_SIZE)" to="(xmlProlog.length()) &gt; (XmlStreamWriter.BUFFER_SIZE)" />
    <mutant id="mutant_941" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="directory == null" to="directory &gt; null" />
    <mutant id="mutant_942" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(no) == 1" to="(no) &lt; 1" />
    <mutant id="mutant_947" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="null != exception" to="true" />
    <mutant id="mutant_948" viable="false" in="org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)" from="file1Exists != (file2.exists())" to="true" />
    <mutant id="mutant_949" viable="true" in="org.apache.commons.io.output.ProxyWriter.write(char[])" from="chr != null" to="false" />
    <mutant id="mutant_954" viable="false" in="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" from="(filter2 == null)" to="(filter2 &lt; null)" />
    <mutant id="mutant_955" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="wcsIdx &lt; (wcs.length)" to="wcsIdx != (wcs.length)" />
    <mutant id="mutant_956" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="secondCount &lt; 0" to="false" />
    <mutant id="mutant_957" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="(line1 != null)" to="(line1 &gt;= null)" />
    <mutant id="mutant_950" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(offset &lt; size)" to="(offset == size)" />
    <mutant id="mutant_951" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="destFile == null" to="destFile &lt;= null" />
    <mutant id="mutant_952" viable="true" in="org.apache.commons.io.monitor.FileAlterationMonitor.start()" from="(threadFactory) != null" to="(threadFactory) == null" />
    <mutant id="mutant_953" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)" from="(caseSensitivity == null)" to="true" />
    <mutant id="mutant_958" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader.readLine()" from="line == null" to="true" />
    <mutant id="mutant_959" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(idx) &gt;= (charSequence.length())" to="(idx) == (charSequence.length())" />
    <mutant id="mutant_965" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="k &lt; chars_read" to="k &lt;= chars_read" />
    <mutant id="mutant_966" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,long)" from="j &lt; 8" to="j != 8" />
    <mutant id="mutant_967" viable="false" in="org.apache.commons.io.FileUtils.toURLs(java.io.File[])" from="i &lt; (urls.length)" to="i &gt;= (urls.length)" />
    <mutant id="mutant_968" viable="false" in="org.apache.commons.io.input.NullReader.read()" from="(position) == (size)" to="(position) &lt; (size)" />
    <mutant id="mutant_961" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="((comparator.compare(entry.getFile(), files[c])) == 0)" to="((comparator.compare(entry.getFile(), files[c])) &lt;= 0)" />
    <mutant id="mutant_962" viable="false" in="?" from="((osName.indexOf(&quot;sun os&quot;)) != (-1))" to="((osName.indexOf(&quot;sun os&quot;)) &lt;= (-1))" />
    <mutant id="mutant_963" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="(IOUtils.SKIP_CHAR_BUFFER) == null" to="(IOUtils.SKIP_CHAR_BUFFER) != null" />
    <mutant id="mutant_964" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="length &gt; 0" to="length != 0" />
    <mutant id="mutant_969" viable="true" in="org.apache.commons.io.output.StringBuilderWriter.write(java.lang.String)" from="value != null" to="true" />
    <mutant id="mutant_1355" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="c == (-1)" to="c &lt;= (-1)" />
    <mutant id="mutant_1356" viable="false" in="org.apache.commons.io.input.BOMInputStream$1.compare(org.apache.commons.io.ByteOrderMark,org.apache.commons.io.ByteOrderMark)" from="len2 &gt; len1" to="len2 &lt; len1" />
    <mutant id="mutant_1353" viable="true" in="org.apache.commons.io.input.XmlStreamReader.isTextXml(java.lang.String)" from="(mime != null)" to="false" />
    <mutant id="mutant_1354" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posWin == 2)" to="(posWin &gt; 2)" />
    <mutant id="mutant_1351" viable="false" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent) == null" to="(parent) &gt; null" />
    <mutant id="mutant_1352" viable="false" in="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" from="(filter1 == null)" to="(filter1 &gt; null)" />
    <mutant id="mutant_1350" viable="false" in="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" from="data != null" to="data &lt;= null" />
    <mutant id="mutant_960" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()" from="(written) &gt; (threshold)" to="true" />
    <mutant id="mutant_1359" viable="false" in="org.apache.commons.io.input.TeeInputStream.read(byte[])" from="n != (IOUtils.EOF)" to="n == (IOUtils.EOF)" />
    <mutant id="mutant_1357" viable="false" in="org.apache.commons.io.filefilter.WildcardFileFilter.toString()" from="(wildcards) != null" to="(wildcards) &gt;= null" />
    <mutant id="mutant_1358" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((data[(k + j)]) &gt;= ' ')" to="((data[(k + j)]) &gt; ' ')" />
    <mutant id="mutant_976" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="line != null" to="true" />
    <mutant id="mutant_977" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(ch0 &gt;= 'A')" to="(ch0 != 'A')" />
    <mutant id="mutant_978" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((destDir.isDirectory()) == false)" to="((destDir.isDirectory()) &lt; false)" />
    <mutant id="mutant_979" viable="true" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="index == (FilenameUtils.NOT_FOUND)" to="false" />
    <mutant id="mutant_972" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((off + len) &gt; (b.length))" to="false" />
    <mutant id="mutant_973" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i == (size - 1)" to="i &gt;= (size - 1)" />
    <mutant id="mutant_974" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="((comparator.compare(entry.getFile(), files[c])) &gt; 0)" to="((comparator.compare(entry.getFile(), files[c])) != 0)" />
    <mutant id="mutant_975" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(c &lt; (files.length))" to="(c &lt;= (files.length))" />
    <mutant id="mutant_1344" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="bytes &lt; 0" to="false" />
    <mutant id="mutant_1345" viable="true" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="((num = reader.read(inbuf)) != (IOUtils.EOF))" to="false" />
    <mutant id="mutant_1342" viable="false" in="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)" from="count &gt; (Integer.MAX_VALUE)" to="count == (Integer.MAX_VALUE)" />
    <mutant id="mutant_1343" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(backtrack.size()) &gt; 0" to="(backtrack.size()) &lt; 0" />
    <mutant id="mutant_1340" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(mark) &lt; 0" to="(mark) &gt; 0" />
    <mutant id="mutant_1341" viable="false" in="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(IOUtils.EOF) == count" to="true" />
    <mutant id="mutant_970" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((buf.charAt(k)) == ',')" to="((buf.charAt(k)) &lt; ',')" />
    <mutant id="mutant_971" viable="false" in="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])" from="delegates == null" to="delegates &gt;= null" />
    <mutant id="mutant_1348" viable="false" in="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)" from="(file != null)" to="(file &gt;= null)" />
    <mutant id="mutant_1349" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="size == 0" to="size != 0" />
    <mutant id="mutant_1346" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()" from="target == '\r'" to="target &gt;= '\r'" />
    <mutant id="mutant_1347" viable="false" in="?" from="(osName.indexOf(&quot;windows&quot;)) != (-1)" to="false" />
    <mutant id="mutant_503" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="filter == null" to="filter &gt; null" />
    <mutant id="mutant_987" viable="false" in="org.apache.commons.io.LineIterator.hasNext()" from="(cachedLine) != null" to="(cachedLine) &lt;= null" />
    <mutant id="mutant_504" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity != null" />
    <mutant id="mutant_988" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator(org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &gt;= null" />
    <mutant id="mutant_505" viable="false" in="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.nio.charset.Charset)" from="data != null" to="false" />
    <mutant id="mutant_989" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posUnix == 2)" to="false" />
    <mutant id="mutant_506" viable="false" in="org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)" from="charsetName == null" to="true" />
    <mutant id="mutant_983" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI).compareTo(BigInteger.ZERO)) &gt; 0" to="false" />
    <mutant id="mutant_500" viable="false" in="org.apache.commons.io.IOUtils.closeQuietly(java.net.Socket)" from="sock != null" to="false" />
    <mutant id="mutant_984" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="(firstBytes[i]) &lt; 0" to="true" />
    <mutant id="mutant_501" viable="false" in="org.apache.commons.io.IOUtils.buffer(java.io.OutputStream,int)" from="outputStream == null" to="outputStream &gt;= null" />
    <mutant id="mutant_985" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(filename == null)" to="(filename != null)" />
    <mutant id="mutant_502" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable,T)" from="files != null" to="files &gt; null" />
    <mutant id="mutant_986" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="toSkip &lt; 0" to="toSkip &gt; 0" />
    <mutant id="mutant_507" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posUnix == 2)" to="(posUnix != 2)" />
    <mutant id="mutant_508" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="input1 == input2" to="input1 &lt;= input2" />
    <mutant id="mutant_509" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="ch != ch2" to="false" />
    <mutant id="mutant_1333" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((xmlProlog.length()) + len) &gt; (XmlStreamWriter.BUFFER_SIZE)" to="((xmlProlog.length()) + len) != (XmlStreamWriter.BUFFER_SIZE)" />
    <mutant id="mutant_1334" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)" from="rootEntry == null" to="rootEntry &lt;= null" />
    <mutant id="mutant_1331" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="i &lt; (firstBytes.length)" to="i &gt; (firstBytes.length)" />
    <mutant id="mutant_1332" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="(position) == (size)" to="true" />
    <mutant id="mutant_1330" viable="false" in="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &lt; null" />
    <mutant id="mutant_980" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,long)" from="file == null" to="file &gt;= null" />
    <mutant id="mutant_981" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="(firstBytes) == null" to="(firstBytes) &gt; null" />
    <mutant id="mutant_1339" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String,long)" from="offset &lt; 0" to="offset == 0" />
    <mutant id="mutant_982" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((srcFiles.length) &gt; 0)" to="((srcFiles.length) == 0)" />
    <mutant id="mutant_1337" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="k &lt; (buf.length())" to="k &gt; (buf.length())" />
    <mutant id="mutant_1338" viable="true" in="org.apache.commons.io.ByteOrderMark.getBytes()" from="i &lt; (bytes.length)" to="i &gt;= (bytes.length)" />
    <mutant id="mutant_1335" viable="false" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="wildcards == null" to="wildcards &gt;= null" />
    <mutant id="mutant_1336" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="len &gt; (filename.length())" to="true" />
    <mutant id="mutant_514" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="(bomEnc != null)" to="(bomEnc &lt; null)" />
    <mutant id="mutant_998" viable="true" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])" from="filename == null" to="filename != null" />
    <mutant id="mutant_515" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,long)" from="file == null" to="true" />
    <mutant id="mutant_999" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 1)]) == separator)" to="false" />
    <mutant id="mutant_516" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="result &gt; 0" to="result != 0" />
    <mutant id="mutant_517" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posWin == (FilenameUtils.NOT_FOUND)" to="false" />
    <mutant id="mutant_510" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(length &lt; 0)" to="false" />
    <mutant id="mutant_994" viable="false" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="directoryFilter != null" to="directoryFilter &lt;= null" />
    <mutant id="mutant_511" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="ch1 == ':'" to="ch1 != ':'" />
    <mutant id="mutant_995" viable="true" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="(bytes[i]) != (bom.get(i))" to="false" />
    <mutant id="mutant_512" viable="false" in="?" from="((osName.indexOf(&quot;linux&quot;)) != (-1))" to="((osName.indexOf(&quot;linux&quot;)) == (-1))" />
    <mutant id="mutant_996" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity != null" />
    <mutant id="mutant_513" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="remain &gt; (FileUtils.FILE_COPY_BUFFER_SIZE)" to="remain &lt;= (FileUtils.FILE_COPY_BUFFER_SIZE)" />
    <mutant id="mutant_997" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)" from="filter == null" to="filter &gt;= null" />
    <mutant id="mutant_518" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="(childDepth &lt;= (depthLimit))" to="(childDepth &gt;= (depthLimit))" />
    <mutant id="mutant_519" viable="false" in="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,int)" from="pattern == null" to="pattern &gt;= null" />
    <mutant id="mutant_1322" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)" from="input1 == input2" to="input1 &lt; input2" />
    <mutant id="mutant_1323" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="firstCount &gt; 0" to="firstCount &lt; 0" />
    <mutant id="mutant_1320" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 1)]) == separator)" to="((array[(i - 1)]) &lt; separator)" />
    <mutant id="mutant_1321" viable="false" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(encoding) != null" to="(encoding) &gt;= null" />
    <mutant id="mutant_990" viable="true" in="org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)" from="(running) == false" to="(running) != false" />
    <mutant id="mutant_991" viable="true" in="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)" from="len &gt; 0" to="len &lt; 0" />
    <mutant id="mutant_992" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="input1 == input2" to="input1 &lt;= input2" />
    <mutant id="mutant_1328" viable="false" in="org.apache.commons.io.input.DemuxInputStream.read()" from="null != input" to="null &gt; input" />
    <mutant id="mutant_993" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="guessedEnc != null" to="guessedEnc &lt; null" />
    <mutant id="mutant_1329" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])" from="files == null" to="false" />
    <mutant id="mutant_1326" viable="true" in="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,int)" from="pattern == null" to="pattern != null" />
    <mutant id="mutant_1327" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="destDir == null" to="destDir &gt;= null" />
    <mutant id="mutant_1324" viable="true" in="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])" from="wildcards == null" to="true" />
    <mutant id="mutant_1325" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(mark) &lt; 0" to="false" />
    <mutant id="mutant_525" viable="false" in="org.apache.commons.io.FileUtils.isSymlink(java.io.File)" from="(file.getParent()) == null" to="true" />
    <mutant id="mutant_526" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="i &gt;= 0" to="i == 0" />
    <mutant id="mutant_527" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="(position) &gt; (size)" to="false" />
    <mutant id="mutant_528" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="result &gt; (Integer.MAX_VALUE)" to="result == (Integer.MAX_VALUE)" />
    <mutant id="mutant_521" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip &lt; 0" to="true" />
    <mutant id="mutant_522" viable="false" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="wildcard == null" to="wildcard &gt; null" />
    <mutant id="mutant_523" viable="false" in="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" from="data != null" to="true" />
    <mutant id="mutant_524" viable="false" in="org.apache.commons.io.filefilter.EmptyFileFilter.accept(java.io.File)" from="(files == null)" to="(files &gt; null)" />
    <mutant id="mutant_529" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="destFile == null" to="destFile &gt;= null" />
    <mutant id="mutant_1399" viable="false" in="?" from="((osName.indexOf(&quot;hp-ux&quot;)) != (-1))" to="((osName.indexOf(&quot;hp-ux&quot;)) &gt;= (-1))" />
    <mutant id="mutant_1397" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="(position) == (size)" to="false" />
    <mutant id="mutant_1398" viable="false" in="org.apache.commons.io.input.XmlStreamReader.isTextXml(java.lang.String)" from="(mime != null)" to="(mime &lt; null)" />
    <mutant id="mutant_1395" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="(reader == null)" to="(reader &lt; null)" />
    <mutant id="mutant_1396" viable="false" in="org.apache.commons.io.output.StringBuilderWriter.write(char[],int,int)" from="value != null" to="value &gt;= null" />
    <mutant id="mutant_1393" viable="false" in="?" from="((osName.indexOf(&quot;solaris&quot;)) != (-1))" to="false" />
    <mutant id="mutant_1394" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" from="line != null" to="line &gt;= null" />
    <mutant id="mutant_520" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read(byte[])" from="bts != null" to="true" />
    <mutant id="mutant_536" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(wcsIdx == (wcs.length))" to="true" />
    <mutant id="mutant_537" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="leftOverOfLastFilePart != null" to="true" />
    <mutant id="mutant_538" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="(byteOrderMark) != null" to="false" />
    <mutant id="mutant_539" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="inBufferPos == (currentBuffer.length)" to="inBufferPos &lt;= (currentBuffer.length)" />
    <mutant id="mutant_532" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((destFile.canWrite()) == false)" to="((destFile.canWrite()) &gt;= false)" />
    <mutant id="mutant_533" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="toSkip &lt; 0" to="toSkip != 0" />
    <mutant id="mutant_534" viable="false" in="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])" from="delegates == null" to="delegates &lt;= null" />
    <mutant id="mutant_535" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="no &gt; 0" to="no != 0" />
    <mutant id="mutant_1391" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="srcDir == null" to="srcDir != null" />
    <mutant id="mutant_1392" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(url.getProtocol().equals(&quot;file&quot;)) == false" to="(url.getProtocol().equals(&quot;file&quot;)) != false" />
    <mutant id="mutant_1390" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)" from="(fileFilter) != null" to="(fileFilter) &gt; null" />
    <mutant id="mutant_1388" viable="false" in="org.apache.commons.io.input.BoundedInputStream.available()" from="((max) &gt;= 0)" to="((max) != 0)" />
    <mutant id="mutant_1389" viable="false" in="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" from="filename == null" to="filename &lt;= null" />
    <mutant id="mutant_1386" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read(byte[])" from="bts != null" to="bts &gt;= null" />
    <mutant id="mutant_1387" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="maxBytesPerChar == 1.0F" to="maxBytesPerChar &gt;= 1.0F" />
    <mutant id="mutant_1384" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="srcFile == null" to="srcFile &gt; null" />
    <mutant id="mutant_1385" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="length &lt; position" to="length == position" />
    <mutant id="mutant_1382" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[i]) == separator)" to="((array[i]) &gt;= separator)" />
    <mutant id="mutant_1383" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset &lt; 0)" to="(offset &gt;= 0)" />
    <mutant id="mutant_530" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(srcDir.isDirectory()) == false" to="(srcDir.isDirectory()) != false" />
    <mutant id="mutant_531" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(len &lt; 0)" to="(len &gt;= 0)" />
    <mutant id="mutant_547" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="((num = reader.read(inbuf)) != (IOUtils.EOF))" to="((num = reader.read(inbuf)) &lt;= (IOUtils.EOF))" />
    <mutant id="mutant_548" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver.removeListener(org.apache.commons.io.monitor.FileAlterationListener)" from="listener != null" to="listener &lt; null" />
    <mutant id="mutant_549" viable="true" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="(bytes.length) != (bom.length())" to="(bytes.length) &gt;= (bom.length())" />
    <mutant id="mutant_543" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="i &lt;= endIndex" to="i != endIndex" />
    <mutant id="mutant_544" viable="true" in="org.apache.commons.io.filefilter.AndFileFilter(java.util.List)" from="fileFilters == null" to="true" />
    <mutant id="mutant_545" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(flags.length()) &gt; 1" to="(flags.length()) &gt;= 1" />
    <mutant id="mutant_546" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="(prefix &gt;= (filename.length()))" to="(prefix &lt; (filename.length()))" />
    <mutant id="mutant_1380" viable="true" in="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])" from="(bytes == null)" to="(bytes != null)" />
    <mutant id="mutant_1381" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="files == null" to="false" />
    <mutant id="mutant_1377" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(offset &lt; size)" to="false" />
    <mutant id="mutant_1378" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" from="bytes &gt; 0" to="bytes &gt;= 0" />
    <mutant id="mutant_1375" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posUnix == (FilenameUtils.NOT_FOUND))" to="(posUnix &lt; (FilenameUtils.NOT_FOUND))" />
    <mutant id="mutant_1376" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((xmlProlog.length()) + len) &gt; (XmlStreamWriter.BUFFER_SIZE)" to="((xmlProlog.length()) + len) == (XmlStreamWriter.BUFFER_SIZE)" />
    <mutant id="mutant_1373" viable="true" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="i &lt; (bytes.length)" to="i &gt; (bytes.length)" />
    <mutant id="mutant_1374" viable="false" in="org.apache.commons.io.input.BoundedInputStream.available()" from="((max) &gt;= 0)" to="((max) == 0)" />
    <mutant id="mutant_1371" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,long)" from="j &lt; 8" to="j == 8" />
    <mutant id="mutant_1372" viable="false" in="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])" from="(bytes == null)" to="(bytes &gt;= null)" />
    <mutant id="mutant_540" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(index &lt; 0)" to="(index != 0)" />
    <mutant id="mutant_541" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix == (FilenameUtils.NOT_FOUND)" to="false" />
    <mutant id="mutant_542" viable="false" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="filename == null" to="filename &lt;= null" />
    <mutant id="mutant_1379" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="remaining &gt; 0" to="remaining != 0" />
    <mutant id="mutant_558" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="destDir == null" to="destDir &gt; null" />
    <mutant id="mutant_559" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="(position) &gt; (size)" to="(position) &lt;= (size)" />
    <mutant id="mutant_554" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(c != (-1))" to="(c == (-1))" />
    <mutant id="mutant_555" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="ch != ch2" to="ch == ch2" />
    <mutant id="mutant_556" viable="false" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="wildcards == null" to="wildcards &lt; null" />
    <mutant id="mutant_557" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="toSkip &lt; 0" to="toSkip != 0" />
    <mutant id="mutant_1370" viable="false" in="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)" from="delegate == null" to="delegate &lt; null" />
    <mutant id="mutant_1366" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="lineLengthBytes &gt; 0" to="false" />
    <mutant id="mutant_1367" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="b == null" to="false" />
    <mutant id="mutant_1364" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(array[j]) == separator" to="(array[j]) &gt;= separator" />
    <mutant id="mutant_1365" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="srcDir == null" to="true" />
    <mutant id="mutant_1362" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="srcFiles == null" to="false" />
    <mutant id="mutant_1363" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((data[(k + j)]) &gt;= ' ')" to="((data[(k + j)]) != ' ')" />
    <mutant id="mutant_1360" viable="true" in="org.apache.commons.io.comparator.AbstractFileComparator.sort(java.io.File[])" from="files != null" to="true" />
    <mutant id="mutant_1361" viable="false" in="org.apache.commons.io.input.BOMInputStream.skip(long)" from="((readFirstBytes()) &gt;= 0)" to="((readFirstBytes()) &gt; 0)" />
    <mutant id="mutant_550" viable="false" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="((directory) != origDirectory)" to="((directory) &lt;= origDirectory)" />
    <mutant id="mutant_551" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI).compareTo(BigInteger.ZERO)) &gt; 0" to="(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI).compareTo(BigInteger.ZERO)) == 0" />
    <mutant id="mutant_552" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i == (size - 1)" to="true" />
    <mutant id="mutant_553" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip &lt; 0" to="toSkip != 0" />
    <mutant id="mutant_1368" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="charset == (Charsets.UTF_16)" to="charset &gt;= (Charsets.UTF_16)" />
    <mutant id="mutant_1369" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(charset == (Charsets.UTF_16BE))" to="(charset != (Charsets.UTF_16BE))" />
    <mutant id="mutant_448" viable="true" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename2 == null)" to="(filename2 != null)" />
    <mutant id="mutant_449" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlEnc == null)" to="(xmlEnc &lt;= null)" />
    <mutant id="mutant_444" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="n != (IOUtils.EOF)" to="false" />
    <mutant id="mutant_445" viable="true" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)" from="(extensions == null)" to="false" />
    <mutant id="mutant_446" viable="false" in="org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)" from="file1Exists != (file2.exists())" to="file1Exists &lt; (file2.exists())" />
    <mutant id="mutant_447" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="result &gt; 0" to="result &gt;= 0" />
    <mutant id="mutant_1199" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="result &gt; (Integer.MAX_VALUE)" to="result &gt;= (Integer.MAX_VALUE)" />
    <mutant id="mutant_1197" viable="true" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="(file.getParentFile()) != null" to="false" />
    <mutant id="mutant_1198" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((data[(k + j)]) &gt;= ' ')" to="((data[(k + j)]) &lt; ' ')" />
    <mutant id="mutant_1195" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="remain &gt; 0" to="false" />
    <mutant id="mutant_1196" viable="true" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="encoding == null" to="encoding != null" />
    <mutant id="mutant_440" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="filters == null" to="filters &gt; null" />
    <mutant id="mutant_441" viable="true" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="fileFilter != null" to="true" />
    <mutant id="mutant_442" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="((num = reader.read(inbuf)) != (IOUtils.EOF))" to="((num = reader.read(inbuf)) &lt; (IOUtils.EOF))" />
    <mutant id="mutant_443" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="actual != length" to="actual &lt; length" />
    <mutant id="mutant_459" viable="false" in="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)" from="(str2 == null)" to="(str2 &gt; null)" />
    <mutant id="mutant_455" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="filters == null" to="filters &gt;= null" />
    <mutant id="mutant_456" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="repeat &gt;= 0" to="true" />
    <mutant id="mutant_457" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.compare(java.io.File,java.io.File)" from="result != 0" to="result == 0" />
    <mutant id="mutant_458" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="b &gt;= 0" to="b == 0" />
    <mutant id="mutant_1193" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(offset &lt; (XmlStreamReader.BUFFER_SIZE))" to="(offset &lt;= (XmlStreamReader.BUFFER_SIZE))" />
    <mutant id="mutant_1194" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="((text.indexOf('?')) == (FilenameUtils.NOT_FOUND))" to="((text.indexOf('?')) &gt; (FilenameUtils.NOT_FOUND))" />
    <mutant id="mutant_1191" viable="true" in="org.apache.commons.io.output.WriterOutputStream.flushOutput()" from="(decoderOut.position()) &gt; 0" to="(decoderOut.position()) &gt;= 0" />
    <mutant id="mutant_1192" viable="false" in="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)" from="data == null" to="data &lt;= null" />
    <mutant id="mutant_1190" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc == null)" to="(xmlGuessEnc != null)" />
    <mutant id="mutant_1188" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((path.charAt(0)) != '\&quot;')" to="((path.charAt(0)) &lt; '\&quot;')" />
    <mutant id="mutant_1189" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(len &lt; 0)" to="(len &gt; 0)" />
    <mutant id="mutant_1186" viable="false" in="org.apache.commons.io.input.ProxyReader.read(char[])" from="chr != null" to="true" />
    <mutant id="mutant_1187" viable="true" in="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])" from="wildcards == null" to="wildcards != null" />
    <mutant id="mutant_1184" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="(xmlEnc != null)" to="(xmlEnc &lt; null)" />
    <mutant id="mutant_1185" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])" from="delegates == null" to="delegates != null" />
    <mutant id="mutant_451" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)" from="ch2 == (IOUtils.EOF)" to="ch2 &gt;= (IOUtils.EOF)" />
    <mutant id="mutant_452" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="k &lt; (buf.length())" to="true" />
    <mutant id="mutant_453" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)" from="(rootEntry.getFile()) == null" to="(rootEntry.getFile()) != null" />
    <mutant id="mutant_454" viable="true" in="org.apache.commons.io.output.WriterOutputStream.flushOutput()" from="(decoderOut.position()) &gt; 0" to="(decoderOut.position()) != 0" />
    <mutant id="mutant_450" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(len == 2)" to="false" />
    <mutant id="mutant_466" viable="false" in="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])" from="((boms.length) == 0)" to="true" />
    <mutant id="mutant_467" viable="true" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="wildcard == null" to="true" />
    <mutant id="mutant_468" viable="false" in="org.apache.commons.io.IOUtils.buffer(java.io.OutputStream,int)" from="outputStream == null" to="false" />
    <mutant id="mutant_469" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="end == 0" to="true" />
    <mutant id="mutant_1182" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity != null" />
    <mutant id="mutant_1183" viable="false" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &gt;= null" />
    <mutant id="mutant_1180" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence)" from="csq != null" to="csq == null" />
    <mutant id="mutant_1181" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="url != null" to="url == null" />
    <mutant id="mutant_1179" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="prefixes == null" to="true" />
    <mutant id="mutant_1177" viable="true" in="org.apache.commons.io.FilenameUtils.isSeparator(char)" from="(ch == (FilenameUtils.WINDOWS_SEPARATOR))" to="(ch &gt;= (FilenameUtils.WINDOWS_SEPARATOR))" />
    <mutant id="mutant_1178" viable="true" in="org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)" from="index == (FilenameUtils.NOT_FOUND)" to="false" />
    <mutant id="mutant_1175" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len == 0" to="false" />
    <mutant id="mutant_1176" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="destDir == null" to="false" />
    <mutant id="mutant_1173" viable="false" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &lt;= null" />
    <mutant id="mutant_1174" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(no) == 1" to="(no) &lt;= 1" />
    <mutant id="mutant_462" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="src == null" to="src &lt;= null" />
    <mutant id="mutant_463" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="firstGT == (-1)" to="firstGT != (-1)" />
    <mutant id="mutant_464" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="((depthLimit) &lt; 0)" to="((depthLimit) &lt;= 0)" />
    <mutant id="mutant_465" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])" from="files == null" to="files != null" />
    <mutant id="mutant_460" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(files.length) &gt; 0" to="true" />
    <mutant id="mutant_461" viable="false" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="(fileFilter == null)" to="(fileFilter &gt;= null)" />
    <mutant id="mutant_477" viable="false" in="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &gt;= null" />
    <mutant id="mutant_478" viable="false" in="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)" from="fileFilter == null" to="fileFilter &lt;= null" />
    <mutant id="mutant_479" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="true" />
    <mutant id="mutant_1171" viable="false" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &lt; null" />
    <mutant id="mutant_1172" viable="true" in="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)" from="encoding == null" to="encoding != null" />
    <mutant id="mutant_1170" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.util.Date)" from="date == null" to="false" />
    <mutant id="mutant_1168" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="((text.indexOf('?')) == (FilenameUtils.NOT_FOUND))" to="((text.indexOf('?')) != (FilenameUtils.NOT_FOUND))" />
    <mutant id="mutant_1169" viable="true" in="org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)" from="((path.indexOf(FilenameUtils.WINDOWS_SEPARATOR)) == (FilenameUtils.NOT_FOUND))" to="((path.indexOf(FilenameUtils.WINDOWS_SEPARATOR)) &lt;= (FilenameUtils.NOT_FOUND))" />
    <mutant id="mutant_1166" viable="false" in="?" from="((osName.indexOf(&quot;mac os x&quot;)) != (-1))" to="((osName.indexOf(&quot;mac os x&quot;)) &lt;= (-1))" />
    <mutant id="mutant_1167" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)" from="lineEnding == null" to="true" />
    <mutant id="mutant_1164" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="stream == null" to="stream &lt; null" />
    <mutant id="mutant_1165" viable="false" in="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" from="file == null" to="file != null" />
    <mutant id="mutant_1162" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="remaining &gt; 0" to="remaining &lt;= 0" />
    <mutant id="mutant_1163" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read()" from="(idx) &gt;= (charSequence.length())" to="(idx) &gt; (charSequence.length())" />
    <mutant id="mutant_473" viable="false" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="prefixes == null" to="prefixes &lt;= null" />
    <mutant id="mutant_474" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="toSkip &lt; 0" to="toSkip &gt;= 0" />
    <mutant id="mutant_475" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="names == null" to="names != null" />
    <mutant id="mutant_476" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI).compareTo(BigInteger.ZERO)) &gt; 0" to="(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI).compareTo(BigInteger.ZERO)) &gt;= 0" />
    <mutant id="mutant_470" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="lineLengthBytes &gt; 0" to="lineLengthBytes &lt; 0" />
    <mutant id="mutant_471" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="countRead != length" to="false" />
    <mutant id="mutant_472" viable="false" in="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)" from="fileFilter == null" to="fileFilter != null" />
    <mutant id="mutant_488" viable="true" in="org.apache.commons.io.ByteOrderMark.getBytes()" from="i &lt; (bytes.length)" to="i &lt;= (bytes.length)" />
    <mutant id="mutant_489" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i &lt; 0" to="i &gt;= 0" />
    <mutant id="mutant_484" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="bomEnc != null" to="true" />
    <mutant id="mutant_485" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="length == 0" to="false" />
    <mutant id="mutant_486" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="filter == null" to="filter &lt;= null" />
    <mutant id="mutant_487" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="prefix &lt; 0" to="prefix != 0" />
    <mutant id="mutant_480" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((leftOver) != null)" to="((leftOver) &lt;= null)" />
    <mutant id="mutant_481" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i == (size - 1)" to="i &gt; (size - 1)" />
    <mutant id="mutant_482" viable="true" in="org.apache.commons.io.TaggedIOException.isTaggedWith(java.lang.Throwable,java.lang.Object)" from="(tag != null)" to="false" />
    <mutant id="mutant_483" viable="false" in="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.nio.charset.Charset)" from="data != null" to="data &lt; null" />
    <mutant id="mutant_499" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j &lt; 0" to="j &gt; 0" />
    <mutant id="mutant_490" viable="false" in="org.apache.commons.io.FileUtils.getFile(java.io.File,java.lang.String[])" from="directory == null" to="directory &lt; null" />
    <mutant id="mutant_495" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[i]) == separator)" to="((array[i]) &lt; separator)" />
    <mutant id="mutant_496" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="((lastModified) != origLastModified)" to="true" />
    <mutant id="mutant_497" viable="false" in="org.apache.commons.io.input.DemuxInputStream.read()" from="null != input" to="null &gt;= input" />
    <mutant id="mutant_498" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="result &lt; 0" to="result &lt;= 0" />
    <mutant id="mutant_491" viable="false" in="?" from="((osName.indexOf(&quot;unix&quot;)) != (-1))" to="((osName.indexOf(&quot;unix&quot;)) &gt;= (-1))" />
    <mutant id="mutant_492" viable="false" in="org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)" from="data != null" to="data &lt; null" />
    <mutant id="mutant_493" viable="false" in="?" from="((osName.indexOf(&quot;solaris&quot;)) != (-1))" to="((osName.indexOf(&quot;solaris&quot;)) &lt;= (-1))" />
    <mutant id="mutant_494" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="destDir == null" to="destDir != null" />
    <mutant id="mutant_1610" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 1)]) == '.')" to="((array[(i - 1)]) &lt; '.')" />
    <mutant id="mutant_1609" viable="false" in="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="names == null" to="names &gt;= null" />
    <mutant id="mutant_1607" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="n &lt; 0" to="n &gt; 0" />
    <mutant id="mutant_1608" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.toString()" from="(fileFilter) != null" to="false" />
    <mutant id="mutant_1605" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="filename == null" to="filename != null" />
    <mutant id="mutant_1606" viable="true" in="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)" from="(-1) != (n = input.read(buffer))" to="(-1) &lt;= (n = input.read(buffer))" />
    <mutant id="mutant_1603" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="bomEnc != null" to="bomEnc &gt;= null" />
    <mutant id="mutant_1604" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size == 0" to="true" />
    <mutant id="mutant_1601" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="charset == (Charsets.UTF_16)" to="charset &gt; (Charsets.UTF_16)" />
    <mutant id="mutant_1602" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="c == (-1)" to="false" />
    <mutant id="mutant_1600" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="i &lt; (array.length)" to="i != (array.length)" />
    <mutant id="mutant_800" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="(byteOrderMark.length()) &lt; (firstBytes.length)" to="false" />
    <mutant id="mutant_801" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="lastBlockLength &gt; 0" to="lastBlockLength &lt;= 0" />
    <mutant id="mutant_802" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="result &gt; (Integer.MAX_VALUE)" to="result &lt;= (Integer.MAX_VALUE)" />
    <mutant id="mutant_803" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="inputOffset &gt; 0" to="true" />
    <mutant id="mutant_808" viable="true" in="org.apache.commons.io.Charsets.toCharset(java.lang.String)" from="charset == null" to="true" />
    <mutant id="mutant_809" viable="false" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence)" from="csq != null" to="csq &gt; null" />
    <mutant id="mutant_804" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="c == (-1)" to="c &lt; (-1)" />
    <mutant id="mutant_805" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="(IOUtils.EOF) != ch" to="(IOUtils.EOF) &lt; ch" />
    <mutant id="mutant_806" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="true" />
    <mutant id="mutant_807" viable="true" in="org.apache.commons.io.output.ChunkedOutputStream(java.io.OutputStream,int)" from="chunkSize &lt;= 0" to="true" />
    <mutant id="mutant_811" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(array[i]) == otherSeparator" to="(array[i]) &lt; otherSeparator" />
    <mutant id="mutant_812" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc != null)" to="(xmlGuessEnc &gt;= null)" />
    <mutant id="mutant_813" viable="false" in="org.apache.commons.io.input.TeeInputStream.read(byte[])" from="n != (IOUtils.EOF)" to="n &lt;= (IOUtils.EOF)" />
    <mutant id="mutant_814" viable="false" in="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)" from="len &gt; 0" to="false" />
    <mutant id="mutant_810" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="i &lt; (extensions.length)" to="i &lt;= (extensions.length)" />
    <mutant id="mutant_819" viable="false" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &gt; null" />
    <mutant id="mutant_815" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="bomEnc == null" to="bomEnc &lt; null" />
    <mutant id="mutant_816" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i &lt; size" to="i &lt;= size" />
    <mutant id="mutant_817" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i == (prefix + 1))" to="(i != (prefix + 1))" />
    <mutant id="mutant_818" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)" from="(rootEntry.getFile()) == null" to="(rootEntry.getFile()) &gt; null" />
    <mutant id="mutant_822" viable="false" in="org.apache.commons.io.FileUtils.getFile(java.lang.String[])" from="names == null" to="names &gt;= null" />
    <mutant id="mutant_823" viable="false" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence)" from="csq != null" to="csq &lt;= null" />
    <mutant id="mutant_824" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="k &lt; 16" to="k != 16" />
    <mutant id="mutant_825" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="suffixes == null" to="false" />
    <mutant id="mutant_820" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(len == 2)" to="(len &lt;= 2)" />
    <mutant id="mutant_821" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI).compareTo(BigInteger.ZERO)) &gt; 0" to="true" />
    <mutant id="mutant_826" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readBoolean()" from="0 != (readByte())" to="false" />
    <mutant id="mutant_827" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="b == null" to="true" />
    <mutant id="mutant_828" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(wildcardMatcher == null)" to="(wildcardMatcher != null)" />
    <mutant id="mutant_829" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="input1 == input2" to="false" />
    <mutant id="mutant_833" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(c &lt; (files.length))" to="(c &gt; (files.length))" />
    <mutant id="mutant_834" viable="false" in="org.apache.commons.io.FileUtils.sizeOfDirectory0(java.io.File)" from="size &lt; 0" to="size &gt;= 0" />
    <mutant id="mutant_835" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="(position) == (size)" to="false" />
    <mutant id="mutant_836" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="c == (IOUtils.EOF)" to="c &gt; (IOUtils.EOF)" />
    <mutant id="mutant_830" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="i &lt; (array.length)" to="i &gt;= (array.length)" />
    <mutant id="mutant_831" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="src == null" to="src &gt; null" />
    <mutant id="mutant_832" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(ch0 &gt;= 'A')" to="(ch0 == 'A')" />
    <mutant id="mutant_837" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="result &gt; 0" to="result != 0" />
    <mutant id="mutant_838" viable="false" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="(directoryFilter == null)" to="(directoryFilter &lt;= null)" />
    <mutant id="mutant_839" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="length &gt; 0" to="length &gt;= 0" />
    <mutant id="mutant_844" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="bomEnc != null" to="true" />
    <mutant id="mutant_845" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posUnix == (FilenameUtils.NOT_FOUND))" to="(posUnix &gt; (FilenameUtils.NOT_FOUND))" />
    <mutant id="mutant_846" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="((directory) != origDirectory)" to="true" />
    <mutant id="mutant_847" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(bytesToRead &gt; 0)" to="(bytesToRead != 0)" />
    <mutant id="mutant_840" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" from="children == null" to="children != null" />
    <mutant id="mutant_841" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(srcFile.exists()) == false" to="false" />
    <mutant id="mutant_842" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.removeListener(org.apache.commons.io.monitor.FileAlterationListener)" from="listener != null" to="listener == null" />
    <mutant id="mutant_843" viable="false" in="org.apache.commons.io.input.BOMInputStream.readFirstBytes()" from="(fbIndex) &lt; (fbLength)" to="(fbIndex) &gt; (fbLength)" />
    <mutant id="mutant_848" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off &lt; 0)" to="false" />
    <mutant id="mutant_849" viable="false" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="(filter) == null" to="(filter) &gt;= null" />
    <mutant id="mutant_1234" viable="false" in="org.apache.commons.io.filefilter.WildcardFileFilter.toString()" from="i &lt; (wildcards.length)" to="false" />
    <mutant id="mutant_1235" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len == 0" to="len &lt;= 0" />
    <mutant id="mutant_1232" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String,long)" from="magicNumber == null" to="magicNumber != null" />
    <mutant id="mutant_1233" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="skipped != toSkip" to="false" />
    <mutant id="mutant_1230" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="c == (IOUtils.EOF)" to="true" />
    <mutant id="mutant_1231" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(bytesToRead &gt; 0)" to="false" />
    <mutant id="mutant_1238" viable="false" in="org.apache.commons.io.input.TeeInputStream.read()" from="ch != (IOUtils.EOF)" to="ch &lt;= (IOUtils.EOF)" />
    <mutant id="mutant_1239" viable="true" in="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)" from="filter == null" to="true" />
    <mutant id="mutant_1236" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="len &gt; 0" to="len &lt;= 0" />
    <mutant id="mutant_1237" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)" from="(magicNumber.length) == 0" to="(magicNumber.length) != 0" />
    <mutant id="mutant_855" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="((text.indexOf('*')) == (FilenameUtils.NOT_FOUND))" to="((text.indexOf('*')) &gt;= (FilenameUtils.NOT_FOUND))" />
    <mutant id="mutant_856" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="c == (-1)" to="c &gt;= (-1)" />
    <mutant id="mutant_857" viable="false" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename1 == null)" to="(filename1 &lt; null)" />
    <mutant id="mutant_858" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="directory == null" to="directory &lt;= null" />
    <mutant id="mutant_851" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((tok.countTokens()) == 1)" to="true" />
    <mutant id="mutant_852" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="i &lt; len" to="i &gt; len" />
    <mutant id="mutant_853" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length &lt; 0" to="length &gt;= 0" />
    <mutant id="mutant_854" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 2)]) == separator)" to="((array[(i - 2)]) != separator)" />
    <mutant id="mutant_859" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="(xmlEnc != null)" to="(xmlEnc &gt; null)" />
    <mutant id="mutant_1223" viable="false" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename2 == null)" to="(filename2 &lt;= null)" />
    <mutant id="mutant_1224" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((off + len) &gt; (b.length))" to="((off + len) == (b.length))" />
    <mutant id="mutant_1221" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(this.cbuf.position()) != (this.mark_cbuf)" to="(this.cbuf.position()) &gt;= (this.mark_cbuf)" />
    <mutant id="mutant_1222" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="k &lt; (buf.length())" to="k == (buf.length())" />
    <mutant id="mutant_1220" viable="false" in="org.apache.commons.io.FileCleaningTracker.addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" from="(reaper) == null" to="false" />
    <mutant id="mutant_1229" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="bytesRead &gt; 0" to="bytesRead &lt;= 0" />
    <mutant id="mutant_850" viable="false" in="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" from="filename == null" to="filename &gt;= null" />
    <mutant id="mutant_1227" viable="false" in="org.apache.commons.io.output.ProxyWriter.write(java.lang.String)" from="str != null" to="str &lt; null" />
    <mutant id="mutant_1228" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(backtrack.size()) &gt; 0" to="(backtrack.size()) &gt;= 0" />
    <mutant id="mutant_1225" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="array == null" to="false" />
    <mutant id="mutant_1226" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((data[(k + j)]) &lt; 127)" to="true" />
    <mutant id="mutant_866" viable="false" in="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.Writer)" from="data != null" to="data == null" />
    <mutant id="mutant_867" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="k &lt; chars_read" to="k &gt; chars_read" />
    <mutant id="mutant_868" viable="false" in="org.apache.commons.io.comparator.CompositeFileComparator(java.lang.Iterable)" from="delegates == null" to="delegates &lt;= null" />
    <mutant id="mutant_869" viable="true" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="(bytes[i]) != (bom.get(i))" to="(bytes[i]) &lt; (bom.get(i))" />
    <mutant id="mutant_862" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" from="line != null" to="line == null" />
    <mutant id="mutant_863" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(c &lt; (files.length))" to="(c != (files.length))" />
    <mutant id="mutant_864" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="destDir == null" to="destDir &gt;= null" />
    <mutant id="mutant_865" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(srcFiles != null)" to="(srcFiles &lt;= null)" />
    <mutant id="mutant_1212" viable="true" in="org.apache.commons.io.comparator.PathFileComparator(org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="true" />
    <mutant id="mutant_1213" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(read == 0)" to="(read != 0)" />
    <mutant id="mutant_1210" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(leftOver) != null" to="(leftOver) &gt;= null" />
    <mutant id="mutant_1211" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(textIdx == (filename.length()))" to="(textIdx &lt;= (filename.length()))" />
    <mutant id="mutant_860" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(no) == 1" to="(no) &gt; 1" />
    <mutant id="mutant_1218" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(length &lt; bufferLength)" to="(length &gt;= bufferLength)" />
    <mutant id="mutant_861" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader.readLine()" from="(currentFilePart) != null" to="(currentFilePart) &lt; null" />
    <mutant id="mutant_1219" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" from="filter == null" to="filter &lt;= null" />
    <mutant id="mutant_1216" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.removeListener(org.apache.commons.io.monitor.FileAlterationListener)" from="listener != null" to="true" />
    <mutant id="mutant_1217" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="((max) &gt;= 0)" to="((max) &lt; 0)" />
    <mutant id="mutant_1214" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="(((charsRead) - (markedAt)) &gt;= (readAheadLimit))" to="(((charsRead) - (markedAt)) != (readAheadLimit))" />
    <mutant id="mutant_1215" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="null != exception" to="null &lt; exception" />
    <mutant id="mutant_877" viable="false" in="org.apache.commons.io.filefilter.NameFileFilter.toString()" from="(names) != null" to="(names) &gt;= null" />
    <mutant id="mutant_878" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="destDir == null" to="destDir &lt; null" />
    <mutant id="mutant_879" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="(index &lt; 0)" to="(index != 0)" />
    <mutant id="mutant_873" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((offset + length) &gt; (array.length))" to="((offset + length) &gt;= (array.length))" />
    <mutant id="mutant_874" viable="false" in="org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)" from="(path == null)" to="(path &gt; null)" />
    <mutant id="mutant_875" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="lineLengthBytes &lt; 0" to="false" />
    <mutant id="mutant_876" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="b == null" to="b &gt;= null" />
    <mutant id="mutant_1201" viable="false" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)" from="startDirectory == null" to="startDirectory &gt;= null" />
    <mutant id="mutant_1202" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="len == 0" to="len &lt;= 0" />
    <mutant id="mutant_1200" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((buf.charAt(k)) == ',')" to="((buf.charAt(k)) &gt; ',')" />
    <mutant id="mutant_1209" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="n &lt; 0" to="n &gt;= 0" />
    <mutant id="mutant_870" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((buf.charAt(k)) == '.')" to="((buf.charAt(k)) != '.')" />
    <mutant id="mutant_871" viable="false" in="org.apache.commons.io.filefilter.NameFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="names == null" to="names &gt; null" />
    <mutant id="mutant_1207" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" from="filename == null" to="filename != null" />
    <mutant id="mutant_872" viable="false" in="org.apache.commons.io.FileCleaningTracker$Reaper.run()" from="((exitWhenFinished) == false)" to="true" />
    <mutant id="mutant_1208" viable="false" in="org.apache.commons.io.FilenameUtils.getName(java.lang.String)" from="filename == null" to="filename &lt; null" />
    <mutant id="mutant_1205" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="(max) &gt;= 0" to="true" />
    <mutant id="mutant_1206" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlEnc != null)" to="true" />
    <mutant id="mutant_1203" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((tok.countTokens()) == 1)" to="((tok.countTokens()) &lt;= 1)" />
    <mutant id="mutant_1204" viable="false" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="(prefixes) != null" to="(prefixes) &gt;= null" />
    <mutant id="mutant_404" viable="false" in="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" from="path == null" to="path != null" />
    <mutant id="mutant_888" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" from="(suffixes) != null" to="(suffixes) == null" />
    <mutant id="mutant_405" viable="false" in="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" from="file == null" to="file &gt;= null" />
    <mutant id="mutant_889" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter.toString()" from="(names) != null" to="(names) == null" />
    <mutant id="mutant_406" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(srcDir.exists()) == false" to="true" />
    <mutant id="mutant_407" viable="false" in="?" from="(osName.indexOf(&quot;windows&quot;)) != (-1)" to="(osName.indexOf(&quot;windows&quot;)) == (-1)" />
    <mutant id="mutant_400" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="b == null" to="b != null" />
    <mutant id="mutant_884" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(line != null)" to="(line &gt; null)" />
    <mutant id="mutant_401" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="((num = reader.read(inbuf)) != (IOUtils.EOF))" to="((num = reader.read(inbuf)) &gt; (IOUtils.EOF))" />
    <mutant id="mutant_885" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="destDir == null" to="true" />
    <mutant id="mutant_402" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="remain &gt; (FileUtils.FILE_COPY_BUFFER_SIZE)" to="remain == (FileUtils.FILE_COPY_BUFFER_SIZE)" />
    <mutant id="mutant_886" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="input1 == input2" to="input1 &gt;= input2" />
    <mutant id="mutant_403" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i &lt; (array.length)" to="i == (array.length)" />
    <mutant id="mutant_887" viable="false" in="org.apache.commons.io.FileUtils.forceMkdirParent(java.io.File)" from="parent == null" to="parent &gt; null" />
    <mutant id="mutant_1281" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="reader == null" to="reader &gt;= null" />
    <mutant id="mutant_1282" viable="true" in="org.apache.commons.io.monitor.FileEntry.getChildren()" from="(children) != null" to="false" />
    <mutant id="mutant_1280" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)" from="(file != null)" to="(file == null)" />
    <mutant id="mutant_408" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[i]) == separator)" to="((array[i]) &gt;= separator)" />
    <mutant id="mutant_409" viable="false" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="(prefixes) != null" to="(prefixes) &gt; null" />
    <mutant id="mutant_1278" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(len == 2)" to="(len != 2)" />
    <mutant id="mutant_1279" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="j &lt; 2" to="j &gt;= 2" />
    <mutant id="mutant_1276" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc != null)" to="true" />
    <mutant id="mutant_1277" viable="false" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="prefixes == null" to="prefixes &lt; null" />
    <mutant id="mutant_1274" viable="true" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity != null" />
    <mutant id="mutant_1275" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)" from="file == null" to="file &lt;= null" />
    <mutant id="mutant_1272" viable="true" in="org.apache.commons.io.filefilter.OrFileFilter(java.util.List)" from="fileFilters == null" to="fileFilters != null" />
    <mutant id="mutant_1273" viable="true" in="org.apache.commons.io.output.ChunkedOutputStream.write(byte[],int,int)" from="bytes &gt; 0" to="bytes &lt; 0" />
    <mutant id="mutant_880" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="len &gt; 0" to="len &gt;= 0" />
    <mutant id="mutant_881" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="lastBlockLength &gt; 0" to="true" />
    <mutant id="mutant_882" viable="false" in="org.apache.commons.io.FileUtils.getFile(java.lang.String[])" from="file == null" to="file &gt; null" />
    <mutant id="mutant_883" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="i &lt; num" to="false" />
    <mutant id="mutant_415" viable="false" in="org.apache.commons.io.input.BoundedInputStream.available()" from="((pos) &gt;= (max))" to="true" />
    <mutant id="mutant_899" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI).compareTo(BigInteger.ZERO)) &gt; 0" to="(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI).compareTo(BigInteger.ZERO)) == 0" />
    <mutant id="mutant_416" viable="false" in="org.apache.commons.io.comparator.PathFileComparator(org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &gt;= null" />
    <mutant id="mutant_417" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="j &lt; (data.length)" to="j &gt;= (data.length)" />
    <mutant id="mutant_418" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size &lt;= prefix" to="size != prefix" />
    <mutant id="mutant_411" viable="false" in="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" from="(filter2 == null)" to="(filter2 &gt; null)" />
    <mutant id="mutant_895" viable="true" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="false" />
    <mutant id="mutant_412" viable="false" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename2 == null)" to="(filename2 &lt; null)" />
    <mutant id="mutant_896" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="(max) &gt;= 0" to="false" />
    <mutant id="mutant_413" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" from="bytes &gt; 0" to="bytes != 0" />
    <mutant id="mutant_897" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(idx) &gt;= (charSequence.length())" to="(idx) != (charSequence.length())" />
    <mutant id="mutant_414" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="basePath == null" to="basePath &lt; null" />
    <mutant id="mutant_898" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="src == null" to="src &lt;= null" />
    <mutant id="mutant_1270" viable="false" in="org.apache.commons.io.FileUtils.getFile(java.io.File,java.lang.String[])" from="directory == null" to="directory != null" />
    <mutant id="mutant_1271" viable="true" in="org.apache.commons.io.filefilter.EmptyFileFilter.accept(java.io.File)" from="((files.length) == 0)" to="((files.length) &lt; 0)" />
    <mutant id="mutant_419" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="i &lt; (array.length)" to="i &lt;= (array.length)" />
    <mutant id="mutant_1267" viable="false" in="org.apache.commons.io.FileDeleteStrategy.deleteQuietly(java.io.File)" from="((fileToDelete.exists()) == false)" to="((fileToDelete.exists()) &lt; false)" />
    <mutant id="mutant_1268" viable="false" in="org.apache.commons.io.comparator.PathFileComparator(org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &lt; null" />
    <mutant id="mutant_1265" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="i &lt; length" to="i != length" />
    <mutant id="mutant_1266" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size == 0" to="size &gt;= 0" />
    <mutant id="mutant_1263" viable="false" in="org.apache.commons.io.input.BOMInputStream.skip(long)" from="(n &gt; 0)" to="false" />
    <mutant id="mutant_1264" viable="false" in="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)" from="((doDelete(fileToDelete)) == false)" to="((doDelete(fileToDelete)) &lt;= false)" />
    <mutant id="mutant_1261" viable="false" in="org.apache.commons.io.monitor.FileAlterationMonitor.removeObserver(org.apache.commons.io.monitor.FileAlterationObserver)" from="observer != null" to="observer &gt;= null" />
    <mutant id="mutant_1262" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="srcDir == null" to="srcDir &gt; null" />
    <mutant id="mutant_891" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(index &gt;= (data.length))" to="(index &lt; (data.length))" />
    <mutant id="mutant_892" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j &gt;= 0" to="j &lt;= 0" />
    <mutant id="mutant_893" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(line.length()) &gt; 0" to="(line.length()) &gt;= 0" />
    <mutant id="mutant_410" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length &lt; 0" to="length == 0" />
    <mutant id="mutant_894" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="textIdx == (FilenameUtils.NOT_FOUND)" to="textIdx &lt; (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_1269" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()" from="target == '\n'" to="false" />
    <mutant id="mutant_890" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="n != (IOUtils.EOF)" to="n &gt;= (IOUtils.EOF)" />
    <mutant id="mutant_426" viable="false" in="?" from="((osName.indexOf(&quot;irix&quot;)) != (-1))" to="((osName.indexOf(&quot;irix&quot;)) &gt; (-1))" />
    <mutant id="mutant_427" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="wcsIdx &lt; (wcs.length)" to="true" />
    <mutant id="mutant_428" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size &lt;= 0" to="size &gt;= 0" />
    <mutant id="mutant_429" viable="true" in="org.apache.commons.io.FilenameUtils.directoryContains(java.lang.String,java.lang.String)" from="canonicalChild == null" to="false" />
    <mutant id="mutant_422" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="((length) != origLength)" to="((length) &lt; origLength)" />
    <mutant id="mutant_423" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(this.cbuf.position()) != (this.mark_cbuf)" to="true" />
    <mutant id="mutant_424" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="(prefix &gt;= endIndex)" to="(prefix != endIndex)" />
    <mutant id="mutant_425" viable="false" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i &lt; size" to="true" />
    <mutant id="mutant_1260" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="i &lt; (urls.length)" to="i &gt; (urls.length)" />
    <mutant id="mutant_1256" viable="false" in="org.apache.commons.io.input.BOMInputStream.mark(int)" from="(firstBytes) == null" to="(firstBytes) &lt; null" />
    <mutant id="mutant_1257" viable="false" in="org.apache.commons.io.input.BOMInputStream$1.compare(org.apache.commons.io.ByteOrderMark,org.apache.commons.io.ByteOrderMark)" from="len2 &gt; len1" to="true" />
    <mutant id="mutant_1254" viable="false" in="org.apache.commons.io.input.NullReader.read()" from="(position) == (size)" to="true" />
    <mutant id="mutant_1255" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(xmlProlog.length()) &gt;= (XmlStreamWriter.BUFFER_SIZE)" to="(xmlProlog.length()) &lt;= (XmlStreamWriter.BUFFER_SIZE)" />
    <mutant id="mutant_1252" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i &lt; size" to="i &gt; size" />
    <mutant id="mutant_1253" viable="false" in="org.apache.commons.io.IOUtils.readLines(java.io.Reader)" from="line != null" to="false" />
    <mutant id="mutant_1250" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="suffix == null" to="true" />
    <mutant id="mutant_1251" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(length &lt; (buffer.length))" to="(length &gt; (buffer.length))" />
    <mutant id="mutant_420" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="endIndex &gt;= strStartIndex" to="endIndex != strStartIndex" />
    <mutant id="mutant_421" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)" from="remaining == 0" to="remaining &lt; 0" />
    <mutant id="mutant_1258" viable="true" in="org.apache.commons.io.FilenameUtils.isSystemWindows()" from="(FilenameUtils.SYSTEM_SEPARATOR) == (FilenameUtils.WINDOWS_SEPARATOR)" to="(FilenameUtils.SYSTEM_SEPARATOR) != (FilenameUtils.WINDOWS_SEPARATOR)" />
    <mutant id="mutant_1259" viable="true" in="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" from="(filter2 == null)" to="false" />
    <mutant id="mutant_437" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((srcDir.isDirectory()) == false)" to="((srcDir.isDirectory()) &lt;= false)" />
    <mutant id="mutant_438" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((tok.countTokens()) == 1)" to="((tok.countTokens()) &gt;= 1)" />
    <mutant id="mutant_439" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="remaining &gt; 0" to="remaining &gt;= 0" />
    <mutant id="mutant_433" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="((lastModified) != origLastModified)" to="((lastModified) &gt; origLastModified)" />
    <mutant id="mutant_434" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="i &lt; (filters.length)" to="i != (filters.length)" />
    <mutant id="mutant_435" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter.toString()" from="(names) != null" to="false" />
    <mutant id="mutant_436" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="prefix &lt; 0" to="prefix &gt; 0" />
    <mutant id="mutant_1245" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((off + len) &lt; 0)" to="false" />
    <mutant id="mutant_1246" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="filter == null" to="false" />
    <mutant id="mutant_1243" viable="true" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(fileFilter) != null" to="true" />
    <mutant id="mutant_1244" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="((lastCoderResult) == null)" to="((lastCoderResult) &gt;= null)" />
    <mutant id="mutant_1241" viable="false" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="lockDir == null" to="lockDir &gt;= null" />
    <mutant id="mutant_1242" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" from="((children.length) &gt; 1)" to="false" />
    <mutant id="mutant_1240" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="repeat &gt;= 0" to="repeat &lt; 0" />
    <mutant id="mutant_430" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="ch2 == (IOUtils.EOF)" to="ch2 &lt; (IOUtils.EOF)" />
    <mutant id="mutant_431" viable="false" in="org.apache.commons.io.FileDeleteStrategy.deleteQuietly(java.io.File)" from="((fileToDelete.exists()) == false)" to="((fileToDelete.exists()) &lt;= false)" />
    <mutant id="mutant_432" viable="false" in="org.apache.commons.io.input.XmlStreamReader.isAppXml(java.lang.String)" from="(mime != null)" to="(mime &lt;= null)" />
    <mutant id="mutant_1249" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posWin == (FilenameUtils.NOT_FOUND))" to="(posWin &gt; (FilenameUtils.NOT_FOUND))" />
    <mutant id="mutant_1247" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc != null)" to="(xmlGuessEnc &lt; null)" />
    <mutant id="mutant_1248" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="(byteOrderMark.length()) &lt; (firstBytes.length)" to="true" />
    <mutant id="mutant_327" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="(line2 != null)" to="(line2 &lt; null)" />
    <mutant id="mutant_328" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="encoding != null" to="encoding &lt; null" />
    <mutant id="mutant_329" viable="false" in="?" from="((osName.indexOf(&quot;freebsd&quot;)) != (-1))" to="((osName.indexOf(&quot;freebsd&quot;)) &gt;= (-1))" />
    <mutant id="mutant_323" viable="true" in="org.apache.commons.io.FilenameUtils.directoryContains(java.lang.String,java.lang.String)" from="canonicalParent == null" to="true" />
    <mutant id="mutant_324" viable="false" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="filename == null" to="filename &lt;= null" />
    <mutant id="mutant_325" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(this.cbuf.position()) != (this.mark_cbuf)" to="false" />
    <mutant id="mutant_326" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="ch0 == '~'" to="ch0 != '~'" />
    <mutant id="mutant_1083" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="lineLengthBytes &lt; 0" to="lineLengthBytes != 0" />
    <mutant id="mutant_1084" viable="false" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="filename == null" to="filename &lt; null" />
    <mutant id="mutant_1081" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(srcDir.exists()) == false" to="(srcDir.exists()) &lt;= false" />
    <mutant id="mutant_1082" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(xmlProlog.length()) &gt;= 5" to="false" />
    <mutant id="mutant_1080" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM()" from="(getBOM()) != null" to="(getBOM()) &lt; null" />
    <mutant id="mutant_1078" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(ch0 &lt;= 'Z')" to="(ch0 &lt; 'Z')" />
    <mutant id="mutant_1079" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="line2 == null" to="false" />
    <mutant id="mutant_1076" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" from="size &gt; (Integer.MAX_VALUE)" to="size == (Integer.MAX_VALUE)" />
    <mutant id="mutant_1077" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.compare(java.io.File,java.io.File)" from="result != 0" to="true" />
    <mutant id="mutant_1074" viable="true" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="(directoryFilter == null)" to="true" />
    <mutant id="mutant_1075" viable="false" in="org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)" from="dirFilter == null" to="dirFilter &lt; null" />
    <mutant id="mutant_320" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="(firstBytes) == null" to="(firstBytes) &lt;= null" />
    <mutant id="mutant_321" viable="false" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="prefix == null" to="prefix &gt; null" />
    <mutant id="mutant_322" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="destDir == null" to="true" />
    <mutant id="mutant_338" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="remain &gt; 0" to="remain != 0" />
    <mutant id="mutant_339" viable="false" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(filename == null)" to="(filename &gt;= null)" />
    <mutant id="mutant_334" viable="false" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="(file.getParentFile()) != null" to="(file.getParentFile()) &lt; null" />
    <mutant id="mutant_335" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(destDir.isDirectory()) == false" to="(destDir.isDirectory()) &gt; false" />
    <mutant id="mutant_336" viable="false" in="?" from="((osName.indexOf(&quot;irix&quot;)) != (-1))" to="((osName.indexOf(&quot;irix&quot;)) == (-1))" />
    <mutant id="mutant_337" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="((markedAt) &gt;= 0)" to="((markedAt) &lt; 0)" />
    <mutant id="mutant_1072" viable="false" in="?" from="((osName.indexOf(&quot;linux&quot;)) != (-1))" to="true" />
    <mutant id="mutant_1073" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(url != null)" to="(url &lt; null)" />
    <mutant id="mutant_1070" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix == (FilenameUtils.NOT_FOUND)" to="posUnix != (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_1071" viable="false" in="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable[])" from="closeables == null" to="false" />
    <mutant id="mutant_1069" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size &lt;= prefix" to="false" />
    <mutant id="mutant_1067" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((path.length()) &gt; 0)" to="((path.length()) &gt;= 0)" />
    <mutant id="mutant_1068" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="(charsRead) &gt;= (maxCharsFromTargetReader)" to="(charsRead) != (maxCharsFromTargetReader)" />
    <mutant id="mutant_1065" viable="true" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="lockDir == null" to="false" />
    <mutant id="mutant_1066" viable="false" in="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)" from="fileExistedAlready == false" to="fileExistedAlready &lt; false" />
    <mutant id="mutant_1063" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="filename == null" to="true" />
    <mutant id="mutant_1064" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="((IOUtils.EOF) != (read = input.read(buffer, 0, bytesToRead)))" to="true" />
    <mutant id="mutant_330" viable="true" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="result &gt; (Integer.MAX_VALUE)" to="true" />
    <mutant id="mutant_331" viable="true" in="org.apache.commons.io.filefilter.OrFileFilter.toString()" from="(fileFilters) != null" to="(fileFilters) == null" />
    <mutant id="mutant_332" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posWin == (FilenameUtils.NOT_FOUND)" to="posWin &lt;= (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_333" viable="true" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])" from="(FilenameUtils.indexOfExtension(filename)) == (FilenameUtils.NOT_FOUND)" to="(FilenameUtils.indexOfExtension(filename)) &gt;= (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_349" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(ch0 &lt;= 'Z')" to="(ch0 != 'Z')" />
    <mutant id="mutant_345" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="bomEnc != null" to="bomEnc &gt; null" />
    <mutant id="mutant_346" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="prefix &gt;= (filename.length())" to="prefix == (filename.length())" />
    <mutant id="mutant_347" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((off + len) &gt; (b.length))" to="((off + len) &lt;= (b.length))" />
    <mutant id="mutant_348" viable="false" in="org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)" from="(file1.length()) != (file2.length())" to="(file1.length()) &gt; (file2.length())" />
    <mutant id="mutant_1061" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="prefix &gt; 0" to="prefix &lt;= 0" />
    <mutant id="mutant_1062" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix == (FilenameUtils.NOT_FOUND)" to="true" />
    <mutant id="mutant_1060" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)" from="line != null" to="line &gt;= null" />
    <mutant id="mutant_1058" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="j &lt; 2" to="j &gt; 2" />
    <mutant id="mutant_1059" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" from="(((written) + count) &gt; (threshold))" to="true" />
    <mutant id="mutant_1056" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="path == null" to="path &lt;= null" />
    <mutant id="mutant_1057" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="n &lt; 0" to="n &gt; 0" />
    <mutant id="mutant_1054" viable="false" in="org.apache.commons.io.filefilter.OrFileFilter.toString()" from="i &lt; (fileFilters.size())" to="false" />
    <mutant id="mutant_1055" viable="true" in="org.apache.commons.io.monitor.FileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" from="file == null" to="false" />
    <mutant id="mutant_1052" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,char[])" from="(IOUtils.EOF) != (n = input.read(buffer))" to="true" />
    <mutant id="mutant_1053" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(i &lt; (avoidNewlineSplitBufferSize))" to="true" />
    <mutant id="mutant_341" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i == (size - 1)" to="i != (size - 1)" />
    <mutant id="mutant_342" viable="true" in="org.apache.commons.io.FilenameUtils.isSystemWindows()" from="(FilenameUtils.SYSTEM_SEPARATOR) == (FilenameUtils.WINDOWS_SEPARATOR)" to="false" />
    <mutant id="mutant_343" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader.readLine()" from="(currentFilePart) != null" to="(currentFilePart) &gt; null" />
    <mutant id="mutant_344" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="encoding != null" to="encoding &gt;= null" />
    <mutant id="mutant_340" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(file.canRead()) == false" to="(file.canRead()) &lt; false" />
    <mutant id="mutant_356" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off &lt; 0)" to="(off &gt; 0)" />
    <mutant id="mutant_357" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="ch == '?'" to="ch &gt; '?'" />
    <mutant id="mutant_358" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="textIdx &gt; (filename.length())" to="textIdx &gt;= (filename.length())" />
    <mutant id="mutant_359" viable="false" in="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream,java.nio.charset.Charset)" from="data != null" to="data &gt;= null" />
    <mutant id="mutant_1050" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlEnc != null)" to="false" />
    <mutant id="mutant_1051" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="skipped != toSkip" to="skipped == toSkip" />
    <mutant id="mutant_1047" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="toSkip &lt; 0" to="toSkip &lt;= 0" />
    <mutant id="mutant_1048" viable="false" in="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)" from="file == null" to="false" />
    <mutant id="mutant_1045" viable="true" in="org.apache.commons.io.filefilter.AndFileFilter.toString()" from="i &gt; 0" to="i &gt;= 0" />
    <mutant id="mutant_1046" viable="false" in="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" from="(bom.get(i)) != (firstBytes[i])" to="(bom.get(i)) == (firstBytes[i])" />
    <mutant id="mutant_1043" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="inputOffset &gt; 0" to="inputOffset != 0" />
    <mutant id="mutant_1044" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(fileFilter) != null" to="(fileFilter) &lt; null" />
    <mutant id="mutant_1041" viable="false" in="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)" from="file == null" to="file &gt; null" />
    <mutant id="mutant_1042" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(firstGT == (-1))" to="(firstGT != (-1))" />
    <mutant id="mutant_352" viable="true" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="(defaultEncoding) == null" to="true" />
    <mutant id="mutant_353" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()" from="target == '\r'" to="target &lt; '\r'" />
    <mutant id="mutant_354" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="(position) == (size)" to="(position) &lt; (size)" />
    <mutant id="mutant_355" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 3)]) == separator)" to="((array[(i - 3)]) &lt; separator)" />
    <mutant id="mutant_350" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="i &gt; 0" to="i != 0" />
    <mutant id="mutant_1049" viable="false" in="org.apache.commons.io.input.BoundedInputStream.available()" from="((max) &gt;= 0)" to="true" />
    <mutant id="mutant_351" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="(charsRead) &gt;= (maxCharsFromTargetReader)" to="(charsRead) &lt;= (maxCharsFromTargetReader)" />
    <mutant id="mutant_367" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 1)]) == '.')" to="((array[(i - 1)]) &lt;= '.')" />
    <mutant id="mutant_368" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(firstGT == (-1))" to="(firstGT &gt; (-1))" />
    <mutant id="mutant_369" viable="false" in="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)" from="data != null" to="false" />
    <mutant id="mutant_363" viable="false" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="fileFilter != null" to="fileFilter &lt; null" />
    <mutant id="mutant_364" viable="false" in="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(IOUtils.EOF) == count" to="(IOUtils.EOF) &gt;= count" />
    <mutant id="mutant_365" viable="true" in="org.apache.commons.io.filefilter.OrFileFilter.toString()" from="i &gt; 0" to="i == 0" />
    <mutant id="mutant_366" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="(((charsRead) - (markedAt)) &gt;= (readAheadLimit))" to="(((charsRead) - (markedAt)) &lt;= (readAheadLimit))" />
    <mutant id="mutant_360" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(bytesRead == 0)" to="false" />
    <mutant id="mutant_361" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix &lt; 0" to="prefix &gt;= 0" />
    <mutant id="mutant_362" viable="false" in="org.apache.commons.io.filefilter.NameFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="names == null" to="names &lt; null" />
    <mutant id="mutant_378" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.util.Date)" from="date == null" to="date != null" />
    <mutant id="mutant_379" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="((max) &gt;= 0)" to="((max) &lt;= 0)" />
    <mutant id="mutant_374" viable="false" in="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="pattern == null" to="pattern &lt; null" />
    <mutant id="mutant_375" viable="false" in="org.apache.commons.io.FileUtils.sizeOfDirectoryBig0(java.io.File)" from="files == null" to="files != null" />
    <mutant id="mutant_376" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.toString()" from="i &gt; 0" to="i != 0" />
    <mutant id="mutant_377" viable="false" in="?" from="((osName.indexOf(&quot;sunos&quot;)) != (-1))" to="false" />
    <mutant id="mutant_370" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="reference == null" to="true" />
    <mutant id="mutant_371" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc != null)" to="(xmlGuessEnc &lt;= null)" />
    <mutant id="mutant_372" viable="true" in="org.apache.commons.io.comparator.NameFileComparator(org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="false" />
    <mutant id="mutant_373" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i == (size - 1)" to="i &gt;= (size - 1)" />
    <mutant id="mutant_389" viable="false" in="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String,long)" from="magicNumber == null" to="magicNumber &lt; null" />
    <mutant id="mutant_380" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="((depthLimit) &lt; 0)" to="true" />
    <mutant id="mutant_1098" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="(IOUtils.SKIP_CHAR_BUFFER) == null" to="(IOUtils.SKIP_CHAR_BUFFER) &lt; null" />
    <mutant id="mutant_1099" viable="true" in="org.apache.commons.io.filefilter.EmptyFileFilter.accept(java.io.File)" from="(files == null)" to="false" />
    <mutant id="mutant_1096" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(idx) &gt;= (charSequence.length())" to="(idx) &lt; (charSequence.length())" />
    <mutant id="mutant_1097" viable="false" in="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)" from="fileFilter == null" to="true" />
    <mutant id="mutant_385" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 1)]) == '.')" to="((array[(i - 1)]) &lt;= '.')" />
    <mutant id="mutant_386" viable="false" in="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="name == null" to="name &gt;= null" />
    <mutant id="mutant_387" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(c &lt; (files.length))" to="false" />
    <mutant id="mutant_388" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(java.lang.String)" from="httpContentType != null" to="httpContentType &lt;= null" />
    <mutant id="mutant_381" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="line1 == null" to="false" />
    <mutant id="mutant_382" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO)) &gt; 0" to="(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO)) &lt; 0" />
    <mutant id="mutant_383" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 1)]) == separator)" to="((array[(i - 1)]) &lt;= separator)" />
    <mutant id="mutant_384" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="k &lt; chars_read" to="k &gt;= chars_read" />
    <mutant id="mutant_1094" viable="false" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent) == null" to="(parent) &lt;= null" />
    <mutant id="mutant_1095" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(array[j]) == separator" to="(array[j]) != separator" />
    <mutant id="mutant_1092" viable="false" in="org.apache.commons.io.output.DemuxOutputStream.close()" from="null != output" to="null &lt; output" />
    <mutant id="mutant_1093" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)" from="filter == null" to="filter &gt; null" />
    <mutant id="mutant_1090" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="directory == null" to="directory != null" />
    <mutant id="mutant_1091" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="bufferSize &lt; maxBytesPerChar" to="bufferSize &lt;= maxBytesPerChar" />
    <mutant id="mutant_390" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()" from="(written) &gt; (threshold)" to="(written) &gt;= (threshold)" />
    <mutant id="mutant_1089" viable="false" in="org.apache.commons.io.monitor.FileAlterationMonitor.start()" from="(threadFactory) != null" to="(threadFactory) &gt;= null" />
    <mutant id="mutant_391" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" from="i &lt; (files.length)" to="true" />
    <mutant id="mutant_1087" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="size == 0" to="false" />
    <mutant id="mutant_1088" viable="true" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="(file.getParentFile()) != null" to="true" />
    <mutant id="mutant_1085" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="((data[k]) == (newLineSequence[j]))" to="((data[k]) &lt; (newLineSequence[j]))" />
    <mutant id="mutant_1086" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(bytes.position()) &gt; 0" to="(bytes.position()) &lt; 0" />
    <mutant id="mutant_396" viable="true" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="result &gt; (Integer.MAX_VALUE)" to="false" />
    <mutant id="mutant_397" viable="false" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="(defaultEncoding) == null" to="(defaultEncoding) &lt; null" />
    <mutant id="mutant_398" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(i &lt; (avoidNewlineSplitBufferSize))" to="(i &gt; (avoidNewlineSplitBufferSize))" />
    <mutant id="mutant_399" viable="false" in="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)" from="file == null" to="file &gt;= null" />
    <mutant id="mutant_392" viable="false" in="org.apache.commons.io.FileUtils.isSymlink(java.io.File)" from="file == null" to="file &gt;= null" />
    <mutant id="mutant_393" viable="false" in="org.apache.commons.io.FileDeleteStrategy.deleteQuietly(java.io.File)" from="((fileToDelete.exists()) == false)" to="((fileToDelete.exists()) &gt; false)" />
    <mutant id="mutant_394" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix == (FilenameUtils.NOT_FOUND)" to="posUnix &lt;= (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_395" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="encoding != null" to="encoding &gt; null" />
    <mutant id="mutant_1519" viable="false" in="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.nio.charset.Charset)" from="data != null" to="data &lt; null" />
    <mutant id="mutant_1510" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,long)" from="(file.lastModified()) &lt; timeMillis" to="(file.lastModified()) &gt;= timeMillis" />
    <mutant id="mutant_1517" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read(byte[])" from="bts != null" to="false" />
    <mutant id="mutant_1518" viable="false" in="org.apache.commons.io.input.BOMInputStream.readFirstBytes()" from="(fbIndex) &lt; (fbLength)" to="true" />
    <mutant id="mutant_1515" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="result &lt; 0" to="true" />
    <mutant id="mutant_1516" viable="false" in="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable)" from="closeable != null" to="false" />
    <mutant id="mutant_1513" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="ch2 == (IOUtils.EOF)" to="ch2 &gt;= (IOUtils.EOF)" />
    <mutant id="mutant_1514" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" from="lines == null" to="lines != null" />
    <mutant id="mutant_1511" viable="true" in="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)" from="delegate == null" to="true" />
    <mutant id="mutant_1512" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="j &gt;= 0" to="j &lt;= 0" />
    <mutant id="mutant_1508" viable="false" in="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)" from="(str2 == null)" to="(str2 &lt; null)" />
    <mutant id="mutant_1509" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="i &gt; 0" to="i == 0" />
    <mutant id="mutant_1506" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="parentFile != null" to="parentFile == null" />
    <mutant id="mutant_1507" viable="false" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename2 == null)" to="(filename2 &gt;= null)" />
    <mutant id="mutant_1504" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI).compareTo(BigInteger.ZERO)) &gt; 0" to="true" />
    <mutant id="mutant_1505" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="(max) &gt;= 0" to="(max) &lt;= 0" />
    <mutant id="mutant_1502" viable="true" in="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)" from="(-1) != (n = input.read(buffer))" to="(-1) &gt;= (n = input.read(buffer))" />
    <mutant id="mutant_1503" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="line != null" to="line &lt;= null" />
    <mutant id="mutant_1500" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 1)]) == '.')" to="((array[(i - 1)]) &gt;= '.')" />
    <mutant id="mutant_1501" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(charset == (Charsets.UTF_16BE))" to="true" />
    <mutant id="mutant_1553" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="src == null" to="src &lt; null" />
    <mutant id="mutant_1554" viable="true" in="org.apache.commons.io.filefilter.EmptyFileFilter.accept(java.io.File)" from="(file.length()) == 0" to="(file.length()) &lt;= 0" />
    <mutant id="mutant_1551" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)" from="(rootEntry.getFile()) == null" to="(rootEntry.getFile()) &gt;= null" />
    <mutant id="mutant_1552" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="i &lt;= endIndex" to="i == endIndex" />
    <mutant id="mutant_1550" viable="false" in="org.apache.commons.io.filefilter.OrFileFilter.toString()" from="(fileFilters) != null" to="(fileFilters) &lt; null" />
    <mutant id="mutant_1559" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="leftOverOfLastFilePart != null" to="leftOverOfLastFilePart &lt; null" />
    <mutant id="mutant_1557" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="srcLen != dstLen" to="srcLen &lt; dstLen" />
    <mutant id="mutant_1558" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.toString()" from="i &gt; 0" to="true" />
    <mutant id="mutant_1555" viable="false" in="org.apache.commons.io.input.BOMInputStream.mark(int)" from="(firstBytes) == null" to="(firstBytes) &gt; null" />
    <mutant id="mutant_1556" viable="false" in="org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer)" from="data != null" to="data &lt; null" />
    <mutant id="mutant_1542" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.accept(java.io.File)" from="(file.length()) &lt; (size)" to="false" />
    <mutant id="mutant_1543" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="i &lt; (filters.length)" to="i == (filters.length)" />
    <mutant id="mutant_1540" viable="false" in="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.nio.charset.Charset)" from="data != null" to="data &lt;= null" />
    <mutant id="mutant_1541" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="bytesRead == (IOUtils.EOF)" to="bytesRead &lt;= (IOUtils.EOF)" />
    <mutant id="mutant_1548" viable="false" in="org.apache.commons.io.IOUtils.buffer(java.io.OutputStream,int)" from="outputStream == null" to="outputStream &lt; null" />
    <mutant id="mutant_1549" viable="false" in="org.apache.commons.io.FileUtils.isSymlink(java.io.File)" from="(file.getParent()) == null" to="(file.getParent()) &gt;= null" />
    <mutant id="mutant_1546" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="bytesCopied == 0" to="bytesCopied &lt; 0" />
    <mutant id="mutant_1547" viable="true" in="org.apache.commons.io.filefilter.AndFileFilter(java.util.List)" from="fileFilters == null" to="false" />
    <mutant id="mutant_1544" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)" from="(caseSensitivity == null)" to="(caseSensitivity &gt; null)" />
    <mutant id="mutant_1545" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="separator == (FilenameUtils.SYSTEM_SEPARATOR)" to="separator != (FilenameUtils.SYSTEM_SEPARATOR)" />
    <mutant id="mutant_701" viable="true" in="org.apache.commons.io.monitor.FileAlterationMonitor.removeObserver(org.apache.commons.io.monitor.FileAlterationObserver)" from="observer != null" to="observer == null" />
    <mutant id="mutant_702" viable="false" in="org.apache.commons.io.FilenameUtils.directoryContains(java.lang.String,java.lang.String)" from="canonicalParent == null" to="canonicalParent &lt; null" />
    <mutant id="mutant_703" viable="false" in="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)" from="(str2 == null)" to="(str2 &lt;= null)" />
    <mutant id="mutant_704" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" from="i &lt; (suffixes.length)" to="i &gt;= (suffixes.length)" />
    <mutant id="mutant_700" viable="false" in="org.apache.commons.io.IOUtils.buffer(java.io.OutputStream)" from="outputStream == null" to="outputStream &gt;= null" />
    <mutant id="mutant_709" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="len &gt; (filename.length())" to="len == (filename.length())" />
    <mutant id="mutant_705" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI).compareTo(BigInteger.ZERO)) &gt; 0" to="(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI).compareTo(BigInteger.ZERO)) &lt;= 0" />
    <mutant id="mutant_706" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(array[j]) == separator" to="(array[j]) &lt; separator" />
    <mutant id="mutant_707" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="(firstBytes[i]) &lt; 0" to="(firstBytes[i]) == 0" />
    <mutant id="mutant_708" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="destDir == null" to="destDir &gt; null" />
    <mutant id="mutant_1531" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(backtrack.size()) &gt; 0" to="(backtrack.size()) == 0" />
    <mutant id="mutant_1532" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="ch == '?'" to="ch &gt;= '?'" />
    <mutant id="mutant_1530" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(destDir.canWrite()) == false" to="(destDir.canWrite()) &lt;= false" />
    <mutant id="mutant_1539" viable="false" in="org.apache.commons.io.IOUtils.closeQuietly(java.nio.channels.Selector)" from="selector != null" to="selector == null" />
    <mutant id="mutant_1537" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.write(char[],int,int)" from="(xmlPrologWriter) != null" to="true" />
    <mutant id="mutant_1538" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()" from="remaining == 0" to="false" />
    <mutant id="mutant_1535" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="chars_read &gt; 16" to="chars_read &lt; 16" />
    <mutant id="mutant_1536" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="srcDir == null" to="srcDir &gt;= null" />
    <mutant id="mutant_1533" viable="false" in="org.apache.commons.io.filefilter.AndFileFilter.toString()" from="(fileFilters) != null" to="(fileFilters) &lt; null" />
    <mutant id="mutant_1534" viable="false" in="?" from="((osName.indexOf(&quot;solaris&quot;)) != (-1))" to="((osName.indexOf(&quot;solaris&quot;)) &gt; (-1))" />
    <mutant id="mutant_712" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="c == (IOUtils.EOF)" to="false" />
    <mutant id="mutant_713" viable="false" in="org.apache.commons.io.monitor.FileAlterationMonitor.addObserver(org.apache.commons.io.monitor.FileAlterationObserver)" from="observer != null" to="observer &gt; null" />
    <mutant id="mutant_714" viable="false" in="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)" from="(str1 == null)" to="(str1 &lt;= null)" />
    <mutant id="mutant_715" viable="true" in="org.apache.commons.io.ByteOrderMark.toString()" from="i &lt; (bytes.length)" to="i != (bytes.length)" />
    <mutant id="mutant_710" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="n &lt; 0" to="n &gt;= 0" />
    <mutant id="mutant_711" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((off + len) &lt; 0)" to="((off + len) != 0)" />
    <mutant id="mutant_716" viable="false" in="org.apache.commons.io.input.BOMInputStream$1.compare(org.apache.commons.io.ByteOrderMark,org.apache.commons.io.ByteOrderMark)" from="len1 &gt; len2" to="len1 &lt; len2" />
    <mutant id="mutant_717" viable="true" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="i &lt; (bytes.length)" to="i == (bytes.length)" />
    <mutant id="mutant_718" viable="false" in="?" from="((osName.indexOf(&quot;irix&quot;)) != (-1))" to="true" />
    <mutant id="mutant_719" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="((pos) &gt;= (max))" to="((pos) &lt;= (max))" />
    <mutant id="mutant_1520" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(filename == null)" to="false" />
    <mutant id="mutant_1521" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="filter == null" to="true" />
    <mutant id="mutant_1528" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="b == null" to="b &gt; null" />
    <mutant id="mutant_1529" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="destDir == null" to="destDir &lt; null" />
    <mutant id="mutant_1526" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="prefix &lt; 0" to="prefix &lt;= 0" />
    <mutant id="mutant_1527" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="srcDir == null" to="srcDir &gt; null" />
    <mutant id="mutant_1524" viable="true" in="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String)" from="pattern == null" to="true" />
    <mutant id="mutant_1525" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i &lt; size" to="i &gt; size" />
    <mutant id="mutant_1522" viable="false" in="org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)" from="(path == null)" to="(path &lt;= null)" />
    <mutant id="mutant_1523" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(currentLastBytePos) &gt; (-1)" to="false" />
    <mutant id="mutant_723" viable="false" in="org.apache.commons.io.output.DemuxOutputStream.write(int)" from="null != output" to="null &lt; output" />
    <mutant id="mutant_724" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="secondCount &lt; 0" to="secondCount &lt;= 0" />
    <mutant id="mutant_725" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="remaining &gt; 0" to="remaining == 0" />
    <mutant id="mutant_726" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(length &gt; 0)" to="(length &gt;= 0)" />
    <mutant id="mutant_720" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i &lt; n)" to="false" />
    <mutant id="mutant_721" viable="false" in="org.apache.commons.io.FileUtils.getFile(java.io.File,java.lang.String[])" from="names == null" to="names &lt; null" />
    <mutant id="mutant_722" viable="false" in="org.apache.commons.io.output.DemuxOutputStream.flush()" from="null != output" to="null &lt; output" />
    <mutant id="mutant_727" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="i &lt;= endIndex" to="true" />
    <mutant id="mutant_728" viable="false" in="org.apache.commons.io.monitor.FileAlterationMonitor.start()" from="(threadFactory) != null" to="(threadFactory) &lt;= null" />
    <mutant id="mutant_729" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent) == null" to="true" />
    <mutant id="mutant_1113" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="len == 0" to="len &lt; 0" />
    <mutant id="mutant_1597" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="end == 0" to="end != 0" />
    <mutant id="mutant_1114" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="result &lt; 0" to="result &lt;= 0" />
    <mutant id="mutant_1598" viable="false" in="org.apache.commons.io.output.LockableFileWriter.initWriter(java.io.File,java.nio.charset.Charset,boolean)" from="fileExistedAlready == false" to="fileExistedAlready &gt; false" />
    <mutant id="mutant_1111" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="(firstBytes) == null" to="(firstBytes) != null" />
    <mutant id="mutant_1595" viable="false" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="childFiles == null" to="childFiles &gt;= null" />
    <mutant id="mutant_1112" viable="false" in="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="suffix == null" to="suffix &gt; null" />
    <mutant id="mutant_1596" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="avail &lt;= 0" to="true" />
    <mutant id="mutant_1593" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" from="line != null" to="line &lt;= null" />
    <mutant id="mutant_1110" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="remaining &gt; 0" to="false" />
    <mutant id="mutant_1594" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="inputOffset &gt; 0" to="inputOffset &lt; 0" />
    <mutant id="mutant_1591" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i &lt; n)" to="(i != n)" />
    <mutant id="mutant_1592" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)" from="remaining == 0" to="remaining &gt; 0" />
    <mutant id="mutant_1119" viable="false" in="org.apache.commons.io.IOUtils.closeQuietly(java.net.Socket)" from="sock != null" to="sock &gt; null" />
    <mutant id="mutant_1117" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="c == (IOUtils.EOF)" to="c &lt;= (IOUtils.EOF)" />
    <mutant id="mutant_1118" viable="false" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="prefixes == null" to="prefixes &gt;= null" />
    <mutant id="mutant_1115" viable="false" in="org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)" from="(running) == false" to="(running) &lt; false" />
    <mutant id="mutant_1599" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="((markedAt) &gt;= 0)" to="false" />
    <mutant id="mutant_1116" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="actual != length" to="actual == length" />
    <mutant id="mutant_734" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length &lt; 0" to="length &gt;= 0" />
    <mutant id="mutant_735" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="wcsIdx == ((wcs.length) - 1)" to="true" />
    <mutant id="mutant_736" viable="false" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="filename == null" to="filename &gt; null" />
    <mutant id="mutant_737" viable="false" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)" from="filename == null" to="filename &gt;= null" />
    <mutant id="mutant_730" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="result &gt; (Integer.MAX_VALUE)" to="false" />
    <mutant id="mutant_731" viable="false" in="org.apache.commons.io.filefilter.AndFileFilter.toString()" from="filter == null" to="filter &lt; null" />
    <mutant id="mutant_732" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" from="i &lt; (files.length)" to="i != (files.length)" />
    <mutant id="mutant_733" viable="false" in="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &gt; null" />
    <mutant id="mutant_1590" viable="false" in="org.apache.commons.io.input.TeeInputStream.read(byte[])" from="n != (IOUtils.EOF)" to="false" />
    <mutant id="mutant_738" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI).compareTo(BigInteger.ZERO)) &gt; 0" to="true" />
    <mutant id="mutant_739" viable="false" in="org.apache.commons.io.input.BoundedInputStream.available()" from="((max) &gt;= 0)" to="((max) &gt; 0)" />
    <mutant id="mutant_1102" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(IOUtils.EOF) == count" to="(IOUtils.EOF) &gt;= count" />
    <mutant id="mutant_1586" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="((readed = input.read(data, offset, (size - offset))) != (IOUtils.EOF))" to="((readed = input.read(data, offset, (size - offset))) &lt; (IOUtils.EOF))" />
    <mutant id="mutant_1103" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="((destDir.isDirectory()) == false)" to="((destDir.isDirectory()) &gt; false)" />
    <mutant id="mutant_1587" viable="true" in="org.apache.commons.io.output.XmlStreamWriter(java.io.OutputStream,java.lang.String)" from="defaultEncoding != null" to="true" />
    <mutant id="mutant_1100" viable="false" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(filename == null)" to="(filename &gt;= null)" />
    <mutant id="mutant_1584" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.flush()" from="(writer) != null" to="true" />
    <mutant id="mutant_1101" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="destDir == null" to="false" />
    <mutant id="mutant_1585" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="i &lt; length" to="i &gt; length" />
    <mutant id="mutant_1582" viable="true" in="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)" from="encoding == null" to="true" />
    <mutant id="mutant_1583" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="bytesRead == (IOUtils.EOF)" to="true" />
    <mutant id="mutant_1580" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="skipped != toSkip" to="skipped &lt;= toSkip" />
    <mutant id="mutant_1581" viable="false" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename1 == null)" to="(filename1 &gt; null)" />
    <mutant id="mutant_1108" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.toString()" from="i &lt; (delegates.length)" to="i != (delegates.length)" />
    <mutant id="mutant_1109" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])" from="files == null" to="files &lt;= null" />
    <mutant id="mutant_1106" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="(IOUtils.SKIP_BYTE_BUFFER) == null" to="true" />
    <mutant id="mutant_1107" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOMCharsetName()" from="(byteOrderMark) == null" to="(byteOrderMark) != null" />
    <mutant id="mutant_1104" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" from="bytes &gt; 0" to="bytes == 0" />
    <mutant id="mutant_1588" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" from="line != null" to="false" />
    <mutant id="mutant_1105" viable="false" in="org.apache.commons.io.input.AutoCloseInputStream.afterRead(int)" from="n == (IOUtils.EOF)" to="n &lt; (IOUtils.EOF)" />
    <mutant id="mutant_1589" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 2)]) == '.')" to="false" />
    <mutant id="mutant_745" viable="false" in="org.apache.commons.io.monitor.FileAlterationMonitor(long,org.apache.commons.io.monitor.FileAlterationObserver[])" from="observers != null" to="observers &lt;= null" />
    <mutant id="mutant_746" viable="false" in="org.apache.commons.io.IOUtils.closeQuietly(java.net.ServerSocket)" from="sock != null" to="sock &lt; null" />
    <mutant id="mutant_747" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip &lt; 0" to="toSkip &gt; 0" />
    <mutant id="mutant_748" viable="true" in="org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass(java.lang.String[])" from="i &lt; (interfaces.length)" to="i &gt;= (interfaces.length)" />
    <mutant id="mutant_741" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(length &lt; 0)" to="(length &gt;= 0)" />
    <mutant id="mutant_742" viable="false" in="org.apache.commons.io.ByteOrderMark.toString()" from="i &lt; (bytes.length)" to="false" />
    <mutant id="mutant_743" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="toSkip &lt; 0" to="true" />
    <mutant id="mutant_744" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(backtrack.size()) &gt; 0" to="true" />
    <mutant id="mutant_749" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="prefix &gt; 0" to="true" />
    <mutant id="mutant_1575" viable="false" in="org.apache.commons.io.output.ProxyOutputStream.write(byte[])" from="bts != null" to="bts &lt; null" />
    <mutant id="mutant_1576" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="index &lt; 0" to="true" />
    <mutant id="mutant_1573" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posUnix == (FilenameUtils.NOT_FOUND))" to="true" />
    <mutant id="mutant_1574" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="index &lt; 0" to="index &gt;= 0" />
    <mutant id="mutant_1571" viable="false" in="org.apache.commons.io.comparator.CompositeFileComparator(java.lang.Iterable)" from="delegates == null" to="delegates &gt;= null" />
    <mutant id="mutant_1572" viable="false" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)" from="filename == null" to="filename &lt; null" />
    <mutant id="mutant_1570" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="charset == (Charset.forName(&quot;Shift_JIS&quot;))" to="true" />
    <mutant id="mutant_740" viable="true" in="org.apache.commons.io.input.XmlStreamReader.isAppXml(java.lang.String)" from="(mime != null)" to="(mime == null)" />
    <mutant id="mutant_1579" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="len &gt; (filename.length())" to="len &lt;= (filename.length())" />
    <mutant id="mutant_1577" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((buf.charAt(k)) == '.')" to="((buf.charAt(k)) &lt;= '.')" />
    <mutant id="mutant_1578" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((lines.size()) &gt;= 3)" to="((lines.size()) &lt; 3)" />
    <mutant id="mutant_756" viable="false" in="org.apache.commons.io.input.TeeInputStream.read(byte[],int,int)" from="n != (-1)" to="n &gt; (-1)" />
    <mutant id="mutant_757" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity != null" />
    <mutant id="mutant_758" viable="false" in="org.apache.commons.io.FileUtils.sizeOfDirectory0(java.io.File)" from="size &lt; 0" to="size == 0" />
    <mutant id="mutant_759" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="len == 0" to="len &lt; 0" />
    <mutant id="mutant_752" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" from="lastSeparator &gt; extensionPos" to="lastSeparator &gt;= extensionPos" />
    <mutant id="mutant_753" viable="false" in="?" from="((osName.indexOf(&quot;sunos&quot;)) != (-1))" to="true" />
    <mutant id="mutant_754" viable="false" in="org.apache.commons.io.filefilter.WildcardFilter(java.util.List)" from="wildcards == null" to="wildcards &gt; null" />
    <mutant id="mutant_755" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="((lastCoderResult) == null)" to="false" />
    <mutant id="mutant_1564" viable="true" in="org.apache.commons.io.FilenameUtils.getName(java.lang.String)" from="filename == null" to="false" />
    <mutant id="mutant_1565" viable="false" in="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)" from="fileExistedAlready == false" to="fileExistedAlready &gt;= false" />
    <mutant id="mutant_1562" viable="true" in="org.apache.commons.io.ThreadMonitor.start(java.lang.Thread,long)" from="timeout &gt; 0" to="true" />
    <mutant id="mutant_1563" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(this.cbuf.position()) != 0" to="(this.cbuf.position()) == 0" />
    <mutant id="mutant_1560" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="prefix &lt; 0" to="prefix &gt;= 0" />
    <mutant id="mutant_1561" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" from="i &lt; (files.length)" to="true" />
    <mutant id="mutant_750" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size &lt;= 0" to="size != 0" />
    <mutant id="mutant_751" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="len == 0" to="true" />
    <mutant id="mutant_1568" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()" from="remaining == 0" to="true" />
    <mutant id="mutant_1569" viable="false" in="org.apache.commons.io.FileCleaningTracker.exitWhenFinished()" from="(reaper) != null" to="false" />
    <mutant id="mutant_1566" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(len &lt; 0)" to="(len == 0)" />
    <mutant id="mutant_1567" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((lines.size()) &gt;= 3)" to="((lines.size()) == 3)" />
    <mutant id="mutant_767" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="(b &gt;= 0)" to="(b == 0)" />
    <mutant id="mutant_768" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="input1 == input2" to="input1 &lt; input2" />
    <mutant id="mutant_769" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="((text.indexOf('*')) == (FilenameUtils.NOT_FOUND))" to="((text.indexOf('*')) &gt; (FilenameUtils.NOT_FOUND))" />
    <mutant id="mutant_763" viable="false" in="org.apache.commons.io.input.BOMInputStream.mark(int)" from="(firstBytes) == null" to="(firstBytes) &gt;= null" />
    <mutant id="mutant_764" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="i &lt; (prefixes.length)" to="true" />
    <mutant id="mutant_765" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="reference == null" to="true" />
    <mutant id="mutant_766" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="(bomEnc != null)" to="(bomEnc &gt; null)" />
    <mutant id="mutant_1160" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="(position) &gt; (size)" to="(position) != (size)" />
    <mutant id="mutant_1161" viable="false" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="encoding == null" to="encoding &gt; null" />
    <mutant id="mutant_1157" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="size &lt; 0" to="size &gt;= 0" />
    <mutant id="mutant_1158" viable="false" in="org.apache.commons.io.input.BOMInputStream.readFirstBytes()" from="(fbIndex) &lt; (fbLength)" to="false" />
    <mutant id="mutant_1155" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i &lt; size" to="i == size" />
    <mutant id="mutant_1156" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)" from="i &lt; 8" to="false" />
    <mutant id="mutant_1153" viable="false" in="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])" from="delegates == null" to="delegates &lt; null" />
    <mutant id="mutant_1154" viable="false" in="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" from="i &lt; (bom.length())" to="i &gt; (bom.length())" />
    <mutant id="mutant_1151" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM()" from="(getBOM()) != null" to="false" />
    <mutant id="mutant_1152" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="(line1 != null)" to="(line1 == null)" />
    <mutant id="mutant_760" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="(prefixes) != null" to="(prefixes) == null" />
    <mutant id="mutant_761" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(proc.exitValue()) != 0" to="(proc.exitValue()) &lt;= 0" />
    <mutant id="mutant_762" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(java.lang.String)" from="i &gt;= 0" to="i == 0" />
    <mutant id="mutant_1159" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="(max) &gt;= 0" to="(max) == 0" />
    <mutant id="mutant_778" viable="true" in="org.apache.commons.io.FilenameUtils.directoryContains(java.lang.String,java.lang.String)" from="canonicalParent == null" to="canonicalParent != null" />
    <mutant id="mutant_779" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="actual != length" to="actual == length" />
    <mutant id="mutant_774" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(length &lt; (buffer.length))" to="(length != (buffer.length))" />
    <mutant id="mutant_775" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="toSkip &lt; 0" to="true" />
    <mutant id="mutant_776" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="ch == '?'" to="true" />
    <mutant id="mutant_777" viable="false" in="org.apache.commons.io.FileUtils.toURLs(java.io.File[])" from="i &lt; (urls.length)" to="i != (urls.length)" />
    <mutant id="mutant_1150" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="actual != length" to="actual &gt;= length" />
    <mutant id="mutant_1146" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="files == null" to="files != null" />
    <mutant id="mutant_1147" viable="false" in="org.apache.commons.io.FileUtils.toFile(java.net.URL)" from="(url == null)" to="(url &gt; null)" />
    <mutant id="mutant_1144" viable="true" in="org.apache.commons.io.filefilter.EmptyFileFilter.accept(java.io.File)" from="(file.length()) == 0" to="(file.length()) &gt;= 0" />
    <mutant id="mutant_1145" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" from="filter == null" to="filter &lt; null" />
    <mutant id="mutant_1142" viable="false" in="org.apache.commons.io.IOUtils.closeQuietly(java.net.ServerSocket)" from="sock != null" to="sock &gt; null" />
    <mutant id="mutant_1143" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="i &lt; length" to="i &gt;= length" />
    <mutant id="mutant_1140" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read()" from="((pos) &gt;= (max))" to="((pos) &lt;= (max))" />
    <mutant id="mutant_1141" viable="false" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename1 == null)" to="(filename1 &gt;= null)" />
    <mutant id="mutant_770" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(off &lt; 0)" to="(off &gt;= 0)" />
    <mutant id="mutant_771" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" from="bytes &gt; 0" to="bytes &lt;= 0" />
    <mutant id="mutant_772" viable="true" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename1 == null)" to="true" />
    <mutant id="mutant_773" viable="true" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="result &gt; (Integer.MAX_VALUE)" to="result &gt;= (Integer.MAX_VALUE)" />
    <mutant id="mutant_1148" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" from="lastSeparator &gt; extensionPos" to="lastSeparator &lt;= extensionPos" />
    <mutant id="mutant_1149" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" from="i &lt; (files.length)" to="i &gt; (files.length)" />
    <mutant id="mutant_305" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" from="(fileFilter) == null" to="false" />
    <mutant id="mutant_789" viable="false" in="org.apache.commons.io.FilenameUtils.directoryContains(java.lang.String,java.lang.String)" from="canonicalParent == null" to="canonicalParent &lt;= null" />
    <mutant id="mutant_306" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="(((charsRead) - (markedAt)) &gt;= (readAheadLimit))" to="true" />
    <mutant id="mutant_307" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="(index &lt; 0)" to="false" />
    <mutant id="mutant_308" viable="true" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="(bytes[i]) != (bom.get(i))" to="(bytes[i]) &gt;= (bom.get(i))" />
    <mutant id="mutant_301" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="ch0 == ':'" to="ch0 != ':'" />
    <mutant id="mutant_785" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="(position) == (size)" to="(position) &lt;= (size)" />
    <mutant id="mutant_302" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="i &lt; (extensions.length)" to="false" />
    <mutant id="mutant_786" viable="false" in="org.apache.commons.io.comparator.AbstractFileComparator.sort(java.util.List)" from="files != null" to="files &lt; null" />
    <mutant id="mutant_303" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" from="lineEnding == null" to="lineEnding &lt;= null" />
    <mutant id="mutant_787" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(proc.exitValue()) != 0" to="(proc.exitValue()) &gt;= 0" />
    <mutant id="mutant_304" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlEnc != null)" to="(xmlEnc == null)" />
    <mutant id="mutant_788" viable="false" in="org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)" from="dirFilter == null" to="dirFilter &gt; null" />
    <mutant id="mutant_309" viable="false" in="org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)" from="filename == null" to="filename &lt; null" />
    <mutant id="mutant_1135" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(len &lt; 0)" to="(len &gt; 0)" />
    <mutant id="mutant_1136" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posWin == 2)" to="false" />
    <mutant id="mutant_1133" viable="true" in="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)" from="(-1) != (n = input.read(buffer))" to="(-1) &gt; (n = input.read(buffer))" />
    <mutant id="mutant_1134" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" from="((children.length) &gt; 1)" to="((children.length) &gt;= 1)" />
    <mutant id="mutant_1131" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="(buffer.length()) != 0" to="false" />
    <mutant id="mutant_1132" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter.toString()" from="i &gt; 0" to="i &lt; 0" />
    <mutant id="mutant_1130" viable="false" in="org.apache.commons.io.output.ProxyOutputStream.write(byte[])" from="bts != null" to="bts &gt;= null" />
    <mutant id="mutant_781" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="stream == null" to="true" />
    <mutant id="mutant_782" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="null != exception" to="null &gt;= exception" />
    <mutant id="mutant_783" viable="false" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="((exists) != origExists)" to="((exists) &gt; origExists)" />
    <mutant id="mutant_300" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)" from="lines == null" to="true" />
    <mutant id="mutant_784" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="firstGT == (-1)" to="firstGT &gt;= (-1)" />
    <mutant id="mutant_1139" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="j &gt;= 0" to="j != 0" />
    <mutant id="mutant_1137" viable="false" in="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(buffer.remaining()) &gt; 0" to="false" />
    <mutant id="mutant_780" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="files == null" to="false" />
    <mutant id="mutant_1138" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(ch0 &gt;= 'A')" to="true" />
    <mutant id="mutant_316" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="firstCount &gt; 0" to="firstCount != 0" />
    <mutant id="mutant_317" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="(prefix &gt;= endIndex)" to="false" />
    <mutant id="mutant_318" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="maxBytesPerChar == 1.0F" to="maxBytesPerChar &gt; 1.0F" />
    <mutant id="mutant_319" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="n &lt; 0" to="n &lt;= 0" />
    <mutant id="mutant_312" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()" from="remaining == 0" to="remaining &lt; 0" />
    <mutant id="mutant_796" viable="false" in="?" from="(osName.indexOf(&quot;windows&quot;)) != (-1)" to="(osName.indexOf(&quot;windows&quot;)) &gt;= (-1)" />
    <mutant id="mutant_313" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(array[(size - 1)]) != separator" to="(array[(size - 1)]) &gt; separator" />
    <mutant id="mutant_797" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="child == null" to="child &gt;= null" />
    <mutant id="mutant_314" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="b &gt;= 0" to="b != 0" />
    <mutant id="mutant_798" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc != null)" to="(xmlGuessEnc == null)" />
    <mutant id="mutant_315" viable="true" in="org.apache.commons.io.FilenameUtils.isSeparator(char)" from="(ch == (FilenameUtils.UNIX_SEPARATOR))" to="(ch &gt;= (FilenameUtils.UNIX_SEPARATOR))" />
    <mutant id="mutant_799" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="length &gt; 0" to="length &lt;= 0" />
    <mutant id="mutant_1124" viable="false" in="org.apache.commons.io.LineIterator.hasNext()" from="(cachedLine) != null" to="(cachedLine) &gt; null" />
    <mutant id="mutant_1125" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="ch0 == '~'" to="ch0 != '~'" />
    <mutant id="mutant_1122" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(totalByteLength) &gt; 0" to="(totalByteLength) &lt;= 0" />
    <mutant id="mutant_1123" viable="false" in="org.apache.commons.io.FileUtils.getFile(java.io.File,java.lang.String[])" from="directory == null" to="true" />
    <mutant id="mutant_1120" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="destDir == null" to="destDir &gt; null" />
    <mutant id="mutant_1121" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="destDir == null" to="destDir &lt;= null" />
    <mutant id="mutant_792" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((leftOver) != null)" to="((leftOver) == null)" />
    <mutant id="mutant_793" viable="false" in="org.apache.commons.io.FileUtils.forceMkdirParent(java.io.File)" from="parent == null" to="parent &lt;= null" />
    <mutant id="mutant_310" viable="true" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)" from="(FilenameUtils.indexOfExtension(filename)) == (FilenameUtils.NOT_FOUND)" to="(FilenameUtils.indexOfExtension(filename)) &gt; (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_794" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.close()" from="(writer) == null" to="false" />
    <mutant id="mutant_311" viable="true" in="org.apache.commons.io.EndianUtils.read(java.io.InputStream)" from="(IOUtils.EOF) == value" to="false" />
    <mutant id="mutant_795" viable="false" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename1 == null)" to="(filename1 &gt;= null)" />
    <mutant id="mutant_1128" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="filter == null" to="false" />
    <mutant id="mutant_1129" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])" from="files == null" to="files &gt;= null" />
    <mutant id="mutant_790" viable="false" in="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" from="(bom.get(i)) != (firstBytes[i])" to="(bom.get(i)) &gt;= (firstBytes[i])" />
    <mutant id="mutant_1126" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="prefix == null" to="prefix != null" />
    <mutant id="mutant_791" viable="false" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)" from="(extension == null)" to="(extension &gt; null)" />
    <mutant id="mutant_1127" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size &lt;= prefix" to="size &lt; prefix" />
    <mutant id="mutant_9" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="j &lt; (data.length)" to="j &gt; (data.length)" />
    <mutant id="mutant_206" viable="false" in="?" from="((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))" to="((osName.indexOf(&quot;mpe/ix&quot;)) &gt; (-1))" />
    <mutant id="mutant_8" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read()" from="b != (IOUtils.EOF)" to="false" />
    <mutant id="mutant_207" viable="false" in="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="name == null" to="name &lt; null" />
    <mutant id="mutant_208" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((lines.size()) &lt; max)" to="((lines.size()) &lt;= max)" />
    <mutant id="mutant_209" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read()" from="b != (IOUtils.EOF)" to="b &lt;= (IOUtils.EOF)" />
    <mutant id="mutant_5" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.util.Date)" from="date == null" to="date &gt;= null" />
    <mutant id="mutant_202" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(backtrack.size()) &gt; 0" to="(backtrack.size()) &lt;= 0" />
    <mutant id="mutant_686" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off &gt; (b.length))" to="(off != (b.length))" />
    <mutant id="mutant_4" viable="false" in="org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)" from="(running) == false" to="(running) &lt;= false" />
    <mutant id="mutant_203" viable="true" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename2 == null)" to="true" />
    <mutant id="mutant_687" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="k &lt; chars_read" to="k &gt; chars_read" />
    <mutant id="mutant_7" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="remain &gt; (FileUtils.FILE_COPY_BUFFER_SIZE)" to="false" />
    <mutant id="mutant_204" viable="false" in="org.apache.commons.io.FileUtils.getFile(java.lang.String[])" from="names == null" to="false" />
    <mutant id="mutant_688" viable="false" in="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String)" from="pattern == null" to="pattern &gt;= null" />
    <mutant id="mutant_6" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlEnc != null)" to="false" />
    <mutant id="mutant_205" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="actual != length" to="false" />
    <mutant id="mutant_689" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="bufferSize &lt; maxBytesPerChar" to="true" />
    <mutant id="mutant_85" viable="false" in="?" from="((osName.indexOf(&quot;freebsd&quot;)) != (-1))" to="((osName.indexOf(&quot;freebsd&quot;)) &lt; (-1))" />
    <mutant id="mutant_84" viable="false" in="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])" from="wildcards == null" to="wildcards &gt; null" />
    <mutant id="mutant_87" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="n == (IOUtils.EOF)" to="n &lt; (IOUtils.EOF)" />
    <mutant id="mutant_86" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="null != exception" to="true" />
    <mutant id="mutant_89" viable="false" in="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="(caseSensitivity != null)" to="(caseSensitivity &gt; null)" />
    <mutant id="mutant_88" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(length &gt; 0)" to="true" />
    <mutant id="mutant_90" viable="true" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="directoryFilter != null" to="directoryFilter == null" />
    <mutant id="mutant_92" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(position) &gt; ((mark) + (readlimit))" to="(position) == ((mark) + (readlimit))" />
    <mutant id="mutant_91" viable="false" in="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,int)" from="pattern == null" to="pattern &lt; null" />
    <mutant id="mutant_94" viable="false" in="org.apache.commons.io.IOUtils.buffer(java.io.InputStream,int)" from="inputStream == null" to="true" />
    <mutant id="mutant_93" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="skipped != toSkip" to="skipped &lt; toSkip" />
    <mutant id="mutant_1" viable="false" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="encoding == null" to="encoding &lt; null" />
    <mutant id="mutant_682" viable="false" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="directoryFilter != null" to="directoryFilter &gt;= null" />
    <mutant id="mutant_0" viable="true" in="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)" from="(-1) != (n = input.read(buffer))" to="(-1) &lt; (n = input.read(buffer))" />
    <mutant id="mutant_683" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="(position) &gt; (size)" to="(position) &gt;= (size)" />
    <mutant id="mutant_3" viable="true" in="org.apache.commons.io.output.LockableFileWriter.initWriter(java.io.File,java.nio.charset.Charset,boolean)" from="fileExistedAlready == false" to="true" />
    <mutant id="mutant_200" viable="false" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename1 == null)" to="(filename1 &lt; null)" />
    <mutant id="mutant_684" viable="false" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="fileFilter != null" to="fileFilter &gt;= null" />
    <mutant id="mutant_2" viable="true" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename2 == null)" to="(filename2 != null)" />
    <mutant id="mutant_201" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="bomEnc != null" to="bomEnc &lt;= null" />
    <mutant id="mutant_685" viable="false" in="org.apache.commons.io.IOUtils.buffer(java.io.InputStream)" from="inputStream == null" to="inputStream != null" />
    <mutant id="mutant_680" viable="true" in="org.apache.commons.io.filefilter.RegexFileFilter(java.util.regex.Pattern)" from="pattern == null" to="pattern != null" />
    <mutant id="mutant_681" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()" from="remaining == 0" to="remaining &gt;= 0" />
    <mutant id="mutant_217" viable="true" in="org.apache.commons.io.output.ChunkedOutputStream(java.io.OutputStream,int)" from="chunkSize &lt;= 0" to="chunkSize &gt;= 0" />
    <mutant id="mutant_218" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="lastBlockLength &gt; 0" to="lastBlockLength != 0" />
    <mutant id="mutant_219" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(c != '.')" to="(c &gt;= '.')" />
    <mutant id="mutant_213" viable="false" in="org.apache.commons.io.input.DemuxInputStream.close()" from="null != input" to="true" />
    <mutant id="mutant_697" viable="false" in="org.apache.commons.io.FileUtils.isSymlink(java.io.File)" from="(file.getParent()) == null" to="false" />
    <mutant id="mutant_214" viable="false" in="org.apache.commons.io.input.ProxyReader.read(char[])" from="chr != null" to="chr &gt;= null" />
    <mutant id="mutant_698" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="(b &gt;= 0)" to="(b &gt; 0)" />
    <mutant id="mutant_215" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j &gt;= 0" to="false" />
    <mutant id="mutant_699" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc != null)" to="true" />
    <mutant id="mutant_216" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="offset != size" to="offset == size" />
    <mutant id="mutant_74" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter.toString()" from="i &gt; 0" to="i &gt;= 0" />
    <mutant id="mutant_73" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="srcDir == null" to="srcDir &lt; null" />
    <mutant id="mutant_76" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="ch0 == ':'" to="ch0 &lt;= ':'" />
    <mutant id="mutant_75" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="inBufferPos == (currentBuffer.length)" to="true" />
    <mutant id="mutant_78" viable="false" in="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &lt; null" />
    <mutant id="mutant_77" viable="false" in="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &gt;= null" />
    <mutant id="mutant_79" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((off + len) &gt; (b.length))" to="true" />
    <mutant id="mutant_81" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="i &lt; (extensions.length)" to="i &gt; (extensions.length)" />
    <mutant id="mutant_80" viable="false" in="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.nio.charset.Charset)" from="data != null" to="true" />
    <mutant id="mutant_83" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="srcLen != dstLen" to="true" />
    <mutant id="mutant_82" viable="false" in="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)" from="data == null" to="data &gt; null" />
    <mutant id="mutant_693" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="(((charsRead) - (markedAt)) &gt;= (readAheadLimit))" to="false" />
    <mutant id="mutant_210" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader.readLine()" from="line == null" to="line &lt; null" />
    <mutant id="mutant_694" viable="true" in="org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()" from="(prefix) != null" to="(prefix) == null" />
    <mutant id="mutant_211" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="(prefix &gt;= (filename.length()))" to="true" />
    <mutant id="mutant_695" viable="false" in="org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer)" from="data != null" to="data &lt;= null" />
    <mutant id="mutant_212" viable="true" in="org.apache.commons.io.filefilter.AndFileFilter.toString()" from="i &gt; 0" to="i != 0" />
    <mutant id="mutant_696" viable="false" in="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable[])" from="closeables == null" to="closeables &lt; null" />
    <mutant id="mutant_690" viable="false" in="org.apache.commons.io.LineIterator(java.io.Reader)" from="reader == null" to="reader &gt; null" />
    <mutant id="mutant_691" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="(ch == '*')" to="(ch &gt; '*')" />
    <mutant id="mutant_692" viable="false" in="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)" from="file == null" to="file &lt;= null" />
    <mutant id="mutant_228" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="result &gt; (Integer.MAX_VALUE)" to="true" />
    <mutant id="mutant_229" viable="false" in="org.apache.commons.io.FileCleaningTracker$Reaper.run()" from="((exitWhenFinished) == false)" to="((exitWhenFinished) &lt;= false)" />
    <mutant id="mutant_224" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="path == null" to="path &gt; null" />
    <mutant id="mutant_225" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="length &gt; position" to="true" />
    <mutant id="mutant_226" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter(long,boolean)" from="size &lt; 0" to="size != 0" />
    <mutant id="mutant_227" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(c != (-1))" to="(c &lt; (-1))" />
    <mutant id="mutant_220" viable="true" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename2 == null)" to="false" />
    <mutant id="mutant_221" viable="false" in="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)" from="charset == null" to="charset &lt;= null" />
    <mutant id="mutant_222" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="url != null" to="false" />
    <mutant id="mutant_223" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="toSkip &lt; 0" to="false" />
    <mutant id="mutant_239" viable="false" in="org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)" from="charsetName == null" to="charsetName &lt; null" />
    <mutant id="mutant_235" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="url != null" to="url &gt; null" />
    <mutant id="mutant_236" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="src == null" to="true" />
    <mutant id="mutant_237" viable="false" in="org.apache.commons.io.output.XmlStreamWriter.flush()" from="(writer) != null" to="(writer) &gt; null" />
    <mutant id="mutant_238" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="length &gt; 0" to="true" />
    <mutant id="mutant_96" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" from="i &gt; 0" to="i &lt;= 0" />
    <mutant id="mutant_95" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" from="i &gt; 0" to="i != 0" />
    <mutant id="mutant_98" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)" from="ch != ch2" to="ch &lt; ch2" />
    <mutant id="mutant_97" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="remaining &gt; 0" to="remaining &lt; 0" />
    <mutant id="mutant_99" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)" from="filter == null" to="filter &lt;= null" />
    <mutant id="mutant_231" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="secondCount &lt; 0" to="secondCount == 0" />
    <mutant id="mutant_232" viable="false" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)" from="(extensions == null)" to="(extensions &gt; null)" />
    <mutant id="mutant_233" viable="false" in="?" from="((osName.indexOf(&quot;irix&quot;)) != (-1))" to="((osName.indexOf(&quot;irix&quot;)) &gt;= (-1))" />
    <mutant id="mutant_234" viable="false" in="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)" from="file == null" to="file &gt;= null" />
    <mutant id="mutant_230" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)" from="(filenameFilter) != null" to="(filenameFilter) &lt; null" />
    <mutant id="mutant_246" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="(reader == null)" to="false" />
    <mutant id="mutant_247" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="actual != expected" to="actual &gt;= expected" />
    <mutant id="mutant_248" viable="false" in="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)" from="fileFilter == null" to="fileFilter &lt; null" />
    <mutant id="mutant_249" viable="true" in="org.apache.commons.io.output.ChunkedWriter(java.io.Writer,int)" from="chunkSize &lt;= 0" to="chunkSize &gt;= 0" />
    <mutant id="mutant_242" viable="false" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(wildcardMatcher == null)" to="(wildcardMatcher &lt; null)" />
    <mutant id="mutant_243" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="((url.charAt(i)) == '%')" to="((url.charAt(i)) &gt; '%')" />
    <mutant id="mutant_244" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(textIdx == (filename.length()))" to="false" />
    <mutant id="mutant_245" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target == (-1)" to="target &lt;= (-1)" />
    <mutant id="mutant_240" viable="true" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="(file.getParentFile()) != null" to="(file.getParentFile()) == null" />
    <mutant id="mutant_241" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i &lt; (array.length)" to="i &lt;= (array.length)" />
    <mutant id="mutant_257" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="remaining &gt; 0" to="true" />
    <mutant id="mutant_258" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="prefix &gt;= (filename.length())" to="prefix &gt; (filename.length())" />
    <mutant id="mutant_259" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="len &gt; 0" to="len != 0" />
    <mutant id="mutant_253" viable="false" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)" from="filename == null" to="filename &lt;= null" />
    <mutant id="mutant_254" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)" from="magicNumber == null" to="true" />
    <mutant id="mutant_255" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(firstGT == (-1))" to="(firstGT &gt;= (-1))" />
    <mutant id="mutant_256" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="ch0 == '~'" to="true" />
    <mutant id="mutant_250" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size &lt;= prefix" to="size == prefix" />
    <mutant id="mutant_251" viable="true" in="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)" from="(str1 == null)" to="true" />
    <mutant id="mutant_252" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)" from="filter == null" to="filter &lt; null" />
    <mutant id="mutant_268" viable="false" in="org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)" from="(running) == false" to="(running) &gt;= false" />
    <mutant id="mutant_269" viable="false" in="org.apache.commons.io.output.XmlStreamWriter(java.io.OutputStream,java.lang.String)" from="defaultEncoding != null" to="defaultEncoding &gt; null" />
    <mutant id="mutant_264" viable="false" in="org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)" from="(dir != null)" to="(dir &lt;= null)" />
    <mutant id="mutant_265" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(defaultEncoding) == null" to="(defaultEncoding) &gt; null" />
    <mutant id="mutant_266" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" from="((children.length) &gt; 1)" to="((children.length) &lt; 1)" />
    <mutant id="mutant_267" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="bytes &lt; 0" to="bytes != 0" />
    <mutant id="mutant_260" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="avail &gt; (Integer.MAX_VALUE)" to="avail == (Integer.MAX_VALUE)" />
    <mutant id="mutant_261" viable="false" in="org.apache.commons.io.output.DeferredFileOutputStream(int,java.lang.String,java.lang.String,java.io.File)" from="prefix == null" to="prefix &lt; null" />
    <mutant id="mutant_262" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posWin == (FilenameUtils.NOT_FOUND)" to="true" />
    <mutant id="mutant_263" viable="false" in="org.apache.commons.io.IOUtils.buffer(java.io.InputStream,int)" from="inputStream == null" to="inputStream &gt;= null" />
    <mutant id="mutant_279" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="reference == null" to="reference != null" />
    <mutant id="mutant_270" viable="false" in="org.apache.commons.io.input.AutoCloseInputStream.afterRead(int)" from="n == (IOUtils.EOF)" to="n &gt; (IOUtils.EOF)" />
    <mutant id="mutant_275" viable="false" in="org.apache.commons.io.input.BOMInputStream.readFirstBytes()" from="(fbIndex) &lt; (fbLength)" to="(fbIndex) &gt;= (fbLength)" />
    <mutant id="mutant_276" viable="false" in="org.apache.commons.io.input.BOMInputStream.read()" from="b &gt;= 0" to="true" />
    <mutant id="mutant_277" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[i]) == separator)" to="true" />
    <mutant id="mutant_278" viable="false" in="org.apache.commons.io.output.ProxyWriter.write(char[])" from="chr != null" to="chr &gt; null" />
    <mutant id="mutant_271" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="((length) != origLength)" to="((length) &lt;= origLength)" />
    <mutant id="mutant_272" viable="false" in="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" from="i &lt; (bom.length())" to="true" />
    <mutant id="mutant_273" viable="false" in="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])" from="(boms == null)" to="true" />
    <mutant id="mutant_274" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="firstGT == (-1)" to="false" />
    <mutant id="mutant_280" viable="false" in="org.apache.commons.io.output.StringBuilderWriter(java.lang.StringBuilder)" from="builder != null" to="builder &lt; null" />
    <mutant id="mutant_281" viable="false" in="org.apache.commons.io.IOUtils.write(char[],java.io.Writer)" from="data != null" to="data &lt;= null" />
    <mutant id="mutant_286" viable="false" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="directoryFilter != null" to="directoryFilter &lt; null" />
    <mutant id="mutant_287" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" from="size &gt; (Integer.MAX_VALUE)" to="size &gt;= (Integer.MAX_VALUE)" />
    <mutant id="mutant_288" viable="false" in="?" from="((osName.indexOf(&quot;sun os&quot;)) != (-1))" to="false" />
    <mutant id="mutant_289" viable="true" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)" from="(FilenameUtils.indexOfExtension(filename)) == (FilenameUtils.NOT_FOUND)" to="true" />
    <mutant id="mutant_282" viable="false" in="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])" from="(boms == null)" to="(boms &gt;= null)" />
    <mutant id="mutant_283" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(IOUtils.EOF) == count" to="(IOUtils.EOF) &lt;= count" />
    <mutant id="mutant_284" viable="false" in="org.apache.commons.io.IOUtils.closeQuietly(java.net.ServerSocket)" from="sock != null" to="true" />
    <mutant id="mutant_285" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="(b &gt;= 0)" to="(b &lt; 0)" />
    <mutant id="mutant_290" viable="false" in="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)" from="(str1 == null)" to="(str1 &gt; null)" />
    <mutant id="mutant_291" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="filter == null" to="filter &gt;= null" />
    <mutant id="mutant_292" viable="false" in="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" from="filename == null" to="filename &gt; null" />
    <mutant id="mutant_297" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="true" />
    <mutant id="mutant_298" viable="false" in="org.apache.commons.io.input.BOMInputStream$1.compare(org.apache.commons.io.ByteOrderMark,org.apache.commons.io.ByteOrderMark)" from="len2 &gt; len1" to="false" />
    <mutant id="mutant_299" viable="true" in="org.apache.commons.io.ByteOrderMark.toString()" from="i &lt; (bytes.length)" to="i &lt;= (bytes.length)" />
    <mutant id="mutant_293" viable="false" in="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)" from="count &gt; (Integer.MAX_VALUE)" to="count &lt; (Integer.MAX_VALUE)" />
    <mutant id="mutant_294" viable="true" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="(defaultEncoding) == null" to="(defaultEncoding) != null" />
    <mutant id="mutant_295" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="(index &lt; 0)" to="(index &gt; 0)" />
    <mutant id="mutant_296" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(ch0 &lt;= 'Z')" to="false" />
    <mutant id="mutant_27" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((buf.charAt(k)) == ',')" to="((buf.charAt(k)) &lt;= ',')" />
    <mutant id="mutant_26" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="remaining &gt; 0" to="true" />
    <mutant id="mutant_29" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="files == null" to="files &lt;= null" />
    <mutant id="mutant_28" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="i &gt; (-1)" to="i != (-1)" />
    <mutant id="mutant_21" viable="true" in="org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)" from="index == (FilenameUtils.NOT_FOUND)" to="index &lt;= (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_20" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(newLineMatchByteCount = getNewLineMatchByteCount(data, i)) &gt; 0" to="(newLineMatchByteCount = getNewLineMatchByteCount(data, i)) &lt;= 0" />
    <mutant id="mutant_23" viable="true" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])" from="filename == null" to="false" />
    <mutant id="mutant_22" viable="false" in="org.apache.commons.io.input.ProxyReader.read()" from="c != (IOUtils.EOF)" to="false" />
    <mutant id="mutant_25" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="i &lt; num" to="i &lt;= num" />
    <mutant id="mutant_24" viable="false" in="org.apache.commons.io.output.DemuxOutputStream.close()" from="null != output" to="null &gt;= output" />
    <mutant id="mutant_16" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="length &gt; 0" to="length &lt;= 0" />
    <mutant id="mutant_15" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="(firstBytes) == null" to="false" />
    <mutant id="mutant_18" viable="false" in="org.apache.commons.io.FilenameUtils.directoryContains(java.lang.String,java.lang.String)" from="canonicalChild == null" to="canonicalChild &gt; null" />
    <mutant id="mutant_17" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="leftOverOfLastFilePart != null" to="false" />
    <mutant id="mutant_19" viable="true" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="index == (FilenameUtils.NOT_FOUND)" to="index != (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_10" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(defaultEncoding) == null" to="true" />
    <mutant id="mutant_12" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream(int)" from="size &lt; 0" to="size &gt;= 0" />
    <mutant id="mutant_11" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="prevChar != '*'" to="true" />
    <mutant id="mutant_14" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(backtrack.size()) &gt; 0" to="(backtrack.size()) != 0" />
    <mutant id="mutant_13" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="i &lt; (urls.length)" to="false" />
    <mutant id="mutant_49" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i &lt; size" to="i != size" />
    <mutant id="mutant_48" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="len == 0" to="len != 0" />
    <mutant id="mutant_41" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posWin == 2)" to="(posWin &lt;= 2)" />
    <mutant id="mutant_40" viable="false" in="org.apache.commons.io.IOUtils.closeQuietly(java.net.ServerSocket)" from="sock != null" to="sock &lt;= null" />
    <mutant id="mutant_43" viable="false" in="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)" from="file == null" to="true" />
    <mutant id="mutant_42" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String,long)" from="offset &lt; 0" to="false" />
    <mutant id="mutant_45" viable="false" in="org.apache.commons.io.IOUtils.buffer(java.io.InputStream)" from="inputStream == null" to="inputStream &lt;= null" />
    <mutant id="mutant_44" viable="false" in="org.apache.commons.io.input.TeeInputStream.read()" from="ch != (IOUtils.EOF)" to="false" />
    <mutant id="mutant_47" viable="false" in="org.apache.commons.io.filefilter.AndFileFilter(java.util.List)" from="fileFilters == null" to="fileFilters &lt;= null" />
    <mutant id="mutant_46" viable="false" in="org.apache.commons.io.filefilter.RegexFileFilter(java.util.regex.Pattern)" from="pattern == null" to="pattern &lt;= null" />
    <mutant id="mutant_50" viable="true" in="org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)" from="(path == null)" to="(path != null)" />
    <mutant id="mutant_38" viable="false" in="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" from="(filter1 == null)" to="(filter1 &gt; null)" />
    <mutant id="mutant_37" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 2)]) == '.')" to="true" />
    <mutant id="mutant_39" viable="true" in="org.apache.commons.io.ThreadMonitor.start(java.lang.Thread,long)" from="timeout &gt; 0" to="timeout == 0" />
    <mutant id="mutant_30" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(IOUtils.EOF) == count" to="false" />
    <mutant id="mutant_32" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="length &gt; position" to="length != position" />
    <mutant id="mutant_31" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" from="(files.length) &gt; 0" to="true" />
    <mutant id="mutant_34" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="index &lt; 0" to="index == 0" />
    <mutant id="mutant_33" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(charset == (Charsets.UTF_16LE))" to="(charset &gt;= (Charsets.UTF_16LE))" />
    <mutant id="mutant_36" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="(IOUtils.EOF) != ch" to="false" />
    <mutant id="mutant_35" viable="false" in="org.apache.commons.io.IOUtils.buffer(java.io.InputStream,int)" from="inputStream == null" to="inputStream != null" />
    <mutant id="mutant_63" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlEnc != null)" to="true" />
    <mutant id="mutant_62" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="(prefix &gt;= (filename.length()))" to="false" />
    <mutant id="mutant_65" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(newLineMatchByteCount = getNewLineMatchByteCount(data, i)) &gt; 0" to="(newLineMatchByteCount = getNewLineMatchByteCount(data, i)) != 0" />
    <mutant id="mutant_64" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="((comparator.compare(entry.getFile(), files[c])) == 0)" to="false" />
    <mutant id="mutant_67" viable="false" in="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.nio.charset.Charset)" from="data != null" to="data &lt;= null" />
    <mutant id="mutant_66" viable="true" in="org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)" from="((path.indexOf(FilenameUtils.WINDOWS_SEPARATOR)) == (FilenameUtils.NOT_FOUND))" to="((path.indexOf(FilenameUtils.WINDOWS_SEPARATOR)) &gt; (FilenameUtils.NOT_FOUND))" />
    <mutant id="mutant_69" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="i &lt; (array.length)" to="i &gt; (array.length)" />
    <mutant id="mutant_68" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="offset != size" to="false" />
    <mutant id="mutant_70" viable="false" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="encoding == null" to="encoding &lt;= null" />
    <mutant id="mutant_72" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="n &lt; 0" to="n &lt;= 0" />
    <mutant id="mutant_71" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="c == (IOUtils.EOF)" to="true" />
    <mutant id="mutant_59" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="result &gt; (Integer.MAX_VALUE)" to="result == (Integer.MAX_VALUE)" />
    <mutant id="mutant_52" viable="false" in="org.apache.commons.io.output.StringBuilderWriter.write(java.lang.String)" from="value != null" to="value &gt; null" />
    <mutant id="mutant_51" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()" from="(written) &gt; (threshold)" to="(written) != (threshold)" />
    <mutant id="mutant_54" viable="true" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename1 == null)" to="(filename1 != null)" />
    <mutant id="mutant_53" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" from="(((written) + count) &gt; (threshold))" to="false" />
    <mutant id="mutant_56" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity != null" />
    <mutant id="mutant_55" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="(reader == null)" to="(reader &gt; null)" />
    <mutant id="mutant_58" viable="false" in="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)" from="fileExistedAlready == false" to="fileExistedAlready &gt; false" />
    <mutant id="mutant_57" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((path.length()) &gt; 0)" to="((path.length()) &lt; 0)" />
    <mutant id="mutant_61" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="null != exception" to="null &gt; exception" />
    <mutant id="mutant_60" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(destDir.canWrite()) == false" to="(destDir.canWrite()) &gt;= false" />
    <mutant id="mutant_1432" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="lastBlockLength &gt; 0" to="lastBlockLength &lt; 0" />
    <mutant id="mutant_1433" viable="false" in="org.apache.commons.io.IOUtils.buffer(java.io.OutputStream)" from="outputStream == null" to="outputStream &gt; null" />
    <mutant id="mutant_1430" viable="false" in="org.apache.commons.io.input.CountingInputStream.afterRead(int)" from="n != (IOUtils.EOF)" to="n &gt; (IOUtils.EOF)" />
    <mutant id="mutant_1431" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)" from="(IOUtils.EOF) != ch" to="true" />
    <mutant id="mutant_1438" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((path.length()) &gt; 0)" to="((path.length()) == 0)" />
    <mutant id="mutant_1439" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read()" from="(idx) &gt;= (charSequence.length())" to="true" />
    <mutant id="mutant_1436" viable="false" in="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)" from="data == null" to="data &lt; null" />
    <mutant id="mutant_1437" viable="true" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="(bytes.length) != (bom.length())" to="(bytes.length) == (bom.length())" />
    <mutant id="mutant_1434" viable="true" in="org.apache.commons.io.filefilter.OrFileFilter.toString()" from="i &lt; (fileFilters.size())" to="i != (fileFilters.size())" />
    <mutant id="mutant_1435" viable="false" in="org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter,boolean)" from="found != null" to="true" />
    <mutant id="mutant_1421" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="src == null" to="false" />
    <mutant id="mutant_1422" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="prevChar != '*'" to="false" />
    <mutant id="mutant_1420" viable="false" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &lt; null" />
    <mutant id="mutant_1429" viable="false" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(wildcardMatcher == null)" to="(wildcardMatcher &lt;= null)" />
    <mutant id="mutant_1427" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()" from="(written) &gt; (threshold)" to="(written) &lt;= (threshold)" />
    <mutant id="mutant_1428" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()" from="target == '\r'" to="false" />
    <mutant id="mutant_1425" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)" from="i &lt; 8" to="i == 8" />
    <mutant id="mutant_1426" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="c == (IOUtils.EOF)" to="c &lt; (IOUtils.EOF)" />
    <mutant id="mutant_1423" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(url.charAt(i)) == '%'" to="true" />
    <mutant id="mutant_1424" viable="false" in="org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)" from="data != null" to="false" />
    <mutant id="mutant_1410" viable="false" in="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)" from="count &gt; (Integer.MAX_VALUE)" to="false" />
    <mutant id="mutant_1411" viable="false" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="(defaultEncoding) == null" to="(defaultEncoding) &gt; null" />
    <mutant id="mutant_1418" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(c &lt; (files.length))" to="(c == (files.length))" />
    <mutant id="mutant_1419" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,long)" from="j &lt; 8" to="j &lt;= 8" />
    <mutant id="mutant_1416" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(bytes.position()) &gt; 0" to="(bytes.position()) &lt;= 0" />
    <mutant id="mutant_1417" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="index &lt; 0" to="index != 0" />
    <mutant id="mutant_1414" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="(line1 != null)" to="(line1 &lt; null)" />
    <mutant id="mutant_1415" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="path == null" to="false" />
    <mutant id="mutant_1412" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)" from="file == null" to="file &gt;= null" />
    <mutant id="mutant_1413" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="(charsRead) &gt;= (maxCharsFromTargetReader)" to="false" />
    <mutant id="mutant_1409" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(java.lang.String)" from="i &gt;= 0" to="i &lt;= 0" />
    <mutant id="mutant_1400" viable="true" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="filename == null" to="false" />
    <mutant id="mutant_1407" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="((urls.length) == 0)" to="((urls.length) != 0)" />
    <mutant id="mutant_1408" viable="false" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename1 == null)" to="(filename1 &gt; null)" />
    <mutant id="mutant_1405" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="size &lt; 0" to="size == 0" />
    <mutant id="mutant_1406" viable="false" in="org.apache.commons.io.filefilter.NameFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="names == null" to="names &gt;= null" />
    <mutant id="mutant_1403" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="path == null" to="path &lt; null" />
    <mutant id="mutant_1404" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="charset == (Charsets.UTF_8)" to="false" />
    <mutant id="mutant_1401" viable="false" in="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" from="(filter1 == null)" to="(filter1 &gt;= null)" />
    <mutant id="mutant_1402" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="bytesRead &gt; 0" to="true" />
    <mutant id="mutant_602" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)" from="lines == null" to="lines &lt; null" />
    <mutant id="mutant_603" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="(ch == '*')" to="(ch &lt;= '*')" />
    <mutant id="mutant_604" viable="false" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="filename == null" to="filename &gt; null" />
    <mutant id="mutant_605" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="i &lt; (firstBytes.length)" to="i == (firstBytes.length)" />
    <mutant id="mutant_600" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="charset == (Charsets.UTF_8)" to="charset &gt; (Charsets.UTF_8)" />
    <mutant id="mutant_601" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlEnc != null)" to="false" />
    <mutant id="mutant_1480" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable,T)" from="file == null" to="true" />
    <mutant id="mutant_606" viable="true" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="fileFilter != null" to="fileFilter == null" />
    <mutant id="mutant_607" viable="false" in="?" from="((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))" to="((osName.indexOf(&quot;mpe/ix&quot;)) &lt;= (-1))" />
    <mutant id="mutant_608" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(idx) &gt;= (charSequence.length())" to="true" />
    <mutant id="mutant_609" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="destDir == null" to="destDir != null" />
    <mutant id="mutant_1476" viable="false" in="org.apache.commons.io.FileUtils.sizeOfDirectoryBig0(java.io.File)" from="files == null" to="false" />
    <mutant id="mutant_1477" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" from="(fileFilter) == null" to="(fileFilter) &gt;= null" />
    <mutant id="mutant_1474" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix == (FilenameUtils.NOT_FOUND)" to="posUnix &gt;= (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_1475" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="((url.charAt(i)) == '%')" to="((url.charAt(i)) &lt;= '%')" />
    <mutant id="mutant_1472" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="httpContentType != null" to="httpContentType &lt;= null" />
    <mutant id="mutant_1473" viable="false" in="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)" from="(-1) != (n = input.read(buffer))" to="false" />
    <mutant id="mutant_1470" viable="false" in="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)" from="(file != null)" to="(file &gt; null)" />
    <mutant id="mutant_1471" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="ch1 == ':'" to="false" />
    <mutant id="mutant_1478" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i &lt; (array.length)" to="i != (array.length)" />
    <mutant id="mutant_1479" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="(firstBytes) == null" to="(firstBytes) &lt; null" />
    <mutant id="mutant_613" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target == (-1)" to="target &gt;= (-1)" />
    <mutant id="mutant_614" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="src == null" to="true" />
    <mutant id="mutant_615" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="(charsRead) &gt;= (maxCharsFromTargetReader)" to="(charsRead) &gt; (maxCharsFromTargetReader)" />
    <mutant id="mutant_616" viable="true" in="org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)" from="index == (FilenameUtils.NOT_FOUND)" to="index &lt; (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_610" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO)) &gt; 0" to="(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO)) != 0" />
    <mutant id="mutant_611" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="destDir == null" to="destDir != null" />
    <mutant id="mutant_612" viable="true" in="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])" from="((bytes.length) == 0)" to="((bytes.length) &gt;= 0)" />
    <mutant id="mutant_617" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(c &lt; (files.length))" to="(c &lt;= (files.length))" />
    <mutant id="mutant_618" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" from="(files.length) &gt; 0" to="(files.length) == 0" />
    <mutant id="mutant_619" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter.toString()" from="i &lt; (names.length)" to="i &lt;= (names.length)" />
    <mutant id="mutant_1465" viable="false" in="?" from="((osName.indexOf(&quot;mac os x&quot;)) != (-1))" to="true" />
    <mutant id="mutant_1466" viable="false" in="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" from="file == null" to="file &lt; null" />
    <mutant id="mutant_1463" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="result &gt; (Integer.MAX_VALUE)" to="result &lt; (Integer.MAX_VALUE)" />
    <mutant id="mutant_1464" viable="false" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent) == null" to="(parent) &gt;= null" />
    <mutant id="mutant_1461" viable="false" in="org.apache.commons.io.FileUtils.waitFor(java.io.File,int)" from="(timeout++) &gt; seconds" to="(timeout++) &lt;= seconds" />
    <mutant id="mutant_1462" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 1)]) == '.')" to="true" />
    <mutant id="mutant_1460" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posWin == (FilenameUtils.NOT_FOUND))" to="(posWin != (FilenameUtils.NOT_FOUND))" />
    <mutant id="mutant_1469" viable="false" in="org.apache.commons.io.FileUtils.isSymlink(java.io.File)" from="file == null" to="true" />
    <mutant id="mutant_1467" viable="false" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="((exists) != origExists)" to="((exists) &lt; origExists)" />
    <mutant id="mutant_1468" viable="true" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)" from="filename == null" to="false" />
    <mutant id="mutant_624" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" from="lineEnding == null" to="true" />
    <mutant id="mutant_625" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i == (size - 1)" to="i &gt; (size - 1)" />
    <mutant id="mutant_626" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="inBufferPos == (currentBuffer.length)" to="false" />
    <mutant id="mutant_627" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="filter == null" to="filter != null" />
    <mutant id="mutant_620" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI).compareTo(BigInteger.ZERO)) &gt; 0" to="(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI).compareTo(BigInteger.ZERO)) == 0" />
    <mutant id="mutant_621" viable="false" in="org.apache.commons.io.FileCleaningTracker.exitWhenFinished()" from="(reaper) != null" to="(reaper) &gt; null" />
    <mutant id="mutant_622" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="lineLengthBytes &lt; 0" to="lineLengthBytes &gt;= 0" />
    <mutant id="mutant_623" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="((data[k]) == (newLineSequence[j]))" to="true" />
    <mutant id="mutant_628" viable="false" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &gt; null" />
    <mutant id="mutant_629" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="size == 0" to="true" />
    <mutant id="mutant_1454" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="(prefix &gt;= endIndex)" to="(prefix &lt;= endIndex)" />
    <mutant id="mutant_1455" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="cTEnc == null" to="cTEnc &gt; null" />
    <mutant id="mutant_1452" viable="false" in="org.apache.commons.io.input.BOMInputStream$1.compare(org.apache.commons.io.ByteOrderMark,org.apache.commons.io.ByteOrderMark)" from="len2 &gt; len1" to="len2 &lt;= len1" />
    <mutant id="mutant_1453" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)" from="lines == null" to="lines &lt;= null" />
    <mutant id="mutant_1450" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" from="i &lt; (files.length)" to="i &gt;= (files.length)" />
    <mutant id="mutant_1451" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="i &lt; (prefixes.length)" to="i == (prefixes.length)" />
    <mutant id="mutant_1458" viable="false" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename2 == null)" to="(filename2 &gt;= null)" />
    <mutant id="mutant_1459" viable="false" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="wildcards == null" to="wildcards &gt;= null" />
    <mutant id="mutant_1456" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 3)]) == separator)" to="true" />
    <mutant id="mutant_1457" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="inputOffset &gt; 0" to="inputOffset != 0" />
    <mutant id="mutant_635" viable="true" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(fileFilter) != null" to="(fileFilter) == null" />
    <mutant id="mutant_636" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len == 1" to="len &lt;= 1" />
    <mutant id="mutant_637" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(length &lt; 0)" to="(length &lt;= 0)" />
    <mutant id="mutant_638" viable="true" in="org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)" from="((path.indexOf(FilenameUtils.WINDOWS_SEPARATOR)) == (FilenameUtils.NOT_FOUND))" to="((path.indexOf(FilenameUtils.WINDOWS_SEPARATOR)) != (FilenameUtils.NOT_FOUND))" />
    <mutant id="mutant_631" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="null != exception" to="false" />
    <mutant id="mutant_632" viable="true" in="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])" from="(charsetName == null)" to="false" />
    <mutant id="mutant_633" viable="true" in="org.apache.commons.io.output.ChunkedWriter(java.io.Writer,int)" from="chunkSize &lt;= 0" to="chunkSize != 0" />
    <mutant id="mutant_634" viable="true" in="org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)" from="((path.indexOf(FilenameUtils.UNIX_SEPARATOR)) == (FilenameUtils.NOT_FOUND))" to="((path.indexOf(FilenameUtils.UNIX_SEPARATOR)) &gt;= (FilenameUtils.NOT_FOUND))" />
    <mutant id="mutant_639" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target == '\r'" to="target &gt;= '\r'" />
    <mutant id="mutant_1443" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" from="((children.length) &gt; 1)" to="((children.length) == 1)" />
    <mutant id="mutant_1444" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="separator == (FilenameUtils.SYSTEM_SEPARATOR)" to="separator &gt; (FilenameUtils.SYSTEM_SEPARATOR)" />
    <mutant id="mutant_1441" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(len &lt; 0)" to="(len &gt;= 0)" />
    <mutant id="mutant_1442" viable="false" in="?" from="((osName.indexOf(&quot;unix&quot;)) != (-1))" to="((osName.indexOf(&quot;unix&quot;)) &lt; (-1))" />
    <mutant id="mutant_1440" viable="false" in="org.apache.commons.io.input.BoundedInputStream.available()" from="((pos) &gt;= (max))" to="((pos) != (max))" />
    <mutant id="mutant_1449" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((buf.charAt(k)) == '.')" to="false" />
    <mutant id="mutant_630" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target == '\n'" to="target &gt; '\n'" />
    <mutant id="mutant_1447" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM()" from="(getBOM()) != null" to="(getBOM()) &gt; null" />
    <mutant id="mutant_1448" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="ch1 == ':'" to="ch1 &lt; ':'" />
    <mutant id="mutant_1445" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(len &lt; 0)" to="(len &lt;= 0)" />
    <mutant id="mutant_1446" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="(prefixes) != null" to="true" />
    <mutant id="mutant_646" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable,T)" from="files != null" to="false" />
    <mutant id="mutant_647" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,char[])" from="(IOUtils.EOF) != (n = input.read(buffer))" to="(IOUtils.EOF) == (n = input.read(buffer))" />
    <mutant id="mutant_648" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="charset == (Charset.forName(&quot;Shift_JIS&quot;))" to="charset &lt; (Charset.forName(&quot;Shift_JIS&quot;))" />
    <mutant id="mutant_649" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="length &gt; 0" to="length &lt; 0" />
    <mutant id="mutant_642" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="wcsIdx == ((wcs.length) - 1)" to="wcsIdx &gt;= ((wcs.length) - 1)" />
    <mutant id="mutant_643" viable="false" in="org.apache.commons.io.filefilter.RegexFileFilter(java.util.regex.Pattern)" from="pattern == null" to="pattern &lt; null" />
    <mutant id="mutant_644" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="filename == null" to="filename != null" />
    <mutant id="mutant_645" viable="false" in="org.apache.commons.io.output.XmlStreamWriter.close()" from="(writer) == null" to="(writer) &lt; null" />
    <mutant id="mutant_1040" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="input1 == input2" to="input1 &gt; input2" />
    <mutant id="mutant_1036" viable="true" in="org.apache.commons.io.filefilter.RegexFileFilter(java.util.regex.Pattern)" from="pattern == null" to="false" />
    <mutant id="mutant_1037" viable="true" in="org.apache.commons.io.ByteOrderMark.toString()" from="i &gt; 0" to="false" />
    <mutant id="mutant_1034" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(bytesRead == 0)" to="(bytesRead &gt;= 0)" />
    <mutant id="mutant_1035" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="(IOUtils.SKIP_CHAR_BUFFER) == null" to="false" />
    <mutant id="mutant_1032" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(url.getProtocol().equals(&quot;file&quot;)) == false" to="(url.getProtocol().equals(&quot;file&quot;)) &lt; false" />
    <mutant id="mutant_1033" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="chars_read &gt; 16" to="chars_read == 16" />
    <mutant id="mutant_1030" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((path.charAt(0)) != '\&quot;')" to="((path.charAt(0)) == '\&quot;')" />
    <mutant id="mutant_1031" viable="false" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="wildcard == null" to="wildcard &lt;= null" />
    <mutant id="mutant_640" viable="true" in="org.apache.commons.io.output.ChunkedWriter.write(char[],int,int)" from="bytes &gt; 0" to="bytes == 0" />
    <mutant id="mutant_641" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="proc != null" to="proc == null" />
    <mutant id="mutant_1038" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc == null)" to="(xmlGuessEnc &lt; null)" />
    <mutant id="mutant_1039" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((destFile.canWrite()) == false)" to="((destFile.canWrite()) &lt;= false)" />
    <mutant id="mutant_657" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[(i - 2)]) == separator)" to="((array[(i - 2)]) &lt;= separator)" />
    <mutant id="mutant_658" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="srcDir == null" to="false" />
    <mutant id="mutant_659" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="c == (-1)" to="true" />
    <mutant id="mutant_653" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="(charsRead) &gt;= (maxCharsFromTargetReader)" to="true" />
    <mutant id="mutant_654" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" from="lastSeparator &gt; extensionPos" to="lastSeparator == extensionPos" />
    <mutant id="mutant_655" viable="true" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="wildcards == null" to="wildcards != null" />
    <mutant id="mutant_656" viable="false" in="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])" from="(boms == null)" to="(boms &gt; null)" />
    <mutant id="mutant_1025" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="ch != ch2" to="ch &gt; ch2" />
    <mutant id="mutant_1026" viable="false" in="org.apache.commons.io.output.DeferredFileOutputStream(int,java.lang.String,java.lang.String,java.io.File)" from="prefix == null" to="prefix &gt; null" />
    <mutant id="mutant_1023" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((destDir.isDirectory()) == false)" to="((destDir.isDirectory()) &lt;= false)" />
    <mutant id="mutant_1024" viable="false" in="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.nio.charset.Charset)" from="data != null" to="data &gt;= null" />
    <mutant id="mutant_1021" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.skip(long)" from="((available()) &gt; 0)" to="false" />
    <mutant id="mutant_1022" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(srcFile.exists()) == false" to="(srcFile.exists()) != false" />
    <mutant id="mutant_1020" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO)) &gt; 0" to="true" />
    <mutant id="mutant_650" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" from="lines == null" to="true" />
    <mutant id="mutant_651" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" from="(files.length) &gt; 0" to="false" />
    <mutant id="mutant_652" viable="false" in="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" from="path == null" to="path &gt;= null" />
    <mutant id="mutant_1029" viable="true" in="org.apache.commons.io.filefilter.EmptyFileFilter.accept(java.io.File)" from="(file.length()) == 0" to="(file.length()) &lt; 0" />
    <mutant id="mutant_1027" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readBoolean()" from="0 != (readByte())" to="0 &lt; (readByte())" />
    <mutant id="mutant_1028" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="(index &lt; 0)" to="(index == 0)" />
    <mutant id="mutant_668" viable="false" in="org.apache.commons.io.output.DemuxOutputStream.flush()" from="null != output" to="null &gt; output" />
    <mutant id="mutant_669" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((lines.size()) &lt; max)" to="false" />
    <mutant id="mutant_664" viable="true" in="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,int)" from="pattern == null" to="true" />
    <mutant id="mutant_665" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)" from="lineEnding == null" to="lineEnding &lt; null" />
    <mutant id="mutant_666" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="((IOUtils.EOF) != (read = input.read(buffer, 0, bytesToRead)))" to="((IOUtils.EOF) &lt;= (read = input.read(buffer, 0, bytesToRead)))" />
    <mutant id="mutant_667" viable="false" in="org.apache.commons.io.FileCleaningTracker$Reaper.run()" from="((trackers.size()) &gt; 0)" to="false" />
    <mutant id="mutant_1014" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size &lt;= prefix" to="size &gt; prefix" />
    <mutant id="mutant_1498" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc != null)" to="true" />
    <mutant id="mutant_1015" viable="false" in="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" from="line != null" to="true" />
    <mutant id="mutant_1499" viable="false" in="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable[])" from="closeables == null" to="closeables &gt;= null" />
    <mutant id="mutant_1012" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix == (FilenameUtils.NOT_FOUND)" to="posUnix &gt;= (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_1496" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posWin == 2)" to="(posWin &gt;= 2)" />
    <mutant id="mutant_1013" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" from="children == null" to="false" />
    <mutant id="mutant_1497" viable="true" in="org.apache.commons.io.ByteOrderMark.getBytes()" from="i &lt; (bytes.length)" to="i == (bytes.length)" />
    <mutant id="mutant_1010" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="(currentBuffer) == null" to="true" />
    <mutant id="mutant_1494" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" from="((comparator) != null)" to="((comparator) &gt;= null)" />
    <mutant id="mutant_1011" viable="false" in="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" from="(bom.get(i)) != (firstBytes[i])" to="false" />
    <mutant id="mutant_1495" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(this.cbuf.position()) != 0" to="(this.cbuf.position()) &gt;= 0" />
    <mutant id="mutant_1492" viable="false" in="org.apache.commons.io.monitor.FileAlterationMonitor.addObserver(org.apache.commons.io.monitor.FileAlterationObserver)" from="observer != null" to="observer &lt; null" />
    <mutant id="mutant_1493" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlEnc == null)" to="(xmlEnc &lt; null)" />
    <mutant id="mutant_660" viable="true" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="(bytes[i]) != (bom.get(i))" to="true" />
    <mutant id="mutant_661" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="j &lt; (data.length)" to="j == (data.length)" />
    <mutant id="mutant_662" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="result &gt; 0" to="result &lt; 0" />
    <mutant id="mutant_663" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="false" />
    <mutant id="mutant_1018" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="n == (IOUtils.EOF)" to="n &gt;= (IOUtils.EOF)" />
    <mutant id="mutant_1019" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="prefix &lt; 0" to="false" />
    <mutant id="mutant_1016" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="result &lt; 0" to="result &gt; 0" />
    <mutant id="mutant_1017" viable="true" in="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)" from="(str1 == null)" to="(str1 != null)" />
    <mutant id="mutant_679" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="(childDepth &lt;= (depthLimit))" to="true" />
    <mutant id="mutant_675" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posWin == (FilenameUtils.NOT_FOUND))" to="(posWin &lt;= (FilenameUtils.NOT_FOUND))" />
    <mutant id="mutant_676" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i == (prefix + 2)" to="false" />
    <mutant id="mutant_677" viable="true" in="org.apache.commons.io.LineIterator.hasNext()" from="line == null" to="true" />
    <mutant id="mutant_678" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(this.cbuf.position()) != 0" to="(this.cbuf.position()) &lt;= 0" />
    <mutant id="mutant_1490" viable="false" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlEnc != null)" to="(xmlEnc &gt;= null)" />
    <mutant id="mutant_1491" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)" from="file == null" to="file &lt; null" />
    <mutant id="mutant_1003" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="remain &gt; 0" to="true" />
    <mutant id="mutant_1487" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(line.length()) &gt; 0" to="(line.length()) &lt; 0" />
    <mutant id="mutant_1004" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="true" />
    <mutant id="mutant_1488" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="((destDir.isDirectory()) == false)" to="((destDir.isDirectory()) &gt;= false)" />
    <mutant id="mutant_1001" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="((destDir.isDirectory()) == false)" to="((destDir.isDirectory()) != false)" />
    <mutant id="mutant_1485" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((srcFiles.length) &gt; 0)" to="true" />
    <mutant id="mutant_1002" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="result &lt; 0" to="false" />
    <mutant id="mutant_1486" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="name == null" to="name != null" />
    <mutant id="mutant_1483" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(xmlProlog.length()) &gt;= (XmlStreamWriter.BUFFER_SIZE)" to="false" />
    <mutant id="mutant_1000" viable="false" in="org.apache.commons.io.comparator.NameFileComparator(org.apache.commons.io.IOCase)" from="caseSensitivity == null" to="caseSensitivity &gt; null" />
    <mutant id="mutant_1484" viable="false" in="?" from="((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))" to="((osName.indexOf(&quot;mpe/ix&quot;)) &gt;= (-1))" />
    <mutant id="mutant_1481" viable="false" in="org.apache.commons.io.comparator.AbstractFileComparator.sort(java.io.File[])" from="files != null" to="files &gt; null" />
    <mutant id="mutant_1482" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="((comparator.compare(entry.getFile(), files[c])) == 0)" to="((comparator.compare(entry.getFile(), files[c])) &lt; 0)" />
    <mutant id="mutant_671" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((lines.size()) &gt;= 3)" to="((lines.size()) != 3)" />
    <mutant id="mutant_672" viable="true" in="org.apache.commons.io.FilenameUtils.isSeparator(char)" from="(ch == (FilenameUtils.UNIX_SEPARATOR))" to="(ch &lt; (FilenameUtils.UNIX_SEPARATOR))" />
    <mutant id="mutant_673" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)" from="remaining == 0" to="remaining &lt;= 0" />
    <mutant id="mutant_1009" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="result &gt; (Integer.MAX_VALUE)" to="result &gt;= (Integer.MAX_VALUE)" />
    <mutant id="mutant_674" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="textIdx == (FilenameUtils.NOT_FOUND)" to="textIdx != (FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_1007" viable="false" in="org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)" from="(path == null)" to="(path &gt;= null)" />
    <mutant id="mutant_1008" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="inBufferPos == (currentBuffer.length)" to="inBufferPos &gt;= (currentBuffer.length)" />
    <mutant id="mutant_1005" viable="false" in="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])" from="((boms.length) == 0)" to="((boms.length) &lt; 0)" />
    <mutant id="mutant_1489" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(c != ',')" to="(c &gt; ',')" />
    <mutant id="mutant_670" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(array[i]) == otherSeparator" to="true" />
    <mutant id="mutant_1006" viable="false" in="org.apache.commons.io.EndianUtils.read(java.io.InputStream)" from="(IOUtils.EOF) == value" to="(IOUtils.EOF) &lt; value" />
  </mutants>
</mutation>
