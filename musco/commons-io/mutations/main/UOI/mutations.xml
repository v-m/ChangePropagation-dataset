<?xml version="1.0" encoding="UTF-8"?>
<mutation operator-id="UOI" parent="../../../smf.run.xml" name="main" config-file="mutations.xml" time="73761">
  <class-to-mutate />
  <mutants>
    <mutant id="mutant_569" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="((&quot;Skip count must be non-negative, actual: &quot; + toSkip) - 1)" />
    <mutant id="mutant_565" viable="true" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_566" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_567" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j) - ((newLineSequence.length) - 1)" to="((i + j) - ((newLineSequence.length) - 1)) - 1" />
    <mutant id="mutant_568" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="((size - i) + 1)" />
    <mutant id="mutant_561" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_562" viable="false" in="?" from="(((((osName.indexOf(&quot;linux&quot;)) != (-1)) || ((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))) || ((osName.indexOf(&quot;freebsd&quot;)) != (-1))) || ((osName.indexOf(&quot;irix&quot;)) != (-1)))" to="(!(((((osName.indexOf(&quot;linux&quot;)) != (-1)) || ((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))) || ((osName.indexOf(&quot;freebsd&quot;)) != (-1))) || ((osName.indexOf(&quot;irix&quot;)) != (-1))))" />
    <mutant id="mutant_563" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="((xmlEnc != null) &amp;&amp; (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32))))" to="(!((xmlEnc != null) &amp;&amp; (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32)))))" />
    <mutant id="mutant_564" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="(((&quot;Command line did not return any info &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + 1)" />
    <mutant id="mutant_560" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="(newcount - (filledBufferSum))" to="((newcount - (filledBufferSum)) - 1)" />
    <mutant id="mutant_576" viable="true" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="((&quot;write(&quot; + b) + &quot;) failed: stream is closed&quot;)" to="(((&quot;write(&quot; + b) + &quot;) failed: stream is closed&quot;) + 1)" />
    <mutant id="mutant_577" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1) - prefix" to="((i + 1) - prefix) - 1" />
    <mutant id="mutant_578" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc != null) &amp;&amp; (!(xmlGuessEnc.equals(bomEnc)))" to="!((xmlGuessEnc != null) &amp;&amp; (!(xmlGuessEnc.equals(bomEnc))))" />
    <mutant id="mutant_579" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_GB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_GB)) - 1" />
    <mutant id="mutant_572" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="((&quot;The byte count &quot; + result) * -1)" />
    <mutant id="mutant_573" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(charset == (Charsets.UTF_16BE)) || (charset == (Charsets.UTF_16LE))" to="!((charset == (Charsets.UTF_16BE)) || (charset == (Charsets.UTF_16LE)))" />
    <mutant id="mutant_574" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="length - ((int)(((position) - (size))))" to="(length - ((int)(((position) - (size))))) - 1" />
    <mutant id="mutant_575" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((((off &lt; 0) || (off &gt; (b.length))) || (len &lt; 0)) || ((off + len) &gt; (b.length))) || ((off + len) &lt; 0)" to="!(((((off &lt; 0) || (off &gt; (b.length))) || (len &lt; 0)) || ((off + len) &gt; (b.length))) || ((off + len) &lt; 0))" />
    <mutant id="mutant_570" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="((max) - (pos))" to="(((max) - (pos)) - 1)" />
    <mutant id="mutant_571" viable="true" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="((super.toString()) + &quot;[&quot;)" to="(((super.toString()) + &quot;[&quot;) + 1)" />
    <mutant id="mutant_107" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) * -1)" />
    <mutant id="mutant_108" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="(currentLastBytePos) + 1" to="((currentLastBytePos) + 1) * -1" />
    <mutant id="mutant_109" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="((newLineSequence.length) - 1)" to="(((newLineSequence.length) - 1) + 1)" />
    <mutant id="mutant_103" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)" from="((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)" to="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) * -1" />
    <mutant id="mutant_587" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' exists but is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' exists but is not a directory&quot;) - 1)" />
    <mutant id="mutant_104" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((len &lt; 0) || (off &lt; 0)) || ((off + len) &gt; (b.length))" to="!(((len &lt; 0) || (off &lt; 0)) || ((off + len) &gt; (b.length)))" />
    <mutant id="mutant_588" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Failed to list contents of &quot; + srcDir)" to="((&quot;Failed to list contents of &quot; + srcDir) + 1)" />
    <mutant id="mutant_105" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 2)" to="((offset + 2) + 1)" />
    <mutant id="mutant_589" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="((end - start) * -1)" />
    <mutant id="mutant_106" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(&quot;XML prolog or ROOT element not found on first &quot; + offset)" to="((&quot;XML prolog or ROOT element not found on first &quot; + offset) + 1)" />
    <mutant id="mutant_1298" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="((int)(((position) - (size))))" to="(((int)(((position) - (size)))) * -1)" />
    <mutant id="mutant_1299" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="((((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;) - 1)" />
    <mutant id="mutant_1296" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="(&quot;Not a directory: &quot; + directory)" to="((&quot;Not a directory: &quot; + directory) * -1)" />
    <mutant id="mutant_1297" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) + (this.mark_cbuf))" to="((((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) + (this.mark_cbuf)) - 1)" />
    <mutant id="mutant_1294" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16))" to="((((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) + 1)" />
    <mutant id="mutant_1295" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + 1)" />
    <mutant id="mutant_583" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="((&quot;The byte count &quot; + result) + 1)" />
    <mutant id="mutant_100" viable="false" in="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="length - (buffer.remaining())" to="(length - (buffer.remaining())) * -1" />
    <mutant id="mutant_584" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(offset + location)" to="((offset + location) + 1)" />
    <mutant id="mutant_101" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;)" to="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + 1)" />
    <mutant id="mutant_585" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((c != (-1)) &amp;&amp; (firstGT == (-1)))" to="(!((c != (-1)) &amp;&amp; (firstGT == (-1))))" />
    <mutant id="mutant_102" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI))) + &quot; GB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI))) + &quot; GB&quot;) - 1" />
    <mutant id="mutant_586" viable="false" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not find lockDir: &quot; + (lockDir.getAbsolutePath()))" to="((&quot;Could not find lockDir: &quot; + (lockDir.getAbsolutePath())) * -1)" />
    <mutant id="mutant_580" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' exists but is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' exists but is not a directory&quot;) + 1)" />
    <mutant id="mutant_581" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) * -1)" />
    <mutant id="mutant_582" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;)" to="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) - 1)" />
    <mutant id="mutant_118" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) + timeout)" to="(((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) + timeout) + 1)" />
    <mutant id="mutant_119" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 6)" to="((offset + 6) - 1)" />
    <mutant id="mutant_114" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE))" to="!((bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE)))" />
    <mutant id="mutant_598" viable="false" in="org.apache.commons.io.FileUtils.sizeOf(java.io.File)" from="file + &quot; does not exist&quot;" to="(file + &quot; does not exist&quot;) - 1" />
    <mutant id="mutant_115" viable="false" in="org.apache.commons.io.IOCase.forName(java.lang.String)" from="(&quot;Invalid IOCase name: &quot; + name)" to="((&quot;Invalid IOCase name: &quot; + name) * -1)" />
    <mutant id="mutant_599" viable="false" in="?" from="(((((((osName.indexOf(&quot;linux&quot;)) != (-1)) || ((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))) || ((osName.indexOf(&quot;freebsd&quot;)) != (-1))) || ((osName.indexOf(&quot;irix&quot;)) != (-1))) || ((osName.indexOf(&quot;digital unix&quot;)) != (-1))) || ((osName.indexOf(&quot;unix&quot;)) != (-1)))" to="(!(((((((osName.indexOf(&quot;linux&quot;)) != (-1)) || ((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))) || ((osName.indexOf(&quot;freebsd&quot;)) != (-1))) || ((osName.indexOf(&quot;irix&quot;)) != (-1))) || ((osName.indexOf(&quot;digital unix&quot;)) != (-1))) || ((osName.indexOf(&quot;unix&quot;)) != (-1))))" />
    <mutant id="mutant_116" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="((&quot;Skip count must be non-negative, actual: &quot; + toSkip) * -1)" />
    <mutant id="mutant_117" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) * -1)" />
    <mutant id="mutant_1292" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="((((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)) + 1" />
    <mutant id="mutant_1293" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="((&quot;Destination directory \'&quot; + destDir) * -1)" />
    <mutant id="mutant_1290" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) + (this.mark_cbuf))" to="((((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) + (this.mark_cbuf)) * -1)" />
    <mutant id="mutant_1291" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="(sumDirectoryContents) &amp;&amp; (file1.exists())" to="!((sumDirectoryContents) &amp;&amp; (file1.exists()))" />
    <mutant id="mutant_1289" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i &lt; n) &amp;&amp; ((url.charAt(i)) == '%')" to="!((i &lt; n) &amp;&amp; ((url.charAt(i)) == '%'))" />
    <mutant id="mutant_1287" viable="false" in="org.apache.commons.io.FileUtils.touch(java.io.File)" from="(&quot;Unable to set the last modification time for &quot; + file)" to="((&quot;Unable to set the last modification time for &quot; + file) + 1)" />
    <mutant id="mutant_1288" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) + (Arrays.asList(cmdAttribs)))" to="((((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) + (Arrays.asList(cmdAttribs))) + 1)" />
    <mutant id="mutant_1285" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="((pos + i) + 1) - 1" />
    <mutant id="mutant_1286" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)" from="((short)((((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) + (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)))" to="((short)(((((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) + (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)))) - 1" />
    <mutant id="mutant_1283" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="((end - start) - 1)" />
    <mutant id="mutant_1284" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j)" to="((i + j) + 1)" />
    <mutant id="mutant_110" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + 1)" />
    <mutant id="mutant_594" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;) - 1)" />
    <mutant id="mutant_111" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_595" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="(((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;) + 1)" />
    <mutant id="mutant_112" viable="false" in="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="length - (buffer.remaining())" to="(length - (buffer.remaining())) + 1" />
    <mutant id="mutant_596" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' exists but is a directory&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' exists but is a directory&quot;) - 1)" />
    <mutant id="mutant_113" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + src) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + src) + &quot;\' does not exist&quot;) * -1)" />
    <mutant id="mutant_597" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory) + &quot;.&quot;" to="((&quot;Unable to delete directory &quot; + directory) + &quot;.&quot;) * -1" />
    <mutant id="mutant_590" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(&quot;Buffer size &quot; + bufferSize)" to="((&quot;Buffer size &quot; + bufferSize) - 1)" />
    <mutant id="mutant_591" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="((high &lt;&lt; 24) + (4294967295L &amp; low)) - 1" />
    <mutant id="mutant_592" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + 1)" />
    <mutant id="mutant_593" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j) - ((newLineSequence.length) - 1)" to="((i + j) - ((newLineSequence.length) - 1)) + 1" />
    <mutant id="mutant_129" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 2)" to="((offset + 2) - 1)" />
    <mutant id="mutant_125" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(off + size)" to="((off + size) - 1)" />
    <mutant id="mutant_126" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + length)" to="((offset + length) + 1)" />
    <mutant id="mutant_127" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="(((&quot;Command line did not return any info &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) * -1)" />
    <mutant id="mutant_128" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="((((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual) - 1)" />
    <mutant id="mutant_121" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(!(parent.mkdirs())) &amp;&amp; (!(parent.isDirectory()))" to="!((!(parent.mkdirs())) &amp;&amp; (!(parent.isDirectory())))" />
    <mutant id="mutant_122" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(posUnix == (FilenameUtils.NOT_FOUND)) &amp;&amp; (posWin == (FilenameUtils.NOT_FOUND))" to="!((posUnix == (FilenameUtils.NOT_FOUND)) &amp;&amp; (posWin == (FilenameUtils.NOT_FOUND)))" />
    <mutant id="mutant_123" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) - 1)" />
    <mutant id="mutant_124" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="((position) - (size))" to="(((position) - (size)) * -1)" />
    <mutant id="mutant_120" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="(&quot;Not a directory: &quot; + directory)" to="((&quot;Not a directory: &quot; + directory) + 1)" />
    <mutant id="mutant_136" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="((k + j) * -1)" />
    <mutant id="mutant_137" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="((int)(((position) - (size))))" to="(((int)(((position) - (size)))) * -1)" />
    <mutant id="mutant_138" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;) - 1)" />
    <mutant id="mutant_139" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(data.length) - j" to="((data.length) - j) * -1" />
    <mutant id="mutant_132" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 2)" to="((offset + 2) * -1)" />
    <mutant id="mutant_133" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((mark) + (readlimit))" to="(((mark) + (readlimit)) + 1)" />
    <mutant id="mutant_134" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="((end - start) + 1)" />
    <mutant id="mutant_135" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="((&quot;Length must not be negative: &quot; + length) * -1)" />
    <mutant id="mutant_130" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 0)" to="((offset + 0) * -1)" />
    <mutant id="mutant_131" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(destFile.exists()) &amp;&amp; ((destFile.canWrite()) == false)" to="!((destFile.exists()) &amp;&amp; ((destFile.canWrite()) == false))" />
    <mutant id="mutant_147" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_TB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_TB)) + 1" />
    <mutant id="mutant_148" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="firstCount + secondCount" to="(firstCount + secondCount) + 1" />
    <mutant id="mutant_149" viable="false" in="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="length - (buffer.remaining())" to="(length - (buffer.remaining())) - 1" />
    <mutant id="mutant_143" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + parentFile)" to="((&quot;Destination \'&quot; + parentFile) - 1)" />
    <mutant id="mutant_144" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="numberOfBytes - ((position) - (size))" to="(numberOfBytes - ((position) - (size))) + 1" />
    <mutant id="mutant_145" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="((&quot;The byte count &quot; + result) - 1)" />
    <mutant id="mutant_146" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="((size - i) + 1)" />
    <mutant id="mutant_140" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Failed to delete original file \'&quot; + srcFile)" to="((&quot;Failed to delete original file \'&quot; + srcFile) + 1)" />
    <mutant id="mutant_141" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((totalByteLength) / blockSize) + 1" to="(((totalByteLength) / blockSize) + 1) + 1" />
    <mutant id="mutant_142" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="((&quot;Destination \'&quot; + destFile) + 1)" />
    <mutant id="mutant_158" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;) + 1)" />
    <mutant id="mutant_159" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream(int)" from="(&quot;Negative initial size: &quot; + size)" to="((&quot;Negative initial size: &quot; + size) - 1)" />
    <mutant id="mutant_154" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="&quot;.&quot; + (extensions[i])" to="(&quot;.&quot; + (extensions[i])) - 1" />
    <mutant id="mutant_155" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile)" to="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) * -1)" />
    <mutant id="mutant_156" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 5)" to="((offset + 5) + 1)" />
    <mutant id="mutant_157" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)) + 1" />
    <mutant id="mutant_150" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) + (currentLastBytePos))" to="(((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) + (currentLastBytePos)) * -1)" />
    <mutant id="mutant_151" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="((size - 1) - 1)" />
    <mutant id="mutant_152" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 3)" to="((offset + 3) * -1)" />
    <mutant id="mutant_153" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) - 1)" />
    <mutant id="mutant_169" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - j" to="(i - j) * -1" />
    <mutant id="mutant_160" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; + (new String(leftOver , encoding)))" to="((&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; + (new String(leftOver , encoding))) + 1)" />
    <mutant id="mutant_165" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;)" to="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) - 1)" />
    <mutant id="mutant_166" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) * -1)" />
    <mutant id="mutant_167" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="((count) + 1)" to="(((count) + 1) - 1)" />
    <mutant id="mutant_168" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(&quot;URL could not be converted to a File: &quot; + url)" to="((&quot;URL could not be converted to a File: &quot; + url) * -1)" />
    <mutant id="mutant_161" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + 1)" />
    <mutant id="mutant_162" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(&quot;Unexpected negative line length=&quot; + lineLengthBytes)" to="((&quot;Unexpected negative line length=&quot; + lineLengthBytes) * -1)" />
    <mutant id="mutant_163" viable="false" in="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)" from="(&quot;Deletion failed: &quot; + fileToDelete)" to="((&quot;Deletion failed: &quot; + fileToDelete) - 1)" />
    <mutant id="mutant_164" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(&quot;Number of characters to skip is less than zero: &quot; + n)" to="((&quot;Number of characters to skip is less than zero: &quot; + n) + 1)" />
    <mutant id="mutant_170" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path)" to="((&quot;\&quot;&quot; + path) * -1)" />
    <mutant id="mutant_171" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) + lines)" to="(((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) + lines) + 1)" />
    <mutant id="mutant_176" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) - 1)" />
    <mutant id="mutant_177" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(&quot;Marked position [&quot; + (mark))" to="((&quot;Marked position [&quot; + (mark)) - 1)" />
    <mutant id="mutant_178" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) + 1)" />
    <mutant id="mutant_179" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="(length - remaining) * -1" />
    <mutant id="mutant_172" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) - 1)" />
    <mutant id="mutant_173" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) + (Arrays.asList(cmdAttribs)))" to="((((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) + (Arrays.asList(cmdAttribs))) * -1)" />
    <mutant id="mutant_174" viable="true" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) + 1)" />
    <mutant id="mutant_175" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + src)" to="((&quot;Source \'&quot; + src) - 1)" />
    <mutant id="mutant_180" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="((&quot;Destination \'&quot; + destFile) + 1)" />
    <mutant id="mutant_181" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(firstGT + 1)" to="((firstGT + 1) * -1)" />
    <mutant id="mutant_182" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; is not a directory&quot;" to="(directory + &quot; is not a directory&quot;) - 1" />
    <mutant id="mutant_187" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory)" to="((&quot;Unable to delete directory &quot; + directory) - 1)" />
    <mutant id="mutant_188" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) + &quot; PB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) + &quot; PB&quot;) + 1" />
    <mutant id="mutant_189" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(XmlStreamWriter.BUFFER_SIZE) - (xmlProlog.length())" to="((XmlStreamWriter.BUFFER_SIZE) - (xmlProlog.length())) - 1" />
    <mutant id="mutant_183" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)" from="((short)((((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) + (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)))" to="((short)(((((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) + (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)))) * -1" />
    <mutant id="mutant_184" viable="false" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) + &quot; exists&quot;)" to="(((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) + &quot; exists&quot;) - 1)" />
    <mutant id="mutant_185" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_186" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((int)((totalByteLength) % blockSize))" to="((int)(((totalByteLength) % blockSize))) * -1" />
    <mutant id="mutant_190" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" from="(&quot;Stream not configure to detect &quot; + bom)" to="((&quot;Stream not configure to detect &quot; + bom) + 1)" />
    <mutant id="mutant_191" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip - remain" to="(toSkip - remain) + 1" />
    <mutant id="mutant_192" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1) - prefix" to="((i + 1) - prefix) * -1" />
    <mutant id="mutant_193" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + 1)" />
    <mutant id="mutant_198" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile)" to="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) - 1)" />
    <mutant id="mutant_199" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="lenient &amp;&amp; (xmlEnc != null)" to="!(lenient &amp;&amp; (xmlEnc != null))" />
    <mutant id="mutant_194" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="((i - 2) - 1)" />
    <mutant id="mutant_195" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="(ch == '?') || (ch == '*')" to="!((ch == '?') || (ch == '*'))" />
    <mutant id="mutant_196" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="dest - (idx)" to="(dest - (idx)) + 1" />
    <mutant id="mutant_197" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(&quot;Buffer size &quot; + bufferSize)" to="((&quot;Buffer size &quot; + bufferSize) * -1)" />
    <mutant id="mutant_1719" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) - 1)" />
    <mutant id="mutant_1717" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) + &quot; PB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) + &quot; PB&quot;) - 1" />
    <mutant id="mutant_1718" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16))" to="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) * -1)" />
    <mutant id="mutant_1715" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) + &quot;\'&quot;)" to="(((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) + &quot;\'&quot;) + 1)" />
    <mutant id="mutant_1716" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' cannot be written to&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' cannot be written to&quot;) - 1)" />
    <mutant id="mutant_1713" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(wcsIdx == (wcs.length)) &amp;&amp; (textIdx == (filename.length()))" to="!((wcsIdx == (wcs.length)) &amp;&amp; (textIdx == (filename.length())))" />
    <mutant id="mutant_1714" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="(currentLastBytePos) + 1" to="((currentLastBytePos) + 1) + 1" />
    <mutant id="mutant_1711" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(filename == null) &amp;&amp; (wildcardMatcher == null)" to="!((filename == null) &amp;&amp; (wildcardMatcher == null))" />
    <mutant id="mutant_1712" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(&quot;Encoding &quot; + encoding)" to="((&quot;Encoding &quot; + encoding) + 1)" />
    <mutant id="mutant_1710" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 0)" to="((offset + 0) * -1)" />
    <mutant id="mutant_1708" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;)" to="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) * -1)" />
    <mutant id="mutant_1709" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 3)" to="((offset + 3) - 1)" />
    <mutant id="mutant_1706" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="(((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;) + 1)" />
    <mutant id="mutant_1707" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8))" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) * -1)" />
    <mutant id="mutant_1704" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)) - 1" />
    <mutant id="mutant_1705" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path) + &quot;\&quot;&quot;" to="((&quot;\&quot;&quot; + path) + &quot;\&quot;&quot;) + 1" />
    <mutant id="mutant_1702" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="(prefix + 1) + 1" />
    <mutant id="mutant_1703" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen)" to="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) - 1)" />
    <mutant id="mutant_1700" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) - 1)" />
    <mutant id="mutant_1701" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="((size - i) - 1)" />
    <mutant id="mutant_1751" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI))) + &quot; MB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI))) + &quot; MB&quot;) * -1" />
    <mutant id="mutant_1752" viable="false" in="?" from="(((((((osName.indexOf(&quot;linux&quot;)) != (-1)) || ((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))) || ((osName.indexOf(&quot;freebsd&quot;)) != (-1))) || ((osName.indexOf(&quot;irix&quot;)) != (-1))) || ((osName.indexOf(&quot;digital unix&quot;)) != (-1))) || ((osName.indexOf(&quot;unix&quot;)) != (-1))) || ((osName.indexOf(&quot;mac os x&quot;)) != (-1))" to="!((((((((osName.indexOf(&quot;linux&quot;)) != (-1)) || ((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))) || ((osName.indexOf(&quot;freebsd&quot;)) != (-1))) || ((osName.indexOf(&quot;irix&quot;)) != (-1))) || ((osName.indexOf(&quot;digital unix&quot;)) != (-1))) || ((osName.indexOf(&quot;unix&quot;)) != (-1))) || ((osName.indexOf(&quot;mac os x&quot;)) != (-1)))" />
    <mutant id="mutant_1750" viable="true" in="org.apache.commons.io.FilenameUtils.getName(java.lang.String)" from="(index + 1)" to="((index + 1) - 1)" />
    <mutant id="mutant_1757" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_1755" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 5)" to="((offset + 5) - 1)" />
    <mutant id="mutant_1756" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="((&quot;Bytes to skip must not be negative: &quot; + toSkip) + 1)" />
    <mutant id="mutant_1753" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 3)" to="((i + 3) + 1)" />
    <mutant id="mutant_1754" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;) + 1)" />
    <mutant id="mutant_1740" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 2)" to="((offset + 2) - 1)" />
    <mutant id="mutant_1741" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8))" to="((((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) * -1)" />
    <mutant id="mutant_1748" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path)" to="((&quot;\&quot;&quot; + path) + 1)" />
    <mutant id="mutant_1749" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="(size) - (position)" to="((size) - (position)) + 1" />
    <mutant id="mutant_1746" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="((Math.min(posUnix, posWin)) + 1) - 1" />
    <mutant id="mutant_1747" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Failed to copy full contents from \'&quot; + srcFile)" to="((&quot;Failed to copy full contents from \'&quot; + srcFile) + 1)" />
    <mutant id="mutant_1744" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;)" to="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + 1)" />
    <mutant id="mutant_1745" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(offset + location)" to="((offset + location) - 1)" />
    <mutant id="mutant_1742" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) + 1)" />
    <mutant id="mutant_1743" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) * -1)" />
    <mutant id="mutant_900" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) + actual)" to="((((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) + actual) * -1)" />
    <mutant id="mutant_901" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size + 2" to="(size + 2) * -1" />
    <mutant id="mutant_902" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8))" to="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) - 1)" />
    <mutant id="mutant_1739" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="((&quot;The byte count &quot; + result) - 1)" />
    <mutant id="mutant_907" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;) + &quot;not a directory. Unable to create directory.&quot;" to="(((&quot;File &quot; + directory) + &quot; exists and is &quot;) + &quot;not a directory. Unable to create directory.&quot;) - 1" />
    <mutant id="mutant_908" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length)" to="((offset + length) + 1)" />
    <mutant id="mutant_909" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="((Math.min(posUnix, posWin)) + 1) * -1" />
    <mutant id="mutant_903" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="((charsRead) - (markedAt))" to="(((charsRead) - (markedAt)) + 1)" />
    <mutant id="mutant_904" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) * -1)" />
    <mutant id="mutant_905" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; is not a directory&quot;)" to="((directory + &quot; is not a directory&quot;) * -1)" />
    <mutant id="mutant_906" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(textIdx + 1)" to="((textIdx + 1) + 1)" />
    <mutant id="mutant_1730" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) + timeout)" to="(((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) + timeout) - 1)" />
    <mutant id="mutant_1737" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;Directory \'&quot; + parent)" to="((&quot;Directory \'&quot; + parent) + 1)" />
    <mutant id="mutant_1738" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) * -1)" />
    <mutant id="mutant_1735" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Cannot move directory: &quot; + srcDir)" to="((&quot;Cannot move directory: &quot; + srcDir) + 1)" />
    <mutant id="mutant_1736" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="((high &lt;&lt; 24) + (4294967295L &amp; low)) + 1" />
    <mutant id="mutant_1733" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="(off + i)" to="((off + i) + 1)" />
    <mutant id="mutant_1734" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="((((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual) - 1)" />
    <mutant id="mutant_1731" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(!(this.bbuf.hasRemaining())) &amp;&amp; (!(this.cbuf.hasRemaining()))" to="!((!(this.bbuf.hasRemaining())) &amp;&amp; (!(this.cbuf.hasRemaining())))" />
    <mutant id="mutant_1732" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) * -1)" />
    <mutant id="mutant_910" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Size must be equal or greater than zero: &quot; + size)" to="((&quot;Size must be equal or greater than zero: &quot; + size) + 1)" />
    <mutant id="mutant_911" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + 1)" />
    <mutant id="mutant_912" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(lines.size()) - 1" to="((lines.size()) - 1) - 1" />
    <mutant id="mutant_913" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="((&quot;The byte count &quot; + result) - 1)" />
    <mutant id="mutant_1728" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(&quot;URL could not be converted to a File: &quot; + url)" to="((&quot;URL could not be converted to a File: &quot; + url) - 1)" />
    <mutant id="mutant_1729" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 4)" to="((offset + 4) + 1)" />
    <mutant id="mutant_918" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.read()" from="previousWasSlashR &amp;&amp; (slashNSeen)" to="!(previousWasSlashR &amp;&amp; (slashNSeen))" />
    <mutant id="mutant_919" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;)" to="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) * -1)" />
    <mutant id="mutant_914" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) * -1)" />
    <mutant id="mutant_915" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;) - 1)" />
    <mutant id="mutant_916" viable="false" in="org.apache.commons.io.EndianUtils.swapShort(short)" from="((short)((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)))" to="((short)(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)))) * -1" />
    <mutant id="mutant_917" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(offset &lt; size) &amp;&amp; ((readed = input.read(data, offset, (size - offset))) != (IOUtils.EOF))" to="!((offset &lt; size) &amp;&amp; ((readed = input.read(data, offset, (size - offset))) != (IOUtils.EOF)))" />
    <mutant id="mutant_1726" viable="true" in="org.apache.commons.io.FileDeleteStrategy.deleteQuietly(java.io.File)" from="(fileToDelete == null) || ((fileToDelete.exists()) == false)" to="!((fileToDelete == null) || ((fileToDelete.exists()) == false))" />
    <mutant id="mutant_1727" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="(count) - (filledBufferSum)" to="((count) - (filledBufferSum)) + 1" />
    <mutant id="mutant_1724" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) - 1)" />
    <mutant id="mutant_1725" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;)" to="(((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) * -1)" />
    <mutant id="mutant_1722" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((&quot;Encoding &quot; + encoding) + &quot; is not supported yet (feel free to submit a patch)&quot;)" to="(((&quot;Encoding &quot; + encoding) + &quot; is not supported yet (feel free to submit a patch)&quot;) + 1)" />
    <mutant id="mutant_1723" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 5)" to="((offset + 5) + 1)" />
    <mutant id="mutant_1720" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(&quot;Unexpected negative line length=&quot; + lineLengthBytes)" to="((&quot;Unexpected negative line length=&quot; + lineLengthBytes) - 1)" />
    <mutant id="mutant_1721" viable="false" in="?" from="(((osName.indexOf(&quot;sun os&quot;)) != (-1)) || ((osName.indexOf(&quot;sunos&quot;)) != (-1))) || ((osName.indexOf(&quot;solaris&quot;)) != (-1))" to="!((((osName.indexOf(&quot;sun os&quot;)) != (-1)) || ((osName.indexOf(&quot;sunos&quot;)) != (-1))) || ((osName.indexOf(&quot;solaris&quot;)) != (-1)))" />
    <mutant id="mutant_921" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="((i - 2) * -1)" />
    <mutant id="mutant_922" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="((short)((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)))" to="((short)(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)))) + 1" />
    <mutant id="mutant_923" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i - newLineMatchByteCount" to="(i - newLineMatchByteCount) - 1" />
    <mutant id="mutant_924" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="index + separatorAdd" to="(index + separatorAdd) * -1" />
    <mutant id="mutant_920" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is read-only&quot;)" to="(((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is read-only&quot;) + 1)" />
    <mutant id="mutant_929" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="(size) - (position)" to="((size) - (position)) - 1" />
    <mutant id="mutant_925" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) - 1)" />
    <mutant id="mutant_926" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + destDir)" to="((&quot;Source \'&quot; + destDir) + 1)" />
    <mutant id="mutant_927" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) + 1)" />
    <mutant id="mutant_928" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="index + (includeSeparator ? 1 : 0)" to="(index + (includeSeparator ? 1 : 0)) * -1" />
    <mutant id="mutant_1311" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;)" to="((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + 1)" />
    <mutant id="mutant_1312" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="((&quot;Destination \'&quot; + destFile) - 1)" />
    <mutant id="mutant_1310" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + delegate) + &quot;)&quot;) - 1" />
    <mutant id="mutant_1319" viable="true" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="((file.getName()) + (LockableFileWriter.LCK))" to="(((file.getName()) + (LockableFileWriter.LCK)) + 1)" />
    <mutant id="mutant_1317" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="(position + c)" to="((position + c) + 1)" />
    <mutant id="mutant_1318" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(j + 1)" to="((j + 1) - 1)" />
    <mutant id="mutant_1315" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; is not a directory&quot;" to="(directory + &quot; is not a directory&quot;) * -1" />
    <mutant id="mutant_1316" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="((&quot;Bytes to skip: &quot; + toSkip) - 1)" />
    <mutant id="mutant_1313" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 3)" to="((i + 3) - 1)" />
    <mutant id="mutant_1314" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(len - size)" to="((len - size) * -1)" />
    <mutant id="mutant_932" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="((&quot;Skip count must be non-negative, actual: &quot; + toSkip) * -1)" />
    <mutant id="mutant_933" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="((size - 1) + 1)" />
    <mutant id="mutant_934" viable="true" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not write to lockDir: &quot; + (lockDir.getAbsolutePath()))" to="((&quot;Could not write to lockDir: &quot; + (lockDir.getAbsolutePath())) + 1)" />
    <mutant id="mutant_935" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' exists but is a directory&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' exists but is a directory&quot;) * -1)" />
    <mutant id="mutant_930" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16))" to="((((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) - 1)" />
    <mutant id="mutant_931" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(newLineSequence.length) - 1" to="((newLineSequence.length) - 1) - 1" />
    <mutant id="mutant_936" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;Directory \'&quot; + parent) + &quot;\' could not be created&quot;)" to="(((&quot;Directory \'&quot; + parent) + &quot;\' could not be created&quot;) - 1)" />
    <mutant id="mutant_937" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(length - totalRead)" to="((length - totalRead) - 1)" />
    <mutant id="mutant_938" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + 1)" />
    <mutant id="mutant_939" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_1300" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 0)" to="((offset + 0) * -1)" />
    <mutant id="mutant_1301" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory)" to="((&quot;Unable to delete directory &quot; + directory) + 1)" />
    <mutant id="mutant_1308" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="((Math.min(posUnix, posWin)) + 1) * -1" />
    <mutant id="mutant_1309" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc != null) &amp;&amp; (!(xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_8)))" to="!((xmlGuessEnc != null) &amp;&amp; (!(xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_8))))" />
    <mutant id="mutant_1306" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;)" to="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) * -1)" />
    <mutant id="mutant_1307" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(offset + location)" to="((offset + location) * -1)" />
    <mutant id="mutant_1304" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 3)" to="((offset + 3) + 1)" />
    <mutant id="mutant_1305" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;)" to="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) * -1)" />
    <mutant id="mutant_1302" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="(prefix + 1) * -1" />
    <mutant id="mutant_1303" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;)" to="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) * -1)" />
    <mutant id="mutant_943" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(&quot;Length to read: &quot; + length)" to="((&quot;Length to read: &quot; + length) * -1)" />
    <mutant id="mutant_944" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) - 1)" />
    <mutant id="mutant_945" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="((&quot;Failed to list contents of &quot; + directory) - 1)" />
    <mutant id="mutant_946" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="(((lastCoderResult) == null) || (lastCoderResult.isUnderflow()))" to="(!(((lastCoderResult) == null) || (lastCoderResult.isUnderflow())))" />
    <mutant id="mutant_940" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(getRun()) &amp;&amp; ((num = reader.read(inbuf)) != (IOUtils.EOF))" to="!((getRun()) &amp;&amp; ((num = reader.read(inbuf)) != (IOUtils.EOF)))" />
    <mutant id="mutant_941" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="(length - remaining) * -1" />
    <mutant id="mutant_942" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="((Math.min(posUnix, posWin)) + 1) + 1" />
    <mutant id="mutant_947" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 7)" to="((offset + 7) + 1)" />
    <mutant id="mutant_948" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + parentFile) + &quot;\' directory cannot be created&quot;)" to="(((&quot;Destination \'&quot; + parentFile) + &quot;\' directory cannot be created&quot;) + 1)" />
    <mutant id="mutant_949" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) - 1)" />
    <mutant id="mutant_954" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(size - offset)" to="((size - offset) - 1)" />
    <mutant id="mutant_955" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="((xmlEnc != null) &amp;&amp; (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32)))) &amp;&amp; (!(xmlEnc.equals(bomEnc)))" to="!(((xmlEnc != null) &amp;&amp; (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32)))) &amp;&amp; (!(xmlEnc.equals(bomEnc))))" />
    <mutant id="mutant_956" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_957" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="((&quot;The byte count &quot; + result) * -1)" />
    <mutant id="mutant_950" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + 1)" />
    <mutant id="mutant_951" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) + &quot;]&quot;" to="((((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_952" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) + len" to="((count) + len) + 1" />
    <mutant id="mutant_953" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) * -1)" />
    <mutant id="mutant_958" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8))" to="((((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) - 1)" />
    <mutant id="mutant_959" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) + 1)" />
    <mutant id="mutant_965" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_966" viable="true" in="org.apache.commons.io.input.BoundedReader.mark(int)" from="readAheadLimit - (charsRead)" to="(readAheadLimit - (charsRead)) * -1" />
    <mutant id="mutant_967" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;) + 1)" />
    <mutant id="mutant_968" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((i == (prefix + 2)) || ((array[(i - 3)]) == separator))" to="(!((i == (prefix + 2)) || ((array[(i - 3)]) == separator)))" />
    <mutant id="mutant_961" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; does not exist&quot;" to="(directory + &quot; does not exist&quot;) + 1" />
    <mutant id="mutant_962" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) * -1)" />
    <mutant id="mutant_963" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(line.length()) - 1" to="((line.length()) - 1) + 1" />
    <mutant id="mutant_964" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc == null) || (xmlEnc == null)" to="!((xmlGuessEnc == null) || (xmlEnc == null))" />
    <mutant id="mutant_969" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="(&quot;The filter[&quot; + i)" to="((&quot;The filter[&quot; + i) * -1)" />
    <mutant id="mutant_1355" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) - 1)" />
    <mutant id="mutant_1356" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(!(destDir.exists())) &amp;&amp; createDestDir" to="!((!(destDir.exists())) &amp;&amp; createDestDir)" />
    <mutant id="mutant_1353" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) + 1)" />
    <mutant id="mutant_1354" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;) * -1)" />
    <mutant id="mutant_1351" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(&quot;XML prolog or ROOT element not found on first &quot; + offset)" to="((&quot;XML prolog or ROOT element not found on first &quot; + offset) - 1)" />
    <mutant id="mutant_1352" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + '/')" to="((basePath + '/') + 1)" />
    <mutant id="mutant_1350" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + parentFile)" to="((&quot;Destination \'&quot; + parentFile) * -1)" />
    <mutant id="mutant_960" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line did not return any info &quot; + &quot;for command &quot;)" to="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) - 1)" />
    <mutant id="mutant_1359" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir)" to="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) - 1)" />
    <mutant id="mutant_1357" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) - 1)" />
    <mutant id="mutant_1358" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 7)" to="((offset + 7) - 1)" />
    <mutant id="mutant_976" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" from="(!(thresholdExceeded)) &amp;&amp; (((written) + count) &gt; (threshold))" to="!((!(thresholdExceeded)) &amp;&amp; (((written) + count) &gt; (threshold)))" />
    <mutant id="mutant_977" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="(cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32BE)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32LE))" to="!((cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32BE)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32LE)))" />
    <mutant id="mutant_978" viable="false" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="((&quot;write(&quot; + b) + &quot;) failed: stream is closed&quot;)" to="(((&quot;write(&quot; + b) + &quot;) failed: stream is closed&quot;) * -1)" />
    <mutant id="mutant_979" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 2" to="(prefix + 2) + 1" />
    <mutant id="mutant_972" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16))" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) - 1)" />
    <mutant id="mutant_973" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="((&quot;Array Size=&quot; + (b.length)) + 1)" />
    <mutant id="mutant_974" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) + 1)" />
    <mutant id="mutant_975" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) + destDir)" to="((((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) + destDir) - 1)" />
    <mutant id="mutant_1344" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" from="(&quot;Stream not configure to detect &quot; + bom)" to="((&quot;Stream not configure to detect &quot; + bom) * -1)" />
    <mutant id="mutant_1345" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path)" to="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) - 1)" />
    <mutant id="mutant_1342" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 3)" to="((i + 3) * -1)" />
    <mutant id="mutant_1343" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="((&quot;The filter[&quot; + i) + &quot;] is null&quot;)" to="(((&quot;The filter[&quot; + i) + &quot;] is null&quot;) + 1)" />
    <mutant id="mutant_1340" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(off + size)" to="((off + size) * -1)" />
    <mutant id="mutant_1341" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;) + 1)" />
    <mutant id="mutant_970" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_TB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_TB)) - 1" />
    <mutant id="mutant_971" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((encoding.length()) - 1)" to="(((encoding.length()) - 1) + 1)" />
    <mutant id="mutant_1348" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="((prefix + 2) + 1)" />
    <mutant id="mutant_1349" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="&quot;.&quot; + (extensions[i])" to="(&quot;.&quot; + (extensions[i])) + 1" />
    <mutant id="mutant_1346" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) * -1)" />
    <mutant id="mutant_1347" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset)" to="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) * -1)" />
    <mutant id="mutant_503" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="((size - 1) - 1)" />
    <mutant id="mutant_987" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="((&quot;Destination directory \'&quot; + destDir) + 1)" />
    <mutant id="mutant_504" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; is not a directory&quot;)" to="((directory + &quot; is not a directory&quot;) + 1)" />
    <mutant id="mutant_988" viable="true" in="org.apache.commons.io.input.BoundedReader.mark(int)" from="readAheadLimit - (charsRead)" to="(readAheadLimit - (charsRead)) - 1" />
    <mutant id="mutant_505" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(count) - (filledBufferSum)" to="((count) - (filledBufferSum)) + 1" />
    <mutant id="mutant_989" viable="true" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename1 == null) &amp;&amp; (filename2 == null)" to="!((filename1 == null) &amp;&amp; (filename2 == null))" />
    <mutant id="mutant_506" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="(file1.lastModified()) - (file2.lastModified())" to="((file1.lastModified()) - (file2.lastModified())) * -1" />
    <mutant id="mutant_983" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 3)" to="((offset + 3) * -1)" />
    <mutant id="mutant_500" viable="true" in="org.apache.commons.io.input.XmlStreamReader.isAppXml(java.lang.String)" from="((mime.startsWith(&quot;application/&quot;)) &amp;&amp; (mime.endsWith(&quot;+xml&quot;)))" to="(!((mime.startsWith(&quot;application/&quot;)) &amp;&amp; (mime.endsWith(&quot;+xml&quot;))))" />
    <mutant id="mutant_984" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(firstGT + 1)" to="((firstGT + 1) + 1)" />
    <mutant id="mutant_501" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="(file1.lastModified()) - (file2.lastModified())" to="((file1.lastModified()) - (file2.lastModified())) - 1" />
    <mutant id="mutant_985" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) - 1)" />
    <mutant id="mutant_502" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) - 1)" />
    <mutant id="mutant_986" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line did not return any info &quot; + &quot;for command &quot;)" to="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) * -1)" />
    <mutant id="mutant_507" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 7)" to="((offset + 7) * -1)" />
    <mutant id="mutant_508" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) * -1)" />
    <mutant id="mutant_509" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) * -1)" />
    <mutant id="mutant_1333" viable="false" in="org.apache.commons.io.FileExistsException(java.io.File)" from="((&quot;File &quot; + file) + &quot; exists&quot;)" to="(((&quot;File &quot; + file) + &quot; exists&quot;) - 1)" />
    <mutant id="mutant_1334" viable="false" in="?" from="1024 * 4" to="(1024 * 4) * -1" />
    <mutant id="mutant_1331" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + 1)" />
    <mutant id="mutant_1332" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="(j + 1) - 1" />
    <mutant id="mutant_1330" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((&quot;XML prolog or ROOT element not found on first &quot; + offset) + &quot; bytes&quot;)" to="(((&quot;XML prolog or ROOT element not found on first &quot; + offset) + &quot; bytes&quot;) * -1)" />
    <mutant id="mutant_980" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="((int)(((position) - (size))))" to="(((int)(((position) - (size)))) + 1)" />
    <mutant id="mutant_981" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="length - ((int)(((position) - (size))))" to="(length - ((int)(((position) - (size))))) + 1" />
    <mutant id="mutant_1339" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) + dstLen)" to="((((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) + dstLen) + 1)" />
    <mutant id="mutant_982" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="&quot;.&quot; + (extensions[i])" to="(&quot;.&quot; + (extensions[i])) * -1" />
    <mutant id="mutant_1337" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(offset + location)" to="((offset + location) + 1)" />
    <mutant id="mutant_1338" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="((i - 2) * -1)" />
    <mutant id="mutant_1335" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' is a directory&quot;)" to="(((&quot;Destination \'&quot; + destFile) + &quot;\' is a directory&quot;) * -1)" />
    <mutant id="mutant_1336" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="(((currentBuffer.length) - inBufferPos) * -1)" />
    <mutant id="mutant_514" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' exists but is not a directory&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' exists but is not a directory&quot;) + 1)" />
    <mutant id="mutant_998" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="(str.length()) - (search.length())" to="((str.length()) - (search.length())) * -1" />
    <mutant id="mutant_515" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) + 1)" />
    <mutant id="mutant_999" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - j" to="(i - j) - 1" />
    <mutant id="mutant_516" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) * -1)" />
    <mutant id="mutant_517" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) * -1)" />
    <mutant id="mutant_510" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="((idx) + n)" to="(((idx) + n) + 1)" />
    <mutant id="mutant_994" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_511" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + 1)" />
    <mutant id="mutant_995" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) + &quot;\' are the same&quot;)" to="(((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) + &quot;\' are the same&quot;) - 1)" />
    <mutant id="mutant_512" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="(str.length()) - (search.length())" to="((str.length()) - (search.length())) + 1" />
    <mutant id="mutant_996" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) + &quot; KB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) + &quot; KB&quot;) - 1" />
    <mutant id="mutant_513" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="((((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped) - 1)" />
    <mutant id="mutant_997" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((totalByteLength) / blockSize)" to="(((totalByteLength) / blockSize) - 1)" />
    <mutant id="mutant_518" viable="true" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) + 1)" />
    <mutant id="mutant_519" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((mark) + (readlimit))" to="(((mark) + (readlimit)) - 1)" />
    <mutant id="mutant_1322" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(bytesToRead &gt; 0) &amp;&amp; ((IOUtils.EOF) != (read = input.read(buffer, 0, bytesToRead)))" to="!((bytesToRead &gt; 0) &amp;&amp; ((IOUtils.EOF) != (read = input.read(buffer, 0, bytesToRead))))" />
    <mutant id="mutant_1323" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="((text.indexOf('?')) == (FilenameUtils.NOT_FOUND)) &amp;&amp; ((text.indexOf('*')) == (FilenameUtils.NOT_FOUND))" to="!(((text.indexOf('?')) == (FilenameUtils.NOT_FOUND)) &amp;&amp; ((text.indexOf('*')) == (FilenameUtils.NOT_FOUND)))" />
    <mutant id="mutant_1320" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset)" to="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) - 1)" />
    <mutant id="mutant_1321" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="&quot;dir /a /-c &quot; + path" to="(&quot;dir /a /-c &quot; + path) * -1" />
    <mutant id="mutant_990" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path)" to="(((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) * -1)" />
    <mutant id="mutant_991" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;)" to="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) - 1)" />
    <mutant id="mutant_992" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="(!(directory.exists())) || (!(child.exists()))" to="!((!(directory.exists())) || (!(child.exists())))" />
    <mutant id="mutant_1328" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) + &quot; PB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI))) + &quot; PB&quot;) * -1" />
    <mutant id="mutant_993" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_1329" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="depth + 1" to="(depth + 1) + 1" />
    <mutant id="mutant_1326" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size)) + &quot; bytes&quot;" to="((String.valueOf(size)) + &quot; bytes&quot;) + 1" />
    <mutant id="mutant_1327" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((path.length()) &gt; 0) &amp;&amp; ((path.charAt(0)) != '\&quot;')" to="!(((path.length()) &gt; 0) &amp;&amp; ((path.charAt(0)) != '\&quot;'))" />
    <mutant id="mutant_1324" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="((&quot;Destination directory \'&quot; + destDir) + 1)" />
    <mutant id="mutant_1325" viable="true" in="org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)" from="(dir != null) &amp;&amp; (new File(dir , name).isDirectory())" to="!((dir != null) &amp;&amp; (new File(dir , name).isDirectory()))" />
    <mutant id="mutant_525" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="((((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) * -1)" />
    <mutant id="mutant_526" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;Directory \'&quot; + parent) + &quot;\' could not be created&quot;)" to="(((&quot;Directory \'&quot; + parent) + &quot;\' could not be created&quot;) * -1)" />
    <mutant id="mutant_527" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="(count) - (filledBufferSum)" to="((count) - (filledBufferSum)) - 1" />
    <mutant id="mutant_528" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48))" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + 1)" />
    <mutant id="mutant_521" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) * -1)" />
    <mutant id="mutant_522" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="((((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)) - 1" />
    <mutant id="mutant_523" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="((pos + i) + 1)" />
    <mutant id="mutant_524" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(&quot;Chars to skip: &quot; + toSkip)" to="((&quot;Chars to skip: &quot; + toSkip) + 1)" />
    <mutant id="mutant_529" viable="true" in="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)" from="(fileToDelete.exists()) &amp;&amp; ((doDelete(fileToDelete)) == false)" to="!((fileToDelete.exists()) &amp;&amp; ((doDelete(fileToDelete)) == false))" />
    <mutant id="mutant_1399" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="(j + 1) * -1" />
    <mutant id="mutant_1397" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1)" to="((no - 1) * -1)" />
    <mutant id="mutant_1398" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 2" to="(prefix + 2) * -1" />
    <mutant id="mutant_1395" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) - 1)" />
    <mutant id="mutant_1396" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 6)" to="((offset + 6) * -1)" />
    <mutant id="mutant_1393" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; does not exist&quot;" to="(directory + &quot; does not exist&quot;) - 1" />
    <mutant id="mutant_1394" viable="true" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString()))" to="((((super.toString()) + &quot;[&quot;) + (delegate.toString())) + 1)" />
    <mutant id="mutant_520" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="&quot;dir /a /-c &quot; + path" to="(&quot;dir /a /-c &quot; + path) - 1" />
    <mutant id="mutant_536" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="((k + j) - 1)" />
    <mutant id="mutant_537" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) + 1)" />
    <mutant id="mutant_538" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="(exists) &amp;&amp; (!(directory))" to="!((exists) &amp;&amp; (!(directory)))" />
    <mutant id="mutant_539" viable="false" in="?" from="1024 * 4" to="(1024 * 4) + 1" />
    <mutant id="mutant_532" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;Directory \'&quot; + parent)" to="((&quot;Directory \'&quot; + parent) - 1)" />
    <mutant id="mutant_533" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) - 1)" />
    <mutant id="mutant_534" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 6)" to="((offset + 6) + 1)" />
    <mutant id="mutant_535" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) + 1" />
    <mutant id="mutant_1391" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;)" to="(((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) - 1)" />
    <mutant id="mutant_1392" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24))" to="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + 1)" />
    <mutant id="mutant_1390" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="((&quot;Skip count must be non-negative, actual: &quot; + toSkip) + 1)" />
    <mutant id="mutant_1388" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(&quot;Encoding &quot; + encoding)" to="((&quot;Encoding &quot; + encoding) - 1)" />
    <mutant id="mutant_1389" viable="true" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="(&quot;write(&quot; + b)" to="((&quot;write(&quot; + b) + 1)" />
    <mutant id="mutant_1386" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_1387" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) - 1)" />
    <mutant id="mutant_1384" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(&quot;Array Size=&quot; + (array.length))" to="((&quot;Array Size=&quot; + (array.length)) * -1)" />
    <mutant id="mutant_1385" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) + 1)" />
    <mutant id="mutant_1382" viable="true" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) + &quot;)&quot;" to="(((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) + &quot;)&quot;) + 1" />
    <mutant id="mutant_1383" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((mark) + (readlimit))" to="(((mark) + (readlimit)) + 1)" />
    <mutant id="mutant_530" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="((&quot;Skip count must be non-negative, actual: &quot; + toSkip) + 1)" />
    <mutant id="mutant_531" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 0)" to="((offset + 0) + 1)" />
    <mutant id="mutant_547" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="((k + j) + 1)" />
    <mutant id="mutant_548" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_549" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_543" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="filename + (FilenameUtils.UNIX_SEPARATOR)" to="(filename + (FilenameUtils.UNIX_SEPARATOR)) + 1" />
    <mutant id="mutant_544" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 3)" to="((offset + 3) + 1)" />
    <mutant id="mutant_545" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) - 1)" />
    <mutant id="mutant_546" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="(sumDirectoryContents) &amp;&amp; (file2.exists())" to="!((sumDirectoryContents) &amp;&amp; (file2.exists()))" />
    <mutant id="mutant_1380" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' does not exist&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' does not exist&quot;) - 1)" />
    <mutant id="mutant_1381" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="((max) - (pos))" to="(((max) - (pos)) * -1)" />
    <mutant id="mutant_1377" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="dest - (idx)" to="(dest - (idx)) - 1" />
    <mutant id="mutant_1378" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(srcDir.exists()) &amp;&amp; ((srcDir.isDirectory()) == false)" to="!((srcDir.exists()) &amp;&amp; ((srcDir.isDirectory()) == false))" />
    <mutant id="mutant_1375" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 0)" to="((offset + 0) + 1)" />
    <mutant id="mutant_1376" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;) - 1)" />
    <mutant id="mutant_1373" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((totalByteLength) / blockSize)" to="(((totalByteLength) / blockSize) * -1)" />
    <mutant id="mutant_1374" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="((position) - (size))" to="(((position) - (size)) + 1)" />
    <mutant id="mutant_1371" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="isLastFilePart &amp;&amp; ((leftOver) != null)" to="!(isLastFilePart &amp;&amp; ((leftOver) != null))" />
    <mutant id="mutant_1372" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 0)" to="((offset + 0) + 1)" />
    <mutant id="mutant_540" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(exclusionList == null) || (!(exclusionList.contains(srcFile.getCanonicalPath())))" to="!((exclusionList == null) || (!(exclusionList.contains(srcFile.getCanonicalPath()))))" />
    <mutant id="mutant_541" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.eofGame(boolean)" from="previousWasSlashR || (!(ensureLineFeedAtEndOfFile))" to="!(previousWasSlashR || (!(ensureLineFeedAtEndOfFile)))" />
    <mutant id="mutant_542" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="(&quot;The filter[&quot; + i)" to="((&quot;The filter[&quot; + i) + 1)" />
    <mutant id="mutant_1379" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) - 1)" />
    <mutant id="mutant_558" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="((super.toString()) + &quot;[&quot;)" to="(((super.toString()) + &quot;[&quot;) * -1)" />
    <mutant id="mutant_559" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) + len" to="((count) + len) - 1" />
    <mutant id="mutant_554" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="((((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len) - 1)" />
    <mutant id="mutant_555" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;) * -1)" />
    <mutant id="mutant_556" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;)" to="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) - 1)" />
    <mutant id="mutant_557" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 0)" to="((offset + 0) - 1)" />
    <mutant id="mutant_1370" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="((((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual) * -1)" />
    <mutant id="mutant_1366" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + src) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + src) + &quot;\' does not exist&quot;) + 1)" />
    <mutant id="mutant_1367" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="((size - 1) * -1)" />
    <mutant id="mutant_1364" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI))) + &quot; GB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI))) + &quot; GB&quot;) * -1" />
    <mutant id="mutant_1365" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_1362" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 7)" to="((offset + 7) - 1)" />
    <mutant id="mutant_1363" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString()))" to="((((super.toString()) + &quot;[&quot;) + (delegate.toString())) * -1)" />
    <mutant id="mutant_1360" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) - 1)" />
    <mutant id="mutant_1361" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + 1)" />
    <mutant id="mutant_550" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(c &lt; (files.length)) &amp;&amp; ((comparator.compare(entry.getFile(), files[c])) == 0)" to="!((c &lt; (files.length)) &amp;&amp; ((comparator.compare(entry.getFile(), files[c])) == 0))" />
    <mutant id="mutant_551" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="&quot;Unable to create directory &quot; + directory" to="(&quot;Unable to create directory &quot; + directory) * -1" />
    <mutant id="mutant_552" viable="true" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + 1)" />
    <mutant id="mutant_553" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) * -1)" />
    <mutant id="mutant_1368" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((mark) + (readlimit))" to="(((mark) + (readlimit)) * -1)" />
    <mutant id="mutant_1369" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' does not exist&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' does not exist&quot;) + 1)" />
    <mutant id="mutant_448" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; does not exist&quot;)" to="((directory + &quot; does not exist&quot;) + 1)" />
    <mutant id="mutant_449" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(endOfInput) &amp;&amp; (!(encoderOut.hasRemaining()))" to="!((endOfInput) &amp;&amp; (!(encoderOut.hasRemaining())))" />
    <mutant id="mutant_444" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(data.length) - 1" to="((data.length) - 1) + 1" />
    <mutant id="mutant_445" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_446" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="((((super.toString()) + &quot;(&quot;) + condition) * -1)" />
    <mutant id="mutant_447" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + parentFile) + &quot;\' directory cannot be created&quot;)" to="(((&quot;Destination \'&quot; + parentFile) + &quot;\' directory cannot be created&quot;) - 1)" />
    <mutant id="mutant_1199" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_1197" viable="true" in="org.apache.commons.io.IOCase.checkCompareTo(java.lang.String,java.lang.String)" from="(str1 == null) || (str2 == null)" to="!((str1 == null) || (str2 == null))" />
    <mutant id="mutant_1198" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) + 1)" />
    <mutant id="mutant_1195" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen)" to="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) * -1)" />
    <mutant id="mutant_1196" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;) * -1)" />
    <mutant id="mutant_440" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="((&quot;The reference file \'&quot; + reference) + 1)" />
    <mutant id="mutant_441" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + fullFilenameToAdd)" to="((basePath + fullFilenameToAdd) * -1)" />
    <mutant id="mutant_442" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="((&quot;Destination \'&quot; + destFile) * -1)" />
    <mutant id="mutant_443" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="index + separatorAdd" to="(index + separatorAdd) + 1" />
    <mutant id="mutant_459" viable="false" in="?" from="1024 * 4" to="(1024 * 4) - 1" />
    <mutant id="mutant_455" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((srcDir.getCanonicalPath()) + (File.separator))" to="(((srcDir.getCanonicalPath()) + (File.separator)) * -1)" />
    <mutant id="mutant_456" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="(position + c)" to="((position + c) * -1)" />
    <mutant id="mutant_457" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is read-only&quot;)" to="(((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is read-only&quot;) - 1)" />
    <mutant id="mutant_458" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 0)) * -1" />
    <mutant id="mutant_1193" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="((&quot;Skip count must be non-negative, actual: &quot; + toSkip) - 1)" />
    <mutant id="mutant_1194" viable="false" in="org.apache.commons.io.FileUtils.touch(java.io.File)" from="(&quot;Unable to set the last modification time for &quot; + file)" to="((&quot;Unable to set the last modification time for &quot; + file) - 1)" />
    <mutant id="mutant_1191" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="(&quot;File &quot; + directory)" to="((&quot;File &quot; + directory) * -1)" />
    <mutant id="mutant_1192" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 0)" to="((offset + 0) - 1)" />
    <mutant id="mutant_1190" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="length - ((int)(((position) - (size))))" to="(length - ((int)(((position) - (size))))) * -1" />
    <mutant id="mutant_1188" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) - 1)" />
    <mutant id="mutant_1189" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;) - 1)" />
    <mutant id="mutant_1186" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream(int)" from="(&quot;Negative initial size: &quot; + size)" to="((&quot;Negative initial size: &quot; + size) + 1)" />
    <mutant id="mutant_1187" viable="true" in="org.apache.commons.io.comparator.DirectoryFileComparator.compare(java.io.File,java.io.File)" from="(getType(file1)) - (getType(file2))" to="((getType(file1)) - (getType(file2))) + 1" />
    <mutant id="mutant_1184" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size1 - size2" to="(size1 - size2) + 1" />
    <mutant id="mutant_1185" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_451" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(&quot;Array Size=&quot; + (array.length))" to="((&quot;Array Size=&quot; + (array.length)) + 1)" />
    <mutant id="mutant_452" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(high &lt;&lt; 32) + (4294967295L &amp; low)" to="((high &lt;&lt; 32) + (4294967295L &amp; low)) + 1" />
    <mutant id="mutant_453" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size1 - size2" to="(size1 - size2) - 1" />
    <mutant id="mutant_454" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Source \'&quot; + destDir) + &quot;\' is not a directory&quot;) * -1)" />
    <mutant id="mutant_450" viable="false" in="?" from="1024 * 4" to="(1024 * 4) * -1" />
    <mutant id="mutant_466" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;)" to="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) + 1)" />
    <mutant id="mutant_467" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="((&quot;Destination \'&quot; + destFile) * -1)" />
    <mutant id="mutant_468" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir)" to="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) + 1)" />
    <mutant id="mutant_469" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="((basePath + '/') + fullFilenameToAdd)" to="(((basePath + '/') + fullFilenameToAdd) - 1)" />
    <mutant id="mutant_1182" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString()))" to="((((super.toString()) + &quot;[&quot;) + (delegate.toString())) - 1)" />
    <mutant id="mutant_1183" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' is a directory&quot;)" to="(((&quot;Destination \'&quot; + destFile) + &quot;\' is a directory&quot;) + 1)" />
    <mutant id="mutant_1180" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(bytesToRead &gt; 0) &amp;&amp; ((IOUtils.EOF) != (read = input.read(buffer, 0, bytesToRead)))" to="!((bytesToRead &gt; 0) &amp;&amp; ((IOUtils.EOF) != (read = input.read(buffer, 0, bytesToRead))))" />
    <mutant id="mutant_1181" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(off + len)" to="((off + len) - 1)" />
    <mutant id="mutant_1179" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) - 1)" />
    <mutant id="mutant_1177" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="((size - 1) + 1)" />
    <mutant id="mutant_1178" viable="false" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;) * -1)" />
    <mutant id="mutant_1175" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile)" to="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) * -1)" />
    <mutant id="mutant_1176" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(j + 1)" to="((j + 1) * -1)" />
    <mutant id="mutant_1173" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is a directory&quot;)" to="(((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is a directory&quot;) - 1)" />
    <mutant id="mutant_1174" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="((k + j) * -1)" />
    <mutant id="mutant_462" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) * -1)" />
    <mutant id="mutant_463" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) * -1)" />
    <mutant id="mutant_464" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16))" to="(((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) + 1)" />
    <mutant id="mutant_465" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;) - 1)" />
    <mutant id="mutant_460" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) + 1)" />
    <mutant id="mutant_461" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + i)" to="((offset + i) + 1)" />
    <mutant id="mutant_477" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;)" to="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) - 1)" />
    <mutant id="mutant_478" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) + 1)" />
    <mutant id="mutant_479" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="((size - 1) - 1)" />
    <mutant id="mutant_1171" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="((charsRead) - (markedAt))" to="(((charsRead) - (markedAt)) * -1)" />
    <mutant id="mutant_1172" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="((((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped) * -1)" />
    <mutant id="mutant_1170" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_MB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_MB)) * -1" />
    <mutant id="mutant_1168" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;)" to="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) * -1)" />
    <mutant id="mutant_1169" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="dest - (idx)" to="(dest - (idx)) * -1" />
    <mutant id="mutant_1166" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="((max) - (pos))" to="(((max) - (pos)) + 1)" />
    <mutant id="mutant_1167" viable="true" in="org.apache.commons.io.FilenameUtils.isSeparator(char)" from="(ch == (FilenameUtils.UNIX_SEPARATOR)) || (ch == (FilenameUtils.WINDOWS_SEPARATOR))" to="!((ch == (FilenameUtils.UNIX_SEPARATOR)) || (ch == (FilenameUtils.WINDOWS_SEPARATOR)))" />
    <mutant id="mutant_1164" viable="false" in="?" from="(FileUtils.ONE_MB) * 30" to="((FileUtils.ONE_MB) * 30) + 1" />
    <mutant id="mutant_1165" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; is not a directory&quot;" to="(directory + &quot; is not a directory&quot;) * -1" />
    <mutant id="mutant_1162" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(&quot;illegal index: &quot; + index)" to="((&quot;illegal index: &quot; + index) * -1)" />
    <mutant id="mutant_1163" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="toSkip - remain" to="(toSkip - remain) + 1" />
    <mutant id="mutant_473" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="(prefix + 1) - 1" />
    <mutant id="mutant_474" viable="false" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="&quot;text/xml&quot; + httpContentType" to="(&quot;text/xml&quot; + httpContentType) - 1" />
    <mutant id="mutant_475" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line returned OS error code \'&quot; + (proc.exitValue()))" to="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) * -1)" />
    <mutant id="mutant_476" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;) * -1)" />
    <mutant id="mutant_470" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) + ((value4 &amp; 255) &lt;&lt; 24)" to="(((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) + ((value4 &amp; 255) &lt;&lt; 24)) - 1" />
    <mutant id="mutant_471" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;) + 1)" />
    <mutant id="mutant_472" viable="true" in="org.apache.commons.io.comparator.DirectoryFileComparator.compare(java.io.File,java.io.File)" from="(getType(file1)) - (getType(file2))" to="((getType(file1)) - (getType(file2))) - 1" />
    <mutant id="mutant_488" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_489" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="(length - remaining) * -1" />
    <mutant id="mutant_484" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="&quot;Unable to delete file: &quot; + file" to="(&quot;Unable to delete file: &quot; + file) * -1" />
    <mutant id="mutant_485" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(c &lt; (files.length)) &amp;&amp; ((comparator.compare(entry.getFile(), files[c])) &gt; 0)" to="!((c &lt; (files.length)) &amp;&amp; ((comparator.compare(entry.getFile(), files[c])) &gt; 0))" />
    <mutant id="mutant_486" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + src) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + src) + &quot;\' does not exist&quot;) - 1)" />
    <mutant id="mutant_487" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) - 1)" />
    <mutant id="mutant_480" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) - 1)" />
    <mutant id="mutant_481" viable="false" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) + &quot; exists&quot;)" to="(((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) + &quot; exists&quot;) * -1)" />
    <mutant id="mutant_482" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) + &quot;\' are the same&quot;)" to="(((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) + &quot;\' are the same&quot;) + 1)" />
    <mutant id="mutant_483" viable="true" in="org.apache.commons.io.input.BoundedReader.mark(int)" from="readAheadLimit - (charsRead)" to="(readAheadLimit - (charsRead)) + 1" />
    <mutant id="mutant_499" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(&quot;Unexpected negative line length=&quot; + lineLengthBytes)" to="((&quot;Unexpected negative line length=&quot; + lineLengthBytes) + 1)" />
    <mutant id="mutant_490" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + '/')" to="((basePath + '/') - 1)" />
    <mutant id="mutant_495" viable="false" in="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)" from="(&quot;Deletion failed: &quot; + fileToDelete)" to="((&quot;Deletion failed: &quot; + fileToDelete) * -1)" />
    <mutant id="mutant_496" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart)" to="(((currentLastBytePos) - lineStart) - 1)" />
    <mutant id="mutant_497" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="((line1 != null) &amp;&amp; (line2 != null))" to="(!((line1 != null) &amp;&amp; (line2 != null)))" />
    <mutant id="mutant_498" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(index &lt; 0) || (index &gt;= (data.length))" to="!((index &lt; 0) || (index &gt;= (data.length)))" />
    <mutant id="mutant_491" viable="false" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not find lockDir: &quot; + (lockDir.getAbsolutePath()))" to="((&quot;Could not find lockDir: &quot; + (lockDir.getAbsolutePath())) - 1)" />
    <mutant id="mutant_492" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((xmlProlog.length()) + len)" to="(((xmlProlog.length()) + len) + 1)" />
    <mutant id="mutant_493" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Failed to copy full contents from \'&quot; + srcFile)" to="((&quot;Failed to copy full contents from \'&quot; + srcFile) - 1)" />
    <mutant id="mutant_494" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="(&quot;File &quot; + directory)" to="((&quot;File &quot; + directory) + 1)" />
    <mutant id="mutant_1630" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' is not a directory&quot;) + 1)" />
    <mutant id="mutant_1631" viable="true" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)" from="(extensions == null) || (extensions.isEmpty())" to="!((extensions == null) || (extensions.isEmpty()))" />
    <mutant id="mutant_1638" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="((prefix &gt;= (filename.length())) || (index &lt; 0)) || (prefix &gt;= endIndex)" to="!(((prefix &gt;= (filename.length())) || (index &lt; 0)) || (prefix &gt;= endIndex))" />
    <mutant id="mutant_1639" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) - 1)" />
    <mutant id="mutant_1636" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) - 1)" />
    <mutant id="mutant_1637" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) - 1)" />
    <mutant id="mutant_1634" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) * -1)" />
    <mutant id="mutant_1635" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) - 1)" />
    <mutant id="mutant_1632" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;)" to="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) - 1)" />
    <mutant id="mutant_1633" viable="true" in="org.apache.commons.io.comparator.DirectoryFileComparator.compare(java.io.File,java.io.File)" from="(getType(file1)) - (getType(file2))" to="((getType(file1)) - (getType(file2))) * -1" />
    <mutant id="mutant_1629" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) + dstLen)" to="((((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) + dstLen) - 1)" />
    <mutant id="mutant_1620" viable="true" in="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" from="(filter1 == null) || (filter2 == null)" to="!((filter1 == null) || (filter2 == null))" />
    <mutant id="mutant_1627" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="((max) - (pos))" to="(((max) - (pos)) + 1)" />
    <mutant id="mutant_1628" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff))" to="(((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) * -1)" />
    <mutant id="mutant_1625" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) + &quot;)&quot;" to="(((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) + &quot;)&quot;) * -1" />
    <mutant id="mutant_1626" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="(cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE))" to="!((cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE)))" />
    <mutant id="mutant_1623" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="((((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped) * -1)" />
    <mutant id="mutant_1624" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="((&quot;Failed to list contents of &quot; + directory) - 1)" />
    <mutant id="mutant_1621" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i + 1" to="(i + 1) - 1" />
    <mutant id="mutant_1622" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((tok.countTokens()) == 1) &amp;&amp; ((lines.size()) &gt;= 3)" to="!(((tok.countTokens()) == 1) &amp;&amp; ((lines.size()) &gt;= 3))" />
    <mutant id="mutant_1618" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)" from="((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)" to="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) - 1" />
    <mutant id="mutant_1619" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_1616" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) - 1)" />
    <mutant id="mutant_1617" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="((&quot;Bytes to skip must not be negative: &quot; + toSkip) * -1)" />
    <mutant id="mutant_1614" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="((((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped) + 1)" />
    <mutant id="mutant_1615" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + 1)" />
    <mutant id="mutant_1612" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(ch0 &gt;= 'A') &amp;&amp; (ch0 &lt;= 'Z')" to="!((ch0 &gt;= 'A') &amp;&amp; (ch0 &lt;= 'Z'))" />
    <mutant id="mutant_1613" viable="true" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="(directoryFilter == null) &amp;&amp; (fileFilter == null)" to="!((directoryFilter == null) &amp;&amp; (fileFilter == null))" />
    <mutant id="mutant_1610" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) - 1)" />
    <mutant id="mutant_1611" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(firstGT + 1)" to="((firstGT + 1) - 1)" />
    <mutant id="mutant_1609" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="(prefix + 1) - 1" />
    <mutant id="mutant_1607" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 3)" to="((i - 3) + 1)" />
    <mutant id="mutant_1608" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(length - totalRead)" to="((length - totalRead) * -1)" />
    <mutant id="mutant_1605" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) - 1)" />
    <mutant id="mutant_1606" viable="true" in="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" from="(filter1 == null) || (filter2 == null)" to="!((filter1 == null) || (filter2 == null))" />
    <mutant id="mutant_1603" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) - 1)" />
    <mutant id="mutant_1604" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_1601" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((int)((totalByteLength) % blockSize))" to="((int)(((totalByteLength) % blockSize))) - 1" />
    <mutant id="mutant_1602" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 2)" to="((offset + 2) * -1)" />
    <mutant id="mutant_1600" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_800" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + 1)" />
    <mutant id="mutant_801" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;)" to="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) * -1)" />
    <mutant id="mutant_802" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; does not exist&quot;)" to="((directory + &quot; does not exist&quot;) - 1)" />
    <mutant id="mutant_803" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' is not a directory&quot;) * -1)" />
    <mutant id="mutant_808" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="numberOfChars - ((position) - (size))" to="(numberOfChars - ((position) - (size))) * -1" />
    <mutant id="mutant_809" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size))" to="(((((super.toString()) + &quot;(&quot;) + condition) + (size)) + 1)" />
    <mutant id="mutant_804" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(length &gt; 0) &amp;&amp; (length &lt; (buffer.length))" to="!((length &gt; 0) &amp;&amp; (length &lt; (buffer.length)))" />
    <mutant id="mutant_805" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="((&quot;Destination \'&quot; + destFile) + 1)" />
    <mutant id="mutant_806" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="((size - 1) - 1)" />
    <mutant id="mutant_807" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate)" to="((((super.toString()) + &quot;(&quot;) + delegate) - 1)" />
    <mutant id="mutant_1674" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) + dstLen)" to="((((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) + dstLen) * -1)" />
    <mutant id="mutant_1675" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;) * -1)" />
    <mutant id="mutant_1672" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="((&quot;Destination \'&quot; + destFile) - 1)" />
    <mutant id="mutant_1673" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be read&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' cannot be read&quot;) * -1)" />
    <mutant id="mutant_1670" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + delegate) + &quot;)&quot;) * -1" />
    <mutant id="mutant_1671" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="(((currentBuffer.length) - inBufferPos) * -1)" />
    <mutant id="mutant_1678" viable="false" in="?" from="1024 * 4" to="(1024 * 4) + 1" />
    <mutant id="mutant_1679" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString())) + &quot;]&quot;" to="((((super.toString()) + &quot;[&quot;) + (delegate.toString())) + &quot;]&quot;) - 1" />
    <mutant id="mutant_1676" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Failed to delete original directory \'&quot; + srcDir)" to="((&quot;Failed to delete original directory \'&quot; + srcDir) - 1)" />
    <mutant id="mutant_1677" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be written to&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' cannot be written to&quot;) * -1)" />
    <mutant id="mutant_811" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 7)" to="((offset + 7) + 1)" />
    <mutant id="mutant_812" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) * -1)" />
    <mutant id="mutant_813" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="((end - start) * -1)" />
    <mutant id="mutant_814" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="((&quot;Bytes to skip must not be negative: &quot; + toSkip) - 1)" />
    <mutant id="mutant_810" viable="true" in="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)" from="(&quot;Deletion failed: &quot; + fileToDelete)" to="((&quot;Deletion failed: &quot; + fileToDelete) + 1)" />
    <mutant id="mutant_819" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Source \'&quot; + destDir) + &quot;\' is not a directory&quot;) + 1)" />
    <mutant id="mutant_815" viable="true" in="org.apache.commons.io.FileExistsException(java.io.File)" from="(&quot;File &quot; + file)" to="((&quot;File &quot; + file) + 1)" />
    <mutant id="mutant_816" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="((((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) - 1)" />
    <mutant id="mutant_817" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length) - remaining" to="((offset + length) - remaining) - 1" />
    <mutant id="mutant_818" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + parentFile)" to="((&quot;Destination \'&quot; + parentFile) + 1)" />
    <mutant id="mutant_1663" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) * -1)" />
    <mutant id="mutant_1664" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) + &quot;\'&quot;)" to="(((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) + &quot;\'&quot;) - 1)" />
    <mutant id="mutant_1661" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) - 1)" />
    <mutant id="mutant_1662" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) + (data.length))" to="((((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) + (data.length)) + 1)" />
    <mutant id="mutant_1660" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j)" to="((i + j) - 1)" />
    <mutant id="mutant_1669" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) - 1)" />
    <mutant id="mutant_1667" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 0)" to="((offset + 0) - 1)" />
    <mutant id="mutant_1668" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="(&quot;File &quot; + directory)" to="((&quot;File &quot; + directory) - 1)" />
    <mutant id="mutant_1665" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;) * -1)" />
    <mutant id="mutant_1666" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="(((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;) - 1)" />
    <mutant id="mutant_822" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString())) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + (filter.toString())) + &quot;)&quot;) - 1" />
    <mutant id="mutant_823" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 0)" to="((offset + 0) + 1)" />
    <mutant id="mutant_824" viable="false" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="((&quot;write(&quot; + b) + &quot;) failed: stream is closed&quot;)" to="(((&quot;write(&quot; + b) + &quot;) failed: stream is closed&quot;) - 1)" />
    <mutant id="mutant_825" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) + destDir)" to="((((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) + destDir) * -1)" />
    <mutant id="mutant_820" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(&quot;Marked position [&quot; + (mark))" to="((&quot;Marked position [&quot; + (mark)) + 1)" />
    <mutant id="mutant_821" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 0)" to="((offset + 0) + 1)" />
    <mutant id="mutant_826" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip - remain" to="(toSkip - remain) - 1" />
    <mutant id="mutant_827" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) * -1)" />
    <mutant id="mutant_828" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="((int)(((position) - (size))))" to="(((int)(((position) - (size)))) - 1)" />
    <mutant id="mutant_829" viable="false" in="?" from="1024 * 4" to="(1024 * 4) - 1" />
    <mutant id="mutant_1652" viable="true" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])" from="(extensions == null) || ((extensions.length) == 0)" to="!((extensions == null) || ((extensions.length) == 0))" />
    <mutant id="mutant_1653" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 3)" to="((i - 3) * -1)" />
    <mutant id="mutant_1650" viable="false" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name))" to="((&quot;FileDeleteStrategy[&quot; + (name)) - 1)" />
    <mutant id="mutant_1651" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="length + (leftOverOfLastFilePart != null ? leftOverOfLastFilePart.length : 0)" to="(length + (leftOverOfLastFilePart != null ? leftOverOfLastFilePart.length : 0)) + 1" />
    <mutant id="mutant_1658" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + 1)" />
    <mutant id="mutant_1659" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + 1)" />
    <mutant id="mutant_1656" viable="true" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;) + 1)" />
    <mutant id="mutant_1657" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="((&quot;Array Size=&quot; + (b.length)) - 1)" />
    <mutant id="mutant_1654" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line returned OS error code \'&quot; + (proc.exitValue()))" to="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) - 1)" />
    <mutant id="mutant_1655" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; does not exist&quot;" to="(directory + &quot; does not exist&quot;) - 1" />
    <mutant id="mutant_833" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) + 1)" />
    <mutant id="mutant_834" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="((buffers.size()) - 1)" to="(((buffers.size()) - 1) + 1)" />
    <mutant id="mutant_835" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="((&quot;The byte count &quot; + result) + 1)" />
    <mutant id="mutant_836" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="((charsRead) - (markedAt))" to="(((charsRead) - (markedAt)) - 1)" />
    <mutant id="mutant_830" viable="false" in="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])" from="(boms == null) || ((boms.length) == 0)" to="!((boms == null) || ((boms.length) == 0))" />
    <mutant id="mutant_831" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be written to&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' cannot be written to&quot;) + 1)" />
    <mutant id="mutant_832" viable="true" in="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])" from="(charsetName == null) || (charsetName.isEmpty())" to="!((charsetName == null) || (charsetName.isEmpty()))" />
    <mutant id="mutant_837" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="(((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;) + 1)" />
    <mutant id="mutant_838" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((off + len) - remaining)" to="(((off + len) - remaining) - 1)" />
    <mutant id="mutant_839" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(&quot;Length to read: &quot; + expected)" to="((&quot;Length to read: &quot; + expected) - 1)" />
    <mutant id="mutant_1641" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - 4" to="(i - 4) * -1" />
    <mutant id="mutant_1642" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((!(Character.isDigit(c))) &amp;&amp; (c != ','))" to="(!((!(Character.isDigit(c))) &amp;&amp; (c != ',')))" />
    <mutant id="mutant_1640" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="(str.length()) - (search.length())" to="((str.length()) - (search.length())) - 1" />
    <mutant id="mutant_1649" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="((size - 1) + 1)" />
    <mutant id="mutant_1647" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="&quot;Unable to create directory &quot; + directory" to="(&quot;Unable to create directory &quot; + directory) + 1" />
    <mutant id="mutant_1648" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.eofGame()" from="(!(slashNSeen)) &amp;&amp; (!(slashRSeen))" to="!((!(slashNSeen)) &amp;&amp; (!(slashRSeen)))" />
    <mutant id="mutant_1645" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + '/')" to="((basePath + '/') * -1)" />
    <mutant id="mutant_1646" viable="true" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString())) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + (filter.toString())) + &quot;)&quot;) + 1" />
    <mutant id="mutant_1643" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) - 1)" />
    <mutant id="mutant_1644" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="(position + c)" to="((position + c) - 1)" />
    <mutant id="mutant_844" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="numberOfChars - ((position) - (size))" to="(numberOfChars - ((position) - (size))) - 1" />
    <mutant id="mutant_845" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(len - 1)" to="((len - 1) * -1)" />
    <mutant id="mutant_846" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="(((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;) * -1)" />
    <mutant id="mutant_847" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((currentBuffer.length) - inBufferPos)" to="(((currentBuffer.length) - inBufferPos) + 1)" />
    <mutant id="mutant_840" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(count) - (filledBufferSum)" to="((count) - (filledBufferSum)) * -1" />
    <mutant id="mutant_841" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="((&quot;Bytes to skip: &quot; + toSkip) * -1)" />
    <mutant id="mutant_842" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) - 1)" />
    <mutant id="mutant_843" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((((array[i]) == separator) &amp;&amp; ((array[(i - 1)]) == '.')) &amp;&amp; ((array[(i - 2)]) == '.'))" to="(!((((array[i]) == separator) &amp;&amp; ((array[(i - 1)]) == '.')) &amp;&amp; ((array[(i - 2)]) == '.')))" />
    <mutant id="mutant_848" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="(!appXml) &amp;&amp; (!textXml)" to="!((!appXml) &amp;&amp; (!textXml))" />
    <mutant id="mutant_849" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;) - 1)" />
    <mutant id="mutant_1234" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) + 1)" />
    <mutant id="mutant_1235" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(XmlStreamWriter.BUFFER_SIZE) - (xmlProlog.length())" to="((XmlStreamWriter.BUFFER_SIZE) - (xmlProlog.length())) * -1" />
    <mutant id="mutant_1232" viable="false" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) - 1)" />
    <mutant id="mutant_1233" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_1230" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_GB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_GB)) * -1" />
    <mutant id="mutant_1231" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) * -1)" />
    <mutant id="mutant_1238" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)" from="(caseSensitivity == null) || (caseSensitivity.equals(IOCase.SYSTEM))" to="!((caseSensitivity == null) || (caseSensitivity.equals(IOCase.SYSTEM)))" />
    <mutant id="mutant_1239" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_1236" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="(length - remaining) + 1" />
    <mutant id="mutant_1237" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="((((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped) - 1)" />
    <mutant id="mutant_855" viable="false" in="?" from="(FileUtils.ONE_MB) * 30" to="((FileUtils.ONE_MB) * 30) * -1" />
    <mutant id="mutant_856" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; does not exist&quot;)" to="((directory + &quot; does not exist&quot;) * -1)" />
    <mutant id="mutant_857" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)" from="((short)((((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) + (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)))" to="((short)(((((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 0) + (((org.apache.commons.io.EndianUtils.read(input)) &amp; 255) &lt;&lt; 8)))) + 1" />
    <mutant id="mutant_858" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;)" to="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) + 1)" />
    <mutant id="mutant_851" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((encoding.length()) - 1)" to="(((encoding.length()) - 1) * -1)" />
    <mutant id="mutant_852" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i + 1" to="(i + 1) + 1" />
    <mutant id="mutant_853" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) + &quot; EB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) + &quot; EB&quot;) - 1" />
    <mutant id="mutant_854" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) * -1)" />
    <mutant id="mutant_859" viable="false" in="org.apache.commons.io.EndianUtils.swapShort(short)" from="((short)((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)))" to="((short)(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)))) + 1" />
    <mutant id="mutant_1223" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(len - size)" to="((len - size) + 1)" />
    <mutant id="mutant_1224" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + 1)" />
    <mutant id="mutant_1221" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI))) + &quot; MB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI))) + &quot; MB&quot;) + 1" />
    <mutant id="mutant_1222" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="((((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual) + 1)" />
    <mutant id="mutant_1220" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 6)" to="((offset + 6) - 1)" />
    <mutant id="mutant_1229" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) - 1)" />
    <mutant id="mutant_850" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + 1)" />
    <mutant id="mutant_1227" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_1228" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="((pos + i) + 1) + 1" />
    <mutant id="mutant_1225" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="size - pos" to="(size - pos) - 1" />
    <mutant id="mutant_1226" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_866" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) + length)" to="((((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) + length) - 1)" />
    <mutant id="mutant_867" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="((max) - (pos))" to="(((max) - (pos)) - 1)" />
    <mutant id="mutant_868" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; is not a directory&quot;" to="(directory + &quot; is not a directory&quot;) + 1" />
    <mutant id="mutant_869" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) * -1)" />
    <mutant id="mutant_862" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.available()" from="(this.bbuf.remaining()) + (this.cbuf.remaining())" to="((this.bbuf.remaining()) + (this.cbuf.remaining())) + 1" />
    <mutant id="mutant_863" viable="false" in="?" from="(((osName.indexOf(&quot;sun os&quot;)) != (-1)) || ((osName.indexOf(&quot;sunos&quot;)) != (-1)))" to="(!(((osName.indexOf(&quot;sun os&quot;)) != (-1)) || ((osName.indexOf(&quot;sunos&quot;)) != (-1))))" />
    <mutant id="mutant_864" viable="false" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="((file.getName()) + (LockableFileWriter.LCK))" to="(((file.getName()) + (LockableFileWriter.LCK)) * -1)" />
    <mutant id="mutant_865" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="((&quot;Bytes to skip must not be negative: &quot; + toSkip) * -1)" />
    <mutant id="mutant_1212" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="((int)(((position) - (size))))" to="(((int)(((position) - (size)))) - 1)" />
    <mutant id="mutant_1696" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="((basePath + '/') + fullFilenameToAdd)" to="(((basePath + '/') + fullFilenameToAdd) * -1)" />
    <mutant id="mutant_1213" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 2)" to="((offset + 2) + 1)" />
    <mutant id="mutant_1697" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_1210" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Size must be equal or greater than zero: &quot; + size)" to="((&quot;Size must be equal or greater than zero: &quot; + size) - 1)" />
    <mutant id="mutant_1694" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_1211" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 3)" to="((offset + 3) + 1)" />
    <mutant id="mutant_1695" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;)" to="(((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) + 1)" />
    <mutant id="mutant_1692" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16))" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) * -1)" />
    <mutant id="mutant_1693" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="(prefix + 1) + 1" />
    <mutant id="mutant_1690" viable="true" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;) + 1)" />
    <mutant id="mutant_1691" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart) + 1" to="(((currentLastBytePos) - lineStart) + 1) + 1" />
    <mutant id="mutant_860" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) + 1)" />
    <mutant id="mutant_1218" viable="true" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename1 == null) || (filename2 == null)" to="!((filename1 == null) || (filename2 == null))" />
    <mutant id="mutant_861" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(filename == null) || (wildcardMatcher == null)" to="!((filename == null) || (wildcardMatcher == null))" />
    <mutant id="mutant_1219" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) + &quot;]&quot;" to="((((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_1216" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="((&quot;Bytes to skip: &quot; + toSkip) + 1)" />
    <mutant id="mutant_1217" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="((((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len) - 1)" />
    <mutant id="mutant_1214" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) * -1)" />
    <mutant id="mutant_1698" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(urls == null) || ((urls.length) == 0)" to="!((urls == null) || ((urls.length) == 0))" />
    <mutant id="mutant_1215" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(j + 1)" to="((j + 1) + 1)" />
    <mutant id="mutant_1699" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is a directory&quot;)" to="(((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is a directory&quot;) * -1)" />
    <mutant id="mutant_877" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 3)" to="((offset + 3) - 1)" />
    <mutant id="mutant_878" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) * -1)" />
    <mutant id="mutant_879" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Failed to list contents of &quot; + srcDir)" to="((&quot;Failed to list contents of &quot; + srcDir) * -1)" />
    <mutant id="mutant_873" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + 1)" />
    <mutant id="mutant_874" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="((size - 1) * -1)" />
    <mutant id="mutant_875" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((length &lt; 0) || (offset &lt; 0)) || ((offset + length) &gt; (array.length))" to="!(((length &lt; 0) || (offset &lt; 0)) || ((offset + length) &gt; (array.length)))" />
    <mutant id="mutant_876" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 0)" to="((offset + 0) * -1)" />
    <mutant id="mutant_1201" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + length)" to="((offset + length) - 1)" />
    <mutant id="mutant_1685" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;)" to="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) + 1)" />
    <mutant id="mutant_1202" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((no) - 1)" to="(((no) - 1) + 1)" />
    <mutant id="mutant_1686" viable="false" in="?" from="1024 * 4" to="(1024 * 4) * -1" />
    <mutant id="mutant_1683" viable="false" in="org.apache.commons.io.FileCleaningTracker$Reaper.run()" from="((exitWhenFinished) == false) || ((trackers.size()) &gt; 0)" to="!(((exitWhenFinished) == false) || ((trackers.size()) &gt; 0))" />
    <mutant id="mutant_1200" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; is not a directory&quot;" to="(directory + &quot; is not a directory&quot;) - 1" />
    <mutant id="mutant_1684" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((array[i]) == separator) &amp;&amp; ((array[(i - 1)]) == separator)" to="!(((array[i]) == separator) &amp;&amp; ((array[(i - 1)]) == separator))" />
    <mutant id="mutant_1681" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) + maxBytesPerChar)" to="((((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) + maxBytesPerChar) + 1)" />
    <mutant id="mutant_1682" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_1680" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(&quot;XML prolog or ROOT element not found on first &quot; + offset)" to="((&quot;XML prolog or ROOT element not found on first &quot; + offset) * -1)" />
    <mutant id="mutant_1209" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="(off + i)" to="((off + i) * -1)" />
    <mutant id="mutant_870" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 2)" to="((offset + 2) - 1)" />
    <mutant id="mutant_871" viable="true" in="org.apache.commons.io.input.XmlStreamReader.isTextXml(java.lang.String)" from="((mime.startsWith(&quot;text/&quot;)) &amp;&amp; (mime.endsWith(&quot;+xml&quot;)))" to="(!((mime.startsWith(&quot;text/&quot;)) &amp;&amp; (mime.endsWith(&quot;+xml&quot;))))" />
    <mutant id="mutant_1207" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) + 1)" />
    <mutant id="mutant_872" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) - 1)" />
    <mutant id="mutant_1208" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="index + separatorAdd" to="(index + separatorAdd) - 1" />
    <mutant id="mutant_1205" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="((&quot;Destination directory \'&quot; + destDir) - 1)" />
    <mutant id="mutant_1689" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="((pos + i) + 1) - 1" />
    <mutant id="mutant_1206" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" from="((comparator) != null) &amp;&amp; ((children.length) &gt; 1)" to="!(((comparator) != null) &amp;&amp; ((children.length) &gt; 1))" />
    <mutant id="mutant_1203" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_1687" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) * -1" />
    <mutant id="mutant_1204" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) * -1)" />
    <mutant id="mutant_1688" viable="false" in="org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)" from="file + &quot; does not exist&quot;" to="(file + &quot; does not exist&quot;) + 1" />
    <mutant id="mutant_404" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 0)" to="((offset + 0) + 1)" />
    <mutant id="mutant_888" viable="true" in="org.apache.commons.io.FileExistsException(java.io.File)" from="((&quot;File &quot; + file) + &quot; exists&quot;)" to="(((&quot;File &quot; + file) + &quot; exists&quot;) + 1)" />
    <mutant id="mutant_405" viable="false" in="org.apache.commons.io.FileExistsException(java.io.File)" from="((&quot;File &quot; + file) + &quot; exists&quot;)" to="(((&quot;File &quot; + file) + &quot; exists&quot;) * -1)" />
    <mutant id="mutant_889" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;)" to="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) - 1)" />
    <mutant id="mutant_406" viable="false" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name)) + &quot;]&quot;" to="((&quot;FileDeleteStrategy[&quot; + (name)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_407" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;Directory \'&quot; + parent) + &quot;\' could not be created&quot;)" to="(((&quot;Directory \'&quot; + parent) + &quot;\' could not be created&quot;) + 1)" />
    <mutant id="mutant_400" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="((pos + i) + 1) * -1" />
    <mutant id="mutant_884" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="((prefix + 2) * -1)" />
    <mutant id="mutant_401" viable="true" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name)) + &quot;]&quot;" to="((&quot;FileDeleteStrategy[&quot; + (name)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_885" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' directory cannot be created&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' directory cannot be created&quot;) * -1)" />
    <mutant id="mutant_402" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;) - 1)" />
    <mutant id="mutant_886" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.skip(long)" from="(n &gt; 0) &amp;&amp; ((available()) &gt; 0)" to="!((n &gt; 0) &amp;&amp; ((available()) &gt; 0))" />
    <mutant id="mutant_403" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) * -1)" />
    <mutant id="mutant_887" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) - 1)" />
    <mutant id="mutant_1281" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(&quot;Length to read: &quot; + length)" to="((&quot;Length to read: &quot; + length) * -1)" />
    <mutant id="mutant_1282" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="((wcs.length) - 1)" to="(((wcs.length) - 1) * -1)" />
    <mutant id="mutant_1280" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) + size)" to="((((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) + size) + 1)" />
    <mutant id="mutant_408" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;)" to="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) * -1)" />
    <mutant id="mutant_409" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) + (currentLastBytePos))" to="(((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) + (currentLastBytePos)) + 1)" />
    <mutant id="mutant_1278" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + 1)" />
    <mutant id="mutant_1279" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="((count) + 1)" to="(((count) + 1) * -1)" />
    <mutant id="mutant_1276" viable="true" in="org.apache.commons.io.FilenameUtils.getName(java.lang.String)" from="(index + 1)" to="((index + 1) * -1)" />
    <mutant id="mutant_1277" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="((size - i) + 1)" />
    <mutant id="mutant_1274" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) * -1)" />
    <mutant id="mutant_1275" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1)" to="((no - 1) + 1)" />
    <mutant id="mutant_1272" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;) + 1)" />
    <mutant id="mutant_1273" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((int)((totalByteLength) % blockSize))" to="((int)(((totalByteLength) % blockSize))) + 1" />
    <mutant id="mutant_880" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir)" to="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) * -1)" />
    <mutant id="mutant_881" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="(prefix + 1) * -1" />
    <mutant id="mutant_882" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="(getRun()) &amp;&amp; (reOpen)" to="!((getRun()) &amp;&amp; (reOpen))" />
    <mutant id="mutant_883" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents))" to="((((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) + 1)" />
    <mutant id="mutant_415" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; does not exist&quot;" to="(directory + &quot; does not exist&quot;) + 1" />
    <mutant id="mutant_899" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="((&quot;The byte count &quot; + result) * -1)" />
    <mutant id="mutant_416" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + 1)" />
    <mutant id="mutant_417" viable="true" in="org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)" from="(path == null) || ((path.indexOf(FilenameUtils.UNIX_SEPARATOR)) == (FilenameUtils.NOT_FOUND))" to="!((path == null) || ((path.indexOf(FilenameUtils.UNIX_SEPARATOR)) == (FilenameUtils.NOT_FOUND)))" />
    <mutant id="mutant_418" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 7)" to="((offset + 7) * -1)" />
    <mutant id="mutant_411" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="((((super.toString()) + &quot;(&quot;) + condition) - 1)" />
    <mutant id="mutant_895" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="((&quot;The reference file \'&quot; + reference) - 1)" />
    <mutant id="mutant_412" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="(newcount - (filledBufferSum))" to="((newcount - (filledBufferSum)) + 1)" />
    <mutant id="mutant_896" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString()))" to="((((super.toString()) + &quot;(&quot;) + (filter.toString())) - 1)" />
    <mutant id="mutant_413" viable="false" in="?" from="1024 * 4" to="(1024 * 4) + 1" />
    <mutant id="mutant_897" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="((high &lt;&lt; 24) + (4294967295L &amp; low)) + 1" />
    <mutant id="mutant_414" viable="false" in="?" from="(FileUtils.ONE_MB) * 30" to="((FileUtils.ONE_MB) * 30) - 1" />
    <mutant id="mutant_898" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="((super.toString()) + &quot;[sumDirectoryContents=&quot;)" to="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) * -1)" />
    <mutant id="mutant_1270" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) * -1" />
    <mutant id="mutant_1271" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="(count) - (filledBufferSum)" to="((count) - (filledBufferSum)) * -1" />
    <mutant id="mutant_419" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(length &gt; 0) &amp;&amp; (length &lt; bufferLength)" to="!((length &gt; 0) &amp;&amp; (length &lt; bufferLength))" />
    <mutant id="mutant_1267" viable="true" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="(index + 1)" to="((index + 1) + 1)" />
    <mutant id="mutant_1268" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_1265" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="((((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped) * -1)" />
    <mutant id="mutant_1266" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) * -1)" />
    <mutant id="mutant_1263" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="((max) &gt;= 0) &amp;&amp; ((pos) &gt;= (max))" to="!(((max) &gt;= 0) &amp;&amp; ((pos) &gt;= (max)))" />
    <mutant id="mutant_1264" viable="true" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="((&quot;The byte count &quot; + result) + 1)" />
    <mutant id="mutant_1261" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="((high &lt;&lt; 24) + (4294967295L &amp; low)) * -1" />
    <mutant id="mutant_1262" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;) - 1)" />
    <mutant id="mutant_891" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) - 1)" />
    <mutant id="mutant_892" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="((&quot;Array Size=&quot; + (b.length)) * -1)" />
    <mutant id="mutant_893" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;)" to="(((&quot;File &quot; + directory) + &quot; exists and is &quot;) + 1)" />
    <mutant id="mutant_410" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) + &quot;\' are the same&quot;)" to="(((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) + &quot;\' are the same&quot;) * -1)" />
    <mutant id="mutant_894" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip - remain" to="(toSkip - remain) * -1" />
    <mutant id="mutant_1269" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len + 1" to="(len + 1) * -1" />
    <mutant id="mutant_890" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="(((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;) - 1)" />
    <mutant id="mutant_426" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + 1)" />
    <mutant id="mutant_427" viable="false" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name)) + &quot;]&quot;" to="((&quot;FileDeleteStrategy[&quot; + (name)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_428" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) - 1)" />
    <mutant id="mutant_429" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_422" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; does not exist&quot;" to="(directory + &quot; does not exist&quot;) * -1" />
    <mutant id="mutant_423" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;)" to="((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) - 1)" />
    <mutant id="mutant_424" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_425" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) - 1)" />
    <mutant id="mutant_1260" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;)" to="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) - 1)" />
    <mutant id="mutant_1256" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="numberOfChars - ((position) - (size))" to="(numberOfChars - ((position) - (size))) + 1" />
    <mutant id="mutant_1257" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' exists but is a directory&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' exists but is a directory&quot;) + 1)" />
    <mutant id="mutant_1254" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(offset + location)" to="((offset + location) - 1)" />
    <mutant id="mutant_1255" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(&quot;URL could not be converted to a File: &quot; + url)" to="((&quot;URL could not be converted to a File: &quot; + url) + 1)" />
    <mutant id="mutant_1252" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="directory + &quot; does not exist&quot;" to="(directory + &quot; does not exist&quot;) * -1" />
    <mutant id="mutant_1253" viable="false" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="((&quot;The byte count &quot; + result) - 1)" />
    <mutant id="mutant_1250" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="size - pos" to="(size - pos) + 1" />
    <mutant id="mutant_1251" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;) + 1)" />
    <mutant id="mutant_420" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(line != null) &amp;&amp; ((lines.size()) &lt; max)" to="!((line != null) &amp;&amp; ((lines.size()) &lt; max))" />
    <mutant id="mutant_421" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="((size - i) * -1)" />
    <mutant id="mutant_1258" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" from="((written) + count)" to="(((written) + count) + 1)" />
    <mutant id="mutant_1259" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="((&quot;Skip count must be non-negative, actual: &quot; + toSkip) - 1)" />
    <mutant id="mutant_437" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) + lines)" to="(((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) + lines) * -1)" />
    <mutant id="mutant_438" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) + 1)" />
    <mutant id="mutant_439" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;)" to="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) * -1)" />
    <mutant id="mutant_433" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="((i - 2) + 1)" />
    <mutant id="mutant_434" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) - (filledBufferSum)" to="((count) - (filledBufferSum)) * -1" />
    <mutant id="mutant_435" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="((&quot;Bytes to skip must not be negative: &quot; + toSkip) + 1)" />
    <mutant id="mutant_436" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) + &quot;\' are the same&quot;)" to="(((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) + &quot;\' are the same&quot;) - 1)" />
    <mutant id="mutant_1245" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="((((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;) + 1)" />
    <mutant id="mutant_1246" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" from="(&quot;Size cannot be greater than Integer max value: &quot; + size)" to="((&quot;Size cannot be greater than Integer max value: &quot; + size) * -1)" />
    <mutant id="mutant_1243" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) - 1)" />
    <mutant id="mutant_1244" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="(((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;) - 1)" />
    <mutant id="mutant_1241" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((xmlProlog.length()) + len)" to="(((xmlProlog.length()) + len) - 1)" />
    <mutant id="mutant_1242" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)" to="((((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)) + 1" />
    <mutant id="mutant_1240" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) + 1)" />
    <mutant id="mutant_430" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(newLineSequence.length) - 1" to="((newLineSequence.length) - 1) + 1" />
    <mutant id="mutant_431" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="((pos + i) + 1) * -1" />
    <mutant id="mutant_432" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart)" to="(((currentLastBytePos) - lineStart) * -1)" />
    <mutant id="mutant_1249" viable="true" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString())) + &quot;]&quot;" to="((((super.toString()) + &quot;[&quot;) + (delegate.toString())) + &quot;]&quot;) + 1" />
    <mutant id="mutant_1247" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) - (filledBufferSum)" to="((count) - (filledBufferSum)) + 1" />
    <mutant id="mutant_1248" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(len - 1)" to="((len - 1) + 1)" />
    <mutant id="mutant_327" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="((buffers.size()) - 1)" to="(((buffers.size()) - 1) - 1)" />
    <mutant id="mutant_328" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="(j + 1) + 1" />
    <mutant id="mutant_329" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="((i - 2) - 1)" />
    <mutant id="mutant_323" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="((&quot;Bytes to skip: &quot; + toSkip) + 1)" />
    <mutant id="mutant_324" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size)) + &quot;)&quot;" to="(((((super.toString()) + &quot;(&quot;) + condition) + (size)) + &quot;)&quot;) * -1" />
    <mutant id="mutant_325" viable="true" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) + 1)" />
    <mutant id="mutant_326" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 1)" to="((prefix + 1) + 1)" />
    <mutant id="mutant_1083" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((totalByteLength) / blockSize)" to="(((totalByteLength) / blockSize) + 1)" />
    <mutant id="mutant_1084" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) - 1)" />
    <mutant id="mutant_1081" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;)" to="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) * -1)" />
    <mutant id="mutant_1082" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(off + len)" to="((off + len) + 1)" />
    <mutant id="mutant_1080" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((c != (-1)) &amp;&amp; (firstGT == (-1))) &amp;&amp; (offset &lt; (XmlStreamReader.BUFFER_SIZE))" to="!(((c != (-1)) &amp;&amp; (firstGT == (-1))) &amp;&amp; (offset &lt; (XmlStreamReader.BUFFER_SIZE)))" />
    <mutant id="mutant_1078" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) + (data.length))" to="((((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) + (data.length)) * -1)" />
    <mutant id="mutant_1079" viable="true" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="(index + 1)" to="((index + 1) * -1)" />
    <mutant id="mutant_1076" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="((size - i) * -1)" />
    <mutant id="mutant_1077" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48))" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) * -1)" />
    <mutant id="mutant_1074" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(offset + location)" to="((offset + location) * -1)" />
    <mutant id="mutant_1075" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="((super.toString()) + &quot;[sumDirectoryContents=&quot;)" to="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + 1)" />
    <mutant id="mutant_320" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_321" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="((((exists) != origExists) || ((lastModified) != origLastModified)) || ((directory) != origDirectory))" to="(!((((exists) != origExists) || ((lastModified) != origLastModified)) || ((directory) != origDirectory)))" />
    <mutant id="mutant_322" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="toSkip - remain" to="(toSkip - remain) - 1" />
    <mutant id="mutant_338" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(length - totalRead)" to="((length - totalRead) * -1)" />
    <mutant id="mutant_339" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + parentFile) + &quot;\' directory cannot be created&quot;)" to="(((&quot;Destination \'&quot; + parentFile) + &quot;\' directory cannot be created&quot;) * -1)" />
    <mutant id="mutant_334" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i) + 1" to="((pos + i) + 1) + 1" />
    <mutant id="mutant_335" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="(bomEnc != null) &amp;&amp; (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.UTF_32))" to="!((bomEnc != null) &amp;&amp; (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.UTF_32)))" />
    <mutant id="mutant_336" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) - 1)" />
    <mutant id="mutant_337" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i - newLineMatchByteCount" to="(i - newLineMatchByteCount) * -1" />
    <mutant id="mutant_1072" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="((basePath + '/') + fullFilenameToAdd)" to="(((basePath + '/') + fullFilenameToAdd) + 1)" />
    <mutant id="mutant_1073" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)" to="((((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)) - 1" />
    <mutant id="mutant_1070" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_1071" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="toSkip - remain" to="(toSkip - remain) * -1" />
    <mutant id="mutant_1069" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len + 1" to="(len + 1) - 1" />
    <mutant id="mutant_1067" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(!isLastFilePart) &amp;&amp; (i &lt; (avoidNewlineSplitBufferSize))" to="!((!isLastFilePart) &amp;&amp; (i &lt; (avoidNewlineSplitBufferSize)))" />
    <mutant id="mutant_1068" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="((((exists) != origExists) || ((lastModified) != origLastModified)) || ((directory) != origDirectory)) || ((length) != origLength)" to="!(((((exists) != origExists) || ((lastModified) != origLastModified)) || ((directory) != origDirectory)) || ((length) != origLength))" />
    <mutant id="mutant_1065" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) * -1)" />
    <mutant id="mutant_1066" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) - 1)" />
    <mutant id="mutant_1063" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) + ((value4 &amp; 255) &lt;&lt; 24)" to="(((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) + ((value4 &amp; 255) &lt;&lt; 24)) * -1" />
    <mutant id="mutant_1064" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="((position) - (size))" to="(((position) - (size)) + 1)" />
    <mutant id="mutant_330" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="((((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len) + 1)" />
    <mutant id="mutant_331" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;) - 1)" />
    <mutant id="mutant_332" viable="false" in="?" from="((((((osName.indexOf(&quot;linux&quot;)) != (-1)) || ((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))) || ((osName.indexOf(&quot;freebsd&quot;)) != (-1))) || ((osName.indexOf(&quot;irix&quot;)) != (-1))) || ((osName.indexOf(&quot;digital unix&quot;)) != (-1)))" to="(!((((((osName.indexOf(&quot;linux&quot;)) != (-1)) || ((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))) || ((osName.indexOf(&quot;freebsd&quot;)) != (-1))) || ((osName.indexOf(&quot;irix&quot;)) != (-1))) || ((osName.indexOf(&quot;digital unix&quot;)) != (-1))))" />
    <mutant id="mutant_333" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) * -1)" />
    <mutant id="mutant_349" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' already exists&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' already exists&quot;) - 1)" />
    <mutant id="mutant_345" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" from="(bomEnc != null) &amp;&amp; (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.UTF_16))" to="!((bomEnc != null) &amp;&amp; (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.UTF_16)))" />
    <mutant id="mutant_346" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 0)" to="((offset + 0) * -1)" />
    <mutant id="mutant_347" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="((&quot;The filter[&quot; + i) + &quot;] is null&quot;)" to="(((&quot;The filter[&quot; + i) + &quot;] is null&quot;) * -1)" />
    <mutant id="mutant_348" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) * -1)" />
    <mutant id="mutant_1061" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(((off &lt; 0) || (off &gt; (b.length))) || (len &lt; 0))" to="(!(((off &lt; 0) || (off &gt; (b.length))) || (len &lt; 0)))" />
    <mutant id="mutant_1062" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) - 1)" />
    <mutant id="mutant_1060" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' exists but is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' exists but is not a directory&quot;) * -1)" />
    <mutant id="mutant_1058" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="(length - remaining) - 1" />
    <mutant id="mutant_1059" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="((&quot;The reference file \'&quot; + reference) * -1)" />
    <mutant id="mutant_1056" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) * -1)" />
    <mutant id="mutant_1057" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;)" to="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) + 1)" />
    <mutant id="mutant_1054" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir)" to="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) - 1)" />
    <mutant id="mutant_1055" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="((&quot;Length must not be negative: &quot; + length) * -1)" />
    <mutant id="mutant_1052" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Source \'&quot; + destDir) + &quot;\' is not a directory&quot;) - 1)" />
    <mutant id="mutant_1053" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((len &lt; 0) || (off &lt; 0))" to="(!((len &lt; 0) || (off &lt; 0)))" />
    <mutant id="mutant_341" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="((((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len) + 1)" />
    <mutant id="mutant_342" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;)" to="((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) * -1)" />
    <mutant id="mutant_343" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="(freeSpaceWindows(path, timeout)) / (FileUtils.ONE_KB)" to="((freeSpaceWindows(path, timeout)) / (FileUtils.ONE_KB)) + 1" />
    <mutant id="mutant_344" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(size - offset)" to="((size - offset) + 1)" />
    <mutant id="mutant_340" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(&quot;Marked position [&quot; + (mark))" to="((&quot;Marked position [&quot; + (mark)) * -1)" />
    <mutant id="mutant_356" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="(j + 6)" to="((j + 6) + 1)" />
    <mutant id="mutant_357" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path)" to="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) + 1)" />
    <mutant id="mutant_358" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) + timeout)" to="(((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) + timeout) * -1)" />
    <mutant id="mutant_359" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((xmlProlog.length()) + len)" to="(((xmlProlog.length()) + len) * -1)" />
    <mutant id="mutant_1050" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) + length)" to="((((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) + length) * -1)" />
    <mutant id="mutant_1051" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' already exists&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' already exists&quot;) + 1)" />
    <mutant id="mutant_1047" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream(int)" from="(&quot;Negative initial size: &quot; + size)" to="((&quot;Negative initial size: &quot; + size) * -1)" />
    <mutant id="mutant_1048" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) * -1)" />
    <mutant id="mutant_1045" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;)" to="(((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) * -1)" />
    <mutant id="mutant_1046" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="((end - start) - 1)" />
    <mutant id="mutant_1043" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="((newLineSequence.length) - 1)" to="(((newLineSequence.length) - 1) - 1)" />
    <mutant id="mutant_1044" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate)" to="((((super.toString()) + &quot;(&quot;) + delegate) * -1)" />
    <mutant id="mutant_1041" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((currentBuffer.length) - inBufferPos)" to="(((currentBuffer.length) - inBufferPos) * -1)" />
    <mutant id="mutant_1042" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen)" to="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + 1)" />
    <mutant id="mutant_352" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) - 1" />
    <mutant id="mutant_353" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;)" to="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + 1)" />
    <mutant id="mutant_354" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile)" to="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) + 1)" />
    <mutant id="mutant_355" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;) + &quot;not a directory. Unable to create directory.&quot;" to="(((&quot;File &quot; + directory) + &quot; exists and is &quot;) + &quot;not a directory. Unable to create directory.&quot;) * -1" />
    <mutant id="mutant_350" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory) + &quot;.&quot;" to="((&quot;Unable to delete directory &quot; + directory) + &quot;.&quot;) - 1" />
    <mutant id="mutant_1049" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="((position) - (size))" to="(((position) - (size)) - 1)" />
    <mutant id="mutant_351" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="((pos + i) * -1)" />
    <mutant id="mutant_367" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 0)" to="((offset + 0) - 1)" />
    <mutant id="mutant_368" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(off + len)" to="((off + len) * -1)" />
    <mutant id="mutant_369" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="(((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;) - 1)" />
    <mutant id="mutant_363" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="((&quot;Length must not be negative: &quot; + length) - 1)" />
    <mutant id="mutant_364" viable="false" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="filename + (FilenameUtils.UNIX_SEPARATOR)" to="(filename + (FilenameUtils.UNIX_SEPARATOR)) * -1" />
    <mutant id="mutant_365" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="((&quot;The reference file \'&quot; + reference) * -1)" />
    <mutant id="mutant_366" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) - 1)" />
    <mutant id="mutant_360" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_PB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_PB)) * -1" />
    <mutant id="mutant_361" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(&quot;Chars to skip: &quot; + toSkip)" to="((&quot;Chars to skip: &quot; + toSkip) - 1)" />
    <mutant id="mutant_362" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(len == 2) || ((org.apache.commons.io.FilenameUtils.isSeparator(filename.charAt(2))) == false)" to="!((len == 2) || ((org.apache.commons.io.FilenameUtils.isSeparator(filename.charAt(2))) == false))" />
    <mutant id="mutant_378" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Size must be equal or greater than zero: &quot; + size)" to="((&quot;Size must be equal or greater than zero: &quot; + size) * -1)" />
    <mutant id="mutant_379" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="((pos + i) - 1)" />
    <mutant id="mutant_374" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;)" to="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) * -1)" />
    <mutant id="mutant_375" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' already exists&quot;)" to="(((&quot;Destination \'&quot; + destFile) + &quot;\' already exists&quot;) * -1)" />
    <mutant id="mutant_376" viable="true" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate)" to="((((super.toString()) + &quot;(&quot;) + delegate) + 1)" />
    <mutant id="mutant_377" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path)" to="(((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) - 1)" />
    <mutant id="mutant_370" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) + 1)" />
    <mutant id="mutant_371" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size))" to="(((((super.toString()) + &quot;(&quot;) + condition) + (size)) - 1)" />
    <mutant id="mutant_372" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="((wcs.length) - 1)" to="(((wcs.length) - 1) - 1)" />
    <mutant id="mutant_373" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="((((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)) + 1" />
    <mutant id="mutant_389" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;) * -1)" />
    <mutant id="mutant_380" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16))" to="(((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) * -1)" />
    <mutant id="mutant_1098" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="((((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) - 1)" />
    <mutant id="mutant_1099" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(count) - (filledBufferSum)" to="((count) - (filledBufferSum)) - 1" />
    <mutant id="mutant_1096" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) + &quot;\'&quot;)" to="(((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) + &quot;\'&quot;) * -1)" />
    <mutant id="mutant_1097" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) + &quot; EB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) + &quot; EB&quot;) + 1" />
    <mutant id="mutant_385" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;) * -1)" />
    <mutant id="mutant_386" viable="true" in="org.apache.commons.io.input.XmlStreamReader.isAppXml(java.lang.String)" from="(mime != null) &amp;&amp; ((((mime.equals(&quot;application/xml&quot;)) || (mime.equals(&quot;application/xml-dtd&quot;))) || (mime.equals(&quot;application/xml-external-parsed-entity&quot;))) || ((mime.startsWith(&quot;application/&quot;)) &amp;&amp; (mime.endsWith(&quot;+xml&quot;))))" to="!((mime != null) &amp;&amp; ((((mime.equals(&quot;application/xml&quot;)) || (mime.equals(&quot;application/xml-dtd&quot;))) || (mime.equals(&quot;application/xml-external-parsed-entity&quot;))) || ((mime.startsWith(&quot;application/&quot;)) &amp;&amp; (mime.endsWith(&quot;+xml&quot;)))))" />
    <mutant id="mutant_387" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="((((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len) * -1)" />
    <mutant id="mutant_388" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1) * (blockSize)" to="((no - 1) * (blockSize)) + 1" />
    <mutant id="mutant_381" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" from="((written) + count)" to="(((written) + count) - 1)" />
    <mutant id="mutant_382" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 0)" to="((offset + 0) * -1)" />
    <mutant id="mutant_383" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) + (data.length))" to="((((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) + (data.length)) - 1)" />
    <mutant id="mutant_384" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Unexpected readed size. current: &quot; + offset)" to="((&quot;Unexpected readed size. current: &quot; + offset) * -1)" />
    <mutant id="mutant_1094" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(totalByteLength) / blockSize" to="((totalByteLength) / blockSize) - 1" />
    <mutant id="mutant_1095" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be written to&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' cannot be written to&quot;) - 1)" />
    <mutant id="mutant_1092" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((totalByteLength) / blockSize) + 1" to="(((totalByteLength) / blockSize) + 1) * -1" />
    <mutant id="mutant_1093" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="((prefix + 2) - 1)" />
    <mutant id="mutant_1090" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(&quot;Marked position [&quot; + (mark))" to="((&quot;Marked position [&quot; + (mark)) * -1)" />
    <mutant id="mutant_1091" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI))) + &quot; MB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI))) + &quot; MB&quot;) - 1" />
    <mutant id="mutant_390" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) - 1" />
    <mutant id="mutant_1089" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_391" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="length + (leftOverOfLastFilePart != null ? leftOverOfLastFilePart.length : 0)" to="(length + (leftOverOfLastFilePart != null ? leftOverOfLastFilePart.length : 0)) * -1" />
    <mutant id="mutant_1087" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length)" to="((offset + length) * -1)" />
    <mutant id="mutant_1088" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 6)" to="((offset + 6) + 1)" />
    <mutant id="mutant_1085" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16))" to="(((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) - 1)" />
    <mutant id="mutant_1086" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 4)" to="((offset + 4) * -1)" />
    <mutant id="mutant_396" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) * -1)" />
    <mutant id="mutant_397" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) * -1)" />
    <mutant id="mutant_398" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_399" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;)" to="((((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) + &quot; timeout=&quot;) - 1)" />
    <mutant id="mutant_392" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((&quot;Encoding &quot; + encoding) + &quot; is not supported yet (feel free to submit a patch)&quot;)" to="(((&quot;Encoding &quot; + encoding) + &quot; is not supported yet (feel free to submit a patch)&quot;) - 1)" />
    <mutant id="mutant_393" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;)" to="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) + 1)" />
    <mutant id="mutant_394" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(len &lt; 0) || ((off + len) &gt; (b.length))" to="!((len &lt; 0) || ((off + len) &gt; (b.length)))" />
    <mutant id="mutant_395" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" from="((byteOrderMark) != null) &amp;&amp; (getBOM().equals(bom))" to="!(((byteOrderMark) != null) &amp;&amp; (getBOM().equals(bom)))" />
    <mutant id="mutant_1519" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;) * -1)" />
    <mutant id="mutant_1510" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' is a directory&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' is a directory&quot;) - 1)" />
    <mutant id="mutant_1517" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="(length - remaining) + 1" />
    <mutant id="mutant_1518" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="((k + j) * -1)" />
    <mutant id="mutant_1515" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) + maxBytesPerChar)" to="((((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) + maxBytesPerChar) * -1)" />
    <mutant id="mutant_1516" viable="true" in="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)" from="((str.length()) - endLen)" to="(((str.length()) - endLen) * -1)" />
    <mutant id="mutant_1513" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) - (filledBufferSum)" to="((count) - (filledBufferSum)) - 1" />
    <mutant id="mutant_1514" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="((&quot;Destination \'&quot; + destFile) * -1)" />
    <mutant id="mutant_1511" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="((size - 1) + 1)" />
    <mutant id="mutant_1512" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) * -1)" />
    <mutant id="mutant_1508" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="(file1.lastModified()) - (file2.lastModified())" to="((file1.lastModified()) - (file2.lastModified())) + 1" />
    <mutant id="mutant_1509" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) * -1)" />
    <mutant id="mutant_1506" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + 1)" />
    <mutant id="mutant_1507" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="length - ((int)(((position) - (size))))" to="(length - ((int)(((position) - (size))))) + 1" />
    <mutant id="mutant_1504" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) * -1)" />
    <mutant id="mutant_1505" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 0)" to="((offset + 0) + 1)" />
    <mutant id="mutant_1502" viable="true" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="(httpContentType != null) &amp;&amp; (httpContentType.startsWith(&quot;text/html&quot;))" to="!((httpContentType != null) &amp;&amp; (httpContentType.startsWith(&quot;text/html&quot;)))" />
    <mutant id="mutant_1503" viable="true" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="&quot;text/xml&quot; + httpContentType" to="(&quot;text/xml&quot; + httpContentType) + 1" />
    <mutant id="mutant_1500" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="((&quot;The filter[&quot; + i) + &quot;] is null&quot;)" to="(((&quot;The filter[&quot; + i) + &quot;] is null&quot;) - 1)" />
    <mutant id="mutant_1501" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="((((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual) + 1)" />
    <mutant id="mutant_1553" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString()))" to="((((super.toString()) + &quot;(&quot;) + (filter.toString())) * -1)" />
    <mutant id="mutant_1554" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;)" to="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + 1)" />
    <mutant id="mutant_1551" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="((int)(((position) - (size))))" to="(((int)(((position) - (size)))) + 1)" />
    <mutant id="mutant_1552" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile)" to="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + 1)" />
    <mutant id="mutant_1550" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(&quot;Length to read: &quot; + expected)" to="((&quot;Length to read: &quot; + expected) + 1)" />
    <mutant id="mutant_1559" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="((&quot;Array Size=&quot; + (b.length)) * -1)" />
    <mutant id="mutant_1557" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((off &lt; 0) || (off &gt; (b.length)))" to="(!((off &lt; 0) || (off &gt; (b.length))))" />
    <mutant id="mutant_1558" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len + 1" to="(len + 1) + 1" />
    <mutant id="mutant_1555" viable="true" in="org.apache.commons.io.IOCase.forName(java.lang.String)" from="(&quot;Invalid IOCase name: &quot; + name)" to="((&quot;Invalid IOCase name: &quot; + name) + 1)" />
    <mutant id="mutant_1556" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="(length - remaining) - 1" />
    <mutant id="mutant_1542" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;)" to="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) * -1)" />
    <mutant id="mutant_1543" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="((size - i) + 1)" />
    <mutant id="mutant_1540" viable="false" in="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" from="((line1 != null) &amp;&amp; (line2 != null)) &amp;&amp; (line1.equals(line2))" to="!(((line1 != null) &amp;&amp; (line2 != null)) &amp;&amp; (line1.equals(line2)))" />
    <mutant id="mutant_1541" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_1548" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) - 1)" />
    <mutant id="mutant_1549" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16))" to="((((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) * -1)" />
    <mutant id="mutant_1546" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;) + 1)" />
    <mutant id="mutant_1547" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory) + &quot;.&quot;" to="((&quot;Unable to delete directory &quot; + directory) + &quot;.&quot;) + 1" />
    <mutant id="mutant_1544" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;)" to="(((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) + &quot;]&quot;) * -1)" />
    <mutant id="mutant_1545" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(textIdx + 1)" to="((textIdx + 1) - 1)" />
    <mutant id="mutant_701" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="((((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;) + 1)" />
    <mutant id="mutant_702" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="((&quot;The reference file \'&quot; + reference) + 1)" />
    <mutant id="mutant_703" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)" to="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + 1" />
    <mutant id="mutant_704" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32BE)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32LE))" to="!((bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32BE)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32LE)))" />
    <mutant id="mutant_700" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;)" to="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + 1)" />
    <mutant id="mutant_709" viable="false" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + fullFilenameToAdd)" to="((basePath + fullFilenameToAdd) - 1)" />
    <mutant id="mutant_705" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_MB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_MB)) - 1" />
    <mutant id="mutant_706" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="&quot;Unable to delete file: &quot; + file" to="(&quot;Unable to delete file: &quot; + file) + 1" />
    <mutant id="mutant_707" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' already exists&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' already exists&quot;) * -1)" />
    <mutant id="mutant_708" viable="true" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + delegate) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + delegate) + &quot;)&quot;) + 1" />
    <mutant id="mutant_1531" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + i)" to="((offset + i) - 1)" />
    <mutant id="mutant_1532" viable="true" in="org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)" from="(path == null) || ((path.indexOf(FilenameUtils.WINDOWS_SEPARATOR)) == (FilenameUtils.NOT_FOUND))" to="!((path == null) || ((path.indexOf(FilenameUtils.WINDOWS_SEPARATOR)) == (FilenameUtils.NOT_FOUND)))" />
    <mutant id="mutant_1530" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="((k + j) * -1)" />
    <mutant id="mutant_1539" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="(((currentBuffer.length) - inBufferPos) - 1)" />
    <mutant id="mutant_1537" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="(((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;) * -1)" />
    <mutant id="mutant_1538" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is read-only&quot;)" to="(((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is read-only&quot;) * -1)" />
    <mutant id="mutant_1535" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) - 1)" />
    <mutant id="mutant_1536" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' is not a directory&quot;) - 1)" />
    <mutant id="mutant_1533" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 2)" to="((offset + 2) - 1)" />
    <mutant id="mutant_1534" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="((pos + i) * -1)" />
    <mutant id="mutant_712" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="(!(endOfInput)) &amp;&amp; (((lastCoderResult) == null) || (lastCoderResult.isUnderflow()))" to="!((!(endOfInput)) &amp;&amp; (((lastCoderResult) == null) || (lastCoderResult.isUnderflow())))" />
    <mutant id="mutant_713" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) + 1)" />
    <mutant id="mutant_714" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="(((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) * -1)" />
    <mutant id="mutant_715" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_710" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((no) - 1)" to="(((no) - 1) * -1)" />
    <mutant id="mutant_711" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_716" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="((&quot;Skip count must be non-negative, actual: &quot; + toSkip) * -1)" />
    <mutant id="mutant_717" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="((&quot;Array Size=&quot; + (b.length)) + 1)" />
    <mutant id="mutant_718" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((encoding.length()) - 1)" to="(((encoding.length()) - 1) * -1)" />
    <mutant id="mutant_719" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)" from="((file != null) &amp;&amp; (file.isFile()))" to="(!((file != null) &amp;&amp; (file.isFile())))" />
    <mutant id="mutant_1520" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_1521" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i - newLineMatchByteCount" to="(i - newLineMatchByteCount) + 1" />
    <mutant id="mutant_1528" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(off + len)" to="((off + len) + 1)" />
    <mutant id="mutant_1529" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;) + 1)" />
    <mutant id="mutant_1526" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Unexpected readed size. current: &quot; + offset)" to="((&quot;Unexpected readed size. current: &quot; + offset) - 1)" />
    <mutant id="mutant_1527" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)" from="(maxSizeInclusive + 1L)" to="((maxSizeInclusive + 1L) * -1)" />
    <mutant id="mutant_1524" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) + &quot;\'&quot;)" to="(((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) + &quot;\'&quot;) - 1)" />
    <mutant id="mutant_1525" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="&quot;Unable to create directory &quot; + directory" to="(&quot;Unable to create directory &quot; + directory) - 1" />
    <mutant id="mutant_1522" viable="true" in="org.apache.commons.io.input.XmlStreamReader.isAppXml(java.lang.String)" from="((mime.equals(&quot;application/xml&quot;)) || (mime.equals(&quot;application/xml-dtd&quot;)))" to="(!((mime.equals(&quot;application/xml&quot;)) || (mime.equals(&quot;application/xml-dtd&quot;))))" />
    <mutant id="mutant_1523" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destFile)" to="((&quot;Destination \'&quot; + destFile) - 1)" />
    <mutant id="mutant_723" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) * -1)" />
    <mutant id="mutant_724" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="((idx) + n)" to="(((idx) + n) - 1)" />
    <mutant id="mutant_725" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) - 1)" />
    <mutant id="mutant_726" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="((&quot;Failed to list contents of &quot; + directory) + 1)" />
    <mutant id="mutant_720" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="((size - i) * -1)" />
    <mutant id="mutant_721" viable="true" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) + &quot; exists&quot;)" to="(((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) + &quot; exists&quot;) + 1)" />
    <mutant id="mutant_722" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;)" to="(((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) - 1)" />
    <mutant id="mutant_727" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_728" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="(((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;) * -1)" />
    <mutant id="mutant_729" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="(destDir.exists()) &amp;&amp; ((destDir.isDirectory()) == false)" to="!((destDir.exists()) &amp;&amp; ((destDir.isDirectory()) == false))" />
    <mutant id="mutant_1113" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) - 1)" />
    <mutant id="mutant_1597" viable="true" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) + 1)" />
    <mutant id="mutant_1114" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;)" to="(((&quot;File &quot; + directory) + &quot; exists and is &quot;) * -1)" />
    <mutant id="mutant_1598" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="firstCount + secondCount" to="(firstCount + secondCount) - 1" />
    <mutant id="mutant_1111" viable="false" in="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" from="&quot;text/xml&quot; + httpContentType" to="(&quot;text/xml&quot; + httpContentType) * -1" />
    <mutant id="mutant_1595" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset)" to="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + 1)" />
    <mutant id="mutant_1112" viable="false" in="org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)" from="(file1.isDirectory()) || (file2.isDirectory())" to="!((file1.isDirectory()) || (file2.isDirectory()))" />
    <mutant id="mutant_1596" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((encoding.length()) - 1)" to="(((encoding.length()) - 1) - 1)" />
    <mutant id="mutant_1593" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(size - offset)" to="((size - offset) * -1)" />
    <mutant id="mutant_1110" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' does not exist&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' does not exist&quot;) * -1)" />
    <mutant id="mutant_1594" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_1591" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) + 1)" />
    <mutant id="mutant_1592" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size)) + &quot; bytes&quot;" to="((String.valueOf(size)) + &quot; bytes&quot;) * -1" />
    <mutant id="mutant_1119" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size)) + &quot;)&quot;" to="(((((super.toString()) + &quot;(&quot;) + condition) + (size)) + &quot;)&quot;) + 1" />
    <mutant id="mutant_1117" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(off + len)" to="((off + len) * -1)" />
    <mutant id="mutant_1118" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 0)" to="((offset + 0) - 1)" />
    <mutant id="mutant_1115" viable="true" in="org.apache.commons.io.filefilter.EmptyFileFilter.accept(java.io.File)" from="(files == null) || ((files.length) == 0)" to="!((files == null) || ((files.length) == 0))" />
    <mutant id="mutant_1599" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="((xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE)))" to="(!((xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE))))" />
    <mutant id="mutant_1116" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="((((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped) - 1)" />
    <mutant id="mutant_734" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((off + len) - remaining)" to="(((off + len) - remaining) * -1)" />
    <mutant id="mutant_735" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) * -1)" />
    <mutant id="mutant_736" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="index + (includeSeparator ? 1 : 0)" to="(index + (includeSeparator ? 1 : 0)) + 1" />
    <mutant id="mutant_737" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(len - 1)" to="((len - 1) - 1)" />
    <mutant id="mutant_730" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="size - pos" to="(size - pos) * -1" />
    <mutant id="mutant_731" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="(&quot;Skip count must be non-negative, actual: &quot; + toSkip)" to="((&quot;Skip count must be non-negative, actual: &quot; + toSkip) + 1)" />
    <mutant id="mutant_732" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(k &gt;= 0) &amp;&amp; ((data[k]) == (newLineSequence[j]))" to="!((k &gt;= 0) &amp;&amp; ((data[k]) == (newLineSequence[j])))" />
    <mutant id="mutant_733" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((currentBuffer.length) - inBufferPos)" to="(((currentBuffer.length) - inBufferPos) - 1)" />
    <mutant id="mutant_1590" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size + 2" to="(size + 2) + 1" />
    <mutant id="mutant_738" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;)" to="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) + 1)" />
    <mutant id="mutant_739" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 2)" to="((offset + 2) - 1)" />
    <mutant id="mutant_1102" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip - remain" to="(toSkip - remain) - 1" />
    <mutant id="mutant_1586" viable="false" in="?" from="1024 * 4" to="(1024 * 4) - 1" />
    <mutant id="mutant_1103" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;)" to="(((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) * -1)" />
    <mutant id="mutant_1587" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;)" to="((&quot;Command line threw an InterruptedException &quot; + &quot;for command &quot;) - 1)" />
    <mutant id="mutant_1100" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(&quot;Number of characters to skip is less than zero: &quot; + n)" to="((&quot;Number of characters to skip is less than zero: &quot; + n) - 1)" />
    <mutant id="mutant_1584" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count) + len" to="((count) + len) * -1" />
    <mutant id="mutant_1101" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) + 1)" />
    <mutant id="mutant_1585" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="((k + j) + 1)" />
    <mutant id="mutant_1582" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI))) + &quot; GB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI))) + &quot; GB&quot;) + 1" />
    <mutant id="mutant_1583" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) * -1)" />
    <mutant id="mutant_1580" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) * -1)" />
    <mutant id="mutant_1581" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="offset + index" to="(offset + index) * -1" />
    <mutant id="mutant_1108" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(&quot;Unexpected readed size. current: &quot; + offset)" to="((&quot;Unexpected readed size. current: &quot; + offset) + 1)" />
    <mutant id="mutant_1109" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' is a directory&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' is a directory&quot;) + 1)" />
    <mutant id="mutant_1106" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(lines.size()) - 1" to="((lines.size()) - 1) + 1" />
    <mutant id="mutant_1107" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="(length - totalRead)" to="((length - totalRead) + 1)" />
    <mutant id="mutant_1104" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="((k + j) + 1)" />
    <mutant id="mutant_1588" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent.getLevel()) + 1" to="((parent.getLevel()) + 1) + 1" />
    <mutant id="mutant_1105" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((mark) + (readlimit))" to="(((mark) + (readlimit)) * -1)" />
    <mutant id="mutant_1589" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j + 1" to="(j + 1) + 1" />
    <mutant id="mutant_745" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="((Math.min(posUnix, posWin)) + 1) + 1" />
    <mutant id="mutant_746" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 5)" to="((offset + 5) * -1)" />
    <mutant id="mutant_747" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_748" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 2" to="(prefix + 2) - 1" />
    <mutant id="mutant_741" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' cannot be written to&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' cannot be written to&quot;) * -1)" />
    <mutant id="mutant_742" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((((array[i]) == separator) &amp;&amp; ((array[(i - 1)]) == '.')) &amp;&amp; ((array[(i - 2)]) == '.')) &amp;&amp; ((i == (prefix + 2)) || ((array[(i - 3)]) == separator))" to="!(((((array[i]) == separator) &amp;&amp; ((array[(i - 1)]) == '.')) &amp;&amp; ((array[(i - 2)]) == '.')) &amp;&amp; ((i == (prefix + 2)) || ((array[(i - 3)]) == separator)))" />
    <mutant id="mutant_743" viable="true" in="org.apache.commons.io.input.XmlStreamReader.isAppXml(java.lang.String)" from="((((mime.equals(&quot;application/xml&quot;)) || (mime.equals(&quot;application/xml-dtd&quot;))) || (mime.equals(&quot;application/xml-external-parsed-entity&quot;))) || ((mime.startsWith(&quot;application/&quot;)) &amp;&amp; (mime.endsWith(&quot;+xml&quot;))))" to="(!((((mime.equals(&quot;application/xml&quot;)) || (mime.equals(&quot;application/xml-dtd&quot;))) || (mime.equals(&quot;application/xml-external-parsed-entity&quot;))) || ((mime.startsWith(&quot;application/&quot;)) &amp;&amp; (mime.endsWith(&quot;+xml&quot;)))))" />
    <mutant id="mutant_744" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) * -1)" />
    <mutant id="mutant_749" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;) - 1)" />
    <mutant id="mutant_1575" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;)" to="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) - 1)" />
    <mutant id="mutant_1576" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="(end - start)" to="((end - start) + 1)" />
    <mutant id="mutant_1573" viable="false" in="org.apache.commons.io.IOCase.forName(java.lang.String)" from="(&quot;Invalid IOCase name: &quot; + name)" to="((&quot;Invalid IOCase name: &quot; + name) - 1)" />
    <mutant id="mutant_1574" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 0)" to="((offset + 0) - 1)" />
    <mutant id="mutant_1571" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;)" to="(((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) + 1)" />
    <mutant id="mutant_1572" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) + &quot;\' are the same&quot;)" to="(((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) + &quot;\' are the same&quot;) + 1)" />
    <mutant id="mutant_1570" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent.getLevel()) + 1" to="((parent.getLevel()) + 1) * -1" />
    <mutant id="mutant_740" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path)" to="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) * -1)" />
    <mutant id="mutant_1579" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) - 1)" />
    <mutant id="mutant_1577" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line returned OS error code \'&quot; + (proc.exitValue()))" to="((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + 1)" />
    <mutant id="mutant_1578" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;) + 1)" />
    <mutant id="mutant_756" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 4)" to="((offset + 4) + 1)" />
    <mutant id="mutant_757" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_758" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size)) + &quot; bytes&quot;" to="((String.valueOf(size)) + &quot; bytes&quot;) - 1" />
    <mutant id="mutant_759" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="(((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;) - 1)" />
    <mutant id="mutant_752" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 2)" to="((offset + 2) + 1)" />
    <mutant id="mutant_753" viable="true" in="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="(caseSensitivity != null) &amp;&amp; (!(caseSensitivity.isCaseSensitive()))" to="!((caseSensitivity != null) &amp;&amp; (!(caseSensitivity.isCaseSensitive())))" />
    <mutant id="mutant_754" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_755" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="(((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;) * -1)" />
    <mutant id="mutant_1564" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="firstCount + secondCount" to="(firstCount + secondCount) * -1" />
    <mutant id="mutant_1565" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_1562" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents))" to="((((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) - 1)" />
    <mutant id="mutant_1563" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) + 1)" />
    <mutant id="mutant_1560" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) + &quot;]&quot;" to="((((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_1561" viable="true" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) + 1)" />
    <mutant id="mutant_750" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(length - totalRead)" to="((length - totalRead) + 1)" />
    <mutant id="mutant_751" viable="true" in="org.apache.commons.io.TaggedIOException.isTaggedWith(java.lang.Throwable,java.lang.Object)" from="((tag != null) &amp;&amp; (throwable instanceof org.apache.commons.io.TaggedIOException)) &amp;&amp; (tag.equals(((org.apache.commons.io.TaggedIOException)(throwable)).tag))" to="!(((tag != null) &amp;&amp; (throwable instanceof org.apache.commons.io.TaggedIOException)) &amp;&amp; (tag.equals(((org.apache.commons.io.TaggedIOException)(throwable)).tag)))" />
    <mutant id="mutant_1568" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(org.apache.commons.io.FilenameUtils.isSeparator(ch0)) &amp;&amp; (org.apache.commons.io.FilenameUtils.isSeparator(ch1))" to="!((org.apache.commons.io.FilenameUtils.isSeparator(ch0)) &amp;&amp; (org.apache.commons.io.FilenameUtils.isSeparator(ch1)))" />
    <mutant id="mutant_1569" viable="true" in="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])" from="(bytes == null) || ((bytes.length) == 0)" to="!((bytes == null) || ((bytes.length) == 0))" />
    <mutant id="mutant_1566" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) - 1)" />
    <mutant id="mutant_1567" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff))" to="(((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) - 1)" />
    <mutant id="mutant_767" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) - 1)" />
    <mutant id="mutant_768" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="(basePath + fullFilenameToAdd)" to="((basePath + fullFilenameToAdd) + 1)" />
    <mutant id="mutant_769" viable="true" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString()))" to="((((super.toString()) + &quot;(&quot;) + (filter.toString())) + 1)" />
    <mutant id="mutant_763" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((no) - 1)" to="(((no) - 1) - 1)" />
    <mutant id="mutant_764" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;)" to="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) - 1)" />
    <mutant id="mutant_765" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + destDir)" to="((&quot;Source \'&quot; + destDir) * -1)" />
    <mutant id="mutant_766" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(&quot;Array Size=&quot; + (array.length))" to="((&quot;Array Size=&quot; + (array.length)) - 1)" />
    <mutant id="mutant_1160" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + length)" to="((offset + length) * -1)" />
    <mutant id="mutant_1161" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;) - 1)" />
    <mutant id="mutant_1157" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="((wcs.length) - 1)" to="(((wcs.length) - 1) + 1)" />
    <mutant id="mutant_1158" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) + 1)" />
    <mutant id="mutant_1155" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + 1)" />
    <mutant id="mutant_1156" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(totalByteLength) / blockSize" to="((totalByteLength) / blockSize) + 1" />
    <mutant id="mutant_1153" viable="true" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff))" to="(((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) + 1)" />
    <mutant id="mutant_1154" viable="false" in="?" from="1024 * 4" to="(1024 * 4) + 1" />
    <mutant id="mutant_1151" viable="false" in="org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)" from="file + &quot; does not exist&quot;" to="(file + &quot; does not exist&quot;) * -1" />
    <mutant id="mutant_1152" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(((posUnix == (FilenameUtils.NOT_FOUND)) &amp;&amp; (posWin == (FilenameUtils.NOT_FOUND))) || (posUnix == 2))" to="(!(((posUnix == (FilenameUtils.NOT_FOUND)) &amp;&amp; (posWin == (FilenameUtils.NOT_FOUND))) || (posUnix == 2)))" />
    <mutant id="mutant_760" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_761" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="((prefix &gt;= (filename.length())) || (index &lt; 0))" to="(!((prefix &gt;= (filename.length())) || (index &lt; 0)))" />
    <mutant id="mutant_762" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(data.length) - j" to="((data.length) - j) - 1" />
    <mutant id="mutant_1159" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(((array[i]) == separator) &amp;&amp; ((array[(i - 1)]) == '.')) &amp;&amp; ((i == (prefix + 1)) || ((array[(i - 2)]) == separator))" to="!((((array[i]) == separator) &amp;&amp; ((array[(i - 1)]) == '.')) &amp;&amp; ((i == (prefix + 1)) || ((array[(i - 2)]) == separator)))" />
    <mutant id="mutant_778" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 3)" to="((offset + 3) * -1)" />
    <mutant id="mutant_779" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;) * -1)" />
    <mutant id="mutant_774" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(&quot;Length to read: &quot; + length)" to="((&quot;Length to read: &quot; + length) + 1)" />
    <mutant id="mutant_775" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' is a directory&quot;)" to="(((&quot;Destination \'&quot; + destFile) + &quot;\' is a directory&quot;) - 1)" />
    <mutant id="mutant_776" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;) + 1)" />
    <mutant id="mutant_777" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(bytesRead == 0) &amp;&amp; (!(this.cbuf.hasRemaining()))" to="!((bytesRead == 0) &amp;&amp; (!(this.cbuf.hasRemaining())))" />
    <mutant id="mutant_1150" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + 1)" />
    <mutant id="mutant_1146" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(offset + 3)" to="((offset + 3) - 1)" />
    <mutant id="mutant_1147" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) + 1)" />
    <mutant id="mutant_1144" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 2)" to="((i - 2) + 1)" />
    <mutant id="mutant_1145" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 0)" to="((offset + 0) * -1)" />
    <mutant id="mutant_1142" viable="false" in="?" from="(((osName.indexOf(&quot;linux&quot;)) != (-1)) || ((osName.indexOf(&quot;mpe/ix&quot;)) != (-1)))" to="(!(((osName.indexOf(&quot;linux&quot;)) != (-1)) || ((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))))" />
    <mutant id="mutant_1143" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="((((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;) * -1)" />
    <mutant id="mutant_1140" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="(prefix + 1) * -1" />
    <mutant id="mutant_1141" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j) - ((newLineSequence.length) - 1)" to="((i + j) - ((newLineSequence.length) - 1)) * -1" />
    <mutant id="mutant_770" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="(((exists) != origExists) || ((lastModified) != origLastModified))" to="(!(((exists) != origExists) || ((lastModified) != origLastModified)))" />
    <mutant id="mutant_771" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)" from="(maxSizeInclusive + 1L)" to="((maxSizeInclusive + 1L) - 1)" />
    <mutant id="mutant_772" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_PB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_PB)) - 1" />
    <mutant id="mutant_773" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="((((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;) - 1)" />
    <mutant id="mutant_1148" viable="false" in="org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)" from="file + &quot; does not exist&quot;" to="(file + &quot; does not exist&quot;) - 1" />
    <mutant id="mutant_1149" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip - remain" to="(toSkip - remain) * -1" />
    <mutant id="mutant_305" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="index + (includeSeparator ? 1 : 0)" to="(index + (includeSeparator ? 1 : 0)) - 1" />
    <mutant id="mutant_789" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) + &quot; EB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_EB_BI))) + &quot; EB&quot;) * -1" />
    <mutant id="mutant_306" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - 4" to="(i - 4) - 1" />
    <mutant id="mutant_307" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 4)" to="((offset + 4) * -1)" />
    <mutant id="mutant_308" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="(((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;) * -1)" />
    <mutant id="mutant_301" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="(length - remaining) - 1" />
    <mutant id="mutant_785" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" to="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) * -1)" />
    <mutant id="mutant_302" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir)" to="((((&quot;Source \'&quot; + srcDir) + &quot;\' and destination \'&quot;) + destDir) * -1)" />
    <mutant id="mutant_786" viable="true" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="(&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath()))" to="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) + 1)" />
    <mutant id="mutant_303" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Failed to delete original file \'&quot; + srcFile)" to="((&quot;Failed to delete original file \'&quot; + srcFile) - 1)" />
    <mutant id="mutant_787" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_304" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; + (new String(leftOver , encoding)))" to="((&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; + (new String(leftOver , encoding))) * -1)" />
    <mutant id="mutant_788" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) + 1)" />
    <mutant id="mutant_309" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) + 1)" />
    <mutant id="mutant_1135" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) * -1)" />
    <mutant id="mutant_1136" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;) + 1)" />
    <mutant id="mutant_1133" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(read == 0) &amp;&amp; (endOfInput)" to="!((read == 0) &amp;&amp; (endOfInput))" />
    <mutant id="mutant_1134" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="((markedAt) &gt;= 0) &amp;&amp; (((charsRead) - (markedAt)) &gt;= (readAheadLimit))" to="!(((markedAt) &gt;= 0) &amp;&amp; (((charsRead) - (markedAt)) &gt;= (readAheadLimit)))" />
    <mutant id="mutant_1131" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) + &quot; TB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) + &quot; TB&quot;) + 1" />
    <mutant id="mutant_1132" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(&quot;Encoding &quot; + encoding)" to="((&quot;Encoding &quot; + encoding) * -1)" />
    <mutant id="mutant_1130" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;) - 1)" />
    <mutant id="mutant_781" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart) + 1" to="(((currentLastBytePos) - lineStart) + 1) * -1" />
    <mutant id="mutant_782" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;) * -1)" />
    <mutant id="mutant_783" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="((((super.toString()) + &quot;(&quot;) + condition) - 1)" />
    <mutant id="mutant_300" viable="true" in="org.apache.commons.io.input.XmlStreamReader.isAppXml(java.lang.String)" from="(((mime.equals(&quot;application/xml&quot;)) || (mime.equals(&quot;application/xml-dtd&quot;))) || (mime.equals(&quot;application/xml-external-parsed-entity&quot;)))" to="(!(((mime.equals(&quot;application/xml&quot;)) || (mime.equals(&quot;application/xml-dtd&quot;))) || (mime.equals(&quot;application/xml-external-parsed-entity&quot;))))" />
    <mutant id="mutant_784" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_1139" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_1137" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin)) + 1" to="((Math.min(posUnix, posWin)) + 1) - 1" />
    <mutant id="mutant_780" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24))" to="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) * -1)" />
    <mutant id="mutant_1138" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16))" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + 1)" />
    <mutant id="mutant_316" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(&quot;Marked position [&quot; + (mark))" to="((&quot;Marked position [&quot; + (mark)) - 1)" />
    <mutant id="mutant_317" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(((array[i]) == separator) &amp;&amp; ((array[(i - 1)]) == '.'))" to="(!(((array[i]) == separator) &amp;&amp; ((array[(i - 1)]) == '.')))" />
    <mutant id="mutant_318" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="(j + 6)" to="((j + 6) * -1)" />
    <mutant id="mutant_319" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 3)" to="((offset + 3) * -1)" />
    <mutant id="mutant_312" viable="false" in="org.apache.commons.io.input.BOMInputStream.skip(long)" from="(n &gt; 0) &amp;&amp; ((readFirstBytes()) &gt;= 0)" to="!((n &gt; 0) &amp;&amp; ((readFirstBytes()) &gt;= 0))" />
    <mutant id="mutant_796" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) * -1)" />
    <mutant id="mutant_313" viable="true" in="org.apache.commons.io.input.XmlStreamReader.isTextXml(java.lang.String)" from="((mime.equals(&quot;text/xml&quot;)) || (mime.equals(&quot;text/xml-external-parsed-entity&quot;)))" to="(!((mime.equals(&quot;text/xml&quot;)) || (mime.equals(&quot;text/xml-external-parsed-entity&quot;))))" />
    <mutant id="mutant_797" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40))" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) - 1)" />
    <mutant id="mutant_314" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="((k + j) - 1)" />
    <mutant id="mutant_798" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 0)" to="((offset + 0) * -1)" />
    <mutant id="mutant_315" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) + size)" to="((((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) + size) * -1)" />
    <mutant id="mutant_799" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="depth + 1" to="(depth + 1) * -1" />
    <mutant id="mutant_1124" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="(length - remaining) + 1" />
    <mutant id="mutant_1125" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(&quot;Length to read: &quot; + length)" to="((&quot;Length to read: &quot; + length) - 1)" />
    <mutant id="mutant_1122" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(off + size)" to="((off + size) + 1)" />
    <mutant id="mutant_1123" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) * -1)" />
    <mutant id="mutant_1120" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((srcDir.getCanonicalPath()) + (File.separator))" to="(((srcDir.getCanonicalPath()) + (File.separator)) + 1)" />
    <mutant id="mutant_1121" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) + actual)" to="((((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) + actual) - 1)" />
    <mutant id="mutant_792" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="((super.toString()) + &quot;[sumDirectoryContents=&quot;)" to="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) - 1)" />
    <mutant id="mutant_793" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' does not exist&quot;) + 1)" />
    <mutant id="mutant_310" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((&quot;Encoding &quot; + encoding) + &quot; is not supported yet (feel free to submit a patch)&quot;)" to="(((&quot;Encoding &quot; + encoding) + &quot; is not supported yet (feel free to submit a patch)&quot;) * -1)" />
    <mutant id="mutant_794" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="((count) + 1)" to="(((count) + 1) + 1)" />
    <mutant id="mutant_311" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + 1)" />
    <mutant id="mutant_795" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((&quot;XML prolog or ROOT element not found on first &quot; + offset) + &quot; bytes&quot;)" to="(((&quot;XML prolog or ROOT element not found on first &quot; + offset) + &quot; bytes&quot;) - 1)" />
    <mutant id="mutant_1128" viable="false" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="filename + (FilenameUtils.UNIX_SEPARATOR)" to="(filename + (FilenameUtils.UNIX_SEPARATOR)) - 1" />
    <mutant id="mutant_1129" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) - 1)" />
    <mutant id="mutant_790" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;Directory \'&quot; + parent)" to="((&quot;Directory \'&quot; + parent) * -1)" />
    <mutant id="mutant_1126" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) * -1)" />
    <mutant id="mutant_791" viable="false" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="(&quot;write(&quot; + b)" to="((&quot;write(&quot; + b) - 1)" />
    <mutant id="mutant_1127" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="length - ((int)(((position) - (size))))" to="(length - ((int)(((position) - (size))))) * -1" />
    <mutant id="mutant_9" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)" from="((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)" to="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + 1" />
    <mutant id="mutant_206" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="((&quot;Destination \'&quot; + destFile) + 1)" />
    <mutant id="mutant_8" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position()))" to="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) * -1)" />
    <mutant id="mutant_207" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) - 1)" />
    <mutant id="mutant_208" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="(&quot;The reference file \'&quot; + reference)" to="((&quot;The reference file \'&quot; + reference) - 1)" />
    <mutant id="mutant_209" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8))" to="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + 1)" />
    <mutant id="mutant_5" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1)" to="((no - 1) - 1)" />
    <mutant id="mutant_202" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j + 1" to="(j + 1) * -1" />
    <mutant id="mutant_686" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(&quot;Chars to skip: &quot; + toSkip)" to="((&quot;Chars to skip: &quot; + toSkip) * -1)" />
    <mutant id="mutant_4" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) + 1)" />
    <mutant id="mutant_203" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) - 1)" />
    <mutant id="mutant_687" viable="true" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_7" viable="false" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name))" to="((&quot;FileDeleteStrategy[&quot; + (name)) * -1)" />
    <mutant id="mutant_204" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="&quot;Unable to delete file: &quot; + file" to="(&quot;Unable to delete file: &quot; + file) - 1" />
    <mutant id="mutant_688" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length) - remaining" to="((offset + length) - remaining) * -1" />
    <mutant id="mutant_6" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(data.length) - 1" to="((data.length) - 1) * -1" />
    <mutant id="mutant_205" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(XmlStreamWriter.BUFFER_SIZE) - (xmlProlog.length())" to="((XmlStreamWriter.BUFFER_SIZE) - (xmlProlog.length())) + 1" />
    <mutant id="mutant_689" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + 1)" />
    <mutant id="mutant_85" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;) * -1)" />
    <mutant id="mutant_84" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="((depthLimit) &lt; 0) || (childDepth &lt;= (depthLimit))" to="!(((depthLimit) &lt; 0) || (childDepth &lt;= (depthLimit)))" />
    <mutant id="mutant_87" viable="true" in="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + 1)" />
    <mutant id="mutant_86" viable="true" in="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)" from="(str1 == null) || (str2 == null)" to="!((str1 == null) || (str2 == null))" />
    <mutant id="mutant_89" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - j" to="(i - j) + 1" />
    <mutant id="mutant_88" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(off + len)" to="((off + len) - 1)" />
    <mutant id="mutant_90" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) * -1)" />
    <mutant id="mutant_92" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="((max) - (pos))" to="(((max) - (pos)) * -1)" />
    <mutant id="mutant_91" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) * -1)" />
    <mutant id="mutant_94" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="((size - i) - 1)" />
    <mutant id="mutant_93" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="((((super.toString()) + &quot;(&quot;) + condition) + 1)" />
    <mutant id="mutant_1" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;)" to="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) - 1)" />
    <mutant id="mutant_682" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.available()" from="(this.bbuf.remaining()) + (this.cbuf.remaining())" to="((this.bbuf.remaining()) + (this.cbuf.remaining())) * -1" />
    <mutant id="mutant_0" viable="false" in="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)" from="(&quot;Parameter \'directory\' is not a directory: &quot; + directory)" to="((&quot;Parameter \'directory\' is not a directory: &quot; + directory) + 1)" />
    <mutant id="mutant_683" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 3)" to="((offset + 3) - 1)" />
    <mutant id="mutant_3" viable="true" in="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)" from="((str.length()) - endLen)" to="(((str.length()) - endLen) - 1)" />
    <mutant id="mutant_200" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(destDir.exists()) &amp;&amp; ((destDir.isDirectory()) == false)" to="!((destDir.exists()) &amp;&amp; ((destDir.isDirectory()) == false))" />
    <mutant id="mutant_684" viable="false" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="(&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath()))" to="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) - 1)" />
    <mutant id="mutant_2" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="(((currentBuffer.length) - inBufferPos) - 1)" />
    <mutant id="mutant_201" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) - 1)" />
    <mutant id="mutant_685" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1) * (blockSize)" to="((no - 1) * (blockSize)) - 1" />
    <mutant id="mutant_680" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) + 1)" />
    <mutant id="mutant_681" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 2)" to="((offset + 2) + 1)" />
    <mutant id="mutant_217" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_KB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_KB)) + 1" />
    <mutant id="mutant_218" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="((position) - (size))" to="(((position) - (size)) * -1)" />
    <mutant id="mutant_219" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;)" to="((&quot;Command line \'dir /-c\' did not return any info &quot; + &quot;for path \'&quot;) * -1)" />
    <mutant id="mutant_213" viable="false" in="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" from="(&quot;Unable to delete directory &quot; + directory)" to="((&quot;Unable to delete directory &quot; + directory) * -1)" />
    <mutant id="mutant_697" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + destDir)" to="((&quot;Source \'&quot; + destDir) - 1)" />
    <mutant id="mutant_214" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_MB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_MB)) + 1" />
    <mutant id="mutant_698" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((length &lt; 0) || (offset &lt; 0))" to="(!((length &lt; 0) || (offset &lt; 0)))" />
    <mutant id="mutant_215" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Cannot move directory: &quot; + srcDir)" to="((&quot;Cannot move directory: &quot; + srcDir) * -1)" />
    <mutant id="mutant_699" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((encoding.length()) - 1)" to="(((encoding.length()) - 1) + 1)" />
    <mutant id="mutant_216" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(i + j)" to="((i + j) * -1)" />
    <mutant id="mutant_74" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(len - size)" to="((len - size) - 1)" />
    <mutant id="mutant_73" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) * -1)" />
    <mutant id="mutant_76" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="(&quot;Array Size=&quot; + (b.length))" to="((&quot;Array Size=&quot; + (b.length)) - 1)" />
    <mutant id="mutant_75" viable="true" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="(&quot;The byte count &quot; + result)" to="((&quot;The byte count &quot; + result) + 1)" />
    <mutant id="mutant_78" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) + &quot; KB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) + &quot; KB&quot;) * -1" />
    <mutant id="mutant_77" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="((((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + 1)" />
    <mutant id="mutant_79" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + 1)" />
    <mutant id="mutant_81" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="((i == (prefix + 1)) || ((array[(i - 2)]) == separator))" to="(!((i == (prefix + 1)) || ((array[(i - 2)]) == separator)))" />
    <mutant id="mutant_80" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((buf.charAt(k)) == ',') || ((buf.charAt(k)) == '.')" to="!(((buf.charAt(k)) == ',') || ((buf.charAt(k)) == '.'))" />
    <mutant id="mutant_83" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_KB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_KB)) - 1" />
    <mutant id="mutant_82" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="((size - i) - 1)" />
    <mutant id="mutant_693" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8))" to="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) * -1)" />
    <mutant id="mutant_210" viable="false" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;) - 1)" />
    <mutant id="mutant_694" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="((short)((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)))" to="((short)(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)))) - 1" />
    <mutant id="mutant_211" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) + (currentLastBytePos))" to="(((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) + (currentLastBytePos)) - 1)" />
    <mutant id="mutant_695" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile)" to="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) - 1)" />
    <mutant id="mutant_212" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="(((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;) - 1)" />
    <mutant id="mutant_696" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs)))" to="(((&quot;Command line did not return any info &quot; + &quot;for command &quot;) + (Arrays.asList(cmdAttribs))) - 1)" />
    <mutant id="mutant_690" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16))" to="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) - 1)" />
    <mutant id="mutant_691" viable="false" in="org.apache.commons.io.FileExistsException(java.io.File)" from="(&quot;File &quot; + file)" to="((&quot;File &quot; + file) * -1)" />
    <mutant id="mutant_692" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len)" to="((((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + len) * -1)" />
    <mutant id="mutant_228" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) - 1)" />
    <mutant id="mutant_229" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="numberOfBytes - ((position) - (size))" to="(numberOfBytes - ((position) - (size))) - 1" />
    <mutant id="mutant_224" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.toString()" from="(((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents))" to="((((super.toString()) + &quot;[sumDirectoryContents=&quot;) + (sumDirectoryContents)) * -1)" />
    <mutant id="mutant_225" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="(((currentBuffer.length) - inBufferPos) + 1)" />
    <mutant id="mutant_226" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="offset + index" to="(offset + index) + 1" />
    <mutant id="mutant_227" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read()" from="(endOfInput) &amp;&amp; (!(encoderOut.hasRemaining()))" to="!((endOfInput) &amp;&amp; (!(encoderOut.hasRemaining())))" />
    <mutant id="mutant_220" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="(freeSpaceWindows(path, timeout)) / (FileUtils.ONE_KB)" to="((freeSpaceWindows(path, timeout)) / (FileUtils.ONE_KB)) - 1" />
    <mutant id="mutant_221" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="((prefix + 2) - 1)" />
    <mutant id="mutant_222" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 4)" to="((offset + 4) - 1)" />
    <mutant id="mutant_223" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) * -1)" />
    <mutant id="mutant_239" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(&quot;Marked position [&quot; + (mark))" to="((&quot;Marked position [&quot; + (mark)) + 1)" />
    <mutant id="mutant_235" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;)" to="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + 1)" />
    <mutant id="mutant_236" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="((posUnix == (FilenameUtils.NOT_FOUND)) &amp;&amp; (posWin == (FilenameUtils.NOT_FOUND)))" to="(!((posUnix == (FilenameUtils.NOT_FOUND)) &amp;&amp; (posWin == (FilenameUtils.NOT_FOUND))))" />
    <mutant id="mutant_237" viable="false" in="org.apache.commons.io.filefilter.NotFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + (filter.toString())) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + (filter.toString())) + &quot;)&quot;) * -1" />
    <mutant id="mutant_238" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(offset + i)" to="((offset + i) * -1)" />
    <mutant id="mutant_96" viable="true" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)" from="(extension == null) || (extension.isEmpty())" to="!((extension == null) || (extension.isEmpty()))" />
    <mutant id="mutant_95" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) * -1)" />
    <mutant id="mutant_98" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="(newcount - (filledBufferSum))" to="((newcount - (filledBufferSum)) * -1)" />
    <mutant id="mutant_97" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) * -1)" />
    <mutant id="mutant_99" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_231" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) * -1)" />
    <mutant id="mutant_232" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) - 1)" />
    <mutant id="mutant_233" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' is a directory&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' is a directory&quot;) * -1)" />
    <mutant id="mutant_234" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="((size - i) * -1)" />
    <mutant id="mutant_230" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="numberOfBytes - ((position) - (size))" to="(numberOfBytes - ((position) - (size))) * -1" />
    <mutant id="mutant_246" viable="false" in="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) + 1)" />
    <mutant id="mutant_247" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.available()" from="(this.bbuf.remaining()) + (this.cbuf.remaining())" to="((this.bbuf.remaining()) + (this.cbuf.remaining())) - 1" />
    <mutant id="mutant_248" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40))" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + 1)" />
    <mutant id="mutant_249" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((!(Character.isDigit(c))) &amp;&amp; (c != ',')) &amp;&amp; (c != '.')" to="!(((!(Character.isDigit(c))) &amp;&amp; (c != ',')) &amp;&amp; (c != '.'))" />
    <mutant id="mutant_242" viable="false" in="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;) * -1)" />
    <mutant id="mutant_243" viable="false" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) * -1)" />
    <mutant id="mutant_244" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="((totalByteLength) / blockSize) + 1" to="(((totalByteLength) / blockSize) + 1) - 1" />
    <mutant id="mutant_245" viable="false" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not write to lockDir: &quot; + (lockDir.getAbsolutePath()))" to="((&quot;Could not write to lockDir: &quot; + (lockDir.getAbsolutePath())) * -1)" />
    <mutant id="mutant_240" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((data[(k + j)]) &gt;= ' ') &amp;&amp; ((data[(k + j)]) &lt; 127)" to="!(((data[(k + j)]) &gt;= ' ') &amp;&amp; ((data[(k + j)]) &lt; 127))" />
    <mutant id="mutant_241" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be read&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' cannot be read&quot;) + 1)" />
    <mutant id="mutant_257" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="offset + index" to="(offset + index) - 1" />
    <mutant id="mutant_258" viable="true" in="org.apache.commons.io.FileDeleteStrategy.toString()" from="(&quot;FileDeleteStrategy[&quot; + (name))" to="((&quot;FileDeleteStrategy[&quot; + (name)) + 1)" />
    <mutant id="mutant_259" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) + &quot;\' are the same&quot;)" to="(((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) + &quot;\' are the same&quot;) * -1)" />
    <mutant id="mutant_253" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' does not exist&quot;) + 1)" />
    <mutant id="mutant_254" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + 1)" />
    <mutant id="mutant_255" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="((newLineSequence.length) - 1)" to="(((newLineSequence.length) - 1) * -1)" />
    <mutant id="mutant_256" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) * -1)" />
    <mutant id="mutant_250" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;) * -1)" />
    <mutant id="mutant_251" viable="false" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="(&quot;write(&quot; + b)" to="((&quot;write(&quot; + b) * -1)" />
    <mutant id="mutant_252" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) + actual)" to="((((&quot;Length to read: &quot; + expected) + &quot; actual: &quot;) + actual) + 1)" />
    <mutant id="mutant_268" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Cannot move directory: &quot; + srcDir)" to="((&quot;Cannot move directory: &quot; + srcDir) - 1)" />
    <mutant id="mutant_269" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read()" from="((max) &gt;= 0) &amp;&amp; ((pos) &gt;= (max))" to="!(((max) &gt;= 0) &amp;&amp; ((pos) &gt;= (max)))" />
    <mutant id="mutant_264" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(line.length()) - 1" to="((line.length()) - 1) * -1" />
    <mutant id="mutant_265" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" to="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + 1)" />
    <mutant id="mutant_266" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="((((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + 1)" />
    <mutant id="mutant_267" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="((((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)) - 1" />
    <mutant id="mutant_260" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size)) + &quot;)&quot;" to="(((((super.toString()) + &quot;(&quot;) + condition) + (size)) + &quot;)&quot;) - 1" />
    <mutant id="mutant_261" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32))" to="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) - 1)" />
    <mutant id="mutant_262" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) - 1)" />
    <mutant id="mutant_263" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;)" to="((((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) + &quot;\'&quot;) * -1)" />
    <mutant id="mutant_279" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 3)" to="((offset + 3) - 1)" />
    <mutant id="mutant_270" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 0)" to="((offset + 0) - 1)" />
    <mutant id="mutant_275" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="((prefix + 2) + 1)" />
    <mutant id="mutant_276" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) * -1)" />
    <mutant id="mutant_277" viable="false" in="org.apache.commons.io.FileUtils.toFile(java.net.URL)" from="(url == null) || (!(&quot;file&quot;.equalsIgnoreCase(url.getProtocol())))" to="!((url == null) || (!(&quot;file&quot;.equalsIgnoreCase(url.getProtocol()))))" />
    <mutant id="mutant_278" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' directory cannot be created&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' directory cannot be created&quot;) - 1)" />
    <mutant id="mutant_271" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 2)" to="((offset + 2) * -1)" />
    <mutant id="mutant_272" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual)" to="((((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) + actual) * -1)" />
    <mutant id="mutant_273" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(totalByteLength) / blockSize" to="((totalByteLength) / blockSize) * -1" />
    <mutant id="mutant_274" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + 1)" />
    <mutant id="mutant_280" viable="true" in="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)" from="((str.length()) - endLen)" to="(((str.length()) - endLen) + 1)" />
    <mutant id="mutant_281" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)" from="((file != null) &amp;&amp; (file.isFile())) &amp;&amp; (file.canRead())" to="!(((file != null) &amp;&amp; (file.isFile())) &amp;&amp; (file.canRead()))" />
    <mutant id="mutant_286" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) * -1)" />
    <mutant id="mutant_287" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="((((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)) * -1" />
    <mutant id="mutant_288" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)" from="(maxSizeInclusive + 1L)" to="((maxSizeInclusive + 1L) + 1)" />
    <mutant id="mutant_289" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)" to="((((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)) - 1" />
    <mutant id="mutant_282" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="((high &lt;&lt; 24) + (4294967295L &amp; low)) - 1" />
    <mutant id="mutant_283" viable="false" in="org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)" from="(file1.isDirectory()) || (file2.isDirectory())" to="!((file1.isDirectory()) || (file2.isDirectory()))" />
    <mutant id="mutant_284" viable="true" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not find lockDir: &quot; + (lockDir.getAbsolutePath()))" to="((&quot;Could not find lockDir: &quot; + (lockDir.getAbsolutePath())) + 1)" />
    <mutant id="mutant_285" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="(prefix + 1) + 1" />
    <mutant id="mutant_290" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="((k + j) - 1)" />
    <mutant id="mutant_291" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) * -1" />
    <mutant id="mutant_292" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length - remaining" to="(length - remaining) * -1" />
    <mutant id="mutant_297" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) - 1)" />
    <mutant id="mutant_298" viable="true" in="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" from="(filename1 == null) || (filename2 == null)" to="!((filename1 == null) || (filename2 == null))" />
    <mutant id="mutant_299" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path) + &quot;\&quot;&quot;" to="((&quot;\&quot;&quot; + path) + &quot;\&quot;&quot;) * -1" />
    <mutant id="mutant_293" viable="false" in="?" from="((((osName.indexOf(&quot;linux&quot;)) != (-1)) || ((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))) || ((osName.indexOf(&quot;freebsd&quot;)) != (-1)))" to="(!((((osName.indexOf(&quot;linux&quot;)) != (-1)) || ((osName.indexOf(&quot;mpe/ix&quot;)) != (-1))) || ((osName.indexOf(&quot;freebsd&quot;)) != (-1))))" />
    <mutant id="mutant_294" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(newLineSequence.length) - 1" to="((newLineSequence.length) - 1) * -1" />
    <mutant id="mutant_295" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="(((super.toString()) + &quot;[&quot;) + (delegate.toString())) + &quot;]&quot;" to="((((super.toString()) + &quot;[&quot;) + (delegate.toString())) + &quot;]&quot;) * -1" />
    <mutant id="mutant_296" viable="false" in="org.apache.commons.io.FileUtils.touch(java.io.File)" from="(&quot;Unable to set the last modification time for &quot; + file)" to="((&quot;Unable to set the last modification time for &quot; + file) * -1)" />
    <mutant id="mutant_27" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) + &quot; TB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) + &quot; TB&quot;) * -1" />
    <mutant id="mutant_26" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)" to="((((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) + (((value &gt;&gt; 56) &amp; 255) &lt;&lt; 0)) * -1" />
    <mutant id="mutant_29" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(((posUnix == (FilenameUtils.NOT_FOUND)) &amp;&amp; (posWin == (FilenameUtils.NOT_FOUND))) || (posUnix == 2)) || (posWin == 2)" to="!((((posUnix == (FilenameUtils.NOT_FOUND)) &amp;&amp; (posWin == (FilenameUtils.NOT_FOUND))) || (posUnix == 2)) || (posWin == 2))" />
    <mutant id="mutant_28" viable="false" in="org.apache.commons.io.input.BoundedInputStream.available()" from="((max) &gt;= 0) &amp;&amp; ((pos) &gt;= (max))" to="!(((max) &gt;= 0) &amp;&amp; ((pos) &gt;= (max)))" />
    <mutant id="mutant_21" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent.getLevel()) + 1" to="((parent.getLevel()) + 1) - 1" />
    <mutant id="mutant_20" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' exists but is not a directory&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' exists but is not a directory&quot;) * -1)" />
    <mutant id="mutant_23" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- check path is valid&quot;) - 1)" />
    <mutant id="mutant_22" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + 1)" />
    <mutant id="mutant_25" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 3)" to="((offset + 3) * -1)" />
    <mutant id="mutant_24" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="((encoding.length()) - 1)" to="(((encoding.length()) - 1) - 1)" />
    <mutant id="mutant_16" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) - 1)" />
    <mutant id="mutant_15" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="((&quot;Destination directory \'&quot; + destDir) - 1)" />
    <mutant id="mutant_18" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) * -1)" />
    <mutant id="mutant_17" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="(size) - (position)" to="((size) - (position)) * -1" />
    <mutant id="mutant_19" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 3)" to="((i - 3) - 1)" />
    <mutant id="mutant_10" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;)" to="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) - 1)" />
    <mutant id="mutant_12" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_11" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="((((super.toString()) + &quot;(&quot;) + condition) * -1)" />
    <mutant id="mutant_14" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(!(destDir.mkdirs())) &amp;&amp; (!(destDir.isDirectory()))" to="!((!(destDir.mkdirs())) &amp;&amp; (!(destDir.isDirectory())))" />
    <mutant id="mutant_13" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_49" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)" to="((((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 3)]) &amp; 255) &lt;&lt; 24)) * -1" />
    <mutant id="mutant_48" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) * -1)" />
    <mutant id="mutant_41" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="(&quot;Length to read: &quot; + expected)" to="((&quot;Length to read: &quot; + expected) * -1)" />
    <mutant id="mutant_40" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40))" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) * -1)" />
    <mutant id="mutant_43" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(high &lt;&lt; 32) + (4294967295L &amp; low)" to="((high &lt;&lt; 32) + (4294967295L &amp; low)) * -1" />
    <mutant id="mutant_42" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_TB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_TB)) * -1" />
    <mutant id="mutant_45" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix + 1" to="(prefix + 1) - 1" />
    <mutant id="mutant_44" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path) + &quot;\&quot;&quot;" to="((&quot;\&quot;&quot; + path) + &quot;\&quot;&quot;) - 1" />
    <mutant id="mutant_47" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" from="(&quot;Size cannot be greater than Integer max value: &quot; + size)" to="((&quot;Size cannot be greater than Integer max value: &quot; + size) + 1)" />
    <mutant id="mutant_46" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) - 1)" />
    <mutant id="mutant_50" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="((&quot;Bytes to skip: &quot; + toSkip) - 1)" />
    <mutant id="mutant_38" viable="false" in="org.apache.commons.io.FileUtils.sizeOf(java.io.File)" from="file + &quot; does not exist&quot;" to="(file + &quot; does not exist&quot;) * -1" />
    <mutant id="mutant_37" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8))" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) - 1)" />
    <mutant id="mutant_39" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="((short)((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)))" to="((short)(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)))) * -1" />
    <mutant id="mutant_30" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off)" to="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + 1)" />
    <mutant id="mutant_32" viable="false" in="org.apache.commons.io.EndianUtils.swapShort(short)" from="((short)((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)))" to="((short)(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 8) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 0)))) - 1" />
    <mutant id="mutant_31" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="((&quot;Failed to list contents of &quot; + directory) * -1)" />
    <mutant id="mutant_34" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="(currentLastBytePos) + 1" to="((currentLastBytePos) + 1) - 1" />
    <mutant id="mutant_33" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 5)" to="((offset + 5) - 1)" />
    <mutant id="mutant_36" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="(length - totalRead)" to="((length - totalRead) - 1)" />
    <mutant id="mutant_35" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) - 1)" />
    <mutant id="mutant_63" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) - 1)" />
    <mutant id="mutant_62" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="(&quot;Bytes to skip: &quot; + toSkip)" to="((&quot;Bytes to skip: &quot; + toSkip) * -1)" />
    <mutant id="mutant_65" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart)" to="(((currentLastBytePos) - lineStart) + 1)" />
    <mutant id="mutant_64" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) + 1" />
    <mutant id="mutant_67" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="((size - 1) * -1)" />
    <mutant id="mutant_66" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size + 2" to="(size + 2) - 1" />
    <mutant id="mutant_69" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(srcFiles != null) &amp;&amp; ((srcFiles.length) &gt; 0)" to="!((srcFiles != null) &amp;&amp; ((srcFiles.length) &gt; 0))" />
    <mutant id="mutant_68" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) * -1)" />
    <mutant id="mutant_70" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="(j + 1) + 1" />
    <mutant id="mutant_72" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;)" to="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) - 1)" />
    <mutant id="mutant_71" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 2)" to="((offset + 2) * -1)" />
    <mutant id="mutant_59" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="((buffers.size()) - 1)" to="(((buffers.size()) - 1) * -1)" />
    <mutant id="mutant_52" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(destFile.exists()) &amp;&amp; (destFile.isDirectory())" to="!((destFile.exists()) &amp;&amp; (destFile.isDirectory()))" />
    <mutant id="mutant_51" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(&quot;Command line did not return any info &quot; + &quot;for command &quot;)" to="((&quot;Command line did not return any info &quot; + &quot;for command &quot;) + 1)" />
    <mutant id="mutant_54" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="(&quot;File does not exist: &quot; + file)" to="((&quot;File does not exist: &quot; + file) + 1)" />
    <mutant id="mutant_53" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 2)" to="((offset + 2) * -1)" />
    <mutant id="mutant_56" viable="false" in="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)" from="(&quot;Could not write to lockDir: &quot; + (lockDir.getAbsolutePath()))" to="((&quot;Could not write to lockDir: &quot; + (lockDir.getAbsolutePath())) - 1)" />
    <mutant id="mutant_55" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + src)" to="((&quot;Source \'&quot; + src) + 1)" />
    <mutant id="mutant_58" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(data.length) - j" to="((data.length) - j) + 1" />
    <mutant id="mutant_57" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="(&quot;File \'&quot; + file)" to="((&quot;File \'&quot; + file) - 1)" />
    <mutant id="mutant_61" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(offset + 3)" to="((offset + 3) + 1)" />
    <mutant id="mutant_60" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;)" to="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) + 1)" />
    <mutant id="mutant_1432" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) * -1)" />
    <mutant id="mutant_1433" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(&quot;illegal index: &quot; + index)" to="((&quot;illegal index: &quot; + index) + 1)" />
    <mutant id="mutant_1430" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) + destDir)" to="((((&quot;Cannot move directory: &quot; + srcDir) + &quot; to a subdirectory of itself: &quot;) + destDir) + 1)" />
    <mutant id="mutant_1431" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not find free space in response &quot;) + &quot;for path \'&quot;) + path) - 1)" />
    <mutant id="mutant_1438" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;)" to="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) - 1)" />
    <mutant id="mutant_1439" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((srcDir.getCanonicalPath()) + (File.separator))" to="(((srcDir.getCanonicalPath()) + (File.separator)) - 1)" />
    <mutant id="mutant_1436" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile)" to="((((&quot;Failed to delete original file \'&quot; + srcFile) + &quot;\' after copy to \'&quot;) + destFile) - 1)" />
    <mutant id="mutant_1437" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;) - 1)" />
    <mutant id="mutant_1434" viable="false" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return numeric data as expected &quot;) + &quot;for path \'&quot;) + path) * -1)" />
    <mutant id="mutant_1435" viable="true" in="org.apache.commons.io.FilenameUtils.getName(java.lang.String)" from="(index + 1)" to="((index + 1) + 1)" />
    <mutant id="mutant_1421" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_PB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_PB)) + 1" />
    <mutant id="mutant_1422" viable="false" in="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) - 1)" />
    <mutant id="mutant_1420" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="(((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="((((&quot;Chars to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped) + 1)" />
    <mutant id="mutant_1429" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) - 1)" />
    <mutant id="mutant_1427" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' already exists&quot;)" to="(((&quot;Destination \'&quot; + destFile) + &quot;\' already exists&quot;) + 1)" />
    <mutant id="mutant_1428" viable="false" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) + (Arrays.asList(cmdAttribs)))" to="((((&quot;Command line returned OS error code \'&quot; + (proc.exitValue())) + &quot;\' for command &quot;) + (Arrays.asList(cmdAttribs))) - 1)" />
    <mutant id="mutant_1425" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 0)" to="((offset + 0) - 1)" />
    <mutant id="mutant_1426" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 0)" to="((offset + 0) + 1)" />
    <mutant id="mutant_1423" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j + 1" to="(j + 1) - 1" />
    <mutant id="mutant_1424" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="(length - remaining) - 1" />
    <mutant id="mutant_1410" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="((pos + i) + 1)" />
    <mutant id="mutant_1411" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((((off &lt; 0) || (off &gt; (b.length))) || (len &lt; 0)) || ((off + len) &gt; (b.length)))" to="(!((((off &lt; 0) || (off &gt; (b.length))) || (len &lt; 0)) || ((off + len) &gt; (b.length))))" />
    <mutant id="mutant_1418" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(&quot;Bytes to skip must not be negative: &quot; + toSkip)" to="((&quot;Bytes to skip must not be negative: &quot; + toSkip) - 1)" />
    <mutant id="mutant_1419" viable="false" in="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)" from="(&quot;Parameter \'directory\' is not a directory: &quot; + directory)" to="((&quot;Parameter \'directory\' is not a directory: &quot; + directory) - 1)" />
    <mutant id="mutant_1416" viable="false" in="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)" from="(&quot;Parameter \'directory\' is not a directory: &quot; + directory)" to="((&quot;Parameter \'directory\' is not a directory: &quot; + directory) * -1)" />
    <mutant id="mutant_1417" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="(len &gt; 0) &amp;&amp; (b &gt;= 0)" to="!((len &gt; 0) &amp;&amp; (b &gt;= 0))" />
    <mutant id="mutant_1414" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) + 1)" />
    <mutant id="mutant_1415" viable="false" in="org.apache.commons.io.comparator.ReverseComparator.toString()" from="((super.toString()) + &quot;[&quot;)" to="(((super.toString()) + &quot;[&quot;) - 1)" />
    <mutant id="mutant_1412" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;) + &quot;not a directory. Unable to create directory.&quot;" to="(((&quot;File &quot; + directory) + &quot; exists and is &quot;) + &quot;not a directory. Unable to create directory.&quot;) + 1" />
    <mutant id="mutant_1413" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(&quot;illegal index: &quot; + index)" to="((&quot;illegal index: &quot; + index) - 1)" />
    <mutant id="mutant_1409" viable="true" in="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" from="(index + 1)" to="((index + 1) - 1)" />
    <mutant id="mutant_1400" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;)" to="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) * -1)" />
    <mutant id="mutant_1407" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i - 4" to="(i - 4) + 1" />
    <mutant id="mutant_1408" viable="false" in="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" from="((file.getName()) + (LockableFileWriter.LCK))" to="(((file.getName()) + (LockableFileWriter.LCK)) - 1)" />
    <mutant id="mutant_1405" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="((&quot;Length must not be negative: &quot; + length) + 1)" />
    <mutant id="mutant_1406" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 3)" to="((offset + 3) + 1)" />
    <mutant id="mutant_1403" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="(&quot;The filter[&quot; + i)" to="((&quot;The filter[&quot; + i) - 1)" />
    <mutant id="mutant_1404" viable="false" in="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)" from="(directory + &quot; is not a directory&quot;)" to="((directory + &quot; is not a directory&quot;) - 1)" />
    <mutant id="mutant_1401" viable="false" in="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + src)" to="((&quot;Source \'&quot; + src) * -1)" />
    <mutant id="mutant_1402" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position()))" to="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + 1)" />
    <mutant id="mutant_602" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16))" to="((((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 2)]) &amp; 255) &lt;&lt; 16)) * -1)" />
    <mutant id="mutant_603" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(offset + 5)" to="((offset + 5) * -1)" />
    <mutant id="mutant_604" viable="true" in="org.apache.commons.io.input.XmlStreamReader.isTextXml(java.lang.String)" from="(((mime.equals(&quot;text/xml&quot;)) || (mime.equals(&quot;text/xml-external-parsed-entity&quot;))) || ((mime.startsWith(&quot;text/&quot;)) &amp;&amp; (mime.endsWith(&quot;+xml&quot;))))" to="(!(((mime.equals(&quot;text/xml&quot;)) || (mime.equals(&quot;text/xml-external-parsed-entity&quot;))) || ((mime.startsWith(&quot;text/&quot;)) &amp;&amp; (mime.endsWith(&quot;+xml&quot;)))))" />
    <mutant id="mutant_605" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((mark) + (readlimit))" to="(((mark) + (readlimit)) - 1)" />
    <mutant id="mutant_600" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(((array[i]) == separator) &amp;&amp; ((array[(i - 1)]) == '.'))" to="(!(((array[i]) == separator) &amp;&amp; ((array[(i - 1)]) == '.')))" />
    <mutant id="mutant_601" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1) - prefix" to="((i + 1) - prefix) + 1" />
    <mutant id="mutant_1480" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader.readLine()" from="(&quot;&quot;.equals(line)) &amp;&amp; (!(trailingNewlineOfFileSkipped))" to="!((&quot;&quot;.equals(line)) &amp;&amp; (!(trailingNewlineOfFileSkipped)))" />
    <mutant id="mutant_606" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir)" to="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) + 1)" />
    <mutant id="mutant_607" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="((&quot;Length to read: &quot; + length) + &quot; actual: &quot;)" to="(((&quot;Length to read: &quot; + length) + &quot; actual: &quot;) * -1)" />
    <mutant id="mutant_608" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="(freeSpaceWindows(path, timeout)) / (FileUtils.ONE_KB)" to="((freeSpaceWindows(path, timeout)) / (FileUtils.ONE_KB)) * -1" />
    <mutant id="mutant_609" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) + ((value4 &amp; 255) &lt;&lt; 24)" to="(((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) + ((value4 &amp; 255) &lt;&lt; 24)) + 1" />
    <mutant id="mutant_1476" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;)" to="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + 1)" />
    <mutant id="mutant_1477" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(lines.size()) - 1" to="((lines.size()) - 1) * -1" />
    <mutant id="mutant_1474" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16))" to="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + 1)" />
    <mutant id="mutant_1475" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 1)" to="((prefix + 1) * -1)" />
    <mutant id="mutant_1472" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) * -1)" />
    <mutant id="mutant_1473" viable="true" in="org.apache.commons.io.comparator.PathFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_1470" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="&quot;dir /a /-c &quot; + path" to="(&quot;dir /a /-c &quot; + path) + 1" />
    <mutant id="mutant_1471" viable="false" in="?" from="1024 * 4" to="(1024 * 4) * -1" />
    <mutant id="mutant_1478" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' exists but is a directory&quot;) + 1)" />
    <mutant id="mutant_1479" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16)) &amp;&amp; ((xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE)))" to="!((xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16)) &amp;&amp; ((xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE))))" />
    <mutant id="mutant_613" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_614" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + 1)" />
    <mutant id="mutant_615" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is a directory&quot;)" to="(((&quot;Destination \'&quot; + destFile) + &quot;\' exists but is a directory&quot;) + 1)" />
    <mutant id="mutant_616" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;)" to="(((&quot;The byte count &quot; + result) + &quot; is too large to be converted to an int&quot;) * -1)" />
    <mutant id="mutant_610" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) - 1)" />
    <mutant id="mutant_611" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) * -1)" />
    <mutant id="mutant_612" viable="false" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="(&quot;The byte count &quot; + result)" to="((&quot;The byte count &quot; + result) * -1)" />
    <mutant id="mutant_617" viable="true" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="(((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity))" to="((((super.toString()) + &quot;[caseSensitivity=&quot;) + (caseSensitivity)) + 1)" />
    <mutant id="mutant_618" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlEnc != null) &amp;&amp; (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_8)))" to="!((xmlEnc != null) &amp;&amp; (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_8))))" />
    <mutant id="mutant_619" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="((currentBuffer.length) - inBufferPos)" to="(((currentBuffer.length) - inBufferPos) + 1)" />
    <mutant id="mutant_1465" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; + (new String(leftOver , encoding)))" to="((&quot;Unexpected leftover of the last block: leftOverOfThisFilePart=&quot; + (new String(leftOver , encoding))) - 1)" />
    <mutant id="mutant_1466" viable="false" in="org.apache.commons.io.FileUtils.openInputStream(java.io.File)" from="((&quot;File \'&quot; + file) + &quot;\' cannot be read&quot;)" to="(((&quot;File \'&quot; + file) + &quot;\' cannot be read&quot;) - 1)" />
    <mutant id="mutant_1463" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read()" from="(!(this.bbuf.hasRemaining())) &amp;&amp; (!(this.cbuf.hasRemaining()))" to="!((!(this.bbuf.hasRemaining())) &amp;&amp; (!(this.cbuf.hasRemaining())))" />
    <mutant id="mutant_1464" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" from="(&quot;Size cannot be greater than Integer max value: &quot; + size)" to="((&quot;Size cannot be greater than Integer max value: &quot; + size) - 1)" />
    <mutant id="mutant_1461" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destFile) + &quot;\' already exists&quot;)" to="(((&quot;Destination \'&quot; + destFile) + &quot;\' already exists&quot;) - 1)" />
    <mutant id="mutant_1462" viable="false" in="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)" from="((&quot;File &quot; + directory) + &quot; exists and is &quot;)" to="(((&quot;File &quot; + directory) + &quot; exists and is &quot;) - 1)" />
    <mutant id="mutant_1460" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(high &lt;&lt; 32) + (4294967295L &amp; low)" to="((high &lt;&lt; 32) + (4294967295L &amp; low)) - 1" />
    <mutant id="mutant_1469" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Source \'&quot; + srcFile)" to="((&quot;Source \'&quot; + srcFile) * -1)" />
    <mutant id="mutant_1467" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((super.toString()) + &quot;(&quot;)" to="(((super.toString()) + &quot;(&quot;) - 1)" />
    <mutant id="mutant_1468" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) + &quot;\'&quot;)" to="(((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) + &quot;\'&quot;) + 1)" />
    <mutant id="mutant_624" viable="true" in="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)" from="(conn instanceof java.net.HttpURLConnection) || (contentType != null)" to="!((conn instanceof java.net.HttpURLConnection) || (contentType != null))" />
    <mutant id="mutant_625" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="((position) - (size))" to="(((position) - (size)) - 1)" />
    <mutant id="mutant_626" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="(((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;) + 1)" />
    <mutant id="mutant_627" viable="false" in="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" from="((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;)" to="(((&quot;The reference file \'&quot; + reference) + &quot;\' doesn\'t exist&quot;) + 1)" />
    <mutant id="mutant_620" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="depth + 1" to="(depth + 1) - 1" />
    <mutant id="mutant_621" viable="true" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="(((super.toString()) + &quot;(&quot;) + condition)" to="((((super.toString()) + &quot;(&quot;) + condition) + 1)" />
    <mutant id="mutant_622" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;)" to="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) * -1)" />
    <mutant id="mutant_623" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="(high &lt;&lt; 24) + (4294967295L &amp; low)" to="((high &lt;&lt; 24) + (4294967295L &amp; low)) * -1" />
    <mutant id="mutant_628" viable="true" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) + 1)" />
    <mutant id="mutant_629" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="((&quot;Destination \'&quot; + destFile) - 1)" />
    <mutant id="mutant_1454" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) + (this.mark_cbuf))" to="((((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) + &quot; expected=&quot;) + (this.mark_cbuf)) + 1)" />
    <mutant id="mutant_1455" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path)" to="(((&quot;Command line \'dir /-c\' did not return valid info &quot; + &quot;for path \'&quot;) + path) + 1)" />
    <mutant id="mutant_1452" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="((currentLastBytePos) - lineStart) + 1" to="(((currentLastBytePos) - lineStart) + 1) - 1" />
    <mutant id="mutant_1453" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) + &quot; KB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI))) + &quot; KB&quot;) + 1" />
    <mutant id="mutant_1450" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="((&quot;Length must not be negative: &quot; + length) + 1)" />
    <mutant id="mutant_1451" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="(xmlGuessEnc != null) &amp;&amp; (!(xmlGuessEnc.equals(bomEnc)))" to="!((xmlGuessEnc != null) &amp;&amp; (!(xmlGuessEnc.equals(bomEnc))))" />
    <mutant id="mutant_1458" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="((xmlEnc != null) &amp;&amp; (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16)))) &amp;&amp; (!(xmlEnc.equals(bomEnc)))" to="!(((xmlEnc != null) &amp;&amp; (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16)))) &amp;&amp; (!(xmlEnc.equals(bomEnc))))" />
    <mutant id="mutant_1459" viable="true" in="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" from="((xmlEnc != null) &amp;&amp; (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16))))" to="(!((xmlEnc != null) &amp;&amp; (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16)))))" />
    <mutant id="mutant_1456" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir)" to="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) - 1)" />
    <mutant id="mutant_1457" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;)" to="(((((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) + off) + &quot;, length=&quot;) - 1)" />
    <mutant id="mutant_635" viable="false" in="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" from="(&quot;Stream not configure to detect &quot; + bom)" to="((&quot;Stream not configure to detect &quot; + bom) - 1)" />
    <mutant id="mutant_636" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length - remaining" to="(length - remaining) + 1" />
    <mutant id="mutant_637" viable="false" in="org.apache.commons.io.comparator.NameFileComparator.toString()" from="((super.toString()) + &quot;[caseSensitivity=&quot;)" to="(((super.toString()) + &quot;[caseSensitivity=&quot;) - 1)" />
    <mutant id="mutant_638" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_GB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_GB)) + 1" />
    <mutant id="mutant_631" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_632" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;)" to="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + 1)" />
    <mutant id="mutant_633" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="(((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped)" to="((((&quot;Bytes to skip: &quot; + toSkip) + &quot; actual: &quot;) + skipped) + 1)" />
    <mutant id="mutant_634" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) + 1)" />
    <mutant id="mutant_639" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) * -1)" />
    <mutant id="mutant_1443" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) + &quot;\'&quot;)" to="(((((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + destDir) + &quot;\'&quot;) * -1)" />
    <mutant id="mutant_1444" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip - remain" to="(toSkip - remain) + 1" />
    <mutant id="mutant_1441" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="(&quot;File does not exist: &quot; + file)" to="((&quot;File does not exist: &quot; + file) - 1)" />
    <mutant id="mutant_1442" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i - 1)" to="((i - 1) + 1)" />
    <mutant id="mutant_1440" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="(offset + 1)" to="((offset + 1) - 1)" />
    <mutant id="mutant_1449" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;)" to="((&quot;Current currentLastCharPos unexpectedly positive... &quot; + &quot;last readLine() should have returned something! currentLastCharPos=&quot;) + 1)" />
    <mutant id="mutant_630" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Failed to delete original directory \'&quot; + srcDir)" to="((&quot;Failed to delete original directory \'&quot; + srcDir) * -1)" />
    <mutant id="mutant_1447" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="(offset + 1)" to="((offset + 1) * -1)" />
    <mutant id="mutant_1448" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="(&quot;Destination directory \'&quot; + destDir)" to="((&quot;Destination directory \'&quot; + destDir) * -1)" />
    <mutant id="mutant_1445" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;) - 1)" />
    <mutant id="mutant_1446" viable="false" in="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' is not a directory&quot;) * -1)" />
    <mutant id="mutant_646" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(url != null) &amp;&amp; ((url.indexOf('%')) &gt;= 0)" to="!((url != null) &amp;&amp; ((url.indexOf('%')) &gt;= 0))" />
    <mutant id="mutant_647" viable="false" in="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" from="(&quot;File does not exist: &quot; + file)" to="((&quot;File does not exist: &quot; + file) * -1)" />
    <mutant id="mutant_648" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="lastIsDirectory &amp;&amp; keepSeparator" to="!(lastIsDirectory &amp;&amp; keepSeparator)" />
    <mutant id="mutant_649" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="(((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) + size)" to="((((&quot;Unexpected readed size. current: &quot; + offset) + &quot;, excepted: &quot;) + size) - 1)" />
    <mutant id="mutant_642" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit))" to="((((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + (readlimit)) * -1)" />
    <mutant id="mutant_643" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;)" to="(((&quot;Array Size=&quot; + (b.length)) + &quot;, offset=&quot;) - 1)" />
    <mutant id="mutant_644" viable="false" in="org.apache.commons.io.output.LockableFileWriter.createLock()" from="(&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath()))" to="((&quot;Can\'t write file, lock &quot; + (lockFile.getAbsolutePath())) * -1)" />
    <mutant id="mutant_645" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 6)" to="((offset + 6) * -1)" />
    <mutant id="mutant_1040" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(line.length()) - 1" to="((line.length()) - 1) - 1" />
    <mutant id="mutant_1036" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="(j + 1) - 1" />
    <mutant id="mutant_1037" viable="false" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (size))" to="(((((super.toString()) + &quot;(&quot;) + condition) + (size)) * -1)" />
    <mutant id="mutant_1034" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="(offset + 2)" to="((offset + 2) + 1)" />
    <mutant id="mutant_1035" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;)" to="(((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) - 1)" />
    <mutant id="mutant_1032" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)" to="((((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)) + 1" />
    <mutant id="mutant_1033" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(&quot;\&quot;&quot; + path)" to="((&quot;\&quot;&quot; + path) - 1)" />
    <mutant id="mutant_1030" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="directory + &quot; is not a directory&quot;" to="(directory + &quot; is not a directory&quot;) + 1" />
    <mutant id="mutant_1031" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="(getRun()) &amp;&amp; (reader == null)" to="!((getRun()) &amp;&amp; (reader == null))" />
    <mutant id="mutant_640" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;)" to="(((&quot;Failed to delete original directory \'&quot; + srcDir) + &quot;\' after copy to \'&quot;) + 1)" />
    <mutant id="mutant_641" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position()))" to="((&quot;Unexpected CharBuffer postion: actual=&quot; + (cbuf.position())) - 1)" />
    <mutant id="mutant_1038" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="((&quot;Source \'&quot; + srcDir) + &quot;\' exists but is not a directory&quot;)" to="(((&quot;Source \'&quot; + srcDir) + &quot;\' exists but is not a directory&quot;) - 1)" />
    <mutant id="mutant_1039" viable="false" in="?" from="((osName.indexOf(&quot;hp-ux&quot;)) != (-1)) || ((osName.indexOf(&quot;aix&quot;)) != (-1))" to="!(((osName.indexOf(&quot;hp-ux&quot;)) != (-1)) || ((osName.indexOf(&quot;aix&quot;)) != (-1)))" />
    <mutant id="mutant_657" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 2)" to="((prefix + 2) * -1)" />
    <mutant id="mutant_658" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="((&quot;Failed to list contents of &quot; + directory) + 1)" />
    <mutant id="mutant_659" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile)" to="((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) * -1)" />
    <mutant id="mutant_653" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) + lines)" to="(((((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return info as expected &quot;) + &quot;for path \'&quot;) + path) + &quot;\'- response was &quot;) + lines) - 1)" />
    <mutant id="mutant_654" viable="false" in="?" from="(FileUtils.ONE_KB) * (FileUtils.ONE_KB)" to="((FileUtils.ONE_KB) * (FileUtils.ONE_KB)) * -1" />
    <mutant id="mutant_655" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="(offset + 4)" to="((offset + 4) - 1)" />
    <mutant id="mutant_656" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size1 - size2" to="(size1 - size2) * -1" />
    <mutant id="mutant_1025" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) + &quot; TB&quot;" to="((String.valueOf(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI))) + &quot; TB&quot;) - 1" />
    <mutant id="mutant_1026" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j + 1" to="(j + 1) * -1" />
    <mutant id="mutant_1023" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="length + (leftOverOfLastFilePart != null ? leftOverOfLastFilePart.length : 0)" to="(length + (leftOverOfLastFilePart != null ? leftOverOfLastFilePart.length : 0)) - 1" />
    <mutant id="mutant_1024" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="(&quot;Failed to copy full contents from \'&quot; + srcFile)" to="((&quot;Failed to copy full contents from \'&quot; + srcFile) * -1)" />
    <mutant id="mutant_1021" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(textIdx + 1)" to="((textIdx + 1) * -1)" />
    <mutant id="mutant_1022" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Failed to delete original directory \'&quot; + srcDir)" to="((&quot;Failed to delete original directory \'&quot; + srcDir) + 1)" />
    <mutant id="mutant_1020" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;)" to="(((((((&quot;Failed to copy full contents from \'&quot; + srcFile) + &quot;\' to \'&quot;) + destFile) + &quot;\' Expected length: &quot;) + srcLen) + &quot; Actual: &quot;) * -1)" />
    <mutant id="mutant_650" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(!(parentFile.mkdirs())) &amp;&amp; (!(parentFile.isDirectory()))" to="!((!(parentFile.mkdirs())) &amp;&amp; (!(parentFile.isDirectory())))" />
    <mutant id="mutant_651" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length)" to="((offset + length) - 1)" />
    <mutant id="mutant_652" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) + 1)" />
    <mutant id="mutant_1029" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Failed to list contents of &quot; + srcDir)" to="((&quot;Failed to list contents of &quot; + srcDir) - 1)" />
    <mutant id="mutant_1027" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' cannot be written to&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' cannot be written to&quot;) + 1)" />
    <mutant id="mutant_1028" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;)" to="(((&quot;Marked position [&quot; + (mark)) + &quot;] is no longer valid - passed the read limit [&quot;) + 1)" />
    <mutant id="mutant_668" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path)" to="(((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) + path) - 1)" />
    <mutant id="mutant_669" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(prefix + 1)" to="((prefix + 1) - 1)" />
    <mutant id="mutant_664" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="(&quot;Destination \'&quot; + destDir)" to="((&quot;Destination \'&quot; + destDir) * -1)" />
    <mutant id="mutant_665" viable="false" in="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" from="((&quot;Destination \'&quot; + destDir) + &quot;\' directory cannot be created&quot;)" to="(((&quot;Destination \'&quot; + destDir) + &quot;\' directory cannot be created&quot;) + 1)" />
    <mutant id="mutant_666" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) + length)" to="((((((&quot;Array Size=&quot; + (array.length)) + &quot;, offset=&quot;) + offset) + &quot;, length=&quot;) + length) + 1)" />
    <mutant id="mutant_667" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="((k + j) - 1)" />
    <mutant id="mutant_1014" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(&quot;Number of characters to skip is less than zero: &quot; + n)" to="((&quot;Number of characters to skip is less than zero: &quot; + n) * -1)" />
    <mutant id="mutant_1498" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_1015" viable="false" in="?" from="1024 * 4" to="(1024 * 4) - 1" />
    <mutant id="mutant_1499" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) + ((value3 &amp; 255) &lt;&lt; 16)) - 1" />
    <mutant id="mutant_1012" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;)" to="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + 1)" />
    <mutant id="mutant_1496" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_1013" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="(((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8))" to="((((value1 &amp; 255) &lt;&lt; 0) + ((value2 &amp; 255) &lt;&lt; 8)) * -1)" />
    <mutant id="mutant_1497" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(off + len)" to="((off + len) * -1)" />
    <mutant id="mutant_1010" viable="true" in="org.apache.commons.io.TaggedIOException.isTaggedWith(java.lang.Throwable,java.lang.Object)" from="((tag != null) &amp;&amp; (throwable instanceof org.apache.commons.io.TaggedIOException))" to="(!((tag != null) &amp;&amp; (throwable instanceof org.apache.commons.io.TaggedIOException)))" />
    <mutant id="mutant_1494" viable="false" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;)" to="((((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + &quot;\' did not return data as expected &quot;) + &quot;for path \'&quot;) * -1)" />
    <mutant id="mutant_1011" viable="false" in="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" from="(&quot;Failed to list contents of &quot; + directory)" to="((&quot;Failed to list contents of &quot; + directory) * -1)" />
    <mutant id="mutant_1495" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8))" to="((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 24) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 8)) + 1)" />
    <mutant id="mutant_1492" viable="false" in="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" from="(&quot;Failed to delete original file \'&quot; + srcFile)" to="((&quot;Failed to delete original file \'&quot; + srcFile) * -1)" />
    <mutant id="mutant_1493" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="(&quot;Command line \'&quot; + (FileSystemUtils.DF))" to="((&quot;Command line \'&quot; + (FileSystemUtils.DF)) + 1)" />
    <mutant id="mutant_660" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="((idx) + n)" to="(((idx) + n) * -1)" />
    <mutant id="mutant_661" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48))" to="(((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) - 1)" />
    <mutant id="mutant_662" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - 1)" to="((size - 1) * -1)" />
    <mutant id="mutant_663" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="(off + i)" to="((off + i) - 1)" />
    <mutant id="mutant_1018" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile)" to="((((&quot;Source \'&quot; + srcFile) + &quot;\' and destination \'&quot;) + destFile) + 1)" />
    <mutant id="mutant_1019" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) + &quot;)&quot;" to="(((((super.toString()) + &quot;(&quot;) + condition) + (cutoff)) + &quot;)&quot;) - 1" />
    <mutant id="mutant_1016" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="(pos + i)" to="((pos + i) - 1)" />
    <mutant id="mutant_1017" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8))" to="(((((data[(offset + 0)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 1)]) &amp; 255) &lt;&lt; 8)) + 1)" />
    <mutant id="mutant_679" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i + 1" to="(i + 1) * -1" />
    <mutant id="mutant_675" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) + maxBytesPerChar)" to="((((&quot;Buffer size &quot; + bufferSize) + &quot; is less than maxBytesPerChar &quot;) + maxBytesPerChar) - 1)" />
    <mutant id="mutant_676" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(&quot;Length to read: &quot; + length)" to="((&quot;Length to read: &quot; + length) + 1)" />
    <mutant id="mutant_677" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(size - i)" to="((size - i) - 1)" />
    <mutant id="mutant_678" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(&quot;Length must not be negative: &quot; + length)" to="((&quot;Length must not be negative: &quot; + length) - 1)" />
    <mutant id="mutant_1490" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="length - ((int)(((position) - (size))))" to="(length - ((int)(((position) - (size))))) - 1" />
    <mutant id="mutant_1491" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;)" to="(((&quot;illegal index: &quot; + index) + &quot; into array of length &quot;) + 1)" />
    <mutant id="mutant_1003" viable="false" in="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" from="(&quot;Destination \'&quot; + destFile)" to="((&quot;Destination \'&quot; + destFile) * -1)" />
    <mutant id="mutant_1487" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="(offset + 1)" to="((offset + 1) + 1)" />
    <mutant id="mutant_1004" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="(&quot;Length to read: &quot; + length)" to="((&quot;Length to read: &quot; + length) - 1)" />
    <mutant id="mutant_1488" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(k + j)" to="((k + j) + 1)" />
    <mutant id="mutant_1001" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="(((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)" to="((((((data[(offset + 4)]) &amp; 255) &lt;&lt; 0) + (((data[(offset + 5)]) &amp; 255) &lt;&lt; 8)) + (((data[(offset + 6)]) &amp; 255) &lt;&lt; 16)) + (((data[(offset + 7)]) &amp; 255) &lt;&lt; 24)) * -1" />
    <mutant id="mutant_1485" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24))" to="((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) - 1)" />
    <mutant id="mutant_1002" viable="false" in="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" from="(!(destDir.exists())) &amp;&amp; createDestDir" to="!((!(destDir.exists())) &amp;&amp; createDestDir)" />
    <mutant id="mutant_1486" viable="false" in="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) * -1)" />
    <mutant id="mutant_1483" viable="false" in="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" from="(&quot;Not a directory: &quot; + directory)" to="((&quot;Not a directory: &quot; + directory) - 1)" />
    <mutant id="mutant_1000" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="(j + 6)" to="((j + 6) - 1)" />
    <mutant id="mutant_1484" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(no - 1) * (blockSize)" to="((no - 1) * (blockSize)) * -1" />
    <mutant id="mutant_1481" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" from="((written) + count)" to="(((written) + count) * -1)" />
    <mutant id="mutant_1482" viable="false" in="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" from="((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;)" to="(((((&quot;Destination directory \'&quot; + destDir) + &quot;\' does not exist [createDestDir=&quot;) + createDestDir) + &quot;]&quot;) + 1)" />
    <mutant id="mutant_671" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="((off + len) - remaining)" to="(((off + len) - remaining) + 1)" />
    <mutant id="mutant_672" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="((&quot;XML prolog or ROOT element not found on first &quot; + offset) + &quot; bytes&quot;)" to="(((&quot;XML prolog or ROOT element not found on first &quot; + offset) + &quot; bytes&quot;) + 1)" />
    <mutant id="mutant_673" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="(data.length) - 1" to="((data.length) - 1) - 1" />
    <mutant id="mutant_1009" viable="false" in="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" from="(&quot;Source \'&quot; + srcDir)" to="((&quot;Source \'&quot; + srcDir) - 1)" />
    <mutant id="mutant_674" viable="false" in="org.apache.commons.io.FileExistsException(java.io.File)" from="(&quot;File &quot; + file)" to="((&quot;File &quot; + file) - 1)" />
    <mutant id="mutant_1007" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(offset + length) - remaining" to="((offset + length) - remaining) + 1" />
    <mutant id="mutant_1008" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="(&quot;Buffer size &quot; + bufferSize)" to="((&quot;Buffer size &quot; + bufferSize) + 1)" />
    <mutant id="mutant_1005" viable="true" in="org.apache.commons.io.input.XmlStreamReader.isTextXml(java.lang.String)" from="(mime != null) &amp;&amp; (((mime.equals(&quot;text/xml&quot;)) || (mime.equals(&quot;text/xml-external-parsed-entity&quot;))) || ((mime.startsWith(&quot;text/&quot;)) &amp;&amp; (mime.endsWith(&quot;+xml&quot;))))" to="!((mime != null) &amp;&amp; (((mime.equals(&quot;text/xml&quot;)) || (mime.equals(&quot;text/xml-external-parsed-entity&quot;))) || ((mime.startsWith(&quot;text/&quot;)) &amp;&amp; (mime.endsWith(&quot;+xml&quot;)))))" />
    <mutant id="mutant_1489" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="(((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8))" to="((((((((((value &gt;&gt; 0) &amp; 255) &lt;&lt; 56) + (((value &gt;&gt; 8) &amp; 255) &lt;&lt; 48)) + (((value &gt;&gt; 16) &amp; 255) &lt;&lt; 40)) + (((value &gt;&gt; 24) &amp; 255) &lt;&lt; 32)) + (((value &gt;&gt; 32) &amp; 255) &lt;&lt; 24)) + (((value &gt;&gt; 40) &amp; 255) &lt;&lt; 16)) + (((value &gt;&gt; 48) &amp; 255) &lt;&lt; 8)) + 1)" />
    <mutant id="mutant_670" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(!(this.bbuf.hasRemaining())) &amp;&amp; (!(this.cbuf.hasRemaining()))" to="!((!(this.bbuf.hasRemaining())) &amp;&amp; (!(this.cbuf.hasRemaining())))" />
    <mutant id="mutant_1006" viable="false" in="org.apache.commons.io.FileUtils.sizeOf(java.io.File)" from="file + &quot; does not exist&quot;" to="(file + &quot; does not exist&quot;) + 1" />
  </mutants>
</mutation>
