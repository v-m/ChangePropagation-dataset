<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <key id="type" for="node" attr.name="type" attr.type="string" />
  <key id="type" for="edge" attr.name="type" attr.type="string" />
  <key id="USES_REFLEXION" for="node" attr.name="USES_REFLEXION" attr.type="boolean">
    <default>false</default>
  </key>
  <graph id="G" edgedefault="directed" buildtime="862">
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,boolean)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#defaultEncoding">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#staticDefaultEncoding">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream(java.io.InputStream,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader(java.net.URL)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader(java.net.URLConnection)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.read(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#reader">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.isAppXml(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.isTextXml(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#US_ASCII">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_16BE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_16LE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#HTTP_EX_1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_16">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#HTTP_EX_2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_32BE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_32LE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_32">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#HTTP_EX_3">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_8">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#RAW_EX_1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#RAW_EX_2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.getBOMEncoding(java.io.BufferedInputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeEncoding(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#CHARSET_PATTERN">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.getDefaultEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.getEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#encoding">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.getXMLGuessEncoding(java.io.BufferedInputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#EBCDIC">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.getXmlProlog(java.io.BufferedInputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#BUFFER_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader#ENCODING_PATTERN">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeMime(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.prepareReader(java.io.InputStream,java.lang.String)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReaderException.getInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderException.getXmlEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderException.getContentTypeEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReader.setDefaultEncoding(java.lang.String)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReaderException#is">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest$MockXmlStreamReader(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyInputStream.afterRead(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStream.afterRead(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils#EOF">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClosedInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="java.io.FilterInputStream#in">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStream.finalize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStreamTest#closed">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStreamTest$1.close()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStreamTest.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStreamTest$1(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStreamTest#data">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStreamTest#stream">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStreamTest.testClose()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStreamTest.testRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBuffer()">
      <data key="type">METHOD</data>
    </node>
    <node id="int#length">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBufferOffsetLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream$1.compare(org.apache.commons.io.ByteOrderMark,org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark.length()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream#ByteOrderMarkLengthComparator">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark#UTF_8">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream#include">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream#boms">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream.hasBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream#byteOrderMark">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark.get(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream#firstBytes">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyInputStream.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream.readFirstBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyInputStream.read(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream.read(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream#fbIndex">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream#fbLength">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream.getBOMCharsetName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark.getCharsetName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyInputStream.skip(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream.skip(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream.find()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyInputStream.mark(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream.mark(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream#markFbIndex">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream#markedAtStart">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyInputStream.reset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStream.reset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream.assertCloseCalled()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream#_closeCalled">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.createUtf16BeDataStream(byte[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.createUtf16LeDataStream(byte[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.createUtf32BeDataStream(byte[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.createUtf32LeDataStream(byte[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.assertData(byte[],byte[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.readBOMInputStreamTwice(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.readFile(org.apache.commons.io.input.BOMInputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithoutBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testClose()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithoutBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithoutBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMBufferedRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMSingleRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithoutBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithoutBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testNoBoms()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadTwiceWithBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadTwiceWithoutBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.Charsets#UTF_16BE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark#UTF_16BE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark#UTF_16LE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.Charsets#UTF_16LE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark#UTF_32BE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark#UTF_32LE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.parseXml(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs4()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Be()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Le()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Be()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.parseXml(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Le()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithoutBOMUtf32Be()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithoutBOMUtf32Le()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testSkipWithBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testSkipWithoutBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithoutBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BOMInputStreamTest.testSupportCode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream(java.io.InputStream,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream#max">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream#in">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream.isPropagateClose()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream#propagateClose">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream.markSupported()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream.available()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream#pos">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream.read(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream.skip(long)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream.mark(int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream#mark">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream.reset()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStream.setPropagateClose(boolean)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStreamTest.compare(java.lang.String,byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStreamTest.testReadArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedInputStreamTest.testReadSingle()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReader#target">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReader#maxCharsFromTargetReader">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReader.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReader#charsRead">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReader#markedAt">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReader#readAheadLimit">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReader.read(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReader.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReader.mark(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReader.reset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest.closeTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest$1(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest.markReset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest#sr">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest.markResetFromOffset1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest.markResetMarkMore()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMax()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest.readMulti()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest.readMultiWithOffset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest.readTillEnd()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest.shortReader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest#shortReader">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BoundedReaderTest.skipTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStream(java.io.IOException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStream#exception">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStream.available()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStream.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStream.skip(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStream.reset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStreamTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStreamTest#exception">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStreamTest#stream">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStreamTest.testAvailable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStreamTest.testClose()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStreamTest.testRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStreamTest.testReset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.BrokenInputStreamTest.testSkip()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream#BUFFER_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream#encoder">
      <data key="type">FIELD</data>
    </node>
    <node id="java.nio.charset.CodingErrorAction#REPLACE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream#bbuf">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream#cbuf">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream#mark_cbuf">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream#NO_MARK">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream#mark_bbuf">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream.available()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream.fillBuffer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream.read(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream.skip(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream.mark(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream.reset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.getRequiredCharsetNames()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.Charsets.requiredCharsets()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.isAvailabilityTestableForCharset(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableSkip(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableRead(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.checkAvail(java.io.InputStream,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest#random">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_AvailableCharset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest#TEST_STRING">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_RequiredCharset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_UTF8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop_RequiredCharsets()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest#ALPHABET">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S0_UTF16()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S0_UTF8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S1_UTF8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S2_UTF8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D13_S0_UTF8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D13_S1_UTF8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D20_S0_UTF8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop(java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF16()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeBufferedRead_RequiredCharsets()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest#LARGE_TEST_STRING">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeBufferedRead_UTF8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeSingleByteRead_RequiredCharsets()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeSingleByteRead_UTF8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_RequiredCharsets()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_USASCII()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_UTF8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkSupported()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero_EmptyString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero_RequiredCharsets()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_RequiredCharsets()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_UTF16()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_UTF8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_RequiredCharsets()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_USASCII()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_UTF8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReader#charSequence">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReader.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReader#idx">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReader.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReader.skip(long)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReader.close()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReader#mark">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReader.mark(int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReader.reset()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReaderTest.checkArray(char[],char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReaderTest.testClose()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReaderTest.checkRead(java.io.Reader,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReaderTest.testMark()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReaderTest.testMarkSupported()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReaderTest.testRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReaderTest#NONE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArrayPortion()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CharSequenceReaderTest.testSkip()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStream#classLoader">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass(java.lang.String[])">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test#i">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test(int,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test#e">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E#A">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test#o">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equalObject(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equals(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E#B">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E#C">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()">
      <data key="type">METHOD</data>
    </node>
    <node id="java.lang.Boolean#FALSE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testLong()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testObject1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testObject2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testPrimitiveLong()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testResolveProxyClass()">
      <data key="type">METHOD</data>
    </node>
    <node id="java.lang.Comparable#class">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CloseShieldInputStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CloseShieldInputStream.close()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CloseShieldInputStreamTest#closed">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CloseShieldInputStreamTest$1.close()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CloseShieldInputStreamTest.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CloseShieldInputStreamTest$1(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CloseShieldInputStreamTest#data">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CloseShieldInputStreamTest#original">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CloseShieldInputStreamTest#shielded">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CloseShieldInputStreamTest.testClose()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClosedInputStream#CLOSED_INPUT_STREAM">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClosedInputStream.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ClosedInputStreamTest.testRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStream.getCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStream.getByteCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="java.lang.Integer#MAX_VALUE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStream.resetCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStream.resetByteCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStream#count">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStream.skip(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStream.afterRead(int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStreamTest.testCounting()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStreamTest.testEOF1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStreamTest.testEOF2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStreamTest.testEOF3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStreamTest.testResetting()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStreamTest.testSkipping()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.DemuxInputStream.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.DemuxInputStream#m_streams">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.DemuxInputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream(long,boolean,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream#size">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream#markSupported">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream#throwEofException">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.markSupported()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.available()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream#position">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream#eof">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.doEndOfFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.processByte()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.read(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.processBytes(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.getPosition()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.getSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.skip(long)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream#mark">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.mark(int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream#readlimit">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStream.reset()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream(int,boolean,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream.processByte()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream.processBytes(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStreamTest.testEOFException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStreamTest.testMarkAndReset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStreamTest.testMarkNotSupported()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStreamTest.testRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStreamTest.testReadByteArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullInputStreamTest.testSkip()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader(long,boolean,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader#size">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader#markSupported">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader#throwEofException">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader.markSupported()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader#eof">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader.doEndOfFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader.processChar()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader#position">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader.read(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader.read(char[],int,int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader.processChars(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader.getPosition()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader.getSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader.skip(long)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader#mark">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader.mark(int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader#readlimit">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReader.reset()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReaderTest$TestNullReader(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReaderTest$TestNullReader(int,boolean,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReaderTest$TestNullReader.processChar()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReaderTest$TestNullReader.processChars(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReaderTest.testEOFException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReaderTest.testMarkAndReset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReaderTest.testMarkNotSupported()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReaderTest.testRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReaderTest.testReadCharArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.NullReaderTest.testSkip()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyInputStream.markSupported()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyInputStream.available()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyInputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyInputStream.beforeRead(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader.markSupported()">
      <data key="type">METHOD</data>
    </node>
    <node id="java.io.FilterReader#in">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader.ready()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader.handleIOException(java.io.IOException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader.beforeRead(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader.afterRead(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader.read(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader.read(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader.read(java.nio.CharBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader.skip(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader.mark(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader.reset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReaderTest$CustomNullReader(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReaderTest$CustomNullReader.read(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReaderTest$ProxyReaderImpl(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReader(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReaderTest.testNullCharArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ProxyReaderTest.testNullCharBuffer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream#DEFAULT_BUFFER_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.Charset,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream#reader">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream#encoder">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream#encoderIn">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream#encoderOut">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream.fillBuffer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream#endOfInput">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream.read(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStream#lastCoderResult">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStreamTest.testCharsetMismatchInfiniteLoop()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStreamTest.testLargeUTF8WithBufferedRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStreamTest.testWithBufferedRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStreamTest#LARGE_TEST_STRING">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStreamTest.testLargeUTF8WithSingleByteRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStreamTest.testWithSingleByteRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStreamTest.testReadZero()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStreamTest.testReadZeroEmptyString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStreamTest.testUTF16WithSingleByteRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStreamTest#TEST_STRING">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStreamTest.testUTF8WithBufferedRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStreamTest.testUTF8WithSingleByteRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReaderInputStreamTest#random">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#no">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#data">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader#blockSize">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader#randomAccessFile">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#currentLastBytePos">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#leftOver">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader#newLineSequences">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader#avoidNewlineSplitBufferSize">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader#encoding">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader#byteDecrement">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader#totalByteLength">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader#totalBlockCount">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader#currentFilePart">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.Charsets#UTF_16">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader.readLine()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader#trailingNewlineOfFileSkipped">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReader.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize(java.lang.Integer)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertEqualsAndNoLineBreaks(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertEqualsAndNoLineBreaks(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines(org.apache.commons.io.input.ReversedLinesFileReader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#TEST_LINE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.closeReader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testEmptyFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#UTF_8">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testFileSizeIsExactMultipleOfBlockSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#ISO_8859_1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileDefaults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileManyWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testShiftJISFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#TEST_LINE_SHIFT_JIS2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#TEST_LINE_SHIFT_JIS1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16BEFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16LEFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8File()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileCRBreaks()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaks()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingBig5()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingUTF16()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#fileName">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile(java.lang.String,java.lang.String,java.lang.Integer)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#encoding">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#buffSize">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.closeReader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#bufferedReader">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#reversedLinesFileReader">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.closeReader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple#reversedLinesFileReader">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testFileSizeIsExactMultipleOfBlockSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingBig5()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingUTF16()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readBoolean()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readByte()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readChar()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readShort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readDouble()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readFloat()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readInt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readLong()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest#bytes">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.tearDown()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadByte()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadChar()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadDouble()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFloat()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadInt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLine()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readLine()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLong()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadShort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUTF()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStream.readUTF()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedByte()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedShort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TaggedInputStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TaggedInputStream.isCauseOf(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.TaggedIOException.isTaggedWith(java.lang.Throwable,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TaggedInputStream#tag">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TaggedInputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.TaggedIOException(java.io.IOException,java.io.Serializable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TaggedInputStream.throwIfCauseOf(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(java.lang.Throwable,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TaggedInputStreamTest.testBrokenStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TaggedInputStreamTest.testEmptyStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TaggedInputStreamTest.testNormalStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TaggedInputStreamTest.testOtherException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerListener.init(org.apache.commons.io.input.Tailer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer#file">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer#delayMillis">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer#end">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer#inbuf">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer#listener">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer#reOpen">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer#cset">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer#DEFAULT_DELAY_MILLIS">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer#DEFAULT_BUFSIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer#DEFAULT_CHARSET">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.getRun()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer#run">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.getFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.getDelay()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerListener.handle(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.create(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.run()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerListener.fileNotFound()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerListener.fileRotated()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerListener.handle(java.lang.Exception)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.stop(java.lang.Exception)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer#RAF_MODE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.Tailer.stop()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerListenerAdapter.fileNotFound()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerListenerAdapter.fileRotated()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerListenerAdapter.handle(java.lang.Exception)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerListenerAdapter.handle(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerListenerAdapter.init(org.apache.commons.io.input.Tailer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest$TestTailerListener.getLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest$TestTailerListener#lines">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest$TestTailerListener.clear()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest$TestTailerListener.fileNotFound()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest$TestTailerListener#notFound">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest$TestTailerListener.fileRotated()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest$TestTailerListener#rotated">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest$TestTailerListener.handle(java.lang.Exception)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest$TestTailerListener#exception">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest$TestTailerListener.handle(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest$TestTailerListener.init(org.apache.commons.io.input.Tailer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest$TestTailerListener#initialised">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest.createFile(java.io.File,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest#tailer">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest.testBufferBreak()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest.writeString(java.io.File,java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest$TestTailerListener()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest.testIO335()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest.testInterrupt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest.testLongFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="java.lang.System#out">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest.testMultiByteBreak()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest.testStopWithNoFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest.testTailer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest.write(java.io.File,java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TailerTest.testTailerEof()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStream(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStream(java.io.InputStream,java.io.OutputStream,boolean)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStream#branch">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStream#closeBranch">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStream.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStream.read(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStream.read(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStreamTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStreamTest#ASCII">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStreamTest#output">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStreamTest#tee">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStreamTest.testMarkReset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStreamTest.testReadEverything()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStreamTest.testReadNothing()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStreamTest.testReadOneByte()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStreamTest.testReadToArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStreamTest.testReadToArrayWithOffset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.TeeInputStreamTest.testSkip()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStream#target">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStream#ensureLineFeedAtEndOfFile">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStream.eofGame(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStream#slashNSeen">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStream.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStream#slashRSeen">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStream#eofSeen">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStreamTest.crAtEnd()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStreamTest.crOnlyEnsureAtEof()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStreamTest.crOnlyNotAtEof()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStreamTest.inTheMiddleOfTheLine()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStreamTest.multipleBlankLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStreamTest.retainLineFeed()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStreamTest.simpleString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.UnixLineEndingInputStreamTest.twoLinesAtEnd()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStream#target">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStream#ensureLineFeedAtEndOfFile">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStream.eofGame()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStream#slashNSeen">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStream#slashRSeen">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStream.read()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStream#eofSeen">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStream#injectSlashN">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.roundtrip(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.roundtrip(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.inTheMiddleOfTheLine()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.linuxLinefeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.malformed()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.multipleBlankLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.retainLineFeed()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.simpleString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.twoLinesAtEnd()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.doRawStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#defaultEncoding">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#BUFFER_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#BOMS">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#XML_GUESS_BYTES">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#encoding">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#reader">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader(java.net.URL)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.read(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.isAppXml(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.isTextXml(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#HTTP_EX_3">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#US_ASCII">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#UTF_16BE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#UTF_16LE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#HTTP_EX_1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#UTF_16">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#HTTP_EX_2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#UTF_32BE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#UTF_32LE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#UTF_32">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#UTF_8">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#RAW_EX_1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#RAW_EX_2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderException.getBomEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderException.getXmlGuessEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#CHARSET_PATTERN">
      <data key="type">FIELD</data>
    </node>
    <node id="java.util.Locale#US">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.getDefaultEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.getEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader#ENCODING_PATTERN">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReader.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderException#contentTypeMime">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderException#contentTypeEncoding">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderException#bomEncoding">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderException#xmlGuessEncoding">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderException#xmlEncoding">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderException.getContentTypeMime()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.getXML(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest#BOMs">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest#XMLs">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest#INFO">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest#XML1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest#XML3">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest#XML2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest#XML4">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest#XML5">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest#ENCODING_ATTRIBUTE_XML">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testHttp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toString(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf16()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf32()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomCp1047()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomIso8859_1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUsAscii()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16BE()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16LE()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32BE()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32LE()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkAppXml(boolean,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeEncoding(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeMime(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkTextXml(boolean,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testAppXml()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#HTTPMGS3">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#TXTXML">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF16LE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF16BE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#HTTPMGS1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#HTTPMGS2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF16">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF8">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF32LE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF32BE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF32">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalUTF16()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#RAWMGS1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalUTF32()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingNoBOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#RAWMGS2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandardUtf32()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testContentTypeEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testContentTypeMime()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testTextXml()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.AbstractMonitorTestCase.touch(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.AbstractMonitorTestCase.sleepHandleInterruped(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.AbstractMonitorTestCase#pauseTime">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.getCreatedDirectories()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.getChangedDirectories()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.getDeletedDirectories()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.getCreatedFiles()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.getChangedFiles()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.getDeletedFiles()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.AbstractMonitorTestCase#listener">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionsEmpty(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.AbstractMonitorTestCase.createObserver(java.io.File,java.io.FileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File,java.io.FileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.addListener(org.apache.commons.io.monitor.FileAlterationListener)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListenerAdaptor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.initialize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.AbstractMonitorTestCase#observer">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.fileFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.and(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDirName">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.HiddenFileFilter#VISIBLE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.AbstractMonitorTestCase.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener#clearOnStart">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener#changedDirectories">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener#changedFiles">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener#createdDirectories">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener#createdFiles">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener#deletedDirectories">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener#deletedFiles">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.clear()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListener.onDirectoryChange(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.onDirectoryChange(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListener.onDirectoryCreate(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.onDirectoryCreate(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListener.onDirectoryDelete(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.onDirectoryDelete(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListener.onFileChange(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.onFileChange(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListener.onFileCreate(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.onFileCreate(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListener.onFileDelete(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.onFileDelete(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListener.onStart(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.onStart(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListener.onStop(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.CollectionFileListener.onStop(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onDirectoryChange(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onDirectoryCreate(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onDirectoryDelete(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onFileChange(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onFileCreate(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onFileDelete(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onStart(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onStop(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor#interval">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor(long,org.apache.commons.io.monitor.FileAlterationObserver[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor.addObserver(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor.getObservers()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor#observers">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor.getInterval()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor.removeObserver(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor.run()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor#running">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor#threadFactory">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor.setThreadFactory(java.util.concurrent.ThreadFactory)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor.start()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor#thread">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor.stop()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.destroy()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitorTestCase(java.lang.String)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.AbstractMonitorTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.checkFile(java.lang.String,java.io.File,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testAddRemoveObservers()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testDefaultConstructor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File,java.io.FileFilter,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver(java.lang.String,java.io.FileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver(java.lang.String,java.io.FileFilter,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.getFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver#rootEntry">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver#fileFilter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver#comparator">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparator#NAME_SYSTEM_COMPARATOR">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparator#NAME_INSENSITIVE_COMPARATOR">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparator#NAME_COMPARATOR">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.getDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.getFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils#EMPTY_FILE_ARRAY">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.getListeners()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver#listeners">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.newChildInstance(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.setChildren(org.apache.commons.io.monitor.FileEntry[])">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry#EMPTY_ENTRIES">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.getChildren()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.isExists()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.doCreate(org.apache.commons.io.monitor.FileEntry)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.doMatch(org.apache.commons.io.monitor.FileEntry,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.doDelete(org.apache.commons.io.monitor.FileEntry)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.isDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserver.removeListener(org.apache.commons.io.monitor.FileAlterationListener)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserverTestCase(java.lang.String)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserverTestCase.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testAddRemoveListeners()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileCreate()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileDelete()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileUpdate()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testToString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.CanReadFileFilter#CAN_READ">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry#file">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry#parent">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry#name">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry#directory">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry#exists">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry#lastModified">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry#length">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.getLevel()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.getName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.getLastModified()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.getLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.getParent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry#children">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.setDirectory(boolean)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.setExists(boolean)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.setLastModified(long)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.setLength(long)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.monitor.FileEntry.setName(java.lang.String)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AgeFileFilter(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AgeFileFilter(java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AgeFileFilter(long,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AgeFileFilter(java.util.Date)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AgeFileFilter(java.util.Date,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AgeFileFilter(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AgeFileFilter#acceptOlder">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AgeFileFilter#cutoff">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AgeFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AbstractFileFilter.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AgeFileFilter.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilter#fileFilters">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilter(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilter.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilter.setFileFilters(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase.getDefaultWorkingPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase#DEFAULT_WORKING_PATH">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase.getWorkingPathNamePropertyKey()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase#WORKING_PATH_NAME_PROPERTY_KEY">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase.getFalseResults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFalseResults">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase.getFileResults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFileResults">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase.getFilenameResults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFilenameResults">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase.getTestFilters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFilters">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase.getTrueResults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase#testTrueResults">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase.getConditionalFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#trueFilters">
      <data key="type">FIELD</data>
    </node>
    <node id="java.lang.Boolean#TRUE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#falseFilters">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.CanReadFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.CanReadFileFilter#CANNOT_READ">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.CanReadFileFilter#READ_ONLY">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.CanReadFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.CanWriteFileFilter#CAN_WRITE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.CanWriteFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.CanWriteFileFilter#CANNOT_WRITE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.CanWriteFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#workingPath">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#file">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#TEST_FILE_NAME_PREFIX">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#TEST_FILE_TYPE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.DelegateFileFilter#fileFilter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.DelegateFileFilter#filenameFilter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.DelegateFileFilter.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.DirectoryFileFilter#DIRECTORY">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.DirectoryFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.EmptyFileFilter#EMPTY">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.EmptyFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.EmptyFileFilter#NOT_EMPTY">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.EmptyFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FalseFileFilter#FALSE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FalseFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFileFilter#FILE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(long,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.util.Date)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.util.Date,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.TrueFileFilter#INSTANCE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FalseFileFilter#INSTANCE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testCanWrite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testDelegation()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFilter(java.util.List)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.DirectoryFileFilter#INSTANCE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.forceDelete(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testEnsureTestCoverage()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_and()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_or()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testFiles()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArrayNullParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray_fromList()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.filterList(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterListNullParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList_fromArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.filterList(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSetNullParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet_fromArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testHidden()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase#SVN_DIR_NAME">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.HiddenFileFilter#HIDDEN">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.openOutputStream(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[],long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String,long)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(java.lang.String,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterValidation()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NameFileFilter(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase#WINDOWS">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArrayArgument()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullListArgument()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testNot()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testNullFilters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testOr()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilter(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffixCaseInsensitive()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.TrueFileFilter#TRUE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFileFilter(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils#cvsFilter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils#svnFilter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable,T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SizeFileFilter(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SizeFileFilter(long,boolean)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.HiddenFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.HiddenFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter#invoked">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.reset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.TrueFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter#invoked">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.reset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.MagicNumberFileFilter#magicNumbers">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.MagicNumberFileFilter#byteOffset">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.MagicNumberFileFilter.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NameFileFilter#names">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NameFileFilter#caseSensitivity">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NameFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NameFileFilter.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NotFileFilter#filter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.NotFileFilter.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilter#fileFilters">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilter.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase.getDefaultWorkingPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase#DEFAULT_WORKING_PATH">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase.getWorkingPathNamePropertyKey()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase#WORKING_PATH_NAME_PROPERTY_KEY">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase.getFalseResults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFalseResults">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase.getFileResults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFileResults">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase.getFilenameResults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFilenameResults">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase.getTestFilters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFilters">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase.getTrueResults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase#testTrueResults">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase.getConditionalFileFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.PrefixFileFilter#prefixes">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.PrefixFileFilter#caseSensitivity">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase.checkStartsWith(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.PrefixFileFilter.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.RegexFileFilter#pattern">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase.isCaseSensitive()">
      <data key="type">METHOD</data>
    </node>
    <node id="java.util.regex.Pattern#CASE_INSENSITIVE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.RegexFileFilter(java.util.regex.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.RegexFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.RegexFileFilterTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.RegexFileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.RegexFileFilterTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.RegexFileFilterTestCase.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.RegexFileFilterTestCase.testRegex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SizeFileFilter#size">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SizeFileFilter#acceptLarger">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SizeFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SizeFileFilter.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SuffixFileFilter#suffixes">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SuffixFileFilter#caseSensitivity">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.SuffixFileFilter.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFileFilter#wildcards">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFileFilter#caseSensitivity">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFileFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFileFilter.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFilter#wildcards">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DefaultFileComparator#DEFAULT_COMPARATOR">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase#reverse">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DefaultFileComparator#DEFAULT_REVERSE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase.tearDown()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testComparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testReverseComparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.AbstractFileComparator.sort(java.io.File[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArrayNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortList()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.AbstractFileComparator.sort(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortListNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testToString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.AbstractFileComparator.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.CompositeFileComparator(java.lang.Iterable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.CompositeFileComparator#delegates">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.CompositeFileComparator#NO_COMPARATORS">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.CompositeFileComparator.compare(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.CompositeFileComparator.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.CompositeFileComparatorTest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparator#SIZE_COMPARATOR">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_COMPARATOR">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorArrayNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterableNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DefaultFileComparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DefaultFileComparatorTest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DirectoryFileComparator#DIRECTORY_COMPARATOR">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DirectoryFileComparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DirectoryFileComparator#DIRECTORY_REVERSE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DirectoryFileComparator.compare(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DirectoryFileComparator.getType(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DirectoryFileComparatorTest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DirectoryFileComparatorTest.testSortArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.DirectoryFileComparatorTest.testSortList()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparator()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_REVERSE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_INSENSITIVE_COMPARATOR">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_INSENSITIVE_REVERSE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_SYSTEM_COMPARATOR">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_SYSTEM_REVERSE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparator#caseSensitivity">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparator.compare(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase.checkCompareTo(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparator.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparatorTest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ExtensionFileComparatorTest.testCaseSensitivity()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.LastModifiedFileComparator#LASTMODIFIED_COMPARATOR">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.LastModifiedFileComparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.LastModifiedFileComparator#LASTMODIFIED_REVERSE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.LastModifiedFileComparatorTest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparator()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparator#NAME_REVERSE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparator#NAME_INSENSITIVE_REVERSE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparator#NAME_SYSTEM_REVERSE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparator#caseSensitivity">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparator.compare(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparator.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparatorTest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparatorTest.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.NameFileComparatorTest.testCaseSensitivity()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparator#PATH_COMPARATOR">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparator()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparator#PATH_REVERSE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparator#PATH_INSENSITIVE_COMPARATOR">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparator#PATH_INSENSITIVE_REVERSE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparator#PATH_SYSTEM_COMPARATOR">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparator#PATH_SYSTEM_REVERSE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparator#caseSensitivity">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparator.compare(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparator.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparatorTest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparatorTest.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.PathFileComparatorTest.testCaseSensitivity()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ReverseComparator#delegate">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ReverseComparator.compare(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.ReverseComparator.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparator()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparator#SIZE_REVERSE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparator#SIZE_SUMDIR_COMPARATOR">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparator(boolean)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparator#SIZE_SUMDIR_REVERSE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparator#sumDirectoryContents">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparator.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparatorTest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparatorTest#smallerDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparatorTest#largerDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparatorTest#smallerFile">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparatorTest#largerFile">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparatorTest.testCompareDirectorySizes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.comparator.SizeFileComparatorTest.testNonexistantFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.AppendableOutputStream#appendable">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.AppendableOutputStream(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.AppendableOutputStream.getAppendable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.AppendableOutputStream.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.AppendableOutputStreamTest.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.AppendableOutputStreamTest#out">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.AppendableOutputStreamTest.testWriteInt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.AppendableOutputStreamTest.testWriteStringBuilder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.BrokenOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.BrokenOutputStream(java.io.IOException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.BrokenOutputStream#exception">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.BrokenOutputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.BrokenOutputStream.flush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.BrokenOutputStream.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.BrokenOutputStreamTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.BrokenOutputStreamTest#exception">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.BrokenOutputStreamTest#stream">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.BrokenOutputStreamTest.testClose()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.BrokenOutputStreamTest.testFlush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.BrokenOutputStreamTest.testWrite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream#count">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream#EMPTY_BYTE_ARRAY">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream#buffers">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream#filledBufferSum">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream#currentBuffer">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream#reuseBuffers">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.toString(java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream#currentBufferIndex">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.reset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStreamTestCase#DATA">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStreamWithReset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ChunkedOutputStream(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ChunkedOutputStream(java.io.OutputStream,int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ChunkedOutputStream#DEFAULT_CHUNK_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ChunkedOutputStream#chunkSize">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ChunkedOutputStream.write(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="java.io.FilterOutputStream#out">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ChunkedWriter(java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ChunkedWriter(java.io.Writer,int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ChunkedWriter#DEFAULT_CHUNK_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ChunkedWriter#chunkSize">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ChunkedWriter.write(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="java.io.FilterWriter#out">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.CloseShieldOutputStream(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.CloseShieldOutputStream.close()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ClosedOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.CloseShieldOutputStreamTest$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.CloseShieldOutputStreamTest$1.close()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.CloseShieldOutputStreamTest#closed">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.CloseShieldOutputStreamTest.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.CloseShieldOutputStreamTest#original">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.CloseShieldOutputStreamTest#shielded">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.CloseShieldOutputStreamTest.testClose()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ClosedOutputStream#CLOSED_OUTPUT_STREAM">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ClosedOutputStreamTest.testRead()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ClosedOutputStream.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.CountingOutputStream.getCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.CountingOutputStream.getByteCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.CountingOutputStream.resetCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.CountingOutputStream.resetByteCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.CountingOutputStream#count">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStream.beforeWrite(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.CountingOutputStream.beforeWrite(int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.CountingOutputStreamTest.testCounting()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStream.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStream.write(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream(int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream#outputFile">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream#memoryOutputStream">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream#currentOutputStream">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream#prefix">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream#suffix">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream#directory">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream(int,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream.getData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream.getFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream.getStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream.getStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream#closed">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream.thresholdReached()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStreamTest#testBytes">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThreshold()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThresholdPrefixOnly()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileBelowThreshold()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileError()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DemuxOutputStream#m_streams">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.DemuxOutputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DemuxOutputStream.flush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DemuxOutputStream.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding#out">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.CharsetEncoder)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.CharsetEncoder,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding(java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding(java.lang.String,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding(java.lang.String,java.nio.charset.CharsetEncoder)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding(java.lang.String,java.nio.charset.CharsetEncoder,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding.flush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding.write(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding.write(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding.write(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncoding.write(java.lang.String,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncodingTest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncodingTest.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncodingTest#defaultEncoding">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncodingTest#file1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncodingTest#file2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncodingTest#textContent">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncodingTest.tearDown()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_directory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_encoding_badEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_nullFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_fileName_nullFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncodingTest.testDifferentEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.FileWriterWithEncodingTest.testSameEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter.createLock()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter.initWriter(java.io.File,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter#lockFile">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter#LCK">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter#out">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter#class">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter.flush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter.write(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter.write(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest#file">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest#lockDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest#lockFile">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest#altLockDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest#altLockFile">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest.testAlternateLockDir()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_directory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullOutputStream#NULL_OUTPUT_STREAM">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullOutputStreamTest.testNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullOutputStream.write(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullOutputStream.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullWriter#NULL_WRITER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullWriterTest.testNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullWriter.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullWriter.write(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullWriter.write(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullWriter.write(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullWriter.write(java.lang.String,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullWriter.flush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.NullWriter.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStream.flush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStream.afterWrite(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStreamTest$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStreamTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStreamTest#original">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStreamTest#proxied">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStreamTest.testWrite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyOutputStreamTest.testWriteNullBaSucceeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter.append(char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter.beforeWrite(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter.afterWrite(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter.handleIOException(java.io.IOException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter.flush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter.write(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter.write(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter.write(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriterTest.testAppendCharSequence()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriter(java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriter.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriterTest.testNullCharArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriterTest.testNullCharSequencec()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriterTest.testNullString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriterTest.testWriteCharArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriterTest.testWriteCharArrayPartial()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriterTest.testWriteString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ProxyWriterTest.testWriteStringPartial()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriter#builder">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriter(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriter(java.lang.StringBuilder)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriter.append(char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriter.append(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriter.append(java.lang.CharSequence,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriter.getBuilder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriter.write(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriter.write(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriterTest.testAppendChar()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriterTest.testAppendCharSequence()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriterTest.testAppendCharSequencePortion()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructCapacity()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructStringBuilder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriter.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriterTest.testClose()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriterTest.testWriteChar()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriterTest.testWriteCharArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriterTest.testWriteCharArrayPortion()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriterTest#FOOBAR_CHARS">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriterTest.testWriteString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.StringBuilderWriterTest.testWriteStringPortion()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TaggedOutputStream(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TaggedOutputStream.isCauseOf(java.lang.Exception)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TaggedOutputStream#tag">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.TaggedOutputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TaggedOutputStream.throwIfCauseOf(java.lang.Exception)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TaggedOutputStreamTest.testBrokenStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TaggedOutputStreamTest.testNormalStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TaggedOutputStreamTest.testOtherException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStream#branch">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStream.flush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStream.write(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStream.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStreamTest$RecordCloseByteArrayOutputStream#closed">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStreamTest$RecordCloseByteArrayOutputStream.close()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStreamTest.testCloseBranchIOException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStreamTest$ExceptionOnCloseByteArrayOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStreamTest$RecordCloseByteArrayOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="java.io.IOException#class">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStreamTest.testCloseMainIOException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.TeeOutputStreamTest.testTee()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream#threshold">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream#written">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream.getThreshold()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream.getByteCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream#thresholdExceeded">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream.flush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream.resetByteCount()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.ThresholdingOutputStream.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream(java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.Charset,int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream#DEFAULT_BUFFER_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String,int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream#writer">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream#decoder">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream#writeImmediately">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream#decoderOut">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream.processInput(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream.flushOutput()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream.flush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream#decoderIn">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream.write(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStream.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testFlush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testLargeUTF8WithBufferedWrite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testWithBufferedWrite(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest#LARGE_TEST_STRING">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testLargeUTF8WithSingleByteWrite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testWithSingleByteWrite(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16BEWithBufferedWrite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest#TEST_STRING">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16BEWithSingleByteWrite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16LEWithBufferedWrite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16LEWithSingleByteWrite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16WithBufferedWrite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16WithSingleByteWrite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testUTF8WithBufferedWrite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testUTF8WithSingleByteWrite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest#random">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.WriterOutputStreamTest.testWriteImmediately()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter(java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter#out">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter#defaultEncoding">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter.getDefaultEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter.getEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter#encoding">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter#writer">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter#xmlPrologWriter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter#BUFFER_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter#ENCODING_PATTERN">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter.flush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriter.write(char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlContent(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.createXmlContent(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.testDefaultEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_UNICODE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.testEBCDICEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.testEUC_JPEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_EUC_JP">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.testEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.testLatin15Encoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_LATIN15">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.testLatin1Encoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_LATIN1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.testLatin7Encoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_LATIN7">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.testNoXmlHeader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.testUTF16BEEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.testUTF16Encoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.testUTF16LEEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.XmlStreamWriterTest.testUTF8Encoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase#testDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.YellOnCloseInputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream#yellForFlush">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream#yellForClose">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark#charsetName">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark#bytes">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark.getBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark.hashCode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_3">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMarkTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMarkTestCase.testCharsetName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMarkTestCase.testConstantCharsetNames()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMarkTestCase.testEquals()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMarkTestCase.testErrors()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMarkTestCase.testGet()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMarkTestCase.testGetBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMarkTestCase.testHashCode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMark#class">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMarkTestCase.testLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ByteOrderMarkTestCase.testToString()">
      <data key="type">METHOD</data>
    </node>
    <node id="java.lang.String#CASE_INSENSITIVE_ORDER">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.Charsets#ISO_8859_1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.Charsets#US_ASCII">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.CharsetsTestCase.testIso8859_1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CharsetsTestCase.testRequiredCharsets()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CharsetsTestCase.testToCharset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CharsetsTestCase.testUsAscii()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CharsetsTestCase.testUtf16()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CharsetsTestCase.testUtf16Be()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CharsetsTestCase.testUtf16Le()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CharsetsTestCase.testUtf8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils#DEFAULT_BUFFER_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtilsTest#inData">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtilsTest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriterWithEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriterWithEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtilsTest.testCtor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.CopyUtils()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase$ReaderThread#m_input">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase$ReaderThread#m_demux">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase$ReaderThread.getData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase$ReaderThread#m_buffer">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase$ReaderThread.run()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase#c_random">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase$WriterThread#m_output">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase$WriterThread#m_demux">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase$WriterThread#m_data">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase$WriterThread.run()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase#m_threadMap">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase#m_outputMap">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase.doJoin()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase.doStart()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase.testInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.input.DemuxInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase#T1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase#DATA1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase#T2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase#DATA2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase#T3">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase#DATA3">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase#T4">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase#DATA4">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DemuxTestCase.testOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.output.DemuxOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker$CancelException(java.io.File,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker$CancelException(java.lang.String,java.io.File,int)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker$CancelException#file">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker$CancelException#depth">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker$CancelException.getDepth()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker$CancelException.getFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker(java.io.FileFilter,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker#filter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker#depthLimit">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker.checkIfCancelled(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker.handleIsCancelled(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker.handleDirectory(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker.handleDirectoryStart(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker.filterDirectoryContents(java.io.File,int,java.io.File[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker.handleRestricted(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker.handleStart(java.io.File,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker.handleEnd(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker#cancelFileName">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker#suppressCancel">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.find(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestFalseFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestFalseFileFinder.handleDirectory(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString(java.io.FileFilter,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString.find(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#cancelFileName">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#suppressCancel">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleIsCancelled(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#cancelled">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.find(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#results">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#dirsFilter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.createNameFilter(java.io.File[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#iofilesFilter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#outputFilesFilter">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#ioDirAndFilesFilter">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#dirsAndFilesFilter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#NOT_SVN">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.checkContainsString(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testCancel()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#javaDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#dirs">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#ioFiles">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#outputFiles">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitA()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitB()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#orgDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitC()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#apacheDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#commonsDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitD()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.directoriesOnly(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile4()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.filesOnly(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testFilterString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testHandleStartDirectoryFalse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase#current">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testLimitToCurrent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testMissingStartDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCase.testMultiThreadCancel()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker#cancelFileName">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker#suppressCancel">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.find(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFalseFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFalseFileFinder.handleDirectory(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#cancelFileName">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#suppressCancel">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleIsCancelled(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#cancelled">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.find(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#results">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirsFilter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.createNameFilter(java.io.File[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#iofilesFilter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#outputFilesFilter">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#ioDirAndFilesFilter">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirsAndFilesFilter">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#NOT_SVN">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testCancel()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#javaDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirs">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#ioFiles">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#outputFiles">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitA()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitB()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#orgDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitC()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#apacheDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#commonsDir">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitD()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.directoriesOnly(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile4()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.filesOnly(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testHandleStartDirectoryFalse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4#current">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testLimitToCurrent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testMissingStartDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testMultiThreadCancel()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.swapDouble(double)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.swapLong(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.swapFloat(float)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.swapInteger(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.read(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testCtor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testEOFException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testSwapDouble()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testSwapFloat()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testSwapInteger()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testSwapLong()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testSwapShort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.swapShort(short)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testSymmetry()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testSymmetryOfLong()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testUnsignedOverrun()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaner#theInstance">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaner.getTrackCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker.getTrackCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaner.getInstance()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaner.exitWhenFinished()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker.exitWhenFinished()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleanerTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase(java.lang.String)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.newInstance()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleanerTestCase.newInstance()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker$Reaper()">
      <data key="type">METHOD</data>
    </node>
    <node id="java.lang.Thread#MAX_PRIORITY">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker$Reaper.run()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker$Tracker.delete()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker$Tracker.getPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker#exitWhenFinished">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker#trackers">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker#q">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker#deleteFailures">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker$Tracker#path">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker$Tracker(java.lang.String,org.apache.commons.io.FileDeleteStrategy,java.lang.Object,java.lang.ref.ReferenceQueue)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker$Tracker#deleteStrategy">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategy#NORMAL">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategy.deleteQuietly(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker.getDeleteFailures()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker.addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTracker#reaper">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase#testFile">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.showFailures()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.setUp()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.tearDown()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_ForceStrategy()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.pauseForDeleteToComplete(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategy#FORCE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_NullStrategy()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinishedFirst()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished_NoTrackAfter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategy(java.lang.String)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategy.doDelete(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy.doDelete(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategy#name">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategy.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategyTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteForce()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNormal()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteQuietlyNormal()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileDeleteStrategyTestCase.testToString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils#INSTANCE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ThreadMonitor.start(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils.openProcess(java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ThreadMonitor.stop(java.lang.Thread)">
      <data key="type">METHOD</data>
    </node>
    <node id="java.util.Locale#ENGLISH">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils#OS">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils.freeSpaceKb()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils.freeSpaceKb(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils.freeSpaceKb(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils.freeSpaceKb(java.lang.String,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils#WINDOWS">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils#ONE_KB">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils#UNIX">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils#POSIX_UNIX">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils#OTHER">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils#DF">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.normalize(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils#exitCode">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils#bytes">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils#cmd">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils$1.exitValue()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils$1.waitFor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils$1.getInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils.openProcess(java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$2.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase$1.freeSpaceWindows(java.lang.String,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponseKb()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseFreeBSD()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbLinux()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbSolaris()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseLinux()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyMultiLineResponse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_InvalidTextResponse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NoSuchDirectoryResponse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_quoted()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()">
      <data key="type">METHOD</data>
    </node>
    <node id="java.io.File#separatorChar">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.directoryContains(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.util.Date)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.isSymlink(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.isSystemWindows()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.openInputStream(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.getTempDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.getTempDirectoryPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.getUserDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.getUserDirectoryPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.toFile(java.net.URL)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils#ONE_EB_BI">
      <data key="type">FIELD</data>
    </node>
    <node id="java.math.BigInteger#ZERO">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils#ONE_PB_BI">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils#ONE_TB_BI">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils#ONE_GB_BI">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils#ONE_MB_BI">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils#ONE_KB_BI">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.sizeOfDirectoryBig0(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.sizeOfBig0(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.toURLs(java.io.File[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.listFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.iterateFiles(java.io.File,java.lang.String[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.iterateFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.iterateFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.readLines(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.readLines(java.io.File,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.checksum(java.io.File,java.util.zip.Checksum)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.checksumCRC32(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.sizeOf(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.sizeOfDirectory0(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.sizeOf0(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.lineIterator(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.lineIterator(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.lineIterator(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyInputStreamToFile(java.io.InputStream,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyToFile(java.io.InputStream,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils#FILE_COPY_BUFFER_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.forceMkdirParent(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileExistsException(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="java.io.File#separator">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],int,int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.util.Collection,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.util.Collection,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.util.Collection,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanDirectoryTestCase#top">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.getLocalTestDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanSymlinksTestCase#top">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanSymlinksTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithASymlinkDir()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setupSymlink(java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithParentSymlinks()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithSymlinkFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCorrectlyIdentifySymlinkWithParentSymLink()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkDir()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testStillClearsIfGivenDirectoryIsASymlink()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#top">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory3">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file3">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file1ByRelativeDirectory2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file2ByRelativeDirectory1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testCanonicalPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainsDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotExist()">
      <data key="type">METHOD</data>
    </node>
    <node id="java.lang.IllegalArgumentException#class">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testFileDoesNotExist()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testFileDoesNotExistBug()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testSameFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testUnrealizedContainment()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsFileNewerTestCase#m_testFile1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsFileNewerTestCase#m_testFile2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsFileNewerTestCase#FILE1_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsFileNewerTestCase#FILE2_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsFileNewerTestCase.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsListFilesTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsListFilesTestCase.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsListFilesTestCase.testIterateFilesByExtension()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Iterator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker.list(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker.handleDirectoryStart(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase#LIST_WALKER">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase#testFile2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase#testFile1Size">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase#testFile2Size">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.IGNOREtestCopyFileLarge()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils#ONE_GB">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.createCircularSymLink(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.createFilesForTestCopyDirectory(java.io.File,java.io.File,java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.openOutputStream_noParent(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()">
      <data key="type">METHOD</data>
    </node>
    <node id="java.math.BigInteger#ONE">
      <data key="type">FIELD</data>
    </node>
    <node id="java.lang.Long#MAX_VALUE">
      <data key="type">FIELD</data>
    </node>
    <node id="java.lang.Character#MAX_VALUE">
      <data key="type">FIELD</data>
    </node>
    <node id="java.lang.Short#MAX_VALUE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeLong()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testChecksum()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testChecksumCRC32()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testChecksumDouble()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testChecksumOnDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullChecksum()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCompareSizeOf()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testContentEquals()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testContentEqualsIgnoreEOL()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryFiltered()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryPreserveDates()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToChild()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToGrandChild()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToItself()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyFile1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyFile2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyFileToOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testCopyURLToFileWithTimeout()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testDecodeUrl()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testDecodeUrlEncodingUtf8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testDecodeUrlLenient()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testDecodeUrlNullSafe()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testDeleteDirectoryWithNonDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyDir()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyForNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyNonExistent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testFileUtils()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testForceMkdir()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testForceMkdirParent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testGetFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.getFile(java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testGetFile_Parent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.getFile(java.io.File,java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testGetTempDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testGetTempDirectoryPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testGetUserDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testGetUserDirectoryPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testIO276()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testIO300()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testIncorrectOutputSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase$ShorterFile(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testIterateFiles()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testIterateFilesAndDirs()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testListFiles()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testListFilesWithDirs()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory_Errors()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_CopyDelete()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase$3(java.io.File,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Errors()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Rename()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory_Errors()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase$1(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete_Failed()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase$2(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testMoveFile_Errors()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testMoveFile_Rename()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory_Errors()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithDefaultEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testReadLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testSizeOf()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase#TEST_DIRECTORY_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testSizeOfAsBigInteger()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase#TEST_DIRECTORY_SIZE_BI">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectoryAsBigInteger()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase#TEST_DIRECTORY_SIZE_GT_ZERO_BI">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testToFile1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testToFile2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testToFile3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testToFile4()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testToFile5()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testToFileUtf8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testToFiles1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testToFiles2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testToFiles3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testToFiles3a()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testToFiles4()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testToURLs1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testToURLs3a()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testTouch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.test_openInputStream_exists()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.test_openInputStream_existsButIsDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.test_openInputStream_notExists()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_exists()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_existsButIsDirectory()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_noParentCreateFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_noParentNoFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExists()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExistsCannotCreate()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsWaitForTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsWaitForTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsWaitForTestCase.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtilsWaitForTestCase.testWaitFor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FileUtils.waitFor(java.io.File,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.normalize(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils#NOT_FOUND">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.isSeparator(char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils#UNIX_SEPARATOR">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils#WINDOWS_SEPARATOR">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils#SYSTEM_SEPARATOR">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase.checkRegionMatches(java.lang.String,int,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils#EXTENSION_SEPARATOR">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils#OTHER_SEPARATOR">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.getName(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.getPath(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase#testFile1">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase#testFile2">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase#testFile1Size">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase#testFile2Size">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testConcat()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase#SEP">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testEquals()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase#WINDOWS">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator_IO_248()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testGetName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testGetPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testNormalize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparatorUnixWin()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testNormalizeUnixWin()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsWildcardTestCase.testLocaleIndependence()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchCaseSpecified()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsWildcardTestCase#WINDOWS">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.FilenameUtilsWildcardTestCase.test_IO_246()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.HexDump#_hexcodes">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.HexDump#_shifts">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.HexDump#EOL">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.HexDumpTest.testDump()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.HexDumpTest.toHex(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.HexDumpTest.toAscii(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_checkCompare_case()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase#WINDOWS">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_checkCompare_functionality()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_case()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_functionality()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_checkEquals_case()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_checkEquals_functionality()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_case()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_functionality()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_case()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_functionality()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_case()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_functionality()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_forName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase.forName(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_getName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase.getName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_isCaseSensitive()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_serialization()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.serialize(org.apache.commons.io.IOCase)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCaseTestCase.test_toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOExceptionWithCauseTestCase.testIOExceptionStringThrowable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOExceptionWithCauseTestCase.validate(java.lang.Throwable,java.lang.Throwable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOExceptionWithCauseTestCase.testIOExceptionThrowable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toBufferedReader(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toByteArray(java.net.URI)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toByteArray(java.net.URL)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toByteArray(java.net.URLConnection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.close(java.net.URLConnection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.read(java.io.Reader,char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toBufferedInputStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toBufferedInputStream(java.io.InputStream,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toInputStream(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toString(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toString(java.net.URI)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toString(java.net.URI,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toString(java.net.URI,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toString(java.net.URL,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toString(java.net.URL)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toString(java.net.URL,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.readLines(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.readLines(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils#DEFAULT_BUFFER_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils#SKIP_BYTE_BUFFER">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils#SKIP_BUFFER_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils#SKIP_CHAR_BUFFER">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.lineIterator(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIterator(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.lineIterator(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.writeChunked(byte[],java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStreamWithBufferSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStreamWithBufferSize(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_IO84()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullOut()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullOut()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullOut()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_IO84()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase#iarr">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase#carr">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.tearDown()">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testAsBufferedInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase$6()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.buffer(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testAsBufferedInputStreamWithBufferSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase$7()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.buffer(java.io.InputStream,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testAsBufferedNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.buffer(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.buffer(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.buffer(java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testAsBufferedOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase$8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testAsBufferedOutputStreamWithBufferSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase$9()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.buffer(java.io.OutputStream,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testAsBufferedReader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testAsBufferedReaderWithBufferSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.buffer(java.io.Reader,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testAsBufferedWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testAsBufferedWriterWithBufferSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.buffer(java.io.Writer,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_AllCloseableIOException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_CloseableIOException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase$2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_Selector()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.closeQuietly(java.nio.channels.Selector)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase$3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.SelectorAdapter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.SelectorAdapter.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase$3.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SelectorIOException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SelectorNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SelectorTwice()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_ServerSocket()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.closeQuietly(java.net.ServerSocket)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_ServerSocketIOException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase$4()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_Socket()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.closeQuietly(java.net.Socket)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SocketIOException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase$5()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testConstants()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils#DIR_SEPARATOR_UNIX">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils#DIR_SEPARATOR_WINDOWS">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils#LINE_SEPARATOR_UNIX">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils#LINE_SEPARATOR_WINDOWS">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase#WINDOWS">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils#DIR_SEPARATOR">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testContentEqualsIgnoreEOL()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testContentEquals_InputStream_InputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testContentEquals_Reader_Reader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharExtraLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharFullLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharNoSkip()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharSkip()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharSkipInvalid()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_ExtraLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_FullLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_NoSkip()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_Skip()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_SkipInvalid()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_OutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_Writer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testCopy_String_Writer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream_ByteArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream_Offset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream__ReturnByteArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testReadFully_ReadableByteChannel()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testReadFully_Reader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testReadFully_Reader_Offset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testRead_ReadableByteChannel()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testSkipFully_InputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testSkipFully_ReadableByteChannel()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testSkipFully_Reader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testSkip_FileReader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testSkip_InputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testSkip_ReadableByteChannel()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStreamWithBufferSize_InputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStream_InputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_NegativeSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_Size()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeIllegal()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeLong()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeZero()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToByteArray_Reader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToByteArray_String()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toByteArray(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URI()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URL()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URLConnection()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream_CharsetName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToCharArray_Reader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToInputStream_CharSequence()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToInputStream_String()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToString_ByteArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.toString(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToString_InputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToString_Reader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToString_URI()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToString_URI(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToString_URI_CharsetName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToString_URI_CharsetNameNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToString_URL()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToString_URL(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToString_URL_CharsetName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsTestCase.testToString_URL_CharsetNameNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtils.write(char[],java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter_Encoding_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter_Encoding_nullStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIterator#bufferedReader">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.LineIterator.hasNext()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIterator.isValidLine(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIterator.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIterator#cachedLine">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIterator#finished">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIterator.next()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIterator.nextLine()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIterator.closeQuietly(org.apache.commons.io.LineIterator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.createStringLines(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.assertLines(java.util.List,org.apache.commons.io.LineIterator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIterator.remove()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.tearDown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testCloseEarly()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testConstructor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase$2(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase$2.isValidLine(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testFiltering(java.util.List,java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testFilteringBufferedReader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testFilteringFileReader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testInvalidEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testMissingFile()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyDefaultEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyNullEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyUtf8Encoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testNextOnly()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testNextWithException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase$1(java.io.Reader)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testOneLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testThreeLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testTwoLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testValidEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.LineIteratorTestCase.testZeroLines()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOExceptionWithCause(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.TaggedIOException#tag">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.TaggedIOException.getTag()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.TaggedIOException.getCause()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.TaggedIOExceptionTest.testTaggedIOException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ThreadMonitor#thread">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.ThreadMonitor(java.lang.Thread,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ThreadMonitor#timeout">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.ThreadMonitor.start(java.lang.Thread,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ThreadMonitor#class">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.ThreadMonitor.run()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ThreadMonitorTestCase.testCompletedWithoutTimeout()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ThreadMonitorTestCase.testNoTimeout()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.ThreadMonitorTestCase.testTimeout()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase#sensitive">
      <data key="type">FIELD</data>
    </node>
    <node id="org.apache.commons.io.IOCase.readResolve()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.io.IOCase#name">
      <data key="type">FIELD</data>
    </node>
    <edge id="e1" source="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.File)" target="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2" source="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3" source="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4" source="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5" source="org.apache.commons.io.input.compatibility.XmlStreamReader#defaultEncoding" target="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6" source="org.apache.commons.io.input.compatibility.XmlStreamReader#staticDefaultEncoding" target="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e7" source="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e8" source="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e9" source="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream(java.io.InputStream,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e10" source="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e11" source="org.apache.commons.io.input.compatibility.XmlStreamReader#defaultEncoding" target="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e12" source="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#staticDefaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e13" source="org.apache.commons.io.input.compatibility.XmlStreamReader(java.net.URL)" target="org.apache.commons.io.input.compatibility.XmlStreamReader(java.net.URLConnection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e14" source="org.apache.commons.io.input.compatibility.XmlStreamReader(java.net.URLConnection)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream(java.io.InputStream,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e15" source="org.apache.commons.io.input.compatibility.XmlStreamReader(java.net.URLConnection)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e16" source="org.apache.commons.io.input.compatibility.XmlStreamReader(java.net.URLConnection)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e17" source="org.apache.commons.io.input.compatibility.XmlStreamReader#defaultEncoding" target="org.apache.commons.io.input.compatibility.XmlStreamReader(java.net.URLConnection)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e18" source="org.apache.commons.io.input.compatibility.XmlStreamReader#staticDefaultEncoding" target="org.apache.commons.io.input.compatibility.XmlStreamReader(java.net.URLConnection)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e19" source="org.apache.commons.io.input.compatibility.XmlStreamReader.read(char[],int,int)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#reader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e20" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.isAppXml(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e21" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.isTextXml(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e22" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e23" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e24" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#defaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e25" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#US_ASCII">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e26" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e27" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e28" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#HTTP_EX_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e29" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_16">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e30" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#HTTP_EX_2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e31" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_32BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e32" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_32LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e33" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_32">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e34" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#HTTP_EX_3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e35" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e36" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#defaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e37" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e38" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_16">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e39" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e40" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e41" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_32">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e42" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_32BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e43" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_32LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e44" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#RAW_EX_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e45" source="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_8" target="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e46" source="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#RAW_EX_2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e47" source="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_16BE" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getBOMEncoding(java.io.BufferedInputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e48" source="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_16LE" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getBOMEncoding(java.io.BufferedInputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e49" source="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_8" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getBOMEncoding(java.io.BufferedInputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e50" source="org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeEncoding(java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#CHARSET_PATTERN">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e51" source="org.apache.commons.io.input.compatibility.XmlStreamReader.getDefaultEncoding()" target="org.apache.commons.io.input.compatibility.XmlStreamReader#staticDefaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e52" source="org.apache.commons.io.input.compatibility.XmlStreamReader.getEncoding()" target="org.apache.commons.io.input.compatibility.XmlStreamReader#encoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e53" source="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_16BE" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getXMLGuessEncoding(java.io.BufferedInputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e54" source="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_16LE" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getXMLGuessEncoding(java.io.BufferedInputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e55" source="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_8" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getXMLGuessEncoding(java.io.BufferedInputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e56" source="org.apache.commons.io.input.compatibility.XmlStreamReader#EBCDIC" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getXMLGuessEncoding(java.io.BufferedInputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e57" source="org.apache.commons.io.input.compatibility.XmlStreamReader.getXmlProlog(java.io.BufferedInputStream,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e58" source="org.apache.commons.io.input.compatibility.XmlStreamReader.getXmlProlog(java.io.BufferedInputStream,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#ENCODING_PATTERN">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e59" source="org.apache.commons.io.input.compatibility.XmlStreamReader.close()" target="org.apache.commons.io.input.compatibility.XmlStreamReader#reader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e60" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream(java.io.InputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeMime(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e61" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream(java.io.InputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeEncoding(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e62" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream(java.io.InputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getBOMEncoding(java.io.BufferedInputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e63" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream(java.io.InputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getXMLGuessEncoding(java.io.BufferedInputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e64" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream(java.io.InputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getXmlProlog(java.io.BufferedInputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e65" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream(java.io.InputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e66" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream(java.io.InputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.prepareReader(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e67" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream(java.io.InputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e68" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream(java.io.InputStream,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e69" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)" target="org.apache.commons.io.input.compatibility.XmlStreamReaderException.getInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e70" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)" target="org.apache.commons.io.input.XmlStreamReaderException.getXmlEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e71" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)" target="org.apache.commons.io.input.XmlStreamReaderException.getContentTypeEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e72" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.prepareReader(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e73" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#defaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e74" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e75" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream(java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getBOMEncoding(java.io.BufferedInputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e76" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream(java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getXMLGuessEncoding(java.io.BufferedInputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e77" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream(java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getXmlProlog(java.io.BufferedInputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e78" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream(java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e79" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream(java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.prepareReader(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e80" source="org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream(java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReader#BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e81" source="org.apache.commons.io.input.compatibility.XmlStreamReader#reader" target="org.apache.commons.io.input.compatibility.XmlStreamReader.prepareReader(java.io.InputStream,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e82" source="org.apache.commons.io.input.compatibility.XmlStreamReader#encoding" target="org.apache.commons.io.input.compatibility.XmlStreamReader.prepareReader(java.io.InputStream,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e83" source="org.apache.commons.io.input.compatibility.XmlStreamReader#staticDefaultEncoding" target="org.apache.commons.io.input.compatibility.XmlStreamReader.setDefaultEncoding(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e84" source="org.apache.commons.io.input.compatibility.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)" target="org.apache.commons.io.input.compatibility.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e85" source="org.apache.commons.io.input.compatibility.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)" target="org.apache.commons.io.input.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e86" source="org.apache.commons.io.input.compatibility.XmlStreamReaderException#is" target="org.apache.commons.io.input.compatibility.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e87" source="org.apache.commons.io.input.compatibility.XmlStreamReaderException.getInputStream()" target="org.apache.commons.io.input.compatibility.XmlStreamReaderException#is">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e88" source="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest$MockXmlStreamReader(java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e89" source="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e90" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e91" source="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest$MockXmlStreamReader(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e92" source="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e93" source="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeMime(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e94" source="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeEncoding(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e95" source="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e96" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e97" source="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest$MockXmlStreamReader(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e98" source="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e99" source="org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.compatibility.XmlStreamReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e100" source="org.apache.commons.io.input.AutoCloseInputStream(java.io.InputStream)" target="org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e101" source="org.apache.commons.io.input.ProxyInputStream.afterRead(int)" target="org.apache.commons.io.input.AutoCloseInputStream.afterRead(int)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e102" source="org.apache.commons.io.input.AutoCloseInputStream.afterRead(int)" target="org.apache.commons.io.input.AutoCloseInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e103" source="org.apache.commons.io.input.AutoCloseInputStream.afterRead(int)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e104" source="org.apache.commons.io.input.ProxyInputStream.close()" target="org.apache.commons.io.input.AutoCloseInputStream.close()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e105" source="org.apache.commons.io.input.AutoCloseInputStream.close()" target="org.apache.commons.io.input.ClosedInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e106" source="org.apache.commons.io.input.AutoCloseInputStream.close()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e107" source="java.io.FilterInputStream#in" target="org.apache.commons.io.input.AutoCloseInputStream.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e108" source="org.apache.commons.io.input.AutoCloseInputStream.finalize()" target="org.apache.commons.io.input.AutoCloseInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e109" source="org.apache.commons.io.input.AutoCloseInputStreamTest#closed" target="org.apache.commons.io.input.AutoCloseInputStreamTest$1.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e110" source="org.apache.commons.io.input.AutoCloseInputStreamTest.setUp()" target="org.apache.commons.io.input.AutoCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e111" source="org.apache.commons.io.input.AutoCloseInputStreamTest.setUp()" target="org.apache.commons.io.input.AutoCloseInputStreamTest$1(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e112" source="org.apache.commons.io.input.AutoCloseInputStreamTest#data" target="org.apache.commons.io.input.AutoCloseInputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e113" source="org.apache.commons.io.input.AutoCloseInputStreamTest#stream" target="org.apache.commons.io.input.AutoCloseInputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e114" source="org.apache.commons.io.input.AutoCloseInputStreamTest.setUp()" target="org.apache.commons.io.input.AutoCloseInputStreamTest#data">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e115" source="org.apache.commons.io.input.AutoCloseInputStreamTest#closed" target="org.apache.commons.io.input.AutoCloseInputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e116" source="org.apache.commons.io.input.AutoCloseInputStreamTest.testClose()" target="org.apache.commons.io.input.AutoCloseInputStreamTest#stream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e117" source="org.apache.commons.io.input.AutoCloseInputStreamTest.testClose()" target="org.apache.commons.io.input.AutoCloseInputStreamTest#closed">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e118" source="org.apache.commons.io.input.AutoCloseInputStreamTest.testRead()" target="org.apache.commons.io.input.AutoCloseInputStreamTest#data">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e119" source="org.apache.commons.io.input.AutoCloseInputStreamTest.testRead()" target="org.apache.commons.io.input.AutoCloseInputStreamTest#stream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e120" source="org.apache.commons.io.input.AutoCloseInputStreamTest.testRead()" target="org.apache.commons.io.input.AutoCloseInputStreamTest#closed">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e121" source="org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBuffer()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e122" source="org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBuffer()" target="org.apache.commons.io.input.AutoCloseInputStreamTest#data">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e123" source="org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBuffer()" target="org.apache.commons.io.input.AutoCloseInputStreamTest#stream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e124" source="org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBuffer()" target="org.apache.commons.io.input.AutoCloseInputStreamTest#closed">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e125" source="org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBufferOffsetLength()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e126" source="org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBufferOffsetLength()" target="org.apache.commons.io.input.AutoCloseInputStreamTest#data">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e127" source="org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBufferOffsetLength()" target="org.apache.commons.io.input.AutoCloseInputStreamTest#stream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e128" source="org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBufferOffsetLength()" target="org.apache.commons.io.input.AutoCloseInputStreamTest#closed">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e129" source="org.apache.commons.io.input.BOMInputStream$1.compare(org.apache.commons.io.ByteOrderMark,org.apache.commons.io.ByteOrderMark)" target="org.apache.commons.io.ByteOrderMark.length()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e130" source="org.apache.commons.io.input.BOMInputStream$1.compare(org.apache.commons.io.ByteOrderMark,org.apache.commons.io.ByteOrderMark)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e131" source="org.apache.commons.io.input.BOMInputStream#ByteOrderMarkLengthComparator" target="org.apache.commons.io.input.BOMInputStream$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e132" source="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e133" source="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)" target="org.apache.commons.io.ByteOrderMark#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e134" source="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean)" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e135" source="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean)" target="org.apache.commons.io.ByteOrderMark#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e136" source="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])" target="org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e137" source="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e138" source="org.apache.commons.io.input.BOMInputStream#include" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e139" source="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])" target="org.apache.commons.io.input.BOMInputStream#ByteOrderMarkLengthComparator">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e140" source="org.apache.commons.io.input.BOMInputStream#boms" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e141" source="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e142" source="org.apache.commons.io.input.BOMInputStream.hasBOM()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e143" source="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e144" source="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" target="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e145" source="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" target="org.apache.commons.io.input.BOMInputStream#boms">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e146" source="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)" target="org.apache.commons.io.input.BOMInputStream#byteOrderMark">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e147" source="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" target="org.apache.commons.io.ByteOrderMark.length()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e148" source="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" target="org.apache.commons.io.ByteOrderMark.get(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e149" source="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" target="org.apache.commons.io.input.BOMInputStream#firstBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e150" source="org.apache.commons.io.input.ProxyInputStream.read()" target="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e151" source="org.apache.commons.io.input.BOMInputStream.read()" target="org.apache.commons.io.input.BOMInputStream.readFirstBytes()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e152" source="org.apache.commons.io.input.BOMInputStream.read()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e153" source="org.apache.commons.io.input.ProxyInputStream.read(byte[])" target="org.apache.commons.io.input.BOMInputStream.read(byte[])">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e154" source="org.apache.commons.io.input.BOMInputStream.read(byte[])" target="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e155" source="org.apache.commons.io.input.BOMInputStream.read(byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e156" source="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e157" source="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.BOMInputStream.readFirstBytes()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e158" source="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e159" source="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e160" source="org.apache.commons.io.input.BOMInputStream.readFirstBytes()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e161" source="org.apache.commons.io.input.BOMInputStream.readFirstBytes()" target="org.apache.commons.io.input.BOMInputStream#fbIndex">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e162" source="org.apache.commons.io.input.BOMInputStream.readFirstBytes()" target="org.apache.commons.io.input.BOMInputStream#fbLength">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e163" source="org.apache.commons.io.input.BOMInputStream.readFirstBytes()" target="org.apache.commons.io.input.BOMInputStream#firstBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e164" source="org.apache.commons.io.input.BOMInputStream.readFirstBytes()" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e165" source="org.apache.commons.io.input.BOMInputStream.getBOMCharsetName()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e166" source="org.apache.commons.io.input.BOMInputStream.getBOMCharsetName()" target="org.apache.commons.io.ByteOrderMark.getCharsetName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e167" source="org.apache.commons.io.input.BOMInputStream.getBOMCharsetName()" target="org.apache.commons.io.input.BOMInputStream#byteOrderMark">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e168" source="org.apache.commons.io.input.ProxyInputStream.skip(long)" target="org.apache.commons.io.input.BOMInputStream.skip(long)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e169" source="org.apache.commons.io.input.BOMInputStream.skip(long)" target="org.apache.commons.io.input.BOMInputStream.readFirstBytes()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e170" source="org.apache.commons.io.input.BOMInputStream.skip(long)" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e171" source="org.apache.commons.io.input.BOMInputStream.find()" target="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e172" source="org.apache.commons.io.input.BOMInputStream.find()" target="org.apache.commons.io.input.BOMInputStream#boms">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e173" source="org.apache.commons.io.input.BOMInputStream.getBOM()" target="org.apache.commons.io.ByteOrderMark.length()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e174" source="org.apache.commons.io.input.BOMInputStream.getBOM()" target="org.apache.commons.io.input.BOMInputStream.find()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e175" source="org.apache.commons.io.input.BOMInputStream.getBOM()" target="org.apache.commons.io.input.BOMInputStream#firstBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e176" source="org.apache.commons.io.input.BOMInputStream#fbLength" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e177" source="org.apache.commons.io.input.BOMInputStream.getBOM()" target="org.apache.commons.io.input.BOMInputStream#boms">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e178" source="org.apache.commons.io.input.BOMInputStream#firstBytes" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e179" source="org.apache.commons.io.input.BOMInputStream.getBOM()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e180" source="org.apache.commons.io.input.BOMInputStream.getBOM()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e181" source="org.apache.commons.io.input.BOMInputStream.getBOM()" target="org.apache.commons.io.input.BOMInputStream#fbLength">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e182" source="org.apache.commons.io.input.BOMInputStream#byteOrderMark" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e183" source="org.apache.commons.io.input.BOMInputStream.getBOM()" target="org.apache.commons.io.input.BOMInputStream#byteOrderMark">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e184" source="org.apache.commons.io.input.BOMInputStream.getBOM()" target="org.apache.commons.io.input.BOMInputStream#include">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e185" source="org.apache.commons.io.input.BOMInputStream#fbIndex" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e186" source="org.apache.commons.io.input.ProxyInputStream.mark(int)" target="org.apache.commons.io.input.BOMInputStream.mark(int)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e187" source="org.apache.commons.io.input.BOMInputStream#markFbIndex" target="org.apache.commons.io.input.BOMInputStream.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e188" source="org.apache.commons.io.input.BOMInputStream#fbIndex" target="org.apache.commons.io.input.BOMInputStream.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e189" source="org.apache.commons.io.input.BOMInputStream#markedAtStart" target="org.apache.commons.io.input.BOMInputStream.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e190" source="org.apache.commons.io.input.BOMInputStream.mark(int)" target="org.apache.commons.io.input.BOMInputStream#firstBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e191" source="org.apache.commons.io.input.BOMInputStream.mark(int)" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e192" source="org.apache.commons.io.input.ProxyInputStream.reset()" target="org.apache.commons.io.input.BOMInputStream.reset()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e193" source="org.apache.commons.io.input.BOMInputStream#fbIndex" target="org.apache.commons.io.input.BOMInputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e194" source="org.apache.commons.io.input.BOMInputStream#markFbIndex" target="org.apache.commons.io.input.BOMInputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e195" source="org.apache.commons.io.input.BOMInputStream.reset()" target="org.apache.commons.io.input.BOMInputStream#markedAtStart">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e196" source="org.apache.commons.io.input.BOMInputStream#firstBytes" target="org.apache.commons.io.input.BOMInputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e197" source="org.apache.commons.io.input.BOMInputStream.reset()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e198" source="org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream.assertCloseCalled()" target="org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream#_closeCalled">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e199" source="org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream#_closeCalled" target="org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e200" source="org.apache.commons.io.input.BOMInputStreamTest.createUtf16BeDataStream(byte[],boolean)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e201" source="org.apache.commons.io.input.BOMInputStreamTest.createUtf16LeDataStream(byte[],boolean)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e202" source="org.apache.commons.io.input.BOMInputStreamTest.createUtf32BeDataStream(byte[],boolean)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e203" source="org.apache.commons.io.input.BOMInputStreamTest.createUtf32LeDataStream(byte[],boolean)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e204" source="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e205" source="org.apache.commons.io.input.BOMInputStreamTest.assertData(byte[],byte[],int)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e206" source="org.apache.commons.io.input.BOMInputStreamTest.readBOMInputStreamTwice(java.lang.String)" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e207" source="org.apache.commons.io.input.BOMInputStreamTest.readBOMInputStreamTwice(java.lang.String)" target="org.apache.commons.io.input.BOMInputStream.mark(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e208" source="org.apache.commons.io.input.BOMInputStreamTest.readBOMInputStreamTwice(java.lang.String)" target="org.apache.commons.io.input.BOMInputStreamTest.readFile(org.apache.commons.io.input.BOMInputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e209" source="org.apache.commons.io.input.BOMInputStreamTest.readBOMInputStreamTwice(java.lang.String)" target="org.apache.commons.io.input.BOMInputStream.reset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e210" source="org.apache.commons.io.input.BOMInputStreamTest.readBOMInputStreamTwice(java.lang.String)" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e211" source="org.apache.commons.io.input.BOMInputStreamTest.readFile(org.apache.commons.io.input.BOMInputStream)" target="org.apache.commons.io.input.BOMInputStream.read(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e212" source="org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e213" source="org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e214" source="org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithoutBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e215" source="org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithoutBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e216" source="org.apache.commons.io.input.BOMInputStreamTest.testClose()" target="org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e217" source="org.apache.commons.io.input.BOMInputStreamTest.testClose()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e218" source="org.apache.commons.io.input.BOMInputStreamTest.testClose()" target="org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream.assertCloseCalled()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e219" source="org.apache.commons.io.input.BOMInputStreamTest.testClose()" target="org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e220" source="org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e221" source="org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e222" source="org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithoutBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e223" source="org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithoutBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e224" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e225" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e226" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e227" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()" target="org.apache.commons.io.input.BOMInputStream.hasBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e228" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()" target="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e229" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()" target="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e230" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e231" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()" target="org.apache.commons.io.ByteOrderMark#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e232" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e233" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e234" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()" target="org.apache.commons.io.input.BOMInputStream.hasBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e235" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()" target="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e236" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e237" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()" target="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e238" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e239" source="org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()" target="org.apache.commons.io.ByteOrderMark#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e240" source="org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e241" source="org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e242" source="org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.assertData(byte[],byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e243" source="org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithoutBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e244" source="org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithoutBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e245" source="org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithoutBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.assertData(byte[],byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e246" source="org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMBufferedRead()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e247" source="org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMBufferedRead()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e248" source="org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMBufferedRead()" target="org.apache.commons.io.input.BOMInputStreamTest.assertData(byte[],byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e249" source="org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMSingleRead()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e250" source="org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMSingleRead()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e251" source="org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e252" source="org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e253" source="org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithoutBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e254" source="org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithoutBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e255" source="org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e256" source="org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e257" source="org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithoutBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e258" source="org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithoutBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e259" source="org.apache.commons.io.input.BOMInputStreamTest.testNoBoms()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e260" source="org.apache.commons.io.input.BOMInputStreamTest.testNoBoms()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e261" source="org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e262" source="org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e263" source="org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()" target="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e264" source="org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()" target="org.apache.commons.io.input.BOMInputStream.hasBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e265" source="org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()" target="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e266" source="org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e267" source="org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e268" source="org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()" target="org.apache.commons.io.ByteOrderMark#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e269" source="org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e270" source="org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e271" source="org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()" target="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e272" source="org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()" target="org.apache.commons.io.input.BOMInputStream.hasBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e273" source="org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()" target="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e274" source="org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e275" source="org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e276" source="org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()" target="org.apache.commons.io.ByteOrderMark#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e277" source="org.apache.commons.io.input.BOMInputStreamTest.testReadTwiceWithBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.readBOMInputStreamTwice(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e278" source="org.apache.commons.io.input.BOMInputStreamTest.testReadTwiceWithoutBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.readBOMInputStreamTwice(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e279" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e280" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e281" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()" target="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e282" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()" target="org.apache.commons.io.input.BOMInputStream.hasBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e283" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()" target="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e284" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e285" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e286" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()" target="org.apache.commons.io.ByteOrderMark#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e287" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e288" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf16BeDataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e289" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()" target="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e290" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()" target="org.apache.commons.io.input.BOMInputStream.hasBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e291" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()" target="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e292" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e293" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e294" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()" target="org.apache.commons.io.Charsets#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e295" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()" target="org.apache.commons.io.ByteOrderMark#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e296" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()" target="org.apache.commons.io.ByteOrderMark#UTF_16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e297" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e298" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf16LeDataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e299" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()" target="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e300" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()" target="org.apache.commons.io.input.BOMInputStream.hasBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e301" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()" target="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e302" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e303" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e304" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()" target="org.apache.commons.io.Charsets#UTF_16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e305" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()" target="org.apache.commons.io.ByteOrderMark#UTF_16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e306" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()" target="org.apache.commons.io.ByteOrderMark#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e307" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e308" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf32BeDataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e309" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be()" target="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e310" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be()" target="org.apache.commons.io.input.BOMInputStream.hasBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e311" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be()" target="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e312" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e313" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e314" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be()" target="org.apache.commons.io.ByteOrderMark#UTF_32BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e315" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be()" target="org.apache.commons.io.ByteOrderMark#UTF_32LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e316" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e317" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf32LeDataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e318" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e319" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStream.hasBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e320" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e321" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e322" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e323" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le()" target="org.apache.commons.io.ByteOrderMark#UTF_32LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e324" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le()" target="org.apache.commons.io.ByteOrderMark#UTF_32BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e325" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e326" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e327" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()" target="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e328" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()" target="org.apache.commons.io.input.BOMInputStream.hasBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e329" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()" target="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e330" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e331" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e332" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e333" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()" target="org.apache.commons.io.ByteOrderMark#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e334" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()" target="org.apache.commons.io.ByteOrderMark#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e335" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e336" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e337" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()" target="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e338" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()" target="org.apache.commons.io.input.BOMInputStream.hasBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e339" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()" target="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e340" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e341" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e342" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()" target="org.apache.commons.io.ByteOrderMark#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e343" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()" target="org.apache.commons.io.ByteOrderMark#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e344" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e345" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e346" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()" target="org.apache.commons.io.input.BOMInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e347" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()" target="org.apache.commons.io.input.BOMInputStream.hasBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e348" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()" target="org.apache.commons.io.input.BOMInputStream.hasBOM(org.apache.commons.io.ByteOrderMark)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e349" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()" target="org.apache.commons.io.input.BOMInputStream.getBOM()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e350" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e351" source="org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()" target="org.apache.commons.io.ByteOrderMark#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e352" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs2()" target="org.apache.commons.io.input.BOMInputStreamTest.parseXml(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e353" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs2()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e354" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs2()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf16BeDataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e355" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs2()" target="org.apache.commons.io.ByteOrderMark#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e356" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs4()" target="org.apache.commons.io.input.BOMInputStreamTest.parseXml(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e357" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs4()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e358" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs4()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf32BeDataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e359" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs4()" target="org.apache.commons.io.ByteOrderMark#UTF_32BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e360" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Be()" target="org.apache.commons.io.input.BOMInputStreamTest.parseXml(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e361" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Be()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e362" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Be()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf16BeDataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e363" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Be()" target="org.apache.commons.io.Charsets#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e364" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Be()" target="org.apache.commons.io.ByteOrderMark#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e365" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Le()" target="org.apache.commons.io.input.BOMInputStreamTest.parseXml(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e366" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Le()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e367" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Le()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf16LeDataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e368" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Le()" target="org.apache.commons.io.Charsets#UTF_16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e369" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Le()" target="org.apache.commons.io.ByteOrderMark#UTF_16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e370" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Be()" target="org.apache.commons.io.input.BOMInputStreamTest.parseXml(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e371" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Be()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e372" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Be()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf32BeDataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e373" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Be()" target="org.apache.commons.io.input.BOMInputStreamTest.parseXml(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e374" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Be()" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e375" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Be()" target="org.apache.commons.io.ByteOrderMark#UTF_32BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e376" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStreamTest.parseXml(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e377" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e378" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf32LeDataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e379" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStreamTest.parseXml(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e380" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Le()" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e381" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Le()" target="org.apache.commons.io.ByteOrderMark#UTF_32LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e382" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf8()" target="org.apache.commons.io.input.BOMInputStreamTest.parseXml(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e383" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf8()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e384" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf8()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e385" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf8()" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e386" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithoutBOMUtf32Be()" target="org.apache.commons.io.input.BOMInputStreamTest.parseXml(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e387" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithoutBOMUtf32Be()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e388" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithoutBOMUtf32Be()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf32BeDataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e389" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithoutBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStreamTest.parseXml(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e390" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithoutBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e391" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithoutBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf32LeDataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e392" source="org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithoutBOMUtf32Le()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf32BeDataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e393" source="org.apache.commons.io.input.BOMInputStreamTest.testSkipWithBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e394" source="org.apache.commons.io.input.BOMInputStreamTest.testSkipWithBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e395" source="org.apache.commons.io.input.BOMInputStreamTest.testSkipWithoutBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e396" source="org.apache.commons.io.input.BOMInputStreamTest.testSkipWithoutBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e397" source="org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e398" source="org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e399" source="org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.assertData(byte[],byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e400" source="org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithoutBOM()" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e401" source="org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithoutBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e402" source="org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithoutBOM()" target="org.apache.commons.io.input.BOMInputStreamTest.assertData(byte[],byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e403" source="org.apache.commons.io.input.BOMInputStreamTest.testSupportCode()" target="org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e404" source="org.apache.commons.io.input.BOMInputStreamTest.testSupportCode()" target="org.apache.commons.io.input.BOMInputStreamTest.assertData(byte[],byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e405" source="org.apache.commons.io.input.BoundedInputStream(java.io.InputStream)" target="org.apache.commons.io.input.BoundedInputStream(java.io.InputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e406" source="org.apache.commons.io.input.BoundedInputStream(java.io.InputStream)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e407" source="org.apache.commons.io.input.BoundedInputStream#max" target="org.apache.commons.io.input.BoundedInputStream(java.io.InputStream,long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e408" source="org.apache.commons.io.input.BoundedInputStream#in" target="org.apache.commons.io.input.BoundedInputStream(java.io.InputStream,long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e409" source="org.apache.commons.io.input.BoundedInputStream.isPropagateClose()" target="org.apache.commons.io.input.BoundedInputStream#propagateClose">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e410" source="org.apache.commons.io.input.BoundedInputStream.markSupported()" target="org.apache.commons.io.input.BoundedInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e411" source="org.apache.commons.io.input.BoundedInputStream.available()" target="org.apache.commons.io.input.BoundedInputStream#max">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e412" source="org.apache.commons.io.input.BoundedInputStream.available()" target="org.apache.commons.io.input.BoundedInputStream#pos">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e413" source="org.apache.commons.io.input.BoundedInputStream.available()" target="org.apache.commons.io.input.BoundedInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e414" source="org.apache.commons.io.input.BoundedInputStream.read()" target="org.apache.commons.io.input.BoundedInputStream#max">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e415" source="org.apache.commons.io.input.BoundedInputStream.read()" target="org.apache.commons.io.input.BoundedInputStream#pos">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e416" source="org.apache.commons.io.input.BoundedInputStream.read()" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e417" source="org.apache.commons.io.input.BoundedInputStream.read()" target="org.apache.commons.io.input.BoundedInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e418" source="org.apache.commons.io.input.BoundedInputStream.read(byte[])" target="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e419" source="org.apache.commons.io.input.BoundedInputStream.read(byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e420" source="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.BoundedInputStream#max">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e421" source="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.BoundedInputStream#pos">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e422" source="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e423" source="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.BoundedInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e424" source="org.apache.commons.io.input.BoundedInputStream#pos" target="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e425" source="org.apache.commons.io.input.BoundedInputStream.toString()" target="org.apache.commons.io.input.BoundedInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e426" source="org.apache.commons.io.input.BoundedInputStream.skip(long)" target="org.apache.commons.io.input.BoundedInputStream#max">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e427" source="org.apache.commons.io.input.BoundedInputStream.skip(long)" target="org.apache.commons.io.input.BoundedInputStream#pos">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e428" source="org.apache.commons.io.input.BoundedInputStream.skip(long)" target="org.apache.commons.io.input.BoundedInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e429" source="org.apache.commons.io.input.BoundedInputStream#pos" target="org.apache.commons.io.input.BoundedInputStream.skip(long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e430" source="org.apache.commons.io.input.BoundedInputStream.close()" target="org.apache.commons.io.input.BoundedInputStream#propagateClose">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e431" source="org.apache.commons.io.input.BoundedInputStream.close()" target="org.apache.commons.io.input.BoundedInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e432" source="org.apache.commons.io.input.BoundedInputStream.mark(int)" target="org.apache.commons.io.input.BoundedInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e433" source="org.apache.commons.io.input.BoundedInputStream#mark" target="org.apache.commons.io.input.BoundedInputStream.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e434" source="org.apache.commons.io.input.BoundedInputStream#pos" target="org.apache.commons.io.input.BoundedInputStream.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e435" source="org.apache.commons.io.input.BoundedInputStream.reset()" target="org.apache.commons.io.input.BoundedInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e436" source="org.apache.commons.io.input.BoundedInputStream#pos" target="org.apache.commons.io.input.BoundedInputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e437" source="org.apache.commons.io.input.BoundedInputStream#mark" target="org.apache.commons.io.input.BoundedInputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e438" source="org.apache.commons.io.input.BoundedInputStream#propagateClose" target="org.apache.commons.io.input.BoundedInputStream.setPropagateClose(boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e439" source="org.apache.commons.io.input.BoundedInputStreamTest.compare(java.lang.String,byte[],byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e440" source="org.apache.commons.io.input.BoundedInputStreamTest.testReadArray()" target="org.apache.commons.io.input.BoundedInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e441" source="org.apache.commons.io.input.BoundedInputStreamTest.testReadArray()" target="org.apache.commons.io.input.BoundedInputStreamTest.compare(java.lang.String,byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e442" source="org.apache.commons.io.input.BoundedInputStreamTest.testReadArray()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e443" source="org.apache.commons.io.input.BoundedInputStreamTest.testReadArray()" target="org.apache.commons.io.input.BoundedInputStream(java.io.InputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e444" source="org.apache.commons.io.input.BoundedInputStreamTest.testReadArray()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e445" source="org.apache.commons.io.input.BoundedInputStreamTest.testReadSingle()" target="org.apache.commons.io.input.BoundedInputStream(java.io.InputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e446" source="org.apache.commons.io.input.BoundedInputStreamTest.testReadSingle()" target="org.apache.commons.io.input.BoundedInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e447" source="org.apache.commons.io.input.BoundedInputStreamTest.testReadSingle()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e448" source="org.apache.commons.io.input.BoundedReader#target" target="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e449" source="org.apache.commons.io.input.BoundedReader#maxCharsFromTargetReader" target="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e450" source="org.apache.commons.io.input.BoundedReader.read()" target="org.apache.commons.io.input.BoundedReader#charsRead">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e451" source="org.apache.commons.io.input.BoundedReader.read()" target="org.apache.commons.io.input.BoundedReader#maxCharsFromTargetReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e452" source="org.apache.commons.io.input.BoundedReader.read()" target="org.apache.commons.io.input.BoundedReader#markedAt">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e453" source="org.apache.commons.io.input.BoundedReader.read()" target="org.apache.commons.io.input.BoundedReader#readAheadLimit">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e454" source="org.apache.commons.io.input.BoundedReader.read()" target="org.apache.commons.io.input.BoundedReader#target">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e455" source="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" target="org.apache.commons.io.input.BoundedReader.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e456" source="org.apache.commons.io.input.BoundedReader.close()" target="org.apache.commons.io.input.BoundedReader#target">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e457" source="org.apache.commons.io.input.BoundedReader#readAheadLimit" target="org.apache.commons.io.input.BoundedReader.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e458" source="org.apache.commons.io.input.BoundedReader.mark(int)" target="org.apache.commons.io.input.BoundedReader#charsRead">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e459" source="org.apache.commons.io.input.BoundedReader#markedAt" target="org.apache.commons.io.input.BoundedReader.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e460" source="org.apache.commons.io.input.BoundedReader#charsRead" target="org.apache.commons.io.input.BoundedReader.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e461" source="org.apache.commons.io.input.BoundedReader.mark(int)" target="org.apache.commons.io.input.BoundedReader#target">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e462" source="org.apache.commons.io.input.BoundedReader#charsRead" target="org.apache.commons.io.input.BoundedReader.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e463" source="org.apache.commons.io.input.BoundedReader#markedAt" target="org.apache.commons.io.input.BoundedReader.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e464" source="org.apache.commons.io.input.BoundedReader.reset()" target="org.apache.commons.io.input.BoundedReader#target">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e465" source="org.apache.commons.io.input.BoundedReaderTest.closeTest()" target="org.apache.commons.io.input.BoundedReaderTest$1(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e466" source="org.apache.commons.io.input.BoundedReaderTest.closeTest()" target="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e467" source="org.apache.commons.io.input.BoundedReaderTest.closeTest()" target="org.apache.commons.io.input.BoundedReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e468" source="org.apache.commons.io.input.BoundedReaderTest.markReset()" target="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e469" source="org.apache.commons.io.input.BoundedReaderTest.markReset()" target="org.apache.commons.io.input.BoundedReader.mark(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e470" source="org.apache.commons.io.input.BoundedReaderTest.markReset()" target="org.apache.commons.io.input.BoundedReader.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e471" source="org.apache.commons.io.input.BoundedReaderTest.markReset()" target="org.apache.commons.io.input.BoundedReader.reset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e472" source="org.apache.commons.io.input.BoundedReaderTest.markReset()" target="org.apache.commons.io.input.BoundedReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e473" source="org.apache.commons.io.input.BoundedReaderTest.markReset()" target="org.apache.commons.io.input.BoundedReaderTest#sr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e474" source="org.apache.commons.io.input.BoundedReaderTest.markResetFromOffset1()" target="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e475" source="org.apache.commons.io.input.BoundedReaderTest.markResetFromOffset1()" target="org.apache.commons.io.input.BoundedReader.mark(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e476" source="org.apache.commons.io.input.BoundedReaderTest.markResetFromOffset1()" target="org.apache.commons.io.input.BoundedReader.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e477" source="org.apache.commons.io.input.BoundedReaderTest.markResetFromOffset1()" target="org.apache.commons.io.input.BoundedReader.reset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e478" source="org.apache.commons.io.input.BoundedReaderTest.markResetFromOffset1()" target="org.apache.commons.io.input.BoundedReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e479" source="org.apache.commons.io.input.BoundedReaderTest.markResetFromOffset1()" target="org.apache.commons.io.input.BoundedReaderTest#sr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e480" source="org.apache.commons.io.input.BoundedReaderTest.markResetMarkMore()" target="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e481" source="org.apache.commons.io.input.BoundedReaderTest.markResetMarkMore()" target="org.apache.commons.io.input.BoundedReader.mark(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e482" source="org.apache.commons.io.input.BoundedReaderTest.markResetMarkMore()" target="org.apache.commons.io.input.BoundedReader.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e483" source="org.apache.commons.io.input.BoundedReaderTest.markResetMarkMore()" target="org.apache.commons.io.input.BoundedReader.reset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e484" source="org.apache.commons.io.input.BoundedReaderTest.markResetMarkMore()" target="org.apache.commons.io.input.BoundedReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e485" source="org.apache.commons.io.input.BoundedReaderTest.markResetMarkMore()" target="org.apache.commons.io.input.BoundedReaderTest#sr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e486" source="org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMax()" target="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e487" source="org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMax()" target="org.apache.commons.io.input.BoundedReader.mark(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e488" source="org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMax()" target="org.apache.commons.io.input.BoundedReader.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e489" source="org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMax()" target="org.apache.commons.io.input.BoundedReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e490" source="org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMax()" target="org.apache.commons.io.input.BoundedReaderTest#sr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e491" source="org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset()" target="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e492" source="org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset()" target="org.apache.commons.io.input.BoundedReader.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e493" source="org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset()" target="org.apache.commons.io.input.BoundedReader.mark(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e494" source="org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset()" target="org.apache.commons.io.input.BoundedReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e495" source="org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset()" target="org.apache.commons.io.input.BoundedReaderTest#sr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e496" source="org.apache.commons.io.input.BoundedReaderTest.readMulti()" target="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e497" source="org.apache.commons.io.input.BoundedReaderTest.readMulti()" target="org.apache.commons.io.input.BoundedReader.read(char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e498" source="org.apache.commons.io.input.BoundedReaderTest.readMulti()" target="org.apache.commons.io.input.BoundedReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e499" source="org.apache.commons.io.input.BoundedReaderTest.readMulti()" target="org.apache.commons.io.input.BoundedReaderTest#sr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e500" source="org.apache.commons.io.input.BoundedReaderTest.readMulti()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e501" source="org.apache.commons.io.input.BoundedReaderTest.readMultiWithOffset()" target="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e502" source="org.apache.commons.io.input.BoundedReaderTest.readMultiWithOffset()" target="org.apache.commons.io.input.BoundedReader.read(char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e503" source="org.apache.commons.io.input.BoundedReaderTest.readMultiWithOffset()" target="org.apache.commons.io.input.BoundedReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e504" source="org.apache.commons.io.input.BoundedReaderTest.readMultiWithOffset()" target="org.apache.commons.io.input.BoundedReaderTest#sr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e505" source="org.apache.commons.io.input.BoundedReaderTest.readMultiWithOffset()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e506" source="org.apache.commons.io.input.BoundedReaderTest.readTillEnd()" target="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e507" source="org.apache.commons.io.input.BoundedReaderTest.readTillEnd()" target="org.apache.commons.io.input.BoundedReader.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e508" source="org.apache.commons.io.input.BoundedReaderTest.readTillEnd()" target="org.apache.commons.io.input.BoundedReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e509" source="org.apache.commons.io.input.BoundedReaderTest.readTillEnd()" target="org.apache.commons.io.input.BoundedReaderTest#sr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e510" source="org.apache.commons.io.input.BoundedReaderTest.shortReader()" target="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e511" source="org.apache.commons.io.input.BoundedReaderTest.shortReader()" target="org.apache.commons.io.input.BoundedReader.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e512" source="org.apache.commons.io.input.BoundedReaderTest.shortReader()" target="org.apache.commons.io.input.BoundedReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e513" source="org.apache.commons.io.input.BoundedReaderTest.shortReader()" target="org.apache.commons.io.input.BoundedReaderTest#shortReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e514" source="org.apache.commons.io.input.BoundedReaderTest.skipTest()" target="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e515" source="org.apache.commons.io.input.BoundedReaderTest.skipTest()" target="org.apache.commons.io.input.BoundedReader.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e516" source="org.apache.commons.io.input.BoundedReaderTest.skipTest()" target="org.apache.commons.io.input.BoundedReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e517" source="org.apache.commons.io.input.BoundedReaderTest.skipTest()" target="org.apache.commons.io.input.BoundedReaderTest#sr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e518" source="org.apache.commons.io.input.BrokenInputStream()" target="org.apache.commons.io.input.BrokenInputStream(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e519" source="org.apache.commons.io.input.BrokenInputStream#exception" target="org.apache.commons.io.input.BrokenInputStream(java.io.IOException)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e520" source="org.apache.commons.io.input.BrokenInputStream.available()" target="org.apache.commons.io.input.BrokenInputStream#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e521" source="org.apache.commons.io.input.BrokenInputStream.read()" target="org.apache.commons.io.input.BrokenInputStream#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e522" source="org.apache.commons.io.input.BrokenInputStream.skip(long)" target="org.apache.commons.io.input.BrokenInputStream#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e523" source="org.apache.commons.io.input.BrokenInputStream.close()" target="org.apache.commons.io.input.BrokenInputStream#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e524" source="org.apache.commons.io.input.BrokenInputStream.reset()" target="org.apache.commons.io.input.BrokenInputStream#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e525" source="org.apache.commons.io.input.BrokenInputStreamTest.setUp()" target="org.apache.commons.io.input.BrokenInputStream(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e526" source="org.apache.commons.io.input.BrokenInputStreamTest#exception" target="org.apache.commons.io.input.BrokenInputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e527" source="org.apache.commons.io.input.BrokenInputStreamTest#stream" target="org.apache.commons.io.input.BrokenInputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e528" source="org.apache.commons.io.input.BrokenInputStreamTest.setUp()" target="org.apache.commons.io.input.BrokenInputStreamTest#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e529" source="org.apache.commons.io.input.BrokenInputStreamTest.testAvailable()" target="org.apache.commons.io.input.BrokenInputStreamTest#stream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e530" source="org.apache.commons.io.input.BrokenInputStreamTest.testAvailable()" target="org.apache.commons.io.input.BrokenInputStreamTest#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e531" source="org.apache.commons.io.input.BrokenInputStreamTest.testClose()" target="org.apache.commons.io.input.BrokenInputStreamTest#stream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e532" source="org.apache.commons.io.input.BrokenInputStreamTest.testClose()" target="org.apache.commons.io.input.BrokenInputStreamTest#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e533" source="org.apache.commons.io.input.BrokenInputStreamTest.testRead()" target="org.apache.commons.io.input.BrokenInputStreamTest#stream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e534" source="org.apache.commons.io.input.BrokenInputStreamTest.testRead()" target="org.apache.commons.io.input.BrokenInputStreamTest#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e535" source="org.apache.commons.io.input.BrokenInputStreamTest.testReset()" target="org.apache.commons.io.input.BrokenInputStreamTest#stream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e536" source="org.apache.commons.io.input.BrokenInputStreamTest.testReset()" target="org.apache.commons.io.input.BrokenInputStreamTest#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e537" source="org.apache.commons.io.input.BrokenInputStreamTest.testSkip()" target="org.apache.commons.io.input.BrokenInputStreamTest#stream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e538" source="org.apache.commons.io.input.BrokenInputStreamTest.testSkip()" target="org.apache.commons.io.input.BrokenInputStreamTest#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e539" source="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e540" source="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream#BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e541" source="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String,int)" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e542" source="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset)" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e543" source="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset)" target="org.apache.commons.io.input.CharSequenceInputStream#BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e544" source="org.apache.commons.io.input.CharSequenceInputStream#encoder" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e545" source="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" target="java.nio.charset.CodingErrorAction#REPLACE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e546" source="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" target="org.apache.commons.io.input.CharSequenceInputStream#encoder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e547" source="org.apache.commons.io.input.CharSequenceInputStream#bbuf" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e548" source="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" target="org.apache.commons.io.input.CharSequenceInputStream#bbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e549" source="org.apache.commons.io.input.CharSequenceInputStream#cbuf" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e550" source="org.apache.commons.io.input.CharSequenceInputStream#mark_cbuf" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e551" source="org.apache.commons.io.input.CharSequenceInputStream#NO_MARK" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e552" source="org.apache.commons.io.input.CharSequenceInputStream#mark_bbuf" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e553" source="org.apache.commons.io.input.CharSequenceInputStream.available()" target="org.apache.commons.io.input.CharSequenceInputStream#bbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e554" source="org.apache.commons.io.input.CharSequenceInputStream.available()" target="org.apache.commons.io.input.CharSequenceInputStream#cbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e555" source="org.apache.commons.io.input.CharSequenceInputStream.read()" target="org.apache.commons.io.input.CharSequenceInputStream.fillBuffer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e556" source="org.apache.commons.io.input.CharSequenceInputStream.read()" target="org.apache.commons.io.input.CharSequenceInputStream#bbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e557" source="org.apache.commons.io.input.CharSequenceInputStream.read()" target="org.apache.commons.io.input.CharSequenceInputStream#cbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e558" source="org.apache.commons.io.input.CharSequenceInputStream.read()" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e559" source="org.apache.commons.io.input.CharSequenceInputStream.read(byte[])" target="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e560" source="org.apache.commons.io.input.CharSequenceInputStream.read(byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e561" source="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.CharSequenceInputStream.fillBuffer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e562" source="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e563" source="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.CharSequenceInputStream#bbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e564" source="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.CharSequenceInputStream#cbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e565" source="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e566" source="org.apache.commons.io.input.CharSequenceInputStream.skip(long)" target="org.apache.commons.io.input.CharSequenceInputStream.available()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e567" source="org.apache.commons.io.input.CharSequenceInputStream.skip(long)" target="org.apache.commons.io.input.CharSequenceInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e568" source="org.apache.commons.io.input.CharSequenceInputStream.fillBuffer()" target="org.apache.commons.io.input.CharSequenceInputStream#bbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e569" source="org.apache.commons.io.input.CharSequenceInputStream.fillBuffer()" target="org.apache.commons.io.input.CharSequenceInputStream#encoder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e570" source="org.apache.commons.io.input.CharSequenceInputStream.fillBuffer()" target="org.apache.commons.io.input.CharSequenceInputStream#cbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e571" source="org.apache.commons.io.input.CharSequenceInputStream#mark_cbuf" target="org.apache.commons.io.input.CharSequenceInputStream.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e572" source="org.apache.commons.io.input.CharSequenceInputStream.mark(int)" target="org.apache.commons.io.input.CharSequenceInputStream#cbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e573" source="org.apache.commons.io.input.CharSequenceInputStream#mark_bbuf" target="org.apache.commons.io.input.CharSequenceInputStream.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e574" source="org.apache.commons.io.input.CharSequenceInputStream.mark(int)" target="org.apache.commons.io.input.CharSequenceInputStream#bbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e575" source="org.apache.commons.io.input.CharSequenceInputStream.reset()" target="org.apache.commons.io.input.CharSequenceInputStream.fillBuffer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e576" source="org.apache.commons.io.input.CharSequenceInputStream.reset()" target="org.apache.commons.io.input.CharSequenceInputStream#mark_cbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e577" source="org.apache.commons.io.input.CharSequenceInputStream.reset()" target="org.apache.commons.io.input.CharSequenceInputStream#NO_MARK">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e578" source="org.apache.commons.io.input.CharSequenceInputStream.reset()" target="org.apache.commons.io.input.CharSequenceInputStream#cbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e579" source="org.apache.commons.io.input.CharSequenceInputStream.reset()" target="org.apache.commons.io.input.CharSequenceInputStream#encoder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e580" source="org.apache.commons.io.input.CharSequenceInputStream.reset()" target="org.apache.commons.io.input.CharSequenceInputStream#bbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e581" source="org.apache.commons.io.input.CharSequenceInputStream.reset()" target="org.apache.commons.io.input.CharSequenceInputStream#mark_bbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e582" source="org.apache.commons.io.input.CharSequenceInputStream#mark_cbuf" target="org.apache.commons.io.input.CharSequenceInputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e583" source="org.apache.commons.io.input.CharSequenceInputStream#NO_MARK" target="org.apache.commons.io.input.CharSequenceInputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e584" source="org.apache.commons.io.input.CharSequenceInputStream#mark_bbuf" target="org.apache.commons.io.input.CharSequenceInputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e585" source="org.apache.commons.io.input.CharSequenceInputStreamTest.getRequiredCharsetNames()" target="org.apache.commons.io.Charsets.requiredCharsets()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e586" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailable()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.isAvailabilityTestableForCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e587" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailable()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableSkip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e588" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailable()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableRead(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e589" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableRead(java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e590" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableRead(java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStreamTest.checkAvail(java.io.InputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e591" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableSkip(java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e592" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableSkip(java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStreamTest.checkAvail(java.io.InputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e593" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead(java.lang.String,java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e594" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead(java.lang.String,java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStreamTest#random">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e595" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead(java.lang.String,java.lang.String)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e596" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_AvailableCharset()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.isAvailabilityTestableForCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e597" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_AvailableCharset()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e598" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_AvailableCharset()" target="org.apache.commons.io.input.CharSequenceInputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e599" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_RequiredCharset()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.getRequiredCharsetNames()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e600" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_RequiredCharset()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e601" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_RequiredCharset()" target="org.apache.commons.io.input.CharSequenceInputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e602" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e603" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e604" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop(java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e605" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.getRequiredCharsetNames()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e606" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e607" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e608" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e609" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream.mark(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e610" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream.read(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e611" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream.reset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e612" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e613" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStreamTest#ALPHABET">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e614" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S0_UTF16()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e615" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S0_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e616" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S1_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e617" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S2_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e618" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D13_S0_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e619" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D13_S1_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e620" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D20_S0_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e621" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop(java.lang.String,int)" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e622" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF16()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e623" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e624" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeBufferedRead_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.getRequiredCharsetNames()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e625" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeBufferedRead_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e626" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeBufferedRead_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest#LARGE_TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e627" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeBufferedRead_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e628" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeBufferedRead_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest#LARGE_TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e629" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeSingleByteRead_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.getRequiredCharsetNames()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e630" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeSingleByteRead_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e631" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeSingleByteRead_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest#LARGE_TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e632" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeSingleByteRead_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e633" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeSingleByteRead_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest#LARGE_TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e634" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset(java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e635" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.getRequiredCharsetNames()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e636" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e637" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_USASCII()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e638" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e639" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkSupported()" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e640" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero(java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e641" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero_EmptyString()" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e642" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.getRequiredCharsetNames()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e643" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e644" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead(java.lang.String,java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e645" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.getRequiredCharsetNames()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e646" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e647" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e648" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_UTF16()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e649" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_UTF16()" target="org.apache.commons.io.input.CharSequenceInputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e650" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e651" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e652" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip(java.lang.String)" target="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e653" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.getRequiredCharsetNames()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e654" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_RequiredCharsets()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e655" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_USASCII()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e656" source="org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_UTF8()" target="org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e657" source="org.apache.commons.io.input.CharSequenceReader#charSequence" target="org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e658" source="org.apache.commons.io.input.CharSequenceReader.read()" target="org.apache.commons.io.input.CharSequenceReader#idx">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e659" source="org.apache.commons.io.input.CharSequenceReader.read()" target="org.apache.commons.io.input.CharSequenceReader#charSequence">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e660" source="org.apache.commons.io.input.CharSequenceReader.read()" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e661" source="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" target="org.apache.commons.io.input.CharSequenceReader.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e662" source="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" target="org.apache.commons.io.input.CharSequenceReader#idx">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e663" source="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" target="org.apache.commons.io.input.CharSequenceReader#charSequence">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e664" source="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e665" source="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e666" source="org.apache.commons.io.input.CharSequenceReader.toString()" target="org.apache.commons.io.input.CharSequenceReader#charSequence">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e667" source="org.apache.commons.io.input.CharSequenceReader.skip(long)" target="org.apache.commons.io.input.CharSequenceReader#idx">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e668" source="org.apache.commons.io.input.CharSequenceReader.skip(long)" target="org.apache.commons.io.input.CharSequenceReader#charSequence">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e669" source="org.apache.commons.io.input.CharSequenceReader.skip(long)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e670" source="org.apache.commons.io.input.CharSequenceReader#idx" target="org.apache.commons.io.input.CharSequenceReader.skip(long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e671" source="org.apache.commons.io.input.CharSequenceReader#idx" target="org.apache.commons.io.input.CharSequenceReader.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e672" source="org.apache.commons.io.input.CharSequenceReader#mark" target="org.apache.commons.io.input.CharSequenceReader.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e673" source="org.apache.commons.io.input.CharSequenceReader#mark" target="org.apache.commons.io.input.CharSequenceReader.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e674" source="org.apache.commons.io.input.CharSequenceReader#idx" target="org.apache.commons.io.input.CharSequenceReader.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e675" source="org.apache.commons.io.input.CharSequenceReader#idx" target="org.apache.commons.io.input.CharSequenceReader.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e676" source="org.apache.commons.io.input.CharSequenceReader#mark" target="org.apache.commons.io.input.CharSequenceReader.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e677" source="org.apache.commons.io.input.CharSequenceReaderTest.checkArray(char[],char[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e678" source="org.apache.commons.io.input.CharSequenceReaderTest.testClose()" target="org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e679" source="org.apache.commons.io.input.CharSequenceReaderTest.testClose()" target="org.apache.commons.io.input.CharSequenceReaderTest.checkRead(java.io.Reader,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e680" source="org.apache.commons.io.input.CharSequenceReaderTest.testMark()" target="org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e681" source="org.apache.commons.io.input.CharSequenceReaderTest.testMark()" target="org.apache.commons.io.input.CharSequenceReaderTest.checkRead(java.io.Reader,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e682" source="org.apache.commons.io.input.CharSequenceReaderTest.testMarkSupported()" target="org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e683" source="org.apache.commons.io.input.CharSequenceReaderTest.testRead()" target="org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e684" source="org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArray()" target="org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e685" source="org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArray()" target="org.apache.commons.io.input.CharSequenceReaderTest.checkArray(char[],char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e686" source="org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArray()" target="org.apache.commons.io.input.CharSequenceReaderTest#NONE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e687" source="org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArrayPortion()" target="org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e688" source="org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArrayPortion()" target="org.apache.commons.io.input.CharSequenceReaderTest.checkArray(char[],char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e689" source="org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArrayPortion()" target="org.apache.commons.io.input.CharSequenceReaderTest#NONE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e690" source="org.apache.commons.io.input.CharSequenceReaderTest.testSkip()" target="org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e691" source="org.apache.commons.io.input.CharSequenceReaderTest.testSkip()" target="org.apache.commons.io.input.CharSequenceReaderTest.checkRead(java.io.Reader,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e692" source="org.apache.commons.io.input.ClassLoaderObjectInputStream#classLoader" target="org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e693" source="org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass)" target="org.apache.commons.io.input.ClassLoaderObjectInputStream#classLoader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e694" source="org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass(java.lang.String[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e695" source="org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass(java.lang.String[])" target="org.apache.commons.io.input.ClassLoaderObjectInputStream#classLoader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e696" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test#i" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test(int,java.lang.Object)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e697" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test#e" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test(int,java.lang.Object)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e698" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E#A" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test(int,java.lang.Object)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e699" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test#o" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test(int,java.lang.Object)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e700" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equalObject(java.lang.Object)" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test#o">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e701" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equals(java.lang.Object)" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equalObject(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e702" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equals(java.lang.Object)" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test#i">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e703" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equals(java.lang.Object)" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test#e">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e704" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equals(java.lang.Object)" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test#o">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e705" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E#A" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e706" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E#B" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e707" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E#C" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e708" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()" target="org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e709" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()" target="java.lang.Boolean#FALSE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e710" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testLong()" target="org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e711" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testObject1()" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test(int,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e712" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testObject1()" target="org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e713" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testObject2()" target="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test(int,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e714" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testObject2()" target="org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e715" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testPrimitiveLong()" target="org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e716" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testResolveProxyClass()" target="org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e717" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testResolveProxyClass()" target="org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e718" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testResolveProxyClass()" target="java.lang.Boolean#FALSE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e719" source="org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testResolveProxyClass()" target="java.lang.Comparable#class">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e720" source="org.apache.commons.io.input.CloseShieldInputStream(java.io.InputStream)" target="org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e721" source="org.apache.commons.io.input.ProxyInputStream.close()" target="org.apache.commons.io.input.CloseShieldInputStream.close()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e722" source="org.apache.commons.io.input.CloseShieldInputStream.close()" target="org.apache.commons.io.input.ClosedInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e723" source="java.io.FilterInputStream#in" target="org.apache.commons.io.input.CloseShieldInputStream.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e724" source="org.apache.commons.io.input.CloseShieldInputStreamTest#closed" target="org.apache.commons.io.input.CloseShieldInputStreamTest$1.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e725" source="org.apache.commons.io.input.CloseShieldInputStreamTest.setUp()" target="org.apache.commons.io.input.CloseShieldInputStreamTest$1(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e726" source="org.apache.commons.io.input.CloseShieldInputStreamTest.setUp()" target="org.apache.commons.io.input.CloseShieldInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e727" source="org.apache.commons.io.input.CloseShieldInputStreamTest#data" target="org.apache.commons.io.input.CloseShieldInputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e728" source="org.apache.commons.io.input.CloseShieldInputStreamTest#original" target="org.apache.commons.io.input.CloseShieldInputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e729" source="org.apache.commons.io.input.CloseShieldInputStreamTest.setUp()" target="org.apache.commons.io.input.CloseShieldInputStreamTest#data">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e730" source="org.apache.commons.io.input.CloseShieldInputStreamTest#closed" target="org.apache.commons.io.input.CloseShieldInputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e731" source="org.apache.commons.io.input.CloseShieldInputStreamTest#shielded" target="org.apache.commons.io.input.CloseShieldInputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e732" source="org.apache.commons.io.input.CloseShieldInputStreamTest.setUp()" target="org.apache.commons.io.input.CloseShieldInputStreamTest#original">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e733" source="org.apache.commons.io.input.CloseShieldInputStreamTest.testClose()" target="org.apache.commons.io.input.CloseShieldInputStreamTest#shielded">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e734" source="org.apache.commons.io.input.CloseShieldInputStreamTest.testClose()" target="org.apache.commons.io.input.CloseShieldInputStreamTest#closed">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e735" source="org.apache.commons.io.input.CloseShieldInputStreamTest.testClose()" target="org.apache.commons.io.input.CloseShieldInputStreamTest#data">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e736" source="org.apache.commons.io.input.CloseShieldInputStreamTest.testClose()" target="org.apache.commons.io.input.CloseShieldInputStreamTest#original">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e737" source="org.apache.commons.io.input.ClosedInputStream#CLOSED_INPUT_STREAM" target="org.apache.commons.io.input.ClosedInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e738" source="org.apache.commons.io.input.ClosedInputStream.read()" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e739" source="org.apache.commons.io.input.ClosedInputStreamTest.testRead()" target="org.apache.commons.io.input.ClosedInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e740" source="org.apache.commons.io.input.ClosedInputStreamTest.testRead()" target="org.apache.commons.io.input.ClosedInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e741" source="org.apache.commons.io.input.CountingInputStream(java.io.InputStream)" target="org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e742" source="org.apache.commons.io.input.CountingInputStream.getCount()" target="org.apache.commons.io.input.CountingInputStream.getByteCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e743" source="org.apache.commons.io.input.CountingInputStream.getCount()" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e744" source="org.apache.commons.io.input.CountingInputStream.resetCount()" target="org.apache.commons.io.input.CountingInputStream.resetByteCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e745" source="org.apache.commons.io.input.CountingInputStream.resetCount()" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e746" source="org.apache.commons.io.input.CountingInputStream.getByteCount()" target="org.apache.commons.io.input.CountingInputStream#count">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e747" source="org.apache.commons.io.input.CountingInputStream.resetByteCount()" target="org.apache.commons.io.input.CountingInputStream#count">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e748" source="org.apache.commons.io.input.CountingInputStream#count" target="org.apache.commons.io.input.CountingInputStream.resetByteCount()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e749" source="org.apache.commons.io.input.ProxyInputStream.skip(long)" target="org.apache.commons.io.input.CountingInputStream.skip(long)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e750" source="org.apache.commons.io.input.CountingInputStream.skip(long)" target="org.apache.commons.io.input.ProxyInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e751" source="org.apache.commons.io.input.CountingInputStream#count" target="org.apache.commons.io.input.CountingInputStream.skip(long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e752" source="org.apache.commons.io.input.ProxyInputStream.afterRead(int)" target="org.apache.commons.io.input.CountingInputStream.afterRead(int)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e753" source="org.apache.commons.io.input.CountingInputStream.afterRead(int)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e754" source="org.apache.commons.io.input.CountingInputStream#count" target="org.apache.commons.io.input.CountingInputStream.afterRead(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e755" source="org.apache.commons.io.input.CountingInputStreamTest.testCounting()" target="org.apache.commons.io.input.CountingInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e756" source="org.apache.commons.io.input.CountingInputStreamTest.testCounting()" target="org.apache.commons.io.input.ProxyInputStream.read(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e757" source="org.apache.commons.io.input.CountingInputStreamTest.testCounting()" target="org.apache.commons.io.input.CountingInputStream.getCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e758" source="org.apache.commons.io.input.CountingInputStreamTest.testCounting()" target="org.apache.commons.io.input.ProxyInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e759" source="org.apache.commons.io.input.CountingInputStreamTest.testCounting()" target="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e760" source="org.apache.commons.io.input.CountingInputStreamTest.testCounting()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e761" source="org.apache.commons.io.input.CountingInputStreamTest.testEOF1()" target="org.apache.commons.io.input.CountingInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e762" source="org.apache.commons.io.input.CountingInputStreamTest.testEOF1()" target="org.apache.commons.io.input.ProxyInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e763" source="org.apache.commons.io.input.CountingInputStreamTest.testEOF1()" target="org.apache.commons.io.input.CountingInputStream.getCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e764" source="org.apache.commons.io.input.CountingInputStreamTest.testEOF1()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e765" source="org.apache.commons.io.input.CountingInputStreamTest.testEOF2()" target="org.apache.commons.io.input.CountingInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e766" source="org.apache.commons.io.input.CountingInputStreamTest.testEOF2()" target="org.apache.commons.io.input.ProxyInputStream.read(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e767" source="org.apache.commons.io.input.CountingInputStreamTest.testEOF2()" target="org.apache.commons.io.input.CountingInputStream.getCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e768" source="org.apache.commons.io.input.CountingInputStreamTest.testEOF2()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e769" source="org.apache.commons.io.input.CountingInputStreamTest.testEOF3()" target="org.apache.commons.io.input.CountingInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e770" source="org.apache.commons.io.input.CountingInputStreamTest.testEOF3()" target="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e771" source="org.apache.commons.io.input.CountingInputStreamTest.testEOF3()" target="org.apache.commons.io.input.CountingInputStream.getCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e772" source="org.apache.commons.io.input.CountingInputStreamTest.testEOF3()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e773" source="org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.input.NullInputStream(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e774" source="org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.input.CountingInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e775" source="org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.output.NullOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e776" source="org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e777" source="org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.input.CountingInputStream.getCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e778" source="org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.input.CountingInputStream.resetCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e779" source="org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.input.NullInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e780" source="org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.input.CountingInputStream.getByteCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e781" source="org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.input.CountingInputStream.resetByteCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e782" source="org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84()" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e783" source="org.apache.commons.io.input.CountingInputStreamTest.testResetting()" target="org.apache.commons.io.input.CountingInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e784" source="org.apache.commons.io.input.CountingInputStreamTest.testResetting()" target="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e785" source="org.apache.commons.io.input.CountingInputStreamTest.testResetting()" target="org.apache.commons.io.input.CountingInputStream.getCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e786" source="org.apache.commons.io.input.CountingInputStreamTest.testResetting()" target="org.apache.commons.io.input.CountingInputStream.resetCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e787" source="org.apache.commons.io.input.CountingInputStreamTest.testResetting()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e788" source="org.apache.commons.io.input.CountingInputStreamTest.testResetting()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e789" source="org.apache.commons.io.input.CountingInputStreamTest.testSkipping()" target="org.apache.commons.io.input.CountingInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e790" source="org.apache.commons.io.input.CountingInputStreamTest.testSkipping()" target="org.apache.commons.io.input.CountingInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e791" source="org.apache.commons.io.input.CountingInputStreamTest.testSkipping()" target="org.apache.commons.io.input.CountingInputStream.getCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e792" source="org.apache.commons.io.input.CountingInputStreamTest.testSkipping()" target="org.apache.commons.io.input.ProxyInputStream.read(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e793" source="org.apache.commons.io.input.CountingInputStreamTest.testSkipping()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e794" source="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()" target="org.apache.commons.io.input.CountingInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e795" source="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()" target="org.apache.commons.io.input.ProxyInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e796" source="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()" target="org.apache.commons.io.input.CountingInputStream.getCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e797" source="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e798" source="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()" target="org.apache.commons.io.input.CountingInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e799" source="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()" target="org.apache.commons.io.input.ProxyInputStream.read(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e800" source="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()" target="org.apache.commons.io.input.CountingInputStream.getCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e801" source="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e802" source="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()" target="org.apache.commons.io.input.CountingInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e803" source="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()" target="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e804" source="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()" target="org.apache.commons.io.input.CountingInputStream.getCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e805" source="org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e806" source="org.apache.commons.io.input.DemuxInputStream.read()" target="org.apache.commons.io.input.DemuxInputStream#m_streams">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e807" source="org.apache.commons.io.input.DemuxInputStream.read()" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e808" source="org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)" target="org.apache.commons.io.input.DemuxInputStream#m_streams">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e809" source="org.apache.commons.io.input.DemuxInputStream.close()" target="org.apache.commons.io.input.DemuxInputStream#m_streams">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e810" source="org.apache.commons.io.input.NullInputStream(long)" target="org.apache.commons.io.input.NullInputStream(long,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e811" source="org.apache.commons.io.input.NullInputStream#size" target="org.apache.commons.io.input.NullInputStream(long,boolean,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e812" source="org.apache.commons.io.input.NullInputStream#markSupported" target="org.apache.commons.io.input.NullInputStream(long,boolean,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e813" source="org.apache.commons.io.input.NullInputStream#throwEofException" target="org.apache.commons.io.input.NullInputStream(long,boolean,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e814" source="org.apache.commons.io.input.NullInputStream.markSupported()" target="org.apache.commons.io.input.NullInputStream#markSupported">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e815" source="org.apache.commons.io.input.NullInputStream.available()" target="org.apache.commons.io.input.NullInputStream#size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e816" source="org.apache.commons.io.input.NullInputStream.available()" target="org.apache.commons.io.input.NullInputStream#position">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e817" source="org.apache.commons.io.input.NullInputStream.available()" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e818" source="org.apache.commons.io.input.NullInputStream#eof" target="org.apache.commons.io.input.NullInputStream.doEndOfFile()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e819" source="org.apache.commons.io.input.NullInputStream.doEndOfFile()" target="org.apache.commons.io.input.NullInputStream#throwEofException">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e820" source="org.apache.commons.io.input.NullInputStream.doEndOfFile()" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e821" source="org.apache.commons.io.input.NullInputStream.read()" target="org.apache.commons.io.input.NullInputStream.doEndOfFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e822" source="org.apache.commons.io.input.NullInputStream.read()" target="org.apache.commons.io.input.NullInputStream.processByte()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e823" source="org.apache.commons.io.input.NullInputStream.read()" target="org.apache.commons.io.input.NullInputStream#eof">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e824" source="org.apache.commons.io.input.NullInputStream.read()" target="org.apache.commons.io.input.NullInputStream#position">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e825" source="org.apache.commons.io.input.NullInputStream.read()" target="org.apache.commons.io.input.NullInputStream#size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e826" source="org.apache.commons.io.input.NullInputStream.read(byte[])" target="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e827" source="org.apache.commons.io.input.NullInputStream.read(byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e828" source="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.NullInputStream.doEndOfFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e829" source="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.NullInputStream.processBytes(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e830" source="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.NullInputStream#eof">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e831" source="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.NullInputStream#position">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e832" source="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.NullInputStream#size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e833" source="org.apache.commons.io.input.NullInputStream#position" target="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e834" source="org.apache.commons.io.input.NullInputStream#size" target="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e835" source="org.apache.commons.io.input.NullInputStream.getPosition()" target="org.apache.commons.io.input.NullInputStream#position">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e836" source="org.apache.commons.io.input.NullInputStream.getSize()" target="org.apache.commons.io.input.NullInputStream#size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e837" source="org.apache.commons.io.input.NullInputStream.skip(long)" target="org.apache.commons.io.input.NullInputStream.doEndOfFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e838" source="org.apache.commons.io.input.NullInputStream.skip(long)" target="org.apache.commons.io.input.NullInputStream#eof">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e839" source="org.apache.commons.io.input.NullInputStream.skip(long)" target="org.apache.commons.io.input.NullInputStream#position">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e840" source="org.apache.commons.io.input.NullInputStream.skip(long)" target="org.apache.commons.io.input.NullInputStream#size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e841" source="org.apache.commons.io.input.NullInputStream#position" target="org.apache.commons.io.input.NullInputStream.skip(long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e842" source="org.apache.commons.io.input.NullInputStream#size" target="org.apache.commons.io.input.NullInputStream.skip(long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e843" source="org.apache.commons.io.input.NullInputStream#eof" target="org.apache.commons.io.input.NullInputStream.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e844" source="org.apache.commons.io.input.NullInputStream#position" target="org.apache.commons.io.input.NullInputStream.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e845" source="org.apache.commons.io.input.NullInputStream#mark" target="org.apache.commons.io.input.NullInputStream.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e846" source="org.apache.commons.io.input.NullInputStream.mark(int)" target="org.apache.commons.io.input.NullInputStream#markSupported">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e847" source="org.apache.commons.io.input.NullInputStream#mark" target="org.apache.commons.io.input.NullInputStream.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e848" source="org.apache.commons.io.input.NullInputStream#position" target="org.apache.commons.io.input.NullInputStream.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e849" source="org.apache.commons.io.input.NullInputStream#readlimit" target="org.apache.commons.io.input.NullInputStream.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e850" source="org.apache.commons.io.input.NullInputStream.reset()" target="org.apache.commons.io.input.NullInputStream#markSupported">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e851" source="org.apache.commons.io.input.NullInputStream.reset()" target="org.apache.commons.io.input.NullInputStream#mark">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e852" source="org.apache.commons.io.input.NullInputStream.reset()" target="org.apache.commons.io.input.NullInputStream#position">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e853" source="org.apache.commons.io.input.NullInputStream.reset()" target="org.apache.commons.io.input.NullInputStream#readlimit">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e854" source="org.apache.commons.io.input.NullInputStream#position" target="org.apache.commons.io.input.NullInputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e855" source="org.apache.commons.io.input.NullInputStream#mark" target="org.apache.commons.io.input.NullInputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e856" source="org.apache.commons.io.input.NullInputStream#eof" target="org.apache.commons.io.input.NullInputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e857" source="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream(int)" target="org.apache.commons.io.input.NullInputStream(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e858" source="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream(int,boolean,boolean)" target="org.apache.commons.io.input.NullInputStream(long,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e859" source="org.apache.commons.io.input.NullInputStream.processByte()" target="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream.processByte()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e860" source="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream.processByte()" target="org.apache.commons.io.input.NullInputStream.getPosition()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e861" source="org.apache.commons.io.input.NullInputStream.processBytes(byte[],int,int)" target="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream.processBytes(byte[],int,int)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e862" source="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream.processBytes(byte[],int,int)" target="org.apache.commons.io.input.NullInputStream.getPosition()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e863" source="org.apache.commons.io.input.NullInputStreamTest.testEOFException()" target="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream(int,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e864" source="org.apache.commons.io.input.NullInputStreamTest.testMarkAndReset()" target="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream(int,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e865" source="org.apache.commons.io.input.NullInputStreamTest.testMarkNotSupported()" target="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream(int,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e866" source="org.apache.commons.io.input.NullInputStreamTest.testRead()" target="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e867" source="org.apache.commons.io.input.NullInputStreamTest.testReadByteArray()" target="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e868" source="org.apache.commons.io.input.NullInputStreamTest.testReadByteArray()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e869" source="org.apache.commons.io.input.NullInputStreamTest.testSkip()" target="org.apache.commons.io.input.NullInputStreamTest$TestNullInputStream(int,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e870" source="org.apache.commons.io.input.NullReader(long)" target="org.apache.commons.io.input.NullReader(long,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e871" source="org.apache.commons.io.input.NullReader#size" target="org.apache.commons.io.input.NullReader(long,boolean,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e872" source="org.apache.commons.io.input.NullReader#markSupported" target="org.apache.commons.io.input.NullReader(long,boolean,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e873" source="org.apache.commons.io.input.NullReader#throwEofException" target="org.apache.commons.io.input.NullReader(long,boolean,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e874" source="org.apache.commons.io.input.NullReader.markSupported()" target="org.apache.commons.io.input.NullReader#markSupported">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e875" source="org.apache.commons.io.input.NullReader#eof" target="org.apache.commons.io.input.NullReader.doEndOfFile()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e876" source="org.apache.commons.io.input.NullReader.doEndOfFile()" target="org.apache.commons.io.input.NullReader#throwEofException">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e877" source="org.apache.commons.io.input.NullReader.doEndOfFile()" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e878" source="org.apache.commons.io.input.NullReader.read()" target="org.apache.commons.io.input.NullReader.doEndOfFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e879" source="org.apache.commons.io.input.NullReader.read()" target="org.apache.commons.io.input.NullReader.processChar()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e880" source="org.apache.commons.io.input.NullReader.read()" target="org.apache.commons.io.input.NullReader#eof">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e881" source="org.apache.commons.io.input.NullReader.read()" target="org.apache.commons.io.input.NullReader#position">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e882" source="org.apache.commons.io.input.NullReader.read()" target="org.apache.commons.io.input.NullReader#size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e883" source="org.apache.commons.io.input.NullReader.read(char[])" target="org.apache.commons.io.input.NullReader.read(char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e884" source="org.apache.commons.io.input.NullReader.read(char[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e885" source="org.apache.commons.io.input.NullReader.read(char[],int,int)" target="org.apache.commons.io.input.NullReader.doEndOfFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e886" source="org.apache.commons.io.input.NullReader.read(char[],int,int)" target="org.apache.commons.io.input.NullReader.processChars(char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e887" source="org.apache.commons.io.input.NullReader.read(char[],int,int)" target="org.apache.commons.io.input.NullReader#eof">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e888" source="org.apache.commons.io.input.NullReader.read(char[],int,int)" target="org.apache.commons.io.input.NullReader#position">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e889" source="org.apache.commons.io.input.NullReader.read(char[],int,int)" target="org.apache.commons.io.input.NullReader#size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e890" source="org.apache.commons.io.input.NullReader#position" target="org.apache.commons.io.input.NullReader.read(char[],int,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e891" source="org.apache.commons.io.input.NullReader#size" target="org.apache.commons.io.input.NullReader.read(char[],int,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e892" source="org.apache.commons.io.input.NullReader.getPosition()" target="org.apache.commons.io.input.NullReader#position">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e893" source="org.apache.commons.io.input.NullReader.getSize()" target="org.apache.commons.io.input.NullReader#size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e894" source="org.apache.commons.io.input.NullReader.skip(long)" target="org.apache.commons.io.input.NullReader.doEndOfFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e895" source="org.apache.commons.io.input.NullReader.skip(long)" target="org.apache.commons.io.input.NullReader#eof">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e896" source="org.apache.commons.io.input.NullReader.skip(long)" target="org.apache.commons.io.input.NullReader#position">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e897" source="org.apache.commons.io.input.NullReader.skip(long)" target="org.apache.commons.io.input.NullReader#size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e898" source="org.apache.commons.io.input.NullReader#position" target="org.apache.commons.io.input.NullReader.skip(long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e899" source="org.apache.commons.io.input.NullReader#size" target="org.apache.commons.io.input.NullReader.skip(long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e900" source="org.apache.commons.io.input.NullReader#eof" target="org.apache.commons.io.input.NullReader.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e901" source="org.apache.commons.io.input.NullReader#position" target="org.apache.commons.io.input.NullReader.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e902" source="org.apache.commons.io.input.NullReader#mark" target="org.apache.commons.io.input.NullReader.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e903" source="org.apache.commons.io.input.NullReader.mark(int)" target="org.apache.commons.io.input.NullReader#markSupported">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e904" source="org.apache.commons.io.input.NullReader#mark" target="org.apache.commons.io.input.NullReader.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e905" source="org.apache.commons.io.input.NullReader#position" target="org.apache.commons.io.input.NullReader.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e906" source="org.apache.commons.io.input.NullReader#readlimit" target="org.apache.commons.io.input.NullReader.mark(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e907" source="org.apache.commons.io.input.NullReader.reset()" target="org.apache.commons.io.input.NullReader#markSupported">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e908" source="org.apache.commons.io.input.NullReader.reset()" target="org.apache.commons.io.input.NullReader#mark">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e909" source="org.apache.commons.io.input.NullReader.reset()" target="org.apache.commons.io.input.NullReader#position">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e910" source="org.apache.commons.io.input.NullReader.reset()" target="org.apache.commons.io.input.NullReader#readlimit">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e911" source="org.apache.commons.io.input.NullReader#position" target="org.apache.commons.io.input.NullReader.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e912" source="org.apache.commons.io.input.NullReader#mark" target="org.apache.commons.io.input.NullReader.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e913" source="org.apache.commons.io.input.NullReader#eof" target="org.apache.commons.io.input.NullReader.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e914" source="org.apache.commons.io.input.NullReaderTest$TestNullReader(int)" target="org.apache.commons.io.input.NullReader(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e915" source="org.apache.commons.io.input.NullReaderTest$TestNullReader(int,boolean,boolean)" target="org.apache.commons.io.input.NullReader(long,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e916" source="org.apache.commons.io.input.NullReader.processChar()" target="org.apache.commons.io.input.NullReaderTest$TestNullReader.processChar()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e917" source="org.apache.commons.io.input.NullReaderTest$TestNullReader.processChar()" target="org.apache.commons.io.input.NullReader.getPosition()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e918" source="org.apache.commons.io.input.NullReader.processChars(char[],int,int)" target="org.apache.commons.io.input.NullReaderTest$TestNullReader.processChars(char[],int,int)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e919" source="org.apache.commons.io.input.NullReaderTest$TestNullReader.processChars(char[],int,int)" target="org.apache.commons.io.input.NullReader.getPosition()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e920" source="org.apache.commons.io.input.NullReaderTest.testEOFException()" target="org.apache.commons.io.input.NullReaderTest$TestNullReader(int,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e921" source="org.apache.commons.io.input.NullReaderTest.testMarkAndReset()" target="org.apache.commons.io.input.NullReaderTest$TestNullReader(int,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e922" source="org.apache.commons.io.input.NullReaderTest.testMarkNotSupported()" target="org.apache.commons.io.input.NullReaderTest$TestNullReader(int,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e923" source="org.apache.commons.io.input.NullReaderTest.testRead()" target="org.apache.commons.io.input.NullReaderTest$TestNullReader(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e924" source="org.apache.commons.io.input.NullReaderTest.testRead()" target="org.apache.commons.io.input.NullReader.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e925" source="org.apache.commons.io.input.NullReaderTest.testRead()" target="org.apache.commons.io.input.NullReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e926" source="org.apache.commons.io.input.NullReaderTest.testRead()" target="org.apache.commons.io.input.NullReader.getPosition()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e927" source="org.apache.commons.io.input.NullReaderTest.testReadCharArray()" target="org.apache.commons.io.input.NullReaderTest$TestNullReader(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e928" source="org.apache.commons.io.input.NullReaderTest.testReadCharArray()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e929" source="org.apache.commons.io.input.NullReaderTest.testSkip()" target="org.apache.commons.io.input.NullReaderTest$TestNullReader(int,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e930" source="org.apache.commons.io.input.ProxyInputStream.markSupported()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e931" source="org.apache.commons.io.input.ProxyInputStream.available()" target="org.apache.commons.io.input.ProxyInputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e932" source="org.apache.commons.io.input.ProxyInputStream.read()" target="org.apache.commons.io.input.ProxyInputStream.beforeRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e933" source="org.apache.commons.io.input.ProxyInputStream.read()" target="org.apache.commons.io.input.ProxyInputStream.afterRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e934" source="org.apache.commons.io.input.ProxyInputStream.read()" target="org.apache.commons.io.input.ProxyInputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e935" source="org.apache.commons.io.input.ProxyInputStream.read()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e936" source="org.apache.commons.io.input.ProxyInputStream.read()" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e937" source="org.apache.commons.io.input.ProxyInputStream.read(byte[])" target="org.apache.commons.io.input.ProxyInputStream.beforeRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e938" source="org.apache.commons.io.input.ProxyInputStream.read(byte[])" target="org.apache.commons.io.input.ProxyInputStream.afterRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e939" source="org.apache.commons.io.input.ProxyInputStream.read(byte[])" target="org.apache.commons.io.input.ProxyInputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e940" source="org.apache.commons.io.input.ProxyInputStream.read(byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e941" source="org.apache.commons.io.input.ProxyInputStream.read(byte[])" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e942" source="org.apache.commons.io.input.ProxyInputStream.read(byte[])" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e943" source="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.ProxyInputStream.beforeRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e944" source="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.ProxyInputStream.afterRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e945" source="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.ProxyInputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e946" source="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e947" source="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e948" source="org.apache.commons.io.input.ProxyInputStream.skip(long)" target="org.apache.commons.io.input.ProxyInputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e949" source="org.apache.commons.io.input.ProxyInputStream.skip(long)" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e950" source="org.apache.commons.io.input.ProxyInputStream.close()" target="org.apache.commons.io.input.ProxyInputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e951" source="org.apache.commons.io.input.ProxyInputStream.close()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e952" source="org.apache.commons.io.input.ProxyInputStream.mark(int)" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e953" source="org.apache.commons.io.input.ProxyInputStream.reset()" target="org.apache.commons.io.input.ProxyInputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e954" source="org.apache.commons.io.input.ProxyInputStream.reset()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e955" source="org.apache.commons.io.input.ProxyReader.markSupported()" target="java.io.FilterReader#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e956" source="org.apache.commons.io.input.ProxyReader.ready()" target="org.apache.commons.io.input.ProxyReader.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e957" source="org.apache.commons.io.input.ProxyReader.ready()" target="java.io.FilterReader#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e958" source="org.apache.commons.io.input.ProxyReader.read()" target="org.apache.commons.io.input.ProxyReader.beforeRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e959" source="org.apache.commons.io.input.ProxyReader.read()" target="org.apache.commons.io.input.ProxyReader.afterRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e960" source="org.apache.commons.io.input.ProxyReader.read()" target="org.apache.commons.io.input.ProxyReader.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e961" source="org.apache.commons.io.input.ProxyReader.read()" target="java.io.FilterReader#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e962" source="org.apache.commons.io.input.ProxyReader.read()" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e963" source="org.apache.commons.io.input.ProxyReader.read(char[])" target="org.apache.commons.io.input.ProxyReader.beforeRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e964" source="org.apache.commons.io.input.ProxyReader.read(char[])" target="org.apache.commons.io.input.ProxyReader.afterRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e965" source="org.apache.commons.io.input.ProxyReader.read(char[])" target="org.apache.commons.io.input.ProxyReader.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e966" source="org.apache.commons.io.input.ProxyReader.read(char[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e967" source="org.apache.commons.io.input.ProxyReader.read(char[])" target="java.io.FilterReader#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e968" source="org.apache.commons.io.input.ProxyReader.read(char[])" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e969" source="org.apache.commons.io.input.ProxyReader.read(char[],int,int)" target="org.apache.commons.io.input.ProxyReader.beforeRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e970" source="org.apache.commons.io.input.ProxyReader.read(char[],int,int)" target="org.apache.commons.io.input.ProxyReader.afterRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e971" source="org.apache.commons.io.input.ProxyReader.read(char[],int,int)" target="org.apache.commons.io.input.ProxyReader.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e972" source="org.apache.commons.io.input.ProxyReader.read(char[],int,int)" target="java.io.FilterReader#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e973" source="org.apache.commons.io.input.ProxyReader.read(char[],int,int)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e974" source="org.apache.commons.io.input.ProxyReader.read(java.nio.CharBuffer)" target="org.apache.commons.io.input.ProxyReader.beforeRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e975" source="org.apache.commons.io.input.ProxyReader.read(java.nio.CharBuffer)" target="org.apache.commons.io.input.ProxyReader.afterRead(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e976" source="org.apache.commons.io.input.ProxyReader.read(java.nio.CharBuffer)" target="org.apache.commons.io.input.ProxyReader.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e977" source="org.apache.commons.io.input.ProxyReader.read(java.nio.CharBuffer)" target="java.io.FilterReader#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e978" source="org.apache.commons.io.input.ProxyReader.read(java.nio.CharBuffer)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e979" source="org.apache.commons.io.input.ProxyReader.skip(long)" target="org.apache.commons.io.input.ProxyReader.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e980" source="org.apache.commons.io.input.ProxyReader.skip(long)" target="java.io.FilterReader#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e981" source="org.apache.commons.io.input.ProxyReader.close()" target="org.apache.commons.io.input.ProxyReader.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e982" source="org.apache.commons.io.input.ProxyReader.close()" target="java.io.FilterReader#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e983" source="org.apache.commons.io.input.ProxyReader.mark(int)" target="org.apache.commons.io.input.ProxyReader.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e984" source="org.apache.commons.io.input.ProxyReader.mark(int)" target="java.io.FilterReader#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e985" source="org.apache.commons.io.input.ProxyReader.reset()" target="org.apache.commons.io.input.ProxyReader.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e986" source="org.apache.commons.io.input.ProxyReader.reset()" target="java.io.FilterReader#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e987" source="org.apache.commons.io.input.ProxyReaderTest$CustomNullReader(int)" target="org.apache.commons.io.input.NullReader(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e988" source="org.apache.commons.io.input.NullReader.read(char[])" target="org.apache.commons.io.input.ProxyReaderTest$CustomNullReader.read(char[])">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e989" source="org.apache.commons.io.input.ProxyReaderTest$CustomNullReader.read(char[])" target="org.apache.commons.io.input.NullReader.read(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e990" source="org.apache.commons.io.input.ProxyReaderTest$ProxyReaderImpl(java.io.Reader)" target="org.apache.commons.io.input.ProxyReader(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e991" source="org.apache.commons.io.input.ProxyReaderTest.testNullCharArray()" target="org.apache.commons.io.input.ProxyReaderTest$ProxyReaderImpl(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e992" source="org.apache.commons.io.input.ProxyReaderTest.testNullCharArray()" target="org.apache.commons.io.input.ProxyReaderTest$CustomNullReader(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e993" source="org.apache.commons.io.input.ProxyReaderTest.testNullCharArray()" target="org.apache.commons.io.input.ProxyReader.read(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e994" source="org.apache.commons.io.input.ProxyReaderTest.testNullCharArray()" target="org.apache.commons.io.input.ProxyReader.read(char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e995" source="org.apache.commons.io.input.ProxyReaderTest.testNullCharArray()" target="org.apache.commons.io.input.ProxyReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e996" source="org.apache.commons.io.input.ProxyReaderTest.testNullCharBuffer()" target="org.apache.commons.io.input.ProxyReaderTest$ProxyReaderImpl(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e997" source="org.apache.commons.io.input.ProxyReaderTest.testNullCharBuffer()" target="org.apache.commons.io.input.ProxyReaderTest$CustomNullReader(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e998" source="org.apache.commons.io.input.ProxyReaderTest.testNullCharBuffer()" target="org.apache.commons.io.input.ProxyReader.read(java.nio.CharBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e999" source="org.apache.commons.io.input.ProxyReaderTest.testNullCharBuffer()" target="org.apache.commons.io.input.ProxyReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1000" source="org.apache.commons.io.input.ReaderInputStream(java.io.Reader)" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1001" source="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.lang.String)" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1002" source="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.lang.String)" target="org.apache.commons.io.input.ReaderInputStream#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1003" source="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.lang.String,int)" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.Charset,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1004" source="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.Charset)" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.Charset,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1005" source="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.Charset)" target="org.apache.commons.io.input.ReaderInputStream#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1006" source="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.Charset,int)" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1007" source="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.Charset,int)" target="java.nio.charset.CodingErrorAction#REPLACE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1008" source="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder)" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1009" source="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder)" target="org.apache.commons.io.input.ReaderInputStream#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1010" source="org.apache.commons.io.input.ReaderInputStream#reader" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1011" source="org.apache.commons.io.input.ReaderInputStream#encoder" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1012" source="org.apache.commons.io.input.ReaderInputStream#encoderIn" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1013" source="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder,int)" target="org.apache.commons.io.input.ReaderInputStream#encoderIn">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1014" source="org.apache.commons.io.input.ReaderInputStream#encoderOut" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1015" source="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder,int)" target="org.apache.commons.io.input.ReaderInputStream#encoderOut">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1016" source="org.apache.commons.io.input.ReaderInputStream.read()" target="org.apache.commons.io.input.ReaderInputStream.fillBuffer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1017" source="org.apache.commons.io.input.ReaderInputStream.read()" target="org.apache.commons.io.input.ReaderInputStream#encoderOut">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1018" source="org.apache.commons.io.input.ReaderInputStream.read()" target="org.apache.commons.io.input.ReaderInputStream#endOfInput">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1019" source="org.apache.commons.io.input.ReaderInputStream.read()" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1020" source="org.apache.commons.io.input.ReaderInputStream.read(byte[])" target="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1021" source="org.apache.commons.io.input.ReaderInputStream.read(byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1022" source="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.ReaderInputStream.fillBuffer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1023" source="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1024" source="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.ReaderInputStream#encoderOut">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1025" source="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.ReaderInputStream#endOfInput">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1026" source="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1027" source="org.apache.commons.io.input.ReaderInputStream.close()" target="org.apache.commons.io.input.ReaderInputStream#reader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1028" source="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" target="org.apache.commons.io.input.ReaderInputStream#endOfInput">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1029" source="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" target="org.apache.commons.io.input.ReaderInputStream#lastCoderResult">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1030" source="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" target="org.apache.commons.io.input.ReaderInputStream#encoderIn">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1031" source="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" target="org.apache.commons.io.input.ReaderInputStream#reader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1032" source="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1033" source="org.apache.commons.io.input.ReaderInputStream#endOfInput" target="org.apache.commons.io.input.ReaderInputStream.fillBuffer()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1034" source="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" target="org.apache.commons.io.input.ReaderInputStream#encoderOut">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1035" source="org.apache.commons.io.input.ReaderInputStream#lastCoderResult" target="org.apache.commons.io.input.ReaderInputStream.fillBuffer()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1036" source="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" target="org.apache.commons.io.input.ReaderInputStream#encoder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1037" source="org.apache.commons.io.input.ReaderInputStreamTest.testCharsetMismatchInfiniteLoop()" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1038" source="org.apache.commons.io.input.ReaderInputStreamTest.testCharsetMismatchInfiniteLoop()" target="org.apache.commons.io.input.ReaderInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1039" source="org.apache.commons.io.input.ReaderInputStreamTest.testCharsetMismatchInfiniteLoop()" target="org.apache.commons.io.input.ReaderInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1040" source="org.apache.commons.io.input.ReaderInputStreamTest.testLargeUTF8WithBufferedRead()" target="org.apache.commons.io.input.ReaderInputStreamTest.testWithBufferedRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1041" source="org.apache.commons.io.input.ReaderInputStreamTest.testLargeUTF8WithBufferedRead()" target="org.apache.commons.io.input.ReaderInputStreamTest#LARGE_TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1042" source="org.apache.commons.io.input.ReaderInputStreamTest.testLargeUTF8WithSingleByteRead()" target="org.apache.commons.io.input.ReaderInputStreamTest.testWithSingleByteRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1043" source="org.apache.commons.io.input.ReaderInputStreamTest.testLargeUTF8WithSingleByteRead()" target="org.apache.commons.io.input.ReaderInputStreamTest#LARGE_TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1044" source="org.apache.commons.io.input.ReaderInputStreamTest.testReadZero()" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1045" source="org.apache.commons.io.input.ReaderInputStreamTest.testReadZero()" target="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1046" source="org.apache.commons.io.input.ReaderInputStreamTest.testReadZero()" target="org.apache.commons.io.input.ReaderInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1047" source="org.apache.commons.io.input.ReaderInputStreamTest.testReadZeroEmptyString()" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1048" source="org.apache.commons.io.input.ReaderInputStreamTest.testReadZeroEmptyString()" target="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1049" source="org.apache.commons.io.input.ReaderInputStreamTest.testReadZeroEmptyString()" target="org.apache.commons.io.input.ReaderInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1050" source="org.apache.commons.io.input.ReaderInputStreamTest.testUTF16WithSingleByteRead()" target="org.apache.commons.io.input.ReaderInputStreamTest.testWithSingleByteRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1051" source="org.apache.commons.io.input.ReaderInputStreamTest.testUTF16WithSingleByteRead()" target="org.apache.commons.io.input.ReaderInputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1052" source="org.apache.commons.io.input.ReaderInputStreamTest.testUTF8WithBufferedRead()" target="org.apache.commons.io.input.ReaderInputStreamTest.testWithBufferedRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1053" source="org.apache.commons.io.input.ReaderInputStreamTest.testUTF8WithBufferedRead()" target="org.apache.commons.io.input.ReaderInputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1054" source="org.apache.commons.io.input.ReaderInputStreamTest.testUTF8WithSingleByteRead()" target="org.apache.commons.io.input.ReaderInputStreamTest.testWithSingleByteRead(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1055" source="org.apache.commons.io.input.ReaderInputStreamTest.testUTF8WithSingleByteRead()" target="org.apache.commons.io.input.ReaderInputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1056" source="org.apache.commons.io.input.ReaderInputStreamTest.testWithBufferedRead(java.lang.String,java.lang.String)" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1057" source="org.apache.commons.io.input.ReaderInputStreamTest.testWithBufferedRead(java.lang.String,java.lang.String)" target="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1058" source="org.apache.commons.io.input.ReaderInputStreamTest.testWithBufferedRead(java.lang.String,java.lang.String)" target="org.apache.commons.io.input.ReaderInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1059" source="org.apache.commons.io.input.ReaderInputStreamTest.testWithBufferedRead(java.lang.String,java.lang.String)" target="org.apache.commons.io.input.ReaderInputStreamTest#random">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1060" source="org.apache.commons.io.input.ReaderInputStreamTest.testWithBufferedRead(java.lang.String,java.lang.String)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1061" source="org.apache.commons.io.input.ReaderInputStreamTest.testWithSingleByteRead(java.lang.String,java.lang.String)" target="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1062" source="org.apache.commons.io.input.ReaderInputStreamTest.testWithSingleByteRead(java.lang.String,java.lang.String)" target="org.apache.commons.io.input.ReaderInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1063" source="org.apache.commons.io.input.ReaderInputStreamTest.testWithSingleByteRead(java.lang.String,java.lang.String)" target="org.apache.commons.io.input.ReaderInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1064" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#no" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1065" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1066" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#data" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1067" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" target="org.apache.commons.io.input.ReversedLinesFileReader#blockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1068" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" target="org.apache.commons.io.input.ReversedLinesFileReader#randomAccessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1069" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#data">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1070" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#currentLastBytePos" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1071" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#leftOver" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1072" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" target="org.apache.commons.io.input.ReversedLinesFileReader#newLineSequences">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1073" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1074" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1075" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1076" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#no">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1077" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#currentLastBytePos">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1078" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" target="org.apache.commons.io.input.ReversedLinesFileReader#avoidNewlineSplitBufferSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1079" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#data">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1080" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" target="org.apache.commons.io.input.ReversedLinesFileReader#encoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1081" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#currentLastBytePos" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1082" source="org.apache.commons.io.input.ReversedLinesFileReader#byteDecrement" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1083" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#leftOver">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1084" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#leftOver" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1085" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1086" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#currentLastBytePos">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1087" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#no">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1088" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" target="org.apache.commons.io.input.ReversedLinesFileReader#blockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1089" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#leftOver">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1090" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" target="org.apache.commons.io.input.ReversedLinesFileReader#encoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1091" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#currentLastBytePos">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1092" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#leftOver" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1093" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#data">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1094" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#leftOver">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1095" source="org.apache.commons.io.input.ReversedLinesFileReader$FilePart#currentLastBytePos" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1096" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File)" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1097" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1098" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1099" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1100" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1101" source="org.apache.commons.io.input.ReversedLinesFileReader#blockSize" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1102" source="org.apache.commons.io.input.ReversedLinesFileReader#encoding" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1103" source="org.apache.commons.io.input.ReversedLinesFileReader#randomAccessFile" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1104" source="org.apache.commons.io.input.ReversedLinesFileReader#totalByteLength" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1105" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" target="org.apache.commons.io.input.ReversedLinesFileReader#randomAccessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1106" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" target="org.apache.commons.io.input.ReversedLinesFileReader#totalByteLength">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1107" source="org.apache.commons.io.input.ReversedLinesFileReader#totalBlockCount" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1108" source="org.apache.commons.io.input.ReversedLinesFileReader#currentFilePart" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1109" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" target="org.apache.commons.io.input.ReversedLinesFileReader#totalBlockCount">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1110" source="org.apache.commons.io.input.ReversedLinesFileReader#byteDecrement" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1111" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1112" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1113" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets#UTF_16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1114" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets#UTF_16">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1115" source="org.apache.commons.io.input.ReversedLinesFileReader#newLineSequences" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1116" source="org.apache.commons.io.input.ReversedLinesFileReader#avoidNewlineSplitBufferSize" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1117" source="int#length" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1118" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" target="org.apache.commons.io.input.ReversedLinesFileReader#newLineSequences">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1119" source="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,java.nio.charset.Charset)" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1120" source="org.apache.commons.io.input.ReversedLinesFileReader.readLine()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1121" source="org.apache.commons.io.input.ReversedLinesFileReader.readLine()" target="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1122" source="org.apache.commons.io.input.ReversedLinesFileReader.readLine()" target="org.apache.commons.io.input.ReversedLinesFileReader.readLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1123" source="org.apache.commons.io.input.ReversedLinesFileReader.readLine()" target="org.apache.commons.io.input.ReversedLinesFileReader#currentFilePart">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1124" source="org.apache.commons.io.input.ReversedLinesFileReader#currentFilePart" target="org.apache.commons.io.input.ReversedLinesFileReader.readLine()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1125" source="org.apache.commons.io.input.ReversedLinesFileReader.readLine()" target="org.apache.commons.io.input.ReversedLinesFileReader#trailingNewlineOfFileSkipped">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1126" source="org.apache.commons.io.input.ReversedLinesFileReader#trailingNewlineOfFileSkipped" target="org.apache.commons.io.input.ReversedLinesFileReader.readLine()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1127" source="org.apache.commons.io.input.ReversedLinesFileReader.close()" target="org.apache.commons.io.input.ReversedLinesFileReader#randomAccessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1128" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize(java.lang.Integer)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1129" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertEqualsAndNoLineBreaks(java.lang.String,java.lang.String)" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertEqualsAndNoLineBreaks(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1130" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines(org.apache.commons.io.input.ReversedLinesFileReader)" target="org.apache.commons.io.input.ReversedLinesFileReader.readLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1131" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines(org.apache.commons.io.input.ReversedLinesFileReader)" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertEqualsAndNoLineBreaks(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1132" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines(org.apache.commons.io.input.ReversedLinesFileReader)" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#TEST_LINE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1133" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.closeReader()" target="org.apache.commons.io.input.ReversedLinesFileReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1134" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.closeReader()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1135" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testEmptyFile()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1136" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testEmptyFile()" target="org.apache.commons.io.input.ReversedLinesFileReader.readLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1137" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testEmptyFile()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1138" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testEmptyFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1139" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testEmptyFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1140" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testEmptyFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1141" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testFileSizeIsExactMultipleOfBlockSize()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1142" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testFileSizeIsExactMultipleOfBlockSize()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertEqualsAndNoLineBreaks(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1143" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testFileSizeIsExactMultipleOfBlockSize()" target="org.apache.commons.io.input.ReversedLinesFileReader.readLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1144" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testFileSizeIsExactMultipleOfBlockSize()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1145" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testFileSizeIsExactMultipleOfBlockSize()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#ISO_8859_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1146" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testFileSizeIsExactMultipleOfBlockSize()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1147" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileDefaults()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1148" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileDefaults()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines(org.apache.commons.io.input.ReversedLinesFileReader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1149" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileDefaults()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1150" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileDefaults()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1151" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileDefaults()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#ISO_8859_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1152" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileDefaults()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1153" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileManyWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1154" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileManyWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertEqualsAndNoLineBreaks(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1155" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileManyWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()" target="org.apache.commons.io.input.ReversedLinesFileReader.readLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1156" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileManyWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1157" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileManyWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1158" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileManyWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#ISO_8859_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1159" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileManyWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1160" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testShiftJISFile()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1161" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testShiftJISFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertEqualsAndNoLineBreaks(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1162" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testShiftJISFile()" target="org.apache.commons.io.input.ReversedLinesFileReader.readLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1163" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testShiftJISFile()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1164" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testShiftJISFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1165" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testShiftJISFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#TEST_LINE_SHIFT_JIS2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1166" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testShiftJISFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1167" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testShiftJISFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#TEST_LINE_SHIFT_JIS1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1168" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16BEFile()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1169" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16BEFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines(org.apache.commons.io.input.ReversedLinesFileReader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1170" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16BEFile()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1171" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16BEFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1172" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16BEFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1173" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16LEFile()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1174" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16LEFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines(org.apache.commons.io.input.ReversedLinesFileReader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1175" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16LEFile()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1176" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16LEFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1177" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16LEFile()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1178" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8File()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1179" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8File()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines(org.apache.commons.io.input.ReversedLinesFileReader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1180" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8File()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1181" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8File()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1182" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8File()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1183" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8File()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1184" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileCRBreaks()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1185" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileCRBreaks()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines(org.apache.commons.io.input.ReversedLinesFileReader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1186" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileCRBreaks()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1187" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileCRBreaks()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1188" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileCRBreaks()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1189" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileCRBreaks()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1190" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaks()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1191" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaks()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines(org.apache.commons.io.input.ReversedLinesFileReader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1192" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaks()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1193" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaks()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1194" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaks()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1195" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaks()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1196" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1197" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines(org.apache.commons.io.input.ReversedLinesFileReader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1198" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1199" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1200" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1201" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1202" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingBig5()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1203" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingBig5()" target="org.apache.commons.io.input.ReversedLinesFileReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1204" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingBig5()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1205" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingUTF16()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1206" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingUTF16()" target="org.apache.commons.io.input.ReversedLinesFileReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1207" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingUTF16()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize#testParamBlockSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1208" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#fileName" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile(java.lang.String,java.lang.String,java.lang.Integer)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1209" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#encoding" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile(java.lang.String,java.lang.String,java.lang.Integer)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1210" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#buffSize" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile(java.lang.String,java.lang.String,java.lang.Integer)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1211" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.closeReader()" target="org.apache.commons.io.input.ReversedLinesFileReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1212" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.closeReader()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#bufferedReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1213" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.closeReader()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1214" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1215" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader()" target="org.apache.commons.io.input.ReversedLinesFileReader.readLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1216" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#fileName">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1217" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#reversedLinesFileReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1218" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#buffSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1219" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#encoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1220" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#bufferedReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1221" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#bufferedReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1222" source="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1223" source="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.closeReader()" target="org.apache.commons.io.input.ReversedLinesFileReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1224" source="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.closeReader()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1225" source="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testFileSizeIsExactMultipleOfBlockSize()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1226" source="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testFileSizeIsExactMultipleOfBlockSize()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertEqualsAndNoLineBreaks(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1227" source="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testFileSizeIsExactMultipleOfBlockSize()" target="org.apache.commons.io.input.ReversedLinesFileReader.readLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1228" source="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple#reversedLinesFileReader" target="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testFileSizeIsExactMultipleOfBlockSize()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1229" source="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testFileSizeIsExactMultipleOfBlockSize()" target="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple#reversedLinesFileReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1230" source="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingBig5()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1231" source="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingBig5()" target="org.apache.commons.io.input.ReversedLinesFileReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1232" source="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingUTF16()" target="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1233" source="org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingUTF16()" target="org.apache.commons.io.input.ReversedLinesFileReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1234" source="org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)" target="org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1235" source="org.apache.commons.io.input.SwappedDataInputStream.readBoolean()" target="org.apache.commons.io.input.SwappedDataInputStream.readByte()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1236" source="org.apache.commons.io.input.SwappedDataInputStream.readByte()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1237" source="org.apache.commons.io.input.SwappedDataInputStream.readChar()" target="org.apache.commons.io.input.SwappedDataInputStream.readShort()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1238" source="org.apache.commons.io.input.SwappedDataInputStream.readDouble()" target="org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1239" source="org.apache.commons.io.input.SwappedDataInputStream.readDouble()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1240" source="org.apache.commons.io.input.SwappedDataInputStream.readFloat()" target="org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1241" source="org.apache.commons.io.input.SwappedDataInputStream.readFloat()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1242" source="org.apache.commons.io.input.SwappedDataInputStream.readInt()" target="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1243" source="org.apache.commons.io.input.SwappedDataInputStream.readInt()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1244" source="org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1245" source="org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()" target="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1246" source="org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1247" source="org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1248" source="org.apache.commons.io.input.SwappedDataInputStream.readLong()" target="org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1249" source="org.apache.commons.io.input.SwappedDataInputStream.readLong()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1250" source="org.apache.commons.io.input.SwappedDataInputStream.readShort()" target="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1251" source="org.apache.commons.io.input.SwappedDataInputStream.readShort()" target="java.io.FilterInputStream#in">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1252" source="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])" target="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1253" source="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1254" source="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" target="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1255" source="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1256" source="org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()" target="org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1257" source="org.apache.commons.io.input.SwappedDataInputStreamTest#bytes" target="org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1258" source="org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#bytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1259" source="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis" target="org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1260" source="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis" target="org.apache.commons.io.input.SwappedDataInputStreamTest.tearDown()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1261" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()" target="org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1262" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()" target="org.apache.commons.io.input.SwappedDataInputStream.readBoolean()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1263" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1264" source="org.apache.commons.io.input.SwappedDataInputStreamTest#bytes" target="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1265" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#bytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1266" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadByte()" target="org.apache.commons.io.input.SwappedDataInputStream.readByte()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1267" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadByte()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1268" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadChar()" target="org.apache.commons.io.input.SwappedDataInputStream.readChar()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1269" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadChar()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1270" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadDouble()" target="org.apache.commons.io.input.SwappedDataInputStream.readDouble()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1271" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadDouble()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1272" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFloat()" target="org.apache.commons.io.input.SwappedDataInputStream.readFloat()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1273" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFloat()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1274" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()" target="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1275" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1276" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#bytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1277" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadInt()" target="org.apache.commons.io.input.SwappedDataInputStream.readInt()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1278" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadInt()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1279" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLine()" target="org.apache.commons.io.input.SwappedDataInputStream.readLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1280" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLine()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1281" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLong()" target="org.apache.commons.io.input.SwappedDataInputStream.readLong()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1282" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLong()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1283" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadShort()" target="org.apache.commons.io.input.SwappedDataInputStream.readShort()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1284" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadShort()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1285" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUTF()" target="org.apache.commons.io.input.SwappedDataInputStream.readUTF()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1286" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUTF()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1287" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedByte()" target="org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1288" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedByte()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1289" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedShort()" target="org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1290" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedShort()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1291" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()" target="org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1292" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()" target="org.apache.commons.io.input.SwappedDataInputStream.readInt()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1293" source="org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()" target="org.apache.commons.io.input.SwappedDataInputStreamTest#sdis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1294" source="org.apache.commons.io.input.TaggedInputStream(java.io.InputStream)" target="org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1295" source="org.apache.commons.io.input.TaggedInputStream.isCauseOf(java.lang.Throwable)" target="org.apache.commons.io.TaggedIOException.isTaggedWith(java.lang.Throwable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1296" source="org.apache.commons.io.input.TaggedInputStream.isCauseOf(java.lang.Throwable)" target="org.apache.commons.io.input.TaggedInputStream#tag">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1297" source="org.apache.commons.io.input.ProxyInputStream.handleIOException(java.io.IOException)" target="org.apache.commons.io.input.TaggedInputStream.handleIOException(java.io.IOException)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1298" source="org.apache.commons.io.input.TaggedInputStream.handleIOException(java.io.IOException)" target="org.apache.commons.io.TaggedIOException(java.io.IOException,java.io.Serializable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1299" source="org.apache.commons.io.input.TaggedInputStream.handleIOException(java.io.IOException)" target="org.apache.commons.io.input.TaggedInputStream#tag">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1300" source="org.apache.commons.io.input.TaggedInputStream.throwIfCauseOf(java.lang.Throwable)" target="org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(java.lang.Throwable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1301" source="org.apache.commons.io.input.TaggedInputStream.throwIfCauseOf(java.lang.Throwable)" target="org.apache.commons.io.input.TaggedInputStream#tag">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1302" source="org.apache.commons.io.input.TaggedInputStreamTest.testBrokenStream()" target="org.apache.commons.io.input.TaggedInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1303" source="org.apache.commons.io.input.TaggedInputStreamTest.testBrokenStream()" target="org.apache.commons.io.input.BrokenInputStream(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1304" source="org.apache.commons.io.input.TaggedInputStreamTest.testBrokenStream()" target="org.apache.commons.io.input.ProxyInputStream.available()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1305" source="org.apache.commons.io.input.TaggedInputStreamTest.testBrokenStream()" target="org.apache.commons.io.input.TaggedInputStream.isCauseOf(java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1306" source="org.apache.commons.io.input.TaggedInputStreamTest.testBrokenStream()" target="org.apache.commons.io.input.TaggedInputStream.throwIfCauseOf(java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1307" source="org.apache.commons.io.input.TaggedInputStreamTest.testBrokenStream()" target="org.apache.commons.io.input.ProxyInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1308" source="org.apache.commons.io.input.TaggedInputStreamTest.testBrokenStream()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1309" source="org.apache.commons.io.input.TaggedInputStreamTest.testEmptyStream()" target="org.apache.commons.io.input.TaggedInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1310" source="org.apache.commons.io.input.TaggedInputStreamTest.testEmptyStream()" target="org.apache.commons.io.input.ClosedInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1311" source="org.apache.commons.io.input.TaggedInputStreamTest.testNormalStream()" target="org.apache.commons.io.input.TaggedInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1312" source="org.apache.commons.io.input.TaggedInputStreamTest.testOtherException()" target="org.apache.commons.io.input.ClosedInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1313" source="org.apache.commons.io.input.TaggedInputStreamTest.testOtherException()" target="org.apache.commons.io.input.TaggedInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1314" source="org.apache.commons.io.input.TaggedInputStreamTest.testOtherException()" target="org.apache.commons.io.input.TaggedInputStream.isCauseOf(java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1315" source="org.apache.commons.io.input.TaggedInputStreamTest.testOtherException()" target="org.apache.commons.io.TaggedIOException(java.io.IOException,java.io.Serializable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1316" source="org.apache.commons.io.input.TaggedInputStreamTest.testOtherException()" target="org.apache.commons.io.input.TaggedInputStream.throwIfCauseOf(java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1317" source="org.apache.commons.io.input.TaggedInputStreamTest.testOtherException()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1318" source="org.apache.commons.io.input.Tailer(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)" target="org.apache.commons.io.input.TailerListener.init(org.apache.commons.io.input.Tailer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1319" source="org.apache.commons.io.input.Tailer#file" target="org.apache.commons.io.input.Tailer(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1320" source="org.apache.commons.io.input.Tailer#delayMillis" target="org.apache.commons.io.input.Tailer(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1321" source="org.apache.commons.io.input.Tailer#end" target="org.apache.commons.io.input.Tailer(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1322" source="org.apache.commons.io.input.Tailer#inbuf" target="org.apache.commons.io.input.Tailer(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1323" source="org.apache.commons.io.input.Tailer#listener" target="org.apache.commons.io.input.Tailer(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1324" source="org.apache.commons.io.input.Tailer#reOpen" target="org.apache.commons.io.input.Tailer(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1325" source="org.apache.commons.io.input.Tailer#cset" target="org.apache.commons.io.input.Tailer(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1326" source="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener)" target="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1327" source="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener)" target="org.apache.commons.io.input.Tailer#DEFAULT_DELAY_MILLIS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1328" source="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long)" target="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1329" source="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)" target="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1330" source="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)" target="org.apache.commons.io.input.Tailer#DEFAULT_BUFSIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1331" source="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean)" target="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1332" source="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean)" target="org.apache.commons.io.input.Tailer#DEFAULT_BUFSIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1333" source="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)" target="org.apache.commons.io.input.Tailer(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1334" source="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)" target="org.apache.commons.io.input.Tailer#DEFAULT_CHARSET">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1335" source="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,int)" target="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1336" source="org.apache.commons.io.input.Tailer.getRun()" target="org.apache.commons.io.input.Tailer#run">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1337" source="org.apache.commons.io.input.Tailer.getFile()" target="org.apache.commons.io.input.Tailer#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1338" source="org.apache.commons.io.input.Tailer.getDelay()" target="org.apache.commons.io.input.Tailer#delayMillis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1339" source="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" target="org.apache.commons.io.input.Tailer.getRun()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1340" source="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" target="org.apache.commons.io.input.TailerListener.handle(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1341" source="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1342" source="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" target="org.apache.commons.io.input.Tailer#inbuf">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1343" source="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1344" source="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" target="org.apache.commons.io.input.Tailer#listener">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1345" source="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" target="org.apache.commons.io.input.Tailer#cset">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1346" source="org.apache.commons.io.input.Tailer.create(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)" target="org.apache.commons.io.input.Tailer(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1347" source="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener)" target="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1348" source="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener)" target="org.apache.commons.io.input.Tailer#DEFAULT_DELAY_MILLIS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1349" source="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long)" target="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1350" source="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)" target="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1351" source="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)" target="org.apache.commons.io.input.Tailer#DEFAULT_BUFSIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1352" source="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean)" target="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1353" source="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean)" target="org.apache.commons.io.input.Tailer#DEFAULT_BUFSIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1354" source="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)" target="org.apache.commons.io.input.Tailer.create(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1355" source="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)" target="org.apache.commons.io.input.Tailer#DEFAULT_CHARSET">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1356" source="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,int)" target="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1357" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.input.Tailer.getRun()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1358" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.input.TailerListener.fileNotFound()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1359" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1360" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.input.TailerListener.fileRotated()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1361" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1362" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.input.TailerListener.handle(java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1363" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1364" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.input.Tailer.stop(java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1365" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.input.Tailer#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1366" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.input.Tailer#RAF_MODE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1367" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.input.Tailer#listener">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1368" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.input.Tailer#delayMillis">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1369" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.input.Tailer#end">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1370" source="org.apache.commons.io.input.Tailer.run()" target="org.apache.commons.io.input.Tailer#reOpen">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1371" source="org.apache.commons.io.input.Tailer#run" target="org.apache.commons.io.input.Tailer.stop()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1372" source="org.apache.commons.io.input.Tailer.stop(java.lang.Exception)" target="org.apache.commons.io.input.TailerListener.handle(java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1373" source="org.apache.commons.io.input.Tailer.stop(java.lang.Exception)" target="org.apache.commons.io.input.Tailer.stop()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1374" source="org.apache.commons.io.input.Tailer.stop(java.lang.Exception)" target="org.apache.commons.io.input.Tailer#listener">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1375" source="org.apache.commons.io.input.TailerListener.fileNotFound()" target="org.apache.commons.io.input.TailerListenerAdapter.fileNotFound()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1376" source="org.apache.commons.io.input.TailerListener.fileRotated()" target="org.apache.commons.io.input.TailerListenerAdapter.fileRotated()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1377" source="org.apache.commons.io.input.TailerListener.handle(java.lang.Exception)" target="org.apache.commons.io.input.TailerListenerAdapter.handle(java.lang.Exception)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1378" source="org.apache.commons.io.input.TailerListener.handle(java.lang.String)" target="org.apache.commons.io.input.TailerListenerAdapter.handle(java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1379" source="org.apache.commons.io.input.TailerListener.init(org.apache.commons.io.input.Tailer)" target="org.apache.commons.io.input.TailerListenerAdapter.init(org.apache.commons.io.input.Tailer)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1380" source="org.apache.commons.io.input.TailerTest$TestTailerListener.getLines()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#lines">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1381" source="org.apache.commons.io.input.TailerTest$TestTailerListener.clear()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#lines">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1382" source="org.apache.commons.io.input.TailerListener.fileNotFound()" target="org.apache.commons.io.input.TailerTest$TestTailerListener.fileNotFound()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1383" source="org.apache.commons.io.input.TailerTest$TestTailerListener.fileNotFound()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#notFound">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1384" source="org.apache.commons.io.input.TailerListener.fileRotated()" target="org.apache.commons.io.input.TailerTest$TestTailerListener.fileRotated()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1385" source="org.apache.commons.io.input.TailerTest$TestTailerListener.fileRotated()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#rotated">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1386" source="org.apache.commons.io.input.TailerListener.handle(java.lang.Exception)" target="org.apache.commons.io.input.TailerTest$TestTailerListener.handle(java.lang.Exception)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1387" source="org.apache.commons.io.input.TailerTest$TestTailerListener#exception" target="org.apache.commons.io.input.TailerTest$TestTailerListener.handle(java.lang.Exception)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1388" source="org.apache.commons.io.input.TailerListener.handle(java.lang.String)" target="org.apache.commons.io.input.TailerTest$TestTailerListener.handle(java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1389" source="org.apache.commons.io.input.TailerTest$TestTailerListener.handle(java.lang.String)" target="org.apache.commons.io.input.TailerTest$TestTailerListener#lines">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1390" source="org.apache.commons.io.input.TailerListener.init(org.apache.commons.io.input.Tailer)" target="org.apache.commons.io.input.TailerTest$TestTailerListener.init(org.apache.commons.io.input.Tailer)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1391" source="org.apache.commons.io.input.TailerTest$TestTailerListener.init(org.apache.commons.io.input.Tailer)" target="org.apache.commons.io.input.TailerTest$TestTailerListener#initialised">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1392" source="org.apache.commons.io.input.TailerTest(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1393" source="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)" target="org.apache.commons.io.input.TailerTest.createFile(java.io.File,long)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1394" source="org.apache.commons.io.input.TailerTest.createFile(java.io.File,long)" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1395" source="org.apache.commons.io.input.TailerTest.createFile(java.io.File,long)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1396" source="org.apache.commons.io.input.TailerTest.tearDown()" target="org.apache.commons.io.input.Tailer.stop()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1397" source="org.apache.commons.io.input.TailerTest.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1398" source="org.apache.commons.io.input.TailerTest.tearDown()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1399" source="org.apache.commons.io.input.TailerTest.tearDown()" target="org.apache.commons.io.input.TailerTest#tailer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1400" source="org.apache.commons.io.input.TailerTest.testBufferBreak()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1401" source="org.apache.commons.io.input.TailerTest.testBufferBreak()" target="org.apache.commons.io.input.TailerTest.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1402" source="org.apache.commons.io.input.TailerTest.testBufferBreak()" target="org.apache.commons.io.input.TailerTest.writeString(java.io.File,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1403" source="org.apache.commons.io.input.TailerTest.testBufferBreak()" target="org.apache.commons.io.input.TailerTest$TestTailerListener()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1404" source="org.apache.commons.io.input.TailerTest.testBufferBreak()" target="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1405" source="org.apache.commons.io.input.TailerTest.testBufferBreak()" target="org.apache.commons.io.input.TailerTest$TestTailerListener.getLines()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1406" source="org.apache.commons.io.input.TailerTest.testBufferBreak()" target="org.apache.commons.io.input.TailerTest$TestTailerListener.clear()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1407" source="org.apache.commons.io.input.TailerTest#tailer" target="org.apache.commons.io.input.TailerTest.testBufferBreak()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1408" source="org.apache.commons.io.input.TailerTest.testBufferBreak()" target="org.apache.commons.io.input.TailerTest#tailer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1409" source="org.apache.commons.io.input.TailerTest.testIO335()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1410" source="org.apache.commons.io.input.TailerTest.testIO335()" target="org.apache.commons.io.input.TailerTest.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1411" source="org.apache.commons.io.input.TailerTest.testIO335()" target="org.apache.commons.io.input.TailerTest$TestTailerListener()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1412" source="org.apache.commons.io.input.TailerTest.testIO335()" target="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1413" source="org.apache.commons.io.input.TailerTest.testIO335()" target="org.apache.commons.io.input.TailerTest.writeString(java.io.File,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1414" source="org.apache.commons.io.input.TailerTest.testIO335()" target="org.apache.commons.io.input.TailerTest$TestTailerListener.getLines()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1415" source="org.apache.commons.io.input.TailerTest.testIO335()" target="org.apache.commons.io.input.Tailer.stop()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1416" source="org.apache.commons.io.input.TailerTest#tailer" target="org.apache.commons.io.input.TailerTest.testIO335()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1417" source="org.apache.commons.io.input.TailerTest.testIO335()" target="org.apache.commons.io.input.TailerTest#tailer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1418" source="org.apache.commons.io.input.TailerTest.testInterrupt()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1419" source="org.apache.commons.io.input.TailerTest.testInterrupt()" target="org.apache.commons.io.input.TailerTest$TestTailerListener()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1420" source="org.apache.commons.io.input.TailerTest.testInterrupt()" target="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1421" source="org.apache.commons.io.input.TailerTest.testInterrupt()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1422" source="org.apache.commons.io.input.TailerTest.testInterrupt()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#initialised">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1423" source="org.apache.commons.io.input.TailerTest.testInterrupt()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#notFound">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1424" source="org.apache.commons.io.input.TailerTest.testInterrupt()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#rotated">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1425" source="org.apache.commons.io.input.TailerTest.testLongFile()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1426" source="org.apache.commons.io.input.TailerTest.testLongFile()" target="org.apache.commons.io.input.TailerTest.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1427" source="org.apache.commons.io.input.TailerTest.testLongFile()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1428" source="org.apache.commons.io.input.TailerTest.testLongFile()" target="org.apache.commons.io.input.TailerTest$TestTailerListener()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1429" source="org.apache.commons.io.input.TailerTest.testLongFile()" target="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1430" source="org.apache.commons.io.input.TailerTest.testLongFile()" target="org.apache.commons.io.input.TailerTest$TestTailerListener.getLines()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1431" source="org.apache.commons.io.input.TailerTest.testLongFile()" target="org.apache.commons.io.input.TailerTest$TestTailerListener.clear()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1432" source="org.apache.commons.io.input.TailerTest#tailer" target="org.apache.commons.io.input.TailerTest.testLongFile()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1433" source="org.apache.commons.io.input.TailerTest.testLongFile()" target="org.apache.commons.io.input.TailerTest#tailer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1434" source="org.apache.commons.io.input.TailerTest.testLongFile()" target="java.lang.System#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1435" source="org.apache.commons.io.input.TailerTest.testMultiByteBreak()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1436" source="org.apache.commons.io.input.TailerTest.testMultiByteBreak()" target="org.apache.commons.io.input.TailerTest.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1437" source="org.apache.commons.io.input.TailerTest.testMultiByteBreak()" target="org.apache.commons.io.input.TailerTest$TestTailerListener()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1438" source="org.apache.commons.io.input.TailerTest.testMultiByteBreak()" target="org.apache.commons.io.input.Tailer(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1439" source="org.apache.commons.io.input.TailerTest.testMultiByteBreak()" target="org.apache.commons.io.input.TailerTest$TestTailerListener.getLines()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1440" source="org.apache.commons.io.input.TailerTest.testMultiByteBreak()" target="org.apache.commons.io.input.Tailer.stop()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1441" source="org.apache.commons.io.input.TailerTest.testMultiByteBreak()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1442" source="org.apache.commons.io.input.TailerTest.testMultiByteBreak()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1443" source="org.apache.commons.io.input.TailerTest.testMultiByteBreak()" target="java.lang.System#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1444" source="org.apache.commons.io.input.TailerTest.testMultiByteBreak()" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1445" source="org.apache.commons.io.input.TailerTest#tailer" target="org.apache.commons.io.input.TailerTest.testMultiByteBreak()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1446" source="org.apache.commons.io.input.TailerTest.testMultiByteBreak()" target="org.apache.commons.io.input.TailerTest#tailer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1447" source="org.apache.commons.io.input.TailerTest.testStopWithNoFile()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1448" source="org.apache.commons.io.input.TailerTest.testStopWithNoFile()" target="org.apache.commons.io.input.TailerTest$TestTailerListener()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1449" source="org.apache.commons.io.input.TailerTest.testStopWithNoFile()" target="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1450" source="org.apache.commons.io.input.TailerTest.testStopWithNoFile()" target="org.apache.commons.io.input.Tailer.stop()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1451" source="org.apache.commons.io.input.TailerTest#tailer" target="org.apache.commons.io.input.TailerTest.testStopWithNoFile()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1452" source="org.apache.commons.io.input.TailerTest.testStopWithNoFile()" target="org.apache.commons.io.input.TailerTest#tailer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1453" source="org.apache.commons.io.input.TailerTest.testStopWithNoFile()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1454" source="org.apache.commons.io.input.TailerTest.testStopWithNoFile()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#initialised">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1455" source="org.apache.commons.io.input.TailerTest.testStopWithNoFile()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#notFound">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1456" source="org.apache.commons.io.input.TailerTest.testStopWithNoFile()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#rotated">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1457" source="org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1458" source="org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()" target="org.apache.commons.io.input.TailerTest$TestTailerListener()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1459" source="org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()" target="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1460" source="org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()" target="org.apache.commons.io.input.Tailer.stop()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1461" source="org.apache.commons.io.input.TailerTest#tailer" target="org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1462" source="org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()" target="org.apache.commons.io.input.TailerTest#tailer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1463" source="org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1464" source="org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#initialised">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1465" source="org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#notFound">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1466" source="org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#rotated">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1467" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1468" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.input.TailerTest.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1469" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.input.TailerTest$TestTailerListener()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1470" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1471" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.input.TailerTest.write(java.io.File,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1472" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.input.TailerTest$TestTailerListener.getLines()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1473" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.input.TailerTest$TestTailerListener.clear()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1474" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1475" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.input.Tailer.stop()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1476" source="org.apache.commons.io.input.TailerTest#tailer" target="org.apache.commons.io.input.TailerTest.testTailer()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1477" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.input.TailerTest#tailer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1478" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1479" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#initialised">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1480" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#notFound">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1481" source="org.apache.commons.io.input.TailerTest.testTailer()" target="org.apache.commons.io.input.TailerTest$TestTailerListener#rotated">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1482" source="org.apache.commons.io.input.TailerTest.testTailerEof()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1483" source="org.apache.commons.io.input.TailerTest.testTailerEof()" target="org.apache.commons.io.input.TailerTest.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1484" source="org.apache.commons.io.input.TailerTest.testTailerEof()" target="org.apache.commons.io.input.TailerTest$TestTailerListener()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1485" source="org.apache.commons.io.input.TailerTest.testTailerEof()" target="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1486" source="org.apache.commons.io.input.TailerTest.testTailerEof()" target="org.apache.commons.io.input.TailerTest.writeString(java.io.File,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1487" source="org.apache.commons.io.input.TailerTest.testTailerEof()" target="org.apache.commons.io.input.TailerTest$TestTailerListener.getLines()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1488" source="org.apache.commons.io.input.TailerTest.testTailerEof()" target="org.apache.commons.io.input.TailerTest$TestTailerListener.clear()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1489" source="org.apache.commons.io.input.TailerTest.testTailerEof()" target="org.apache.commons.io.input.Tailer.stop()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1490" source="org.apache.commons.io.input.TailerTest.testTailerEof()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1491" source="org.apache.commons.io.input.TailerTest.write(java.io.File,java.lang.String[])" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1492" source="org.apache.commons.io.input.TailerTest.writeString(java.io.File,java.lang.String[])" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1493" source="org.apache.commons.io.input.TeeInputStream(java.io.InputStream,java.io.OutputStream)" target="org.apache.commons.io.input.TeeInputStream(java.io.InputStream,java.io.OutputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1494" source="org.apache.commons.io.input.TeeInputStream(java.io.InputStream,java.io.OutputStream,boolean)" target="org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1495" source="org.apache.commons.io.input.TeeInputStream#branch" target="org.apache.commons.io.input.TeeInputStream(java.io.InputStream,java.io.OutputStream,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1496" source="org.apache.commons.io.input.TeeInputStream#closeBranch" target="org.apache.commons.io.input.TeeInputStream(java.io.InputStream,java.io.OutputStream,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1497" source="org.apache.commons.io.input.ProxyInputStream.read()" target="org.apache.commons.io.input.TeeInputStream.read()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1498" source="org.apache.commons.io.input.TeeInputStream.read()" target="org.apache.commons.io.input.ProxyInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1499" source="org.apache.commons.io.input.TeeInputStream.read()" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1500" source="org.apache.commons.io.input.TeeInputStream.read()" target="org.apache.commons.io.input.TeeInputStream#branch">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1501" source="org.apache.commons.io.input.ProxyInputStream.read(byte[])" target="org.apache.commons.io.input.TeeInputStream.read(byte[])">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1502" source="org.apache.commons.io.input.TeeInputStream.read(byte[])" target="org.apache.commons.io.input.ProxyInputStream.read(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1503" source="org.apache.commons.io.input.TeeInputStream.read(byte[])" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1504" source="org.apache.commons.io.input.TeeInputStream.read(byte[])" target="org.apache.commons.io.input.TeeInputStream#branch">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1505" source="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.TeeInputStream.read(byte[],int,int)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1506" source="org.apache.commons.io.input.TeeInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1507" source="org.apache.commons.io.input.TeeInputStream.read(byte[],int,int)" target="org.apache.commons.io.input.TeeInputStream#branch">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1508" source="org.apache.commons.io.input.ProxyInputStream.close()" target="org.apache.commons.io.input.TeeInputStream.close()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1509" source="org.apache.commons.io.input.TeeInputStream.close()" target="org.apache.commons.io.input.ProxyInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1510" source="org.apache.commons.io.input.TeeInputStream.close()" target="org.apache.commons.io.input.TeeInputStream#closeBranch">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1511" source="org.apache.commons.io.input.TeeInputStream.close()" target="org.apache.commons.io.input.TeeInputStream#branch">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1512" source="org.apache.commons.io.input.TeeInputStreamTest.setUp()" target="org.apache.commons.io.input.TeeInputStream(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1513" source="org.apache.commons.io.input.TeeInputStreamTest.setUp()" target="org.apache.commons.io.input.TeeInputStreamTest#ASCII">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1514" source="org.apache.commons.io.input.TeeInputStreamTest#output" target="org.apache.commons.io.input.TeeInputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1515" source="org.apache.commons.io.input.TeeInputStreamTest#tee" target="org.apache.commons.io.input.TeeInputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1516" source="org.apache.commons.io.input.TeeInputStreamTest.setUp()" target="org.apache.commons.io.input.TeeInputStreamTest#output">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1517" source="org.apache.commons.io.input.TeeInputStreamTest.testMarkReset()" target="org.apache.commons.io.input.TeeInputStreamTest#tee">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1518" source="org.apache.commons.io.input.TeeInputStreamTest.testMarkReset()" target="org.apache.commons.io.input.TeeInputStreamTest#output">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1519" source="org.apache.commons.io.input.TeeInputStreamTest.testMarkReset()" target="org.apache.commons.io.input.TeeInputStreamTest#ASCII">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1520" source="org.apache.commons.io.input.TeeInputStreamTest.testReadEverything()" target="org.apache.commons.io.input.TeeInputStreamTest#tee">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1521" source="org.apache.commons.io.input.TeeInputStreamTest.testReadEverything()" target="org.apache.commons.io.input.TeeInputStreamTest#output">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1522" source="org.apache.commons.io.input.TeeInputStreamTest.testReadEverything()" target="org.apache.commons.io.input.TeeInputStreamTest#ASCII">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1523" source="org.apache.commons.io.input.TeeInputStreamTest.testReadNothing()" target="org.apache.commons.io.input.TeeInputStreamTest#output">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1524" source="org.apache.commons.io.input.TeeInputStreamTest.testReadNothing()" target="org.apache.commons.io.input.TeeInputStreamTest#ASCII">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1525" source="org.apache.commons.io.input.TeeInputStreamTest.testReadOneByte()" target="org.apache.commons.io.input.TeeInputStreamTest#tee">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1526" source="org.apache.commons.io.input.TeeInputStreamTest.testReadOneByte()" target="org.apache.commons.io.input.TeeInputStreamTest#output">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1527" source="org.apache.commons.io.input.TeeInputStreamTest.testReadOneByte()" target="org.apache.commons.io.input.TeeInputStreamTest#ASCII">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1528" source="org.apache.commons.io.input.TeeInputStreamTest.testReadToArray()" target="org.apache.commons.io.input.TeeInputStreamTest#tee">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1529" source="org.apache.commons.io.input.TeeInputStreamTest.testReadToArray()" target="org.apache.commons.io.input.TeeInputStreamTest#output">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1530" source="org.apache.commons.io.input.TeeInputStreamTest.testReadToArray()" target="org.apache.commons.io.input.TeeInputStreamTest#ASCII">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1531" source="org.apache.commons.io.input.TeeInputStreamTest.testReadToArrayWithOffset()" target="org.apache.commons.io.input.TeeInputStreamTest#tee">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1532" source="org.apache.commons.io.input.TeeInputStreamTest.testReadToArrayWithOffset()" target="org.apache.commons.io.input.TeeInputStreamTest#output">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1533" source="org.apache.commons.io.input.TeeInputStreamTest.testReadToArrayWithOffset()" target="org.apache.commons.io.input.TeeInputStreamTest#ASCII">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1534" source="org.apache.commons.io.input.TeeInputStreamTest.testSkip()" target="org.apache.commons.io.input.TeeInputStreamTest#tee">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1535" source="org.apache.commons.io.input.TeeInputStreamTest.testSkip()" target="org.apache.commons.io.input.TeeInputStreamTest#output">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1536" source="org.apache.commons.io.input.TeeInputStreamTest.testSkip()" target="org.apache.commons.io.input.TeeInputStreamTest#ASCII">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1537" source="org.apache.commons.io.input.UnixLineEndingInputStream#target" target="org.apache.commons.io.input.UnixLineEndingInputStream(java.io.InputStream,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1538" source="org.apache.commons.io.input.UnixLineEndingInputStream#ensureLineFeedAtEndOfFile" target="org.apache.commons.io.input.UnixLineEndingInputStream(java.io.InputStream,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1539" source="org.apache.commons.io.input.UnixLineEndingInputStream.eofGame(boolean)" target="org.apache.commons.io.input.UnixLineEndingInputStream#ensureLineFeedAtEndOfFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1540" source="org.apache.commons.io.input.UnixLineEndingInputStream.eofGame(boolean)" target="org.apache.commons.io.input.UnixLineEndingInputStream#slashNSeen">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1541" source="org.apache.commons.io.input.UnixLineEndingInputStream#slashNSeen" target="org.apache.commons.io.input.UnixLineEndingInputStream.eofGame(boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1542" source="org.apache.commons.io.input.UnixLineEndingInputStream.read()" target="org.apache.commons.io.input.UnixLineEndingInputStream.eofGame(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1543" source="org.apache.commons.io.input.UnixLineEndingInputStream.read()" target="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1544" source="org.apache.commons.io.input.UnixLineEndingInputStream.read()" target="org.apache.commons.io.input.UnixLineEndingInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1545" source="org.apache.commons.io.input.UnixLineEndingInputStream.read()" target="org.apache.commons.io.input.UnixLineEndingInputStream#slashRSeen">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1546" source="org.apache.commons.io.input.UnixLineEndingInputStream.read()" target="org.apache.commons.io.input.UnixLineEndingInputStream#eofSeen">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1547" source="org.apache.commons.io.input.UnixLineEndingInputStream.read()" target="org.apache.commons.io.input.UnixLineEndingInputStream#slashNSeen">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1548" source="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" target="org.apache.commons.io.input.UnixLineEndingInputStream#target">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1549" source="org.apache.commons.io.input.UnixLineEndingInputStream#eofSeen" target="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1550" source="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" target="org.apache.commons.io.input.UnixLineEndingInputStream#eofSeen">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1551" source="org.apache.commons.io.input.UnixLineEndingInputStream#slashNSeen" target="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1552" source="org.apache.commons.io.input.UnixLineEndingInputStream#slashRSeen" target="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1553" source="org.apache.commons.io.input.UnixLineEndingInputStream.close()" target="org.apache.commons.io.input.UnixLineEndingInputStream#target">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1554" source="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String)" target="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1555" source="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String,boolean)" target="org.apache.commons.io.input.UnixLineEndingInputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1556" source="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String,boolean)" target="org.apache.commons.io.input.UnixLineEndingInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1557" source="org.apache.commons.io.input.UnixLineEndingInputStreamTest.crAtEnd()" target="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1558" source="org.apache.commons.io.input.UnixLineEndingInputStreamTest.crOnlyEnsureAtEof()" target="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1559" source="org.apache.commons.io.input.UnixLineEndingInputStreamTest.crOnlyNotAtEof()" target="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1560" source="org.apache.commons.io.input.UnixLineEndingInputStreamTest.inTheMiddleOfTheLine()" target="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1561" source="org.apache.commons.io.input.UnixLineEndingInputStreamTest.multipleBlankLines()" target="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1562" source="org.apache.commons.io.input.UnixLineEndingInputStreamTest.retainLineFeed()" target="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1563" source="org.apache.commons.io.input.UnixLineEndingInputStreamTest.simpleString()" target="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1564" source="org.apache.commons.io.input.UnixLineEndingInputStreamTest.twoLinesAtEnd()" target="org.apache.commons.io.input.UnixLineEndingInputStreamTest.roundtrip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1565" source="org.apache.commons.io.input.WindowsLineEndingInputStream#target" target="org.apache.commons.io.input.WindowsLineEndingInputStream(java.io.InputStream,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1566" source="org.apache.commons.io.input.WindowsLineEndingInputStream#ensureLineFeedAtEndOfFile" target="org.apache.commons.io.input.WindowsLineEndingInputStream(java.io.InputStream,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1567" source="org.apache.commons.io.input.WindowsLineEndingInputStream.eofGame()" target="org.apache.commons.io.input.WindowsLineEndingInputStream#ensureLineFeedAtEndOfFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1568" source="org.apache.commons.io.input.WindowsLineEndingInputStream.eofGame()" target="org.apache.commons.io.input.WindowsLineEndingInputStream#slashNSeen">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1569" source="org.apache.commons.io.input.WindowsLineEndingInputStream.eofGame()" target="org.apache.commons.io.input.WindowsLineEndingInputStream#slashRSeen">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1570" source="org.apache.commons.io.input.WindowsLineEndingInputStream#slashRSeen" target="org.apache.commons.io.input.WindowsLineEndingInputStream.eofGame()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1571" source="org.apache.commons.io.input.WindowsLineEndingInputStream#slashNSeen" target="org.apache.commons.io.input.WindowsLineEndingInputStream.eofGame()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1572" source="org.apache.commons.io.input.WindowsLineEndingInputStream.read()" target="org.apache.commons.io.input.WindowsLineEndingInputStream.eofGame()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1573" source="org.apache.commons.io.input.WindowsLineEndingInputStream.read()" target="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1574" source="org.apache.commons.io.input.WindowsLineEndingInputStream.read()" target="org.apache.commons.io.input.WindowsLineEndingInputStream#eofSeen">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1575" source="org.apache.commons.io.input.WindowsLineEndingInputStream.read()" target="org.apache.commons.io.input.WindowsLineEndingInputStream#injectSlashN">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1576" source="org.apache.commons.io.input.WindowsLineEndingInputStream#injectSlashN" target="org.apache.commons.io.input.WindowsLineEndingInputStream.read()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1577" source="org.apache.commons.io.input.WindowsLineEndingInputStream.read()" target="org.apache.commons.io.input.WindowsLineEndingInputStream#slashRSeen">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1578" source="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()" target="org.apache.commons.io.input.WindowsLineEndingInputStream#target">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1579" source="org.apache.commons.io.input.WindowsLineEndingInputStream#eofSeen" target="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1580" source="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()" target="org.apache.commons.io.input.WindowsLineEndingInputStream#eofSeen">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1581" source="org.apache.commons.io.input.WindowsLineEndingInputStream#slashRSeen" target="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1582" source="org.apache.commons.io.input.WindowsLineEndingInputStream#slashNSeen" target="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1583" source="org.apache.commons.io.input.WindowsLineEndingInputStream.close()" target="org.apache.commons.io.input.WindowsLineEndingInputStream#target">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1584" source="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.roundtrip(java.lang.String)" target="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.roundtrip(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1585" source="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.roundtrip(java.lang.String,boolean)" target="org.apache.commons.io.input.WindowsLineEndingInputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1586" source="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.roundtrip(java.lang.String,boolean)" target="org.apache.commons.io.input.WindowsLineEndingInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1587" source="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.inTheMiddleOfTheLine()" target="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.roundtrip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1588" source="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.linuxLinefeeds()" target="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.roundtrip(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1589" source="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.malformed()" target="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.roundtrip(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1590" source="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.multipleBlankLines()" target="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.roundtrip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1591" source="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.retainLineFeed()" target="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.roundtrip(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1592" source="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.simpleString()" target="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.roundtrip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1593" source="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.twoLinesAtEnd()" target="org.apache.commons.io.input.WindowsLineEndingInputStreamTest.roundtrip(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1594" source="org.apache.commons.io.input.XmlStreamReader(java.io.File)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1595" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1596" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1597" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean,java.lang.String)" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1598" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.doRawStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1599" source="org.apache.commons.io.input.XmlStreamReader#defaultEncoding" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1600" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1601" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#BOMS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1602" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#XML_GUESS_BYTES">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1603" source="org.apache.commons.io.input.XmlStreamReader#encoding" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1604" source="org.apache.commons.io.input.XmlStreamReader#reader" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1605" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#encoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1606" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1607" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1608" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1609" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1610" source="org.apache.commons.io.input.XmlStreamReader#defaultEncoding" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1611" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1612" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#BOMS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1613" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#XML_GUESS_BYTES">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1614" source="org.apache.commons.io.input.XmlStreamReader#encoding" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1615" source="org.apache.commons.io.input.XmlStreamReader#reader" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1616" source="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#encoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1617" source="org.apache.commons.io.input.XmlStreamReader(java.net.URL)" target="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1618" source="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)" target="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1619" source="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1620" source="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.doRawStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1621" source="org.apache.commons.io.input.XmlStreamReader#defaultEncoding" target="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1622" source="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1623" source="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#BOMS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1624" source="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#XML_GUESS_BYTES">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1625" source="org.apache.commons.io.input.XmlStreamReader#encoding" target="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1626" source="org.apache.commons.io.input.XmlStreamReader#reader" target="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1627" source="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#encoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1628" source="org.apache.commons.io.input.XmlStreamReader.read(char[],int,int)" target="org.apache.commons.io.input.XmlStreamReader#reader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1629" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1630" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1631" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader.isAppXml(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1632" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader.isTextXml(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1633" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1634" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1635" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader#HTTP_EX_3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1636" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader#defaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1637" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader#US_ASCII">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1638" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1639" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader#UTF_16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1640" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader#HTTP_EX_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1641" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader#UTF_16">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1642" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader#HTTP_EX_2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1643" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader#UTF_32BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1644" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader#UTF_32LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1645" source="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader#UTF_32">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1646" source="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1647" source="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#defaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1648" source="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1649" source="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#UTF_16">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1650" source="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1651" source="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#UTF_16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1652" source="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#RAW_EX_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1653" source="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#UTF_32BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1654" source="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#UTF_32LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1655" source="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#UTF_32">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1656" source="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#RAW_EX_2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1657" source="org.apache.commons.io.input.XmlStreamReader.doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.BOMInputStream.getBOMCharsetName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1658" source="org.apache.commons.io.input.XmlStreamReader.doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1659" source="org.apache.commons.io.input.XmlStreamReader.doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1660" source="org.apache.commons.io.input.XmlStreamReader.doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)" target="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1661" source="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" target="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1662" source="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" target="org.apache.commons.io.input.XmlStreamReaderException.getBomEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1663" source="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" target="org.apache.commons.io.input.XmlStreamReaderException.getXmlGuessEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1664" source="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" target="org.apache.commons.io.input.XmlStreamReaderException.getXmlEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1665" source="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" target="org.apache.commons.io.input.XmlStreamReaderException.getContentTypeEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1666" source="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" target="org.apache.commons.io.input.XmlStreamReader#defaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1667" source="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)" target="org.apache.commons.io.input.XmlStreamReader#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1668" source="org.apache.commons.io.input.XmlStreamReader.doRawStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,boolean)" target="org.apache.commons.io.input.BOMInputStream.getBOMCharsetName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1669" source="org.apache.commons.io.input.XmlStreamReader.doRawStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,boolean)" target="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1670" source="org.apache.commons.io.input.XmlStreamReader.doRawStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,boolean)" target="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1671" source="org.apache.commons.io.input.XmlStreamReader.doRawStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,boolean)" target="org.apache.commons.io.input.XmlStreamReader.doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1672" source="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#CHARSET_PATTERN">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1673" source="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" target="java.util.Locale#US">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1674" source="org.apache.commons.io.input.XmlStreamReader.getDefaultEncoding()" target="org.apache.commons.io.input.XmlStreamReader#defaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1675" source="org.apache.commons.io.input.XmlStreamReader.getEncoding()" target="org.apache.commons.io.input.XmlStreamReader#encoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1676" source="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1677" source="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader#ENCODING_PATTERN">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1678" source="org.apache.commons.io.input.XmlStreamReader.close()" target="org.apache.commons.io.input.XmlStreamReader#reader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1679" source="org.apache.commons.io.input.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1680" source="org.apache.commons.io.input.XmlStreamReaderException#contentTypeMime" target="org.apache.commons.io.input.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1681" source="org.apache.commons.io.input.XmlStreamReaderException#contentTypeEncoding" target="org.apache.commons.io.input.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1682" source="org.apache.commons.io.input.XmlStreamReaderException#bomEncoding" target="org.apache.commons.io.input.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1683" source="org.apache.commons.io.input.XmlStreamReaderException#xmlGuessEncoding" target="org.apache.commons.io.input.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1684" source="org.apache.commons.io.input.XmlStreamReaderException#xmlEncoding" target="org.apache.commons.io.input.XmlStreamReaderException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1685" source="org.apache.commons.io.input.XmlStreamReaderException.getBomEncoding()" target="org.apache.commons.io.input.XmlStreamReaderException#bomEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1686" source="org.apache.commons.io.input.XmlStreamReaderException.getContentTypeEncoding()" target="org.apache.commons.io.input.XmlStreamReaderException#contentTypeEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1687" source="org.apache.commons.io.input.XmlStreamReaderException.getContentTypeMime()" target="org.apache.commons.io.input.XmlStreamReaderException#contentTypeMime">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1688" source="org.apache.commons.io.input.XmlStreamReaderException.getXmlEncoding()" target="org.apache.commons.io.input.XmlStreamReaderException#xmlEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1689" source="org.apache.commons.io.input.XmlStreamReaderException.getXmlGuessEncoding()" target="org.apache.commons.io.input.XmlStreamReaderException#xmlGuessEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1690" source="org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest.getXML(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1691" source="org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#BOMs">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1692" source="org.apache.commons.io.input.XmlStreamReaderTest.getXML(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XMLs">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1693" source="org.apache.commons.io.input.XmlStreamReaderTest.getXML(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#INFO">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1694" source="org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1695" source="org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1696" source="org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.getEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1697" source="org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1698" source="org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1699" source="org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1700" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1701" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1702" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1703" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1704" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1705" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1706" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.getEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1707" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1708" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1709" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1710" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1711" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1712" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.getEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1713" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1714" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1715" source="org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1716" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1717" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1718" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.getEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1719" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1720" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1721" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1722" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1723" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.getEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1724" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1725" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1726" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1727" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1728" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1729" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1730" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1731" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.getEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1732" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1733" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1734" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1735" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1736" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1737" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML4">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1738" source="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderTest#XML5">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1739" source="org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1740" source="org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()" target="org.apache.commons.io.input.XmlStreamReader.getEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1741" source="org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()" target="org.apache.commons.io.input.XmlStreamReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1742" source="org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()" target="org.apache.commons.io.input.XmlStreamReaderTest#ENCODING_ATTRIBUTE_XML">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1743" source="org.apache.commons.io.input.XmlStreamReaderTest.testHttp()" target="org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1744" source="org.apache.commons.io.input.XmlStreamReaderTest.testHttp()" target="org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1745" source="org.apache.commons.io.input.XmlStreamReaderTest.testHttp()" target="org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1746" source="org.apache.commons.io.input.XmlStreamReaderTest.testHttp()" target="org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1747" source="org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()" target="org.apache.commons.io.input.XmlStreamReaderTest.getXML(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1748" source="org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1749" source="org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()" target="org.apache.commons.io.input.XmlStreamReader.getEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1750" source="org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()" target="org.apache.commons.io.IOUtils.toString(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1751" source="org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()" target="org.apache.commons.io.input.XmlStreamReaderTest#XML3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1752" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf16()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1753" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf16()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1754" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf32()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1755" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf32()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1756" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf8()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1757" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf8()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1758" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()" target="org.apache.commons.io.input.XmlStreamReaderTest.getXML(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1759" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1760" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()" target="org.apache.commons.io.input.XmlStreamReader.getEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1761" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()" target="org.apache.commons.io.IOUtils.toString(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1762" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()" target="org.apache.commons.io.input.XmlStreamReaderTest#XML3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1763" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomCp1047()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1764" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomIso8859_1()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1765" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUsAscii()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1766" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16BE()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1767" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16LE()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1768" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32BE()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1769" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32LE()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1770" source="org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf8()" target="org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1771" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader(java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1772" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1773" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1774" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1775" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1776" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1777" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1778" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkAppXml(boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.isAppXml(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1779" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeEncoding(java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1780" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeMime(java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1781" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1782" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1783" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderException.getBomEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1784" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderException.getXmlGuessEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1785" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderException.getXmlEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1786" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1787" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderException.getContentTypeEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1788" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1789" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderException.getContentTypeMime()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1790" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1791" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1792" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderException.getBomEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1793" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderException.getXmlGuessEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1794" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderException.getXmlEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1795" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderException.getContentTypeEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1796" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderException.getContentTypeMime()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1797" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkTextXml(boolean,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReader.isTextXml(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1798" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testAppXml()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkAppXml(boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1799" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1800" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1801" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#HTTPMGS3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1802" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#TXTXML">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1803" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1804" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1805" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1806" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#HTTPMGS1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1807" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#HTTPMGS2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1808" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF16">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1809" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1810" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1811" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1812" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#TXTXML">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1813" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1814" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF32LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1815" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF32BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1816" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#HTTPMGS1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1817" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#HTTPMGS2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1818" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF32">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1819" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#APPXML_UTF8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1820" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalUTF16()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1821" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalUTF16()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1822" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalUTF16()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#RAWMGS1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1823" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalUTF32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1824" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalUTF32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1825" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalUTF32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#RAWMGS1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1826" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingNoBOM()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1827" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingNoBOM()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1828" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingNoBOM()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#RAWMGS2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1829" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1830" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1831" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1832" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest#RAWMGS1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1833" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandardUtf32()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1834" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testContentTypeEncoding()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeEncoding(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1835" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testContentTypeMime()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeMime(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1836" source="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testTextXml()" target="org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkTextXml(boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1837" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.touch(java.io.File)" target="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1838" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.touch(java.io.File)" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.sleepHandleInterruped(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1839" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.touch(java.io.File)" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#pauseTime">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1840" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)" target="org.apache.commons.io.monitor.CollectionFileListener.getCreatedDirectories()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1841" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)" target="org.apache.commons.io.monitor.CollectionFileListener.getChangedDirectories()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1842" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)" target="org.apache.commons.io.monitor.CollectionFileListener.getDeletedDirectories()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1843" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)" target="org.apache.commons.io.monitor.CollectionFileListener.getCreatedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1844" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)" target="org.apache.commons.io.monitor.CollectionFileListener.getChangedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1845" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)" target="org.apache.commons.io.monitor.CollectionFileListener.getDeletedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1846" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#listener">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1847" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionsEmpty(java.lang.String)" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1848" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.createObserver(java.io.File,java.io.FileFilter)" target="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File,java.io.FileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1849" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.createObserver(java.io.File,java.io.FileFilter)" target="org.apache.commons.io.monitor.FileAlterationObserver.addListener(org.apache.commons.io.monitor.FileAlterationListener)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1850" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.createObserver(java.io.File,java.io.FileFilter)" target="org.apache.commons.io.monitor.FileAlterationListenerAdaptor()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1851" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.createObserver(java.io.File,java.io.FileFilter)" target="org.apache.commons.io.monitor.FileAlterationObserver.initialize()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1852" source="org.apache.commons.io.monitor.AbstractMonitorTestCase#observer" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.createObserver(java.io.File,java.io.FileFilter)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1853" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.createObserver(java.io.File,java.io.FileFilter)" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#observer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1854" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.createObserver(java.io.File,java.io.FileFilter)" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#listener">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1855" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()" target="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1856" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()" target="org.apache.commons.io.filefilter.FileFilterUtils.fileFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1857" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()" target="org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1858" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()" target="org.apache.commons.io.filefilter.FileFilterUtils.and(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1859" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()" target="org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1860" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()" target="org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1861" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.createObserver(java.io.File,java.io.FileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1862" source="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1863" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDirName">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1864" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1865" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()" target="org.apache.commons.io.filefilter.HiddenFileFilter#VISIBLE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1866" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1867" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.tearDown()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1868" source="org.apache.commons.io.monitor.CollectionFileListener#clearOnStart" target="org.apache.commons.io.monitor.CollectionFileListener(boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1869" source="org.apache.commons.io.monitor.CollectionFileListener.getChangedDirectories()" target="org.apache.commons.io.monitor.CollectionFileListener#changedDirectories">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1870" source="org.apache.commons.io.monitor.CollectionFileListener.getChangedFiles()" target="org.apache.commons.io.monitor.CollectionFileListener#changedFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1871" source="org.apache.commons.io.monitor.CollectionFileListener.getCreatedDirectories()" target="org.apache.commons.io.monitor.CollectionFileListener#createdDirectories">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1872" source="org.apache.commons.io.monitor.CollectionFileListener.getCreatedFiles()" target="org.apache.commons.io.monitor.CollectionFileListener#createdFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1873" source="org.apache.commons.io.monitor.CollectionFileListener.getDeletedDirectories()" target="org.apache.commons.io.monitor.CollectionFileListener#deletedDirectories">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1874" source="org.apache.commons.io.monitor.CollectionFileListener.getDeletedFiles()" target="org.apache.commons.io.monitor.CollectionFileListener#deletedFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1875" source="org.apache.commons.io.monitor.CollectionFileListener.clear()" target="org.apache.commons.io.monitor.CollectionFileListener#createdFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1876" source="org.apache.commons.io.monitor.CollectionFileListener.clear()" target="org.apache.commons.io.monitor.CollectionFileListener#changedFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1877" source="org.apache.commons.io.monitor.CollectionFileListener.clear()" target="org.apache.commons.io.monitor.CollectionFileListener#deletedFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1878" source="org.apache.commons.io.monitor.CollectionFileListener.clear()" target="org.apache.commons.io.monitor.CollectionFileListener#createdDirectories">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1879" source="org.apache.commons.io.monitor.CollectionFileListener.clear()" target="org.apache.commons.io.monitor.CollectionFileListener#changedDirectories">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1880" source="org.apache.commons.io.monitor.CollectionFileListener.clear()" target="org.apache.commons.io.monitor.CollectionFileListener#deletedDirectories">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1881" source="org.apache.commons.io.monitor.FileAlterationListener.onDirectoryChange(java.io.File)" target="org.apache.commons.io.monitor.CollectionFileListener.onDirectoryChange(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1882" source="org.apache.commons.io.monitor.CollectionFileListener.onDirectoryChange(java.io.File)" target="org.apache.commons.io.monitor.CollectionFileListener#changedDirectories">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1883" source="org.apache.commons.io.monitor.FileAlterationListener.onDirectoryCreate(java.io.File)" target="org.apache.commons.io.monitor.CollectionFileListener.onDirectoryCreate(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1884" source="org.apache.commons.io.monitor.CollectionFileListener.onDirectoryCreate(java.io.File)" target="org.apache.commons.io.monitor.CollectionFileListener#createdDirectories">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1885" source="org.apache.commons.io.monitor.FileAlterationListener.onDirectoryDelete(java.io.File)" target="org.apache.commons.io.monitor.CollectionFileListener.onDirectoryDelete(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1886" source="org.apache.commons.io.monitor.CollectionFileListener.onDirectoryDelete(java.io.File)" target="org.apache.commons.io.monitor.CollectionFileListener#deletedDirectories">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1887" source="org.apache.commons.io.monitor.FileAlterationListener.onFileChange(java.io.File)" target="org.apache.commons.io.monitor.CollectionFileListener.onFileChange(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1888" source="org.apache.commons.io.monitor.CollectionFileListener.onFileChange(java.io.File)" target="org.apache.commons.io.monitor.CollectionFileListener#changedFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1889" source="org.apache.commons.io.monitor.FileAlterationListener.onFileCreate(java.io.File)" target="org.apache.commons.io.monitor.CollectionFileListener.onFileCreate(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1890" source="org.apache.commons.io.monitor.CollectionFileListener.onFileCreate(java.io.File)" target="org.apache.commons.io.monitor.CollectionFileListener#createdFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1891" source="org.apache.commons.io.monitor.FileAlterationListener.onFileDelete(java.io.File)" target="org.apache.commons.io.monitor.CollectionFileListener.onFileDelete(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1892" source="org.apache.commons.io.monitor.CollectionFileListener.onFileDelete(java.io.File)" target="org.apache.commons.io.monitor.CollectionFileListener#deletedFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1893" source="org.apache.commons.io.monitor.FileAlterationListener.onStart(org.apache.commons.io.monitor.FileAlterationObserver)" target="org.apache.commons.io.monitor.CollectionFileListener.onStart(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1894" source="org.apache.commons.io.monitor.CollectionFileListener.onStart(org.apache.commons.io.monitor.FileAlterationObserver)" target="org.apache.commons.io.monitor.CollectionFileListener.clear()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1895" source="org.apache.commons.io.monitor.CollectionFileListener.onStart(org.apache.commons.io.monitor.FileAlterationObserver)" target="org.apache.commons.io.monitor.CollectionFileListener#clearOnStart">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1896" source="org.apache.commons.io.monitor.FileAlterationListener.onStop(org.apache.commons.io.monitor.FileAlterationObserver)" target="org.apache.commons.io.monitor.CollectionFileListener.onStop(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1897" source="org.apache.commons.io.monitor.FileAlterationListener.onDirectoryChange(java.io.File)" target="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onDirectoryChange(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1898" source="org.apache.commons.io.monitor.FileAlterationListener.onDirectoryCreate(java.io.File)" target="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onDirectoryCreate(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1899" source="org.apache.commons.io.monitor.FileAlterationListener.onDirectoryDelete(java.io.File)" target="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onDirectoryDelete(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1900" source="org.apache.commons.io.monitor.FileAlterationListener.onFileChange(java.io.File)" target="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onFileChange(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1901" source="org.apache.commons.io.monitor.FileAlterationListener.onFileCreate(java.io.File)" target="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onFileCreate(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1902" source="org.apache.commons.io.monitor.FileAlterationListener.onFileDelete(java.io.File)" target="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onFileDelete(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1903" source="org.apache.commons.io.monitor.FileAlterationListener.onStart(org.apache.commons.io.monitor.FileAlterationObserver)" target="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onStart(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1904" source="org.apache.commons.io.monitor.FileAlterationListener.onStop(org.apache.commons.io.monitor.FileAlterationObserver)" target="org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onStop(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1905" source="org.apache.commons.io.monitor.FileAlterationMonitor()" target="org.apache.commons.io.monitor.FileAlterationMonitor(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1906" source="org.apache.commons.io.monitor.FileAlterationMonitor#interval" target="org.apache.commons.io.monitor.FileAlterationMonitor(long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1907" source="org.apache.commons.io.monitor.FileAlterationMonitor(long,org.apache.commons.io.monitor.FileAlterationObserver[])" target="org.apache.commons.io.monitor.FileAlterationMonitor(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1908" source="org.apache.commons.io.monitor.FileAlterationMonitor(long,org.apache.commons.io.monitor.FileAlterationObserver[])" target="org.apache.commons.io.monitor.FileAlterationMonitor.addObserver(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1909" source="org.apache.commons.io.monitor.FileAlterationMonitor.getObservers()" target="org.apache.commons.io.monitor.FileAlterationMonitor#observers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1910" source="org.apache.commons.io.monitor.FileAlterationMonitor.getInterval()" target="org.apache.commons.io.monitor.FileAlterationMonitor#interval">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1911" source="org.apache.commons.io.monitor.FileAlterationMonitor.addObserver(org.apache.commons.io.monitor.FileAlterationObserver)" target="org.apache.commons.io.monitor.FileAlterationMonitor#observers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1912" source="org.apache.commons.io.monitor.FileAlterationMonitor.removeObserver(org.apache.commons.io.monitor.FileAlterationObserver)" target="org.apache.commons.io.monitor.FileAlterationMonitor#observers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1913" source="org.apache.commons.io.monitor.FileAlterationMonitor.run()" target="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1914" source="org.apache.commons.io.monitor.FileAlterationMonitor.run()" target="org.apache.commons.io.monitor.FileAlterationMonitor#running">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1915" source="org.apache.commons.io.monitor.FileAlterationMonitor.run()" target="org.apache.commons.io.monitor.FileAlterationMonitor#observers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1916" source="org.apache.commons.io.monitor.FileAlterationMonitor.run()" target="org.apache.commons.io.monitor.FileAlterationMonitor#interval">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1917" source="org.apache.commons.io.monitor.FileAlterationMonitor#threadFactory" target="org.apache.commons.io.monitor.FileAlterationMonitor.setThreadFactory(java.util.concurrent.ThreadFactory)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1918" source="org.apache.commons.io.monitor.FileAlterationMonitor.start()" target="org.apache.commons.io.monitor.FileAlterationObserver.initialize()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1919" source="org.apache.commons.io.monitor.FileAlterationMonitor.start()" target="org.apache.commons.io.monitor.FileAlterationMonitor#running">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1920" source="org.apache.commons.io.monitor.FileAlterationMonitor.start()" target="org.apache.commons.io.monitor.FileAlterationMonitor#observers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1921" source="org.apache.commons.io.monitor.FileAlterationMonitor#running" target="org.apache.commons.io.monitor.FileAlterationMonitor.start()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1922" source="org.apache.commons.io.monitor.FileAlterationMonitor.start()" target="org.apache.commons.io.monitor.FileAlterationMonitor#threadFactory">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1923" source="org.apache.commons.io.monitor.FileAlterationMonitor#thread" target="org.apache.commons.io.monitor.FileAlterationMonitor.start()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1924" source="org.apache.commons.io.monitor.FileAlterationMonitor.start()" target="org.apache.commons.io.monitor.FileAlterationMonitor#thread">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1925" source="org.apache.commons.io.monitor.FileAlterationMonitor.stop()" target="org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1926" source="org.apache.commons.io.monitor.FileAlterationMonitor.stop()" target="org.apache.commons.io.monitor.FileAlterationMonitor#interval">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1927" source="org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)" target="org.apache.commons.io.monitor.FileAlterationObserver.destroy()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1928" source="org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)" target="org.apache.commons.io.monitor.FileAlterationMonitor#running">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1929" source="org.apache.commons.io.monitor.FileAlterationMonitor#running" target="org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1930" source="org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)" target="org.apache.commons.io.monitor.FileAlterationMonitor#thread">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1931" source="org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)" target="org.apache.commons.io.monitor.FileAlterationMonitor#observers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1932" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase(java.lang.String)" target="org.apache.commons.io.monitor.AbstractMonitorTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1933" source="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDirName" target="org.apache.commons.io.monitor.FileAlterationMonitorTestCase(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1934" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.checkFile(java.lang.String,java.io.File,java.util.Collection)" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.sleepHandleInterruped(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1935" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.checkFile(java.lang.String,java.io.File,java.util.Collection)" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#pauseTime">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1936" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()" target="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.setUp()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e1937" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.setUp()" target="org.apache.commons.io.monitor.CollectionFileListener(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1938" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.setUp()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1939" source="org.apache.commons.io.monitor.AbstractMonitorTestCase#listener" target="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1940" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testAddRemoveObservers()" target="org.apache.commons.io.monitor.FileAlterationMonitor(long,org.apache.commons.io.monitor.FileAlterationObserver[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1941" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testAddRemoveObservers()" target="org.apache.commons.io.monitor.FileAlterationMonitor.getInterval()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1942" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testAddRemoveObservers()" target="org.apache.commons.io.monitor.FileAlterationMonitor.getObservers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1943" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testAddRemoveObservers()" target="org.apache.commons.io.monitor.FileAlterationMonitor.addObserver(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1944" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testAddRemoveObservers()" target="org.apache.commons.io.monitor.FileAlterationMonitor.removeObserver(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1945" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testAddRemoveObservers()" target="org.apache.commons.io.monitor.FileAlterationObserver(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1946" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testDefaultConstructor()" target="org.apache.commons.io.monitor.FileAlterationMonitor()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1947" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testDefaultConstructor()" target="org.apache.commons.io.monitor.FileAlterationMonitor.getInterval()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1948" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.CollectionFileListener.clear()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1949" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.FileAlterationMonitor(long,org.apache.commons.io.monitor.FileAlterationObserver[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1950" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.FileAlterationMonitor.getInterval()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1951" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.FileAlterationMonitor.start()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1952" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionsEmpty(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1953" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1954" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.checkFile(java.lang.String,java.io.File,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1955" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.CollectionFileListener.getCreatedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1956" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.CollectionFileListener.getChangedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1957" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.CollectionFileListener.getDeletedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1958" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.FileAlterationMonitor.stop()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1959" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#listener">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1960" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#observer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1961" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1962" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.CollectionFileListener.clear()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1963" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.FileAlterationMonitor(long,org.apache.commons.io.monitor.FileAlterationObserver[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1964" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.FileAlterationMonitor.setThreadFactory(java.util.concurrent.ThreadFactory)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1965" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.FileAlterationMonitor.getInterval()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1966" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.FileAlterationMonitor.start()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1967" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionsEmpty(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1968" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1969" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.checkFile(java.lang.String,java.io.File,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1970" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.CollectionFileListener.getCreatedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1971" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.CollectionFileListener.getDeletedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1972" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.FileAlterationMonitor.stop()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1973" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#listener">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1974" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#observer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1975" source="org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1976" source="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File)" target="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File,java.io.FileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1977" source="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File,java.io.FileFilter)" target="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File,java.io.FileFilter,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1978" source="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File,java.io.FileFilter,org.apache.commons.io.IOCase)" target="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1979" source="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File,java.io.FileFilter,org.apache.commons.io.IOCase)" target="org.apache.commons.io.monitor.FileEntry(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1980" source="org.apache.commons.io.monitor.FileAlterationObserver(java.lang.String)" target="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1981" source="org.apache.commons.io.monitor.FileAlterationObserver(java.lang.String,java.io.FileFilter)" target="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File,java.io.FileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1982" source="org.apache.commons.io.monitor.FileAlterationObserver(java.lang.String,java.io.FileFilter,org.apache.commons.io.IOCase)" target="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File,java.io.FileFilter,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1983" source="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)" target="org.apache.commons.io.monitor.FileEntry.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1984" source="org.apache.commons.io.monitor.FileAlterationObserver#rootEntry" target="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1985" source="org.apache.commons.io.monitor.FileAlterationObserver#fileFilter" target="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1986" source="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1987" source="org.apache.commons.io.monitor.FileAlterationObserver#comparator" target="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1988" source="org.apache.commons.io.comparator.NameFileComparator#NAME_SYSTEM_COMPARATOR" target="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1989" source="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1990" source="org.apache.commons.io.comparator.NameFileComparator#NAME_INSENSITIVE_COMPARATOR" target="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1991" source="org.apache.commons.io.comparator.NameFileComparator#NAME_COMPARATOR" target="org.apache.commons.io.monitor.FileAlterationObserver(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1992" source="org.apache.commons.io.monitor.FileAlterationObserver.getDirectory()" target="org.apache.commons.io.monitor.FileEntry.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1993" source="org.apache.commons.io.monitor.FileAlterationObserver.getDirectory()" target="org.apache.commons.io.monitor.FileAlterationObserver#rootEntry">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1994" source="org.apache.commons.io.monitor.FileAlterationObserver.getFileFilter()" target="org.apache.commons.io.monitor.FileAlterationObserver#fileFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1995" source="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" target="org.apache.commons.io.monitor.FileAlterationObserver#fileFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1996" source="org.apache.commons.io.FileUtils#EMPTY_FILE_ARRAY" target="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e1997" source="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" target="org.apache.commons.io.monitor.FileAlterationObserver#comparator">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1998" source="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e1999" source="org.apache.commons.io.monitor.FileAlterationObserver.getListeners()" target="org.apache.commons.io.monitor.FileAlterationObserver#listeners">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2000" source="org.apache.commons.io.monitor.FileAlterationObserver.toString()" target="org.apache.commons.io.monitor.FileAlterationObserver.getDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2001" source="org.apache.commons.io.monitor.FileAlterationObserver.toString()" target="org.apache.commons.io.monitor.FileAlterationObserver#fileFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2002" source="org.apache.commons.io.monitor.FileAlterationObserver.toString()" target="org.apache.commons.io.monitor.FileAlterationObserver#listeners">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2003" source="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" target="org.apache.commons.io.monitor.FileEntry.newChildInstance(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2004" source="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" target="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2005" source="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" target="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2006" source="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" target="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2007" source="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" target="org.apache.commons.io.monitor.FileEntry.setChildren(org.apache.commons.io.monitor.FileEntry[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2008" source="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2009" source="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" target="org.apache.commons.io.monitor.FileEntry#EMPTY_ENTRIES">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2010" source="org.apache.commons.io.monitor.FileAlterationObserver.addListener(org.apache.commons.io.monitor.FileAlterationListener)" target="org.apache.commons.io.monitor.FileAlterationObserver#listeners">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2011" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()" target="org.apache.commons.io.monitor.FileAlterationListener.onStart(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2012" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()" target="org.apache.commons.io.monitor.FileEntry.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2013" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()" target="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2014" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()" target="org.apache.commons.io.monitor.FileEntry.getChildren()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2015" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()" target="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2016" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()" target="org.apache.commons.io.monitor.FileEntry.isExists()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2017" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()" target="org.apache.commons.io.monitor.FileAlterationListener.onStop(org.apache.commons.io.monitor.FileAlterationObserver)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2018" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()" target="org.apache.commons.io.monitor.FileAlterationObserver#listeners">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2019" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()" target="org.apache.commons.io.monitor.FileAlterationObserver#rootEntry">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2020" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()" target="org.apache.commons.io.FileUtils#EMPTY_FILE_ARRAY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2021" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" target="org.apache.commons.io.monitor.FileEntry.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2022" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" target="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2023" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" target="org.apache.commons.io.monitor.FileAlterationObserver.doCreate(org.apache.commons.io.monitor.FileEntry)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2024" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" target="org.apache.commons.io.monitor.FileAlterationObserver.doMatch(org.apache.commons.io.monitor.FileEntry,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2025" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" target="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2026" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" target="org.apache.commons.io.monitor.FileEntry.getChildren()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2027" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" target="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2028" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" target="org.apache.commons.io.monitor.FileAlterationObserver.doDelete(org.apache.commons.io.monitor.FileEntry)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2029" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" target="org.apache.commons.io.monitor.FileEntry.setChildren(org.apache.commons.io.monitor.FileEntry[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2030" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2031" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" target="org.apache.commons.io.monitor.FileEntry#EMPTY_ENTRIES">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2032" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" target="org.apache.commons.io.monitor.FileAlterationObserver#comparator">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2033" source="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" target="org.apache.commons.io.FileUtils#EMPTY_FILE_ARRAY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2034" source="org.apache.commons.io.monitor.FileAlterationObserver.doCreate(org.apache.commons.io.monitor.FileEntry)" target="org.apache.commons.io.monitor.FileEntry.isDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2035" source="org.apache.commons.io.monitor.FileAlterationObserver.doCreate(org.apache.commons.io.monitor.FileEntry)" target="org.apache.commons.io.monitor.FileAlterationListener.onDirectoryCreate(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2036" source="org.apache.commons.io.monitor.FileAlterationObserver.doCreate(org.apache.commons.io.monitor.FileEntry)" target="org.apache.commons.io.monitor.FileEntry.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2037" source="org.apache.commons.io.monitor.FileAlterationObserver.doCreate(org.apache.commons.io.monitor.FileEntry)" target="org.apache.commons.io.monitor.FileAlterationListener.onFileCreate(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2038" source="org.apache.commons.io.monitor.FileAlterationObserver.doCreate(org.apache.commons.io.monitor.FileEntry)" target="org.apache.commons.io.monitor.FileEntry.getChildren()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2039" source="org.apache.commons.io.monitor.FileAlterationObserver.doCreate(org.apache.commons.io.monitor.FileEntry)" target="org.apache.commons.io.monitor.FileAlterationObserver.doCreate(org.apache.commons.io.monitor.FileEntry)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2040" source="org.apache.commons.io.monitor.FileAlterationObserver.doCreate(org.apache.commons.io.monitor.FileEntry)" target="org.apache.commons.io.monitor.FileAlterationObserver#listeners">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2041" source="org.apache.commons.io.monitor.FileAlterationObserver.doDelete(org.apache.commons.io.monitor.FileEntry)" target="org.apache.commons.io.monitor.FileEntry.isDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2042" source="org.apache.commons.io.monitor.FileAlterationObserver.doDelete(org.apache.commons.io.monitor.FileEntry)" target="org.apache.commons.io.monitor.FileAlterationListener.onDirectoryDelete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2043" source="org.apache.commons.io.monitor.FileAlterationObserver.doDelete(org.apache.commons.io.monitor.FileEntry)" target="org.apache.commons.io.monitor.FileEntry.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2044" source="org.apache.commons.io.monitor.FileAlterationObserver.doDelete(org.apache.commons.io.monitor.FileEntry)" target="org.apache.commons.io.monitor.FileAlterationListener.onFileDelete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2045" source="org.apache.commons.io.monitor.FileAlterationObserver.doDelete(org.apache.commons.io.monitor.FileEntry)" target="org.apache.commons.io.monitor.FileAlterationObserver#listeners">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2046" source="org.apache.commons.io.monitor.FileAlterationObserver.doMatch(org.apache.commons.io.monitor.FileEntry,java.io.File)" target="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2047" source="org.apache.commons.io.monitor.FileAlterationObserver.doMatch(org.apache.commons.io.monitor.FileEntry,java.io.File)" target="org.apache.commons.io.monitor.FileEntry.isDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2048" source="org.apache.commons.io.monitor.FileAlterationObserver.doMatch(org.apache.commons.io.monitor.FileEntry,java.io.File)" target="org.apache.commons.io.monitor.FileAlterationListener.onDirectoryChange(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2049" source="org.apache.commons.io.monitor.FileAlterationObserver.doMatch(org.apache.commons.io.monitor.FileEntry,java.io.File)" target="org.apache.commons.io.monitor.FileAlterationListener.onFileChange(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2050" source="org.apache.commons.io.monitor.FileAlterationObserver.doMatch(org.apache.commons.io.monitor.FileEntry,java.io.File)" target="org.apache.commons.io.monitor.FileAlterationObserver#listeners">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2051" source="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" target="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2052" source="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" target="org.apache.commons.io.monitor.FileEntry.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2053" source="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" target="org.apache.commons.io.monitor.FileAlterationObserver.listFiles(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2054" source="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" target="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2055" source="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" target="org.apache.commons.io.monitor.FileEntry.setChildren(org.apache.commons.io.monitor.FileEntry[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2056" source="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" target="org.apache.commons.io.monitor.FileAlterationObserver#rootEntry">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2057" source="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2058" source="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" target="org.apache.commons.io.monitor.FileEntry#EMPTY_ENTRIES">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2059" source="org.apache.commons.io.monitor.FileAlterationObserver.removeListener(org.apache.commons.io.monitor.FileAlterationListener)" target="org.apache.commons.io.monitor.FileAlterationObserver#listeners">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2060" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase(java.lang.String)" target="org.apache.commons.io.monitor.AbstractMonitorTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2061" source="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDirName" target="org.apache.commons.io.monitor.FileAlterationObserverTestCase(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2062" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()" target="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2063" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#observer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2064" source="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()" target="org.apache.commons.io.monitor.FileAlterationObserverTestCase.setUp()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2065" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.setUp()" target="org.apache.commons.io.monitor.CollectionFileListener(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2066" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.setUp()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2067" source="org.apache.commons.io.monitor.AbstractMonitorTestCase#listener" target="org.apache.commons.io.monitor.FileAlterationObserverTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2068" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testAddRemoveListeners()" target="org.apache.commons.io.monitor.FileAlterationObserver(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2069" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testAddRemoveListeners()" target="org.apache.commons.io.monitor.FileAlterationObserver.addListener(org.apache.commons.io.monitor.FileAlterationListener)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2070" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testAddRemoveListeners()" target="org.apache.commons.io.monitor.FileAlterationObserver.getListeners()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2071" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testAddRemoveListeners()" target="org.apache.commons.io.monitor.FileAlterationObserver.removeListener(org.apache.commons.io.monitor.FileAlterationListener)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2072" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testAddRemoveListeners()" target="org.apache.commons.io.monitor.FileAlterationListenerAdaptor()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2073" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()" target="org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2074" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionsEmpty(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2075" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2076" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2077" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()" target="org.apache.commons.io.monitor.CollectionFileListener.getCreatedDirectories()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2078" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()" target="org.apache.commons.io.monitor.CollectionFileListener.getCreatedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2079" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2080" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()" target="org.apache.commons.io.monitor.CollectionFileListener.getDeletedDirectories()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2081" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()" target="org.apache.commons.io.monitor.CollectionFileListener.getChangedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2082" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()" target="org.apache.commons.io.monitor.CollectionFileListener.getDeletedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2083" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2084" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#listener">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2085" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileCreate()" target="org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2086" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileCreate()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionsEmpty(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2087" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileCreate()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2088" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileCreate()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2089" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileCreate()" target="org.apache.commons.io.monitor.CollectionFileListener.getCreatedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2090" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileCreate()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2091" source="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir" target="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileCreate()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2092" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileCreate()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#listener">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2093" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileDelete()" target="org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2094" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileDelete()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionsEmpty(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2095" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileDelete()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2096" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileDelete()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2097" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileDelete()" target="org.apache.commons.io.monitor.CollectionFileListener.getCreatedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2098" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileDelete()" target="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2099" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileDelete()" target="org.apache.commons.io.monitor.CollectionFileListener.getDeletedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2100" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileDelete()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2101" source="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir" target="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileDelete()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2102" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileDelete()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#listener">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2103" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileUpdate()" target="org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2104" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileUpdate()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionsEmpty(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2105" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileUpdate()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2106" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileUpdate()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2107" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileUpdate()" target="org.apache.commons.io.monitor.CollectionFileListener.getCreatedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2108" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileUpdate()" target="org.apache.commons.io.monitor.CollectionFileListener.getChangedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2109" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileUpdate()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2110" source="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir" target="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileUpdate()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2111" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileUpdate()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#listener">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2112" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2113" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.createObserver(java.io.File,java.io.FileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2114" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()" target="org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2115" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionsEmpty(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2116" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2117" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(java.lang.String,int,int,int,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2118" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()" target="org.apache.commons.io.monitor.CollectionFileListener.getCreatedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2119" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()" target="org.apache.commons.io.monitor.CollectionFileListener.getChangedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2120" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()" target="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2121" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()" target="org.apache.commons.io.monitor.CollectionFileListener.getDeletedFiles()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2122" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#testDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2123" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()" target="org.apache.commons.io.monitor.AbstractMonitorTestCase#listener">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2124" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testToString()" target="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2125" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testToString()" target="org.apache.commons.io.monitor.FileAlterationObserver.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2126" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testToString()" target="org.apache.commons.io.monitor.FileAlterationObserver(java.io.File,java.io.FileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2127" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testToString()" target="org.apache.commons.io.monitor.FileAlterationObserver.getDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2128" source="org.apache.commons.io.monitor.FileAlterationObserverTestCase.testToString()" target="org.apache.commons.io.filefilter.CanReadFileFilter#CAN_READ">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2129" source="org.apache.commons.io.monitor.FileEntry(java.io.File)" target="org.apache.commons.io.monitor.FileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2130" source="org.apache.commons.io.monitor.FileEntry#file" target="org.apache.commons.io.monitor.FileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2131" source="org.apache.commons.io.monitor.FileEntry#parent" target="org.apache.commons.io.monitor.FileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2132" source="org.apache.commons.io.monitor.FileEntry#name" target="org.apache.commons.io.monitor.FileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2133" source="org.apache.commons.io.monitor.FileEntry.isDirectory()" target="org.apache.commons.io.monitor.FileEntry#directory">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2134" source="org.apache.commons.io.monitor.FileEntry.isExists()" target="org.apache.commons.io.monitor.FileEntry#exists">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2135" source="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" target="org.apache.commons.io.monitor.FileEntry#exists">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2136" source="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" target="org.apache.commons.io.monitor.FileEntry#lastModified">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2137" source="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" target="org.apache.commons.io.monitor.FileEntry#directory">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2138" source="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" target="org.apache.commons.io.monitor.FileEntry#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2139" source="org.apache.commons.io.monitor.FileEntry#name" target="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2140" source="org.apache.commons.io.monitor.FileEntry#exists" target="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2141" source="org.apache.commons.io.monitor.FileEntry#directory" target="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2142" source="org.apache.commons.io.monitor.FileEntry#lastModified" target="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2143" source="org.apache.commons.io.monitor.FileEntry#length" target="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2144" source="org.apache.commons.io.monitor.FileEntry.getLevel()" target="org.apache.commons.io.monitor.FileEntry.getLevel()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2145" source="org.apache.commons.io.monitor.FileEntry.getLevel()" target="org.apache.commons.io.monitor.FileEntry#parent">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2146" source="org.apache.commons.io.monitor.FileEntry.getFile()" target="org.apache.commons.io.monitor.FileEntry#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2147" source="org.apache.commons.io.monitor.FileEntry.getName()" target="org.apache.commons.io.monitor.FileEntry#name">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2148" source="org.apache.commons.io.monitor.FileEntry.getLastModified()" target="org.apache.commons.io.monitor.FileEntry#lastModified">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2149" source="org.apache.commons.io.monitor.FileEntry.getLength()" target="org.apache.commons.io.monitor.FileEntry#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2150" source="org.apache.commons.io.monitor.FileEntry.getParent()" target="org.apache.commons.io.monitor.FileEntry#parent">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2151" source="org.apache.commons.io.monitor.FileEntry.newChildInstance(java.io.File)" target="org.apache.commons.io.monitor.FileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2152" source="org.apache.commons.io.monitor.FileEntry.getChildren()" target="org.apache.commons.io.monitor.FileEntry#children">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2153" source="org.apache.commons.io.monitor.FileEntry.getChildren()" target="org.apache.commons.io.monitor.FileEntry#EMPTY_ENTRIES">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2154" source="org.apache.commons.io.monitor.FileEntry#children" target="org.apache.commons.io.monitor.FileEntry.setChildren(org.apache.commons.io.monitor.FileEntry[])">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2155" source="org.apache.commons.io.monitor.FileEntry#directory" target="org.apache.commons.io.monitor.FileEntry.setDirectory(boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2156" source="org.apache.commons.io.monitor.FileEntry#exists" target="org.apache.commons.io.monitor.FileEntry.setExists(boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2157" source="org.apache.commons.io.monitor.FileEntry#lastModified" target="org.apache.commons.io.monitor.FileEntry.setLastModified(long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2158" source="org.apache.commons.io.monitor.FileEntry#length" target="org.apache.commons.io.monitor.FileEntry.setLength(long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2159" source="org.apache.commons.io.monitor.FileEntry#name" target="org.apache.commons.io.monitor.FileEntry.setName(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2160" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2161" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2162" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2163" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2164" source="org.apache.commons.io.filefilter.AgeFileFilter(java.io.File)" target="org.apache.commons.io.filefilter.AgeFileFilter(java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2165" source="org.apache.commons.io.filefilter.AgeFileFilter(java.io.File,boolean)" target="org.apache.commons.io.filefilter.AgeFileFilter(long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2166" source="org.apache.commons.io.filefilter.AgeFileFilter(java.util.Date)" target="org.apache.commons.io.filefilter.AgeFileFilter(java.util.Date,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2167" source="org.apache.commons.io.filefilter.AgeFileFilter(java.util.Date,boolean)" target="org.apache.commons.io.filefilter.AgeFileFilter(long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2168" source="org.apache.commons.io.filefilter.AgeFileFilter(long)" target="org.apache.commons.io.filefilter.AgeFileFilter(long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2169" source="org.apache.commons.io.filefilter.AgeFileFilter(long,boolean)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2170" source="org.apache.commons.io.filefilter.AgeFileFilter#acceptOlder" target="org.apache.commons.io.filefilter.AgeFileFilter(long,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2171" source="org.apache.commons.io.filefilter.AgeFileFilter#cutoff" target="org.apache.commons.io.filefilter.AgeFileFilter(long,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2172" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.AgeFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2173" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.AgeFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2174" source="org.apache.commons.io.filefilter.AgeFileFilter.accept(java.io.File)" target="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2175" source="org.apache.commons.io.filefilter.AgeFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.AgeFileFilter#cutoff">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2176" source="org.apache.commons.io.filefilter.AgeFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.AgeFileFilter#acceptOlder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2177" source="org.apache.commons.io.filefilter.AbstractFileFilter.toString()" target="org.apache.commons.io.filefilter.AgeFileFilter.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2178" source="org.apache.commons.io.filefilter.AgeFileFilter.toString()" target="org.apache.commons.io.filefilter.AbstractFileFilter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2179" source="org.apache.commons.io.filefilter.AgeFileFilter.toString()" target="org.apache.commons.io.filefilter.AgeFileFilter#acceptOlder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2180" source="org.apache.commons.io.filefilter.AgeFileFilter.toString()" target="org.apache.commons.io.filefilter.AgeFileFilter#cutoff">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2181" source="org.apache.commons.io.filefilter.AndFileFilter()" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2182" source="org.apache.commons.io.filefilter.AndFileFilter#fileFilters" target="org.apache.commons.io.filefilter.AndFileFilter()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2183" source="org.apache.commons.io.filefilter.AndFileFilter(java.util.List)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2184" source="org.apache.commons.io.filefilter.AndFileFilter#fileFilters" target="org.apache.commons.io.filefilter.AndFileFilter(java.util.List)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2185" source="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2186" source="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2187" source="org.apache.commons.io.filefilter.AndFileFilter#fileFilters" target="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2188" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2189" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2190" source="org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2191" source="org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.AndFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2192" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2193" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2194" source="org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2195" source="org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.AndFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2196" source="org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2197" source="org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.AndFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2198" source="org.apache.commons.io.filefilter.AbstractFileFilter.toString()" target="org.apache.commons.io.filefilter.AndFileFilter.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2199" source="org.apache.commons.io.filefilter.AndFileFilter.toString()" target="org.apache.commons.io.filefilter.AbstractFileFilter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2200" source="org.apache.commons.io.filefilter.AndFileFilter.toString()" target="org.apache.commons.io.filefilter.AndFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2201" source="org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()" target="org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2202" source="org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()" target="org.apache.commons.io.filefilter.AndFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2203" source="org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2204" source="org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.AndFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2205" source="org.apache.commons.io.filefilter.ConditionalFileFilter.setFileFilters(java.util.List)" target="org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2206" source="org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List)" target="org.apache.commons.io.filefilter.AndFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2207" source="org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String)" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2208" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.getDefaultWorkingPath()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2209" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.getDefaultWorkingPath()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase#DEFAULT_WORKING_PATH">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2210" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.getWorkingPathNamePropertyKey()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2211" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.getWorkingPathNamePropertyKey()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase#WORKING_PATH_NAME_PROPERTY_KEY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2212" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.getFalseResults()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2213" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.getFalseResults()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFalseResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2214" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.getFileResults()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2215" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.getFileResults()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFileResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2216" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.getFilenameResults()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2217" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.getFilenameResults()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFilenameResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2218" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.getTestFilters()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2219" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.getTestFilters()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2220" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.getTrueResults()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2221" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.getTrueResults()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase#testTrueResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2222" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.getConditionalFileFilter()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2223" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.getConditionalFileFilter()" target="org.apache.commons.io.filefilter.AndFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2224" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2225" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)" target="org.apache.commons.io.filefilter.AndFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2226" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)" target="org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2227" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2228" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List)" target="org.apache.commons.io.filefilter.AndFileFilter(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2229" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUp()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2230" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUp()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2231" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUp()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2232" source="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFilters" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2233" source="org.apache.commons.io.filefilter.AndFileFilterTestCase#testTrueResults" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2234" source="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFalseResults" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2235" source="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFileResults" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2236" source="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFilenameResults" target="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2237" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2238" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase#testTrueResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2239" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFalseResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2240" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFileResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2241" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.AndFileFilterTestCase#testFilenameResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2242" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#trueFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2243" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()" target="java.lang.Boolean#TRUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2244" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#falseFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2245" source="org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()" target="java.lang.Boolean#FALSE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2246" source="org.apache.commons.io.filefilter.CanReadFileFilter#CAN_READ" target="org.apache.commons.io.filefilter.CanReadFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2247" source="org.apache.commons.io.filefilter.CanReadFileFilter#CANNOT_READ" target="org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2248" source="org.apache.commons.io.filefilter.CanReadFileFilter#READ_ONLY" target="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2249" source="org.apache.commons.io.filefilter.CanReadFileFilter()" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2250" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.CanReadFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2251" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.CanReadFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2252" source="org.apache.commons.io.filefilter.CanWriteFileFilter#CAN_WRITE" target="org.apache.commons.io.filefilter.CanWriteFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2253" source="org.apache.commons.io.filefilter.CanWriteFileFilter#CANNOT_WRITE" target="org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2254" source="org.apache.commons.io.filefilter.CanWriteFileFilter()" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2255" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.CanWriteFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2256" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.CanWriteFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2257" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2258" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2259" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2260" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2261" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2262" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2263" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#workingPath" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2264" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#file" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2265" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#workingPath">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2266" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#TEST_FILE_NAME_PREFIX">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2267" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#TEST_FILE_TYPE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2268" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#trueFilters" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2269" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#falseFilters" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2270" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#trueFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2271" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#falseFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2272" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2273" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2274" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()" target="org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2275" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()" target="org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2276" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2277" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2278" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2279" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2280" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2281" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2282" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2283" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2284" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2285" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2286" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2287" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2288" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#trueFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2289" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#falseFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2290" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2291" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2292" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2293" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2294" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2295" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2296" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2297" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2298" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2299" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2300" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2301" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2302" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2303" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#trueFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2304" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#falseFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2305" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2306" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2307" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2308" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2309" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#workingPath">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2310" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#TEST_FILE_NAME_PREFIX">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2311" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#TEST_FILE_TYPE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2312" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2313" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2314" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()" target="org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2315" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()" target="org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2316" source="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2317" source="org.apache.commons.io.filefilter.DelegateFileFilter#fileFilter" target="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2318" source="org.apache.commons.io.filefilter.DelegateFileFilter#filenameFilter" target="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2319" source="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2320" source="org.apache.commons.io.filefilter.DelegateFileFilter#filenameFilter" target="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2321" source="org.apache.commons.io.filefilter.DelegateFileFilter#fileFilter" target="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2322" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2323" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2324" source="org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2325" source="org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.DelegateFileFilter#fileFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2326" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2327" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2328" source="org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2329" source="org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.DelegateFileFilter#filenameFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2330" source="org.apache.commons.io.filefilter.AbstractFileFilter.toString()" target="org.apache.commons.io.filefilter.DelegateFileFilter.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2331" source="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" target="org.apache.commons.io.filefilter.AbstractFileFilter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2332" source="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" target="org.apache.commons.io.filefilter.DelegateFileFilter#fileFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2333" source="org.apache.commons.io.filefilter.DelegateFileFilter.toString()" target="org.apache.commons.io.filefilter.DelegateFileFilter#filenameFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2334" source="org.apache.commons.io.filefilter.DirectoryFileFilter#DIRECTORY" target="org.apache.commons.io.filefilter.DirectoryFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2335" source="org.apache.commons.io.filefilter.DirectoryFileFilter()" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2336" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2337" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2338" source="org.apache.commons.io.filefilter.EmptyFileFilter#EMPTY" target="org.apache.commons.io.filefilter.EmptyFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2339" source="org.apache.commons.io.filefilter.EmptyFileFilter#NOT_EMPTY" target="org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2340" source="org.apache.commons.io.filefilter.EmptyFileFilter()" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2341" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.EmptyFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2342" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.EmptyFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2343" source="org.apache.commons.io.filefilter.EmptyFileFilter.accept(java.io.File)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2344" source="org.apache.commons.io.filefilter.FalseFileFilter#FALSE" target="org.apache.commons.io.filefilter.FalseFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2345" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2346" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2347" source="org.apache.commons.io.filefilter.FileFileFilter#FILE" target="org.apache.commons.io.filefilter.FileFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2348" source="org.apache.commons.io.filefilter.FileFileFilter()" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2349" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.FileFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2350" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.FileFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2351" source="org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2352" source="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2353" source="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2354" source="org.apache.commons.io.filefilter.FileFilterTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2355" source="org.apache.commons.io.filefilter.FileFilterTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2356" source="org.apache.commons.io.filefilter.FileFilterTestCase.tearDown()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2357" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2358" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2359" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()" target="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2360" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()" target="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2361" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()" target="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.util.Date)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2362" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()" target="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.util.Date,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2363" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()" target="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2364" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()" target="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2365" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2366" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2367" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()" target="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2368" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()" target="org.apache.commons.io.filefilter.AndFileFilter(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2369" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()" target="org.apache.commons.io.filefilter.AndFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2370" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()" target="org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2371" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()" target="org.apache.commons.io.filefilter.AndFileFilter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2372" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()" target="org.apache.commons.io.filefilter.TrueFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2373" source="org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()" target="org.apache.commons.io.filefilter.FalseFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2374" source="org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2375" source="org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2376" source="org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2377" source="org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead()" target="org.apache.commons.io.filefilter.CanReadFileFilter#CAN_READ">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2378" source="org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead()" target="org.apache.commons.io.filefilter.CanReadFileFilter#CANNOT_READ">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2379" source="org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead()" target="org.apache.commons.io.filefilter.CanReadFileFilter#READ_ONLY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2380" source="org.apache.commons.io.filefilter.FileFilterTestCase.testCanWrite()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2381" source="org.apache.commons.io.filefilter.FileFilterTestCase.testCanWrite()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2382" source="org.apache.commons.io.filefilter.FileFilterTestCase.testCanWrite()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2383" source="org.apache.commons.io.filefilter.FileFilterTestCase.testCanWrite()" target="org.apache.commons.io.filefilter.CanWriteFileFilter#CAN_WRITE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2384" source="org.apache.commons.io.filefilter.FileFilterTestCase.testCanWrite()" target="org.apache.commons.io.filefilter.CanWriteFileFilter#CANNOT_WRITE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2385" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()" target="org.apache.commons.io.filefilter.OrFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2386" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()" target="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2387" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2388" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()" target="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2389" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDelegation()" target="org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2390" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDelegation()" target="org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2391" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDelegation()" target="org.apache.commons.io.filefilter.FalseFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2392" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()" target="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2393" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()" target="org.apache.commons.io.filefilter.WildcardFilter(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2394" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2395" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()" target="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2396" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2397" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2398" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()" target="org.apache.commons.io.filefilter.DirectoryFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2399" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2400" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()" target="org.apache.commons.io.filefilter.DirectoryFileFilter#DIRECTORY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2401" source="org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()" target="org.apache.commons.io.filefilter.DirectoryFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2402" source="org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2403" source="org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2404" source="org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2405" source="org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty()" target="org.apache.commons.io.FileUtils.forceDelete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2406" source="org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty()" target="org.apache.commons.io.filefilter.EmptyFileFilter#EMPTY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2407" source="org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty()" target="org.apache.commons.io.filefilter.EmptyFileFilter#NOT_EMPTY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2408" source="org.apache.commons.io.filefilter.FileFilterTestCase.testEnsureTestCoverage()" target="org.apache.commons.io.filefilter.FileFilterUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2409" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()" target="org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2410" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2411" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()" target="org.apache.commons.io.filefilter.FalseFileFilter#FALSE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2412" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()" target="org.apache.commons.io.filefilter.FalseFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2413" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_and()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2414" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_and()" target="org.apache.commons.io.filefilter.FileFilterUtils.and(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2415" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_and()" target="org.apache.commons.io.filefilter.TrueFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2416" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_and()" target="org.apache.commons.io.filefilter.FalseFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2417" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_or()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2418" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_or()" target="org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2419" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_or()" target="org.apache.commons.io.filefilter.TrueFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2420" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_or()" target="org.apache.commons.io.filefilter.FalseFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2421" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFiles()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2422" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFiles()" target="org.apache.commons.io.filefilter.FileFileFilter#FILE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2423" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2424" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2425" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray()" target="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2426" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2427" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArrayNullParameters()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2428" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArrayNullParameters()" target="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2429" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArrayNullParameters()" target="org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2430" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArrayNullParameters()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2431" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray_fromList()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2432" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray_fromList()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2433" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray_fromList()" target="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2434" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray_fromList()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2435" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2436" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2437" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList()" target="org.apache.commons.io.filefilter.FileFilterUtils.filterList(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2438" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterListNullParameters()" target="org.apache.commons.io.filefilter.FileFilterUtils.filterList(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2439" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterListNullParameters()" target="org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2440" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList_fromArray()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2441" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList_fromArray()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2442" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList_fromArray()" target="org.apache.commons.io.filefilter.FileFilterUtils.filterList(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2443" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2444" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2445" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet()" target="org.apache.commons.io.filefilter.FileFilterUtils.filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2446" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSetNullParameters()" target="org.apache.commons.io.filefilter.FileFilterUtils.filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2447" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSetNullParameters()" target="org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2448" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet_fromArray()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2449" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet_fromArray()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2450" source="org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet_fromArray()" target="org.apache.commons.io.filefilter.FileFilterUtils.filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2451" source="org.apache.commons.io.filefilter.FileFilterTestCase.testHidden()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2452" source="org.apache.commons.io.filefilter.FileFilterTestCase.testHidden()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2453" source="org.apache.commons.io.filefilter.FileFilterTestCase.testHidden()" target="org.apache.commons.io.filefilter.FileFilterTestCase#SVN_DIR_NAME">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2454" source="org.apache.commons.io.filefilter.FileFilterTestCase.testHidden()" target="org.apache.commons.io.filefilter.HiddenFileFilter#HIDDEN">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2455" source="org.apache.commons.io.filefilter.FileFilterTestCase.testHidden()" target="org.apache.commons.io.filefilter.HiddenFileFilter#VISIBLE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2456" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2457" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2458" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()" target="org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2459" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()" target="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2460" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2461" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()" target="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2462" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2463" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2464" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()" target="org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2465" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2466" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2467" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2468" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()" target="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2469" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()" target="org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2470" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2471" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2472" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2473" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()" target="org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[],long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2474" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2475" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2476" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()" target="org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2477" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()" target="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2478" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2479" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2480" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2481" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()" target="org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2482" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2483" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2484" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2485" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()" target="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2486" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2487" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2488" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2489" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2490" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()" target="org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2491" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2492" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterValidation()" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2493" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterValidation()" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2494" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()" target="org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2495" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2496" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2497" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2498" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2499" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2500" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()" target="org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2501" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2502" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2503" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2504" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2505" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2506" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()" target="org.apache.commons.io.filefilter.DirectoryFileFilter#DIRECTORY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2507" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()" target="org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2508" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2509" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2510" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2511" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2512" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2513" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()" target="org.apache.commons.io.filefilter.FileFileFilter#FILE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2514" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()" target="org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2515" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2516" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2517" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2518" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2519" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2520" source="org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()" target="org.apache.commons.io.filefilter.FileFilterTestCase#SVN_DIR_NAME">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2521" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2522" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2523" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2524" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()" target="org.apache.commons.io.filefilter.NameFileFilter(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2525" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2526" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2527" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2528" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2529" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2530" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()" target="org.apache.commons.io.filefilter.FileFilterTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2531" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2532" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2533" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2534" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArrayArgument()" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2535" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullListArgument()" target="org.apache.commons.io.filefilter.NameFileFilter(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2536" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNot()" target="org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2537" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNot()" target="org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2538" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNot()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2539" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNot()" target="org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2540" source="org.apache.commons.io.filefilter.FileFilterTestCase.testNullFilters()" target="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2541" source="org.apache.commons.io.filefilter.FileFilterTestCase.testOr()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2542" source="org.apache.commons.io.filefilter.FileFilterTestCase.testOr()" target="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2543" source="org.apache.commons.io.filefilter.FileFilterTestCase.testOr()" target="org.apache.commons.io.filefilter.OrFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2544" source="org.apache.commons.io.filefilter.FileFilterTestCase.testOr()" target="org.apache.commons.io.filefilter.OrFileFilter(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2545" source="org.apache.commons.io.filefilter.FileFilterTestCase.testOr()" target="org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2546" source="org.apache.commons.io.filefilter.FileFilterTestCase.testOr()" target="org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2547" source="org.apache.commons.io.filefilter.FileFilterTestCase.testOr()" target="org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2548" source="org.apache.commons.io.filefilter.FileFilterTestCase.testOr()" target="org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2549" source="org.apache.commons.io.filefilter.FileFilterTestCase.testOr()" target="org.apache.commons.io.filefilter.TrueFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2550" source="org.apache.commons.io.filefilter.FileFilterTestCase.testOr()" target="org.apache.commons.io.filefilter.FalseFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2551" source="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2552" source="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2553" source="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()" target="org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2554" source="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2555" source="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2556" source="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2557" source="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive()" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2558" source="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2559" source="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive()" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2560" source="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive()" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2561" source="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive()" target="org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2562" source="org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2563" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilter()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2564" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilter()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2565" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilter()" target="org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2566" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilter()" target="org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2567" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilter()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2568" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilter()" target="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2569" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2570" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2571" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()" target="org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2572" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()" target="org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2573" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2574" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2575" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2576" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffixCaseInsensitive()" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2577" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffixCaseInsensitive()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2578" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffixCaseInsensitive()" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2579" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffixCaseInsensitive()" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2580" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffixCaseInsensitive()" target="org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2581" source="org.apache.commons.io.filefilter.FileFilterTestCase.testSuffixCaseInsensitive()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2582" source="org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()" target="org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2583" source="org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2584" source="org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()" target="org.apache.commons.io.filefilter.TrueFileFilter#TRUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2585" source="org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()" target="org.apache.commons.io.filefilter.TrueFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2586" source="org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2587" source="org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()" target="org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2588" source="org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2589" source="org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2590" source="org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2591" source="org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2592" source="org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2593" source="org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2594" source="org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2595" source="org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2596" source="org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2597" source="org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()" target="org.apache.commons.io.filefilter.FileFilterTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2598" source="org.apache.commons.io.filefilter.FileFilterUtils#cvsFilter" target="org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2599" source="org.apache.commons.io.filefilter.FileFilterUtils#svnFilter" target="org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2600" source="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable,T)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2601" source="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2602" source="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)" target="org.apache.commons.io.filefilter.FileFilterUtils.filterList(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2603" source="org.apache.commons.io.filefilter.FileFilterUtils.filterList(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])" target="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2604" source="org.apache.commons.io.filefilter.FileFilterUtils.filterList(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)" target="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable,T)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2605" source="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2606" source="org.apache.commons.io.filefilter.FileFilterUtils.filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])" target="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2607" source="org.apache.commons.io.filefilter.FileFilterUtils.filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)" target="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable,T)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2608" source="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.io.File)" target="org.apache.commons.io.filefilter.AgeFileFilter(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2609" source="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.io.File,boolean)" target="org.apache.commons.io.filefilter.AgeFileFilter(java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2610" source="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.util.Date)" target="org.apache.commons.io.filefilter.AgeFileFilter(java.util.Date)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2611" source="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.util.Date,boolean)" target="org.apache.commons.io.filefilter.AgeFileFilter(java.util.Date,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2612" source="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(long)" target="org.apache.commons.io.filefilter.AgeFileFilter(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2613" source="org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(long,boolean)" target="org.apache.commons.io.filefilter.AgeFileFilter(long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2614" source="org.apache.commons.io.filefilter.FileFilterUtils.and(org.apache.commons.io.filefilter.IOFileFilter[])" target="org.apache.commons.io.filefilter.AndFileFilter(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2615" source="org.apache.commons.io.filefilter.FileFilterUtils.and(org.apache.commons.io.filefilter.IOFileFilter[])" target="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2616" source="org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2617" source="org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)" target="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2618" source="org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)" target="org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2619" source="org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()" target="org.apache.commons.io.filefilter.DirectoryFileFilter#DIRECTORY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2620" source="org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()" target="org.apache.commons.io.filefilter.FalseFileFilter#FALSE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2621" source="org.apache.commons.io.filefilter.FileFilterUtils.fileFileFilter()" target="org.apache.commons.io.filefilter.FileFileFilter#FILE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2622" source="org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[])" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2623" source="org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[],long)" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2624" source="org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(java.lang.String)" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2625" source="org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(java.lang.String,long)" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2626" source="org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.FileFilterUtils.and(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2627" source="org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.FileFilterUtils#cvsFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2628" source="org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2629" source="org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.DirectoryFileFilter#DIRECTORY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2630" source="org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2631" source="org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.FileFileFilter#FILE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2632" source="org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.FileFilterUtils.and(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2633" source="org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.FileFilterUtils#svnFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2634" source="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2635" source="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2636" source="org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2637" source="org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.IOFileFilter[])" target="org.apache.commons.io.filefilter.OrFileFilter(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2638" source="org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.IOFileFilter[])" target="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2639" source="org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2640" source="org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2641" source="org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2642" source="org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long)" target="org.apache.commons.io.filefilter.SizeFileFilter(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2643" source="org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long,boolean)" target="org.apache.commons.io.filefilter.SizeFileFilter(long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2644" source="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)" target="org.apache.commons.io.filefilter.SizeFileFilter(long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2645" source="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)" target="org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2646" source="org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2647" source="org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2648" source="org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()" target="org.apache.commons.io.filefilter.TrueFileFilter#TRUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2649" source="org.apache.commons.io.filefilter.HiddenFileFilter#HIDDEN" target="org.apache.commons.io.filefilter.HiddenFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2650" source="org.apache.commons.io.filefilter.HiddenFileFilter#VISIBLE" target="org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2651" source="org.apache.commons.io.filefilter.HiddenFileFilter()" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2652" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.HiddenFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2653" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.HiddenFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2654" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter()" target="org.apache.commons.io.filefilter.FalseFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2655" source="org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2656" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2657" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2658" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2659" source="org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2660" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2661" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2662" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2663" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter#invoked">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2664" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.reset()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2665" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter#invoked" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2666" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter()" target="org.apache.commons.io.filefilter.TrueFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2667" source="org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2668" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2669" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2670" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2671" source="org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2672" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2673" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2674" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2675" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter#invoked">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2676" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.reset()" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2677" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter#invoked" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2678" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2679" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2680" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2681" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2682" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2683" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2684" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2685" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2686" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.reset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2687" source="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])" target="org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.reset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2688" source="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[])" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2689" source="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2690" source="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2691" source="org.apache.commons.io.filefilter.MagicNumberFileFilter#magicNumbers" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2692" source="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)" target="org.apache.commons.io.filefilter.MagicNumberFileFilter#magicNumbers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2693" source="org.apache.commons.io.filefilter.MagicNumberFileFilter#byteOffset" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2694" source="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String)" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2695" source="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String,long)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2696" source="org.apache.commons.io.filefilter.MagicNumberFileFilter#magicNumbers" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String,long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2697" source="org.apache.commons.io.filefilter.MagicNumberFileFilter#byteOffset" target="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String,long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2698" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2699" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2700" source="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2701" source="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2702" source="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.MagicNumberFileFilter#magicNumbers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2703" source="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.MagicNumberFileFilter#byteOffset">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2704" source="org.apache.commons.io.filefilter.AbstractFileFilter.toString()" target="org.apache.commons.io.filefilter.MagicNumberFileFilter.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2705" source="org.apache.commons.io.filefilter.MagicNumberFileFilter.toString()" target="org.apache.commons.io.filefilter.AbstractFileFilter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2706" source="org.apache.commons.io.filefilter.MagicNumberFileFilter.toString()" target="org.apache.commons.io.filefilter.MagicNumberFileFilter#magicNumbers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2707" source="org.apache.commons.io.filefilter.MagicNumberFileFilter.toString()" target="org.apache.commons.io.filefilter.MagicNumberFileFilter#byteOffset">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2708" source="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2709" source="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2710" source="org.apache.commons.io.filefilter.NameFileFilter#names" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2711" source="org.apache.commons.io.filefilter.NameFileFilter#caseSensitivity" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2712" source="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2713" source="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2714" source="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2715" source="org.apache.commons.io.filefilter.NameFileFilter#names" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2716" source="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2717" source="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.NameFileFilter#names">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2718" source="org.apache.commons.io.filefilter.NameFileFilter#caseSensitivity" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2719" source="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2720" source="org.apache.commons.io.filefilter.NameFileFilter(java.util.List)" target="org.apache.commons.io.filefilter.NameFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2721" source="org.apache.commons.io.filefilter.NameFileFilter(java.util.List,org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2722" source="org.apache.commons.io.filefilter.NameFileFilter#names" target="org.apache.commons.io.filefilter.NameFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2723" source="org.apache.commons.io.filefilter.NameFileFilter#caseSensitivity" target="org.apache.commons.io.filefilter.NameFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2724" source="org.apache.commons.io.filefilter.NameFileFilter(java.util.List,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2725" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2726" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2727" source="org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)" target="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2728" source="org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.NameFileFilter#names">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2729" source="org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.NameFileFilter#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2730" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2731" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2732" source="org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2733" source="org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.NameFileFilter#names">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2734" source="org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.NameFileFilter#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2735" source="org.apache.commons.io.filefilter.AbstractFileFilter.toString()" target="org.apache.commons.io.filefilter.NameFileFilter.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2736" source="org.apache.commons.io.filefilter.NameFileFilter.toString()" target="org.apache.commons.io.filefilter.AbstractFileFilter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2737" source="org.apache.commons.io.filefilter.NameFileFilter.toString()" target="org.apache.commons.io.filefilter.NameFileFilter#names">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2738" source="org.apache.commons.io.filefilter.NameFileFilter.toString()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2739" source="org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2740" source="org.apache.commons.io.filefilter.NotFileFilter#filter" target="org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2741" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2742" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2743" source="org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2744" source="org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.NotFileFilter#filter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2745" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2746" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2747" source="org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2748" source="org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.NotFileFilter#filter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2749" source="org.apache.commons.io.filefilter.AbstractFileFilter.toString()" target="org.apache.commons.io.filefilter.NotFileFilter.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2750" source="org.apache.commons.io.filefilter.NotFileFilter.toString()" target="org.apache.commons.io.filefilter.AbstractFileFilter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2751" source="org.apache.commons.io.filefilter.NotFileFilter.toString()" target="org.apache.commons.io.filefilter.NotFileFilter#filter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2752" source="org.apache.commons.io.filefilter.OrFileFilter()" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2753" source="org.apache.commons.io.filefilter.OrFileFilter#fileFilters" target="org.apache.commons.io.filefilter.OrFileFilter()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2754" source="org.apache.commons.io.filefilter.OrFileFilter(java.util.List)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2755" source="org.apache.commons.io.filefilter.OrFileFilter#fileFilters" target="org.apache.commons.io.filefilter.OrFileFilter(java.util.List)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2756" source="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2757" source="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2758" source="org.apache.commons.io.filefilter.OrFileFilter#fileFilters" target="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2759" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2760" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2761" source="org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2762" source="org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.OrFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2763" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2764" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2765" source="org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2766" source="org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.OrFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2767" source="org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2768" source="org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.OrFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2769" source="org.apache.commons.io.filefilter.AbstractFileFilter.toString()" target="org.apache.commons.io.filefilter.OrFileFilter.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2770" source="org.apache.commons.io.filefilter.OrFileFilter.toString()" target="org.apache.commons.io.filefilter.AbstractFileFilter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2771" source="org.apache.commons.io.filefilter.OrFileFilter.toString()" target="org.apache.commons.io.filefilter.OrFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2772" source="org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()" target="org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2773" source="org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()" target="org.apache.commons.io.filefilter.OrFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2774" source="org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2775" source="org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.OrFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2776" source="org.apache.commons.io.filefilter.ConditionalFileFilter.setFileFilters(java.util.List)" target="org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2777" source="org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)" target="org.apache.commons.io.filefilter.OrFileFilter#fileFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2778" source="org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String)" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2779" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.getDefaultWorkingPath()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2780" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.getDefaultWorkingPath()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase#DEFAULT_WORKING_PATH">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2781" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.getWorkingPathNamePropertyKey()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2782" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.getWorkingPathNamePropertyKey()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase#WORKING_PATH_NAME_PROPERTY_KEY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2783" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.getFalseResults()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2784" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.getFalseResults()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFalseResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2785" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.getFileResults()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2786" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.getFileResults()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFileResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2787" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.getFilenameResults()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2788" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.getFilenameResults()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFilenameResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2789" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.getTestFilters()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2790" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.getTestFilters()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2791" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.getTrueResults()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2792" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.getTrueResults()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase#testTrueResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2793" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.getConditionalFileFilter()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2794" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.getConditionalFileFilter()" target="org.apache.commons.io.filefilter.OrFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2795" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2796" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)" target="org.apache.commons.io.filefilter.OrFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2797" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)" target="org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2798" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2799" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List)" target="org.apache.commons.io.filefilter.OrFileFilter(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2800" source="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUp()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2801" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUp()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2802" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUp()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2803" source="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFilters" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2804" source="org.apache.commons.io.filefilter.OrFileFilterTestCase#testTrueResults" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2805" source="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFalseResults" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2806" source="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFileResults" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2807" source="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFilenameResults" target="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2808" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2809" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase#testTrueResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2810" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFalseResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2811" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFileResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2812" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.OrFileFilterTestCase#testFilenameResults">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2813" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#trueFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2814" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()" target="java.lang.Boolean#TRUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2815" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()" target="org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase#falseFilters">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2816" source="org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()" target="java.lang.Boolean#FALSE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2817" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2818" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2819" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2820" source="org.apache.commons.io.filefilter.PrefixFileFilter#prefixes" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2821" source="org.apache.commons.io.filefilter.PrefixFileFilter#caseSensitivity" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2822" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2823" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2824" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2825" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2826" source="org.apache.commons.io.filefilter.PrefixFileFilter#prefixes" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2827" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2828" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.PrefixFileFilter#prefixes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2829" source="org.apache.commons.io.filefilter.PrefixFileFilter#caseSensitivity" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2830" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2831" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2832" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2833" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List,org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2834" source="org.apache.commons.io.filefilter.PrefixFileFilter#prefixes" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2835" source="org.apache.commons.io.filefilter.PrefixFileFilter#caseSensitivity" target="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2836" source="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2837" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2838" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2839" source="org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)" target="org.apache.commons.io.IOCase.checkStartsWith(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2840" source="org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.PrefixFileFilter#prefixes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2841" source="org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.PrefixFileFilter#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2842" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2843" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2844" source="org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.IOCase.checkStartsWith(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2845" source="org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.PrefixFileFilter#prefixes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2846" source="org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.PrefixFileFilter#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2847" source="org.apache.commons.io.filefilter.AbstractFileFilter.toString()" target="org.apache.commons.io.filefilter.PrefixFileFilter.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2848" source="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" target="org.apache.commons.io.filefilter.AbstractFileFilter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2849" source="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" target="org.apache.commons.io.filefilter.PrefixFileFilter#prefixes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2850" source="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2851" source="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2852" source="org.apache.commons.io.filefilter.RegexFileFilter#pattern" target="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2853" source="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,int)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2854" source="org.apache.commons.io.filefilter.RegexFileFilter#pattern" target="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2855" source="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2856" source="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase.isCaseSensitive()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2857" source="java.util.regex.Pattern#CASE_INSENSITIVE" target="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2858" source="org.apache.commons.io.filefilter.RegexFileFilter#pattern" target="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2859" source="org.apache.commons.io.filefilter.RegexFileFilter(java.util.regex.Pattern)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2860" source="org.apache.commons.io.filefilter.RegexFileFilter#pattern" target="org.apache.commons.io.filefilter.RegexFileFilter(java.util.regex.Pattern)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2861" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.RegexFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2862" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.RegexFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2863" source="org.apache.commons.io.filefilter.RegexFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.RegexFileFilter#pattern">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2864" source="org.apache.commons.io.filefilter.RegexFileFilterTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2865" source="org.apache.commons.io.filefilter.RegexFileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2866" source="org.apache.commons.io.filefilter.RegexFileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)" target="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2867" source="org.apache.commons.io.filefilter.RegexFileFilterTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2868" source="org.apache.commons.io.filefilter.RegexFileFilterTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2869" source="org.apache.commons.io.filefilter.RegexFileFilterTestCase.tearDown()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2870" source="org.apache.commons.io.filefilter.RegexFileFilterTestCase.testRegex()" target="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2871" source="org.apache.commons.io.filefilter.RegexFileFilterTestCase.testRegex()" target="org.apache.commons.io.filefilter.RegexFileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2872" source="org.apache.commons.io.filefilter.RegexFileFilterTestCase.testRegex()" target="org.apache.commons.io.filefilter.RegexFileFilter(java.util.regex.Pattern)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2873" source="org.apache.commons.io.filefilter.RegexFileFilterTestCase.testRegex()" target="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2874" source="org.apache.commons.io.filefilter.RegexFileFilterTestCase.testRegex()" target="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2875" source="org.apache.commons.io.filefilter.RegexFileFilterTestCase.testRegex()" target="java.util.regex.Pattern#CASE_INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2876" source="org.apache.commons.io.filefilter.RegexFileFilterTestCase.testRegex()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2877" source="org.apache.commons.io.filefilter.SizeFileFilter(long)" target="org.apache.commons.io.filefilter.SizeFileFilter(long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2878" source="org.apache.commons.io.filefilter.SizeFileFilter(long,boolean)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2879" source="org.apache.commons.io.filefilter.SizeFileFilter#size" target="org.apache.commons.io.filefilter.SizeFileFilter(long,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2880" source="org.apache.commons.io.filefilter.SizeFileFilter#acceptLarger" target="org.apache.commons.io.filefilter.SizeFileFilter(long,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2881" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.SizeFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2882" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.SizeFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2883" source="org.apache.commons.io.filefilter.SizeFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.SizeFileFilter#size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2884" source="org.apache.commons.io.filefilter.SizeFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.SizeFileFilter#acceptLarger">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2885" source="org.apache.commons.io.filefilter.AbstractFileFilter.toString()" target="org.apache.commons.io.filefilter.SizeFileFilter.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2886" source="org.apache.commons.io.filefilter.SizeFileFilter.toString()" target="org.apache.commons.io.filefilter.AbstractFileFilter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2887" source="org.apache.commons.io.filefilter.SizeFileFilter.toString()" target="org.apache.commons.io.filefilter.SizeFileFilter#acceptLarger">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2888" source="org.apache.commons.io.filefilter.SizeFileFilter.toString()" target="org.apache.commons.io.filefilter.SizeFileFilter#size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2889" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2890" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2891" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2892" source="org.apache.commons.io.filefilter.SuffixFileFilter#suffixes" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2893" source="org.apache.commons.io.filefilter.SuffixFileFilter#caseSensitivity" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2894" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2895" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2896" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2897" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2898" source="org.apache.commons.io.filefilter.SuffixFileFilter#suffixes" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2899" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2900" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.SuffixFileFilter#suffixes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2901" source="org.apache.commons.io.filefilter.SuffixFileFilter#caseSensitivity" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2902" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2903" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2904" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2905" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List,org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2906" source="org.apache.commons.io.filefilter.SuffixFileFilter#suffixes" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2907" source="org.apache.commons.io.filefilter.SuffixFileFilter#caseSensitivity" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2908" source="org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2909" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2910" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2911" source="org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)" target="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2912" source="org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.SuffixFileFilter#suffixes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2913" source="org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.SuffixFileFilter#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2914" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2915" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2916" source="org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2917" source="org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.SuffixFileFilter#suffixes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2918" source="org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.SuffixFileFilter#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2919" source="org.apache.commons.io.filefilter.AbstractFileFilter.toString()" target="org.apache.commons.io.filefilter.SuffixFileFilter.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2920" source="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" target="org.apache.commons.io.filefilter.AbstractFileFilter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2921" source="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" target="org.apache.commons.io.filefilter.SuffixFileFilter#suffixes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2922" source="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2923" source="org.apache.commons.io.filefilter.TrueFileFilter#TRUE" target="org.apache.commons.io.filefilter.TrueFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2924" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2925" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2926" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String)" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2927" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2928" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2929" source="org.apache.commons.io.filefilter.WildcardFileFilter#wildcards" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2930" source="org.apache.commons.io.filefilter.WildcardFileFilter#caseSensitivity" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2931" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2932" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[])" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2933" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[])" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2934" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2935" source="org.apache.commons.io.filefilter.WildcardFileFilter#wildcards" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2936" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2937" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.WildcardFileFilter#wildcards">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2938" source="org.apache.commons.io.filefilter.WildcardFileFilter#caseSensitivity" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2939" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2940" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.util.List)" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2941" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.util.List)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2942" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.util.List,org.apache.commons.io.IOCase)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2943" source="org.apache.commons.io.filefilter.WildcardFileFilter#wildcards" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2944" source="org.apache.commons.io.filefilter.WildcardFileFilter#caseSensitivity" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.util.List,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2945" source="org.apache.commons.io.filefilter.WildcardFileFilter(java.util.List,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2946" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.WildcardFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2947" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.WildcardFileFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2948" source="org.apache.commons.io.filefilter.WildcardFileFilter.accept(java.io.File)" target="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2949" source="org.apache.commons.io.filefilter.WildcardFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.WildcardFileFilter#wildcards">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2950" source="org.apache.commons.io.filefilter.WildcardFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.WildcardFileFilter#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2951" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.WildcardFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2952" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.WildcardFileFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2953" source="org.apache.commons.io.filefilter.WildcardFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2954" source="org.apache.commons.io.filefilter.WildcardFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.WildcardFileFilter#wildcards">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2955" source="org.apache.commons.io.filefilter.WildcardFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.WildcardFileFilter#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2956" source="org.apache.commons.io.filefilter.AbstractFileFilter.toString()" target="org.apache.commons.io.filefilter.WildcardFileFilter.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2957" source="org.apache.commons.io.filefilter.WildcardFileFilter.toString()" target="org.apache.commons.io.filefilter.AbstractFileFilter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2958" source="org.apache.commons.io.filefilter.WildcardFileFilter.toString()" target="org.apache.commons.io.filefilter.WildcardFileFilter#wildcards">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2959" source="org.apache.commons.io.filefilter.WildcardFileFilter.toString()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2960" source="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2961" source="org.apache.commons.io.filefilter.WildcardFilter#wildcards" target="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2962" source="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2963" source="org.apache.commons.io.filefilter.WildcardFilter#wildcards" target="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2964" source="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2965" source="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])" target="org.apache.commons.io.filefilter.WildcardFilter#wildcards">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2966" source="org.apache.commons.io.filefilter.WildcardFilter(java.util.List)" target="org.apache.commons.io.filefilter.AbstractFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2967" source="org.apache.commons.io.filefilter.WildcardFilter#wildcards" target="org.apache.commons.io.filefilter.WildcardFilter(java.util.List)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2968" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2969" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2970" source="org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)" target="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2971" source="org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)" target="org.apache.commons.io.filefilter.WildcardFilter#wildcards">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2972" source="org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2973" source="org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e2974" source="org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2975" source="org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)" target="org.apache.commons.io.filefilter.WildcardFilter#wildcards">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2976" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2977" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2978" source="org.apache.commons.io.comparator.DefaultFileComparator#DEFAULT_COMPARATOR" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2979" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#reverse" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2980" source="org.apache.commons.io.comparator.DefaultFileComparator#DEFAULT_REVERSE" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2981" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2982" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.tearDown()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2983" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.tearDown()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2984" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#reverse" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.tearDown()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2985" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.tearDown()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2986" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.tearDown()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2987" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.tearDown()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2988" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.tearDown()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e2989" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testComparator()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2990" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testComparator()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2991" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testComparator()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2992" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testComparator()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2993" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testComparator()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2994" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testReverseComparator()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#reverse">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2995" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testReverseComparator()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2996" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testReverseComparator()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2997" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testReverseComparator()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2998" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testReverseComparator()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e2999" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArray()" target="org.apache.commons.io.comparator.AbstractFileComparator.sort(java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3000" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArray()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3001" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArray()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3002" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArray()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3003" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArray()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3004" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArray()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3005" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArray()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3006" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArray()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3007" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArrayNull()" target="org.apache.commons.io.comparator.AbstractFileComparator.sort(java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3008" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArrayNull()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3009" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortList()" target="org.apache.commons.io.comparator.AbstractFileComparator.sort(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3010" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortList()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3011" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortList()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3012" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortList()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3013" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortList()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3014" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortListNull()" target="org.apache.commons.io.comparator.AbstractFileComparator.sort(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3015" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortListNull()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3016" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testToString()" target="org.apache.commons.io.comparator.AbstractFileComparator.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3017" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testToString()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3018" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testToString()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#reverse">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3019" source="org.apache.commons.io.comparator.CompositeFileComparator(java.lang.Iterable)" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3020" source="org.apache.commons.io.comparator.CompositeFileComparator#delegates" target="org.apache.commons.io.comparator.CompositeFileComparator(java.lang.Iterable)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3021" source="org.apache.commons.io.comparator.CompositeFileComparator#NO_COMPARATORS" target="org.apache.commons.io.comparator.CompositeFileComparator(java.lang.Iterable)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3022" source="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3023" source="org.apache.commons.io.comparator.CompositeFileComparator#delegates" target="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3024" source="org.apache.commons.io.comparator.CompositeFileComparator#NO_COMPARATORS" target="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3025" source="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3026" source="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])" target="org.apache.commons.io.comparator.CompositeFileComparator#delegates">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3027" source="org.apache.commons.io.comparator.CompositeFileComparator.compare(java.io.File,java.io.File)" target="org.apache.commons.io.comparator.CompositeFileComparator#delegates">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3028" source="org.apache.commons.io.comparator.AbstractFileComparator.toString()" target="org.apache.commons.io.comparator.CompositeFileComparator.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3029" source="org.apache.commons.io.comparator.CompositeFileComparator.toString()" target="org.apache.commons.io.comparator.AbstractFileComparator.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3030" source="org.apache.commons.io.comparator.CompositeFileComparator.toString()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3031" source="org.apache.commons.io.comparator.CompositeFileComparator.toString()" target="org.apache.commons.io.comparator.CompositeFileComparator#delegates">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3032" source="org.apache.commons.io.comparator.CompositeFileComparatorTest(java.lang.String)" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3033" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()" target="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3034" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3035" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3036" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3037" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3038" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3039" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator" target="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3040" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.SizeFileComparator#SIZE_COMPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3041" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_COMPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3042" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#reverse" target="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3043" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3044" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile" target="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3045" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1" target="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3046" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2" target="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3047" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile" target="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3048" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3049" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3050" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3051" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3052" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorArrayNull()" target="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3053" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorArrayNull()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3054" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorArrayNull()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3055" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterable()" target="org.apache.commons.io.comparator.CompositeFileComparator(java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3056" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterable()" target="org.apache.commons.io.comparator.SizeFileComparator#SIZE_COMPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3057" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterable()" target="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_COMPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3058" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterable()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3059" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterable()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3060" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterable()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3061" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterable()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3062" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterableNull()" target="org.apache.commons.io.comparator.CompositeFileComparator(java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3063" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterableNull()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3064" source="org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterableNull()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3065" source="org.apache.commons.io.comparator.DefaultFileComparator#DEFAULT_COMPARATOR" target="org.apache.commons.io.comparator.DefaultFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3066" source="org.apache.commons.io.comparator.DefaultFileComparator#DEFAULT_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3067" source="org.apache.commons.io.comparator.DefaultFileComparator()" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3068" source="org.apache.commons.io.comparator.DefaultFileComparatorTest(java.lang.String)" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3069" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()" target="org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3070" source="org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3071" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator" target="org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3072" source="org.apache.commons.io.comparator.DefaultFileComparator#DEFAULT_COMPARATOR" target="org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3073" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#reverse" target="org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3074" source="org.apache.commons.io.comparator.DefaultFileComparator#DEFAULT_REVERSE" target="org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3075" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1" target="org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3076" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2" target="org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3077" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile" target="org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3078" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile" target="org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3079" source="org.apache.commons.io.comparator.DirectoryFileComparator#DIRECTORY_COMPARATOR" target="org.apache.commons.io.comparator.DirectoryFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3080" source="org.apache.commons.io.comparator.DirectoryFileComparator#DIRECTORY_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3081" source="org.apache.commons.io.comparator.DirectoryFileComparator()" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3082" source="org.apache.commons.io.comparator.DirectoryFileComparator.compare(java.io.File,java.io.File)" target="org.apache.commons.io.comparator.DirectoryFileComparator.getType(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3083" source="org.apache.commons.io.comparator.DirectoryFileComparatorTest(java.lang.String)" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3084" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()" target="org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3085" source="org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3086" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator" target="org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3087" source="org.apache.commons.io.comparator.DirectoryFileComparator#DIRECTORY_COMPARATOR" target="org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3088" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#reverse" target="org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3089" source="org.apache.commons.io.comparator.DirectoryFileComparator#DIRECTORY_REVERSE" target="org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3090" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1" target="org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3091" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2" target="org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3092" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile" target="org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3093" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile" target="org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3094" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArray()" target="org.apache.commons.io.comparator.DirectoryFileComparatorTest.testSortArray()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3095" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortList()" target="org.apache.commons.io.comparator.DirectoryFileComparatorTest.testSortList()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3096" source="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_COMPARATOR" target="org.apache.commons.io.comparator.ExtensionFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3097" source="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3098" source="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_INSENSITIVE_COMPARATOR" target="org.apache.commons.io.comparator.ExtensionFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3099" source="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_INSENSITIVE_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3100" source="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_SYSTEM_COMPARATOR" target="org.apache.commons.io.comparator.ExtensionFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3101" source="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_SYSTEM_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3102" source="org.apache.commons.io.comparator.ExtensionFileComparator()" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3103" source="org.apache.commons.io.comparator.ExtensionFileComparator#caseSensitivity" target="org.apache.commons.io.comparator.ExtensionFileComparator()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3104" source="org.apache.commons.io.IOCase#SENSITIVE" target="org.apache.commons.io.comparator.ExtensionFileComparator()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3105" source="org.apache.commons.io.comparator.ExtensionFileComparator(org.apache.commons.io.IOCase)" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3106" source="org.apache.commons.io.comparator.ExtensionFileComparator#caseSensitivity" target="org.apache.commons.io.comparator.ExtensionFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3107" source="org.apache.commons.io.comparator.ExtensionFileComparator(org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3108" source="org.apache.commons.io.comparator.ExtensionFileComparator.compare(java.io.File,java.io.File)" target="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3109" source="org.apache.commons.io.comparator.ExtensionFileComparator.compare(java.io.File,java.io.File)" target="org.apache.commons.io.IOCase.checkCompareTo(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3110" source="org.apache.commons.io.comparator.ExtensionFileComparator.compare(java.io.File,java.io.File)" target="org.apache.commons.io.comparator.ExtensionFileComparator#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3111" source="org.apache.commons.io.comparator.AbstractFileComparator.toString()" target="org.apache.commons.io.comparator.ExtensionFileComparator.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3112" source="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" target="org.apache.commons.io.comparator.AbstractFileComparator.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3113" source="org.apache.commons.io.comparator.ExtensionFileComparator.toString()" target="org.apache.commons.io.comparator.ExtensionFileComparator#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3114" source="org.apache.commons.io.comparator.ExtensionFileComparatorTest(java.lang.String)" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3115" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()" target="org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3116" source="org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3117" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator" target="org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3118" source="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_COMPARATOR" target="org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3119" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#reverse" target="org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3120" source="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_REVERSE" target="org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3121" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1" target="org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3122" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2" target="org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3123" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile" target="org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3124" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile" target="org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3125" source="org.apache.commons.io.comparator.ExtensionFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.ExtensionFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3126" source="org.apache.commons.io.comparator.ExtensionFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3127" source="org.apache.commons.io.comparator.ExtensionFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3128" source="org.apache.commons.io.comparator.ExtensionFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3129" source="org.apache.commons.io.comparator.ExtensionFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.ExtensionFileComparator#EXTENSION_INSENSITIVE_COMPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3130" source="org.apache.commons.io.comparator.LastModifiedFileComparator#LASTMODIFIED_COMPARATOR" target="org.apache.commons.io.comparator.LastModifiedFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3131" source="org.apache.commons.io.comparator.LastModifiedFileComparator#LASTMODIFIED_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3132" source="org.apache.commons.io.comparator.LastModifiedFileComparator()" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3133" source="org.apache.commons.io.comparator.LastModifiedFileComparatorTest(java.lang.String)" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3134" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()" target="org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3135" source="org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3136" source="org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3137" source="org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3138" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator" target="org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3139" source="org.apache.commons.io.comparator.LastModifiedFileComparator#LASTMODIFIED_COMPARATOR" target="org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3140" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#reverse" target="org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3141" source="org.apache.commons.io.comparator.LastModifiedFileComparator#LASTMODIFIED_REVERSE" target="org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3142" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1" target="org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3143" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2" target="org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3144" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile" target="org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3145" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile" target="org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3146" source="org.apache.commons.io.comparator.NameFileComparator#NAME_COMPARATOR" target="org.apache.commons.io.comparator.NameFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3147" source="org.apache.commons.io.comparator.NameFileComparator#NAME_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3148" source="org.apache.commons.io.comparator.NameFileComparator#NAME_INSENSITIVE_COMPARATOR" target="org.apache.commons.io.comparator.NameFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3149" source="org.apache.commons.io.comparator.NameFileComparator#NAME_INSENSITIVE_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3150" source="org.apache.commons.io.comparator.NameFileComparator#NAME_SYSTEM_COMPARATOR" target="org.apache.commons.io.comparator.NameFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3151" source="org.apache.commons.io.comparator.NameFileComparator#NAME_SYSTEM_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3152" source="org.apache.commons.io.comparator.NameFileComparator()" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3153" source="org.apache.commons.io.comparator.NameFileComparator#caseSensitivity" target="org.apache.commons.io.comparator.NameFileComparator()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3154" source="org.apache.commons.io.IOCase#SENSITIVE" target="org.apache.commons.io.comparator.NameFileComparator()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3155" source="org.apache.commons.io.comparator.NameFileComparator(org.apache.commons.io.IOCase)" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3156" source="org.apache.commons.io.comparator.NameFileComparator#caseSensitivity" target="org.apache.commons.io.comparator.NameFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3157" source="org.apache.commons.io.comparator.NameFileComparator(org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3158" source="org.apache.commons.io.comparator.NameFileComparator.compare(java.io.File,java.io.File)" target="org.apache.commons.io.IOCase.checkCompareTo(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3159" source="org.apache.commons.io.comparator.NameFileComparator.compare(java.io.File,java.io.File)" target="org.apache.commons.io.comparator.NameFileComparator#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3160" source="org.apache.commons.io.comparator.AbstractFileComparator.toString()" target="org.apache.commons.io.comparator.NameFileComparator.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3161" source="org.apache.commons.io.comparator.NameFileComparator.toString()" target="org.apache.commons.io.comparator.AbstractFileComparator.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3162" source="org.apache.commons.io.comparator.NameFileComparator.toString()" target="org.apache.commons.io.comparator.NameFileComparator#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3163" source="org.apache.commons.io.comparator.NameFileComparatorTest(java.lang.String)" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3164" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()" target="org.apache.commons.io.comparator.NameFileComparatorTest.setUp()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3165" source="org.apache.commons.io.comparator.NameFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3166" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator" target="org.apache.commons.io.comparator.NameFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3167" source="org.apache.commons.io.comparator.NameFileComparator#NAME_INSENSITIVE_COMPARATOR" target="org.apache.commons.io.comparator.NameFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3168" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#reverse" target="org.apache.commons.io.comparator.NameFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3169" source="org.apache.commons.io.comparator.NameFileComparator#NAME_REVERSE" target="org.apache.commons.io.comparator.NameFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3170" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1" target="org.apache.commons.io.comparator.NameFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3171" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2" target="org.apache.commons.io.comparator.NameFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3172" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile" target="org.apache.commons.io.comparator.NameFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3173" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile" target="org.apache.commons.io.comparator.NameFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3174" source="org.apache.commons.io.comparator.NameFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.NameFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3175" source="org.apache.commons.io.comparator.NameFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3176" source="org.apache.commons.io.comparator.NameFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3177" source="org.apache.commons.io.comparator.NameFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3178" source="org.apache.commons.io.comparator.NameFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.NameFileComparator#NAME_INSENSITIVE_COMPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3179" source="org.apache.commons.io.comparator.PathFileComparator#PATH_COMPARATOR" target="org.apache.commons.io.comparator.PathFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3180" source="org.apache.commons.io.comparator.PathFileComparator#PATH_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3181" source="org.apache.commons.io.comparator.PathFileComparator#PATH_INSENSITIVE_COMPARATOR" target="org.apache.commons.io.comparator.PathFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3182" source="org.apache.commons.io.comparator.PathFileComparator#PATH_INSENSITIVE_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3183" source="org.apache.commons.io.comparator.PathFileComparator#PATH_SYSTEM_COMPARATOR" target="org.apache.commons.io.comparator.PathFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3184" source="org.apache.commons.io.comparator.PathFileComparator#PATH_SYSTEM_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3185" source="org.apache.commons.io.comparator.PathFileComparator()" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3186" source="org.apache.commons.io.comparator.PathFileComparator#caseSensitivity" target="org.apache.commons.io.comparator.PathFileComparator()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3187" source="org.apache.commons.io.IOCase#SENSITIVE" target="org.apache.commons.io.comparator.PathFileComparator()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3188" source="org.apache.commons.io.comparator.PathFileComparator(org.apache.commons.io.IOCase)" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3189" source="org.apache.commons.io.comparator.PathFileComparator#caseSensitivity" target="org.apache.commons.io.comparator.PathFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3190" source="org.apache.commons.io.comparator.PathFileComparator(org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3191" source="org.apache.commons.io.comparator.PathFileComparator.compare(java.io.File,java.io.File)" target="org.apache.commons.io.IOCase.checkCompareTo(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3192" source="org.apache.commons.io.comparator.PathFileComparator.compare(java.io.File,java.io.File)" target="org.apache.commons.io.comparator.PathFileComparator#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3193" source="org.apache.commons.io.comparator.AbstractFileComparator.toString()" target="org.apache.commons.io.comparator.PathFileComparator.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3194" source="org.apache.commons.io.comparator.PathFileComparator.toString()" target="org.apache.commons.io.comparator.AbstractFileComparator.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3195" source="org.apache.commons.io.comparator.PathFileComparator.toString()" target="org.apache.commons.io.comparator.PathFileComparator#caseSensitivity">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3196" source="org.apache.commons.io.comparator.PathFileComparatorTest(java.lang.String)" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3197" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()" target="org.apache.commons.io.comparator.PathFileComparatorTest.setUp()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3198" source="org.apache.commons.io.comparator.PathFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3199" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator" target="org.apache.commons.io.comparator.PathFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3200" source="org.apache.commons.io.comparator.PathFileComparator#PATH_COMPARATOR" target="org.apache.commons.io.comparator.PathFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3201" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#reverse" target="org.apache.commons.io.comparator.PathFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3202" source="org.apache.commons.io.comparator.PathFileComparator#PATH_REVERSE" target="org.apache.commons.io.comparator.PathFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3203" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1" target="org.apache.commons.io.comparator.PathFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3204" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2" target="org.apache.commons.io.comparator.PathFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3205" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile" target="org.apache.commons.io.comparator.PathFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3206" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile" target="org.apache.commons.io.comparator.PathFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3207" source="org.apache.commons.io.comparator.PathFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.PathFileComparator(org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3208" source="org.apache.commons.io.comparator.PathFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3209" source="org.apache.commons.io.comparator.PathFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3210" source="org.apache.commons.io.comparator.PathFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3211" source="org.apache.commons.io.comparator.PathFileComparatorTest.testCaseSensitivity()" target="org.apache.commons.io.comparator.PathFileComparator#PATH_INSENSITIVE_COMPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3212" source="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3213" source="org.apache.commons.io.comparator.ReverseComparator#delegate" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3214" source="org.apache.commons.io.comparator.ReverseComparator.compare(java.io.File,java.io.File)" target="org.apache.commons.io.comparator.ReverseComparator#delegate">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3215" source="org.apache.commons.io.comparator.AbstractFileComparator.toString()" target="org.apache.commons.io.comparator.ReverseComparator.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3216" source="org.apache.commons.io.comparator.ReverseComparator.toString()" target="org.apache.commons.io.comparator.AbstractFileComparator.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3217" source="org.apache.commons.io.comparator.ReverseComparator.toString()" target="org.apache.commons.io.comparator.ReverseComparator#delegate">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3218" source="org.apache.commons.io.comparator.SizeFileComparator#SIZE_COMPARATOR" target="org.apache.commons.io.comparator.SizeFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3219" source="org.apache.commons.io.comparator.SizeFileComparator#SIZE_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3220" source="org.apache.commons.io.comparator.SizeFileComparator#SIZE_SUMDIR_COMPARATOR" target="org.apache.commons.io.comparator.SizeFileComparator(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3221" source="org.apache.commons.io.comparator.SizeFileComparator#SIZE_SUMDIR_REVERSE" target="org.apache.commons.io.comparator.ReverseComparator(java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3222" source="org.apache.commons.io.comparator.SizeFileComparator()" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3223" source="org.apache.commons.io.comparator.SizeFileComparator#sumDirectoryContents" target="org.apache.commons.io.comparator.SizeFileComparator()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3224" source="org.apache.commons.io.comparator.SizeFileComparator(boolean)" target="org.apache.commons.io.comparator.AbstractFileComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3225" source="org.apache.commons.io.comparator.SizeFileComparator#sumDirectoryContents" target="org.apache.commons.io.comparator.SizeFileComparator(boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3226" source="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" target="org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3227" source="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" target="org.apache.commons.io.comparator.SizeFileComparator#sumDirectoryContents">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3228" source="org.apache.commons.io.comparator.AbstractFileComparator.toString()" target="org.apache.commons.io.comparator.SizeFileComparator.toString()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3229" source="org.apache.commons.io.comparator.SizeFileComparator.toString()" target="org.apache.commons.io.comparator.AbstractFileComparator.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3230" source="org.apache.commons.io.comparator.SizeFileComparator.toString()" target="org.apache.commons.io.comparator.SizeFileComparator#sumDirectoryContents">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3231" source="org.apache.commons.io.comparator.SizeFileComparatorTest(java.lang.String)" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3232" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()" target="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3233" source="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3234" source="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3235" source="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3236" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator" target="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3237" source="org.apache.commons.io.comparator.SizeFileComparator#SIZE_COMPARATOR" target="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3238" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#reverse" target="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3239" source="org.apache.commons.io.comparator.SizeFileComparator#SIZE_REVERSE" target="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3240" source="org.apache.commons.io.comparator.SizeFileComparatorTest#smallerDir" target="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3241" source="org.apache.commons.io.comparator.SizeFileComparatorTest#largerDir" target="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3242" source="org.apache.commons.io.comparator.SizeFileComparatorTest#smallerFile" target="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3243" source="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.SizeFileComparatorTest#smallerDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3244" source="org.apache.commons.io.comparator.SizeFileComparatorTest#largerFile" target="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3245" source="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.SizeFileComparatorTest#largerDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3246" source="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.SizeFileComparatorTest#smallerFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3247" source="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()" target="org.apache.commons.io.comparator.SizeFileComparatorTest#largerFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3248" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile1" target="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3249" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#equalFile2" target="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3250" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#lessFile" target="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3251" source="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile" target="org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3252" source="org.apache.commons.io.comparator.SizeFileComparatorTest.testCompareDirectorySizes()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3253" source="org.apache.commons.io.comparator.SizeFileComparatorTest.testCompareDirectorySizes()" target="org.apache.commons.io.comparator.SizeFileComparatorTest#smallerDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3254" source="org.apache.commons.io.comparator.SizeFileComparatorTest.testCompareDirectorySizes()" target="org.apache.commons.io.comparator.SizeFileComparatorTest#largerDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3255" source="org.apache.commons.io.comparator.SizeFileComparatorTest.testCompareDirectorySizes()" target="org.apache.commons.io.comparator.SizeFileComparator#SIZE_SUMDIR_COMPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3256" source="org.apache.commons.io.comparator.SizeFileComparatorTest.testCompareDirectorySizes()" target="org.apache.commons.io.comparator.SizeFileComparator#SIZE_SUMDIR_REVERSE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3257" source="org.apache.commons.io.comparator.SizeFileComparatorTest.testNonexistantFile()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#comparator">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3258" source="org.apache.commons.io.comparator.SizeFileComparatorTest.testNonexistantFile()" target="org.apache.commons.io.comparator.ComparatorAbstractTestCase#moreFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3259" source="org.apache.commons.io.output.AppendableOutputStream#appendable" target="org.apache.commons.io.output.AppendableOutputStream(T)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3260" source="org.apache.commons.io.output.AppendableOutputStream.getAppendable()" target="org.apache.commons.io.output.AppendableOutputStream#appendable">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3261" source="org.apache.commons.io.output.AppendableOutputStream.write(int)" target="org.apache.commons.io.output.AppendableOutputStream#appendable">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3262" source="org.apache.commons.io.output.AppendableOutputStreamTest.setUp()" target="org.apache.commons.io.output.AppendableOutputStream(T)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3263" source="org.apache.commons.io.output.AppendableOutputStreamTest#out" target="org.apache.commons.io.output.AppendableOutputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3264" source="org.apache.commons.io.output.AppendableOutputStreamTest.testWriteInt()" target="org.apache.commons.io.output.AppendableOutputStream.write(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3265" source="org.apache.commons.io.output.AppendableOutputStreamTest.testWriteInt()" target="org.apache.commons.io.output.AppendableOutputStream.getAppendable()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3266" source="org.apache.commons.io.output.AppendableOutputStreamTest.testWriteInt()" target="org.apache.commons.io.output.AppendableOutputStreamTest#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3267" source="org.apache.commons.io.output.AppendableOutputStreamTest.testWriteStringBuilder()" target="org.apache.commons.io.output.AppendableOutputStream.getAppendable()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3268" source="org.apache.commons.io.output.AppendableOutputStreamTest.testWriteStringBuilder()" target="org.apache.commons.io.output.AppendableOutputStreamTest#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3269" source="org.apache.commons.io.output.BrokenOutputStream()" target="org.apache.commons.io.output.BrokenOutputStream(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3270" source="org.apache.commons.io.output.BrokenOutputStream#exception" target="org.apache.commons.io.output.BrokenOutputStream(java.io.IOException)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3271" source="org.apache.commons.io.output.BrokenOutputStream.close()" target="org.apache.commons.io.output.BrokenOutputStream#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3272" source="org.apache.commons.io.output.BrokenOutputStream.flush()" target="org.apache.commons.io.output.BrokenOutputStream#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3273" source="org.apache.commons.io.output.BrokenOutputStream.write(int)" target="org.apache.commons.io.output.BrokenOutputStream#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3274" source="org.apache.commons.io.output.BrokenOutputStreamTest.setUp()" target="org.apache.commons.io.output.BrokenOutputStream(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3275" source="org.apache.commons.io.output.BrokenOutputStreamTest#exception" target="org.apache.commons.io.output.BrokenOutputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3276" source="org.apache.commons.io.output.BrokenOutputStreamTest#stream" target="org.apache.commons.io.output.BrokenOutputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3277" source="org.apache.commons.io.output.BrokenOutputStreamTest.setUp()" target="org.apache.commons.io.output.BrokenOutputStreamTest#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3278" source="org.apache.commons.io.output.BrokenOutputStreamTest.testClose()" target="org.apache.commons.io.output.BrokenOutputStreamTest#stream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3279" source="org.apache.commons.io.output.BrokenOutputStreamTest.testClose()" target="org.apache.commons.io.output.BrokenOutputStreamTest#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3280" source="org.apache.commons.io.output.BrokenOutputStreamTest.testFlush()" target="org.apache.commons.io.output.BrokenOutputStreamTest#stream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3281" source="org.apache.commons.io.output.BrokenOutputStreamTest.testFlush()" target="org.apache.commons.io.output.BrokenOutputStreamTest#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3282" source="org.apache.commons.io.output.BrokenOutputStreamTest.testWrite()" target="org.apache.commons.io.output.BrokenOutputStreamTest#stream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3283" source="org.apache.commons.io.output.BrokenOutputStreamTest.testWrite()" target="org.apache.commons.io.output.BrokenOutputStreamTest#exception">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3284" source="org.apache.commons.io.output.ByteArrayOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3285" source="org.apache.commons.io.output.ByteArrayOutputStream(int)" target="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3286" source="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()" target="org.apache.commons.io.output.ByteArrayOutputStream#count">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3287" source="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()" target="org.apache.commons.io.output.ByteArrayOutputStream#EMPTY_BYTE_ARRAY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3288" source="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()" target="org.apache.commons.io.output.ByteArrayOutputStream#buffers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3289" source="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3290" source="org.apache.commons.io.output.ByteArrayOutputStream.size()" target="org.apache.commons.io.output.ByteArrayOutputStream#count">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3291" source="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3292" source="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream#count">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3293" source="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream#filledBufferSum">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3294" source="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream#currentBuffer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3295" source="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3296" source="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3297" source="org.apache.commons.io.output.ByteArrayOutputStream#count" target="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3298" source="org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3299" source="org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream,int)" target="org.apache.commons.io.output.ByteArrayOutputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3300" source="org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream,int)" target="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3301" source="org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream,int)" target="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3302" source="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()" target="org.apache.commons.io.input.ClosedInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3303" source="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream#count">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3304" source="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream#buffers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3305" source="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3306" source="org.apache.commons.io.output.ByteArrayOutputStream#reuseBuffers" target="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3307" source="org.apache.commons.io.output.ByteArrayOutputStream.toString()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3308" source="org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3309" source="org.apache.commons.io.output.ByteArrayOutputStream.toString(java.nio.charset.Charset)" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3310" source="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" target="org.apache.commons.io.output.ByteArrayOutputStream#currentBufferIndex">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3311" source="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" target="org.apache.commons.io.output.ByteArrayOutputStream#buffers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3312" source="org.apache.commons.io.output.ByteArrayOutputStream#filledBufferSum" target="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3313" source="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3314" source="org.apache.commons.io.output.ByteArrayOutputStream#currentBuffer" target="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3315" source="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" target="org.apache.commons.io.output.ByteArrayOutputStream#currentBuffer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3316" source="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" target="org.apache.commons.io.output.ByteArrayOutputStream#filledBufferSum">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3317" source="org.apache.commons.io.output.ByteArrayOutputStream.reset()" target="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3318" source="org.apache.commons.io.output.ByteArrayOutputStream#count" target="org.apache.commons.io.output.ByteArrayOutputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3319" source="org.apache.commons.io.output.ByteArrayOutputStream#filledBufferSum" target="org.apache.commons.io.output.ByteArrayOutputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3320" source="org.apache.commons.io.output.ByteArrayOutputStream#currentBufferIndex" target="org.apache.commons.io.output.ByteArrayOutputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3321" source="org.apache.commons.io.output.ByteArrayOutputStream.reset()" target="org.apache.commons.io.output.ByteArrayOutputStream#reuseBuffers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3322" source="org.apache.commons.io.output.ByteArrayOutputStream#currentBuffer" target="org.apache.commons.io.output.ByteArrayOutputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3323" source="org.apache.commons.io.output.ByteArrayOutputStream.reset()" target="org.apache.commons.io.output.ByteArrayOutputStream#buffers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3324" source="org.apache.commons.io.output.ByteArrayOutputStream.reset()" target="org.apache.commons.io.output.ByteArrayOutputStream#currentBufferIndex">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3325" source="org.apache.commons.io.output.ByteArrayOutputStream.reset()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3326" source="org.apache.commons.io.output.ByteArrayOutputStream#reuseBuffers" target="org.apache.commons.io.output.ByteArrayOutputStream.reset()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3327" source="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3328" source="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3329" source="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.ByteArrayOutputStream#count">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3330" source="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.ByteArrayOutputStream#filledBufferSum">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3331" source="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.ByteArrayOutputStream#currentBuffer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3332" source="org.apache.commons.io.output.ByteArrayOutputStream#count" target="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3333" source="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" target="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3334" source="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" target="org.apache.commons.io.output.ByteArrayOutputStream#count">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3335" source="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" target="org.apache.commons.io.output.ByteArrayOutputStream#filledBufferSum">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3336" source="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3337" source="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" target="org.apache.commons.io.output.ByteArrayOutputStream#currentBuffer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3338" source="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream#count">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3339" source="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream#buffers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3340" source="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3341" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3342" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)" target="org.apache.commons.io.output.ByteArrayOutputStream.write(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3343" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)" target="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3344" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3345" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)" target="org.apache.commons.io.output.ByteArrayOutputStreamTestCase#DATA">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3346" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])" target="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3347" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])" target="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3348" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3349" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3350" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3351" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)" target="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3352" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()" target="org.apache.commons.io.output.ByteArrayOutputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3353" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()" target="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3354" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()" target="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3355" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.reset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3356" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3357" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3358" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3359" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3360" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3361" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3362" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3363" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStream()" target="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3364" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3365" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStream()" target="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3366" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStream()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3367" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStream()" target="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3368" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3369" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3370" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStreamWithReset()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3371" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStreamWithReset()" target="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3372" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStreamWithReset()" target="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3373" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStreamWithReset()" target="org.apache.commons.io.output.ByteArrayOutputStream.reset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3374" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStreamWithReset()" target="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3375" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStreamWithReset()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3376" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStreamWithReset()" target="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3377" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStreamWithReset()" target="org.apache.commons.io.output.ByteArrayOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3378" source="org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStreamWithReset()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3379" source="org.apache.commons.io.output.ChunkedOutputStream(java.io.OutputStream)" target="org.apache.commons.io.output.ChunkedOutputStream(java.io.OutputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3380" source="org.apache.commons.io.output.ChunkedOutputStream(java.io.OutputStream)" target="org.apache.commons.io.output.ChunkedOutputStream#DEFAULT_CHUNK_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3381" source="org.apache.commons.io.output.ChunkedOutputStream#chunkSize" target="org.apache.commons.io.output.ChunkedOutputStream(java.io.OutputStream,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3382" source="org.apache.commons.io.output.ChunkedOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.ChunkedOutputStream#chunkSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3383" source="org.apache.commons.io.output.ChunkedOutputStream.write(byte[],int,int)" target="java.io.FilterOutputStream#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3384" source="org.apache.commons.io.output.ChunkedWriter(java.io.Writer)" target="org.apache.commons.io.output.ChunkedWriter(java.io.Writer,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3385" source="org.apache.commons.io.output.ChunkedWriter(java.io.Writer)" target="org.apache.commons.io.output.ChunkedWriter#DEFAULT_CHUNK_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3386" source="org.apache.commons.io.output.ChunkedWriter#chunkSize" target="org.apache.commons.io.output.ChunkedWriter(java.io.Writer,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3387" source="org.apache.commons.io.output.ChunkedWriter.write(char[],int,int)" target="org.apache.commons.io.output.ChunkedWriter#chunkSize">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3388" source="org.apache.commons.io.output.ChunkedWriter.write(char[],int,int)" target="java.io.FilterWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3389" source="org.apache.commons.io.output.CloseShieldOutputStream(java.io.OutputStream)" target="org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3390" source="org.apache.commons.io.output.ProxyOutputStream.close()" target="org.apache.commons.io.output.CloseShieldOutputStream.close()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3391" source="org.apache.commons.io.output.CloseShieldOutputStream.close()" target="org.apache.commons.io.output.ClosedOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3392" source="java.io.FilterOutputStream#out" target="org.apache.commons.io.output.CloseShieldOutputStream.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3393" source="org.apache.commons.io.output.CloseShieldOutputStreamTest$1()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3394" source="org.apache.commons.io.output.ByteArrayOutputStream.close()" target="org.apache.commons.io.output.CloseShieldOutputStreamTest$1.close()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3395" source="org.apache.commons.io.output.CloseShieldOutputStreamTest#closed" target="org.apache.commons.io.output.CloseShieldOutputStreamTest$1.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3396" source="org.apache.commons.io.output.CloseShieldOutputStreamTest.setUp()" target="org.apache.commons.io.output.CloseShieldOutputStreamTest$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3397" source="org.apache.commons.io.output.CloseShieldOutputStreamTest.setUp()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3398" source="org.apache.commons.io.output.CloseShieldOutputStreamTest.setUp()" target="org.apache.commons.io.output.CloseShieldOutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3399" source="org.apache.commons.io.output.CloseShieldOutputStreamTest#original" target="org.apache.commons.io.output.CloseShieldOutputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3400" source="org.apache.commons.io.output.CloseShieldOutputStreamTest#closed" target="org.apache.commons.io.output.CloseShieldOutputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3401" source="org.apache.commons.io.output.CloseShieldOutputStreamTest#shielded" target="org.apache.commons.io.output.CloseShieldOutputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3402" source="org.apache.commons.io.output.CloseShieldOutputStreamTest.setUp()" target="org.apache.commons.io.output.CloseShieldOutputStreamTest#original">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3403" source="org.apache.commons.io.output.CloseShieldOutputStreamTest.testClose()" target="org.apache.commons.io.output.ByteArrayOutputStream.write(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3404" source="org.apache.commons.io.output.CloseShieldOutputStreamTest.testClose()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3405" source="org.apache.commons.io.output.CloseShieldOutputStreamTest.testClose()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3406" source="org.apache.commons.io.output.CloseShieldOutputStreamTest.testClose()" target="org.apache.commons.io.output.CloseShieldOutputStreamTest#shielded">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3407" source="org.apache.commons.io.output.CloseShieldOutputStreamTest.testClose()" target="org.apache.commons.io.output.CloseShieldOutputStreamTest#closed">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3408" source="org.apache.commons.io.output.CloseShieldOutputStreamTest.testClose()" target="org.apache.commons.io.output.CloseShieldOutputStreamTest#original">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3409" source="org.apache.commons.io.output.ClosedOutputStream#CLOSED_OUTPUT_STREAM" target="org.apache.commons.io.output.ClosedOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3410" source="org.apache.commons.io.output.ClosedOutputStreamTest.testRead()" target="org.apache.commons.io.output.ClosedOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3411" source="org.apache.commons.io.output.ClosedOutputStreamTest.testRead()" target="org.apache.commons.io.output.ClosedOutputStream.write(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3412" source="org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)" target="org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3413" source="org.apache.commons.io.output.CountingOutputStream.getCount()" target="org.apache.commons.io.output.CountingOutputStream.getByteCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3414" source="org.apache.commons.io.output.CountingOutputStream.getCount()" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3415" source="org.apache.commons.io.output.CountingOutputStream.resetCount()" target="org.apache.commons.io.output.CountingOutputStream.resetByteCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3416" source="org.apache.commons.io.output.CountingOutputStream.resetCount()" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3417" source="org.apache.commons.io.output.CountingOutputStream.getByteCount()" target="org.apache.commons.io.output.CountingOutputStream#count">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3418" source="org.apache.commons.io.output.CountingOutputStream.resetByteCount()" target="org.apache.commons.io.output.CountingOutputStream#count">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3419" source="org.apache.commons.io.output.CountingOutputStream#count" target="org.apache.commons.io.output.CountingOutputStream.resetByteCount()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3420" source="org.apache.commons.io.output.ProxyOutputStream.beforeWrite(int)" target="org.apache.commons.io.output.CountingOutputStream.beforeWrite(int)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3421" source="org.apache.commons.io.output.CountingOutputStream#count" target="org.apache.commons.io.output.CountingOutputStream.beforeWrite(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3422" source="org.apache.commons.io.output.CountingOutputStreamTest.testCounting()" target="org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3423" source="org.apache.commons.io.output.CountingOutputStreamTest.testCounting()" target="org.apache.commons.io.output.ProxyOutputStream.write(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3424" source="org.apache.commons.io.output.CountingOutputStreamTest.testCounting()" target="org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3425" source="org.apache.commons.io.output.CountingOutputStreamTest.testCounting()" target="org.apache.commons.io.output.CountingOutputStream.getCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3426" source="org.apache.commons.io.output.CountingOutputStreamTest.testCounting()" target="org.apache.commons.io.output.ProxyOutputStream.write(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3427" source="org.apache.commons.io.output.CountingOutputStreamTest.testCounting()" target="org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3428" source="org.apache.commons.io.output.CountingOutputStreamTest.testCounting()" target="org.apache.commons.io.output.CountingOutputStream.resetCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3429" source="org.apache.commons.io.output.CountingOutputStreamTest.testCounting()" target="org.apache.commons.io.output.ProxyOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3430" source="org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.input.NullInputStream(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3431" source="org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.output.NullOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3432" source="org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3433" source="org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3434" source="org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.output.CountingOutputStream.getCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3435" source="org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.output.CountingOutputStream.resetCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3436" source="org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.input.NullInputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3437" source="org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.output.CountingOutputStream.getByteCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3438" source="org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84()" target="org.apache.commons.io.output.CountingOutputStream.resetByteCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3439" source="org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84()" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3440" source="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3441" source="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File,java.lang.String,java.lang.String,java.io.File)" target="org.apache.commons.io.output.ThresholdingOutputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3442" source="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File,java.lang.String,java.lang.String,java.io.File)" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3443" source="org.apache.commons.io.output.DeferredFileOutputStream#outputFile" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3444" source="org.apache.commons.io.output.DeferredFileOutputStream#memoryOutputStream" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3445" source="org.apache.commons.io.output.DeferredFileOutputStream#currentOutputStream" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3446" source="org.apache.commons.io.output.DeferredFileOutputStream#prefix" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3447" source="org.apache.commons.io.output.DeferredFileOutputStream#suffix" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3448" source="org.apache.commons.io.output.DeferredFileOutputStream#directory" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3449" source="org.apache.commons.io.output.DeferredFileOutputStream(int,java.lang.String,java.lang.String,java.io.File)" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3450" source="org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()" target="org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3451" source="org.apache.commons.io.output.DeferredFileOutputStream.getData()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3452" source="org.apache.commons.io.output.DeferredFileOutputStream.getData()" target="org.apache.commons.io.output.DeferredFileOutputStream#memoryOutputStream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3453" source="org.apache.commons.io.output.DeferredFileOutputStream.getFile()" target="org.apache.commons.io.output.DeferredFileOutputStream#outputFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3454" source="org.apache.commons.io.output.ThresholdingOutputStream.getStream()" target="org.apache.commons.io.output.DeferredFileOutputStream.getStream()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3455" source="org.apache.commons.io.output.DeferredFileOutputStream.getStream()" target="org.apache.commons.io.output.DeferredFileOutputStream#currentOutputStream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3456" source="org.apache.commons.io.output.ThresholdingOutputStream.close()" target="org.apache.commons.io.output.DeferredFileOutputStream.close()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3457" source="org.apache.commons.io.output.DeferredFileOutputStream.close()" target="org.apache.commons.io.output.ThresholdingOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3458" source="org.apache.commons.io.output.DeferredFileOutputStream#closed" target="org.apache.commons.io.output.DeferredFileOutputStream.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3459" source="org.apache.commons.io.output.ThresholdingOutputStream.thresholdReached()" target="org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3460" source="org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()" target="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3461" source="org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()" target="org.apache.commons.io.output.DeferredFileOutputStream#prefix">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3462" source="org.apache.commons.io.output.DeferredFileOutputStream#outputFile" target="org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3463" source="org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()" target="org.apache.commons.io.output.DeferredFileOutputStream#suffix">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3464" source="org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()" target="org.apache.commons.io.output.DeferredFileOutputStream#directory">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3465" source="org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()" target="org.apache.commons.io.output.DeferredFileOutputStream#outputFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3466" source="org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()" target="org.apache.commons.io.output.DeferredFileOutputStream#memoryOutputStream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3467" source="org.apache.commons.io.output.DeferredFileOutputStream#currentOutputStream" target="org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3468" source="org.apache.commons.io.output.DeferredFileOutputStream#memoryOutputStream" target="org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3469" source="org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)" target="org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3470" source="org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3471" source="org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3472" source="org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3473" source="org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)" target="org.apache.commons.io.output.DeferredFileOutputStream#closed">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3474" source="org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)" target="org.apache.commons.io.output.DeferredFileOutputStream#memoryOutputStream">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3475" source="org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)" target="org.apache.commons.io.output.DeferredFileOutputStream#outputFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3476" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3477" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()" target="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3478" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3479" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3480" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.getData()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3481" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3482" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3483" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest#testBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3484" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3485" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()" target="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3486" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3487" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3488" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.getData()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3489" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3490" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest#testBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3491" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3492" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()" target="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3493" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3494" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3495" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.getData()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3496" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3497" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest#testBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3498" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3499" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3500" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThreshold()" target="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3501" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3502" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3503" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.getData()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3504" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3505" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThreshold()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3506" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest#testBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3507" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThresholdPrefixOnly()" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3508" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThresholdPrefixOnly()" target="org.apache.commons.io.output.DeferredFileOutputStream.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3509" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThresholdPrefixOnly()" target="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3510" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThresholdPrefixOnly()" target="org.apache.commons.io.output.DeferredFileOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3511" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThresholdPrefixOnly()" target="org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3512" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThresholdPrefixOnly()" target="org.apache.commons.io.output.DeferredFileOutputStream.getData()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3513" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThresholdPrefixOnly()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3514" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThresholdPrefixOnly()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3515" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThresholdPrefixOnly()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest#testBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3516" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileBelowThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3517" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileBelowThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3518" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileBelowThreshold()" target="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3519" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileBelowThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3520" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileBelowThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3521" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileBelowThreshold()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3522" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileBelowThreshold()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest#testBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3523" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileError()" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.lang.String,java.lang.String,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3524" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileError()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3525" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileError()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest#testBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3526" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3527" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()" target="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3528" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()" target="org.apache.commons.io.output.DeferredFileOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3529" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()" target="org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3530" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()" target="org.apache.commons.io.output.DeferredFileOutputStream.getData()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3531" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3532" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3533" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest#testBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3534" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3535" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3536" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()" target="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3537" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()" target="org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3538" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()" target="org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3539" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()" target="org.apache.commons.io.output.DeferredFileOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3540" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3541" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3542" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3543" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest#testBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3544" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3545" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()" target="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3546" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()" target="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3547" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()" target="org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3548" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()" target="org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3549" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()" target="org.apache.commons.io.output.DeferredFileOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3550" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3551" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3552" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()" target="org.apache.commons.io.output.DeferredFileOutputStreamTest#testBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3553" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3554" source="org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)" target="org.apache.commons.io.output.DeferredFileOutputStreamTest#testBytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3555" source="org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)" target="org.apache.commons.io.output.DemuxOutputStream#m_streams">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3556" source="org.apache.commons.io.output.DemuxOutputStream.close()" target="org.apache.commons.io.output.DemuxOutputStream#m_streams">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3557" source="org.apache.commons.io.output.DemuxOutputStream.flush()" target="org.apache.commons.io.output.DemuxOutputStream#m_streams">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3558" source="org.apache.commons.io.output.DemuxOutputStream.write(int)" target="org.apache.commons.io.output.DemuxOutputStream#m_streams">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3559" source="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.lang.String)" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3560" source="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.lang.String,boolean)" target="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3561" source="org.apache.commons.io.output.FileWriterWithEncoding#out" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.lang.String,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3562" source="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.Charset)" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3563" source="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.Charset,boolean)" target="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3564" source="org.apache.commons.io.output.FileWriterWithEncoding#out" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.Charset,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3565" source="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.CharsetEncoder)" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.CharsetEncoder,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3566" source="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.CharsetEncoder,boolean)" target="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3567" source="org.apache.commons.io.output.FileWriterWithEncoding#out" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.CharsetEncoder,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3568" source="org.apache.commons.io.output.FileWriterWithEncoding(java.lang.String,java.lang.String)" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3569" source="org.apache.commons.io.output.FileWriterWithEncoding(java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3570" source="org.apache.commons.io.output.FileWriterWithEncoding(java.lang.String,java.nio.charset.Charset)" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3571" source="org.apache.commons.io.output.FileWriterWithEncoding(java.lang.String,java.nio.charset.Charset,boolean)" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3572" source="org.apache.commons.io.output.FileWriterWithEncoding(java.lang.String,java.nio.charset.CharsetEncoder)" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.CharsetEncoder,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3573" source="org.apache.commons.io.output.FileWriterWithEncoding(java.lang.String,java.nio.charset.CharsetEncoder,boolean)" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.nio.charset.CharsetEncoder,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3574" source="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3575" source="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3576" source="org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File,java.lang.Object,boolean)" target="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3577" source="org.apache.commons.io.output.FileWriterWithEncoding.close()" target="org.apache.commons.io.output.FileWriterWithEncoding#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3578" source="org.apache.commons.io.output.FileWriterWithEncoding.flush()" target="org.apache.commons.io.output.FileWriterWithEncoding#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3579" source="org.apache.commons.io.output.FileWriterWithEncoding.write(char[])" target="org.apache.commons.io.output.FileWriterWithEncoding#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3580" source="org.apache.commons.io.output.FileWriterWithEncoding.write(char[],int,int)" target="org.apache.commons.io.output.FileWriterWithEncoding#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3581" source="org.apache.commons.io.output.FileWriterWithEncoding.write(int)" target="org.apache.commons.io.output.FileWriterWithEncoding#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3582" source="org.apache.commons.io.output.FileWriterWithEncoding.write(java.lang.String)" target="org.apache.commons.io.output.FileWriterWithEncoding#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3583" source="org.apache.commons.io.output.FileWriterWithEncoding.write(java.lang.String,int,int)" target="org.apache.commons.io.output.FileWriterWithEncoding#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3584" source="org.apache.commons.io.output.FileWriterWithEncodingTest(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3585" source="org.apache.commons.io.output.FileWriterWithEncodingTest.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3586" source="org.apache.commons.io.output.FileWriterWithEncodingTest.setUp()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3587" source="org.apache.commons.io.output.FileWriterWithEncodingTest#defaultEncoding" target="org.apache.commons.io.output.FileWriterWithEncodingTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3588" source="org.apache.commons.io.output.FileWriterWithEncodingTest#file1" target="org.apache.commons.io.output.FileWriterWithEncodingTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3589" source="org.apache.commons.io.output.FileWriterWithEncodingTest#file2" target="org.apache.commons.io.output.FileWriterWithEncodingTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3590" source="org.apache.commons.io.output.FileWriterWithEncodingTest.setUp()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3591" source="org.apache.commons.io.output.FileWriterWithEncodingTest#textContent" target="org.apache.commons.io.output.FileWriterWithEncodingTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3592" source="org.apache.commons.io.output.FileWriterWithEncodingTest.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3593" source="org.apache.commons.io.output.FileWriterWithEncodingTest.tearDown()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3594" source="org.apache.commons.io.output.FileWriterWithEncodingTest#defaultEncoding" target="org.apache.commons.io.output.FileWriterWithEncodingTest.tearDown()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3595" source="org.apache.commons.io.output.FileWriterWithEncodingTest#textContent" target="org.apache.commons.io.output.FileWriterWithEncodingTest.tearDown()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3596" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_directory()" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3597" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_directory()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3598" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_directory()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3599" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_directory()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#defaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3600" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_directory()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#file1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3601" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_encoding_badEncoding()" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3602" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_encoding_badEncoding()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3603" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_encoding_badEncoding()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#file1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3604" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_nullFile()" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3605" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_nullFile()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3606" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_nullFile()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#defaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3607" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_nullFile()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#file1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3608" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_fileName_nullFile()" target="org.apache.commons.io.output.FileWriterWithEncoding(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3609" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_fileName_nullFile()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3610" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_fileName_nullFile()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#defaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3611" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_fileName_nullFile()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#file1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3612" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testDifferentEncoding()" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3613" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testDifferentEncoding()" target="org.apache.commons.io.output.FileWriterWithEncoding.write(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3614" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testDifferentEncoding()" target="org.apache.commons.io.output.FileWriterWithEncoding.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3615" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testDifferentEncoding()" target="org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3616" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testDifferentEncoding()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3617" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testDifferentEncoding()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#file1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3618" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testDifferentEncoding()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#file2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3619" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testDifferentEncoding()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#defaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3620" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testDifferentEncoding()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#textContent">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3621" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testSameEncoding()" target="org.apache.commons.io.output.FileWriterWithEncoding(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3622" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testSameEncoding()" target="org.apache.commons.io.output.FileWriterWithEncoding.write(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3623" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testSameEncoding()" target="org.apache.commons.io.output.FileWriterWithEncoding.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3624" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testSameEncoding()" target="org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3625" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testSameEncoding()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3626" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testSameEncoding()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#file1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3627" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testSameEncoding()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#file2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3628" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testSameEncoding()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#defaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3629" source="org.apache.commons.io.output.FileWriterWithEncodingTest.testSameEncoding()" target="org.apache.commons.io.output.FileWriterWithEncodingTest#textContent">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3630" source="org.apache.commons.io.output.LockableFileWriter(java.io.File)" target="org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3631" source="org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)" target="org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3632" source="org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)" target="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3633" source="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)" target="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3634" source="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3635" source="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3636" source="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset)" target="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3637" source="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" target="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3638" source="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" target="org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3639" source="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" target="org.apache.commons.io.output.LockableFileWriter.createLock()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3640" source="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" target="org.apache.commons.io.output.LockableFileWriter.initWriter(java.io.File,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3641" source="org.apache.commons.io.output.LockableFileWriter#lockFile" target="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3642" source="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)" target="org.apache.commons.io.output.LockableFileWriter#LCK">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3643" source="org.apache.commons.io.output.LockableFileWriter#out" target="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3644" source="org.apache.commons.io.output.LockableFileWriter(java.lang.String)" target="org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3645" source="org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)" target="org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3646" source="org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)" target="org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3647" source="org.apache.commons.io.output.LockableFileWriter.initWriter(java.io.File,java.nio.charset.Charset,boolean)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3648" source="org.apache.commons.io.output.LockableFileWriter.initWriter(java.io.File,java.nio.charset.Charset,boolean)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3649" source="org.apache.commons.io.output.LockableFileWriter.initWriter(java.io.File,java.nio.charset.Charset,boolean)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3650" source="org.apache.commons.io.output.LockableFileWriter.initWriter(java.io.File,java.nio.charset.Charset,boolean)" target="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3651" source="org.apache.commons.io.output.LockableFileWriter.initWriter(java.io.File,java.nio.charset.Charset,boolean)" target="org.apache.commons.io.output.LockableFileWriter#lockFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3652" source="org.apache.commons.io.output.LockableFileWriter.close()" target="org.apache.commons.io.output.LockableFileWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3653" source="org.apache.commons.io.output.LockableFileWriter.close()" target="org.apache.commons.io.output.LockableFileWriter#lockFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3654" source="org.apache.commons.io.output.LockableFileWriter.createLock()" target="org.apache.commons.io.output.LockableFileWriter#class">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3655" source="org.apache.commons.io.output.LockableFileWriter.createLock()" target="org.apache.commons.io.output.LockableFileWriter#lockFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3656" source="org.apache.commons.io.output.LockableFileWriter.flush()" target="org.apache.commons.io.output.LockableFileWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3657" source="org.apache.commons.io.output.LockableFileWriter.write(char[])" target="org.apache.commons.io.output.LockableFileWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3658" source="org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)" target="org.apache.commons.io.output.LockableFileWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3659" source="org.apache.commons.io.output.LockableFileWriter.write(int)" target="org.apache.commons.io.output.LockableFileWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3660" source="org.apache.commons.io.output.LockableFileWriter.write(java.lang.String)" target="org.apache.commons.io.output.LockableFileWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3661" source="org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)" target="org.apache.commons.io.output.LockableFileWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3662" source="org.apache.commons.io.output.LockableFileWriterTest(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3663" source="org.apache.commons.io.output.LockableFileWriterTest.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3664" source="org.apache.commons.io.output.LockableFileWriterTest#file" target="org.apache.commons.io.output.LockableFileWriterTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3665" source="org.apache.commons.io.output.LockableFileWriterTest#lockDir" target="org.apache.commons.io.output.LockableFileWriterTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3666" source="org.apache.commons.io.output.LockableFileWriterTest#lockFile" target="org.apache.commons.io.output.LockableFileWriterTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3667" source="org.apache.commons.io.output.LockableFileWriterTest.setUp()" target="org.apache.commons.io.output.LockableFileWriterTest#lockDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3668" source="org.apache.commons.io.output.LockableFileWriterTest.setUp()" target="org.apache.commons.io.output.LockableFileWriterTest#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3669" source="org.apache.commons.io.output.LockableFileWriterTest#altLockDir" target="org.apache.commons.io.output.LockableFileWriterTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3670" source="org.apache.commons.io.output.LockableFileWriterTest#altLockFile" target="org.apache.commons.io.output.LockableFileWriterTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3671" source="org.apache.commons.io.output.LockableFileWriterTest.setUp()" target="org.apache.commons.io.output.LockableFileWriterTest#altLockDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3672" source="org.apache.commons.io.output.LockableFileWriterTest.tearDown()" target="org.apache.commons.io.output.LockableFileWriterTest#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3673" source="org.apache.commons.io.output.LockableFileWriterTest.tearDown()" target="org.apache.commons.io.output.LockableFileWriterTest#lockFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3674" source="org.apache.commons.io.output.LockableFileWriterTest.tearDown()" target="org.apache.commons.io.output.LockableFileWriterTest#altLockFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3675" source="org.apache.commons.io.output.LockableFileWriterTest.testAlternateLockDir()" target="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3676" source="org.apache.commons.io.output.LockableFileWriterTest.testAlternateLockDir()" target="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3677" source="org.apache.commons.io.output.LockableFileWriterTest.testAlternateLockDir()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3678" source="org.apache.commons.io.output.LockableFileWriterTest.testAlternateLockDir()" target="org.apache.commons.io.output.LockableFileWriterTest#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3679" source="org.apache.commons.io.output.LockableFileWriterTest.testAlternateLockDir()" target="org.apache.commons.io.output.LockableFileWriterTest#altLockDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3680" source="org.apache.commons.io.output.LockableFileWriterTest.testAlternateLockDir()" target="org.apache.commons.io.output.LockableFileWriterTest#altLockFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3681" source="org.apache.commons.io.output.LockableFileWriterTest.testAlternateLockDir()" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3682" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_directory()" target="org.apache.commons.io.output.LockableFileWriter(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3683" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_directory()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3684" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_directory()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3685" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_directory()" target="org.apache.commons.io.output.LockableFileWriterTest#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3686" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_directory()" target="org.apache.commons.io.output.LockableFileWriterTest#lockFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3687" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()" target="org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3688" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3689" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()" target="org.apache.commons.io.output.LockableFileWriterTest#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3690" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()" target="org.apache.commons.io.output.LockableFileWriterTest#lockFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3691" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()" target="org.apache.commons.io.output.LockableFileWriter(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3692" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3693" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()" target="org.apache.commons.io.output.LockableFileWriterTest#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3694" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()" target="org.apache.commons.io.output.LockableFileWriterTest#lockFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3695" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()" target="org.apache.commons.io.output.LockableFileWriter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3696" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3697" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()" target="org.apache.commons.io.output.LockableFileWriterTest#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3698" source="org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()" target="org.apache.commons.io.output.LockableFileWriterTest#lockFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3699" source="org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()" target="org.apache.commons.io.output.LockableFileWriter(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3700" source="org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3701" source="org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()" target="org.apache.commons.io.output.LockableFileWriterTest#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3702" source="org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()" target="org.apache.commons.io.output.LockableFileWriterTest#lockFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3703" source="org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()" target="org.apache.commons.io.output.LockableFileWriter(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3704" source="org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3705" source="org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()" target="org.apache.commons.io.output.LockableFileWriterTest#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3706" source="org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()" target="org.apache.commons.io.output.LockableFileWriterTest#lockFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3707" source="org.apache.commons.io.output.NullOutputStream#NULL_OUTPUT_STREAM" target="org.apache.commons.io.output.NullOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3708" source="org.apache.commons.io.output.NullOutputStreamTest.testNull()" target="org.apache.commons.io.output.NullOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3709" source="org.apache.commons.io.output.NullOutputStreamTest.testNull()" target="org.apache.commons.io.output.NullOutputStream.write(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3710" source="org.apache.commons.io.output.NullOutputStreamTest.testNull()" target="org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3711" source="org.apache.commons.io.output.NullOutputStreamTest.testNull()" target="org.apache.commons.io.output.NullOutputStream.write(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3712" source="org.apache.commons.io.output.NullWriter#NULL_WRITER" target="org.apache.commons.io.output.NullWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3713" source="org.apache.commons.io.output.NullWriterTest.testNull()" target="org.apache.commons.io.output.NullWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3714" source="org.apache.commons.io.output.NullWriterTest.testNull()" target="org.apache.commons.io.output.NullWriter.write(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3715" source="org.apache.commons.io.output.NullWriterTest.testNull()" target="org.apache.commons.io.output.NullWriter.write(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3716" source="org.apache.commons.io.output.NullWriterTest.testNull()" target="org.apache.commons.io.output.NullWriter.write(char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3717" source="org.apache.commons.io.output.NullWriterTest.testNull()" target="org.apache.commons.io.output.NullWriter.write(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3718" source="org.apache.commons.io.output.NullWriterTest.testNull()" target="org.apache.commons.io.output.NullWriter.write(java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3719" source="org.apache.commons.io.output.NullWriterTest.testNull()" target="org.apache.commons.io.output.NullWriter.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3720" source="org.apache.commons.io.output.NullWriterTest.testNull()" target="org.apache.commons.io.output.NullWriter.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3721" source="org.apache.commons.io.output.ProxyOutputStream.close()" target="org.apache.commons.io.output.ProxyOutputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3722" source="org.apache.commons.io.output.ProxyOutputStream.close()" target="java.io.FilterOutputStream#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3723" source="org.apache.commons.io.output.ProxyOutputStream.flush()" target="org.apache.commons.io.output.ProxyOutputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3724" source="org.apache.commons.io.output.ProxyOutputStream.flush()" target="java.io.FilterOutputStream#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3725" source="org.apache.commons.io.output.ProxyOutputStream.write(byte[])" target="org.apache.commons.io.output.ProxyOutputStream.beforeWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3726" source="org.apache.commons.io.output.ProxyOutputStream.write(byte[])" target="org.apache.commons.io.output.ProxyOutputStream.afterWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3727" source="org.apache.commons.io.output.ProxyOutputStream.write(byte[])" target="org.apache.commons.io.output.ProxyOutputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3728" source="org.apache.commons.io.output.ProxyOutputStream.write(byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3729" source="org.apache.commons.io.output.ProxyOutputStream.write(byte[])" target="java.io.FilterOutputStream#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3730" source="org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.ProxyOutputStream.beforeWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3731" source="org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.ProxyOutputStream.afterWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3732" source="org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.ProxyOutputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3733" source="org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)" target="java.io.FilterOutputStream#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3734" source="org.apache.commons.io.output.ProxyOutputStream.write(int)" target="org.apache.commons.io.output.ProxyOutputStream.beforeWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3735" source="org.apache.commons.io.output.ProxyOutputStream.write(int)" target="org.apache.commons.io.output.ProxyOutputStream.afterWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3736" source="org.apache.commons.io.output.ProxyOutputStream.write(int)" target="org.apache.commons.io.output.ProxyOutputStream.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3737" source="org.apache.commons.io.output.ProxyOutputStream.write(int)" target="java.io.FilterOutputStream#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3738" source="org.apache.commons.io.output.ProxyOutputStreamTest$1()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3739" source="org.apache.commons.io.output.ProxyOutputStreamTest.setUp()" target="org.apache.commons.io.output.ProxyOutputStreamTest$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3740" source="org.apache.commons.io.output.ProxyOutputStreamTest.setUp()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3741" source="org.apache.commons.io.output.ProxyOutputStreamTest.setUp()" target="org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3742" source="org.apache.commons.io.output.ProxyOutputStreamTest#original" target="org.apache.commons.io.output.ProxyOutputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3743" source="org.apache.commons.io.output.ProxyOutputStreamTest#proxied" target="org.apache.commons.io.output.ProxyOutputStreamTest.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3744" source="org.apache.commons.io.output.ProxyOutputStreamTest.setUp()" target="org.apache.commons.io.output.ProxyOutputStreamTest#original">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3745" source="org.apache.commons.io.output.ProxyOutputStreamTest.testWrite()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3746" source="org.apache.commons.io.output.ProxyOutputStreamTest.testWrite()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3747" source="org.apache.commons.io.output.ProxyOutputStreamTest.testWrite()" target="org.apache.commons.io.output.ProxyOutputStreamTest#proxied">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3748" source="org.apache.commons.io.output.ProxyOutputStreamTest.testWrite()" target="org.apache.commons.io.output.ProxyOutputStreamTest#original">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3749" source="org.apache.commons.io.output.ProxyOutputStreamTest.testWriteNullBaSucceeds()" target="org.apache.commons.io.output.ProxyOutputStreamTest#original">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3750" source="org.apache.commons.io.output.ProxyOutputStreamTest.testWriteNullBaSucceeds()" target="org.apache.commons.io.output.ProxyOutputStreamTest#proxied">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3751" source="org.apache.commons.io.output.ProxyWriter.append(char)" target="org.apache.commons.io.output.ProxyWriter.beforeWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3752" source="org.apache.commons.io.output.ProxyWriter.append(char)" target="org.apache.commons.io.output.ProxyWriter.afterWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3753" source="org.apache.commons.io.output.ProxyWriter.append(char)" target="org.apache.commons.io.output.ProxyWriter.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3754" source="org.apache.commons.io.output.ProxyWriter.append(char)" target="java.io.FilterWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3755" source="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence)" target="org.apache.commons.io.output.ProxyWriter.beforeWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3756" source="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence)" target="org.apache.commons.io.output.ProxyWriter.afterWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3757" source="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence)" target="org.apache.commons.io.output.ProxyWriter.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3758" source="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence)" target="java.io.FilterWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3759" source="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" target="org.apache.commons.io.output.ProxyWriter.beforeWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3760" source="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" target="org.apache.commons.io.output.ProxyWriter.afterWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3761" source="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" target="org.apache.commons.io.output.ProxyWriter.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3762" source="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" target="java.io.FilterWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3763" source="org.apache.commons.io.output.ProxyWriter.close()" target="org.apache.commons.io.output.ProxyWriter.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3764" source="org.apache.commons.io.output.ProxyWriter.close()" target="java.io.FilterWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3765" source="org.apache.commons.io.output.ProxyWriter.flush()" target="org.apache.commons.io.output.ProxyWriter.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3766" source="org.apache.commons.io.output.ProxyWriter.flush()" target="java.io.FilterWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3767" source="org.apache.commons.io.output.ProxyWriter.write(char[])" target="org.apache.commons.io.output.ProxyWriter.beforeWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3768" source="org.apache.commons.io.output.ProxyWriter.write(char[])" target="org.apache.commons.io.output.ProxyWriter.afterWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3769" source="org.apache.commons.io.output.ProxyWriter.write(char[])" target="org.apache.commons.io.output.ProxyWriter.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3770" source="org.apache.commons.io.output.ProxyWriter.write(char[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3771" source="org.apache.commons.io.output.ProxyWriter.write(char[])" target="java.io.FilterWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3772" source="org.apache.commons.io.output.ProxyWriter.write(char[],int,int)" target="org.apache.commons.io.output.ProxyWriter.beforeWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3773" source="org.apache.commons.io.output.ProxyWriter.write(char[],int,int)" target="org.apache.commons.io.output.ProxyWriter.afterWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3774" source="org.apache.commons.io.output.ProxyWriter.write(char[],int,int)" target="org.apache.commons.io.output.ProxyWriter.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3775" source="org.apache.commons.io.output.ProxyWriter.write(char[],int,int)" target="java.io.FilterWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3776" source="org.apache.commons.io.output.ProxyWriter.write(int)" target="org.apache.commons.io.output.ProxyWriter.beforeWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3777" source="org.apache.commons.io.output.ProxyWriter.write(int)" target="org.apache.commons.io.output.ProxyWriter.afterWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3778" source="org.apache.commons.io.output.ProxyWriter.write(int)" target="org.apache.commons.io.output.ProxyWriter.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3779" source="org.apache.commons.io.output.ProxyWriter.write(int)" target="java.io.FilterWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3780" source="org.apache.commons.io.output.ProxyWriter.write(java.lang.String)" target="org.apache.commons.io.output.ProxyWriter.beforeWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3781" source="org.apache.commons.io.output.ProxyWriter.write(java.lang.String)" target="org.apache.commons.io.output.ProxyWriter.afterWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3782" source="org.apache.commons.io.output.ProxyWriter.write(java.lang.String)" target="org.apache.commons.io.output.ProxyWriter.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3783" source="org.apache.commons.io.output.ProxyWriter.write(java.lang.String)" target="java.io.FilterWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3784" source="org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)" target="org.apache.commons.io.output.ProxyWriter.beforeWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3785" source="org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)" target="org.apache.commons.io.output.ProxyWriter.afterWrite(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3786" source="org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)" target="org.apache.commons.io.output.ProxyWriter.handleIOException(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3787" source="org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)" target="java.io.FilterWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3788" source="org.apache.commons.io.output.ProxyWriterTest.testAppendCharSequence()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3789" source="org.apache.commons.io.output.ProxyWriterTest.testAppendCharSequence()" target="org.apache.commons.io.output.ProxyWriter(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3790" source="org.apache.commons.io.output.ProxyWriterTest.testAppendCharSequence()" target="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3791" source="org.apache.commons.io.output.ProxyWriterTest.testAppendCharSequence()" target="org.apache.commons.io.output.StringBuilderWriter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3792" source="org.apache.commons.io.output.ProxyWriterTest.testAppendCharSequence()" target="org.apache.commons.io.output.ProxyWriter.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3793" source="org.apache.commons.io.output.ProxyWriterTest.testNullCharArray()" target="org.apache.commons.io.output.ProxyWriter(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3794" source="org.apache.commons.io.output.ProxyWriterTest.testNullCharArray()" target="org.apache.commons.io.output.NullWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3795" source="org.apache.commons.io.output.ProxyWriterTest.testNullCharArray()" target="org.apache.commons.io.output.ProxyWriter.write(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3796" source="org.apache.commons.io.output.ProxyWriterTest.testNullCharArray()" target="org.apache.commons.io.output.ProxyWriter.write(char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3797" source="org.apache.commons.io.output.ProxyWriterTest.testNullCharArray()" target="org.apache.commons.io.output.ProxyWriter.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3798" source="org.apache.commons.io.output.ProxyWriterTest.testNullCharSequencec()" target="org.apache.commons.io.output.ProxyWriter(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3799" source="org.apache.commons.io.output.ProxyWriterTest.testNullCharSequencec()" target="org.apache.commons.io.output.NullWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3800" source="org.apache.commons.io.output.ProxyWriterTest.testNullCharSequencec()" target="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3801" source="org.apache.commons.io.output.ProxyWriterTest.testNullCharSequencec()" target="org.apache.commons.io.output.ProxyWriter.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3802" source="org.apache.commons.io.output.ProxyWriterTest.testNullString()" target="org.apache.commons.io.output.ProxyWriter(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3803" source="org.apache.commons.io.output.ProxyWriterTest.testNullString()" target="org.apache.commons.io.output.NullWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3804" source="org.apache.commons.io.output.ProxyWriterTest.testNullString()" target="org.apache.commons.io.output.ProxyWriter.write(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3805" source="org.apache.commons.io.output.ProxyWriterTest.testNullString()" target="org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3806" source="org.apache.commons.io.output.ProxyWriterTest.testNullString()" target="org.apache.commons.io.output.ProxyWriter.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3807" source="org.apache.commons.io.output.ProxyWriterTest.testWriteCharArray()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3808" source="org.apache.commons.io.output.ProxyWriterTest.testWriteCharArray()" target="org.apache.commons.io.output.ProxyWriter(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3809" source="org.apache.commons.io.output.ProxyWriterTest.testWriteCharArray()" target="org.apache.commons.io.output.ProxyWriter.write(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3810" source="org.apache.commons.io.output.ProxyWriterTest.testWriteCharArray()" target="org.apache.commons.io.output.StringBuilderWriter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3811" source="org.apache.commons.io.output.ProxyWriterTest.testWriteCharArray()" target="org.apache.commons.io.output.ProxyWriter.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3812" source="org.apache.commons.io.output.ProxyWriterTest.testWriteCharArrayPartial()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3813" source="org.apache.commons.io.output.ProxyWriterTest.testWriteCharArrayPartial()" target="org.apache.commons.io.output.ProxyWriter(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3814" source="org.apache.commons.io.output.ProxyWriterTest.testWriteCharArrayPartial()" target="org.apache.commons.io.output.ProxyWriter.write(char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3815" source="org.apache.commons.io.output.ProxyWriterTest.testWriteCharArrayPartial()" target="org.apache.commons.io.output.StringBuilderWriter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3816" source="org.apache.commons.io.output.ProxyWriterTest.testWriteCharArrayPartial()" target="org.apache.commons.io.output.ProxyWriter.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3817" source="org.apache.commons.io.output.ProxyWriterTest.testWriteString()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3818" source="org.apache.commons.io.output.ProxyWriterTest.testWriteString()" target="org.apache.commons.io.output.ProxyWriter(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3819" source="org.apache.commons.io.output.ProxyWriterTest.testWriteString()" target="org.apache.commons.io.output.ProxyWriter.write(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3820" source="org.apache.commons.io.output.ProxyWriterTest.testWriteString()" target="org.apache.commons.io.output.StringBuilderWriter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3821" source="org.apache.commons.io.output.ProxyWriterTest.testWriteString()" target="org.apache.commons.io.output.ProxyWriter.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3822" source="org.apache.commons.io.output.ProxyWriterTest.testWriteStringPartial()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3823" source="org.apache.commons.io.output.ProxyWriterTest.testWriteStringPartial()" target="org.apache.commons.io.output.ProxyWriter(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3824" source="org.apache.commons.io.output.ProxyWriterTest.testWriteStringPartial()" target="org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3825" source="org.apache.commons.io.output.ProxyWriterTest.testWriteStringPartial()" target="org.apache.commons.io.output.StringBuilderWriter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3826" source="org.apache.commons.io.output.ProxyWriterTest.testWriteStringPartial()" target="org.apache.commons.io.output.ProxyWriter.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3827" source="org.apache.commons.io.output.StringBuilderWriter#builder" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3828" source="org.apache.commons.io.output.StringBuilderWriter#builder" target="org.apache.commons.io.output.StringBuilderWriter(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3829" source="org.apache.commons.io.output.StringBuilderWriter#builder" target="org.apache.commons.io.output.StringBuilderWriter(java.lang.StringBuilder)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3830" source="org.apache.commons.io.output.StringBuilderWriter.append(char)" target="org.apache.commons.io.output.StringBuilderWriter#builder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3831" source="org.apache.commons.io.output.StringBuilderWriter.append(java.lang.CharSequence)" target="org.apache.commons.io.output.StringBuilderWriter#builder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3832" source="org.apache.commons.io.output.StringBuilderWriter.append(java.lang.CharSequence,int,int)" target="org.apache.commons.io.output.StringBuilderWriter#builder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3833" source="org.apache.commons.io.output.StringBuilderWriter.toString()" target="org.apache.commons.io.output.StringBuilderWriter#builder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3834" source="org.apache.commons.io.output.StringBuilderWriter.getBuilder()" target="org.apache.commons.io.output.StringBuilderWriter#builder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3835" source="org.apache.commons.io.output.StringBuilderWriter.write(char[],int,int)" target="org.apache.commons.io.output.StringBuilderWriter#builder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3836" source="org.apache.commons.io.output.StringBuilderWriter.write(java.lang.String)" target="org.apache.commons.io.output.StringBuilderWriter#builder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3837" source="org.apache.commons.io.output.StringBuilderWriterTest.testAppendChar()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3838" source="org.apache.commons.io.output.StringBuilderWriterTest.testAppendCharSequence()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3839" source="org.apache.commons.io.output.StringBuilderWriterTest.testAppendCharSequencePortion()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3840" source="org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructCapacity()" target="org.apache.commons.io.output.StringBuilderWriter(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3841" source="org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructNull()" target="org.apache.commons.io.output.StringBuilderWriter(java.lang.StringBuilder)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3842" source="org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructStringBuilder()" target="org.apache.commons.io.output.StringBuilderWriter(java.lang.StringBuilder)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3843" source="org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructStringBuilder()" target="org.apache.commons.io.output.StringBuilderWriter.append(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3844" source="org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructStringBuilder()" target="org.apache.commons.io.output.StringBuilderWriter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3845" source="org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructStringBuilder()" target="org.apache.commons.io.output.StringBuilderWriter.getBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3846" source="org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructStringBuilder()" target="org.apache.commons.io.output.StringBuilderWriter.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3847" source="org.apache.commons.io.output.StringBuilderWriterTest.testClose()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3848" source="org.apache.commons.io.output.StringBuilderWriterTest.testWriteChar()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3849" source="org.apache.commons.io.output.StringBuilderWriterTest.testWriteCharArray()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3850" source="org.apache.commons.io.output.StringBuilderWriterTest.testWriteCharArrayPortion()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3851" source="org.apache.commons.io.output.StringBuilderWriterTest.testWriteCharArrayPortion()" target="org.apache.commons.io.output.StringBuilderWriterTest#FOOBAR_CHARS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3852" source="org.apache.commons.io.output.StringBuilderWriterTest.testWriteString()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3853" source="org.apache.commons.io.output.StringBuilderWriterTest.testWriteStringPortion()" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3854" source="org.apache.commons.io.output.TaggedOutputStream(java.io.OutputStream)" target="org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3855" source="org.apache.commons.io.output.TaggedOutputStream.isCauseOf(java.lang.Exception)" target="org.apache.commons.io.TaggedIOException.isTaggedWith(java.lang.Throwable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3856" source="org.apache.commons.io.output.TaggedOutputStream.isCauseOf(java.lang.Exception)" target="org.apache.commons.io.output.TaggedOutputStream#tag">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3857" source="org.apache.commons.io.output.ProxyOutputStream.handleIOException(java.io.IOException)" target="org.apache.commons.io.output.TaggedOutputStream.handleIOException(java.io.IOException)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3858" source="org.apache.commons.io.output.TaggedOutputStream.handleIOException(java.io.IOException)" target="org.apache.commons.io.TaggedIOException(java.io.IOException,java.io.Serializable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3859" source="org.apache.commons.io.output.TaggedOutputStream.handleIOException(java.io.IOException)" target="org.apache.commons.io.output.TaggedOutputStream#tag">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3860" source="org.apache.commons.io.output.TaggedOutputStream.throwIfCauseOf(java.lang.Exception)" target="org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(java.lang.Throwable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3861" source="org.apache.commons.io.output.TaggedOutputStream.throwIfCauseOf(java.lang.Exception)" target="org.apache.commons.io.output.TaggedOutputStream#tag">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3862" source="org.apache.commons.io.output.TaggedOutputStreamTest.testBrokenStream()" target="org.apache.commons.io.output.TaggedOutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3863" source="org.apache.commons.io.output.TaggedOutputStreamTest.testBrokenStream()" target="org.apache.commons.io.output.BrokenOutputStream(java.io.IOException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3864" source="org.apache.commons.io.output.TaggedOutputStreamTest.testBrokenStream()" target="org.apache.commons.io.output.ProxyOutputStream.write(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3865" source="org.apache.commons.io.output.TaggedOutputStreamTest.testBrokenStream()" target="org.apache.commons.io.output.TaggedOutputStream.isCauseOf(java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3866" source="org.apache.commons.io.output.TaggedOutputStreamTest.testBrokenStream()" target="org.apache.commons.io.output.TaggedOutputStream.throwIfCauseOf(java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3867" source="org.apache.commons.io.output.TaggedOutputStreamTest.testBrokenStream()" target="org.apache.commons.io.output.ProxyOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3868" source="org.apache.commons.io.output.TaggedOutputStreamTest.testBrokenStream()" target="org.apache.commons.io.output.ProxyOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3869" source="org.apache.commons.io.output.TaggedOutputStreamTest.testNormalStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3870" source="org.apache.commons.io.output.TaggedOutputStreamTest.testNormalStream()" target="org.apache.commons.io.output.TaggedOutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3871" source="org.apache.commons.io.output.TaggedOutputStreamTest.testNormalStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3872" source="org.apache.commons.io.output.TaggedOutputStreamTest.testNormalStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3873" source="org.apache.commons.io.output.TaggedOutputStreamTest.testOtherException()" target="org.apache.commons.io.output.ClosedOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3874" source="org.apache.commons.io.output.TaggedOutputStreamTest.testOtherException()" target="org.apache.commons.io.output.TaggedOutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3875" source="org.apache.commons.io.output.TaggedOutputStreamTest.testOtherException()" target="org.apache.commons.io.output.TaggedOutputStream.isCauseOf(java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3876" source="org.apache.commons.io.output.TaggedOutputStreamTest.testOtherException()" target="org.apache.commons.io.TaggedIOException(java.io.IOException,java.io.Serializable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3877" source="org.apache.commons.io.output.TaggedOutputStreamTest.testOtherException()" target="org.apache.commons.io.output.TaggedOutputStream.throwIfCauseOf(java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3878" source="org.apache.commons.io.output.TaggedOutputStreamTest.testOtherException()" target="org.apache.commons.io.output.ProxyOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3879" source="org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)" target="org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3880" source="org.apache.commons.io.output.TeeOutputStream#branch" target="org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3881" source="org.apache.commons.io.output.ProxyOutputStream.close()" target="org.apache.commons.io.output.TeeOutputStream.close()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3882" source="org.apache.commons.io.output.TeeOutputStream.close()" target="org.apache.commons.io.output.ProxyOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3883" source="org.apache.commons.io.output.TeeOutputStream.close()" target="org.apache.commons.io.output.TeeOutputStream#branch">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3884" source="org.apache.commons.io.output.ProxyOutputStream.flush()" target="org.apache.commons.io.output.TeeOutputStream.flush()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3885" source="org.apache.commons.io.output.TeeOutputStream.flush()" target="org.apache.commons.io.output.ProxyOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3886" source="org.apache.commons.io.output.TeeOutputStream.flush()" target="org.apache.commons.io.output.TeeOutputStream#branch">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3887" source="org.apache.commons.io.output.ProxyOutputStream.write(byte[])" target="org.apache.commons.io.output.TeeOutputStream.write(byte[])">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3888" source="org.apache.commons.io.output.TeeOutputStream.write(byte[])" target="org.apache.commons.io.output.ProxyOutputStream.write(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3889" source="org.apache.commons.io.output.TeeOutputStream.write(byte[])" target="org.apache.commons.io.output.TeeOutputStream#branch">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3890" source="org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3891" source="org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3892" source="org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.TeeOutputStream#branch">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3893" source="org.apache.commons.io.output.ProxyOutputStream.write(int)" target="org.apache.commons.io.output.TeeOutputStream.write(int)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e3894" source="org.apache.commons.io.output.TeeOutputStream.write(int)" target="org.apache.commons.io.output.ProxyOutputStream.write(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3895" source="org.apache.commons.io.output.TeeOutputStream.write(int)" target="org.apache.commons.io.output.TeeOutputStream#branch">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3896" source="org.apache.commons.io.output.TeeOutputStreamTest$RecordCloseByteArrayOutputStream#closed" target="org.apache.commons.io.output.TeeOutputStreamTest$RecordCloseByteArrayOutputStream.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3897" source="org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3898" source="org.apache.commons.io.output.TeeOutputStreamTest.testCloseBranchIOException()" target="org.apache.commons.io.output.TeeOutputStreamTest$ExceptionOnCloseByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3899" source="org.apache.commons.io.output.TeeOutputStreamTest.testCloseBranchIOException()" target="org.apache.commons.io.output.TeeOutputStreamTest$RecordCloseByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3900" source="org.apache.commons.io.output.TeeOutputStreamTest.testCloseBranchIOException()" target="org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3901" source="org.apache.commons.io.output.TeeOutputStreamTest.testCloseBranchIOException()" target="org.apache.commons.io.output.TeeOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3902" source="org.apache.commons.io.output.TeeOutputStreamTest.testCloseBranchIOException()" target="java.io.IOException#class">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3903" source="org.apache.commons.io.output.TeeOutputStreamTest.testCloseBranchIOException()" target="org.apache.commons.io.output.TeeOutputStreamTest$RecordCloseByteArrayOutputStream#closed">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3904" source="org.apache.commons.io.output.TeeOutputStreamTest.testCloseMainIOException()" target="org.apache.commons.io.output.TeeOutputStreamTest$ExceptionOnCloseByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3905" source="org.apache.commons.io.output.TeeOutputStreamTest.testCloseMainIOException()" target="org.apache.commons.io.output.TeeOutputStreamTest$RecordCloseByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3906" source="org.apache.commons.io.output.TeeOutputStreamTest.testCloseMainIOException()" target="org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3907" source="org.apache.commons.io.output.TeeOutputStreamTest.testCloseMainIOException()" target="org.apache.commons.io.output.TeeOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3908" source="org.apache.commons.io.output.TeeOutputStreamTest.testCloseMainIOException()" target="java.io.IOException#class">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3909" source="org.apache.commons.io.output.TeeOutputStreamTest.testCloseMainIOException()" target="org.apache.commons.io.output.TeeOutputStreamTest$RecordCloseByteArrayOutputStream#closed">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3910" source="org.apache.commons.io.output.TeeOutputStreamTest.testTee()" target="org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3911" source="org.apache.commons.io.output.TeeOutputStreamTest.testTee()" target="org.apache.commons.io.output.TeeOutputStream.write(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3912" source="org.apache.commons.io.output.TeeOutputStreamTest.testTee()" target="org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3913" source="org.apache.commons.io.output.TeeOutputStreamTest.testTee()" target="org.apache.commons.io.output.TeeOutputStream.write(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3914" source="org.apache.commons.io.output.TeeOutputStreamTest.testTee()" target="org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3915" source="org.apache.commons.io.output.TeeOutputStreamTest.testTee()" target="org.apache.commons.io.output.TeeOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3916" source="org.apache.commons.io.output.TeeOutputStreamTest.testTee()" target="org.apache.commons.io.output.TeeOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3917" source="org.apache.commons.io.output.ThresholdingOutputStream#threshold" target="org.apache.commons.io.output.ThresholdingOutputStream(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3918" source="org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()" target="org.apache.commons.io.output.ThresholdingOutputStream#written">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3919" source="org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()" target="org.apache.commons.io.output.ThresholdingOutputStream#threshold">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3920" source="org.apache.commons.io.output.ThresholdingOutputStream.getThreshold()" target="org.apache.commons.io.output.ThresholdingOutputStream#threshold">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3921" source="org.apache.commons.io.output.ThresholdingOutputStream.getByteCount()" target="org.apache.commons.io.output.ThresholdingOutputStream#written">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3922" source="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" target="org.apache.commons.io.output.ThresholdingOutputStream.thresholdReached()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3923" source="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" target="org.apache.commons.io.output.ThresholdingOutputStream#thresholdExceeded">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3924" source="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" target="org.apache.commons.io.output.ThresholdingOutputStream#written">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3925" source="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" target="org.apache.commons.io.output.ThresholdingOutputStream#threshold">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3926" source="org.apache.commons.io.output.ThresholdingOutputStream#thresholdExceeded" target="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3927" source="org.apache.commons.io.output.ThresholdingOutputStream.close()" target="org.apache.commons.io.output.ThresholdingOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3928" source="org.apache.commons.io.output.ThresholdingOutputStream.close()" target="org.apache.commons.io.output.ThresholdingOutputStream.getStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3929" source="org.apache.commons.io.output.ThresholdingOutputStream.flush()" target="org.apache.commons.io.output.ThresholdingOutputStream.getStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3930" source="org.apache.commons.io.output.ThresholdingOutputStream#thresholdExceeded" target="org.apache.commons.io.output.ThresholdingOutputStream.resetByteCount()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3931" source="org.apache.commons.io.output.ThresholdingOutputStream#written" target="org.apache.commons.io.output.ThresholdingOutputStream.resetByteCount()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3932" source="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])" target="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3933" source="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])" target="org.apache.commons.io.output.ThresholdingOutputStream.getStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3934" source="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3935" source="org.apache.commons.io.output.ThresholdingOutputStream#written" target="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3936" source="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3937" source="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.ThresholdingOutputStream.getStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3938" source="org.apache.commons.io.output.ThresholdingOutputStream#written" target="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3939" source="org.apache.commons.io.output.ThresholdingOutputStream.write(int)" target="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3940" source="org.apache.commons.io.output.ThresholdingOutputStream.write(int)" target="org.apache.commons.io.output.ThresholdingOutputStream.getStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3941" source="org.apache.commons.io.output.ThresholdingOutputStream.write(int)" target="org.apache.commons.io.output.ThresholdingOutputStream#written">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3942" source="org.apache.commons.io.output.WriterOutputStream(java.io.Writer)" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.Charset,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3943" source="org.apache.commons.io.output.WriterOutputStream(java.io.Writer)" target="org.apache.commons.io.output.WriterOutputStream#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3944" source="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String)" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3945" source="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String)" target="org.apache.commons.io.output.WriterOutputStream#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3946" source="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String,int,boolean)" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.Charset,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3947" source="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.Charset)" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.Charset,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3948" source="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.Charset)" target="org.apache.commons.io.output.WriterOutputStream#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3949" source="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.Charset,int,boolean)" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3950" source="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.Charset,int,boolean)" target="java.nio.charset.CodingErrorAction#REPLACE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3951" source="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder)" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3952" source="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder)" target="org.apache.commons.io.output.WriterOutputStream#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3953" source="org.apache.commons.io.output.WriterOutputStream#writer" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3954" source="org.apache.commons.io.output.WriterOutputStream#decoder" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3955" source="org.apache.commons.io.output.WriterOutputStream#writeImmediately" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3956" source="org.apache.commons.io.output.WriterOutputStream#decoderOut" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e3957" source="org.apache.commons.io.output.WriterOutputStream.close()" target="org.apache.commons.io.output.WriterOutputStream.processInput(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3958" source="org.apache.commons.io.output.WriterOutputStream.close()" target="org.apache.commons.io.output.WriterOutputStream.flushOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3959" source="org.apache.commons.io.output.WriterOutputStream.close()" target="org.apache.commons.io.output.WriterOutputStream#writer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3960" source="org.apache.commons.io.output.WriterOutputStream.flush()" target="org.apache.commons.io.output.WriterOutputStream.flushOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3961" source="org.apache.commons.io.output.WriterOutputStream.flush()" target="org.apache.commons.io.output.WriterOutputStream#writer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3962" source="org.apache.commons.io.output.WriterOutputStream.flushOutput()" target="org.apache.commons.io.output.WriterOutputStream#decoderOut">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3963" source="org.apache.commons.io.output.WriterOutputStream.flushOutput()" target="org.apache.commons.io.output.WriterOutputStream#writer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3964" source="org.apache.commons.io.output.WriterOutputStream.processInput(boolean)" target="org.apache.commons.io.output.WriterOutputStream.flushOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3965" source="org.apache.commons.io.output.WriterOutputStream.processInput(boolean)" target="org.apache.commons.io.output.WriterOutputStream#decoderIn">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3966" source="org.apache.commons.io.output.WriterOutputStream.processInput(boolean)" target="org.apache.commons.io.output.WriterOutputStream#decoder">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3967" source="org.apache.commons.io.output.WriterOutputStream.processInput(boolean)" target="org.apache.commons.io.output.WriterOutputStream#decoderOut">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3968" source="org.apache.commons.io.output.WriterOutputStream.write(byte[])" target="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3969" source="org.apache.commons.io.output.WriterOutputStream.write(byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3970" source="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.WriterOutputStream.processInput(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3971" source="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.WriterOutputStream.flushOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3972" source="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.WriterOutputStream#decoderIn">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3973" source="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)" target="org.apache.commons.io.output.WriterOutputStream#writeImmediately">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3974" source="org.apache.commons.io.output.WriterOutputStream.write(int)" target="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3975" source="org.apache.commons.io.output.WriterOutputStreamTest.testFlush()" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3976" source="org.apache.commons.io.output.WriterOutputStreamTest.testFlush()" target="org.apache.commons.io.output.WriterOutputStream.write(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3977" source="org.apache.commons.io.output.WriterOutputStreamTest.testFlush()" target="org.apache.commons.io.output.WriterOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3978" source="org.apache.commons.io.output.WriterOutputStreamTest.testFlush()" target="org.apache.commons.io.output.WriterOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3979" source="org.apache.commons.io.output.WriterOutputStreamTest.testLargeUTF8WithBufferedWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest.testWithBufferedWrite(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3980" source="org.apache.commons.io.output.WriterOutputStreamTest.testLargeUTF8WithBufferedWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest#LARGE_TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3981" source="org.apache.commons.io.output.WriterOutputStreamTest.testLargeUTF8WithSingleByteWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest.testWithSingleByteWrite(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3982" source="org.apache.commons.io.output.WriterOutputStreamTest.testLargeUTF8WithSingleByteWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest#LARGE_TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3983" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16BEWithBufferedWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest.testWithBufferedWrite(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3984" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16BEWithBufferedWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3985" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16BEWithSingleByteWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest.testWithSingleByteWrite(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3986" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16BEWithSingleByteWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3987" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16LEWithBufferedWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest.testWithBufferedWrite(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3988" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16LEWithBufferedWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3989" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16LEWithSingleByteWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest.testWithSingleByteWrite(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3990" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16LEWithSingleByteWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3991" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16WithBufferedWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest.testWithBufferedWrite(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3992" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16WithBufferedWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3993" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16WithSingleByteWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest.testWithSingleByteWrite(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3994" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF16WithSingleByteWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3995" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF8WithBufferedWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest.testWithBufferedWrite(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3996" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF8WithBufferedWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3997" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF8WithSingleByteWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest.testWithSingleByteWrite(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3998" source="org.apache.commons.io.output.WriterOutputStreamTest.testUTF8WithSingleByteWrite()" target="org.apache.commons.io.output.WriterOutputStreamTest#TEST_STRING">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e3999" source="org.apache.commons.io.output.WriterOutputStreamTest.testWithBufferedWrite(java.lang.String,java.lang.String)" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4000" source="org.apache.commons.io.output.WriterOutputStreamTest.testWithBufferedWrite(java.lang.String,java.lang.String)" target="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4001" source="org.apache.commons.io.output.WriterOutputStreamTest.testWithBufferedWrite(java.lang.String,java.lang.String)" target="org.apache.commons.io.output.WriterOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4002" source="org.apache.commons.io.output.WriterOutputStreamTest.testWithBufferedWrite(java.lang.String,java.lang.String)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4003" source="org.apache.commons.io.output.WriterOutputStreamTest.testWithBufferedWrite(java.lang.String,java.lang.String)" target="org.apache.commons.io.output.WriterOutputStreamTest#random">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4004" source="org.apache.commons.io.output.WriterOutputStreamTest.testWithSingleByteWrite(java.lang.String,java.lang.String)" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4005" source="org.apache.commons.io.output.WriterOutputStreamTest.testWithSingleByteWrite(java.lang.String,java.lang.String)" target="org.apache.commons.io.output.WriterOutputStream.write(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4006" source="org.apache.commons.io.output.WriterOutputStreamTest.testWithSingleByteWrite(java.lang.String,java.lang.String)" target="org.apache.commons.io.output.WriterOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4007" source="org.apache.commons.io.output.WriterOutputStreamTest.testWriteImmediately()" target="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4008" source="org.apache.commons.io.output.WriterOutputStreamTest.testWriteImmediately()" target="org.apache.commons.io.output.WriterOutputStream.write(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4009" source="org.apache.commons.io.output.WriterOutputStreamTest.testWriteImmediately()" target="org.apache.commons.io.output.WriterOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4010" source="org.apache.commons.io.output.XmlStreamWriter(java.io.File)" target="org.apache.commons.io.output.XmlStreamWriter(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4011" source="org.apache.commons.io.output.XmlStreamWriter(java.io.File,java.lang.String)" target="org.apache.commons.io.output.XmlStreamWriter(java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4012" source="org.apache.commons.io.output.XmlStreamWriter(java.io.OutputStream)" target="org.apache.commons.io.output.XmlStreamWriter(java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4013" source="org.apache.commons.io.output.XmlStreamWriter#out" target="org.apache.commons.io.output.XmlStreamWriter(java.io.OutputStream,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4014" source="org.apache.commons.io.output.XmlStreamWriter#defaultEncoding" target="org.apache.commons.io.output.XmlStreamWriter(java.io.OutputStream,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4015" source="org.apache.commons.io.output.XmlStreamWriter.getDefaultEncoding()" target="org.apache.commons.io.output.XmlStreamWriter#defaultEncoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4016" source="org.apache.commons.io.output.XmlStreamWriter.getEncoding()" target="org.apache.commons.io.output.XmlStreamWriter#encoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4017" source="org.apache.commons.io.output.XmlStreamWriter.close()" target="org.apache.commons.io.output.XmlStreamWriter#writer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4018" source="org.apache.commons.io.output.XmlStreamWriter#encoding" target="org.apache.commons.io.output.XmlStreamWriter.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4019" source="org.apache.commons.io.output.XmlStreamWriter#defaultEncoding" target="org.apache.commons.io.output.XmlStreamWriter.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4020" source="org.apache.commons.io.output.XmlStreamWriter#writer" target="org.apache.commons.io.output.XmlStreamWriter.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4021" source="org.apache.commons.io.output.XmlStreamWriter.close()" target="org.apache.commons.io.output.XmlStreamWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4022" source="org.apache.commons.io.output.XmlStreamWriter.close()" target="org.apache.commons.io.output.XmlStreamWriter#encoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4023" source="org.apache.commons.io.output.XmlStreamWriter.close()" target="org.apache.commons.io.output.XmlStreamWriter#xmlPrologWriter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4024" source="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" target="org.apache.commons.io.output.XmlStreamWriter#xmlPrologWriter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4025" source="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" target="org.apache.commons.io.output.XmlStreamWriter#BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4026" source="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" target="org.apache.commons.io.output.XmlStreamWriter#ENCODING_PATTERN">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4027" source="org.apache.commons.io.output.XmlStreamWriter#encoding" target="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4028" source="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" target="org.apache.commons.io.output.XmlStreamWriter#encoding">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4029" source="org.apache.commons.io.output.XmlStreamWriter#defaultEncoding" target="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4030" source="org.apache.commons.io.output.XmlStreamWriter#xmlPrologWriter" target="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4031" source="org.apache.commons.io.output.XmlStreamWriter#writer" target="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4032" source="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" target="org.apache.commons.io.output.XmlStreamWriter#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4033" source="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" target="org.apache.commons.io.output.XmlStreamWriter#writer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4034" source="org.apache.commons.io.output.XmlStreamWriter.flush()" target="org.apache.commons.io.output.XmlStreamWriter#writer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4035" source="org.apache.commons.io.output.XmlStreamWriter.write(char[],int,int)" target="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4036" source="org.apache.commons.io.output.XmlStreamWriter.write(char[],int,int)" target="org.apache.commons.io.output.XmlStreamWriter#xmlPrologWriter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4037" source="org.apache.commons.io.output.XmlStreamWriter.write(char[],int,int)" target="org.apache.commons.io.output.XmlStreamWriter#writer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4038" source="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlContent(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.output.XmlStreamWriter(java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4039" source="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlContent(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.output.XmlStreamWriter.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4040" source="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlContent(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.output.XmlStreamWriter.getEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4041" source="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String)" target="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4042" source="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.output.XmlStreamWriterTest.createXmlContent(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4043" source="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlContent(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4044" source="org.apache.commons.io.output.XmlStreamWriterTest.testDefaultEncoding()" target="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4045" source="org.apache.commons.io.output.XmlStreamWriterTest.testDefaultEncoding()" target="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_UNICODE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4046" source="org.apache.commons.io.output.XmlStreamWriterTest.testEBCDICEncoding()" target="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4047" source="org.apache.commons.io.output.XmlStreamWriterTest.testEUC_JPEncoding()" target="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4048" source="org.apache.commons.io.output.XmlStreamWriterTest.testEUC_JPEncoding()" target="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_EUC_JP">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4049" source="org.apache.commons.io.output.XmlStreamWriterTest.testEmpty()" target="org.apache.commons.io.output.XmlStreamWriter(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4050" source="org.apache.commons.io.output.XmlStreamWriterTest.testEmpty()" target="org.apache.commons.io.output.XmlStreamWriter.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4051" source="org.apache.commons.io.output.XmlStreamWriterTest.testEmpty()" target="org.apache.commons.io.output.XmlStreamWriter.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4052" source="org.apache.commons.io.output.XmlStreamWriterTest.testLatin15Encoding()" target="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4053" source="org.apache.commons.io.output.XmlStreamWriterTest.testLatin15Encoding()" target="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_LATIN15">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4054" source="org.apache.commons.io.output.XmlStreamWriterTest.testLatin1Encoding()" target="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4055" source="org.apache.commons.io.output.XmlStreamWriterTest.testLatin1Encoding()" target="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_LATIN1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4056" source="org.apache.commons.io.output.XmlStreamWriterTest.testLatin7Encoding()" target="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4057" source="org.apache.commons.io.output.XmlStreamWriterTest.testLatin7Encoding()" target="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_LATIN7">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4058" source="org.apache.commons.io.output.XmlStreamWriterTest.testNoXmlHeader()" target="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlContent(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4059" source="org.apache.commons.io.output.XmlStreamWriterTest.testUTF16BEEncoding()" target="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4060" source="org.apache.commons.io.output.XmlStreamWriterTest.testUTF16BEEncoding()" target="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_UNICODE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4061" source="org.apache.commons.io.output.XmlStreamWriterTest.testUTF16Encoding()" target="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4062" source="org.apache.commons.io.output.XmlStreamWriterTest.testUTF16Encoding()" target="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_UNICODE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4063" source="org.apache.commons.io.output.XmlStreamWriterTest.testUTF16LEEncoding()" target="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4064" source="org.apache.commons.io.output.XmlStreamWriterTest.testUTF16LEEncoding()" target="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_UNICODE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4065" source="org.apache.commons.io.output.XmlStreamWriterTest.testUTF8Encoding()" target="org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4066" source="org.apache.commons.io.output.XmlStreamWriterTest.testUTF8Encoding()" target="org.apache.commons.io.output.XmlStreamWriterTest#TEXT_UNICODE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4067" source="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4068" source="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)" target="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4069" source="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4070" source="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()" target="org.apache.commons.io.testtools.FileBasedTestCase#testDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4071" source="org.apache.commons.io.testtools.FileBasedTestCase#testDir" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4072" source="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4073" source="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)" target="org.apache.commons.io.FileUtils.forceDelete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4074" source="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4075" source="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4076" source="org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4077" source="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)" target="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4078" source="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4079" source="org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4080" source="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)" target="org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4081" source="org.apache.commons.io.input.ProxyInputStream.close()" target="org.apache.commons.io.testtools.YellOnCloseInputStream.close()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4082" source="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)" target="org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4083" source="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream#yellForFlush" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4084" source="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream#yellForClose" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4085" source="org.apache.commons.io.output.ProxyOutputStream.close()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.close()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4086" source="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.close()" target="org.apache.commons.io.output.ProxyOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4087" source="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.close()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream#yellForClose">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4088" source="org.apache.commons.io.output.ProxyOutputStream.flush()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4089" source="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()" target="org.apache.commons.io.output.ProxyOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4090" source="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream#yellForFlush">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4091" source="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream#yellForFlush" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4092" source="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream#yellForClose" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4093" source="org.apache.commons.io.ByteOrderMark#UTF_8" target="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4094" source="org.apache.commons.io.ByteOrderMark#UTF_16BE" target="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4095" source="org.apache.commons.io.ByteOrderMark#UTF_16LE" target="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4096" source="org.apache.commons.io.ByteOrderMark#UTF_32BE" target="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4097" source="org.apache.commons.io.ByteOrderMark#UTF_32LE" target="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4098" source="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4099" source="org.apache.commons.io.ByteOrderMark#charsetName" target="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4100" source="org.apache.commons.io.ByteOrderMark#bytes" target="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4101" source="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])" target="org.apache.commons.io.ByteOrderMark#bytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4102" source="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" target="org.apache.commons.io.ByteOrderMark.length()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4103" source="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" target="org.apache.commons.io.ByteOrderMark.get(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4104" source="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4105" source="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" target="org.apache.commons.io.ByteOrderMark#bytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4106" source="org.apache.commons.io.ByteOrderMark.getBytes()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4107" source="org.apache.commons.io.ByteOrderMark.getBytes()" target="org.apache.commons.io.ByteOrderMark#bytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4108" source="org.apache.commons.io.ByteOrderMark.get(int)" target="org.apache.commons.io.ByteOrderMark#bytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4109" source="org.apache.commons.io.ByteOrderMark.hashCode()" target="org.apache.commons.io.ByteOrderMark#bytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4110" source="org.apache.commons.io.ByteOrderMark.length()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4111" source="org.apache.commons.io.ByteOrderMark.length()" target="org.apache.commons.io.ByteOrderMark#bytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4112" source="org.apache.commons.io.ByteOrderMark.getCharsetName()" target="org.apache.commons.io.ByteOrderMark#charsetName">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4113" source="org.apache.commons.io.ByteOrderMark.toString()" target="org.apache.commons.io.ByteOrderMark#charsetName">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4114" source="org.apache.commons.io.ByteOrderMark.toString()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4115" source="org.apache.commons.io.ByteOrderMark.toString()" target="org.apache.commons.io.ByteOrderMark#bytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4116" source="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_1" target="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4117" source="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_2" target="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4118" source="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_3" target="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4119" source="org.apache.commons.io.ByteOrderMarkTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4120" source="org.apache.commons.io.ByteOrderMarkTestCase.testCharsetName()" target="org.apache.commons.io.ByteOrderMark.getCharsetName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4121" source="org.apache.commons.io.ByteOrderMarkTestCase.testCharsetName()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4122" source="org.apache.commons.io.ByteOrderMarkTestCase.testCharsetName()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4123" source="org.apache.commons.io.ByteOrderMarkTestCase.testCharsetName()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4124" source="org.apache.commons.io.ByteOrderMarkTestCase.testConstantCharsetNames()" target="org.apache.commons.io.ByteOrderMark.getCharsetName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4125" source="org.apache.commons.io.ByteOrderMarkTestCase.testConstantCharsetNames()" target="org.apache.commons.io.ByteOrderMark#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4126" source="org.apache.commons.io.ByteOrderMarkTestCase.testConstantCharsetNames()" target="org.apache.commons.io.ByteOrderMark#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4127" source="org.apache.commons.io.ByteOrderMarkTestCase.testConstantCharsetNames()" target="org.apache.commons.io.ByteOrderMark#UTF_16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4128" source="org.apache.commons.io.ByteOrderMarkTestCase.testConstantCharsetNames()" target="org.apache.commons.io.ByteOrderMark#UTF_32BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4129" source="org.apache.commons.io.ByteOrderMarkTestCase.testConstantCharsetNames()" target="org.apache.commons.io.ByteOrderMark#UTF_32LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4130" source="org.apache.commons.io.ByteOrderMarkTestCase.testEquals()" target="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4131" source="org.apache.commons.io.ByteOrderMarkTestCase.testEquals()" target="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4132" source="org.apache.commons.io.ByteOrderMarkTestCase.testEquals()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4133" source="org.apache.commons.io.ByteOrderMarkTestCase.testEquals()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4134" source="org.apache.commons.io.ByteOrderMarkTestCase.testEquals()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4135" source="org.apache.commons.io.ByteOrderMarkTestCase.testErrors()" target="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4136" source="org.apache.commons.io.ByteOrderMarkTestCase.testGet()" target="org.apache.commons.io.ByteOrderMark.get(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4137" source="org.apache.commons.io.ByteOrderMarkTestCase.testGet()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4138" source="org.apache.commons.io.ByteOrderMarkTestCase.testGet()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4139" source="org.apache.commons.io.ByteOrderMarkTestCase.testGet()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4140" source="org.apache.commons.io.ByteOrderMarkTestCase.testGetBytes()" target="org.apache.commons.io.ByteOrderMark.getBytes()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4141" source="org.apache.commons.io.ByteOrderMarkTestCase.testGetBytes()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4142" source="org.apache.commons.io.ByteOrderMarkTestCase.testGetBytes()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4143" source="org.apache.commons.io.ByteOrderMarkTestCase.testGetBytes()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4144" source="org.apache.commons.io.ByteOrderMarkTestCase.testHashCode()" target="org.apache.commons.io.ByteOrderMark.hashCode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4145" source="org.apache.commons.io.ByteOrderMarkTestCase.testHashCode()" target="org.apache.commons.io.ByteOrderMark#class">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4146" source="org.apache.commons.io.ByteOrderMarkTestCase.testHashCode()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4147" source="org.apache.commons.io.ByteOrderMarkTestCase.testHashCode()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4148" source="org.apache.commons.io.ByteOrderMarkTestCase.testHashCode()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4149" source="org.apache.commons.io.ByteOrderMarkTestCase.testLength()" target="org.apache.commons.io.ByteOrderMark.length()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4150" source="org.apache.commons.io.ByteOrderMarkTestCase.testLength()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4151" source="org.apache.commons.io.ByteOrderMarkTestCase.testLength()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4152" source="org.apache.commons.io.ByteOrderMarkTestCase.testLength()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4153" source="org.apache.commons.io.ByteOrderMarkTestCase.testToString()" target="org.apache.commons.io.ByteOrderMark.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4154" source="org.apache.commons.io.ByteOrderMarkTestCase.testToString()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4155" source="org.apache.commons.io.ByteOrderMarkTestCase.testToString()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4156" source="org.apache.commons.io.ByteOrderMarkTestCase.testToString()" target="org.apache.commons.io.ByteOrderMarkTestCase#TEST_BOM_3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4157" source="org.apache.commons.io.Charsets.requiredCharsets()" target="java.lang.String#CASE_INSENSITIVE_ORDER">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4158" source="org.apache.commons.io.Charsets.requiredCharsets()" target="org.apache.commons.io.Charsets#ISO_8859_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4159" source="org.apache.commons.io.Charsets.requiredCharsets()" target="org.apache.commons.io.Charsets#US_ASCII">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4160" source="org.apache.commons.io.Charsets.requiredCharsets()" target="org.apache.commons.io.Charsets#UTF_16">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4161" source="org.apache.commons.io.Charsets.requiredCharsets()" target="org.apache.commons.io.Charsets#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4162" source="org.apache.commons.io.Charsets.requiredCharsets()" target="org.apache.commons.io.Charsets#UTF_16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4163" source="org.apache.commons.io.Charsets.requiredCharsets()" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4164" source="org.apache.commons.io.CharsetsTestCase.testIso8859_1()" target="org.apache.commons.io.Charsets#ISO_8859_1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4165" source="org.apache.commons.io.CharsetsTestCase.testRequiredCharsets()" target="org.apache.commons.io.Charsets.requiredCharsets()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4166" source="org.apache.commons.io.CharsetsTestCase.testToCharset()" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4167" source="org.apache.commons.io.CharsetsTestCase.testToCharset()" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4168" source="org.apache.commons.io.CharsetsTestCase.testUsAscii()" target="org.apache.commons.io.Charsets#US_ASCII">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4169" source="org.apache.commons.io.CharsetsTestCase.testUtf16()" target="org.apache.commons.io.Charsets#UTF_16">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4170" source="org.apache.commons.io.CharsetsTestCase.testUtf16Be()" target="org.apache.commons.io.Charsets#UTF_16BE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4171" source="org.apache.commons.io.CharsetsTestCase.testUtf16Le()" target="org.apache.commons.io.Charsets#UTF_16LE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4172" source="org.apache.commons.io.CharsetsTestCase.testUtf8()" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4173" source="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)" target="org.apache.commons.io.CopyUtils#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4174" source="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)" target="org.apache.commons.io.CopyUtils#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4175" source="org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)" target="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4176" source="org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)" target="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4177" source="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)" target="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4178" source="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)" target="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4179" source="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)" target="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4180" source="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)" target="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4181" source="org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)" target="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4182" source="org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream,java.lang.String)" target="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4183" source="org.apache.commons.io.CopyUtilsTest#inData" target="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4184" source="org.apache.commons.io.CopyUtilsTest(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4185" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4186" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4187" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()" target="org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4188" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4189" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4190" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()" target="org.apache.commons.io.CopyUtilsTest#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4191" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4192" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4193" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4194" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()" target="org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4195" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4196" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4197" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()" target="org.apache.commons.io.CopyUtilsTest#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4198" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4199" source="org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriterWithEncoding()" target="org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4200" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4201" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4202" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4203" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4204" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4205" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4206" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.CopyUtilsTest#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4207" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4208" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4209" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4210" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4211" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()" target="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4212" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4213" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4214" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()" target="org.apache.commons.io.CopyUtilsTest#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4215" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4216" source="org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriterWithEncoding()" target="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4217" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4218" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4219" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4220" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()" target="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4221" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4222" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4223" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()" target="org.apache.commons.io.CopyUtilsTest#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4224" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4225" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4226" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4227" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4228" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()" target="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4229" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4230" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4231" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()" target="org.apache.commons.io.CopyUtilsTest#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4232" source="org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4233" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4234" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4235" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()" target="org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4236" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4237" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4238" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()" target="org.apache.commons.io.CopyUtilsTest#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4239" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4240" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4241" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4242" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()" target="org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4243" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4244" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4245" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()" target="org.apache.commons.io.CopyUtilsTest#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4246" source="org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4247" source="org.apache.commons.io.CopyUtilsTest.testCtor()" target="org.apache.commons.io.CopyUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4248" source="org.apache.commons.io.DemuxTestCase$ReaderThread#m_input" target="org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4249" source="org.apache.commons.io.DemuxTestCase$ReaderThread#m_demux" target="org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4250" source="org.apache.commons.io.DemuxTestCase$ReaderThread.getData()" target="org.apache.commons.io.DemuxTestCase$ReaderThread#m_buffer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4251" source="org.apache.commons.io.DemuxTestCase$ReaderThread.run()" target="org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4252" source="org.apache.commons.io.DemuxTestCase$ReaderThread.run()" target="org.apache.commons.io.input.DemuxInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4253" source="org.apache.commons.io.DemuxTestCase$ReaderThread.run()" target="org.apache.commons.io.DemuxTestCase$ReaderThread#m_demux">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4254" source="org.apache.commons.io.DemuxTestCase$ReaderThread.run()" target="org.apache.commons.io.DemuxTestCase$ReaderThread#m_input">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4255" source="org.apache.commons.io.DemuxTestCase$ReaderThread.run()" target="org.apache.commons.io.DemuxTestCase$ReaderThread#m_buffer">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4256" source="org.apache.commons.io.DemuxTestCase$ReaderThread.run()" target="org.apache.commons.io.DemuxTestCase#c_random">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4257" source="org.apache.commons.io.DemuxTestCase$WriterThread#m_output" target="org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4258" source="org.apache.commons.io.DemuxTestCase$WriterThread#m_demux" target="org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4259" source="org.apache.commons.io.DemuxTestCase$WriterThread#m_data" target="org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4260" source="org.apache.commons.io.DemuxTestCase$WriterThread.run()" target="org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4261" source="org.apache.commons.io.DemuxTestCase$WriterThread.run()" target="org.apache.commons.io.output.DemuxOutputStream.write(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4262" source="org.apache.commons.io.DemuxTestCase$WriterThread.run()" target="org.apache.commons.io.DemuxTestCase$WriterThread#m_demux">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4263" source="org.apache.commons.io.DemuxTestCase$WriterThread.run()" target="org.apache.commons.io.DemuxTestCase$WriterThread#m_output">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4264" source="org.apache.commons.io.DemuxTestCase$WriterThread.run()" target="org.apache.commons.io.DemuxTestCase$WriterThread#m_data">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4265" source="org.apache.commons.io.DemuxTestCase$WriterThread.run()" target="org.apache.commons.io.DemuxTestCase#c_random">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4266" source="org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)" target="org.apache.commons.io.DemuxTestCase$ReaderThread.getData()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4267" source="org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)" target="org.apache.commons.io.DemuxTestCase#m_threadMap">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4268" source="org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)" target="org.apache.commons.io.output.ByteArrayOutputStream.toString(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4269" source="org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)" target="org.apache.commons.io.DemuxTestCase#m_outputMap">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4270" source="org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4271" source="org.apache.commons.io.DemuxTestCase.doJoin()" target="org.apache.commons.io.DemuxTestCase#m_threadMap">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4272" source="org.apache.commons.io.DemuxTestCase.doStart()" target="org.apache.commons.io.DemuxTestCase#m_threadMap">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4273" source="org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)" target="org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4274" source="org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)" target="org.apache.commons.io.DemuxTestCase#m_threadMap">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4275" source="org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4276" source="org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)" target="org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4277" source="org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)" target="org.apache.commons.io.DemuxTestCase#m_outputMap">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4278" source="org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)" target="org.apache.commons.io.DemuxTestCase#m_threadMap">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4279" source="org.apache.commons.io.DemuxTestCase.testInputStream()" target="org.apache.commons.io.input.DemuxInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4280" source="org.apache.commons.io.DemuxTestCase.testInputStream()" target="org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4281" source="org.apache.commons.io.DemuxTestCase.testInputStream()" target="org.apache.commons.io.DemuxTestCase.doStart()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4282" source="org.apache.commons.io.DemuxTestCase.testInputStream()" target="org.apache.commons.io.DemuxTestCase.doJoin()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4283" source="org.apache.commons.io.DemuxTestCase.testInputStream()" target="org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4284" source="org.apache.commons.io.DemuxTestCase.testInputStream()" target="org.apache.commons.io.DemuxTestCase#T1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4285" source="org.apache.commons.io.DemuxTestCase.testInputStream()" target="org.apache.commons.io.DemuxTestCase#DATA1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4286" source="org.apache.commons.io.DemuxTestCase.testInputStream()" target="org.apache.commons.io.DemuxTestCase#T2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4287" source="org.apache.commons.io.DemuxTestCase.testInputStream()" target="org.apache.commons.io.DemuxTestCase#DATA2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4288" source="org.apache.commons.io.DemuxTestCase.testInputStream()" target="org.apache.commons.io.DemuxTestCase#T3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4289" source="org.apache.commons.io.DemuxTestCase.testInputStream()" target="org.apache.commons.io.DemuxTestCase#DATA3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4290" source="org.apache.commons.io.DemuxTestCase.testInputStream()" target="org.apache.commons.io.DemuxTestCase#T4">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4291" source="org.apache.commons.io.DemuxTestCase.testInputStream()" target="org.apache.commons.io.DemuxTestCase#DATA4">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4292" source="org.apache.commons.io.DemuxTestCase.testOutputStream()" target="org.apache.commons.io.output.DemuxOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4293" source="org.apache.commons.io.DemuxTestCase.testOutputStream()" target="org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4294" source="org.apache.commons.io.DemuxTestCase.testOutputStream()" target="org.apache.commons.io.DemuxTestCase.doStart()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4295" source="org.apache.commons.io.DemuxTestCase.testOutputStream()" target="org.apache.commons.io.DemuxTestCase.doJoin()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4296" source="org.apache.commons.io.DemuxTestCase.testOutputStream()" target="org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4297" source="org.apache.commons.io.DemuxTestCase.testOutputStream()" target="org.apache.commons.io.DemuxTestCase#T1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4298" source="org.apache.commons.io.DemuxTestCase.testOutputStream()" target="org.apache.commons.io.DemuxTestCase#DATA1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4299" source="org.apache.commons.io.DemuxTestCase.testOutputStream()" target="org.apache.commons.io.DemuxTestCase#T2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4300" source="org.apache.commons.io.DemuxTestCase.testOutputStream()" target="org.apache.commons.io.DemuxTestCase#DATA2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4301" source="org.apache.commons.io.DemuxTestCase.testOutputStream()" target="org.apache.commons.io.DemuxTestCase#T3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4302" source="org.apache.commons.io.DemuxTestCase.testOutputStream()" target="org.apache.commons.io.DemuxTestCase#DATA3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4303" source="org.apache.commons.io.DemuxTestCase.testOutputStream()" target="org.apache.commons.io.DemuxTestCase#T4">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4304" source="org.apache.commons.io.DemuxTestCase.testOutputStream()" target="org.apache.commons.io.DemuxTestCase#DATA4">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4305" source="org.apache.commons.io.DirectoryWalker$CancelException(java.io.File,int)" target="org.apache.commons.io.DirectoryWalker$CancelException(java.lang.String,java.io.File,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4306" source="org.apache.commons.io.DirectoryWalker$CancelException#file" target="org.apache.commons.io.DirectoryWalker$CancelException(java.lang.String,java.io.File,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4307" source="org.apache.commons.io.DirectoryWalker$CancelException#depth" target="org.apache.commons.io.DirectoryWalker$CancelException(java.lang.String,java.io.File,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4308" source="org.apache.commons.io.DirectoryWalker$CancelException.getDepth()" target="org.apache.commons.io.DirectoryWalker$CancelException#depth">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4309" source="org.apache.commons.io.DirectoryWalker$CancelException.getFile()" target="org.apache.commons.io.DirectoryWalker$CancelException#file">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4310" source="org.apache.commons.io.DirectoryWalker()" target="org.apache.commons.io.DirectoryWalker(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4311" source="org.apache.commons.io.DirectoryWalker#filter" target="org.apache.commons.io.DirectoryWalker(java.io.FileFilter,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4312" source="org.apache.commons.io.DirectoryWalker#depthLimit" target="org.apache.commons.io.DirectoryWalker(java.io.FileFilter,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4313" source="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" target="org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4314" source="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" target="org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4315" source="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" target="org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4316" source="org.apache.commons.io.DirectoryWalker#filter" target="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4317" source="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" target="org.apache.commons.io.filefilter.TrueFileFilter#TRUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4318" source="org.apache.commons.io.DirectoryWalker#depthLimit" target="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4319" source="org.apache.commons.io.DirectoryWalker.checkIfCancelled(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker.handleIsCancelled(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4320" source="org.apache.commons.io.DirectoryWalker.checkIfCancelled(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker$CancelException(java.io.File,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4321" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker.checkIfCancelled(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4322" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker.handleDirectory(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4323" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker.handleDirectoryStart(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4324" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker.filterDirectoryContents(java.io.File,int,java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4325" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker.handleRestricted(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4326" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4327" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4328" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4329" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker#depthLimit">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4330" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker#filter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4331" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker.handleStart(java.io.File,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4332" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4333" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker.handleEnd(java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4334" source="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4335" source="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker(java.lang.String,boolean)" target="org.apache.commons.io.DirectoryWalker()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4336" source="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker#cancelFileName" target="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker(java.lang.String,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4337" source="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker#suppressCancel" target="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker(java.lang.String,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4338" source="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.find(java.io.File)" target="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4339" source="org.apache.commons.io.DirectoryWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4340" source="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)" target="org.apache.commons.io.DirectoryWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4341" source="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker#suppressCancel">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4342" source="org.apache.commons.io.DirectoryWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4343" source="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker$CancelException(java.io.File,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4344" source="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker#cancelFileName">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4345" source="org.apache.commons.io.DirectoryWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4346" source="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker$CancelException(java.io.File,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4347" source="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker#cancelFileName">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4348" source="org.apache.commons.io.DirectoryWalkerTestCase$TestFalseFileFinder(java.io.FileFilter,int)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4349" source="org.apache.commons.io.DirectoryWalker.handleDirectory(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFalseFileFinder.handleDirectory(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4350" source="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(java.io.FileFilter,int)" target="org.apache.commons.io.DirectoryWalker(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4351" source="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" target="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4352" source="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)" target="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4353" source="org.apache.commons.io.DirectoryWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4354" source="org.apache.commons.io.DirectoryWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4355" source="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString(java.io.FileFilter,int)" target="org.apache.commons.io.DirectoryWalker(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4356" source="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString.find(java.io.File)" target="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4357" source="org.apache.commons.io.DirectoryWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4358" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker(java.lang.String,boolean)" target="org.apache.commons.io.DirectoryWalker()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4359" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#cancelFileName" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker(java.lang.String,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4360" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#suppressCancel" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker(java.lang.String,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4361" source="org.apache.commons.io.DirectoryWalker.handleIsCancelled(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleIsCancelled(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4362" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleIsCancelled(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#cancelled">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4363" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.find(java.io.File)" target="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4364" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#results" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.find(java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4365" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.find(java.io.File)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#results">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4366" source="org.apache.commons.io.DirectoryWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4367" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)" target="org.apache.commons.io.DirectoryWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4368" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#suppressCancel">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4369" source="org.apache.commons.io.DirectoryWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4370" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#cancelled">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4371" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#cancelFileName">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4372" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#cancelled" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4373" source="org.apache.commons.io.DirectoryWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4374" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#cancelled">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4375" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#cancelFileName">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4376" source="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#cancelled" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4377" source="org.apache.commons.io.DirectoryWalkerTestCase#dirsFilter" target="org.apache.commons.io.DirectoryWalkerTestCase.createNameFilter(java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4378" source="org.apache.commons.io.DirectoryWalkerTestCase#iofilesFilter" target="org.apache.commons.io.DirectoryWalkerTestCase.createNameFilter(java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4379" source="org.apache.commons.io.DirectoryWalkerTestCase#outputFilesFilter" target="org.apache.commons.io.DirectoryWalkerTestCase.createNameFilter(java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4380" source="org.apache.commons.io.DirectoryWalkerTestCase#ioDirAndFilesFilter" target="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4381" source="org.apache.commons.io.DirectoryWalkerTestCase#dirsAndFilesFilter" target="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4382" source="org.apache.commons.io.DirectoryWalkerTestCase#NOT_SVN" target="org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4383" source="org.apache.commons.io.DirectoryWalkerTestCase.createNameFilter(java.io.File[])" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4384" source="org.apache.commons.io.DirectoryWalkerTestCase.createNameFilter(java.io.File[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4385" source="org.apache.commons.io.DirectoryWalkerTestCase.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4386" source="org.apache.commons.io.DirectoryWalkerTestCase.checkContainsString(java.lang.String,java.io.File[],java.util.Collection)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4387" source="org.apache.commons.io.DirectoryWalkerTestCase.testCancel()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4388" source="org.apache.commons.io.DirectoryWalkerTestCase.testCancel()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4389" source="org.apache.commons.io.DirectoryWalkerTestCase.testCancel()" target="org.apache.commons.io.DirectoryWalker$CancelException.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4390" source="org.apache.commons.io.DirectoryWalkerTestCase.testCancel()" target="org.apache.commons.io.DirectoryWalker$CancelException.getDepth()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4391" source="org.apache.commons.io.DirectoryWalkerTestCase.testCancel()" target="org.apache.commons.io.DirectoryWalkerTestCase#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4392" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4393" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4394" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCase.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4395" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCase#dirsAndFilesFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4396" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCase#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4397" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilter()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4398" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCase#dirs">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4399" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCase#ioFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4400" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCase#outputFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4401" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitA()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4402" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitA()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4403" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitA()" target="org.apache.commons.io.DirectoryWalkerTestCase#NOT_SVN">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4404" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitA()" target="org.apache.commons.io.DirectoryWalkerTestCase#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4405" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitB()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4406" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitB()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4407" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitB()" target="org.apache.commons.io.DirectoryWalkerTestCase#NOT_SVN">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4408" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitB()" target="org.apache.commons.io.DirectoryWalkerTestCase#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4409" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitB()" target="org.apache.commons.io.DirectoryWalkerTestCase#orgDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4410" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4411" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4412" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCase#NOT_SVN">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4413" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCase#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4414" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCase#orgDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4415" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCase#apacheDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4416" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCase#commonsDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4417" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4418" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4419" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCase.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4420" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCase#dirsAndFilesFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4421" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCase#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4422" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitD()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4423" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCase#dirs">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4424" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCase#ioFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4425" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4426" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4427" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCase.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4428" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCase#dirsFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4429" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCase#iofilesFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4430" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCase#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4431" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile1()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4432" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCase#dirs">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4433" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCase#ioFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4434" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile2()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4435" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile2()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4436" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile2()" target="org.apache.commons.io.DirectoryWalkerTestCase.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4437" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile2()" target="org.apache.commons.io.DirectoryWalkerTestCase#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4438" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile2()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4439" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile2()" target="org.apache.commons.io.DirectoryWalkerTestCase#dirs">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4440" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile2()" target="org.apache.commons.io.DirectoryWalkerTestCase#ioFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4441" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4442" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4443" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCase.directoriesOnly(java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4444" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCase.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4445" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCase#dirsFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4446" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCase#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4447" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile3()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4448" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCase#dirs">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4449" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4450" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4451" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCase.filesOnly(java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4452" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCase.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4453" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCase#iofilesFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4454" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCase#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4455" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile4()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4456" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCase#ioFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4457" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterString()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4458" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterString()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4459" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterString()" target="org.apache.commons.io.DirectoryWalkerTestCase.checkContainsString(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4460" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterString()" target="org.apache.commons.io.DirectoryWalkerTestCase#dirsAndFilesFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4461" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterString()" target="org.apache.commons.io.DirectoryWalkerTestCase#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4462" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterString()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4463" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterString()" target="org.apache.commons.io.DirectoryWalkerTestCase#outputFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4464" source="org.apache.commons.io.DirectoryWalkerTestCase.testFilterString()" target="org.apache.commons.io.DirectoryWalkerTestCase#ioFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4465" source="org.apache.commons.io.DirectoryWalkerTestCase.testHandleStartDirectoryFalse()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFalseFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4466" source="org.apache.commons.io.DirectoryWalkerTestCase.testHandleStartDirectoryFalse()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4467" source="org.apache.commons.io.DirectoryWalkerTestCase.testHandleStartDirectoryFalse()" target="org.apache.commons.io.DirectoryWalkerTestCase#current">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4468" source="org.apache.commons.io.DirectoryWalkerTestCase.testLimitToCurrent()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4469" source="org.apache.commons.io.DirectoryWalkerTestCase.testLimitToCurrent()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4470" source="org.apache.commons.io.DirectoryWalkerTestCase.testLimitToCurrent()" target="org.apache.commons.io.DirectoryWalkerTestCase#current">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4471" source="org.apache.commons.io.DirectoryWalkerTestCase.testMissingStartDirectory()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4472" source="org.apache.commons.io.DirectoryWalkerTestCase.testMissingStartDirectory()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4473" source="org.apache.commons.io.DirectoryWalkerTestCase.testMultiThreadCancel()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4474" source="org.apache.commons.io.DirectoryWalkerTestCase.testMultiThreadCancel()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4475" source="org.apache.commons.io.DirectoryWalkerTestCase.testMultiThreadCancel()" target="org.apache.commons.io.DirectoryWalker$CancelException.getDepth()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4476" source="org.apache.commons.io.DirectoryWalkerTestCase.testMultiThreadCancel()" target="org.apache.commons.io.DirectoryWalker$CancelException.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4477" source="org.apache.commons.io.DirectoryWalkerTestCase.testMultiThreadCancel()" target="org.apache.commons.io.DirectoryWalkerTestCase#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4478" source="org.apache.commons.io.DirectoryWalkerTestCase.testMultiThreadCancel()" target="org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker#results">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4479" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker(java.lang.String,boolean)" target="org.apache.commons.io.DirectoryWalker()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4480" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker#cancelFileName" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker(java.lang.String,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4481" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker#suppressCancel" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker(java.lang.String,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4482" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.find(java.io.File)" target="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4483" source="org.apache.commons.io.DirectoryWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4484" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)" target="org.apache.commons.io.DirectoryWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4485" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker#suppressCancel">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4486" source="org.apache.commons.io.DirectoryWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4487" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker$CancelException(java.io.File,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4488" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker#cancelFileName">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4489" source="org.apache.commons.io.DirectoryWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4490" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalker$CancelException(java.io.File,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4491" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker#cancelFileName">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4492" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFalseFileFinder(java.io.FileFilter,int)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4493" source="org.apache.commons.io.DirectoryWalker.handleDirectory(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFalseFileFinder.handleDirectory(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4494" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(java.io.FileFilter,int)" target="org.apache.commons.io.DirectoryWalker(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4495" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" target="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4496" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)" target="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4497" source="org.apache.commons.io.DirectoryWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4498" source="org.apache.commons.io.DirectoryWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4499" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker(java.lang.String,boolean)" target="org.apache.commons.io.DirectoryWalker()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4500" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#cancelFileName" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker(java.lang.String,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4501" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#suppressCancel" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker(java.lang.String,boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4502" source="org.apache.commons.io.DirectoryWalker.handleIsCancelled(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleIsCancelled(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4503" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleIsCancelled(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#cancelled">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4504" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.find(java.io.File)" target="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4505" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#results" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.find(java.io.File)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4506" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.find(java.io.File)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#results">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4507" source="org.apache.commons.io.DirectoryWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4508" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)" target="org.apache.commons.io.DirectoryWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4509" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#suppressCancel">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4510" source="org.apache.commons.io.DirectoryWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4511" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#cancelled">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4512" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#cancelFileName">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4513" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#cancelled" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleDirectoryEnd(java.io.File,int,java.util.Collection)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4514" source="org.apache.commons.io.DirectoryWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4515" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#cancelled">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4516" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#cancelFileName">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4517" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#cancelled" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4518" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirsFilter" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4.createNameFilter(java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4519" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4#iofilesFilter" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4.createNameFilter(java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4520" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4#outputFilesFilter" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4.createNameFilter(java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4521" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4#ioDirAndFilesFilter" target="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4522" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirsAndFilesFilter" target="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4523" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4#NOT_SVN" target="org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4524" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.createNameFilter(java.io.File[])" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4525" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.createNameFilter(java.io.File[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4526" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4527" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testCancel()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4528" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testCancel()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestCancelWalker.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4529" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testCancel()" target="org.apache.commons.io.DirectoryWalker$CancelException.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4530" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testCancel()" target="org.apache.commons.io.DirectoryWalker$CancelException.getDepth()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4531" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testCancel()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4532" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4533" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4534" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4535" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirsAndFilesFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4536" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4537" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilter()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4538" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirs">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4539" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#ioFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4540" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilter()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#outputFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4541" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitA()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4542" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitA()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4543" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitA()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#NOT_SVN">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4544" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitA()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4545" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitB()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4546" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitB()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4547" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitB()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#NOT_SVN">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4548" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitB()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4549" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitB()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#orgDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4550" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4551" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4552" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#NOT_SVN">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4553" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4554" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#orgDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4555" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#apacheDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4556" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitC()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#commonsDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4557" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4558" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4559" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4560" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirsAndFilesFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4561" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4562" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitD()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4563" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirs">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4564" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitD()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#ioFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4565" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4566" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4567" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4568" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirsFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4569" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#iofilesFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4570" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4571" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile1()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4572" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirs">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4573" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile1()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#ioFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4574" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile2()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4575" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile2()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4576" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile2()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4577" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile2()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4578" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile2()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4579" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile2()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirs">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4580" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile2()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#ioFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4581" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4582" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4583" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4.directoriesOnly(java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4584" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4585" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirsFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4586" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4587" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile3()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4588" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile3()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#dirs">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4589" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4590" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4591" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4.filesOnly(java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4592" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4.checkContainsFiles(java.lang.String,java.io.File[],java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4593" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#iofilesFilter">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4594" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4595" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile4()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4596" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile4()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#ioFiles">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4597" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testHandleStartDirectoryFalse()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFalseFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4598" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testHandleStartDirectoryFalse()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4599" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testHandleStartDirectoryFalse()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#current">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4600" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testLimitToCurrent()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4601" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testLimitToCurrent()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4602" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testLimitToCurrent()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#current">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4603" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testMissingStartDirectory()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder(java.io.FileFilter,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4604" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testMissingStartDirectory()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestFileFinder.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4605" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testMultiThreadCancel()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4606" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testMultiThreadCancel()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker.find(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4607" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testMultiThreadCancel()" target="org.apache.commons.io.DirectoryWalker$CancelException.getDepth()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4608" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testMultiThreadCancel()" target="org.apache.commons.io.DirectoryWalker$CancelException.getFile()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4609" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testMultiThreadCancel()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4#javaDir">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4610" source="org.apache.commons.io.DirectoryWalkerTestCaseJava4.testMultiThreadCancel()" target="org.apache.commons.io.DirectoryWalkerTestCaseJava4$TestMultiThreadCancelWalker#results">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4611" source="org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)" target="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4612" source="org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)" target="org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4613" source="org.apache.commons.io.EndianUtils.swapDouble(double)" target="org.apache.commons.io.EndianUtils.swapLong(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4614" source="org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)" target="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4615" source="org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)" target="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4616" source="org.apache.commons.io.EndianUtils.swapFloat(float)" target="org.apache.commons.io.EndianUtils.swapInteger(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4617" source="org.apache.commons.io.EndianUtils.read(java.io.InputStream)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4618" source="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" target="org.apache.commons.io.EndianUtils.read(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4619" source="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)" target="org.apache.commons.io.EndianUtils.read(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4620" source="org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)" target="org.apache.commons.io.EndianUtils.read(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4621" source="org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)" target="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4622" source="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" target="org.apache.commons.io.EndianUtils.read(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4623" source="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)" target="org.apache.commons.io.EndianUtils.read(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4624" source="org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)" target="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4625" source="org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)" target="org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4626" source="org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)" target="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4627" source="org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)" target="org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4628" source="org.apache.commons.io.EndianUtilsTest.testCtor()" target="org.apache.commons.io.EndianUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4629" source="org.apache.commons.io.EndianUtilsTest.testEOFException()" target="org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4630" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()" target="org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4631" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()" target="org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4632" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()" target="org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4633" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()" target="org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4634" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()" target="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4635" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()" target="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4636" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()" target="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4637" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()" target="org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4638" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()" target="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4639" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()" target="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4640" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()" target="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4641" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()" target="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4642" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()" target="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4643" source="org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()" target="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4644" source="org.apache.commons.io.EndianUtilsTest.testSwapDouble()" target="org.apache.commons.io.EndianUtils.swapDouble(double)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4645" source="org.apache.commons.io.EndianUtilsTest.testSwapFloat()" target="org.apache.commons.io.EndianUtils.swapFloat(float)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4646" source="org.apache.commons.io.EndianUtilsTest.testSwapInteger()" target="org.apache.commons.io.EndianUtils.swapInteger(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4647" source="org.apache.commons.io.EndianUtilsTest.testSwapLong()" target="org.apache.commons.io.EndianUtils.swapLong(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4648" source="org.apache.commons.io.EndianUtilsTest.testSwapShort()" target="org.apache.commons.io.EndianUtils.swapShort(short)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4649" source="org.apache.commons.io.EndianUtilsTest.testSymmetry()" target="org.apache.commons.io.EndianUtils.swapShort(short)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4650" source="org.apache.commons.io.EndianUtilsTest.testSymmetry()" target="org.apache.commons.io.EndianUtils.swapInteger(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4651" source="org.apache.commons.io.EndianUtilsTest.testSymmetry()" target="org.apache.commons.io.EndianUtils.swapLong(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4652" source="org.apache.commons.io.EndianUtilsTest.testSymmetry()" target="org.apache.commons.io.EndianUtils.swapFloat(float)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4653" source="org.apache.commons.io.EndianUtilsTest.testSymmetry()" target="org.apache.commons.io.EndianUtils.swapDouble(double)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4654" source="org.apache.commons.io.EndianUtilsTest.testSymmetryOfLong()" target="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4655" source="org.apache.commons.io.EndianUtilsTest.testSymmetryOfLong()" target="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4656" source="org.apache.commons.io.EndianUtilsTest.testSymmetryOfLong()" target="org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4657" source="org.apache.commons.io.EndianUtilsTest.testSymmetryOfLong()" target="org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4658" source="org.apache.commons.io.EndianUtilsTest.testUnsignedOverrun()" target="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4659" source="org.apache.commons.io.EndianUtilsTest.testUnsignedOverrun()" target="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4660" source="org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()" target="org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4661" source="org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()" target="org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4662" source="org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()" target="org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4663" source="org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()" target="org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4664" source="org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()" target="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4665" source="org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()" target="org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4666" source="org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()" target="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4667" source="org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()" target="org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4668" source="org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()" target="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4669" source="org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()" target="org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4670" source="org.apache.commons.io.FileCleaner#theInstance" target="org.apache.commons.io.FileCleaningTracker()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4671" source="org.apache.commons.io.FileCleaner.getTrackCount()" target="org.apache.commons.io.FileCleaningTracker.getTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4672" source="org.apache.commons.io.FileCleaner.getTrackCount()" target="org.apache.commons.io.FileCleaner#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4673" source="org.apache.commons.io.FileCleaner.getInstance()" target="org.apache.commons.io.FileCleaner#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4674" source="org.apache.commons.io.FileCleaner.exitWhenFinished()" target="org.apache.commons.io.FileCleaningTracker.exitWhenFinished()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4675" source="org.apache.commons.io.FileCleaner.exitWhenFinished()" target="org.apache.commons.io.FileCleaner#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4676" source="org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)" target="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4677" source="org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)" target="org.apache.commons.io.FileCleaner#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4678" source="org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" target="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4679" source="org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" target="org.apache.commons.io.FileCleaner#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4680" source="org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)" target="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4681" source="org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)" target="org.apache.commons.io.FileCleaner#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4682" source="org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" target="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4683" source="org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" target="org.apache.commons.io.FileCleaner#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4684" source="org.apache.commons.io.FileCleanerTestCase(java.lang.String)" target="org.apache.commons.io.FileCleaningTrackerTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4685" source="org.apache.commons.io.FileCleaningTrackerTestCase.newInstance()" target="org.apache.commons.io.FileCleanerTestCase.newInstance()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4686" source="org.apache.commons.io.FileCleanerTestCase.newInstance()" target="org.apache.commons.io.FileCleaner.getInstance()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4687" source="org.apache.commons.io.FileCleaningTracker$Reaper()" target="java.lang.Thread#MAX_PRIORITY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4688" source="org.apache.commons.io.FileCleaningTracker$Reaper.run()" target="org.apache.commons.io.FileCleaningTracker$Tracker.delete()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4689" source="org.apache.commons.io.FileCleaningTracker$Reaper.run()" target="org.apache.commons.io.FileCleaningTracker$Tracker.getPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4690" source="org.apache.commons.io.FileCleaningTracker$Reaper.run()" target="org.apache.commons.io.FileCleaningTracker#exitWhenFinished">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4691" source="org.apache.commons.io.FileCleaningTracker$Reaper.run()" target="org.apache.commons.io.FileCleaningTracker#trackers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4692" source="org.apache.commons.io.FileCleaningTracker$Reaper.run()" target="org.apache.commons.io.FileCleaningTracker#q">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4693" source="org.apache.commons.io.FileCleaningTracker$Reaper.run()" target="org.apache.commons.io.FileCleaningTracker#deleteFailures">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4694" source="org.apache.commons.io.FileCleaningTracker$Tracker#path" target="org.apache.commons.io.FileCleaningTracker$Tracker(java.lang.String,org.apache.commons.io.FileDeleteStrategy,java.lang.Object,java.lang.ref.ReferenceQueue)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4695" source="org.apache.commons.io.FileCleaningTracker$Tracker#deleteStrategy" target="org.apache.commons.io.FileCleaningTracker$Tracker(java.lang.String,org.apache.commons.io.FileDeleteStrategy,java.lang.Object,java.lang.ref.ReferenceQueue)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4696" source="org.apache.commons.io.FileCleaningTracker$Tracker(java.lang.String,org.apache.commons.io.FileDeleteStrategy,java.lang.Object,java.lang.ref.ReferenceQueue)" target="org.apache.commons.io.FileDeleteStrategy#NORMAL">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4697" source="org.apache.commons.io.FileCleaningTracker$Tracker.delete()" target="org.apache.commons.io.FileDeleteStrategy.deleteQuietly(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4698" source="org.apache.commons.io.FileCleaningTracker$Tracker.delete()" target="org.apache.commons.io.FileCleaningTracker$Tracker#deleteStrategy">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4699" source="org.apache.commons.io.FileCleaningTracker$Tracker.delete()" target="org.apache.commons.io.FileCleaningTracker$Tracker#path">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4700" source="org.apache.commons.io.FileCleaningTracker$Tracker.getPath()" target="org.apache.commons.io.FileCleaningTracker$Tracker#path">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4701" source="org.apache.commons.io.FileCleaningTracker.getTrackCount()" target="org.apache.commons.io.FileCleaningTracker#trackers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4702" source="org.apache.commons.io.FileCleaningTracker.getDeleteFailures()" target="org.apache.commons.io.FileCleaningTracker#deleteFailures">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4703" source="org.apache.commons.io.FileCleaningTracker.addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" target="org.apache.commons.io.FileCleaningTracker$Reaper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4704" source="org.apache.commons.io.FileCleaningTracker.addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" target="org.apache.commons.io.FileCleaningTracker$Tracker(java.lang.String,org.apache.commons.io.FileDeleteStrategy,java.lang.Object,java.lang.ref.ReferenceQueue)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4705" source="org.apache.commons.io.FileCleaningTracker.addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" target="org.apache.commons.io.FileCleaningTracker#exitWhenFinished">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4706" source="org.apache.commons.io.FileCleaningTracker.addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" target="org.apache.commons.io.FileCleaningTracker#reaper">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4707" source="org.apache.commons.io.FileCleaningTracker#reaper" target="org.apache.commons.io.FileCleaningTracker.addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4708" source="org.apache.commons.io.FileCleaningTracker.addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" target="org.apache.commons.io.FileCleaningTracker#trackers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4709" source="org.apache.commons.io.FileCleaningTracker.addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" target="org.apache.commons.io.FileCleaningTracker#q">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4710" source="org.apache.commons.io.FileCleaningTracker#exitWhenFinished" target="org.apache.commons.io.FileCleaningTracker.exitWhenFinished()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4711" source="org.apache.commons.io.FileCleaningTracker.exitWhenFinished()" target="org.apache.commons.io.FileCleaningTracker#reaper">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4712" source="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object)" target="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4713" source="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" target="org.apache.commons.io.FileCleaningTracker.addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4714" source="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object)" target="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4715" source="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)" target="org.apache.commons.io.FileCleaningTracker.addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4716" source="org.apache.commons.io.FileCleaningTrackerTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4717" source="org.apache.commons.io.FileCleaningTrackerTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4718" source="org.apache.commons.io.FileCleaningTrackerTestCase#testFile" target="org.apache.commons.io.FileCleaningTrackerTestCase(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4719" source="org.apache.commons.io.FileCleaningTrackerTestCase.showFailures()" target="org.apache.commons.io.FileCleaningTracker#deleteFailures">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4720" source="org.apache.commons.io.FileCleaningTrackerTestCase.showFailures()" target="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4721" source="org.apache.commons.io.FileCleaningTrackerTestCase.newInstance()" target="org.apache.commons.io.FileCleaningTracker()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4722" source="org.apache.commons.io.FileCleaningTrackerTestCase.setUp()" target="org.apache.commons.io.FileCleaningTrackerTestCase.newInstance()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4723" source="org.apache.commons.io.FileCleaningTrackerTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4724" source="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance" target="org.apache.commons.io.FileCleaningTrackerTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4725" source="org.apache.commons.io.FileCleaningTrackerTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4726" source="org.apache.commons.io.FileCleaningTrackerTestCase.tearDown()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4727" source="org.apache.commons.io.FileCleaningTrackerTestCase.tearDown()" target="org.apache.commons.io.FileCleaningTracker#q">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4728" source="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance" target="org.apache.commons.io.FileCleaningTrackerTestCase.tearDown()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4729" source="org.apache.commons.io.FileCleaningTrackerTestCase.tearDown()" target="org.apache.commons.io.FileCleaningTracker#trackers">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4730" source="org.apache.commons.io.FileCleaningTrackerTestCase.tearDown()" target="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4731" source="org.apache.commons.io.FileCleaningTrackerTestCase.tearDown()" target="org.apache.commons.io.FileCleaningTracker#deleteFailures">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4732" source="org.apache.commons.io.FileCleaningTrackerTestCase.tearDown()" target="org.apache.commons.io.FileCleaningTracker#exitWhenFinished">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4733" source="org.apache.commons.io.FileCleaningTrackerTestCase.tearDown()" target="org.apache.commons.io.FileCleaningTracker#reaper">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4734" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4735" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4736" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory()" target="org.apache.commons.io.FileCleaningTracker.getTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4737" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory()" target="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4738" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory()" target="org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4739" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory()" target="org.apache.commons.io.FileCleaningTrackerTestCase#testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4740" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory()" target="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4741" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_ForceStrategy()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4742" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_ForceStrategy()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4743" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_ForceStrategy()" target="org.apache.commons.io.FileCleaningTracker.getTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4744" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_ForceStrategy()" target="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4745" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_ForceStrategy()" target="org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4746" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_ForceStrategy()" target="org.apache.commons.io.FileCleaningTrackerTestCase.pauseForDeleteToComplete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4747" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_ForceStrategy()" target="org.apache.commons.io.FileCleaningTrackerTestCase.showFailures()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4748" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_ForceStrategy()" target="org.apache.commons.io.FileCleaningTrackerTestCase#testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4749" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_ForceStrategy()" target="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4750" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_ForceStrategy()" target="org.apache.commons.io.FileDeleteStrategy#FORCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4751" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_NullStrategy()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4752" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_NullStrategy()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4753" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_NullStrategy()" target="org.apache.commons.io.FileCleaningTracker.getTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4754" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_NullStrategy()" target="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4755" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_NullStrategy()" target="org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4756" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_NullStrategy()" target="org.apache.commons.io.FileCleaningTrackerTestCase#testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4757" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_NullStrategy()" target="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4758" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()" target="org.apache.commons.io.FileCleaningTracker.getTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4759" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()" target="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4760" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()" target="org.apache.commons.io.FileCleaningTracker.exitWhenFinished()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4761" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()" target="org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4762" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()" target="org.apache.commons.io.FileCleaningTrackerTestCase.pauseForDeleteToComplete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4763" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()" target="org.apache.commons.io.FileCleaningTrackerTestCase.showFailures()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4764" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()" target="org.apache.commons.io.FileCleaningTrackerTestCase#testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4765" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()" target="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4766" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()" target="org.apache.commons.io.FileCleaningTracker#exitWhenFinished">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4767" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()" target="org.apache.commons.io.FileCleaningTracker#reaper">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4768" source="org.apache.commons.io.FileCleaningTrackerTestCase#testFile" target="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4769" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()" target="org.apache.commons.io.FileCleaningTracker.getTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4770" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()" target="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4771" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()" target="org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4772" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()" target="org.apache.commons.io.FileCleaningTrackerTestCase.pauseForDeleteToComplete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4773" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()" target="org.apache.commons.io.FileCleaningTrackerTestCase.showFailures()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4774" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()" target="org.apache.commons.io.FileCleaningTracker.exitWhenFinished()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4775" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()" target="org.apache.commons.io.FileCleaningTrackerTestCase#testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4776" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()" target="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4777" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()" target="org.apache.commons.io.FileCleaningTracker#exitWhenFinished">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4778" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()" target="org.apache.commons.io.FileCleaningTracker#reaper">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4779" source="org.apache.commons.io.FileCleaningTrackerTestCase#testFile" target="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4780" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinishedFirst()" target="org.apache.commons.io.FileCleaningTracker.exitWhenFinished()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4781" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinishedFirst()" target="org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4782" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinishedFirst()" target="org.apache.commons.io.FileCleaningTracker.getTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4783" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinishedFirst()" target="org.apache.commons.io.FileCleaningTracker#exitWhenFinished">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4784" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinishedFirst()" target="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4785" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinishedFirst()" target="org.apache.commons.io.FileCleaningTracker#reaper">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4786" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished_NoTrackAfter()" target="org.apache.commons.io.FileCleaningTracker.exitWhenFinished()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4787" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished_NoTrackAfter()" target="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4788" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished_NoTrackAfter()" target="org.apache.commons.io.FileCleaningTracker#exitWhenFinished">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4789" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished_NoTrackAfter()" target="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4790" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished_NoTrackAfter()" target="org.apache.commons.io.FileCleaningTracker#reaper">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4791" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished_NoTrackAfter()" target="org.apache.commons.io.FileCleaningTrackerTestCase#testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4792" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerFile()" target="org.apache.commons.io.FileCleaningTracker.getTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4793" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerFile()" target="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4794" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerFile()" target="org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4795" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerFile()" target="org.apache.commons.io.FileCleaningTrackerTestCase.pauseForDeleteToComplete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4796" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerFile()" target="org.apache.commons.io.FileCleaningTrackerTestCase.showFailures()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4797" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerFile()" target="org.apache.commons.io.FileCleaningTrackerTestCase#testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4798" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerFile()" target="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4799" source="org.apache.commons.io.FileCleaningTrackerTestCase#testFile" target="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerFile()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4800" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerNull()" target="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4801" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerNull()" target="org.apache.commons.io.FileCleaningTracker.track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4802" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerNull()" target="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4803" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerNull()" target="org.apache.commons.io.FileCleaningTracker.track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4804" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerNull()" target="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4805" source="org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerNull()" target="org.apache.commons.io.FileDeleteStrategy#NORMAL">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4806" source="org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount()" target="org.apache.commons.io.FileCleaningTracker.getTrackCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4807" source="org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount()" target="org.apache.commons.io.FileCleaningTrackerTestCase#theInstance">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4808" source="org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy()" target="org.apache.commons.io.FileDeleteStrategy(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4809" source="org.apache.commons.io.FileDeleteStrategy.doDelete(java.io.File)" target="org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy.doDelete(java.io.File)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4810" source="org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy.doDelete(java.io.File)" target="org.apache.commons.io.FileUtils.forceDelete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4811" source="org.apache.commons.io.FileDeleteStrategy#NORMAL" target="org.apache.commons.io.FileDeleteStrategy(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4812" source="org.apache.commons.io.FileDeleteStrategy#FORCE" target="org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4813" source="org.apache.commons.io.FileDeleteStrategy#name" target="org.apache.commons.io.FileDeleteStrategy(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4814" source="org.apache.commons.io.FileDeleteStrategy.deleteQuietly(java.io.File)" target="org.apache.commons.io.FileDeleteStrategy.doDelete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4815" source="org.apache.commons.io.FileDeleteStrategy.toString()" target="org.apache.commons.io.FileDeleteStrategy#name">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4816" source="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)" target="org.apache.commons.io.FileDeleteStrategy.doDelete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4817" source="org.apache.commons.io.FileDeleteStrategyTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4818" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteForce()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4819" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteForce()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4820" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteForce()" target="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4821" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteForce()" target="org.apache.commons.io.FileDeleteStrategy#FORCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4822" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNormal()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4823" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNormal()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4824" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNormal()" target="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4825" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNormal()" target="org.apache.commons.io.FileDeleteStrategy#NORMAL">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4826" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNull()" target="org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4827" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNull()" target="org.apache.commons.io.FileDeleteStrategy.deleteQuietly(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4828" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNull()" target="org.apache.commons.io.FileDeleteStrategy#NORMAL">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4829" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteQuietlyNormal()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4830" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteQuietlyNormal()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4831" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteQuietlyNormal()" target="org.apache.commons.io.FileDeleteStrategy.deleteQuietly(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4832" source="org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteQuietlyNormal()" target="org.apache.commons.io.FileDeleteStrategy#NORMAL">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4833" source="org.apache.commons.io.FileDeleteStrategyTestCase.testToString()" target="org.apache.commons.io.FileDeleteStrategy.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4834" source="org.apache.commons.io.FileDeleteStrategyTestCase.testToString()" target="org.apache.commons.io.FileDeleteStrategy#NORMAL">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4835" source="org.apache.commons.io.FileDeleteStrategyTestCase.testToString()" target="org.apache.commons.io.FileDeleteStrategy#FORCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4836" source="org.apache.commons.io.FileSystemUtils#INSTANCE" target="org.apache.commons.io.FileSystemUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4837" source="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" target="org.apache.commons.io.ThreadMonitor.start(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4838" source="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" target="org.apache.commons.io.FileSystemUtils.openProcess(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4839" source="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" target="org.apache.commons.io.ThreadMonitor.stop(java.lang.Thread)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4840" source="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4841" source="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4842" source="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4843" source="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" target="java.util.Locale#ENGLISH">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4844" source="org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)" target="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4845" source="org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)" target="org.apache.commons.io.FileSystemUtils#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4846" source="org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)" target="org.apache.commons.io.FileSystemUtils#OS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4847" source="org.apache.commons.io.FileSystemUtils.freeSpaceKb()" target="org.apache.commons.io.FileSystemUtils.freeSpaceKb(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4848" source="org.apache.commons.io.FileSystemUtils.freeSpaceKb(java.lang.String)" target="org.apache.commons.io.FileSystemUtils.freeSpaceKb(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4849" source="org.apache.commons.io.FileSystemUtils.freeSpaceKb(java.lang.String,long)" target="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4850" source="org.apache.commons.io.FileSystemUtils.freeSpaceKb(java.lang.String,long)" target="org.apache.commons.io.FileSystemUtils#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4851" source="org.apache.commons.io.FileSystemUtils.freeSpaceKb(java.lang.String,long)" target="org.apache.commons.io.FileSystemUtils#OS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4852" source="org.apache.commons.io.FileSystemUtils.freeSpaceKb(long)" target="org.apache.commons.io.FileSystemUtils.freeSpaceKb(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4853" source="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" target="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4854" source="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4855" source="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" target="org.apache.commons.io.FileSystemUtils#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4856" source="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" target="org.apache.commons.io.FileUtils#ONE_KB">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4857" source="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" target="org.apache.commons.io.FileSystemUtils#UNIX">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4858" source="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" target="org.apache.commons.io.FileSystemUtils#POSIX_UNIX">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4859" source="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" target="org.apache.commons.io.FileSystemUtils#OTHER">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4860" source="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" target="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4861" source="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" target="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4862" source="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" target="org.apache.commons.io.FileSystemUtils#DF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4863" source="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" target="org.apache.commons.io.FilenameUtils.normalize(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4864" source="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" target="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4865" source="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" target="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4866" source="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4867" source="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" target="org.apache.commons.io.FileSystemUtils#DF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4868" source="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" target="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4869" source="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4870" source="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String,java.lang.String)" target="org.apache.commons.io.FileSystemUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4871" source="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils#exitCode" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4872" source="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils#bytes" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4873" source="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils#cmd" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String,java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e4874" source="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils$1.exitValue()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils#exitCode">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4875" source="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils$1.waitFor()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils#exitCode">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4876" source="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils$1.getInputStream()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils#bytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4877" source="org.apache.commons.io.FileSystemUtils.openProcess(java.lang.String[])" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils.openProcess(java.lang.String[])">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4878" source="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils.openProcess(java.lang.String[])" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4879" source="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils.openProcess(java.lang.String[])" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils#cmd">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4880" source="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils.openProcess(java.lang.String[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4881" source="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils.openProcess(java.lang.String[])" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils#exitCode">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4882" source="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils.openProcess(java.lang.String[])" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils#bytes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4883" source="org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4884" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()" target="org.apache.commons.io.FileSystemUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4885" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()" target="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4886" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()" target="org.apache.commons.io.FileSystemUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4887" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()" target="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4888" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()" target="org.apache.commons.io.FileSystemUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4889" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()" target="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4890" source="org.apache.commons.io.FileSystemUtilsTestCase$2()" target="org.apache.commons.io.FileSystemUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4891" source="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" target="org.apache.commons.io.FileSystemUtilsTestCase$2.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4892" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()" target="org.apache.commons.io.FileSystemUtilsTestCase$2()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4893" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()" target="org.apache.commons.io.FileSystemUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4894" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()" target="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4895" source="org.apache.commons.io.FileSystemUtilsTestCase$1()" target="org.apache.commons.io.FileSystemUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4896" source="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" target="org.apache.commons.io.FileSystemUtilsTestCase$1.freeSpaceWindows(java.lang.String,long)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e4897" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4898" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()" target="org.apache.commons.io.FileSystemUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4899" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()" target="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4900" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4901" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4902" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4903" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4904" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4905" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4906" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4907" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4908" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4909" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4910" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4911" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4912" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4913" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4914" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponseKb()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4915" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponseKb()" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4916" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseFreeBSD()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4917" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseFreeBSD()" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4918" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4919" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD()" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4920" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbLinux()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4921" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbLinux()" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4922" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbSolaris()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4923" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbSolaris()" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4924" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseLinux()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4925" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseLinux()" target="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4926" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyMultiLineResponse()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4927" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyMultiLineResponse()" target="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4928" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4929" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()" target="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4930" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4931" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()" target="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4932" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_InvalidTextResponse()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4933" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_InvalidTextResponse()" target="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4934" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NoSuchDirectoryResponse()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4935" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NoSuchDirectoryResponse()" target="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4936" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4937" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()" target="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4938" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4939" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes()" target="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4940" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4941" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()" target="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4942" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_quoted()" target="org.apache.commons.io.FileSystemUtilsTestCase$MockFileSystemUtils(int,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4943" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_quoted()" target="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4944" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4945" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()" target="org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4946" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()" target="org.apache.commons.io.FileSystemUtils.freeSpaceKb(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4947" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()" target="java.io.File#separatorChar">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4948" source="org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()" target="java.util.Locale#ENGLISH">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4949" source="org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)" target="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4950" source="org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4951" source="org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)" target="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4952" source="org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4953" source="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)" target="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4954" source="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)" target="org.apache.commons.io.FilenameUtils.directoryContains(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4955" source="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)" target="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4956" source="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)" target="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4957" source="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)" target="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4958" source="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.util.Date)" target="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4959" source="org.apache.commons.io.FileUtils.isSymlink(java.io.File)" target="org.apache.commons.io.FilenameUtils.isSystemWindows()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4960" source="org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)" target="org.apache.commons.io.FileUtils.openInputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4961" source="org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4962" source="org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4963" source="org.apache.commons.io.FileUtils.getTempDirectory()" target="org.apache.commons.io.FileUtils.getTempDirectoryPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4964" source="org.apache.commons.io.FileUtils.getUserDirectory()" target="org.apache.commons.io.FileUtils.getUserDirectoryPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4965" source="org.apache.commons.io.FileUtils.toFile(java.net.URL)" target="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4966" source="org.apache.commons.io.FileUtils.toFile(java.net.URL)" target="java.io.File#separatorChar">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4967" source="org.apache.commons.io.FileUtils.openOutputStream(java.io.File)" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4968" source="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" target="org.apache.commons.io.FileUtils.toFile(java.net.URL)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4969" source="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4970" source="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" target="org.apache.commons.io.FileUtils#EMPTY_FILE_ARRAY">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4971" source="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" target="org.apache.commons.io.FileUtils#ONE_EB_BI">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4972" source="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" target="java.math.BigInteger#ZERO">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4973" source="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" target="org.apache.commons.io.FileUtils#ONE_PB_BI">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4974" source="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" target="org.apache.commons.io.FileUtils#ONE_TB_BI">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4975" source="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" target="org.apache.commons.io.FileUtils#ONE_GB_BI">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4976" source="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" target="org.apache.commons.io.FileUtils#ONE_MB_BI">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4977" source="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" target="org.apache.commons.io.FileUtils#ONE_KB_BI">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4978" source="org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)" target="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4979" source="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4980" source="org.apache.commons.io.FileUtils.readFileToString(java.io.File)" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4981" source="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4982" source="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4983" source="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.nio.charset.Charset)" target="org.apache.commons.io.FileUtils.openInputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4984" source="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4985" source="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4986" source="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4987" source="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4988" source="org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)" target="org.apache.commons.io.FileUtils.sizeOfDirectoryBig0(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4989" source="org.apache.commons.io.FileUtils.sizeOfBig0(java.io.File)" target="org.apache.commons.io.FileUtils.sizeOfDirectoryBig0(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4990" source="org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(java.io.File)" target="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4991" source="org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(java.io.File)" target="org.apache.commons.io.FileUtils.sizeOfDirectoryBig0(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4992" source="org.apache.commons.io.FileUtils.sizeOfDirectoryBig0(java.io.File)" target="org.apache.commons.io.FileUtils.isSymlink(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4993" source="org.apache.commons.io.FileUtils.sizeOfDirectoryBig0(java.io.File)" target="org.apache.commons.io.FileUtils.sizeOfBig0(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4994" source="org.apache.commons.io.FileUtils.sizeOfDirectoryBig0(java.io.File)" target="java.math.BigInteger#ZERO">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4995" source="org.apache.commons.io.FileUtils.toURLs(java.io.File[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e4996" source="org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)" target="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4997" source="org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)" target="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4998" source="org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)" target="org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4999" source="org.apache.commons.io.filefilter.TrueFileFilter#INSTANCE" target="org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5000" source="org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)" target="org.apache.commons.io.filefilter.TrueFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5001" source="org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)" target="org.apache.commons.io.filefilter.FalseFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5002" source="org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5003" source="org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.FileUtils.setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5004" source="org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5005" source="org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5006" source="org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5007" source="org.apache.commons.io.FileUtils.listFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.FileUtils.validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5008" source="org.apache.commons.io.FileUtils.listFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.FileUtils.setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5009" source="org.apache.commons.io.FileUtils.listFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5010" source="org.apache.commons.io.FileUtils.listFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5011" source="org.apache.commons.io.FileUtils.listFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5012" source="org.apache.commons.io.FileUtils.iterateFiles(java.io.File,java.lang.String[],boolean)" target="org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5013" source="org.apache.commons.io.FileUtils.iterateFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5014" source="org.apache.commons.io.FileUtils.iterateFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.FileUtils.listFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5015" source="org.apache.commons.io.FileUtils.readLines(java.io.File)" target="org.apache.commons.io.FileUtils.readLines(java.io.File,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5016" source="org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)" target="org.apache.commons.io.FileUtils.readLines(java.io.File,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5017" source="org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5018" source="org.apache.commons.io.FileUtils.readLines(java.io.File,java.nio.charset.Charset)" target="org.apache.commons.io.FileUtils.openInputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5019" source="org.apache.commons.io.FileUtils.readLines(java.io.File,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5020" source="org.apache.commons.io.FileUtils.readLines(java.io.File,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5021" source="org.apache.commons.io.FileUtils.readLines(java.io.File,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5022" source="org.apache.commons.io.FileUtils.checksum(java.io.File,java.util.zip.Checksum)" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5023" source="org.apache.commons.io.FileUtils.checksum(java.io.File,java.util.zip.Checksum)" target="org.apache.commons.io.output.NullOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5024" source="org.apache.commons.io.FileUtils.checksum(java.io.File,java.util.zip.Checksum)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5025" source="org.apache.commons.io.FileUtils.checksumCRC32(java.io.File)" target="org.apache.commons.io.FileUtils.checksum(java.io.File,java.util.zip.Checksum)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5026" source="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.OutputStream)" target="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5027" source="org.apache.commons.io.FileUtils.sizeOf(java.io.File)" target="org.apache.commons.io.FileUtils.sizeOfDirectory0(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5028" source="org.apache.commons.io.FileUtils.sizeOf0(java.io.File)" target="org.apache.commons.io.FileUtils.sizeOfDirectory0(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5029" source="org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)" target="org.apache.commons.io.FileUtils.checkDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5030" source="org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)" target="org.apache.commons.io.FileUtils.sizeOfDirectory0(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5031" source="org.apache.commons.io.FileUtils.sizeOfDirectory0(java.io.File)" target="org.apache.commons.io.FileUtils.isSymlink(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5032" source="org.apache.commons.io.FileUtils.sizeOfDirectory0(java.io.File)" target="org.apache.commons.io.FileUtils.sizeOf0(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5033" source="org.apache.commons.io.FileUtils.lineIterator(java.io.File)" target="org.apache.commons.io.FileUtils.lineIterator(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5034" source="org.apache.commons.io.FileUtils.lineIterator(java.io.File,java.lang.String)" target="org.apache.commons.io.FileUtils.openInputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5035" source="org.apache.commons.io.FileUtils.lineIterator(java.io.File,java.lang.String)" target="org.apache.commons.io.IOUtils.lineIterator(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5036" source="org.apache.commons.io.FileUtils.lineIterator(java.io.File,java.lang.String)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5037" source="org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.FileFilterUtils.and(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5038" source="org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.FalseFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5039" source="org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.DirectoryFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5040" source="org.apache.commons.io.FileUtils.setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.FileFilterUtils.and(org.apache.commons.io.filefilter.IOFileFilter[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5041" source="org.apache.commons.io.FileUtils.setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5042" source="org.apache.commons.io.FileUtils.setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter)" target="org.apache.commons.io.filefilter.DirectoryFileFilter#INSTANCE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5043" source="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)" target="org.apache.commons.io.FileUtils.forceDelete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5044" source="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)" target="org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5045" source="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)" target="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5046" source="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)" target="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5047" source="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter)" target="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5048" source="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" target="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5049" source="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5050" source="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)" target="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5051" source="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)" target="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5052" source="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)" target="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5053" source="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)" target="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5054" source="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File,boolean)" target="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5055" source="org.apache.commons.io.FileUtils.copyInputStreamToFile(java.io.InputStream,java.io.File)" target="org.apache.commons.io.FileUtils.copyToFile(java.io.InputStream,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5056" source="org.apache.commons.io.FileUtils.copyInputStreamToFile(java.io.InputStream,java.io.File)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5057" source="org.apache.commons.io.FileUtils.copyToFile(java.io.InputStream,java.io.File)" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5058" source="org.apache.commons.io.FileUtils.copyToFile(java.io.InputStream,java.io.File)" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5059" source="org.apache.commons.io.FileUtils.copyToFile(java.io.InputStream,java.io.File)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5060" source="org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)" target="org.apache.commons.io.FileUtils.copyInputStreamToFile(java.io.InputStream,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5061" source="org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File,int,int)" target="org.apache.commons.io.FileUtils.copyInputStreamToFile(java.io.InputStream,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5062" source="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" target="org.apache.commons.io.FileUtils.isSymlink(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5063" source="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)" target="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5064" source="org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)" target="org.apache.commons.io.FileUtils.isSymlink(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5065" source="org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)" target="org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5066" source="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" target="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5067" source="org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)" target="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5068" source="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5069" source="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" target="org.apache.commons.io.FileUtils#FILE_COPY_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5070" source="org.apache.commons.io.FileUtils.forceDelete(java.io.File)" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5071" source="org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)" target="org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5072" source="org.apache.commons.io.FileUtils.forceMkdirParent(java.io.File)" target="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5073" source="org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter,boolean)" target="org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5074" source="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" target="org.apache.commons.io.FileExistsException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5075" source="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" target="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5076" source="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5077" source="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)" target="java.io.File#separator">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5078" source="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)" target="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5079" source="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" target="org.apache.commons.io.FileExistsException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5080" source="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" target="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5081" source="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)" target="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5082" source="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)" target="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5083" source="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" target="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5084" source="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)" target="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5085" source="org.apache.commons.io.FileUtils.touch(java.io.File)" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5086" source="org.apache.commons.io.FileUtils.touch(java.io.File)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5087" source="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence)" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5088" source="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,boolean)" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5089" source="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.lang.String)" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5090" source="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5091" source="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5092" source="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset)" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5093" source="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5094" source="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])" target="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5095" source="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],boolean)" target="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],int,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5096" source="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],boolean)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5097" source="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],int,int)" target="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],int,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5098" source="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],int,int,boolean)" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5099" source="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],int,int,boolean)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5100" source="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5101" source="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,boolean)" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5102" source="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5103" source="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5104" source="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5105" source="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5106" source="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.util.Collection)" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5107" source="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.util.Collection,boolean)" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5108" source="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.util.Collection,java.lang.String)" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5109" source="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.util.Collection,java.lang.String,boolean)" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5110" source="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5111" source="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,boolean)" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5112" source="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5113" source="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5114" source="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5115" source="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset)" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5116" source="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5117" source="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5118" source="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5119" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase#top" target="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.getLocalTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5120" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5121" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.getLocalTestDirectory()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5122" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.setUp()" target="org.apache.commons.io.FileUtilsCleanDirectoryTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5123" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()" target="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5124" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5125" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()" target="org.apache.commons.io.FileUtilsCleanDirectoryTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5126" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()" target="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5127" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5128" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()" target="org.apache.commons.io.FileUtilsCleanDirectoryTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5129" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()" target="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5130" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()" target="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5131" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()" target="org.apache.commons.io.FileUtilsCleanDirectoryTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5132" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5133" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()" target="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5134" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()" target="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5135" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()" target="org.apache.commons.io.FileUtilsCleanDirectoryTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5136" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5137" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()" target="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5138" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()" target="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5139" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()" target="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5140" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()" target="org.apache.commons.io.FileUtilsCleanDirectoryTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5141" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()" target="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5142" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()" target="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5143" source="org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()" target="org.apache.commons.io.FileUtilsCleanDirectoryTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5144" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase#top" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5145" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5146" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setUp()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5147" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5148" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.tearDown()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5149" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithASymlinkDir()" target="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5150" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithASymlinkDir()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setupSymlink(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5151" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithASymlinkDir()" target="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5152" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithASymlinkDir()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5153" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithASymlinkDir()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5154" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithParentSymlinks()" target="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5155" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithParentSymlinks()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setupSymlink(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5156" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithParentSymlinks()" target="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5157" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithParentSymlinks()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5158" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithParentSymlinks()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5159" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithSymlinkFile()" target="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5160" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithSymlinkFile()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setupSymlink(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5161" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithSymlinkFile()" target="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5162" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithSymlinkFile()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5163" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithSymlinkFile()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5164" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCorrectlyIdentifySymlinkWithParentSymLink()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setupSymlink(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5165" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCorrectlyIdentifySymlinkWithParentSymLink()" target="org.apache.commons.io.FileUtils.isSymlink(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5166" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCorrectlyIdentifySymlinkWithParentSymLink()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5167" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkDir()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setupSymlink(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5168" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkDir()" target="org.apache.commons.io.FileUtils.isSymlink(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5169" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkDir()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5170" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkFile()" target="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5171" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkFile()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setupSymlink(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5172" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkFile()" target="org.apache.commons.io.FileUtils.isSymlink(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5173" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkFile()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5174" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testStillClearsIfGivenDirectoryIsASymlink()" target="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5175" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testStillClearsIfGivenDirectoryIsASymlink()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setupSymlink(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5176" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testStillClearsIfGivenDirectoryIsASymlink()" target="org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5177" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testStillClearsIfGivenDirectoryIsASymlink()" target="org.apache.commons.io.FileUtilsCleanSymlinksTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5178" source="org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testStillClearsIfGivenDirectoryIsASymlink()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5179" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#top" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5180" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5181" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5182" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()" target="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5183" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5184" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory1" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5185" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory2" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5186" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory3" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5187" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5188" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5189" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5190" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file1" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5191" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file2" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5192" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file3" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5193" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file1ByRelativeDirectory2" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5194" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file2ByRelativeDirectory1" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5195" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5196" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5197" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5198" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5199" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.tearDown()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5200" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testCanonicalPath()" target="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5201" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testCanonicalPath()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5202" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testCanonicalPath()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file1ByRelativeDirectory2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5203" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testCanonicalPath()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5204" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testCanonicalPath()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file2ByRelativeDirectory1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5205" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsDirectory()" target="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5206" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsDirectory()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5207" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsDirectory()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5208" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsDirectory()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5209" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsDirectory()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5210" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsFile()" target="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5211" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsFile()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5212" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsFile()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5213" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsFile()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5214" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsFile()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5215" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainFile()" target="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5216" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainFile()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5217" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainFile()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5218" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainFile()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5219" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainFile()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5220" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainFile()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5221" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainsDirectory()" target="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5222" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainsDirectory()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5223" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainsDirectory()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5224" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainsDirectory()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5225" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainsDirectory()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#directory3">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5226" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotExist()" target="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5227" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotExist()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5228" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotExist()" target="java.lang.IllegalArgumentException#class">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5229" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testFileDoesNotExist()" target="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5230" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testFileDoesNotExist()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5231" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testFileDoesNotExistBug()" target="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5232" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testFileDoesNotExistBug()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#top">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5233" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testSameFile()" target="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5234" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testSameFile()" target="org.apache.commons.io.FileUtilsDirectoryContainsTestCase#file1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5235" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testSameFile()" target="java.lang.IllegalArgumentException#class">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5236" source="org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testUnrealizedContainment()" target="org.apache.commons.io.FileUtils.directoryContains(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5237" source="org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5238" source="org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5239" source="org.apache.commons.io.FileUtilsFileNewerTestCase#m_testFile1" target="org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5240" source="org.apache.commons.io.FileUtilsFileNewerTestCase#m_testFile2" target="org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5241" source="org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5242" source="org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5243" source="org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()" target="org.apache.commons.io.FileUtilsFileNewerTestCase#m_testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5244" source="org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()" target="org.apache.commons.io.FileUtilsFileNewerTestCase#FILE1_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5245" source="org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()" target="org.apache.commons.io.FileUtilsFileNewerTestCase#m_testFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5246" source="org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()" target="org.apache.commons.io.FileUtilsFileNewerTestCase#FILE2_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5247" source="org.apache.commons.io.FileUtilsFileNewerTestCase.tearDown()" target="org.apache.commons.io.FileUtilsFileNewerTestCase#m_testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5248" source="org.apache.commons.io.FileUtilsFileNewerTestCase.tearDown()" target="org.apache.commons.io.FileUtilsFileNewerTestCase#m_testFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5249" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer()" target="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5250" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer()" target="org.apache.commons.io.FileUtilsFileNewerTestCase#m_testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5251" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)" target="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5252" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)" target="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5253" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)" target="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5254" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)" target="org.apache.commons.io.FileUtilsFileNewerTestCase#m_testFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5255" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5256" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()" target="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5257" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()" target="org.apache.commons.io.FileUtilsFileNewerTestCase#m_testFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5258" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()" target="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5259" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()" target="org.apache.commons.io.FileUtilsFileNewerTestCase#m_testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5260" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFile()" target="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5261" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()" target="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5262" source="org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()" target="org.apache.commons.io.FileUtilsFileNewerTestCase#m_testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5263" source="org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5264" source="org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5265" source="org.apache.commons.io.FileUtilsListFilesTestCase.setUp()" target="org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5266" source="org.apache.commons.io.FileUtilsListFilesTestCase.setUp()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5267" source="org.apache.commons.io.FileUtilsListFilesTestCase.setUp()" target="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5268" source="org.apache.commons.io.FileUtilsListFilesTestCase.tearDown()" target="org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5269" source="org.apache.commons.io.FileUtilsListFilesTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5270" source="org.apache.commons.io.FileUtilsListFilesTestCase.testIterateFilesByExtension()" target="org.apache.commons.io.FileUtils.iterateFiles(java.io.File,java.lang.String[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5271" source="org.apache.commons.io.FileUtilsListFilesTestCase.testIterateFilesByExtension()" target="org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5272" source="org.apache.commons.io.FileUtilsListFilesTestCase.testIterateFilesByExtension()" target="org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Iterator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5273" source="org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()" target="org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5274" source="org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()" target="org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5275" source="org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()" target="org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5276" source="org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()" target="org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5277" source="org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()" target="org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5278" source="org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()" target="org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5279" source="org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()" target="org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5280" source="org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()" target="org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5281" source="org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()" target="org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5282" source="org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()" target="org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5283" source="org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()" target="org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5284" source="org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker()" target="org.apache.commons.io.DirectoryWalker()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5285" source="org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker.list(java.io.File)" target="org.apache.commons.io.DirectoryWalker.walk(java.io.File,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5286" source="org.apache.commons.io.DirectoryWalker.handleDirectoryStart(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker.handleDirectoryStart(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e5287" source="org.apache.commons.io.DirectoryWalker.handleFile(java.io.File,int,java.util.Collection)" target="org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker.handleFile(java.io.File,int,java.util.Collection)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e5288" source="org.apache.commons.io.FileUtilsTestCase#LIST_WALKER" target="org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5289" source="org.apache.commons.io.FileUtilsTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5290" source="org.apache.commons.io.FileUtilsTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5291" source="org.apache.commons.io.FileUtilsTestCase#testFile1" target="org.apache.commons.io.FileUtilsTestCase(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5292" source="org.apache.commons.io.FileUtilsTestCase#testFile2" target="org.apache.commons.io.FileUtilsTestCase(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5293" source="org.apache.commons.io.FileUtilsTestCase#testFile1Size" target="org.apache.commons.io.FileUtilsTestCase(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5294" source="org.apache.commons.io.FileUtilsTestCase(java.lang.String)" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5295" source="org.apache.commons.io.FileUtilsTestCase#testFile2Size" target="org.apache.commons.io.FileUtilsTestCase(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5296" source="org.apache.commons.io.FileUtilsTestCase(java.lang.String)" target="org.apache.commons.io.FileUtilsTestCase#testFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5297" source="org.apache.commons.io.FileUtilsTestCase.IGNOREtestCopyFileLarge()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5298" source="org.apache.commons.io.FileUtilsTestCase.IGNOREtestCopyFileLarge()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5299" source="org.apache.commons.io.FileUtilsTestCase.IGNOREtestCopyFileLarge()" target="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5300" source="org.apache.commons.io.FileUtilsTestCase.IGNOREtestCopyFileLarge()" target="java.lang.System#out">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5301" source="org.apache.commons.io.FileUtilsTestCase.IGNOREtestCopyFileLarge()" target="org.apache.commons.io.FileUtils#ONE_GB">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5302" source="org.apache.commons.io.FileUtilsTestCase.createCircularSymLink(java.io.File)" target="org.apache.commons.io.FilenameUtils.isSystemWindows()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5303" source="org.apache.commons.io.FileUtilsTestCase.createFilesForTestCopyDirectory(java.io.File,java.io.File,java.io.File)" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5304" source="org.apache.commons.io.FileUtilsTestCase.createFilesForTestCopyDirectory(java.io.File,java.io.File,java.io.File)" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5305" source="org.apache.commons.io.FileUtilsTestCase.openOutputStream_noParent(boolean)" target="org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5306" source="org.apache.commons.io.FileUtilsTestCase.openOutputStream_noParent(boolean)" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5307" source="org.apache.commons.io.FileUtilsTestCase.openOutputStream_noParent(boolean)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5308" source="org.apache.commons.io.FileUtilsTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5309" source="org.apache.commons.io.FileUtilsTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5310" source="org.apache.commons.io.FileUtilsTestCase.setUp()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5311" source="org.apache.commons.io.FileUtilsTestCase.setUp()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5312" source="org.apache.commons.io.FileUtilsTestCase.setUp()" target="org.apache.commons.io.FileUtilsTestCase#testFile1Size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5313" source="org.apache.commons.io.FileUtilsTestCase.setUp()" target="org.apache.commons.io.FileUtilsTestCase#testFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5314" source="org.apache.commons.io.FileUtilsTestCase.setUp()" target="org.apache.commons.io.FileUtilsTestCase#testFile2Size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5315" source="org.apache.commons.io.FileUtilsTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5316" source="org.apache.commons.io.FileUtilsTestCase.tearDown()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5317" source="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()" target="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5318" source="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()" target="org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5319" source="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()" target="java.math.BigInteger#ZERO">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5320" source="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()" target="java.math.BigInteger#ONE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5321" source="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()" target="java.lang.Long#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5322" source="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()" target="java.lang.Character#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5323" source="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()" target="java.lang.Short#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5324" source="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5325" source="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeLong()" target="org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5326" source="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeLong()" target="java.lang.Long#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5327" source="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeLong()" target="java.lang.Character#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5328" source="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeLong()" target="java.lang.Short#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5329" source="org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeLong()" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5330" source="org.apache.commons.io.FileUtilsTestCase.testChecksum()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5331" source="org.apache.commons.io.FileUtilsTestCase.testChecksum()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5332" source="org.apache.commons.io.FileUtilsTestCase.testChecksum()" target="org.apache.commons.io.FileUtils.checksum(java.io.File,java.util.zip.Checksum)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5333" source="org.apache.commons.io.FileUtilsTestCase.testChecksumCRC32()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5334" source="org.apache.commons.io.FileUtilsTestCase.testChecksumCRC32()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5335" source="org.apache.commons.io.FileUtilsTestCase.testChecksumCRC32()" target="org.apache.commons.io.FileUtils.checksumCRC32(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5336" source="org.apache.commons.io.FileUtilsTestCase.testChecksumDouble()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5337" source="org.apache.commons.io.FileUtilsTestCase.testChecksumDouble()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5338" source="org.apache.commons.io.FileUtilsTestCase.testChecksumDouble()" target="org.apache.commons.io.FileUtils.checksum(java.io.File,java.util.zip.Checksum)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5339" source="org.apache.commons.io.FileUtilsTestCase.testChecksumOnDirectory()" target="org.apache.commons.io.FileUtils.checksum(java.io.File,java.util.zip.Checksum)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5340" source="org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullChecksum()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5341" source="org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullChecksum()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5342" source="org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullChecksum()" target="org.apache.commons.io.FileUtils.checksum(java.io.File,java.util.zip.Checksum)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5343" source="org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullFile()" target="org.apache.commons.io.FileUtils.checksum(java.io.File,java.util.zip.Checksum)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5344" source="org.apache.commons.io.FileUtilsTestCase.testCompareSizeOf()" target="org.apache.commons.io.FileUtils.sizeOf(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5345" source="org.apache.commons.io.FileUtilsTestCase.testCompareSizeOf()" target="org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5346" source="org.apache.commons.io.FileUtilsTestCase.testContentEquals()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5347" source="org.apache.commons.io.FileUtilsTestCase.testContentEquals()" target="org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5348" source="org.apache.commons.io.FileUtilsTestCase.testContentEquals()" target="org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5349" source="org.apache.commons.io.FileUtilsTestCase.testContentEqualsIgnoreEOL()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5350" source="org.apache.commons.io.FileUtilsTestCase.testContentEqualsIgnoreEOL()" target="org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5351" source="org.apache.commons.io.FileUtilsTestCase.testContentEqualsIgnoreEOL()" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5352" source="org.apache.commons.io.FileUtilsTestCase.testContentEqualsIgnoreEOL()" target="org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5353" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()" target="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5354" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5355" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5356" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryFiltered()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5357" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryFiltered()" target="org.apache.commons.io.FileUtilsTestCase.createFilesForTestCopyDirectory(java.io.File,java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5358" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryFiltered()" target="org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5359" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryFiltered()" target="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,java.io.FileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5360" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryFiltered()" target="org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker.list(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5361" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryFiltered()" target="org.apache.commons.io.FileUtilsTestCase#LIST_WALKER">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5362" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryPreserveDates()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5363" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryPreserveDates()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5364" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryPreserveDates()" target="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5365" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryPreserveDates()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5366" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToChild()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5367" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToChild()" target="org.apache.commons.io.FileUtilsTestCase.createFilesForTestCopyDirectory(java.io.File,java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5368" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToChild()" target="org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker.list(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5369" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToChild()" target="org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5370" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToChild()" target="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5371" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToChild()" target="org.apache.commons.io.FileUtilsTestCase#LIST_WALKER">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5372" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5373" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5374" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5375" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5376" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()" target="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5377" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()" target="org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5378" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5379" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()" target="org.apache.commons.io.FileUtilsTestCase#testFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5380" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5381" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5382" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5383" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5384" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()" target="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5385" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()" target="org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5386" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5387" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()" target="org.apache.commons.io.FileUtilsTestCase#testFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5388" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToGrandChild()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5389" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToGrandChild()" target="org.apache.commons.io.FileUtilsTestCase.createFilesForTestCopyDirectory(java.io.File,java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5390" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToGrandChild()" target="org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker.list(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5391" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToGrandChild()" target="org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5392" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToGrandChild()" target="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5393" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToGrandChild()" target="org.apache.commons.io.FileUtilsTestCase#LIST_WALKER">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5394" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToItself()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5395" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToItself()" target="org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5396" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToItself()" target="org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker.list(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5397" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToItself()" target="org.apache.commons.io.FileUtilsTestCase#LIST_WALKER">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5398" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5399" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5400" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5401" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5402" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()" target="org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5403" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()" target="org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5404" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5405" source="org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()" target="org.apache.commons.io.FileUtilsTestCase#testFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5406" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile1()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5407" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile1()" target="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5408" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile1()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5409" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile1()" target="org.apache.commons.io.FileUtilsTestCase#testFile1Size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5410" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5411" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()" target="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5412" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5413" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()" target="org.apache.commons.io.FileUtilsTestCase#testFile1Size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5414" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile2()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5415" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile2()" target="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5416" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile2()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5417" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile2()" target="org.apache.commons.io.FileUtilsTestCase#testFile2Size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5418" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5419" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()" target="org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5420" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5421" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()" target="org.apache.commons.io.FileUtilsTestCase#testFile2Size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5422" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5423" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()" target="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5424" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5425" source="org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()" target="org.apache.commons.io.FileUtilsTestCase#testFile2Size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5426" source="org.apache.commons.io.FileUtilsTestCase.testCopyFileToOutputStream()" target="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5427" source="org.apache.commons.io.FileUtilsTestCase.testCopyFileToOutputStream()" target="org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5428" source="org.apache.commons.io.FileUtilsTestCase.testCopyFileToOutputStream()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5429" source="org.apache.commons.io.FileUtilsTestCase.testCopyFileToOutputStream()" target="org.apache.commons.io.FileUtilsTestCase#testFile1Size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5430" source="org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5431" source="org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()" target="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5432" source="org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5433" source="org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5434" source="org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()" target="org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5435" source="org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()" target="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5436" source="org.apache.commons.io.FileUtilsTestCase.testCopyURLToFileWithTimeout()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5437" source="org.apache.commons.io.FileUtilsTestCase.testCopyURLToFileWithTimeout()" target="org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5438" source="org.apache.commons.io.FileUtilsTestCase.testCopyURLToFileWithTimeout()" target="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5439" source="org.apache.commons.io.FileUtilsTestCase.testDecodeUrl()" target="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5440" source="org.apache.commons.io.FileUtilsTestCase.testDecodeUrlEncodingUtf8()" target="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5441" source="org.apache.commons.io.FileUtilsTestCase.testDecodeUrlLenient()" target="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5442" source="org.apache.commons.io.FileUtilsTestCase.testDecodeUrlNullSafe()" target="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5443" source="org.apache.commons.io.FileUtilsTestCase.testDeleteDirectoryWithNonDirectory()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5444" source="org.apache.commons.io.FileUtilsTestCase.testDeleteDirectoryWithNonDirectory()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5445" source="org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyDir()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5446" source="org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyDir()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5447" source="org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyDir()" target="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5448" source="org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyFile()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5449" source="org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyFile()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5450" source="org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyFile()" target="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5451" source="org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyForNull()" target="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5452" source="org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyNonExistent()" target="org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5453" source="org.apache.commons.io.FileUtilsTestCase.testFileUtils()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5454" source="org.apache.commons.io.FileUtilsTestCase.testFileUtils()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5455" source="org.apache.commons.io.FileUtilsTestCase.testFileUtils()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5456" source="org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5457" source="org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()" target="org.apache.commons.io.FileUtils.forceDelete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5458" source="org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5459" source="org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()" target="org.apache.commons.io.FileUtils.forceDelete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5460" source="org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile3()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5461" source="org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile3()" target="org.apache.commons.io.FileUtils.forceDelete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5462" source="org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5463" source="org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()" target="org.apache.commons.io.FileUtils.forceDelete(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5464" source="org.apache.commons.io.FileUtilsTestCase.testForceMkdir()" target="org.apache.commons.io.FileUtils.forceMkdir(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5465" source="org.apache.commons.io.FileUtilsTestCase.testForceMkdir()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5466" source="org.apache.commons.io.FileUtilsTestCase.testForceMkdirParent()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5467" source="org.apache.commons.io.FileUtilsTestCase.testForceMkdirParent()" target="org.apache.commons.io.FileUtils.forceMkdirParent(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5468" source="org.apache.commons.io.FileUtilsTestCase.testGetFile()" target="org.apache.commons.io.FileUtils.getFile(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5469" source="org.apache.commons.io.FileUtilsTestCase.testGetFile_Parent()" target="org.apache.commons.io.FileUtils.getFile(java.io.File,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5470" source="org.apache.commons.io.FileUtilsTestCase.testGetTempDirectory()" target="org.apache.commons.io.FileUtils.getTempDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5471" source="org.apache.commons.io.FileUtilsTestCase.testGetTempDirectoryPath()" target="org.apache.commons.io.FileUtils.getTempDirectoryPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5472" source="org.apache.commons.io.FileUtilsTestCase.testGetUserDirectory()" target="org.apache.commons.io.FileUtils.getUserDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5473" source="org.apache.commons.io.FileUtilsTestCase.testGetUserDirectoryPath()" target="org.apache.commons.io.FileUtils.getUserDirectoryPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5474" source="org.apache.commons.io.FileUtilsTestCase.testIO276()" target="org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5475" source="org.apache.commons.io.FileUtilsTestCase.testIO300()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5476" source="org.apache.commons.io.FileUtilsTestCase.testIO300()" target="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5477" source="org.apache.commons.io.FileUtilsTestCase.testIncorrectOutputSize()" target="org.apache.commons.io.FileUtilsTestCase$ShorterFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5478" source="org.apache.commons.io.FileUtilsTestCase.testIncorrectOutputSize()" target="org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5479" source="org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5480" source="org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5481" source="org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()" target="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5482" source="org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()" target="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5483" source="org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()" target="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5484" source="org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()" target="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5485" source="org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()" target="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,java.util.Date)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5486" source="org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()" target="org.apache.commons.io.FileUtils.isFileOlder(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5487" source="org.apache.commons.io.FileUtilsTestCase.testIterateFiles()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5488" source="org.apache.commons.io.FileUtilsTestCase.testIterateFiles()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5489" source="org.apache.commons.io.FileUtilsTestCase.testIterateFiles()" target="org.apache.commons.io.FileUtils.iterateFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5490" source="org.apache.commons.io.FileUtilsTestCase.testIterateFiles()" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5491" source="org.apache.commons.io.FileUtilsTestCase.testIterateFiles()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5492" source="org.apache.commons.io.FileUtilsTestCase.testIterateFilesAndDirs()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5493" source="org.apache.commons.io.FileUtilsTestCase.testIterateFilesAndDirs()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5494" source="org.apache.commons.io.FileUtilsTestCase.testIterateFilesAndDirs()" target="org.apache.commons.io.FileUtils.iterateFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5495" source="org.apache.commons.io.FileUtilsTestCase.testIterateFilesAndDirs()" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5496" source="org.apache.commons.io.FileUtilsTestCase.testListFiles()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5497" source="org.apache.commons.io.FileUtilsTestCase.testListFiles()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5498" source="org.apache.commons.io.FileUtilsTestCase.testListFiles()" target="org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5499" source="org.apache.commons.io.FileUtilsTestCase.testListFiles()" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5500" source="org.apache.commons.io.FileUtilsTestCase.testListFiles()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5501" source="org.apache.commons.io.FileUtilsTestCase.testListFilesWithDirs()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5502" source="org.apache.commons.io.FileUtilsTestCase.testListFilesWithDirs()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5503" source="org.apache.commons.io.FileUtilsTestCase.testListFilesWithDirs()" target="org.apache.commons.io.FileUtils.listFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5504" source="org.apache.commons.io.FileUtilsTestCase.testListFilesWithDirs()" target="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5505" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5506" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5507" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5508" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory()" target="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5509" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory_Errors()" target="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5510" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory_Errors()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5511" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory_Errors()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5512" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_CopyDelete()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5513" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_CopyDelete()" target="org.apache.commons.io.FileUtilsTestCase$3(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5514" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_CopyDelete()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5515" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_CopyDelete()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5516" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_CopyDelete()" target="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5517" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Errors()" target="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5518" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Errors()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5519" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Errors()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5520" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Rename()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5521" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Rename()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5522" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Rename()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5523" source="org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Rename()" target="org.apache.commons.io.FileUtils.moveDirectory(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5524" source="org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5525" source="org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory()" target="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5526" source="org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5527" source="org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory_Errors()" target="org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5528" source="org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory_Errors()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5529" source="org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory_Errors()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5530" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5531" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete()" target="org.apache.commons.io.FileUtilsTestCase$1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5532" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete()" target="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5533" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5534" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete_Failed()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5535" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete_Failed()" target="org.apache.commons.io.FileUtilsTestCase$2(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5536" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete_Failed()" target="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5537" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete_Failed()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5538" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_Errors()" target="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5539" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_Errors()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5540" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_Errors()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5541" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_Rename()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5542" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_Rename()" target="org.apache.commons.io.FileUtils.moveFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5543" source="org.apache.commons.io.FileUtilsTestCase.testMoveFile_Rename()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5544" source="org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5545" source="org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5546" source="org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory()" target="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5547" source="org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory_Errors()" target="org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5548" source="org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory_Errors()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5549" source="org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory_Errors()" target="org.apache.commons.io.FileUtils.moveToDirectory(java.io.File,java.io.File,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5550" source="org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5551" source="org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()" target="org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5552" source="org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5553" source="org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithDefaultEncoding()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5554" source="org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithDefaultEncoding()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5555" source="org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithEncoding()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5556" source="org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithEncoding()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5557" source="org.apache.commons.io.FileUtilsTestCase.testReadLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5558" source="org.apache.commons.io.FileUtilsTestCase.testReadLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5559" source="org.apache.commons.io.FileUtilsTestCase.testReadLines()" target="org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5560" source="org.apache.commons.io.FileUtilsTestCase.testReadLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5561" source="org.apache.commons.io.FileUtilsTestCase.testSizeOf()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5562" source="org.apache.commons.io.FileUtilsTestCase.testSizeOf()" target="org.apache.commons.io.FileUtils.sizeOf(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5563" source="org.apache.commons.io.FileUtilsTestCase.testSizeOf()" target="org.apache.commons.io.FileUtilsTestCase#testFile1Size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5564" source="org.apache.commons.io.FileUtilsTestCase.testSizeOf()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5565" source="org.apache.commons.io.FileUtilsTestCase.testSizeOf()" target="org.apache.commons.io.FileUtilsTestCase#TEST_DIRECTORY_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5566" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfAsBigInteger()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5567" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfAsBigInteger()" target="org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5568" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfAsBigInteger()" target="java.math.BigInteger#ZERO">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5569" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfAsBigInteger()" target="org.apache.commons.io.FileUtilsTestCase#testFile1Size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5570" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfAsBigInteger()" target="org.apache.commons.io.FileUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5571" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfAsBigInteger()" target="org.apache.commons.io.FileUtilsTestCase#TEST_DIRECTORY_SIZE_BI">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5572" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5573" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()" target="org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5574" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()" target="org.apache.commons.io.FileUtilsTestCase.createCircularSymLink(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5575" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()" target="org.apache.commons.io.FileUtilsTestCase#TEST_DIRECTORY_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5576" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectoryAsBigInteger()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5577" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectoryAsBigInteger()" target="org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5578" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectoryAsBigInteger()" target="org.apache.commons.io.FileUtilsTestCase.createCircularSymLink(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5579" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectoryAsBigInteger()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5580" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectoryAsBigInteger()" target="org.apache.commons.io.FileUtilsTestCase#TEST_DIRECTORY_SIZE_BI">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5581" source="org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectoryAsBigInteger()" target="org.apache.commons.io.FileUtilsTestCase#TEST_DIRECTORY_SIZE_GT_ZERO_BI">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5582" source="org.apache.commons.io.FileUtilsTestCase.testToFile1()" target="org.apache.commons.io.FileUtils.toFile(java.net.URL)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5583" source="org.apache.commons.io.FileUtilsTestCase.testToFile2()" target="org.apache.commons.io.FileUtils.toFile(java.net.URL)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5584" source="org.apache.commons.io.FileUtilsTestCase.testToFile3()" target="org.apache.commons.io.FileUtils.toFile(java.net.URL)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5585" source="org.apache.commons.io.FileUtilsTestCase.testToFile4()" target="org.apache.commons.io.FileUtils.toFile(java.net.URL)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5586" source="org.apache.commons.io.FileUtilsTestCase.testToFile5()" target="org.apache.commons.io.FileUtils.toFile(java.net.URL)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5587" source="org.apache.commons.io.FileUtilsTestCase.testToFileUtf8()" target="org.apache.commons.io.FileUtils.toFile(java.net.URL)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5588" source="org.apache.commons.io.FileUtilsTestCase.testToFiles1()" target="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5589" source="org.apache.commons.io.FileUtilsTestCase.testToFiles1()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5590" source="org.apache.commons.io.FileUtilsTestCase.testToFiles2()" target="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5591" source="org.apache.commons.io.FileUtilsTestCase.testToFiles2()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5592" source="org.apache.commons.io.FileUtilsTestCase.testToFiles3()" target="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5593" source="org.apache.commons.io.FileUtilsTestCase.testToFiles3()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5594" source="org.apache.commons.io.FileUtilsTestCase.testToFiles3a()" target="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5595" source="org.apache.commons.io.FileUtilsTestCase.testToFiles3a()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5596" source="org.apache.commons.io.FileUtilsTestCase.testToFiles4()" target="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5597" source="org.apache.commons.io.FileUtilsTestCase.testToURLs1()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5598" source="org.apache.commons.io.FileUtilsTestCase.testToURLs1()" target="org.apache.commons.io.FileUtils.toURLs(java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5599" source="org.apache.commons.io.FileUtilsTestCase.testToURLs1()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5600" source="org.apache.commons.io.FileUtilsTestCase.testToURLs3a()" target="org.apache.commons.io.FileUtils.toURLs(java.io.File[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5601" source="org.apache.commons.io.FileUtilsTestCase.testToURLs3a()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5602" source="org.apache.commons.io.FileUtilsTestCase.testTouch()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5603" source="org.apache.commons.io.FileUtilsTestCase.testTouch()" target="org.apache.commons.io.FileUtils.touch(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5604" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5605" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()" target="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5606" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5607" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5608" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5609" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5610" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5611" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5612" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5613" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5614" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5615" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5616" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength()" target="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5617" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5618" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5619" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5620" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],int,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5621" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5622" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5623" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5624" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5625" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],int,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5626" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5627" source="org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5628" source="org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence1()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5629" source="org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence1()" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5630" source="org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence1()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5631" source="org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence2()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5632" source="org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence2()" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5633" source="org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence2()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5634" source="org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5635" source="org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5636" source="org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5637" source="org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5638" source="org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5639" source="org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5640" source="org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5641" source="org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5642" source="org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5643" source="org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5644" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5645" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5646" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5647" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5648" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5649" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5650" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.util.Collection,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5651" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5652" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5653" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5654" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5655" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.util.Collection,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5656" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5657" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5658" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5659" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5660" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5661" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5662" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5663" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5664" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5665" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5666" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5667" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5668" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5669" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.util.Collection,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5670" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5671" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5672" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5673" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5674" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.util.Collection,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5675" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5676" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5677" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5678" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5679" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5680" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5681" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5682" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5683" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5684" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5685" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5686" source="org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5687" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5688" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5689" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5690" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5691" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5692" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5693" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile3()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5694" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile3()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5695" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile3()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5696" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5697" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5698" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5699" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5700" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5701" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5702" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5703" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5704" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5705" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5706" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5707" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5708" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5709" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5710" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5711" source="org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5712" source="org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5713" source="org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5714" source="org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5715" source="org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5716" source="org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5717" source="org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5718" source="org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5719" source="org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5720" source="org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5721" source="org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5722" source="org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5723" source="org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5724" source="org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5725" source="org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5726" source="org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.write(java.io.File,java.lang.CharSequence,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5727" source="org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()" target="org.apache.commons.io.FileUtils.readFileToString(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5728" source="org.apache.commons.io.FileUtilsTestCase.test_openInputStream_exists()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5729" source="org.apache.commons.io.FileUtilsTestCase.test_openInputStream_exists()" target="org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5730" source="org.apache.commons.io.FileUtilsTestCase.test_openInputStream_exists()" target="org.apache.commons.io.FileUtils.openInputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5731" source="org.apache.commons.io.FileUtilsTestCase.test_openInputStream_exists()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5732" source="org.apache.commons.io.FileUtilsTestCase.test_openInputStream_existsButIsDirectory()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5733" source="org.apache.commons.io.FileUtilsTestCase.test_openInputStream_existsButIsDirectory()" target="org.apache.commons.io.FileUtils.openInputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5734" source="org.apache.commons.io.FileUtilsTestCase.test_openInputStream_existsButIsDirectory()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5735" source="org.apache.commons.io.FileUtilsTestCase.test_openInputStream_notExists()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5736" source="org.apache.commons.io.FileUtilsTestCase.test_openInputStream_notExists()" target="org.apache.commons.io.FileUtils.openInputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5737" source="org.apache.commons.io.FileUtilsTestCase.test_openInputStream_notExists()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5738" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_exists()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5739" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_exists()" target="org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5740" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_exists()" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5741" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_exists()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5742" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_existsButIsDirectory()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5743" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_existsButIsDirectory()" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5744" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_existsButIsDirectory()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5745" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_noParentCreateFile()" target="org.apache.commons.io.FileUtilsTestCase.openOutputStream_noParent(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5746" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_noParentNoFile()" target="org.apache.commons.io.FileUtilsTestCase.openOutputStream_noParent(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5747" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExists()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5748" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExists()" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5749" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExists()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5750" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExistsCannotCreate()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5751" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExistsCannotCreate()" target="org.apache.commons.io.FileUtils.openOutputStream(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5752" source="org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExistsCannotCreate()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5753" source="org.apache.commons.io.FileUtilsWaitForTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5754" source="org.apache.commons.io.FileUtilsWaitForTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5755" source="org.apache.commons.io.FileUtilsWaitForTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5756" source="org.apache.commons.io.FileUtilsWaitForTestCase.tearDown()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5757" source="org.apache.commons.io.FileUtilsWaitForTestCase.testWaitFor()" target="org.apache.commons.io.FileUtils.waitFor(java.io.File,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5758" source="org.apache.commons.io.FilenameUtils.directoryContains(java.lang.String,java.lang.String)" target="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5759" source="org.apache.commons.io.FilenameUtils.directoryContains(java.lang.String,java.lang.String)" target="org.apache.commons.io.IOCase.checkStartsWith(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5760" source="org.apache.commons.io.FilenameUtils.directoryContains(java.lang.String,java.lang.String)" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5761" source="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)" target="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5762" source="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5763" source="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" target="org.apache.commons.io.FilenameUtils.normalize(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5764" source="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5765" source="org.apache.commons.io.IOCase#SENSITIVE" target="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5766" source="org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)" target="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5767" source="org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5768" source="org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)" target="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5769" source="org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5770" source="org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)" target="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5771" source="org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5772" source="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)" target="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5773" source="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)" target="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5774" source="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)" target="org.apache.commons.io.FilenameUtils#NOT_FOUND">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5775" source="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])" target="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5776" source="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])" target="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5777" source="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5778" source="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])" target="org.apache.commons.io.FilenameUtils#NOT_FOUND">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5779" source="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)" target="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5780" source="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)" target="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5781" source="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)" target="org.apache.commons.io.FilenameUtils#NOT_FOUND">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5782" source="org.apache.commons.io.FilenameUtils.isSeparator(char)" target="org.apache.commons.io.FilenameUtils#UNIX_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5783" source="org.apache.commons.io.FilenameUtils.isSeparator(char)" target="org.apache.commons.io.FilenameUtils#WINDOWS_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5784" source="org.apache.commons.io.FilenameUtils.isSystemWindows()" target="org.apache.commons.io.FilenameUtils#SYSTEM_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5785" source="org.apache.commons.io.FilenameUtils.isSystemWindows()" target="org.apache.commons.io.FilenameUtils#WINDOWS_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5786" source="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)" target="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5787" source="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5788" source="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5789" source="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5790" source="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.IOCase.checkRegionMatches(java.lang.String,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5791" source="org.apache.commons.io.IOCase#SENSITIVE" target="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5792" source="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5793" source="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" target="org.apache.commons.io.FilenameUtils#NOT_FOUND">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5794" source="org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)" target="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5795" source="org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5796" source="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" target="org.apache.commons.io.FilenameUtils.isSeparator(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5797" source="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" target="org.apache.commons.io.FilenameUtils#NOT_FOUND">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5798" source="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" target="org.apache.commons.io.FilenameUtils#UNIX_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5799" source="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" target="org.apache.commons.io.FilenameUtils#WINDOWS_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5800" source="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" target="org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5801" source="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" target="org.apache.commons.io.FilenameUtils#NOT_FOUND">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5802" source="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" target="org.apache.commons.io.FilenameUtils#EXTENSION_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5803" source="org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)" target="org.apache.commons.io.FilenameUtils#NOT_FOUND">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5804" source="org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)" target="org.apache.commons.io.FilenameUtils#UNIX_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5805" source="org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)" target="org.apache.commons.io.FilenameUtils#WINDOWS_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5806" source="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" target="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5807" source="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" target="org.apache.commons.io.FilenameUtils.normalize(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5808" source="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" target="org.apache.commons.io.FilenameUtils.isSeparator(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5809" source="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" target="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5810" source="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" target="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5811" source="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" target="org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5812" source="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" target="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5813" source="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" target="org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5814" source="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" target="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5815" source="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" target="org.apache.commons.io.FilenameUtils#SYSTEM_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5816" source="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" target="org.apache.commons.io.FilenameUtils#OTHER_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5817" source="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5818" source="org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)" target="org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5819" source="org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)" target="org.apache.commons.io.FilenameUtils.getName(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5820" source="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" target="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5821" source="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)" target="org.apache.commons.io.FilenameUtils#NOT_FOUND">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5822" source="org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)" target="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5823" source="org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)" target="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5824" source="org.apache.commons.io.FilenameUtils.getName(java.lang.String)" target="org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5825" source="org.apache.commons.io.FilenameUtils.getPath(java.lang.String)" target="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5826" source="org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)" target="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5827" source="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" target="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5828" source="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" target="org.apache.commons.io.FilenameUtils#UNIX_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5829" source="org.apache.commons.io.FilenameUtils.normalize(java.lang.String)" target="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5830" source="org.apache.commons.io.FilenameUtils.normalize(java.lang.String)" target="org.apache.commons.io.FilenameUtils#SYSTEM_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5831" source="org.apache.commons.io.FilenameUtils.normalize(java.lang.String,boolean)" target="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5832" source="org.apache.commons.io.FilenameUtils.normalize(java.lang.String,boolean)" target="org.apache.commons.io.FilenameUtils#UNIX_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5833" source="org.apache.commons.io.FilenameUtils.normalize(java.lang.String,boolean)" target="org.apache.commons.io.FilenameUtils#WINDOWS_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5834" source="org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)" target="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5835" source="org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)" target="org.apache.commons.io.FilenameUtils#SYSTEM_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5836" source="org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String,boolean)" target="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5837" source="org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String,boolean)" target="org.apache.commons.io.FilenameUtils#UNIX_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5838" source="org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String,boolean)" target="org.apache.commons.io.FilenameUtils#WINDOWS_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5839" source="org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)" target="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5840" source="org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)" target="org.apache.commons.io.FilenameUtils#NOT_FOUND">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5841" source="org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)" target="org.apache.commons.io.FilenameUtils.isSystemWindows()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5842" source="org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)" target="org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5843" source="org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)" target="org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5844" source="org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)" target="org.apache.commons.io.FilenameUtils#WINDOWS_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5845" source="org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)" target="org.apache.commons.io.FilenameUtils#NOT_FOUND">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5846" source="org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)" target="org.apache.commons.io.FilenameUtils#UNIX_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5847" source="org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)" target="org.apache.commons.io.FilenameUtils#UNIX_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5848" source="org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)" target="org.apache.commons.io.FilenameUtils#NOT_FOUND">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5849" source="org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)" target="org.apache.commons.io.FilenameUtils#WINDOWS_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5850" source="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" target="org.apache.commons.io.FilenameUtils#NOT_FOUND">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5851" source="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5852" source="org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5853" source="org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5854" source="org.apache.commons.io.FilenameUtilsTestCase#testFile1" target="org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5855" source="org.apache.commons.io.FilenameUtilsTestCase#testFile2" target="org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5856" source="org.apache.commons.io.FilenameUtilsTestCase#testFile1Size" target="org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5857" source="org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)" target="org.apache.commons.io.FilenameUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5858" source="org.apache.commons.io.FilenameUtilsTestCase#testFile2Size" target="org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e5859" source="org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)" target="org.apache.commons.io.FilenameUtilsTestCase#testFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5860" source="org.apache.commons.io.FilenameUtilsTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5861" source="org.apache.commons.io.FilenameUtilsTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5862" source="org.apache.commons.io.FilenameUtilsTestCase.setUp()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5863" source="org.apache.commons.io.FilenameUtilsTestCase.setUp()" target="org.apache.commons.io.FilenameUtilsTestCase#testFile1">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5864" source="org.apache.commons.io.FilenameUtilsTestCase.setUp()" target="org.apache.commons.io.FilenameUtilsTestCase#testFile1Size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5865" source="org.apache.commons.io.FilenameUtilsTestCase.setUp()" target="org.apache.commons.io.FilenameUtilsTestCase#testFile2">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5866" source="org.apache.commons.io.FilenameUtilsTestCase.setUp()" target="org.apache.commons.io.FilenameUtilsTestCase#testFile2Size">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5867" source="org.apache.commons.io.FilenameUtilsTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5868" source="org.apache.commons.io.FilenameUtilsTestCase.tearDown()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5869" source="org.apache.commons.io.FilenameUtilsTestCase.testConcat()" target="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5870" source="org.apache.commons.io.FilenameUtilsTestCase.testConcat()" target="org.apache.commons.io.FilenameUtilsTestCase#SEP">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5871" source="org.apache.commons.io.FilenameUtilsTestCase.testEquals()" target="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5872" source="org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()" target="org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5873" source="org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()" target="org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5874" source="org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()" target="org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5875" source="org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()" target="org.apache.commons.io.FilenameUtilsTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5876" source="org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()" target="org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5877" source="org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()" target="org.apache.commons.io.FilenameUtilsTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5878" source="org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()" target="org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5879" source="org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5880" source="org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5881" source="org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()" target="org.apache.commons.io.FilenameUtilsTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5882" source="org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5883" source="org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()" target="org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5884" source="org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()" target="org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5885" source="org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()" target="org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5886" source="org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()" target="org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5887" source="org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator_IO_248()" target="org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5888" source="org.apache.commons.io.FilenameUtilsTestCase.testGetName()" target="org.apache.commons.io.FilenameUtils.getName(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5889" source="org.apache.commons.io.FilenameUtilsTestCase.testGetPath()" target="org.apache.commons.io.FilenameUtils.getPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5890" source="org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()" target="org.apache.commons.io.FilenameUtils.getPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5891" source="org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()" target="org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5892" source="org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()" target="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5893" source="org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()" target="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5894" source="org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()" target="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5895" source="org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()" target="org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5896" source="org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()" target="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5897" source="org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()" target="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5898" source="org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()" target="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5899" source="org.apache.commons.io.FilenameUtilsTestCase.testNormalize()" target="org.apache.commons.io.FilenameUtils.normalize(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5900" source="org.apache.commons.io.FilenameUtilsTestCase.testNormalize()" target="org.apache.commons.io.FilenameUtilsTestCase#SEP">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5901" source="org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()" target="org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5902" source="org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()" target="org.apache.commons.io.FilenameUtilsTestCase#SEP">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5903" source="org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparatorUnixWin()" target="org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5904" source="org.apache.commons.io.FilenameUtilsTestCase.testNormalizeUnixWin()" target="org.apache.commons.io.FilenameUtils.normalize(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5905" source="org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()" target="org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5906" source="org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()" target="org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5907" source="org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()" target="org.apache.commons.io.FilenameUtilsTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5908" source="org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()" target="org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5909" source="org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()" target="org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5910" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5911" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)" target="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5912" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testLocaleIndependence()" target="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5913" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testLocaleIndependence()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5914" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testLocaleIndependence()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5915" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch()" target="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5916" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()" target="org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5917" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchCaseSpecified()" target="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5918" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchCaseSpecified()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5919" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchCaseSpecified()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5920" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchCaseSpecified()" target="org.apache.commons.io.FilenameUtilsWildcardTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5921" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchCaseSpecified()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5922" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()" target="org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5923" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()" target="org.apache.commons.io.FilenameUtilsWildcardTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5924" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()" target="org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5925" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()" target="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5926" source="org.apache.commons.io.FilenameUtilsWildcardTestCase.test_IO_246()" target="org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5927" source="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" target="org.apache.commons.io.HexDump#_hexcodes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5928" source="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" target="org.apache.commons.io.HexDump#_shifts">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5929" source="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,long)" target="org.apache.commons.io.HexDump#_hexcodes">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5930" source="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,long)" target="org.apache.commons.io.HexDump#_shifts">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5931" source="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" target="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5932" source="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" target="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5933" source="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5934" source="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" target="org.apache.commons.io.HexDump#EOL">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5935" source="org.apache.commons.io.HexDumpTest.testDump()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5936" source="org.apache.commons.io.HexDumpTest.testDump()" target="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5937" source="org.apache.commons.io.HexDumpTest.testDump()" target="org.apache.commons.io.HexDumpTest.toHex(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5938" source="org.apache.commons.io.HexDumpTest.testDump()" target="org.apache.commons.io.HexDumpTest.toAscii(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5939" source="org.apache.commons.io.HexDumpTest.testDump()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5940" source="org.apache.commons.io.HexDumpTest.testDump()" target="org.apache.commons.io.HexDump#EOL">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5941" source="org.apache.commons.io.HexDumpTest.testDump()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5942" source="org.apache.commons.io.IOCaseTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5943" source="org.apache.commons.io.IOCaseTestCase.test_checkCompare_case()" target="org.apache.commons.io.IOCase.checkCompareTo(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5944" source="org.apache.commons.io.IOCaseTestCase.test_checkCompare_case()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5945" source="org.apache.commons.io.IOCaseTestCase.test_checkCompare_case()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5946" source="org.apache.commons.io.IOCaseTestCase.test_checkCompare_case()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5947" source="org.apache.commons.io.IOCaseTestCase.test_checkCompare_case()" target="org.apache.commons.io.IOCaseTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5948" source="org.apache.commons.io.IOCaseTestCase.test_checkCompare_functionality()" target="org.apache.commons.io.IOCase.checkCompareTo(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5949" source="org.apache.commons.io.IOCaseTestCase.test_checkCompare_functionality()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5950" source="org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_case()" target="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5951" source="org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_case()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5952" source="org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_case()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5953" source="org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_case()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5954" source="org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_case()" target="org.apache.commons.io.IOCaseTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5955" source="org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_functionality()" target="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5956" source="org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_functionality()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5957" source="org.apache.commons.io.IOCaseTestCase.test_checkEquals_case()" target="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5958" source="org.apache.commons.io.IOCaseTestCase.test_checkEquals_case()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5959" source="org.apache.commons.io.IOCaseTestCase.test_checkEquals_case()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5960" source="org.apache.commons.io.IOCaseTestCase.test_checkEquals_case()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5961" source="org.apache.commons.io.IOCaseTestCase.test_checkEquals_case()" target="org.apache.commons.io.IOCaseTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5962" source="org.apache.commons.io.IOCaseTestCase.test_checkEquals_functionality()" target="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5963" source="org.apache.commons.io.IOCaseTestCase.test_checkEquals_functionality()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5964" source="org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_case()" target="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5965" source="org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_case()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5966" source="org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_case()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5967" source="org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_case()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5968" source="org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_case()" target="org.apache.commons.io.IOCaseTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5969" source="org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_functionality()" target="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5970" source="org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_functionality()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5971" source="org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_case()" target="org.apache.commons.io.IOCase.checkRegionMatches(java.lang.String,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5972" source="org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_case()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5973" source="org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_case()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5974" source="org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_case()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5975" source="org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_case()" target="org.apache.commons.io.IOCaseTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5976" source="org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_functionality()" target="org.apache.commons.io.IOCase.checkRegionMatches(java.lang.String,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5977" source="org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_functionality()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5978" source="org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_case()" target="org.apache.commons.io.IOCase.checkStartsWith(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5979" source="org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_case()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5980" source="org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_case()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5981" source="org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_case()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5982" source="org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_case()" target="org.apache.commons.io.IOCaseTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5983" source="org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_functionality()" target="org.apache.commons.io.IOCase.checkStartsWith(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5984" source="org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_functionality()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5985" source="org.apache.commons.io.IOCaseTestCase.test_forName()" target="org.apache.commons.io.IOCase.forName(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5986" source="org.apache.commons.io.IOCaseTestCase.test_forName()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5987" source="org.apache.commons.io.IOCaseTestCase.test_forName()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5988" source="org.apache.commons.io.IOCaseTestCase.test_forName()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5989" source="org.apache.commons.io.IOCaseTestCase.test_getName()" target="org.apache.commons.io.IOCase.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5990" source="org.apache.commons.io.IOCaseTestCase.test_getName()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5991" source="org.apache.commons.io.IOCaseTestCase.test_getName()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5992" source="org.apache.commons.io.IOCaseTestCase.test_getName()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5993" source="org.apache.commons.io.IOCaseTestCase.test_isCaseSensitive()" target="org.apache.commons.io.IOCase.isCaseSensitive()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5994" source="org.apache.commons.io.IOCaseTestCase.test_isCaseSensitive()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5995" source="org.apache.commons.io.IOCaseTestCase.test_isCaseSensitive()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5996" source="org.apache.commons.io.IOCaseTestCase.test_isCaseSensitive()" target="org.apache.commons.io.IOCaseTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5997" source="org.apache.commons.io.IOCaseTestCase.test_isCaseSensitive()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e5998" source="org.apache.commons.io.IOCaseTestCase.test_serialization()" target="org.apache.commons.io.IOCaseTestCase.serialize(org.apache.commons.io.IOCase)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5999" source="org.apache.commons.io.IOCaseTestCase.test_serialization()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6000" source="org.apache.commons.io.IOCaseTestCase.test_serialization()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6001" source="org.apache.commons.io.IOCaseTestCase.test_serialization()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6002" source="org.apache.commons.io.IOCaseTestCase.test_toString()" target="org.apache.commons.io.IOCase.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6003" source="org.apache.commons.io.IOCaseTestCase.test_toString()" target="org.apache.commons.io.IOCase#SENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6004" source="org.apache.commons.io.IOCaseTestCase.test_toString()" target="org.apache.commons.io.IOCase#INSENSITIVE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6005" source="org.apache.commons.io.IOCaseTestCase.test_toString()" target="org.apache.commons.io.IOCase#SYSTEM">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6006" source="org.apache.commons.io.IOExceptionWithCauseTestCase.testIOExceptionStringThrowable()" target="org.apache.commons.io.IOExceptionWithCauseTestCase.validate(java.lang.Throwable,java.lang.Throwable,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6007" source="org.apache.commons.io.IOExceptionWithCauseTestCase.testIOExceptionThrowable()" target="org.apache.commons.io.IOExceptionWithCauseTestCase.validate(java.lang.Throwable,java.lang.Throwable,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6008" source="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6009" source="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" target="org.apache.commons.io.IOUtils.toBufferedReader(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6010" source="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6011" source="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)" target="org.apache.commons.io.IOUtils.toBufferedReader(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6012" source="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,int)" target="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6013" source="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,int)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6014" source="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6015" source="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6016" source="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6017" source="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6018" source="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6019" source="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6020" source="org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)" target="org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6021" source="org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)" target="org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6022" source="org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6023" source="org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.nio.charset.Charset)" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6024" source="org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6025" source="org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.nio.charset.Charset)" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6026" source="org.apache.commons.io.IOUtils.toByteArray(java.net.URI)" target="org.apache.commons.io.IOUtils.toByteArray(java.net.URL)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6027" source="org.apache.commons.io.IOUtils.toByteArray(java.net.URL)" target="org.apache.commons.io.IOUtils.toByteArray(java.net.URLConnection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6028" source="org.apache.commons.io.IOUtils.toByteArray(java.net.URL)" target="org.apache.commons.io.IOUtils.close(java.net.URLConnection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6029" source="org.apache.commons.io.IOUtils.toByteArray(java.net.URLConnection)" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6030" source="org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)" target="org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6031" source="org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)" target="org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6032" source="org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6033" source="org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6034" source="org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6035" source="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)" target="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6036" source="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6037" source="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)" target="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6038" source="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6039" source="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[])" target="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6040" source="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6041" source="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6042" source="org.apache.commons.io.IOUtils.read(java.io.Reader,char[])" target="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6043" source="org.apache.commons.io.IOUtils.read(java.io.Reader,char[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6044" source="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6045" source="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6046" source="org.apache.commons.io.IOUtils.toBufferedInputStream(java.io.InputStream)" target="org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6047" source="org.apache.commons.io.IOUtils.toBufferedInputStream(java.io.InputStream,int)" target="org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6048" source="org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence)" target="org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6049" source="org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence,java.lang.String)" target="org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6050" source="org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6051" source="org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6052" source="org.apache.commons.io.IOUtils.toInputStream(java.lang.String)" target="org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6053" source="org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6054" source="org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6055" source="org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6056" source="org.apache.commons.io.IOUtils.toString(java.io.InputStream)" target="org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6057" source="org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)" target="org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6058" source="org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6059" source="org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.nio.charset.Charset)" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6060" source="org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6061" source="org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.nio.charset.Charset)" target="org.apache.commons.io.output.StringBuilderWriter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6062" source="org.apache.commons.io.IOUtils.toString(java.io.Reader)" target="org.apache.commons.io.output.StringBuilderWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6063" source="org.apache.commons.io.IOUtils.toString(java.io.Reader)" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6064" source="org.apache.commons.io.IOUtils.toString(java.io.Reader)" target="org.apache.commons.io.output.StringBuilderWriter.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6065" source="org.apache.commons.io.IOUtils.toString(java.net.URI)" target="org.apache.commons.io.IOUtils.toString(java.net.URI,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6066" source="org.apache.commons.io.IOUtils.toString(java.net.URI,java.lang.String)" target="org.apache.commons.io.IOUtils.toString(java.net.URI,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6067" source="org.apache.commons.io.IOUtils.toString(java.net.URI,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6068" source="org.apache.commons.io.IOUtils.toString(java.net.URI,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.toString(java.net.URL,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6069" source="org.apache.commons.io.IOUtils.toString(java.net.URI,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6070" source="org.apache.commons.io.IOUtils.toString(java.net.URL)" target="org.apache.commons.io.IOUtils.toString(java.net.URL,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6071" source="org.apache.commons.io.IOUtils.toString(java.net.URL,java.lang.String)" target="org.apache.commons.io.IOUtils.toString(java.net.URL,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6072" source="org.apache.commons.io.IOUtils.toString(java.net.URL,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6073" source="org.apache.commons.io.IOUtils.toString(java.net.URL,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6074" source="org.apache.commons.io.IOUtils.readLines(java.io.InputStream)" target="org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6075" source="org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)" target="org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6076" source="org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6077" source="org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6078" source="org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.readLines(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6079" source="org.apache.commons.io.IOUtils.readLines(java.io.Reader)" target="org.apache.commons.io.IOUtils.toBufferedReader(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6080" source="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream,int)" target="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6081" source="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream)" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6082" source="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream)" target="org.apache.commons.io.IOUtils#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6083" source="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,byte[])" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6084" source="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long)" target="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6085" source="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long)" target="org.apache.commons.io.IOUtils#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6086" source="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" target="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6087" source="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6088" source="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6089" source="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer)" target="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6090" source="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer)" target="org.apache.commons.io.IOUtils#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6091" source="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,char[])" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6092" source="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long)" target="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6093" source="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long)" target="org.apache.commons.io.IOUtils#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6094" source="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" target="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6095" source="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6096" source="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6097" source="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" target="org.apache.commons.io.IOUtils#SKIP_BYTE_BUFFER">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6098" source="org.apache.commons.io.IOUtils#SKIP_BYTE_BUFFER" target="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6099" source="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" target="org.apache.commons.io.IOUtils#SKIP_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6100" source="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" target="org.apache.commons.io.IOUtils#SKIP_CHAR_BUFFER">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6101" source="org.apache.commons.io.IOUtils#SKIP_CHAR_BUFFER" target="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6102" source="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" target="org.apache.commons.io.IOUtils#SKIP_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6103" source="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" target="org.apache.commons.io.IOUtils#SKIP_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6104" source="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" target="org.apache.commons.io.IOUtils#EOF">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6105" source="org.apache.commons.io.IOUtils.lineIterator(java.io.InputStream,java.lang.String)" target="org.apache.commons.io.IOUtils.lineIterator(java.io.InputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6106" source="org.apache.commons.io.IOUtils.lineIterator(java.io.InputStream,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6107" source="org.apache.commons.io.IOUtils.lineIterator(java.io.InputStream,java.nio.charset.Charset)" target="org.apache.commons.io.LineIterator(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6108" source="org.apache.commons.io.IOUtils.lineIterator(java.io.InputStream,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6109" source="org.apache.commons.io.IOUtils.lineIterator(java.io.Reader)" target="org.apache.commons.io.LineIterator(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6110" source="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable[])" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6111" source="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6112" source="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6113" source="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6114" source="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6115" source="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6116" source="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6117" source="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6118" source="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6119" source="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6120" source="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6121" source="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6122" source="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6123" source="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6124" source="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6125" source="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[])" target="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6126" source="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6127" source="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" target="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6128" source="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[])" target="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6129" source="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[])" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6130" source="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" target="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6131" source="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" target="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6132" source="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" target="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6133" source="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" target="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6134" source="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" target="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6135" source="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)" target="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6136" source="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)" target="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6137" source="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6138" source="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6139" source="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)" target="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6140" source="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)" target="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6141" source="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6142" source="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6143" source="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream)" target="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6144" source="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream,java.lang.String)" target="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6145" source="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6146" source="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream,java.nio.charset.Charset)" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6147" source="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.Writer)" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6148" source="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6149" source="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6150" source="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6151" source="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6152" source="org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream)" target="org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6153" source="org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6154" source="org.apache.commons.io.IOUtils.writeChunked(byte[],java.io.OutputStream)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6155" source="org.apache.commons.io.IOUtils.writeChunked(byte[],java.io.OutputStream)" target="org.apache.commons.io.IOUtils#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6156" source="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6157" source="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" target="org.apache.commons.io.IOUtils#DEFAULT_BUFFER_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6158" source="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6159" source="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6160" source="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)" target="org.apache.commons.io.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6161" source="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)" target="org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6162" source="org.apache.commons.io.IOUtils#LINE_SEPARATOR" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6163" source="org.apache.commons.io.IOUtils#LINE_SEPARATOR" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6164" source="org.apache.commons.io.IOUtilsCopyTestCase#inData" target="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6165" source="org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6166" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6167" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6168" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6169" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6170" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6171" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6172" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6173" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6174" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStreamWithBufferSize()" target="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStreamWithBufferSize(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6175" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStreamWithBufferSize(int)" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6176" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStreamWithBufferSize(int)" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6177" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStreamWithBufferSize(int)" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6178" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStreamWithBufferSize(int)" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6179" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStreamWithBufferSize(int)" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6180" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStreamWithBufferSize(int)" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6181" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStreamWithBufferSize(int)" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6182" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStreamWithBufferSize(int)" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6183" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_IO84()" target="org.apache.commons.io.input.NullInputStream(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6184" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_IO84()" target="org.apache.commons.io.output.NullOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6185" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_IO84()" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6186" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_IO84()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6187" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_IO84()" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6188" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6189" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn()" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6190" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullOut()" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6191" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullOut()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6192" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6193" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6194" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6195" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6196" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6197" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6198" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6199" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6200" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6201" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6202" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6203" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6204" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6205" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6206" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6207" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6208" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6209" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6210" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6211" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6212" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6213" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6214" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6215" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6216" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6217" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6218" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6219" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6220" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullOut()" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6221" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullOut()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6222" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6223" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6224" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6225" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullOut()" target="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6226" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullOut()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6227" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6228" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6229" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6230" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6231" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6232" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6233" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6234" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6235" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6236" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6237" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6238" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6239" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6240" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6241" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6242" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6243" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6244" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6245" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6246" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6247" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6248" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6249" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6250" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6251" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6252" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6253" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6254" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6255" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6256" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6257" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6258" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6259" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6260" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6261" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6262" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6263" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6264" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6265" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6266" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6267" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6268" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6269" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6270" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_IO84()" target="org.apache.commons.io.input.NullReader(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6271" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_IO84()" target="org.apache.commons.io.output.NullWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6272" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_IO84()" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6273" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_IO84()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6274" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_IO84()" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6275" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6276" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6277" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6278" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()" target="org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6279" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()" target="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6280" source="org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()" target="org.apache.commons.io.IOUtilsCopyTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6281" source="org.apache.commons.io.IOUtilsTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6282" source="org.apache.commons.io.IOUtilsTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6283" source="org.apache.commons.io.IOUtilsTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6284" source="org.apache.commons.io.IOUtilsTestCase#m_testFile" target="org.apache.commons.io.IOUtilsTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6285" source="org.apache.commons.io.IOUtilsTestCase.setUp()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6286" source="org.apache.commons.io.IOUtilsTestCase.setUp()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6287" source="org.apache.commons.io.IOUtilsTestCase#iarr" target="org.apache.commons.io.IOUtilsTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6288" source="org.apache.commons.io.IOUtilsTestCase.setUp()" target="org.apache.commons.io.IOUtilsTestCase#iarr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6289" source="org.apache.commons.io.IOUtilsTestCase#carr" target="org.apache.commons.io.IOUtilsTestCase.setUp()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6290" source="org.apache.commons.io.IOUtilsTestCase.setUp()" target="org.apache.commons.io.IOUtilsTestCase#carr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6291" source="org.apache.commons.io.IOUtilsTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6292" source="org.apache.commons.io.IOUtilsTestCase.tearDown()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6293" source="org.apache.commons.io.IOUtilsTestCase#carr" target="org.apache.commons.io.IOUtilsTestCase.tearDown()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6294" source="org.apache.commons.io.IOUtilsTestCase#iarr" target="org.apache.commons.io.IOUtilsTestCase.tearDown()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6295" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedInputStream()" target="org.apache.commons.io.IOUtilsTestCase$6()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6296" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedInputStream()" target="org.apache.commons.io.IOUtils.buffer(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6297" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedInputStreamWithBufferSize()" target="org.apache.commons.io.IOUtilsTestCase$7()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6298" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedInputStreamWithBufferSize()" target="org.apache.commons.io.IOUtils.buffer(java.io.InputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6299" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedInputStreamWithBufferSize()" target="org.apache.commons.io.IOUtils.buffer(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6300" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedNull()" target="org.apache.commons.io.IOUtils.buffer(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6301" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedNull()" target="org.apache.commons.io.IOUtils.buffer(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6302" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedNull()" target="org.apache.commons.io.IOUtils.buffer(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6303" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedNull()" target="org.apache.commons.io.IOUtils.buffer(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6304" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedOutputStream()" target="org.apache.commons.io.IOUtilsTestCase$8()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6305" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedOutputStream()" target="org.apache.commons.io.IOUtils.buffer(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6306" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedOutputStreamWithBufferSize()" target="org.apache.commons.io.IOUtilsTestCase$9()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6307" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedOutputStreamWithBufferSize()" target="org.apache.commons.io.IOUtils.buffer(java.io.OutputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6308" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedOutputStreamWithBufferSize()" target="org.apache.commons.io.IOUtils.buffer(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6309" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedReader()" target="org.apache.commons.io.IOUtilsTestCase$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6310" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedReader()" target="org.apache.commons.io.IOUtils.buffer(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6311" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedReaderWithBufferSize()" target="org.apache.commons.io.IOUtilsTestCase$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6312" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedReaderWithBufferSize()" target="org.apache.commons.io.IOUtils.buffer(java.io.Reader,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6313" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedReaderWithBufferSize()" target="org.apache.commons.io.IOUtils.buffer(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6314" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedWriter()" target="org.apache.commons.io.IOUtilsTestCase$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6315" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedWriter()" target="org.apache.commons.io.IOUtils.buffer(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6316" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedWriterWithBufferSize()" target="org.apache.commons.io.IOUtilsTestCase$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6317" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedWriterWithBufferSize()" target="org.apache.commons.io.IOUtils.buffer(java.io.Writer,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6318" source="org.apache.commons.io.IOUtilsTestCase.testAsBufferedWriterWithBufferSize()" target="org.apache.commons.io.IOUtils.buffer(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6319" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_AllCloseableIOException()" target="org.apache.commons.io.IOUtilsTestCase$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6320" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_AllCloseableIOException()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6321" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_CloseableIOException()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6322" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_CloseableIOException()" target="org.apache.commons.io.IOUtilsTestCase$2()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6323" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_Selector()" target="org.apache.commons.io.IOUtils.closeQuietly(java.nio.channels.Selector)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6324" source="org.apache.commons.io.IOUtilsTestCase$3()" target="org.apache.commons.io.SelectorAdapter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6325" source="org.apache.commons.io.SelectorAdapter.close()" target="org.apache.commons.io.IOUtilsTestCase$3.close()">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e6326" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SelectorIOException()" target="org.apache.commons.io.IOUtilsTestCase$3()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6327" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SelectorIOException()" target="org.apache.commons.io.SelectorAdapter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6328" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SelectorIOException()" target="org.apache.commons.io.IOUtils.closeQuietly(java.nio.channels.Selector)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6329" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SelectorNull()" target="org.apache.commons.io.IOUtils.closeQuietly(java.nio.channels.Selector)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6330" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SelectorTwice()" target="org.apache.commons.io.IOUtils.closeQuietly(java.nio.channels.Selector)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6331" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_ServerSocket()" target="org.apache.commons.io.IOUtils.closeQuietly(java.net.ServerSocket)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6332" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_ServerSocketIOException()" target="org.apache.commons.io.IOUtils.closeQuietly(java.net.ServerSocket)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6333" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_ServerSocketIOException()" target="org.apache.commons.io.IOUtilsTestCase$4()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6334" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_Socket()" target="org.apache.commons.io.IOUtils.closeQuietly(java.net.Socket)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6335" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SocketIOException()" target="org.apache.commons.io.IOUtils.closeQuietly(java.net.Socket)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6336" source="org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SocketIOException()" target="org.apache.commons.io.IOUtilsTestCase$5()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6337" source="org.apache.commons.io.IOUtilsTestCase.testConstants()" target="org.apache.commons.io.IOUtils#DIR_SEPARATOR_UNIX">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6338" source="org.apache.commons.io.IOUtilsTestCase.testConstants()" target="org.apache.commons.io.IOUtils#DIR_SEPARATOR_WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6339" source="org.apache.commons.io.IOUtilsTestCase.testConstants()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR_UNIX">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6340" source="org.apache.commons.io.IOUtilsTestCase.testConstants()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR_WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6341" source="org.apache.commons.io.IOUtilsTestCase.testConstants()" target="org.apache.commons.io.IOUtilsTestCase#WINDOWS">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6342" source="org.apache.commons.io.IOUtilsTestCase.testConstants()" target="org.apache.commons.io.IOUtils#DIR_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6343" source="org.apache.commons.io.IOUtilsTestCase.testConstants()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6344" source="org.apache.commons.io.IOUtilsTestCase.testContentEqualsIgnoreEOL()" target="org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6345" source="org.apache.commons.io.IOUtilsTestCase.testContentEquals_InputStream_InputStream()" target="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6346" source="org.apache.commons.io.IOUtilsTestCase.testContentEquals_InputStream_InputStream()" target="org.apache.commons.io.Charsets#UTF_8">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6347" source="org.apache.commons.io.IOUtilsTestCase.testContentEquals_Reader_Reader()" target="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6348" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharExtraLength()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6349" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharExtraLength()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6350" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharExtraLength()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6351" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharExtraLength()" target="org.apache.commons.io.IOUtilsTestCase#carr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6352" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharExtraLength()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6353" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharFullLength()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6354" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharFullLength()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6355" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharFullLength()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6356" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharFullLength()" target="org.apache.commons.io.IOUtilsTestCase#carr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6357" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharFullLength()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6358" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharNoSkip()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6359" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharNoSkip()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6360" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharNoSkip()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6361" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharNoSkip()" target="org.apache.commons.io.IOUtilsTestCase#carr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6362" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharNoSkip()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6363" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharSkip()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6364" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharSkip()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6365" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharSkip()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6366" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharSkip()" target="org.apache.commons.io.IOUtilsTestCase#carr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6367" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharSkip()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6368" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharSkipInvalid()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6369" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharSkipInvalid()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6370" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharSkipInvalid()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6371" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharSkipInvalid()" target="org.apache.commons.io.IOUtilsTestCase#carr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6372" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_ExtraLength()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6373" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_ExtraLength()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6374" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_ExtraLength()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6375" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_ExtraLength()" target="org.apache.commons.io.IOUtilsTestCase#iarr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6376" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_ExtraLength()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6377" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_FullLength()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6378" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_FullLength()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6379" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_FullLength()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6380" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_FullLength()" target="org.apache.commons.io.IOUtilsTestCase#iarr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6381" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_FullLength()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6382" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_NoSkip()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6383" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_NoSkip()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6384" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_NoSkip()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6385" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_NoSkip()" target="org.apache.commons.io.IOUtilsTestCase#iarr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6386" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_NoSkip()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6387" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_Skip()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6388" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_Skip()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6389" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_Skip()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6390" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_Skip()" target="org.apache.commons.io.IOUtilsTestCase#iarr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6391" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_Skip()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6392" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_SkipInvalid()" target="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6393" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_SkipInvalid()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6394" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_SkipInvalid()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6395" source="org.apache.commons.io.IOUtilsTestCase.testCopyLarge_SkipInvalid()" target="org.apache.commons.io.IOUtilsTestCase#iarr">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6396" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_OutputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6397" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_OutputStream()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6398" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_OutputStream()" target="org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6399" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_OutputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6400" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_OutputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6401" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_OutputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6402" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_OutputStream()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6403" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_Writer()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6404" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_Writer()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6405" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_Writer()" target="org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6406" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_Writer()" target="org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6407" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_Writer()" target="org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6408" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_Writer()" target="org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6409" source="org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_Writer()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6410" source="org.apache.commons.io.IOUtilsTestCase.testCopy_String_Writer()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6411" source="org.apache.commons.io.IOUtilsTestCase.testCopy_String_Writer()" target="org.apache.commons.io.IOUtils.toString(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6412" source="org.apache.commons.io.IOUtilsTestCase.testCopy_String_Writer()" target="org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6413" source="org.apache.commons.io.IOUtilsTestCase.testCopy_String_Writer()" target="org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6414" source="org.apache.commons.io.IOUtilsTestCase.testCopy_String_Writer()" target="org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6415" source="org.apache.commons.io.IOUtilsTestCase.testCopy_String_Writer()" target="org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6416" source="org.apache.commons.io.IOUtilsTestCase.testCopy_String_Writer()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6417" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream_ByteArray()" target="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6418" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream_ByteArray()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6419" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream_Offset()" target="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6420" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream_Offset()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6421" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream_Offset()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6422" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream__ReturnByteArray()" target="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6423" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream__ReturnByteArray()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6424" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream__ReturnByteArray()" target="org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6425" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream__ReturnByteArray()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6426" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_ReadableByteChannel()" target="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6427" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_ReadableByteChannel()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6428" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_ReadableByteChannel()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6429" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_ReadableByteChannel()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6430" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_Reader()" target="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6431" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_Reader()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6432" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_Reader_Offset()" target="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6433" source="org.apache.commons.io.IOUtilsTestCase.testReadFully_Reader_Offset()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6434" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6435" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6436" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()" target="org.apache.commons.io.IOUtils.readLines(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6437" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6438" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6439" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6440" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()" target="org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6441" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()" target="org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6442" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6443" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()" target="org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6444" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6445" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()" target="org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6446" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()" target="org.apache.commons.io.IOUtils.readLines(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6447" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6448" source="org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()" target="org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6449" source="org.apache.commons.io.IOUtilsTestCase.testRead_ReadableByteChannel()" target="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6450" source="org.apache.commons.io.IOUtilsTestCase.testRead_ReadableByteChannel()" target="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6451" source="org.apache.commons.io.IOUtilsTestCase.testRead_ReadableByteChannel()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6452" source="org.apache.commons.io.IOUtilsTestCase.testRead_ReadableByteChannel()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6453" source="org.apache.commons.io.IOUtilsTestCase.testRead_ReadableByteChannel()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6454" source="org.apache.commons.io.IOUtilsTestCase.testSkipFully_InputStream()" target="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6455" source="org.apache.commons.io.IOUtilsTestCase.testSkipFully_InputStream()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6456" source="org.apache.commons.io.IOUtilsTestCase.testSkipFully_ReadableByteChannel()" target="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6457" source="org.apache.commons.io.IOUtilsTestCase.testSkipFully_ReadableByteChannel()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6458" source="org.apache.commons.io.IOUtilsTestCase.testSkipFully_ReadableByteChannel()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6459" source="org.apache.commons.io.IOUtilsTestCase.testSkipFully_ReadableByteChannel()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6460" source="org.apache.commons.io.IOUtilsTestCase.testSkipFully_Reader()" target="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6461" source="org.apache.commons.io.IOUtilsTestCase.testSkipFully_Reader()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6462" source="org.apache.commons.io.IOUtilsTestCase.testSkip_FileReader()" target="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6463" source="org.apache.commons.io.IOUtilsTestCase.testSkip_FileReader()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6464" source="org.apache.commons.io.IOUtilsTestCase.testSkip_FileReader()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6465" source="org.apache.commons.io.IOUtilsTestCase.testSkip_InputStream()" target="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6466" source="org.apache.commons.io.IOUtilsTestCase.testSkip_InputStream()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6467" source="org.apache.commons.io.IOUtilsTestCase.testSkip_InputStream()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6468" source="org.apache.commons.io.IOUtilsTestCase.testSkip_ReadableByteChannel()" target="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6469" source="org.apache.commons.io.IOUtilsTestCase.testSkip_ReadableByteChannel()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6470" source="org.apache.commons.io.IOUtilsTestCase.testSkip_ReadableByteChannel()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6471" source="org.apache.commons.io.IOUtilsTestCase.testSkip_ReadableByteChannel()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6472" source="org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6473" source="org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()" target="org.apache.commons.io.IOUtils.toString(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6474" source="org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()" target="org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6475" source="org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6476" source="org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6477" source="org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6478" source="org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6479" source="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStreamWithBufferSize_InputStream()" target="org.apache.commons.io.IOUtils.toBufferedInputStream(java.io.InputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6480" source="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStreamWithBufferSize_InputStream()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6481" source="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStreamWithBufferSize_InputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6482" source="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStreamWithBufferSize_InputStream()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6483" source="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStreamWithBufferSize_InputStream()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6484" source="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStreamWithBufferSize_InputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6485" source="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStream_InputStream()" target="org.apache.commons.io.IOUtils.toBufferedInputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6486" source="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStream_InputStream()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6487" source="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStream_InputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6488" source="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStream_InputStream()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6489" source="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStream_InputStream()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6490" source="org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStream_InputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6491" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6492" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6493" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6494" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6495" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6496" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_NegativeSize()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6497" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_NegativeSize()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6498" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_Size()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6499" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_Size()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6500" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_Size()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6501" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_Size()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6502" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_Size()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6503" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeIllegal()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6504" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeIllegal()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6505" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeLong()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6506" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeLong()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6507" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeLong()" target="java.lang.Integer#MAX_VALUE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6508" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeZero()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6509" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeZero()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6510" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeZero()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6511" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_Reader()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6512" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_Reader()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6513" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_String()" target="org.apache.commons.io.IOUtils.toString(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6514" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_String()" target="org.apache.commons.io.IOUtils.toByteArray(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6515" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_String()" target="org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6516" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_String()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6517" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URI()" target="org.apache.commons.io.IOUtils.toByteArray(java.net.URI)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6518" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URI()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6519" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URI()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6520" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URI()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6521" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URL()" target="org.apache.commons.io.IOUtils.toByteArray(java.net.URL)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6522" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URL()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6523" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URL()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6524" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URL()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6525" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URLConnection()" target="org.apache.commons.io.IOUtils.toByteArray(java.net.URLConnection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6526" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URLConnection()" target="org.apache.commons.io.IOUtils.close(java.net.URLConnection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6527" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URLConnection()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6528" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URLConnection()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6529" source="org.apache.commons.io.IOUtilsTestCase.testToByteArray_URLConnection()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6530" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream()" target="org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6531" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6532" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6533" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6534" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6535" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream_CharsetName()" target="org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6536" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream_CharsetName()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6537" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream_CharsetName()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6538" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream_CharsetName()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6539" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream_CharsetName()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6540" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_Reader()" target="org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6541" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_Reader()" target="org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6542" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_Reader()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6543" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_Reader()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6544" source="org.apache.commons.io.IOUtilsTestCase.testToCharArray_Reader()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6545" source="org.apache.commons.io.IOUtilsTestCase.testToInputStream_CharSequence()" target="org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6546" source="org.apache.commons.io.IOUtilsTestCase.testToInputStream_CharSequence()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6547" source="org.apache.commons.io.IOUtilsTestCase.testToInputStream_CharSequence()" target="org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6548" source="org.apache.commons.io.IOUtilsTestCase.testToInputStream_CharSequence()" target="org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6549" source="org.apache.commons.io.IOUtilsTestCase.testToInputStream_String()" target="org.apache.commons.io.IOUtils.toInputStream(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6550" source="org.apache.commons.io.IOUtilsTestCase.testToInputStream_String()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6551" source="org.apache.commons.io.IOUtilsTestCase.testToInputStream_String()" target="org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6552" source="org.apache.commons.io.IOUtilsTestCase.testToInputStream_String()" target="org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6553" source="org.apache.commons.io.IOUtilsTestCase.testToString_ByteArray()" target="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6554" source="org.apache.commons.io.IOUtilsTestCase.testToString_ByteArray()" target="org.apache.commons.io.IOUtils.toString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6555" source="org.apache.commons.io.IOUtilsTestCase.testToString_ByteArray()" target="org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6556" source="org.apache.commons.io.IOUtilsTestCase.testToString_ByteArray()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6557" source="org.apache.commons.io.IOUtilsTestCase.testToString_InputStream()" target="org.apache.commons.io.IOUtils.toString(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6558" source="org.apache.commons.io.IOUtilsTestCase.testToString_InputStream()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6559" source="org.apache.commons.io.IOUtilsTestCase.testToString_InputStream()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6560" source="org.apache.commons.io.IOUtilsTestCase.testToString_Reader()" target="org.apache.commons.io.IOUtils.toString(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6561" source="org.apache.commons.io.IOUtilsTestCase.testToString_Reader()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6562" source="org.apache.commons.io.IOUtilsTestCase.testToString_Reader()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6563" source="org.apache.commons.io.IOUtilsTestCase.testToString_URI()" target="org.apache.commons.io.IOUtils.toString(java.net.URI)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6564" source="org.apache.commons.io.IOUtilsTestCase.testToString_URI()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6565" source="org.apache.commons.io.IOUtilsTestCase.testToString_URI()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6566" source="org.apache.commons.io.IOUtilsTestCase.testToString_URI(java.lang.String)" target="org.apache.commons.io.IOUtils.toString(java.net.URI,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6567" source="org.apache.commons.io.IOUtilsTestCase.testToString_URI(java.lang.String)" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6568" source="org.apache.commons.io.IOUtilsTestCase.testToString_URI(java.lang.String)" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6569" source="org.apache.commons.io.IOUtilsTestCase.testToString_URI_CharsetName()" target="org.apache.commons.io.IOUtilsTestCase.testToString_URI(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6570" source="org.apache.commons.io.IOUtilsTestCase.testToString_URI_CharsetNameNull()" target="org.apache.commons.io.IOUtilsTestCase.testToString_URI(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6571" source="org.apache.commons.io.IOUtilsTestCase.testToString_URL()" target="org.apache.commons.io.IOUtils.toString(java.net.URL)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6572" source="org.apache.commons.io.IOUtilsTestCase.testToString_URL()" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6573" source="org.apache.commons.io.IOUtilsTestCase.testToString_URL()" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6574" source="org.apache.commons.io.IOUtilsTestCase.testToString_URL(java.lang.String)" target="org.apache.commons.io.IOUtils.toString(java.net.URL,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6575" source="org.apache.commons.io.IOUtilsTestCase.testToString_URL(java.lang.String)" target="org.apache.commons.io.IOUtilsTestCase#m_testFile">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6576" source="org.apache.commons.io.IOUtilsTestCase.testToString_URL(java.lang.String)" target="org.apache.commons.io.IOUtilsTestCase#FILE_SIZE">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6577" source="org.apache.commons.io.IOUtilsTestCase.testToString_URL_CharsetName()" target="org.apache.commons.io.IOUtilsTestCase.testToString_URL(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6578" source="org.apache.commons.io.IOUtilsTestCase.testToString_URL_CharsetNameNull()" target="org.apache.commons.io.IOUtilsTestCase.testToString_URL(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6579" source="org.apache.commons.io.IOUtilsWriteTestCase#inData" target="org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6580" source="org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6581" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6582" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6583" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6584" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6585" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6586" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6587" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6588" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6589" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6590" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6591" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6592" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6593" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6594" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6595" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6596" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6597" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6598" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6599" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6600" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6601" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6602" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6603" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6604" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6605" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6606" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6607" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6608" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6609" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6610" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()" target="org.apache.commons.io.output.ByteArrayOutputStream.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6611" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6612" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullStream()" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6613" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6614" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6615" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6616" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6617" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6618" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6619" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6620" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6621" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6622" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6623" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6624" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()" target="org.apache.commons.io.output.ByteArrayOutputStream.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6625" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6626" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullStream()" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6627" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6628" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6629" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6630" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6631" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()" target="org.apache.commons.io.output.ByteArrayOutputStream.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6632" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6633" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6634" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6635" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6636" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6637" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6638" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6639" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6640" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6641" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()" target="org.apache.commons.io.output.ByteArrayOutputStream.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6642" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()" target="org.apache.commons.io.IOUtils#LINE_SEPARATOR">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6643" source="org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullStream()" target="org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6644" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6645" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6646" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()" target="org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6647" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6648" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6649" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6650" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6651" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6652" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6653" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6654" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6655" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()" target="org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6656" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6657" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6658" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6659" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullStream()" target="org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6660" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6661" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6662" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6663" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()" target="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6664" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6665" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6666" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6667" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6668" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6669" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6670" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6671" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()" target="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6672" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6673" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6674" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6675" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6676" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6677" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()" target="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6678" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6679" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6680" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6681" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6682" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6683" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6684" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6685" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6686" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6687" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6688" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullWriter()" target="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6689" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullWriter()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6690" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6691" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6692" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()" target="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6693" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6694" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6695" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullWriter()" target="org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6696" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullWriter()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6697" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6698" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6699" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()" target="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6700" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6701" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6702" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6703" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6704" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6705" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6706" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6707" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6708" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()" target="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6709" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6710" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6711" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6712" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6713" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6714" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6715" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()" target="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6716" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6717" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6718" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6719" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()" target="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6720" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6721" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6722" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6723" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()" target="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6724" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6725" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6726" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6727" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6728" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6729" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()" target="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6730" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6731" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6732" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6733" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6734" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6735" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6736" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()" target="org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6737" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6738" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6739" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6740" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()" target="org.apache.commons.io.IOUtils.write(char[],java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6741" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6742" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6743" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6744" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6745" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6746" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6747" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6748" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()" target="org.apache.commons.io.IOUtils.write(char[],java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6749" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6750" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6751" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()" target="org.apache.commons.io.IOUtils.write(char[],java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6752" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6753" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6754" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6755" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream()" target="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6756" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6757" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6758" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6759" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6760" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6761" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6762" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6763" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6764" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding()" target="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6765" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6766" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6767" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6768" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6769" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6770" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6771" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullData()" target="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6772" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6773" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6774" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6775" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullStream()" target="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6776" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6777" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6778" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6779" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullData()" target="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6780" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6781" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6782" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6783" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6784" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6785" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullEncoding()" target="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6786" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6787" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6788" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6789" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6790" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullEncoding()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6791" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullEncoding()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6792" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullStream()" target="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6793" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6794" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6795" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6796" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter()" target="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6797" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6798" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6799" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6800" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6801" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6802" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6803" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6804" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter_Encoding_nullData()" target="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6805" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6806" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6807" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter_Encoding_nullStream()" target="org.apache.commons.io.IOUtils.write(java.lang.CharSequence,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6808" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter_Encoding_nullStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6809" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6810" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6811" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6812" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6813" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6814" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6815" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6816" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6817" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6818" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6819" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6820" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6821" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6822" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6823" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6824" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6825" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6826" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6827" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6828" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6829" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6830" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6831" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6832" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6833" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6834" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6835" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6836" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6837" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6838" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6839" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6840" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6841" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6842" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6843" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6844" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6845" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6846" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6847" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6848" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6849" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6850" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6851" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6852" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6853" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6854" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6855" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()" target="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6856" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6857" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()" target="int#length">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6858" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6859" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6860" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6861" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()" target="org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6862" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()" target="org.apache.commons.io.output.ByteArrayOutputStream.size()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6863" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()" target="org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6864" source="org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()" target="org.apache.commons.io.IOUtilsWriteTestCase#inData">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6865" source="org.apache.commons.io.LineIterator#bufferedReader" target="org.apache.commons.io.LineIterator(java.io.Reader)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6866" source="org.apache.commons.io.LineIterator.hasNext()" target="org.apache.commons.io.LineIterator.isValidLine(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6867" source="org.apache.commons.io.LineIterator.hasNext()" target="org.apache.commons.io.LineIterator.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6868" source="org.apache.commons.io.LineIterator.hasNext()" target="org.apache.commons.io.LineIterator#cachedLine">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6869" source="org.apache.commons.io.LineIterator.hasNext()" target="org.apache.commons.io.LineIterator#finished">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6870" source="org.apache.commons.io.LineIterator.hasNext()" target="org.apache.commons.io.LineIterator#bufferedReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6871" source="org.apache.commons.io.LineIterator#finished" target="org.apache.commons.io.LineIterator.hasNext()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6872" source="org.apache.commons.io.LineIterator#cachedLine" target="org.apache.commons.io.LineIterator.hasNext()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6873" source="org.apache.commons.io.LineIterator.next()" target="org.apache.commons.io.LineIterator.nextLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6874" source="org.apache.commons.io.LineIterator.nextLine()" target="org.apache.commons.io.LineIterator.hasNext()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6875" source="org.apache.commons.io.LineIterator.nextLine()" target="org.apache.commons.io.LineIterator#cachedLine">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6876" source="org.apache.commons.io.LineIterator#cachedLine" target="org.apache.commons.io.LineIterator.nextLine()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6877" source="org.apache.commons.io.LineIterator.close()" target="org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6878" source="org.apache.commons.io.LineIterator#finished" target="org.apache.commons.io.LineIterator.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6879" source="org.apache.commons.io.LineIterator.close()" target="org.apache.commons.io.LineIterator#bufferedReader">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6880" source="org.apache.commons.io.LineIterator#cachedLine" target="org.apache.commons.io.LineIterator.close()">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6881" source="org.apache.commons.io.LineIterator.closeQuietly(org.apache.commons.io.LineIterator)" target="org.apache.commons.io.LineIterator.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6882" source="org.apache.commons.io.LineIteratorTestCase(java.lang.String)" target="org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6883" source="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,int)" target="org.apache.commons.io.LineIteratorTestCase.createStringLines(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6884" source="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,int)" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6885" source="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,java.lang.String,int)" target="org.apache.commons.io.LineIteratorTestCase.createStringLines(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6886" source="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,java.lang.String,int)" target="org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6887" source="org.apache.commons.io.LineIteratorTestCase.assertLines(java.util.List,org.apache.commons.io.LineIterator)" target="org.apache.commons.io.LineIterator.nextLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6888" source="org.apache.commons.io.LineIteratorTestCase.assertLines(java.util.List,org.apache.commons.io.LineIterator)" target="org.apache.commons.io.LineIterator.hasNext()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6889" source="org.apache.commons.io.LineIteratorTestCase.assertLines(java.util.List,org.apache.commons.io.LineIterator)" target="org.apache.commons.io.LineIterator.closeQuietly(org.apache.commons.io.LineIterator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6890" source="org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6891" source="org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)" target="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6892" source="org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)" target="org.apache.commons.io.FileUtils.lineIterator(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6893" source="org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)" target="org.apache.commons.io.LineIterator.remove()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6894" source="org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)" target="org.apache.commons.io.LineIterator.hasNext()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6895" source="org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)" target="org.apache.commons.io.LineIterator.next()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6896" source="org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)" target="org.apache.commons.io.LineIterator.nextLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6897" source="org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)" target="org.apache.commons.io.LineIterator.closeQuietly(org.apache.commons.io.LineIterator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6898" source="org.apache.commons.io.LineIteratorTestCase.setUp()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6899" source="org.apache.commons.io.LineIteratorTestCase.setUp()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6900" source="org.apache.commons.io.LineIteratorTestCase.tearDown()" target="org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6901" source="org.apache.commons.io.LineIteratorTestCase.tearDown()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6902" source="org.apache.commons.io.LineIteratorTestCase.testCloseEarly()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6903" source="org.apache.commons.io.LineIteratorTestCase.testCloseEarly()" target="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6904" source="org.apache.commons.io.LineIteratorTestCase.testCloseEarly()" target="org.apache.commons.io.FileUtils.lineIterator(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6905" source="org.apache.commons.io.LineIteratorTestCase.testCloseEarly()" target="org.apache.commons.io.LineIterator.next()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6906" source="org.apache.commons.io.LineIteratorTestCase.testCloseEarly()" target="org.apache.commons.io.LineIterator.hasNext()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6907" source="org.apache.commons.io.LineIteratorTestCase.testCloseEarly()" target="org.apache.commons.io.LineIterator.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6908" source="org.apache.commons.io.LineIteratorTestCase.testCloseEarly()" target="org.apache.commons.io.LineIterator.nextLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6909" source="org.apache.commons.io.LineIteratorTestCase.testCloseEarly()" target="org.apache.commons.io.LineIterator.closeQuietly(org.apache.commons.io.LineIterator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6910" source="org.apache.commons.io.LineIteratorTestCase.testConstructor()" target="org.apache.commons.io.LineIterator(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6911" source="org.apache.commons.io.LineIteratorTestCase$2(java.io.Reader)" target="org.apache.commons.io.LineIterator(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6912" source="org.apache.commons.io.LineIterator.isValidLine(java.lang.String)" target="org.apache.commons.io.LineIteratorTestCase$2.isValidLine(java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
    </edge>
    <edge id="e6913" source="org.apache.commons.io.LineIteratorTestCase.testFiltering(java.util.List,java.io.Reader)" target="org.apache.commons.io.LineIteratorTestCase$2(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6914" source="org.apache.commons.io.LineIteratorTestCase.testFiltering(java.util.List,java.io.Reader)" target="org.apache.commons.io.LineIterator(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6915" source="org.apache.commons.io.LineIteratorTestCase.testFiltering(java.util.List,java.io.Reader)" target="org.apache.commons.io.LineIterator.remove()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6916" source="org.apache.commons.io.LineIteratorTestCase.testFiltering(java.util.List,java.io.Reader)" target="org.apache.commons.io.LineIterator.hasNext()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6917" source="org.apache.commons.io.LineIteratorTestCase.testFiltering(java.util.List,java.io.Reader)" target="org.apache.commons.io.LineIterator.next()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6918" source="org.apache.commons.io.LineIteratorTestCase.testFiltering(java.util.List,java.io.Reader)" target="org.apache.commons.io.LineIterator.nextLine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6919" source="org.apache.commons.io.LineIteratorTestCase.testFiltering(java.util.List,java.io.Reader)" target="org.apache.commons.io.LineIterator.closeQuietly(org.apache.commons.io.LineIterator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6920" source="org.apache.commons.io.LineIteratorTestCase.testFilteringBufferedReader()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6921" source="org.apache.commons.io.LineIteratorTestCase.testFilteringBufferedReader()" target="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6922" source="org.apache.commons.io.LineIteratorTestCase.testFilteringBufferedReader()" target="org.apache.commons.io.LineIteratorTestCase.testFiltering(java.util.List,java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6923" source="org.apache.commons.io.LineIteratorTestCase.testFilteringFileReader()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6924" source="org.apache.commons.io.LineIteratorTestCase.testFilteringFileReader()" target="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6925" source="org.apache.commons.io.LineIteratorTestCase.testFilteringFileReader()" target="org.apache.commons.io.LineIteratorTestCase.testFiltering(java.util.List,java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6926" source="org.apache.commons.io.LineIteratorTestCase.testInvalidEncoding()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6927" source="org.apache.commons.io.LineIteratorTestCase.testInvalidEncoding()" target="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6928" source="org.apache.commons.io.LineIteratorTestCase.testInvalidEncoding()" target="org.apache.commons.io.FileUtils.lineIterator(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6929" source="org.apache.commons.io.LineIteratorTestCase.testInvalidEncoding()" target="org.apache.commons.io.LineIterator.closeQuietly(org.apache.commons.io.LineIterator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6930" source="org.apache.commons.io.LineIteratorTestCase.testMissingFile()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6931" source="org.apache.commons.io.LineIteratorTestCase.testMissingFile()" target="org.apache.commons.io.FileUtils.lineIterator(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6932" source="org.apache.commons.io.LineIteratorTestCase.testMissingFile()" target="org.apache.commons.io.LineIterator.closeQuietly(org.apache.commons.io.LineIterator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6933" source="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyDefaultEncoding()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6934" source="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyDefaultEncoding()" target="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6935" source="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyDefaultEncoding()" target="org.apache.commons.io.FileUtils.lineIterator(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6936" source="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyDefaultEncoding()" target="org.apache.commons.io.LineIteratorTestCase.assertLines(java.util.List,org.apache.commons.io.LineIterator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6937" source="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyNullEncoding()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6938" source="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyNullEncoding()" target="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6939" source="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyNullEncoding()" target="org.apache.commons.io.FileUtils.lineIterator(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6940" source="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyNullEncoding()" target="org.apache.commons.io.LineIteratorTestCase.assertLines(java.util.List,org.apache.commons.io.LineIterator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6941" source="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyUtf8Encoding()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6942" source="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyUtf8Encoding()" target="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6943" source="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyUtf8Encoding()" target="org.apache.commons.io.FileUtils.lineIterator(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6944" source="org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyUtf8Encoding()" target="org.apache.commons.io.LineIteratorTestCase.assertLines(java.util.List,org.apache.commons.io.LineIterator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6945" source="org.apache.commons.io.LineIteratorTestCase.testNextOnly()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6946" source="org.apache.commons.io.LineIteratorTestCase.testNextOnly()" target="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6947" source="org.apache.commons.io.LineIteratorTestCase.testNextOnly()" target="org.apache.commons.io.FileUtils.lineIterator(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6948" source="org.apache.commons.io.LineIteratorTestCase.testNextOnly()" target="org.apache.commons.io.LineIterator.next()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6949" source="org.apache.commons.io.LineIteratorTestCase.testNextOnly()" target="org.apache.commons.io.LineIterator.hasNext()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6950" source="org.apache.commons.io.LineIteratorTestCase.testNextOnly()" target="org.apache.commons.io.LineIterator.closeQuietly(org.apache.commons.io.LineIterator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6951" source="org.apache.commons.io.LineIteratorTestCase.testNextWithException()" target="org.apache.commons.io.LineIteratorTestCase$1(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6952" source="org.apache.commons.io.LineIteratorTestCase.testNextWithException()" target="org.apache.commons.io.LineIterator(java.io.Reader)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6953" source="org.apache.commons.io.LineIteratorTestCase.testNextWithException()" target="org.apache.commons.io.LineIterator.hasNext()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6954" source="org.apache.commons.io.LineIteratorTestCase.testOneLines()" target="org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6955" source="org.apache.commons.io.LineIteratorTestCase.testThreeLines()" target="org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6956" source="org.apache.commons.io.LineIteratorTestCase.testTwoLines()" target="org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6957" source="org.apache.commons.io.LineIteratorTestCase.testValidEncoding()" target="org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6958" source="org.apache.commons.io.LineIteratorTestCase.testValidEncoding()" target="org.apache.commons.io.LineIteratorTestCase.createLinesFile(java.io.File,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6959" source="org.apache.commons.io.LineIteratorTestCase.testValidEncoding()" target="org.apache.commons.io.FileUtils.lineIterator(java.io.File,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6960" source="org.apache.commons.io.LineIteratorTestCase.testValidEncoding()" target="org.apache.commons.io.LineIterator.hasNext()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6961" source="org.apache.commons.io.LineIteratorTestCase.testValidEncoding()" target="org.apache.commons.io.LineIterator.next()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6962" source="org.apache.commons.io.LineIteratorTestCase.testValidEncoding()" target="org.apache.commons.io.LineIterator.closeQuietly(org.apache.commons.io.LineIterator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6963" source="org.apache.commons.io.LineIteratorTestCase.testZeroLines()" target="org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6964" source="org.apache.commons.io.TaggedIOException(java.io.IOException,java.io.Serializable)" target="org.apache.commons.io.IOExceptionWithCause(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6965" source="org.apache.commons.io.TaggedIOException#tag" target="org.apache.commons.io.TaggedIOException(java.io.IOException,java.io.Serializable)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6966" source="org.apache.commons.io.TaggedIOException.isTaggedWith(java.lang.Throwable,java.lang.Object)" target="org.apache.commons.io.TaggedIOException#tag">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6967" source="org.apache.commons.io.TaggedIOException.getTag()" target="org.apache.commons.io.TaggedIOException#tag">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6968" source="org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(java.lang.Throwable,java.lang.Object)" target="org.apache.commons.io.TaggedIOException.isTaggedWith(java.lang.Throwable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6969" source="org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(java.lang.Throwable,java.lang.Object)" target="org.apache.commons.io.TaggedIOException.getCause()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6970" source="org.apache.commons.io.TaggedIOExceptionTest.testTaggedIOException()" target="org.apache.commons.io.TaggedIOException(java.io.IOException,java.io.Serializable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6971" source="org.apache.commons.io.TaggedIOExceptionTest.testTaggedIOException()" target="org.apache.commons.io.TaggedIOException.isTaggedWith(java.lang.Throwable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6972" source="org.apache.commons.io.TaggedIOExceptionTest.testTaggedIOException()" target="org.apache.commons.io.TaggedIOException.getCause()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6973" source="org.apache.commons.io.ThreadMonitor#thread" target="org.apache.commons.io.ThreadMonitor(java.lang.Thread,long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6974" source="org.apache.commons.io.ThreadMonitor#timeout" target="org.apache.commons.io.ThreadMonitor(java.lang.Thread,long)">
      <data key="type">WRITE_OPERATION</data>
    </edge>
    <edge id="e6975" source="org.apache.commons.io.ThreadMonitor.start(java.lang.Thread,long)" target="org.apache.commons.io.ThreadMonitor(java.lang.Thread,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6976" source="org.apache.commons.io.ThreadMonitor.start(java.lang.Thread,long)" target="org.apache.commons.io.ThreadMonitor#class">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6977" source="org.apache.commons.io.ThreadMonitor.start(long)" target="org.apache.commons.io.ThreadMonitor.start(java.lang.Thread,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6978" source="org.apache.commons.io.ThreadMonitor.run()" target="org.apache.commons.io.ThreadMonitor#timeout">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6979" source="org.apache.commons.io.ThreadMonitor.run()" target="org.apache.commons.io.ThreadMonitor#thread">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6980" source="org.apache.commons.io.ThreadMonitorTestCase.testCompletedWithoutTimeout()" target="org.apache.commons.io.ThreadMonitor.start(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6981" source="org.apache.commons.io.ThreadMonitorTestCase.testCompletedWithoutTimeout()" target="org.apache.commons.io.ThreadMonitor.stop(java.lang.Thread)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6982" source="org.apache.commons.io.ThreadMonitorTestCase.testNoTimeout()" target="org.apache.commons.io.ThreadMonitor.start(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6983" source="org.apache.commons.io.ThreadMonitorTestCase.testNoTimeout()" target="org.apache.commons.io.ThreadMonitor.stop(java.lang.Thread)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6984" source="org.apache.commons.io.ThreadMonitorTestCase.testTimeout()" target="org.apache.commons.io.ThreadMonitor.start(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6985" source="org.apache.commons.io.ThreadMonitorTestCase.testTimeout()" target="org.apache.commons.io.ThreadMonitor.stop(java.lang.Thread)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6986" source="org.apache.commons.io.IOCase#SENSITIVE" target="org.apache.commons.io.IOCase(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6987" source="org.apache.commons.io.IOCase#INSENSITIVE" target="org.apache.commons.io.IOCase(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6988" source="org.apache.commons.io.IOCase#SYSTEM" target="org.apache.commons.io.IOCase(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6989" source="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)" target="org.apache.commons.io.IOCase#sensitive">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6990" source="org.apache.commons.io.IOCase.checkEquals(java.lang.String,java.lang.String)" target="org.apache.commons.io.IOCase#sensitive">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6991" source="org.apache.commons.io.IOCase.checkRegionMatches(java.lang.String,int,java.lang.String)" target="org.apache.commons.io.IOCase#sensitive">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6992" source="org.apache.commons.io.IOCase.checkStartsWith(java.lang.String,java.lang.String)" target="org.apache.commons.io.IOCase#sensitive">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6993" source="org.apache.commons.io.IOCase.isCaseSensitive()" target="org.apache.commons.io.IOCase#sensitive">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6994" source="org.apache.commons.io.IOCase.checkCompareTo(java.lang.String,java.lang.String)" target="org.apache.commons.io.IOCase#sensitive">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6995" source="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" target="org.apache.commons.io.IOCase.checkRegionMatches(java.lang.String,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6996" source="org.apache.commons.io.IOCase.readResolve()" target="org.apache.commons.io.IOCase.forName(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6997" source="org.apache.commons.io.IOCase.readResolve()" target="org.apache.commons.io.IOCase#name">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6998" source="org.apache.commons.io.IOCase.getName()" target="org.apache.commons.io.IOCase#name">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e6999" source="org.apache.commons.io.IOCase.toString()" target="org.apache.commons.io.IOCase#name">
      <data key="type">READ_OPERATION</data>
    </edge>
    <edge id="e7000" source="org.apache.commons.io.IOCase.forName(java.lang.String)" target="org.apache.commons.io.IOCase.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
  </graph>
</graphml>
