<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <key id="type" for="node" attr.name="type" attr.type="string" />
  <key id="type" for="edge" attr.name="type" attr.type="string" />
  <key id="USES_REFLEXION" for="node" attr.name="USES_REFLEXION" attr.type="boolean">
    <default>false</default>
  </key>
  <graph id="G" edgedefault="directed" buildtime="784">
    <node id="org.apache.commons.codec.net.BCodec()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodec(java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodec(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.RFC1522Codec()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodec.doDecoding(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodec.doEncoding(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodec.decode(java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodec.decode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.DecoderException(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodec.encode(java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodec.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.RFC1522Codec.decodeText(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.DecoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodec.encode(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodec.getCharset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodec.encode(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.RFC1522Codec.encodeText(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.EncoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.RFC1522Codec.encodeText(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodecTest.testDecodeObjects()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodecTest.testEncodeObjects()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodecTest.testInvalidEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodecTest.testNullInput()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.BCodecTest.constructString(int[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec(java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec.doDecoding(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec.doEncoding(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec.decode(java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec.decode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec.encode(java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec.encode(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec.getCharset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec.encode(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodecTest.testDecodeObjects()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec.setEncodeBlanks(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodecTest.testEncodeObjects()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodecTest.testInvalidEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodecTest.testLetUsMakeCloverHappy()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodec.isEncodeBlanks()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodecTest.testNullInput()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodecTest.constructString(int[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec(java.nio.charset.Charset,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec(java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.decode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.Utils.digit16(byte)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.encode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet,byte[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int,boolean,java.io.ByteArrayOutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int,java.io.ByteArrayOutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.getCharset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testInvalidEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.constructString(int[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.RFC1522Codec.getEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.RFC1522Codec.doDecoding(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.RFC1522Codec.doEncoding(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.RFC1522CodecTest$RFC1522TestCodec()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.RFC1522CodecTest.assertExpectedDecoderException(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.RFC1522CodecTest.testNullInput()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodec(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodec.decode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodec.decodeUrl(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodec.encode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodec.encodeUrl(java.util.BitSet,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodec.decode(java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodec.decode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodec.encode(java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodec.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodec.decode(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodec.getDefaultCharset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodec.encode(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.constructString(int[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testDecodeObjects()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testEncodeNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testEncodeObjects()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.UtilsTest.testConstructor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.net.Utils()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32(int,byte[],boolean,byte)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32(boolean,byte)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32(byte)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32(int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32(int,byte[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32.isInAlphabet(byte)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32.decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32.encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecInputStream(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecInputStream.available()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecInputStream.read()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStream(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testByteByByte(byte[],byte[],int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testByChunk(byte[],byte[],int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32TestData.randomData(org.apache.commons.codec.binary.BaseNCodec,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32TestData.streamToBytes(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Codec105ErrorInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecOutputStream.close()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32TestData.streamToBytes(java.io.InputStream,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testRead0()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecOutputStream(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream,boolean,int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStream(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32OutputStreamTest.testByteByByte(byte[],byte[],int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32OutputStreamTest.testByChunk(byte[],byte[],int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32Test.testBase32Chunked()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32Test.testBase32HexSamples()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32Test.testBase32Samples()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32Test.testRandomBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32Test.testRandomBytesHex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec$Context()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32TestData.fill(byte[],int,java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base32TestData.resizeArray(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64(int,byte[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64(int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.isArrayByteBase64(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.isBase64(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.isBase64(byte)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.isBase64(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.decode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.decodeBase64(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.encodeInteger(java.math.BigInteger)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.toIntegerBytes(java.math.BigInteger)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.encodeBase64String(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.decodeInteger(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Codec13Test.utf8(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.BinaryDecoder.decode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.BinaryEncoder.encode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Codec13Test.testDecoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.Decoder.decode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Codec13Test.testEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.Encoder.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStream(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testByteByByte(byte[],byte[],int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testByChunk(byte[],byte[],int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64TestData.randomData(int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64TestData.streamToBytes(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64TestData.streamToBytes(java.io.InputStream,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testRead0()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream,boolean,int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStream(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64OutputStreamTest.testByteByByte(byte[],byte[],int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64OutputStreamTest.testByChunk(byte[],byte[],int,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testBase64()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testByteToStringVariations()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.decodeHex(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testCodeInteger1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testCodeInteger2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testCodeInteger3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testCodeInteger4()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testCodeIntegerNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testCodec112()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testCodec68()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testConstructors()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testDecodeEncode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testDecodePadOnly()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testEmptyBase64()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testEncodeDecode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.getRandom()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.toString(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testHugeLineSeparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testIsStringBase64()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testIsUrlSafe()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64.isUrlSafe()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testKnownDecodings()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testKnownEncodings()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testNonBase64Test()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testObjectEncode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testPairs()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testSingletons()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testSingletonsChunked()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testStringToByteVariations()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testTriplets()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testTripletsChunked()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testUUID()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64Test.testUrlSafe()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64TestData.bytesContain(byte[],byte)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64TestData.fill(byte[],int,java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Base64TestData.resizeArray(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.resizeBuffer(org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.available(org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecInputStream#context">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecOutputStream#context">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecOutputStream.eof()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecOutputStream.flush()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecOutputStream.write(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecTest$1(int,int,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByte()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecTest.testIsWhiteSpace()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecTest$2(int,int,int,int,byte)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BaseNCodecTest.testProvidePaddingByte()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodec.decode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodec.fromAscii(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodec.encode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodec.isEmpty(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodec.toByteArray(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodec.fromAscii(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodec.decode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodec.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodec.toAsciiString(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.assertDecodeObject(byte[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodec()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObjectException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex(java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.decode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.getCharset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.decode(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.toDigit(char,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.encode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.encode(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.encodeHexString(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.encodeHex(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.encodeHex(byte[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.encodeHex(byte[],char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer,char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.charsetSanityCheck(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.log(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.log(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.checkDecodeHexCharArrayOddCharacters(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testCustomCharset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testCustomCharsetBadName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testCustomCharsetToString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeByteArrayEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeByteArrayObjectEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeByteArrayOddCharacters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeByteBufferEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeByteBufferObjectEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeByteBufferOddCharacters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeCharArrayEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeClassCastException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters5()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testDecodeStringEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeByteArrayObjectEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeByteBufferObjectEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeClassCastException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayZeroes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferZeroes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testEncodeStringEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testGetCharset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testGetCharsetName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.Hex.getCharsetName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.HexTest.testRequiredCharset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.equals(java.lang.CharSequence,java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.getBytes(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.getBytesUnchecked(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.getBytesUtf16(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.newString(byte[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.newString(byte[],java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.getByteBuffer(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testConstructor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUnchecked(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedNullInput()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testNewString(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.newStringIso8859_1(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.newStringUtf16(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtils.newStringUtf16Le(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoder#engine">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoder.isConcat()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine.isConcat()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoder.getNameType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine.getNameType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoder.getRuleType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(org.apache.commons.codec.language.bm.NameType)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(org.apache.commons.codec.language.bm.RuleType)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderAbstractTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.assertNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoder,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Lang.loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages.getInstance(org.apache.commons.codec.language.bm.NameType)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages.getInstance(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.patternAndContextMatches(java.lang.CharSequence,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.cacheSubSequence(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.test()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.test(java.lang.CharSequence,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.test(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Lang.guessLanguage(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Lang.guessLanguages(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages$LanguageSet.isSingleton()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages$LanguageSet.getAny()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Lang$LangRule(java.util.regex.Pattern,java.util.Set,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Lang(java.util.List,org.apache.commons.codec.language.bm.Languages)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages.getLanguages()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Lang$LangRule.matches(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages$LanguageSet.from(java.util.Set)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.LanguageGuessingTest#lang">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Lang.instance(org.apache.commons.codec.language.bm.NameType)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages$LanguageSet.contains(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages$SomeLanguages(java.util.Set)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages$LanguageSet()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages$SomeLanguages.merge(org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages$SomeLanguages.restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages#NO_LANGUAGES">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages$2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages#ANY_LANGUAGE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages.langResourceName(org.apache.commons.codec.language.bm.NameType)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.NameType.getName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages(java.util.Set)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.makeString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$Phoneme.getPhonemeText()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.empty(org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder(org.apache.commons.codec.language.bm.Rule$Phoneme)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.append(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$Phoneme.append(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.apply(org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$PhonemeExpr.getPhonemes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$Phoneme.getLanguages()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages$LanguageSet.restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages$LanguageSet.isEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$Phoneme(org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.invoke()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.getPattern()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.getPhoneme()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine.join(java.lang.Iterable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication(java.util.Map,java.lang.CharSequence,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.getI()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.getPhonemeBuilder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.getPhonemes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.isFound()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$Phoneme.mergeWithLanguage(org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder(java.util.Set)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEnginePerformanceTest.test()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(java.util.Map,boolean,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$Phoneme#COMPARATOR">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$Phoneme$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$Phoneme(org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$Phoneme.join(org.apache.commons.codec.language.bm.Rule$Phoneme)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Languages$LanguageSet.merge(org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule#ALL_STRINGS_RMATCHER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$RPattern.isMatch(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.RuleType.getName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$2(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.parseRules(java.util.Scanner,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.createScanner(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.stripQuotes(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.createScanner(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.parsePhoneme(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$PhonemeList(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$5.isMatch(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.startsWith(java.lang.CharSequence,java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$6.isMatch(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.endsWith(java.lang.CharSequence,java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$7.isMatch(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule.contains(java.lang.CharSequence,char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$8.isMatch(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$9.isMatch(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$4()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$5()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$6()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$7()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$8()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.Rule$9()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.RuleTest.makePhonemes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.RuleTest$NegativeIntegerBaseMatcher()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.RuleTest.testSubSequenceWorks()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.NameType#ASHKENAZI">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.NameType(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.NameType#GENERIC">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.NameType#SEPHARDIC">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.RuleType#APPROX">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.RuleType(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.RuleType#EXACT">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.bm.RuleType#RULES">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.AbstractCaverphone.isEncodeEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoder.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.AbstractCaverphone.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone#encoder">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone.isCaverphoneEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone.caverphone(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone2.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.AbstractCaverphone()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone1Test()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone1Test.createStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone1Test.testEndMb()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodings(java.lang.String[][])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone2Test()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone2Test.createStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderAbstractTest.checkEncoding(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone2Test.testEndMb()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.copyData(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic$CologneBuffer(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.getNextChar()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.getNextPos()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.removeNext()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.addLeft(char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic$CologneBuffer(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic.encode(java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic.preprocess(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.length()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic.arrayContains(char[],char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.addRight(char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhoneticTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhoneticTest.createStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhonetic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhoneticTest.testAaclan()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhoneticTest.testExamples()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhoneticTest.testHyphen()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex$1.compare(org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule,org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getPatternLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.equals(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.hashCode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.createBranch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getReplacements(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.isVowel(char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex.cleanup(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.matches(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.processNextReplacement(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.finish()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex.parseRules(java.util.Scanner,java.lang.String,java.util.Map,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.soundex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.createStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeBasic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.conditionC0(java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.isVowel(char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.conditionCH0(java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.conditionL0(java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.conditionM0(java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleAEIOUY(org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleD(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleGH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleJ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleL(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleP(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleR(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleS(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleT(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleX(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.handleZ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.cleanInput(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.isSlavoGermanic(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.isSilentStart(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.getMaxCodeLen()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.isComplete()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.getAlternate()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.getPrimary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone2Test()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone2Test.createStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone2Test.checkDoubleMetaphone(int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.createStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphone(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphoneAlt(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest(java.lang.String[][],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.validateFixture(java.lang.String[][])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneNotEqualTest(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.DoubleMetaphone.setMaxCodeLen(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoder.cleanName(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeVowels(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeDoubleConsonants(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoder.getFirst3Last3(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoder.leftToRightThenRightToLeftProcessing(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoder.isVowel(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.createStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NINO_NoChange()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_One_Letter_to_Nothing()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Space_to_Nothing()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3_PETE_Returns_PETE()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3__ALEXANDER_Returns_Aleder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_13_Returns_1_Successfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_2_Returns5_Successfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_7_Return4_Successfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testIsVowel_CapitalA_ReturnsTrue()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testIsVowel_SmallD_ReturnsFalse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleDoubleVowel_BEETLE_NotRemoved()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_7_Returns4_Successfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisVowel_SingleVowel_ReturnsTrue()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Metaphone.isMetaphoneEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Metaphone.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Metaphone.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Metaphone.getMaxCodeLen()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Metaphone.isPreviousChar(java.lang.StringBuilder,int,char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Metaphone.isLastChar(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder,int,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder,int,char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Metaphone.isVowel(java.lang.StringBuilder,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.createStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Metaphone()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.assertMetaphoneEqual(java.lang.String[][])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.validateFixture(java.lang.String[][])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testExceedLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testMetaphone()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testPHTOF()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Metaphone.setMaxCodeLen(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testTCH()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testWhy()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Nysiis()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Nysiis(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Nysiis.transcodeRemaining(char,char,char,char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Nysiis.isVowel(char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Nysiis.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Nysiis.nysiis(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Nysiis.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexUtils.clean(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Nysiis.isStrict()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest#fullNysiis">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.createStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.assertEncodings(java.lang.String[][])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.encodeAll(java.lang.String[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testBran()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testCap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testDad()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testDan()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testDropBy()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testFal()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testOthers()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testRule1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testRule2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testRule4Dot1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testRule4Dot2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testRule5()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testRule6()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testRule7()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testSnad()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testSnat()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testSpecialBranches()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testTranan()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.NysiisTest.testTrueVariant()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundex#US_ENGLISH">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundex.difference(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.StringEncoder,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundex.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundex.soundex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundex.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundex.getMappingCode(char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundexTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundexTest.createStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundexTest.testDifference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundexTest.testEncode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundex(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.RefinedSoundex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Soundex#US_ENGLISH">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Soundex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Soundex.map(char)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Soundex.getSoundexMapping()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Soundex.difference(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Soundex.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Soundex.soundex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.createStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testB650()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testBadCharacters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testDifference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testEncodeBasic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testEncodeBatch2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testEncodeBatch3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testEncodeBatch4()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testHWRuleEx1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testHWRuleEx2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testHWRuleEx3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testMsSqlServer1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testMsSqlServer2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testMsSqlServer3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testNewInstance()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testNewInstance2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Soundex(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testNewInstance3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.Soundex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testSoundexUtilsConstructable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexUtils()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexUtils.differenceEncoded(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.B64Test.testB64T()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.B64()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.B64Test.testB64from24bit()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.B64.b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Crypt.crypt(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.CryptTest.testCrypt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Crypt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.CryptTest.testCryptWithBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest,java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md2(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.getMd2Digest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md2(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md2(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md2(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md5(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.getMd5Digest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md5(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md5(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md5(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha1(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha1(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha1(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.getSha1Digest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha1(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha224(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.getSha224Digest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha224(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha224(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha224(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha256(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.getSha256Digest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha256(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha256(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha256(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha384(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.getSha384Digest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha384(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha384(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha384(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha512(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.getSha512Digest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha512(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha512(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha512(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md2Hex(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md2Hex(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md2Hex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md2Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md5Hex(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md5Hex(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md5Hex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.md5Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha1Hex(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha224Hex(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha224Hex(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha224Hex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha224Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha256Hex(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha256Hex(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha256Hex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha256Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha384Hex(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha384Hex(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha384Hex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha384Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha512Hex(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha512Hex(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha512Hex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.sha512Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.shaHex(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.shaHex(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.shaHex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.getShaDigest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testConstructable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForByteBuffer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForByteBuffer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest,java.nio.ByteBuffer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testSha224()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testSha256()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testSha384()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testSha512()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testShaHex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac,java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacMd5(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha1(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha256(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha384(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha512(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(java.lang.String,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacAlgorithms.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testConstructor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullAlgo()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testNullKey()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.B64.getRandomSalt(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5CryptTest.testCtor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5Crypt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha2CryptTest.testCtor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha2Crypt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(byte[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(byte)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCrypt.body(int[],int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int,int,int,int,int,int[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCrypt.permOp(int,int,int,int,int[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCrypt.desSetKey(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCrypt.hPermOp(int,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(int,byte[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCryptTest.testCtor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCrypt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacAlgorithms#HMAC_MD5">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacAlgorithms(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacAlgorithms#HMAC_SHA_1">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacAlgorithms#HMAC_SHA_256">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacAlgorithms#HMAC_SHA_384">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.digest.HmacAlgorithms#HMAC_SHA_512">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.BinaryEncoderAbstractTest.testEncodeEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.BinaryEncoderAbstractTest.makeEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.BinaryEncoderAbstractTest.testEncodeNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.CharEncodingTest.testConstructor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.CharEncoding()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.CharsetsTest.testToCharset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.DecoderExceptionTest.testConstructor0()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.DecoderException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.DecoderExceptionTest.testConstructorString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.DecoderExceptionTest.testConstructorStringThrowable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.DecoderExceptionTest.testConstructorThrowable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.DecoderException(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.EncoderExceptionTest.testConstructor0()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.EncoderException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.EncoderExceptionTest.testConstructorString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.EncoderExceptionTest.testConstructorStringThrowable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.EncoderExceptionTest.testConstructorThrowable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.EncoderException(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderAbstractTest#stringEncoder">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderAbstractTest.createStringEncoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderAbstractTest.testEncodeEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderAbstractTest.testEncodeNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderAbstractTest.testEncodeWithInvalidObject()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderAbstractTest.testLocaleIndependence()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderComparator.compare(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderComparator(org.apache.commons.codec.StringEncoder)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex()">
      <data key="type">METHOD</data>
    </node>
    <edge id="e1" source="org.apache.commons.codec.net.BCodec()" target="org.apache.commons.codec.net.BCodec(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2" source="org.apache.commons.codec.net.BCodec(java.lang.String)" target="org.apache.commons.codec.net.BCodec(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3" source="org.apache.commons.codec.net.BCodec(java.nio.charset.Charset)" target="org.apache.commons.codec.net.RFC1522Codec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4" source="org.apache.commons.codec.net.BCodec.doDecoding(byte[])" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5" source="org.apache.commons.codec.net.BCodec.doEncoding(byte[])" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6" source="org.apache.commons.codec.net.BCodec.decode(java.lang.Object)" target="org.apache.commons.codec.net.BCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e7" source="org.apache.commons.codec.net.BCodec.decode(java.lang.Object)" target="org.apache.commons.codec.DecoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e8" source="org.apache.commons.codec.net.BCodec.encode(java.lang.Object)" target="org.apache.commons.codec.net.BCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e9" source="org.apache.commons.codec.net.BCodec.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e10" source="org.apache.commons.codec.net.BCodec.decode(java.lang.String)" target="org.apache.commons.codec.net.RFC1522Codec.decodeText(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e11" source="org.apache.commons.codec.net.BCodec.decode(java.lang.String)" target="org.apache.commons.codec.DecoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e12" source="org.apache.commons.codec.net.BCodec.encode(java.lang.String)" target="org.apache.commons.codec.net.BCodec.encode(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e13" source="org.apache.commons.codec.net.BCodec.encode(java.lang.String)" target="org.apache.commons.codec.net.BCodec.getCharset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e14" source="org.apache.commons.codec.net.BCodec.encode(java.lang.String,java.lang.String)" target="org.apache.commons.codec.net.RFC1522Codec.encodeText(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e15" source="org.apache.commons.codec.net.BCodec.encode(java.lang.String,java.lang.String)" target="org.apache.commons.codec.EncoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e16" source="org.apache.commons.codec.net.BCodec.encode(java.lang.String,java.nio.charset.Charset)" target="org.apache.commons.codec.net.RFC1522Codec.encodeText(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e17" source="org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode()" target="org.apache.commons.codec.net.BCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e18" source="org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode()" target="org.apache.commons.codec.net.BCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e19" source="org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode()" target="org.apache.commons.codec.net.BCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e20" source="org.apache.commons.codec.net.BCodecTest.testDecodeObjects()" target="org.apache.commons.codec.net.BCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e21" source="org.apache.commons.codec.net.BCodecTest.testDecodeObjects()" target="org.apache.commons.codec.net.BCodec.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e22" source="org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull()" target="org.apache.commons.codec.net.BCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e23" source="org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull()" target="org.apache.commons.codec.net.BCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e24" source="org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull()" target="org.apache.commons.codec.net.BCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e25" source="org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull()" target="org.apache.commons.codec.net.BCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e26" source="org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull()" target="org.apache.commons.codec.net.BCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e27" source="org.apache.commons.codec.net.BCodecTest.testEncodeObjects()" target="org.apache.commons.codec.net.BCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e28" source="org.apache.commons.codec.net.BCodecTest.testEncodeObjects()" target="org.apache.commons.codec.net.BCodec.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e29" source="org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull()" target="org.apache.commons.codec.net.BCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e30" source="org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull()" target="org.apache.commons.codec.net.BCodec.encode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e31" source="org.apache.commons.codec.net.BCodecTest.testInvalidEncoding()" target="org.apache.commons.codec.net.BCodec(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e32" source="org.apache.commons.codec.net.BCodecTest.testNullInput()" target="org.apache.commons.codec.net.BCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e33" source="org.apache.commons.codec.net.BCodecTest.testNullInput()" target="org.apache.commons.codec.net.BCodec.doDecoding(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e34" source="org.apache.commons.codec.net.BCodecTest.testNullInput()" target="org.apache.commons.codec.net.BCodec.doEncoding(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e35" source="org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.BCodecTest.constructString(int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e36" source="org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.BCodec(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e37" source="org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.BCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e38" source="org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.BCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e39" source="org.apache.commons.codec.net.QCodec()" target="org.apache.commons.codec.net.QCodec(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e40" source="org.apache.commons.codec.net.QCodec(java.lang.String)" target="org.apache.commons.codec.net.QCodec(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e41" source="org.apache.commons.codec.net.QCodec(java.nio.charset.Charset)" target="org.apache.commons.codec.net.RFC1522Codec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e42" source="org.apache.commons.codec.net.QCodec.doDecoding(byte[])" target="org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e43" source="org.apache.commons.codec.net.QCodec.doEncoding(byte[])" target="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e44" source="org.apache.commons.codec.net.QCodec.decode(java.lang.Object)" target="org.apache.commons.codec.net.QCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e45" source="org.apache.commons.codec.net.QCodec.decode(java.lang.Object)" target="org.apache.commons.codec.DecoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e46" source="org.apache.commons.codec.net.QCodec.encode(java.lang.Object)" target="org.apache.commons.codec.net.QCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e47" source="org.apache.commons.codec.net.QCodec.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e48" source="org.apache.commons.codec.net.QCodec.decode(java.lang.String)" target="org.apache.commons.codec.net.RFC1522Codec.decodeText(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e49" source="org.apache.commons.codec.net.QCodec.decode(java.lang.String)" target="org.apache.commons.codec.DecoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e50" source="org.apache.commons.codec.net.QCodec.encode(java.lang.String)" target="org.apache.commons.codec.net.QCodec.encode(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e51" source="org.apache.commons.codec.net.QCodec.encode(java.lang.String)" target="org.apache.commons.codec.net.QCodec.getCharset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e52" source="org.apache.commons.codec.net.QCodec.encode(java.lang.String,java.lang.String)" target="org.apache.commons.codec.net.RFC1522Codec.encodeText(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e53" source="org.apache.commons.codec.net.QCodec.encode(java.lang.String,java.lang.String)" target="org.apache.commons.codec.EncoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e54" source="org.apache.commons.codec.net.QCodec.encode(java.lang.String,java.nio.charset.Charset)" target="org.apache.commons.codec.net.RFC1522Codec.encodeText(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e55" source="org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode()" target="org.apache.commons.codec.net.QCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e56" source="org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode()" target="org.apache.commons.codec.net.QCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e57" source="org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode()" target="org.apache.commons.codec.net.QCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e58" source="org.apache.commons.codec.net.QCodecTest.testDecodeObjects()" target="org.apache.commons.codec.net.QCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e59" source="org.apache.commons.codec.net.QCodecTest.testDecodeObjects()" target="org.apache.commons.codec.net.QCodec.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e60" source="org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull()" target="org.apache.commons.codec.net.QCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e61" source="org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull()" target="org.apache.commons.codec.net.QCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e62" source="org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks()" target="org.apache.commons.codec.net.QCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e63" source="org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks()" target="org.apache.commons.codec.net.QCodec.setEncodeBlanks(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e64" source="org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks()" target="org.apache.commons.codec.net.QCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e65" source="org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks()" target="org.apache.commons.codec.net.QCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e66" source="org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull()" target="org.apache.commons.codec.net.QCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e67" source="org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull()" target="org.apache.commons.codec.net.QCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e68" source="org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull()" target="org.apache.commons.codec.net.QCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e69" source="org.apache.commons.codec.net.QCodecTest.testEncodeObjects()" target="org.apache.commons.codec.net.QCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e70" source="org.apache.commons.codec.net.QCodecTest.testEncodeObjects()" target="org.apache.commons.codec.net.QCodec.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e71" source="org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull()" target="org.apache.commons.codec.net.QCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e72" source="org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull()" target="org.apache.commons.codec.net.QCodec.encode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e73" source="org.apache.commons.codec.net.QCodecTest.testInvalidEncoding()" target="org.apache.commons.codec.net.QCodec(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e74" source="org.apache.commons.codec.net.QCodecTest.testLetUsMakeCloverHappy()" target="org.apache.commons.codec.net.QCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e75" source="org.apache.commons.codec.net.QCodecTest.testLetUsMakeCloverHappy()" target="org.apache.commons.codec.net.QCodec.setEncodeBlanks(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e76" source="org.apache.commons.codec.net.QCodecTest.testLetUsMakeCloverHappy()" target="org.apache.commons.codec.net.QCodec.isEncodeBlanks()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e77" source="org.apache.commons.codec.net.QCodecTest.testNullInput()" target="org.apache.commons.codec.net.QCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e78" source="org.apache.commons.codec.net.QCodecTest.testNullInput()" target="org.apache.commons.codec.net.QCodec.doDecoding(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e79" source="org.apache.commons.codec.net.QCodecTest.testNullInput()" target="org.apache.commons.codec.net.QCodec.doEncoding(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e80" source="org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.QCodecTest.constructString(int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e81" source="org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.QCodec(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e82" source="org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.QCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e83" source="org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.QCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e84" source="org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode()" target="org.apache.commons.codec.net.QCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e85" source="org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode()" target="org.apache.commons.codec.net.QCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e86" source="org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode()" target="org.apache.commons.codec.net.QCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e87" source="org.apache.commons.codec.net.QuotedPrintableCodec()" target="org.apache.commons.codec.net.QuotedPrintableCodec(java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e88" source="org.apache.commons.codec.net.QuotedPrintableCodec(boolean)" target="org.apache.commons.codec.net.QuotedPrintableCodec(java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e89" source="org.apache.commons.codec.net.QuotedPrintableCodec(java.lang.String)" target="org.apache.commons.codec.net.QuotedPrintableCodec(java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e90" source="org.apache.commons.codec.net.QuotedPrintableCodec(java.nio.charset.Charset)" target="org.apache.commons.codec.net.QuotedPrintableCodec(java.nio.charset.Charset,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e91" source="org.apache.commons.codec.net.QuotedPrintableCodec.decode(byte[])" target="org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e92" source="org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])" target="org.apache.commons.codec.net.Utils.digit16(byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e93" source="org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])" target="org.apache.commons.codec.DecoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e94" source="org.apache.commons.codec.net.QuotedPrintableCodec.encode(byte[])" target="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e95" source="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet,byte[])" target="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e96" source="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet,byte[],boolean)" target="org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e97" source="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet,byte[],boolean)" target="org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int,boolean,java.io.ByteArrayOutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e98" source="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet,byte[],boolean)" target="org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e99" source="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet,byte[],boolean)" target="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int,java.io.ByteArrayOutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e100" source="org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int,boolean,java.io.ByteArrayOutputStream)" target="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int,java.io.ByteArrayOutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e101" source="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.Object)" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e102" source="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.Object)" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e103" source="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.Object)" target="org.apache.commons.codec.DecoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e104" source="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.Object)" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e105" source="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.Object)" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e106" source="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e107" source="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String)" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e108" source="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String)" target="org.apache.commons.codec.net.QuotedPrintableCodec.getCharset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e109" source="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String,java.lang.String)" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e110" source="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e111" source="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String,java.nio.charset.Charset)" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e112" source="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String,java.nio.charset.Charset)" target="org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e113" source="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e114" source="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)" target="org.apache.commons.codec.net.QuotedPrintableCodec.getCharset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e115" source="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e116" source="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String,java.lang.String)" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e117" source="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String,java.nio.charset.Charset)" target="org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e118" source="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String,java.nio.charset.Charset)" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e119" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode()" target="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e120" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e121" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode()" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e122" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid()" target="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e123" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid()" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e124" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects()" target="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e125" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects()" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e126" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull()" target="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e127" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull()" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e128" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray()" target="org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e129" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding()" target="org.apache.commons.codec.net.QuotedPrintableCodec(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e130" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e131" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e132" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull()" target="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e133" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e134" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull()" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e135" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull()" target="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e136" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e137" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects()" target="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e138" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e139" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull()" target="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e140" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e141" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet()" target="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e142" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e143" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet()" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e144" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes()" target="org.apache.commons.codec.net.QuotedPrintableCodec(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e145" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e146" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testInvalidEncoding()" target="org.apache.commons.codec.net.QuotedPrintableCodec(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e147" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode()" target="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e148" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e149" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode()" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e150" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF()" target="org.apache.commons.codec.net.QuotedPrintableCodec(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e151" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF()" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e152" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e153" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode()" target="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e154" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode()" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e155" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e156" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode()" target="org.apache.commons.codec.net.QuotedPrintableCodec(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e157" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e158" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode()" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e159" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial()" target="org.apache.commons.codec.net.QuotedPrintableCodec(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e160" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e161" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.QuotedPrintableCodecTest.constructString(int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e162" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e163" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e164" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e165" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak()" target="org.apache.commons.codec.net.QuotedPrintableCodec(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e166" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e167" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode()" target="org.apache.commons.codec.net.QuotedPrintableCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e168" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode()" target="org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e169" source="org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode()" target="org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e170" source="org.apache.commons.codec.net.RFC1522Codec.decodeText(java.lang.String)" target="org.apache.commons.codec.DecoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e171" source="org.apache.commons.codec.net.RFC1522Codec.decodeText(java.lang.String)" target="org.apache.commons.codec.net.RFC1522Codec.getEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e172" source="org.apache.commons.codec.net.RFC1522Codec.decodeText(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e173" source="org.apache.commons.codec.net.RFC1522Codec.decodeText(java.lang.String)" target="org.apache.commons.codec.net.RFC1522Codec.doDecoding(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e174" source="org.apache.commons.codec.net.RFC1522Codec.encodeText(java.lang.String,java.lang.String)" target="org.apache.commons.codec.net.RFC1522Codec.encodeText(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e175" source="org.apache.commons.codec.net.RFC1522Codec.encodeText(java.lang.String,java.nio.charset.Charset)" target="org.apache.commons.codec.net.RFC1522Codec.getEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e176" source="org.apache.commons.codec.net.RFC1522Codec.encodeText(java.lang.String,java.nio.charset.Charset)" target="org.apache.commons.codec.net.RFC1522Codec.doEncoding(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e177" source="org.apache.commons.codec.net.RFC1522Codec.encodeText(java.lang.String,java.nio.charset.Charset)" target="org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e178" source="org.apache.commons.codec.net.RFC1522CodecTest$RFC1522TestCodec()" target="org.apache.commons.codec.net.RFC1522Codec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e179" source="org.apache.commons.codec.net.RFC1522CodecTest.assertExpectedDecoderException(java.lang.String)" target="org.apache.commons.codec.net.RFC1522CodecTest$RFC1522TestCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e180" source="org.apache.commons.codec.net.RFC1522CodecTest.assertExpectedDecoderException(java.lang.String)" target="org.apache.commons.codec.net.RFC1522Codec.decodeText(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e181" source="org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid()" target="org.apache.commons.codec.net.RFC1522CodecTest.assertExpectedDecoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e182" source="org.apache.commons.codec.net.RFC1522CodecTest.testNullInput()" target="org.apache.commons.codec.net.RFC1522CodecTest$RFC1522TestCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e183" source="org.apache.commons.codec.net.RFC1522CodecTest.testNullInput()" target="org.apache.commons.codec.net.RFC1522Codec.decodeText(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e184" source="org.apache.commons.codec.net.RFC1522CodecTest.testNullInput()" target="org.apache.commons.codec.net.RFC1522Codec.encodeText(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e185" source="org.apache.commons.codec.net.URLCodec()" target="org.apache.commons.codec.net.URLCodec(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e186" source="org.apache.commons.codec.net.URLCodec.decode(byte[])" target="org.apache.commons.codec.net.URLCodec.decodeUrl(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e187" source="org.apache.commons.codec.net.URLCodec.decodeUrl(byte[])" target="org.apache.commons.codec.net.Utils.digit16(byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e188" source="org.apache.commons.codec.net.URLCodec.decodeUrl(byte[])" target="org.apache.commons.codec.DecoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e189" source="org.apache.commons.codec.net.URLCodec.encode(byte[])" target="org.apache.commons.codec.net.URLCodec.encodeUrl(java.util.BitSet,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e190" source="org.apache.commons.codec.net.URLCodec.decode(java.lang.Object)" target="org.apache.commons.codec.net.URLCodec.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e191" source="org.apache.commons.codec.net.URLCodec.decode(java.lang.Object)" target="org.apache.commons.codec.net.URLCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e192" source="org.apache.commons.codec.net.URLCodec.decode(java.lang.Object)" target="org.apache.commons.codec.DecoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e193" source="org.apache.commons.codec.net.URLCodec.encode(java.lang.Object)" target="org.apache.commons.codec.net.URLCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e194" source="org.apache.commons.codec.net.URLCodec.encode(java.lang.Object)" target="org.apache.commons.codec.net.URLCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e195" source="org.apache.commons.codec.net.URLCodec.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e196" source="org.apache.commons.codec.net.URLCodec.decode(java.lang.String)" target="org.apache.commons.codec.net.URLCodec.decode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e197" source="org.apache.commons.codec.net.URLCodec.decode(java.lang.String)" target="org.apache.commons.codec.net.URLCodec.getDefaultCharset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e198" source="org.apache.commons.codec.net.URLCodec.decode(java.lang.String)" target="org.apache.commons.codec.DecoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e199" source="org.apache.commons.codec.net.URLCodec.decode(java.lang.String,java.lang.String)" target="org.apache.commons.codec.net.URLCodec.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e200" source="org.apache.commons.codec.net.URLCodec.decode(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e201" source="org.apache.commons.codec.net.URLCodec.encode(java.lang.String)" target="org.apache.commons.codec.net.URLCodec.encode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e202" source="org.apache.commons.codec.net.URLCodec.encode(java.lang.String)" target="org.apache.commons.codec.net.URLCodec.getDefaultCharset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e203" source="org.apache.commons.codec.net.URLCodec.encode(java.lang.String)" target="org.apache.commons.codec.EncoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e204" source="org.apache.commons.codec.net.URLCodec.encode(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e205" source="org.apache.commons.codec.net.URLCodec.encode(java.lang.String,java.lang.String)" target="org.apache.commons.codec.net.URLCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e206" source="org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode()" target="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e207" source="org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode()" target="org.apache.commons.codec.net.URLCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e208" source="org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode()" target="org.apache.commons.codec.net.URLCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e209" source="org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode()" target="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e210" source="org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid()" target="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e211" source="org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid()" target="org.apache.commons.codec.net.URLCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e212" source="org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid()" target="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e213" source="org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent()" target="org.apache.commons.codec.net.URLCodecTest.constructString(int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e214" source="org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent()" target="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e215" source="org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent()" target="org.apache.commons.codec.net.URLCodec.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e216" source="org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent()" target="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e217" source="org.apache.commons.codec.net.URLCodecTest.testDecodeObjects()" target="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e218" source="org.apache.commons.codec.net.URLCodecTest.testDecodeObjects()" target="org.apache.commons.codec.net.URLCodec.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e219" source="org.apache.commons.codec.net.URLCodecTest.testDecodeObjects()" target="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e220" source="org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull()" target="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e221" source="org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull()" target="org.apache.commons.codec.net.URLCodec.decode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e222" source="org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray()" target="org.apache.commons.codec.net.URLCodec.decodeUrl(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e223" source="org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding()" target="org.apache.commons.codec.net.URLCodec(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e224" source="org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding()" target="org.apache.commons.codec.net.URLCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e225" source="org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding()" target="org.apache.commons.codec.net.URLCodec.encode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e226" source="org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding()" target="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e227" source="org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull()" target="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e228" source="org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull()" target="org.apache.commons.codec.net.URLCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e229" source="org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull()" target="org.apache.commons.codec.net.URLCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e230" source="org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull()" target="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e231" source="org.apache.commons.codec.net.URLCodecTest.testEncodeNull()" target="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e232" source="org.apache.commons.codec.net.URLCodecTest.testEncodeNull()" target="org.apache.commons.codec.net.URLCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e233" source="org.apache.commons.codec.net.URLCodecTest.testEncodeNull()" target="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e234" source="org.apache.commons.codec.net.URLCodecTest.testEncodeObjects()" target="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e235" source="org.apache.commons.codec.net.URLCodecTest.testEncodeObjects()" target="org.apache.commons.codec.net.URLCodec.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e236" source="org.apache.commons.codec.net.URLCodecTest.testEncodeObjects()" target="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e237" source="org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull()" target="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e238" source="org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull()" target="org.apache.commons.codec.net.URLCodec.encode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e239" source="org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet()" target="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e240" source="org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet()" target="org.apache.commons.codec.net.URLCodec.encodeUrl(java.util.BitSet,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e241" source="org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet()" target="org.apache.commons.codec.net.URLCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e242" source="org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet()" target="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e243" source="org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding()" target="org.apache.commons.codec.net.URLCodec(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e244" source="org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding()" target="org.apache.commons.codec.net.URLCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e245" source="org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding()" target="org.apache.commons.codec.net.URLCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e246" source="org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding()" target="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e247" source="org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode()" target="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e248" source="org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode()" target="org.apache.commons.codec.net.URLCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e249" source="org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode()" target="org.apache.commons.codec.net.URLCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e250" source="org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode()" target="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e251" source="org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.URLCodecTest.constructString(int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e252" source="org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e253" source="org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e254" source="org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.URLCodec.encode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e255" source="org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip()" target="org.apache.commons.codec.net.URLCodec.decode(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e256" source="org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode()" target="org.apache.commons.codec.net.URLCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e257" source="org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode()" target="org.apache.commons.codec.net.URLCodec.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e258" source="org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode()" target="org.apache.commons.codec.net.URLCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e259" source="org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode()" target="org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e260" source="org.apache.commons.codec.net.Utils.digit16(byte)" target="org.apache.commons.codec.DecoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e261" source="org.apache.commons.codec.net.UtilsTest.testConstructor()" target="org.apache.commons.codec.net.Utils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e262" source="org.apache.commons.codec.binary.Base32()" target="org.apache.commons.codec.binary.Base32(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e263" source="org.apache.commons.codec.binary.Base32(boolean)" target="org.apache.commons.codec.binary.Base32(int,byte[],boolean,byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e264" source="org.apache.commons.codec.binary.Base32(boolean,byte)" target="org.apache.commons.codec.binary.Base32(int,byte[],boolean,byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e265" source="org.apache.commons.codec.binary.Base32(byte)" target="org.apache.commons.codec.binary.Base32(boolean,byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e266" source="org.apache.commons.codec.binary.Base32(int)" target="org.apache.commons.codec.binary.Base32(int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e267" source="org.apache.commons.codec.binary.Base32(int,byte[])" target="org.apache.commons.codec.binary.Base32(int,byte[],boolean,byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e268" source="org.apache.commons.codec.binary.Base32(int,byte[],boolean)" target="org.apache.commons.codec.binary.Base32(int,byte[],boolean,byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e269" source="org.apache.commons.codec.binary.Base32(int,byte[],boolean,byte)" target="org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e270" source="org.apache.commons.codec.binary.Base32(int,byte[],boolean,byte)" target="org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e271" source="org.apache.commons.codec.binary.Base32(int,byte[],boolean,byte)" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e272" source="org.apache.commons.codec.binary.Base32(int,byte[],boolean,byte)" target="org.apache.commons.codec.binary.Base32.isInAlphabet(byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e273" source="org.apache.commons.codec.binary.Base32(int,byte[],boolean,byte)" target="org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e274" source="org.apache.commons.codec.binary.Base32.decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)" target="org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e275" source="org.apache.commons.codec.binary.Base32.encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)" target="org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e276" source="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream)" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e277" source="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean)" target="org.apache.commons.codec.binary.BaseNCodecInputStream(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e278" source="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean)" target="org.apache.commons.codec.binary.Base32(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e279" source="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean,int,byte[])" target="org.apache.commons.codec.binary.BaseNCodecInputStream(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e280" source="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean,int,byte[])" target="org.apache.commons.codec.binary.Base32(int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e281" source="org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable()" target="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e282" source="org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable()" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e283" source="org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.available()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e284" source="org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e285" source="org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e286" source="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStream(int)" target="org.apache.commons.codec.binary.Base32InputStreamTest.testByteByByte(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e287" source="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStream(int)" target="org.apache.commons.codec.binary.Base32InputStreamTest.testByChunk(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e288" source="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize()" target="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e289" source="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize()" target="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e290" source="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e291" source="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk()" target="org.apache.commons.codec.binary.Base32InputStreamTest.testByChunk(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e292" source="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk()" target="org.apache.commons.codec.binary.Base32()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e293" source="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk()" target="org.apache.commons.codec.binary.Base32TestData.randomData(org.apache.commons.codec.binary.BaseNCodec,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e294" source="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e295" source="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte()" target="org.apache.commons.codec.binary.Base32InputStreamTest.testByteByByte(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e296" source="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte()" target="org.apache.commons.codec.binary.Base32()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e297" source="org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte()" target="org.apache.commons.codec.binary.Base32TestData.randomData(org.apache.commons.codec.binary.BaseNCodec,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e298" source="org.apache.commons.codec.binary.Base32InputStreamTest.testByChunk(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e299" source="org.apache.commons.codec.binary.Base32InputStreamTest.testByChunk(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base32TestData.streamToBytes(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e300" source="org.apache.commons.codec.binary.Base32InputStreamTest.testByChunk(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e301" source="org.apache.commons.codec.binary.Base32InputStreamTest.testByChunk(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e302" source="org.apache.commons.codec.binary.Base32InputStreamTest.testByteByByte(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e303" source="org.apache.commons.codec.binary.Base32InputStreamTest.testByteByByte(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e304" source="org.apache.commons.codec.binary.Base32InputStreamTest.testByteByByte(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e305" source="org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105()" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e306" source="org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105()" target="org.apache.commons.codec.binary.Codec105ErrorInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e307" source="org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e308" source="org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e309" source="org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e310" source="org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e311" source="org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e312" source="org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e313" source="org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.Base32TestData.streamToBytes(java.io.InputStream,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e314" source="org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e315" source="org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e316" source="org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported()" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e317" source="org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e318" source="org.apache.commons.codec.binary.Base32InputStreamTest.testRead0()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e319" source="org.apache.commons.codec.binary.Base32InputStreamTest.testRead0()" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e320" source="org.apache.commons.codec.binary.Base32InputStreamTest.testRead0()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e321" source="org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e322" source="org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull()" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e323" source="org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e324" source="org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e325" source="org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds()" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e326" source="org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e327" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig()" target="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e328" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig()" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e329" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e330" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e331" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone()" target="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e332" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone()" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e333" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e334" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e335" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e336" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd()" target="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e337" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd()" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e338" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e339" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e340" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd()" target="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e341" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd()" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e342" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e343" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e344" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument()" target="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e345" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument()" target="org.apache.commons.codec.binary.Base32InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e346" source="org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e347" source="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream)" target="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e348" source="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream,boolean)" target="org.apache.commons.codec.binary.BaseNCodecOutputStream(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e349" source="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream,boolean)" target="org.apache.commons.codec.binary.Base32(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e350" source="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream,boolean,int,byte[])" target="org.apache.commons.codec.binary.BaseNCodecOutputStream(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e351" source="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream,boolean,int,byte[])" target="org.apache.commons.codec.binary.Base32(int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e352" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStream(int)" target="org.apache.commons.codec.binary.Base32OutputStreamTest.testByteByByte(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e353" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStream(int)" target="org.apache.commons.codec.binary.Base32OutputStreamTest.testByChunk(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e354" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize()" target="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e355" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize()" target="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e356" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e357" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk()" target="org.apache.commons.codec.binary.Base32OutputStreamTest.testByChunk(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e358" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk()" target="org.apache.commons.codec.binary.Base32()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e359" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk()" target="org.apache.commons.codec.binary.Base32TestData.randomData(org.apache.commons.codec.binary.BaseNCodec,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e360" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e361" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte()" target="org.apache.commons.codec.binary.Base32OutputStreamTest.testByteByByte(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e362" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte()" target="org.apache.commons.codec.binary.Base32()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e363" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte()" target="org.apache.commons.codec.binary.Base32TestData.randomData(org.apache.commons.codec.binary.BaseNCodec,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e364" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testByChunk(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e365" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testByChunk(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e366" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testByteByByte(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e367" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testByteByByte(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e368" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds()" target="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e369" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e370" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e371" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage()" target="org.apache.commons.codec.binary.Base32OutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e372" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e373" source="org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e374" source="org.apache.commons.codec.binary.Base32Test.testBase32Chunked()" target="org.apache.commons.codec.binary.Base32(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e375" source="org.apache.commons.codec.binary.Base32Test.testBase32Chunked()" target="org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e376" source="org.apache.commons.codec.binary.Base32Test.testBase32HexSamples()" target="org.apache.commons.codec.binary.Base32(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e377" source="org.apache.commons.codec.binary.Base32Test.testBase32HexSamples()" target="org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e378" source="org.apache.commons.codec.binary.Base32Test.testBase32Samples()" target="org.apache.commons.codec.binary.Base32()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e379" source="org.apache.commons.codec.binary.Base32Test.testBase32Samples()" target="org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e380" source="org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding()" target="org.apache.commons.codec.binary.Base32(byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e381" source="org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding()" target="org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e382" source="org.apache.commons.codec.binary.Base32Test.testRandomBytes()" target="org.apache.commons.codec.binary.Base32()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e383" source="org.apache.commons.codec.binary.Base32Test.testRandomBytes()" target="org.apache.commons.codec.binary.Base32TestData.randomData(org.apache.commons.codec.binary.BaseNCodec,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e384" source="org.apache.commons.codec.binary.Base32Test.testRandomBytes()" target="org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e385" source="org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked()" target="org.apache.commons.codec.binary.Base32(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e386" source="org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked()" target="org.apache.commons.codec.binary.Base32TestData.randomData(org.apache.commons.codec.binary.BaseNCodec,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e387" source="org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked()" target="org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e388" source="org.apache.commons.codec.binary.Base32Test.testRandomBytesHex()" target="org.apache.commons.codec.binary.Base32(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e389" source="org.apache.commons.codec.binary.Base32Test.testRandomBytesHex()" target="org.apache.commons.codec.binary.Base32TestData.randomData(org.apache.commons.codec.binary.BaseNCodec,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e390" source="org.apache.commons.codec.binary.Base32Test.testRandomBytesHex()" target="org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e391" source="org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding()" target="org.apache.commons.codec.binary.Base32()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e392" source="org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding()" target="org.apache.commons.codec.binary.BaseNCodec$Context()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e393" source="org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding()" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e394" source="org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding()" target="org.apache.commons.codec.binary.Base32.encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e395" source="org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding()" target="org.apache.commons.codec.binary.BaseNCodec.readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e396" source="org.apache.commons.codec.binary.Base32TestData.streamToBytes(java.io.InputStream)" target="org.apache.commons.codec.binary.Base32TestData.streamToBytes(java.io.InputStream,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e397" source="org.apache.commons.codec.binary.Base32TestData.streamToBytes(java.io.InputStream,byte[])" target="org.apache.commons.codec.binary.Base32TestData.fill(byte[],int,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e398" source="org.apache.commons.codec.binary.Base32TestData.streamToBytes(java.io.InputStream,byte[])" target="org.apache.commons.codec.binary.Base32TestData.resizeArray(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e399" source="org.apache.commons.codec.binary.Base32TestData.randomData(org.apache.commons.codec.binary.BaseNCodec,int)" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e400" source="org.apache.commons.codec.binary.Base64()" target="org.apache.commons.codec.binary.Base64(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e401" source="org.apache.commons.codec.binary.Base64(boolean)" target="org.apache.commons.codec.binary.Base64(int,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e402" source="org.apache.commons.codec.binary.Base64(int)" target="org.apache.commons.codec.binary.Base64(int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e403" source="org.apache.commons.codec.binary.Base64(int,byte[])" target="org.apache.commons.codec.binary.Base64(int,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e404" source="org.apache.commons.codec.binary.Base64(int,byte[],boolean)" target="org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e405" source="org.apache.commons.codec.binary.Base64(int,byte[],boolean)" target="org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e406" source="org.apache.commons.codec.binary.Base64(int,byte[],boolean)" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e407" source="org.apache.commons.codec.binary.Base64.isArrayByteBase64(byte[])" target="org.apache.commons.codec.binary.Base64.isBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e408" source="org.apache.commons.codec.binary.Base64.isBase64(byte[])" target="org.apache.commons.codec.binary.Base64.isBase64(byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e409" source="org.apache.commons.codec.binary.Base64.isBase64(byte[])" target="org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e410" source="org.apache.commons.codec.binary.Base64.isBase64(java.lang.String)" target="org.apache.commons.codec.binary.Base64.isBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e411" source="org.apache.commons.codec.binary.Base64.isBase64(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e412" source="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e413" source="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])" target="org.apache.commons.codec.binary.BaseNCodec.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e414" source="org.apache.commons.codec.binary.Base64.decodeBase64(java.lang.String)" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e415" source="org.apache.commons.codec.binary.Base64.decodeBase64(java.lang.String)" target="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e416" source="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e417" source="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean)" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e418" source="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean)" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e419" source="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int)" target="org.apache.commons.codec.binary.Base64(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e420" source="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int)" target="org.apache.commons.codec.binary.Base64(int,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e421" source="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int)" target="org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e422" source="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int)" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e423" source="org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byte[])" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e424" source="org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byte[])" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e425" source="org.apache.commons.codec.binary.Base64.encodeInteger(java.math.BigInteger)" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e426" source="org.apache.commons.codec.binary.Base64.encodeInteger(java.math.BigInteger)" target="org.apache.commons.codec.binary.Base64.toIntegerBytes(java.math.BigInteger)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e427" source="org.apache.commons.codec.binary.Base64.encodeBase64String(byte[])" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e428" source="org.apache.commons.codec.binary.Base64.encodeBase64String(byte[])" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e429" source="org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byte[])" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e430" source="org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byte[])" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e431" source="org.apache.commons.codec.binary.Base64.decodeInteger(byte[])" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e432" source="org.apache.commons.codec.binary.Base64.decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)" target="org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e433" source="org.apache.commons.codec.binary.Base64.encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)" target="org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e434" source="org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder()" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e435" source="org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder()" target="org.apache.commons.codec.binary.Base64Codec13Test.utf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e436" source="org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder()" target="org.apache.commons.codec.BinaryDecoder.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e437" source="org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder()" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e438" source="org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder()" target="org.apache.commons.codec.binary.Base64Codec13Test.utf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e439" source="org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder()" target="org.apache.commons.codec.BinaryEncoder.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e440" source="org.apache.commons.codec.binary.Base64Codec13Test.testDecoder()" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e441" source="org.apache.commons.codec.binary.Base64Codec13Test.testDecoder()" target="org.apache.commons.codec.binary.Base64Codec13Test.utf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e442" source="org.apache.commons.codec.binary.Base64Codec13Test.testDecoder()" target="org.apache.commons.codec.Decoder.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e443" source="org.apache.commons.codec.binary.Base64Codec13Test.testEncoder()" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e444" source="org.apache.commons.codec.binary.Base64Codec13Test.testEncoder()" target="org.apache.commons.codec.binary.Base64Codec13Test.utf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e445" source="org.apache.commons.codec.binary.Base64Codec13Test.testEncoder()" target="org.apache.commons.codec.Encoder.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e446" source="org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode()" target="org.apache.commons.codec.binary.Base64Codec13Test.utf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e447" source="org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e448" source="org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked()" target="org.apache.commons.codec.binary.Base64Codec13Test.utf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e449" source="org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e450" source="org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode()" target="org.apache.commons.codec.binary.Base64Codec13Test.utf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e451" source="org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e452" source="org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked()" target="org.apache.commons.codec.binary.Base64Codec13Test.utf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e453" source="org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked()" target="org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e454" source="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e455" source="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean)" target="org.apache.commons.codec.binary.BaseNCodecInputStream(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e456" source="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean)" target="org.apache.commons.codec.binary.Base64(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e457" source="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean,int,byte[])" target="org.apache.commons.codec.binary.BaseNCodecInputStream(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e458" source="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean,int,byte[])" target="org.apache.commons.codec.binary.Base64(int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e459" source="org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable()" target="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e460" source="org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e461" source="org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.available()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e462" source="org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e463" source="org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e464" source="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStream(int)" target="org.apache.commons.codec.binary.Base64InputStreamTest.testByteByByte(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e465" source="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStream(int)" target="org.apache.commons.codec.binary.Base64InputStreamTest.testByChunk(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e466" source="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize()" target="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e467" source="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize()" target="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e468" source="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e469" source="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk()" target="org.apache.commons.codec.binary.Base64InputStreamTest.testByChunk(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e470" source="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk()" target="org.apache.commons.codec.binary.Base64TestData.randomData(int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e471" source="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e472" source="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte()" target="org.apache.commons.codec.binary.Base64InputStreamTest.testByteByByte(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e473" source="org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte()" target="org.apache.commons.codec.binary.Base64TestData.randomData(int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e474" source="org.apache.commons.codec.binary.Base64InputStreamTest.testByChunk(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e475" source="org.apache.commons.codec.binary.Base64InputStreamTest.testByChunk(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base64TestData.streamToBytes(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e476" source="org.apache.commons.codec.binary.Base64InputStreamTest.testByChunk(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e477" source="org.apache.commons.codec.binary.Base64InputStreamTest.testByChunk(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e478" source="org.apache.commons.codec.binary.Base64InputStreamTest.testByteByByte(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e479" source="org.apache.commons.codec.binary.Base64InputStreamTest.testByteByByte(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e480" source="org.apache.commons.codec.binary.Base64InputStreamTest.testByteByByte(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e481" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e482" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e483" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e484" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105()" target="org.apache.commons.codec.binary.Codec105ErrorInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e485" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e486" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e487" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e488" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e489" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e490" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e491" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.Base64TestData.streamToBytes(java.io.InputStream,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e492" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130()" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e493" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e494" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e495" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE()" target="org.apache.commons.codec.binary.Base64TestData.streamToBytes(java.io.InputStream,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e496" source="org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE()" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e497" source="org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e498" source="org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e499" source="org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e500" source="org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e501" source="org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e502" source="org.apache.commons.codec.binary.Base64InputStreamTest.testRead0()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e503" source="org.apache.commons.codec.binary.Base64InputStreamTest.testRead0()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e504" source="org.apache.commons.codec.binary.Base64InputStreamTest.testRead0()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e505" source="org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e506" source="org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e507" source="org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e508" source="org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e509" source="org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e510" source="org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e511" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig()" target="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e512" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e513" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e514" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e515" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone()" target="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e516" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e517" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e518" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e519" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e520" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd()" target="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e521" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e522" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e523" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e524" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd()" target="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e525" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e526" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e527" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e528" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument()" target="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e529" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument()" target="org.apache.commons.codec.binary.Base64InputStream(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e530" source="org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e531" source="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream)" target="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e532" source="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream,boolean)" target="org.apache.commons.codec.binary.BaseNCodecOutputStream(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e533" source="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream,boolean)" target="org.apache.commons.codec.binary.Base64(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e534" source="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream,boolean,int,byte[])" target="org.apache.commons.codec.binary.BaseNCodecOutputStream(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e535" source="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream,boolean,int,byte[])" target="org.apache.commons.codec.binary.Base64(int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e536" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStream(int)" target="org.apache.commons.codec.binary.Base64OutputStreamTest.testByteByByte(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e537" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStream(int)" target="org.apache.commons.codec.binary.Base64OutputStreamTest.testByChunk(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e538" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize()" target="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e539" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize()" target="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStream(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e540" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e541" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk()" target="org.apache.commons.codec.binary.Base64OutputStreamTest.testByChunk(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e542" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk()" target="org.apache.commons.codec.binary.Base64TestData.randomData(int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e543" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e544" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte()" target="org.apache.commons.codec.binary.Base64OutputStreamTest.testByteByByte(byte[],byte[],int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e545" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte()" target="org.apache.commons.codec.binary.Base64TestData.randomData(int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e546" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testByChunk(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e547" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testByChunk(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e548" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testByteByByte(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream,boolean,int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e549" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testByteByByte(byte[],byte[],int,byte[])" target="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e550" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e551" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE()" target="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e552" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e553" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e554" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE()" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e555" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds()" target="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e556" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e557" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e558" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage()" target="org.apache.commons.codec.binary.Base64OutputStream(java.io.OutputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e559" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e560" source="org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.close()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e561" source="org.apache.commons.codec.binary.Base64Test.testBase64()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e562" source="org.apache.commons.codec.binary.Base64Test.testBase64()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e563" source="org.apache.commons.codec.binary.Base64Test.testBase64()" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e564" source="org.apache.commons.codec.binary.Base64Test.testBase64()" target="org.apache.commons.codec.binary.Base64(int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e565" source="org.apache.commons.codec.binary.Base64Test.testBase64()" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e566" source="org.apache.commons.codec.binary.Base64Test.testBase64()" target="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e567" source="org.apache.commons.codec.binary.Base64Test.testByteToStringVariations()" target="org.apache.commons.codec.binary.Base64(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e568" source="org.apache.commons.codec.binary.Base64Test.testByteToStringVariations()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e569" source="org.apache.commons.codec.binary.Base64Test.testByteToStringVariations()" target="org.apache.commons.codec.binary.Hex.decodeHex(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e570" source="org.apache.commons.codec.binary.Base64Test.testByteToStringVariations()" target="org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e571" source="org.apache.commons.codec.binary.Base64Test.testByteToStringVariations()" target="org.apache.commons.codec.binary.Base64.encodeBase64String(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e572" source="org.apache.commons.codec.binary.Base64Test.testByteToStringVariations()" target="org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e573" source="org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e574" source="org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e575" source="org.apache.commons.codec.binary.Base64Test.testCodeInteger1()" target="org.apache.commons.codec.binary.Base64.encodeInteger(java.math.BigInteger)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e576" source="org.apache.commons.codec.binary.Base64Test.testCodeInteger1()" target="org.apache.commons.codec.binary.Base64.decodeInteger(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e577" source="org.apache.commons.codec.binary.Base64Test.testCodeInteger2()" target="org.apache.commons.codec.binary.Base64.encodeInteger(java.math.BigInteger)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e578" source="org.apache.commons.codec.binary.Base64Test.testCodeInteger2()" target="org.apache.commons.codec.binary.Base64.decodeInteger(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e579" source="org.apache.commons.codec.binary.Base64Test.testCodeInteger3()" target="org.apache.commons.codec.binary.Base64.encodeInteger(java.math.BigInteger)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e580" source="org.apache.commons.codec.binary.Base64Test.testCodeInteger3()" target="org.apache.commons.codec.binary.Base64.decodeInteger(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e581" source="org.apache.commons.codec.binary.Base64Test.testCodeInteger4()" target="org.apache.commons.codec.binary.Base64.encodeInteger(java.math.BigInteger)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e582" source="org.apache.commons.codec.binary.Base64Test.testCodeInteger4()" target="org.apache.commons.codec.binary.Base64.decodeInteger(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e583" source="org.apache.commons.codec.binary.Base64Test.testCodeIntegerNull()" target="org.apache.commons.codec.binary.Base64.encodeInteger(java.math.BigInteger)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e584" source="org.apache.commons.codec.binary.Base64Test.testCodec112()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e585" source="org.apache.commons.codec.binary.Base64Test.testCodec112()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e586" source="org.apache.commons.codec.binary.Base64Test.testCodec68()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e587" source="org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean()" target="org.apache.commons.codec.binary.Base64(int,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e588" source="org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean()" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e589" source="org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean()" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e590" source="org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe()" target="org.apache.commons.codec.binary.Base64(int,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e591" source="org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe()" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e592" source="org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe()" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e593" source="org.apache.commons.codec.binary.Base64Test.testConstructors()" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e594" source="org.apache.commons.codec.binary.Base64Test.testConstructors()" target="org.apache.commons.codec.binary.Base64(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e595" source="org.apache.commons.codec.binary.Base64Test.testConstructors()" target="org.apache.commons.codec.binary.Base64(int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e596" source="org.apache.commons.codec.binary.Base64Test.testDecodeEncode(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e597" source="org.apache.commons.codec.binary.Base64Test.testDecodeEncode(java.lang.String)" target="org.apache.commons.codec.binary.Base64.decodeBase64(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e598" source="org.apache.commons.codec.binary.Base64Test.testDecodeEncode(java.lang.String)" target="org.apache.commons.codec.binary.Base64.encodeBase64String(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e599" source="org.apache.commons.codec.binary.Base64Test.testDecodeEncode(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e600" source="org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e601" source="org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e602" source="org.apache.commons.codec.binary.Base64Test.testDecodePadOnly()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e603" source="org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e604" source="org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad()" target="org.apache.commons.codec.binary.Base64.decodeBase64(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e605" source="org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e606" source="org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e607" source="org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e608" source="org.apache.commons.codec.binary.Base64Test.testEmptyBase64()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e609" source="org.apache.commons.codec.binary.Base64Test.testEmptyBase64()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e610" source="org.apache.commons.codec.binary.Base64Test.testEncodeDecode(java.lang.String)" target="org.apache.commons.codec.binary.Base64.encodeBase64String(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e611" source="org.apache.commons.codec.binary.Base64Test.testEncodeDecode(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e612" source="org.apache.commons.codec.binary.Base64Test.testEncodeDecode(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e613" source="org.apache.commons.codec.binary.Base64Test.testEncodeDecode(java.lang.String)" target="org.apache.commons.codec.binary.Base64.decodeBase64(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e614" source="org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom()" target="org.apache.commons.codec.binary.Base64Test.getRandom()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e615" source="org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e616" source="org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom()" target="org.apache.commons.codec.binary.Base64.isBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e617" source="org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e618" source="org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall()" target="org.apache.commons.codec.binary.Base64Test.getRandom()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e619" source="org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e620" source="org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall()" target="org.apache.commons.codec.binary.Base64.isBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e621" source="org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e622" source="org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall()" target="org.apache.commons.codec.binary.Base64Test.toString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e623" source="org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize()" target="org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e624" source="org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(int)" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e625" source="org.apache.commons.codec.binary.Base64Test.testHugeLineSeparator()" target="org.apache.commons.codec.binary.Base64(int,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e626" source="org.apache.commons.codec.binary.Base64Test.testHugeLineSeparator()" target="org.apache.commons.codec.binary.BaseNCodec.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e627" source="org.apache.commons.codec.binary.Base64Test.testHugeLineSeparator()" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e628" source="org.apache.commons.codec.binary.Base64Test.testHugeLineSeparator()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e629" source="org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e630" source="org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64()" target="org.apache.commons.codec.binary.Base64.isBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e631" source="org.apache.commons.codec.binary.Base64Test.testIsStringBase64()" target="org.apache.commons.codec.binary.Base64.isBase64(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e632" source="org.apache.commons.codec.binary.Base64Test.testIsUrlSafe()" target="org.apache.commons.codec.binary.Base64(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e633" source="org.apache.commons.codec.binary.Base64Test.testIsUrlSafe()" target="org.apache.commons.codec.binary.Base64.isUrlSafe()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e634" source="org.apache.commons.codec.binary.Base64Test.testIsUrlSafe()" target="org.apache.commons.codec.binary.Base64.isBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e635" source="org.apache.commons.codec.binary.Base64Test.testKnownDecodings()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e636" source="org.apache.commons.codec.binary.Base64Test.testKnownEncodings()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e637" source="org.apache.commons.codec.binary.Base64Test.testKnownEncodings()" target="org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e638" source="org.apache.commons.codec.binary.Base64Test.testNonBase64Test()" target="org.apache.commons.codec.binary.Base64.isBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e639" source="org.apache.commons.codec.binary.Base64Test.testNonBase64Test()" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e640" source="org.apache.commons.codec.binary.Base64Test.testNonBase64Test()" target="org.apache.commons.codec.binary.BaseNCodec.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e641" source="org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter()" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e642" source="org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter()" target="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e643" source="org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e644" source="org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter()" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e645" source="org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter()" target="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e646" source="org.apache.commons.codec.binary.Base64Test.testObjectEncode()" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e647" source="org.apache.commons.codec.binary.Base64Test.testObjectEncode()" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e648" source="org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter()" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e649" source="org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter()" target="org.apache.commons.codec.binary.BaseNCodec.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e650" source="org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter()" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e651" source="org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter()" target="org.apache.commons.codec.binary.BaseNCodec.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e652" source="org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e653" source="org.apache.commons.codec.binary.Base64Test.testPairs()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e654" source="org.apache.commons.codec.binary.Base64Test.testPairs()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e655" source="org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode()" target="org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e656" source="org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode()" target="org.apache.commons.codec.binary.Base64.decodeBase64(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e657" source="org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode()" target="org.apache.commons.codec.binary.Base64Test.testDecodeEncode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e658" source="org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf()" target="org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e659" source="org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf()" target="org.apache.commons.codec.binary.Base64.decodeBase64(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e660" source="org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode()" target="org.apache.commons.codec.binary.Base64.encodeBase64String(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e661" source="org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e662" source="org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode()" target="org.apache.commons.codec.binary.Base64Test.testEncodeDecode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e663" source="org.apache.commons.codec.binary.Base64Test.testSingletons()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e664" source="org.apache.commons.codec.binary.Base64Test.testSingletons()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e665" source="org.apache.commons.codec.binary.Base64Test.testSingletonsChunked()" target="org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e666" source="org.apache.commons.codec.binary.Base64Test.testStringToByteVariations()" target="org.apache.commons.codec.binary.Base64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e667" source="org.apache.commons.codec.binary.Base64Test.testStringToByteVariations()" target="org.apache.commons.codec.binary.Hex.decodeHex(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e668" source="org.apache.commons.codec.binary.Base64Test.testStringToByteVariations()" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e669" source="org.apache.commons.codec.binary.Base64Test.testStringToByteVariations()" target="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e670" source="org.apache.commons.codec.binary.Base64Test.testStringToByteVariations()" target="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e671" source="org.apache.commons.codec.binary.Base64Test.testStringToByteVariations()" target="org.apache.commons.codec.binary.Base64.decodeBase64(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e672" source="org.apache.commons.codec.binary.Base64Test.testTriplets()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e673" source="org.apache.commons.codec.binary.Base64Test.testTripletsChunked()" target="org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e674" source="org.apache.commons.codec.binary.Base64Test.testUUID()" target="org.apache.commons.codec.binary.Hex.decodeHex(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e675" source="org.apache.commons.codec.binary.Base64Test.testUUID()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e676" source="org.apache.commons.codec.binary.Base64Test.testUUID()" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e677" source="org.apache.commons.codec.binary.Base64Test.testUUID()" target="org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e678" source="org.apache.commons.codec.binary.Base64Test.testUUID()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e679" source="org.apache.commons.codec.binary.Base64Test.testUUID()" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e680" source="org.apache.commons.codec.binary.Base64Test.testUUID()" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e681" source="org.apache.commons.codec.binary.Base64Test.testUrlSafe()" target="org.apache.commons.codec.binary.Base64TestData.randomData(int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e682" source="org.apache.commons.codec.binary.Base64Test.testUrlSafe()" target="org.apache.commons.codec.binary.Base64.decodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e683" source="org.apache.commons.codec.binary.Base64Test.testUrlSafe()" target="org.apache.commons.codec.binary.Base64TestData.bytesContain(byte[],byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e684" source="org.apache.commons.codec.binary.Base64TestData.streamToBytes(java.io.InputStream)" target="org.apache.commons.codec.binary.Base64TestData.streamToBytes(java.io.InputStream,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e685" source="org.apache.commons.codec.binary.Base64TestData.streamToBytes(java.io.InputStream,byte[])" target="org.apache.commons.codec.binary.Base64TestData.fill(byte[],int,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e686" source="org.apache.commons.codec.binary.Base64TestData.streamToBytes(java.io.InputStream,byte[])" target="org.apache.commons.codec.binary.Base64TestData.resizeArray(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e687" source="org.apache.commons.codec.binary.Base64TestData.randomData(int,boolean)" target="org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e688" source="org.apache.commons.codec.binary.Base64TestData.randomData(int,boolean)" target="org.apache.commons.codec.binary.Base64.encodeBase64(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e689" source="org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)" target="org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e690" source="org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])" target="org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e691" source="org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)" target="org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e692" source="org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)" target="org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e693" source="org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)" target="org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e694" source="org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e695" source="org.apache.commons.codec.binary.BaseNCodec.decode(byte[])" target="org.apache.commons.codec.binary.BaseNCodec$Context()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e696" source="org.apache.commons.codec.binary.BaseNCodec.decode(byte[])" target="org.apache.commons.codec.binary.BaseNCodec.decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e697" source="org.apache.commons.codec.binary.BaseNCodec.decode(byte[])" target="org.apache.commons.codec.binary.BaseNCodec.readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e698" source="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)" target="org.apache.commons.codec.binary.BaseNCodec.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e699" source="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e700" source="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])" target="org.apache.commons.codec.binary.BaseNCodec$Context()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e701" source="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e702" source="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])" target="org.apache.commons.codec.binary.BaseNCodec.readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e703" source="org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)" target="org.apache.commons.codec.binary.BaseNCodec.resizeBuffer(org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e704" source="org.apache.commons.codec.binary.BaseNCodec.resizeBuffer(org.apache.commons.codec.binary.BaseNCodec$Context)" target="org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e705" source="org.apache.commons.codec.binary.BaseNCodec.readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)" target="org.apache.commons.codec.binary.BaseNCodec.available(org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e706" source="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)" target="org.apache.commons.codec.binary.BaseNCodec.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e707" source="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)" target="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e708" source="org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)" target="org.apache.commons.codec.DecoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e709" source="org.apache.commons.codec.binary.BaseNCodec.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e710" source="org.apache.commons.codec.binary.BaseNCodec.encode(java.lang.Object)" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e711" source="org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e712" source="org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e713" source="org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[])" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e714" source="org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[])" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e715" source="org.apache.commons.codec.binary.BaseNCodecInputStream#context" target="org.apache.commons.codec.binary.BaseNCodec$Context()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e716" source="org.apache.commons.codec.binary.BaseNCodecInputStream.read()" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e717" source="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)" target="org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e718" source="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e719" source="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)" target="org.apache.commons.codec.binary.BaseNCodec.decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e720" source="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)" target="org.apache.commons.codec.binary.BaseNCodec.readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e721" source="org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)" target="org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e722" source="org.apache.commons.codec.binary.BaseNCodecOutputStream#context" target="org.apache.commons.codec.binary.BaseNCodec$Context()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e723" source="org.apache.commons.codec.binary.BaseNCodecOutputStream.close()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.eof()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e724" source="org.apache.commons.codec.binary.BaseNCodecOutputStream.close()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.flush()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e725" source="org.apache.commons.codec.binary.BaseNCodecOutputStream.eof()" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e726" source="org.apache.commons.codec.binary.BaseNCodecOutputStream.eof()" target="org.apache.commons.codec.binary.BaseNCodec.decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e727" source="org.apache.commons.codec.binary.BaseNCodecOutputStream.flush()" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e728" source="org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(boolean)" target="org.apache.commons.codec.binary.BaseNCodec.available(org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e729" source="org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(boolean)" target="org.apache.commons.codec.binary.BaseNCodec.readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e730" source="org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int)" target="org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e731" source="org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int)" target="org.apache.commons.codec.binary.BaseNCodec.decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e732" source="org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int)" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e733" source="org.apache.commons.codec.binary.BaseNCodecOutputStream.write(int)" target="org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e734" source="org.apache.commons.codec.binary.BaseNCodecTest$1(int,int,int,int)" target="org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e735" source="org.apache.commons.codec.binary.BaseNCodecTest.setUp()" target="org.apache.commons.codec.binary.BaseNCodecTest$1(int,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e736" source="org.apache.commons.codec.binary.BaseNCodecTest.setUp()" target="org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e737" source="org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad()" target="org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e738" source="org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByte()" target="org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e739" source="org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean()" target="org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e740" source="org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString()" target="org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e741" source="org.apache.commons.codec.binary.BaseNCodecTest.testIsWhiteSpace()" target="org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e742" source="org.apache.commons.codec.binary.BaseNCodecTest$2(int,int,int,int,byte)" target="org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e743" source="org.apache.commons.codec.binary.BaseNCodecTest.testProvidePaddingByte()" target="org.apache.commons.codec.binary.BaseNCodecTest$2(int,int,int,int,byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e744" source="org.apache.commons.codec.binary.BaseNCodecTest.testProvidePaddingByte()" target="org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e745" source="org.apache.commons.codec.binary.BinaryCodec.decode(byte[])" target="org.apache.commons.codec.binary.BinaryCodec.fromAscii(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e746" source="org.apache.commons.codec.binary.BinaryCodec.encode(byte[])" target="org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e747" source="org.apache.commons.codec.binary.BinaryCodec.fromAscii(byte[])" target="org.apache.commons.codec.binary.BinaryCodec.isEmpty(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e748" source="org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byte[])" target="org.apache.commons.codec.binary.BinaryCodec.isEmpty(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e749" source="org.apache.commons.codec.binary.BinaryCodec.toByteArray(java.lang.String)" target="org.apache.commons.codec.binary.BinaryCodec.fromAscii(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e750" source="org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byte[])" target="org.apache.commons.codec.binary.BinaryCodec.isEmpty(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e751" source="org.apache.commons.codec.binary.BinaryCodec.decode(java.lang.Object)" target="org.apache.commons.codec.binary.BinaryCodec.fromAscii(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e752" source="org.apache.commons.codec.binary.BinaryCodec.decode(java.lang.Object)" target="org.apache.commons.codec.binary.BinaryCodec.fromAscii(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e753" source="org.apache.commons.codec.binary.BinaryCodec.decode(java.lang.Object)" target="org.apache.commons.codec.DecoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e754" source="org.apache.commons.codec.binary.BinaryCodec.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e755" source="org.apache.commons.codec.binary.BinaryCodec.encode(java.lang.Object)" target="org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e756" source="org.apache.commons.codec.binary.BinaryCodec.toAsciiString(byte[])" target="org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e757" source="org.apache.commons.codec.binary.BinaryCodecTest.assertDecodeObject(byte[],java.lang.String)" target="org.apache.commons.codec.binary.BinaryCodec.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e758" source="org.apache.commons.codec.binary.BinaryCodecTest.assertDecodeObject(byte[],java.lang.String)" target="org.apache.commons.codec.binary.BinaryCodec.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e759" source="org.apache.commons.codec.binary.BinaryCodecTest.setUp()" target="org.apache.commons.codec.binary.BinaryCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e760" source="org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray()" target="org.apache.commons.codec.binary.BinaryCodec.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e761" source="org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject()" target="org.apache.commons.codec.binary.BinaryCodecTest.assertDecodeObject(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e762" source="org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObjectException()" target="org.apache.commons.codec.binary.BinaryCodec.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e763" source="org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray()" target="org.apache.commons.codec.binary.BinaryCodec.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e764" source="org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject()" target="org.apache.commons.codec.binary.BinaryCodec.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e765" source="org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectException()" target="org.apache.commons.codec.binary.BinaryCodec.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e766" source="org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull()" target="org.apache.commons.codec.binary.BinaryCodec.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e767" source="org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray()" target="org.apache.commons.codec.binary.BinaryCodec.fromAscii(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e768" source="org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray()" target="org.apache.commons.codec.binary.BinaryCodec.fromAscii(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e769" source="org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes()" target="org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e770" source="org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars()" target="org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e771" source="org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString()" target="org.apache.commons.codec.binary.BinaryCodec.toAsciiString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e772" source="org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString()" target="org.apache.commons.codec.binary.BinaryCodec.toByteArray(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e773" source="org.apache.commons.codec.binary.Hex(java.lang.String)" target="org.apache.commons.codec.binary.Hex(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e774" source="org.apache.commons.codec.binary.Hex.decode(byte[])" target="org.apache.commons.codec.binary.Hex.decodeHex(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e775" source="org.apache.commons.codec.binary.Hex.decode(byte[])" target="org.apache.commons.codec.binary.Hex.getCharset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e776" source="org.apache.commons.codec.binary.Hex.decode(java.nio.ByteBuffer)" target="org.apache.commons.codec.binary.Hex.decodeHex(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e777" source="org.apache.commons.codec.binary.Hex.decode(java.nio.ByteBuffer)" target="org.apache.commons.codec.binary.Hex.getCharset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e778" source="org.apache.commons.codec.binary.Hex.decodeHex(char[])" target="org.apache.commons.codec.DecoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e779" source="org.apache.commons.codec.binary.Hex.decodeHex(char[])" target="org.apache.commons.codec.binary.Hex.toDigit(char,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e780" source="org.apache.commons.codec.binary.Hex.encode(byte[])" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e781" source="org.apache.commons.codec.binary.Hex.encode(byte[])" target="org.apache.commons.codec.binary.Hex.getCharset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e782" source="org.apache.commons.codec.binary.Hex.encode(java.nio.ByteBuffer)" target="org.apache.commons.codec.binary.Hex.encodeHexString(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e783" source="org.apache.commons.codec.binary.Hex.encode(java.nio.ByteBuffer)" target="org.apache.commons.codec.binary.Hex.getCharset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e784" source="org.apache.commons.codec.binary.Hex.encodeHex(byte[])" target="org.apache.commons.codec.binary.Hex.encodeHex(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e785" source="org.apache.commons.codec.binary.Hex.encodeHex(byte[],boolean)" target="org.apache.commons.codec.binary.Hex.encodeHex(byte[],char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e786" source="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer)" target="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e787" source="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer,boolean)" target="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer,char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e788" source="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer,char[])" target="org.apache.commons.codec.binary.Hex.encodeHex(byte[],char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e789" source="org.apache.commons.codec.binary.Hex.toDigit(char,int)" target="org.apache.commons.codec.DecoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e790" source="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)" target="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e791" source="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)" target="org.apache.commons.codec.binary.Hex.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e792" source="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)" target="org.apache.commons.codec.binary.Hex.decode(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e793" source="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)" target="org.apache.commons.codec.binary.Hex.decodeHex(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e794" source="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)" target="org.apache.commons.codec.DecoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e795" source="org.apache.commons.codec.binary.Hex.encode(java.lang.Object)" target="org.apache.commons.codec.binary.Hex.getCharset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e796" source="org.apache.commons.codec.binary.Hex.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e797" source="org.apache.commons.codec.binary.Hex.encode(java.lang.Object)" target="org.apache.commons.codec.binary.Hex.encodeHex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e798" source="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])" target="org.apache.commons.codec.binary.Hex.encodeHex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e799" source="org.apache.commons.codec.binary.Hex.encodeHexString(java.nio.ByteBuffer)" target="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e800" source="org.apache.commons.codec.binary.HexTest.charsetSanityCheck(java.lang.String)" target="org.apache.commons.codec.binary.HexTest.log(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e801" source="org.apache.commons.codec.binary.HexTest.charsetSanityCheck(java.lang.String)" target="org.apache.commons.codec.binary.HexTest.log(java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e802" source="org.apache.commons.codec.binary.HexTest.checkDecodeHexCharArrayOddCharacters(char[])" target="org.apache.commons.codec.binary.Hex.decodeHex(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e803" source="org.apache.commons.codec.binary.HexTest.testCustomCharset()" target="org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e804" source="org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.HexTest.charsetSanityCheck(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e805" source="org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.HexTest.log(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e806" source="org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.Hex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e807" source="org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.Hex.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e808" source="org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e809" source="org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e810" source="org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e811" source="org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.Hex.getCharset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e812" source="org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.Hex.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e813" source="org.apache.commons.codec.binary.HexTest.testCustomCharsetBadName()" target="org.apache.commons.codec.binary.Hex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e814" source="org.apache.commons.codec.binary.HexTest.testCustomCharsetToString()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e815" source="org.apache.commons.codec.binary.HexTest.testCustomCharsetToString()" target="org.apache.commons.codec.binary.Hex.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e816" source="org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e817" source="org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0()" target="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e818" source="org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e819" source="org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1()" target="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e820" source="org.apache.commons.codec.binary.HexTest.testDecodeByteArrayEmpty()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e821" source="org.apache.commons.codec.binary.HexTest.testDecodeByteArrayEmpty()" target="org.apache.commons.codec.binary.Hex.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e822" source="org.apache.commons.codec.binary.HexTest.testDecodeByteArrayObjectEmpty()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e823" source="org.apache.commons.codec.binary.HexTest.testDecodeByteArrayObjectEmpty()" target="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e824" source="org.apache.commons.codec.binary.HexTest.testDecodeByteArrayOddCharacters()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e825" source="org.apache.commons.codec.binary.HexTest.testDecodeByteArrayOddCharacters()" target="org.apache.commons.codec.binary.Hex.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e826" source="org.apache.commons.codec.binary.HexTest.testDecodeByteBufferEmpty()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e827" source="org.apache.commons.codec.binary.HexTest.testDecodeByteBufferEmpty()" target="org.apache.commons.codec.binary.Hex.decode(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e828" source="org.apache.commons.codec.binary.HexTest.testDecodeByteBufferObjectEmpty()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e829" source="org.apache.commons.codec.binary.HexTest.testDecodeByteBufferObjectEmpty()" target="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e830" source="org.apache.commons.codec.binary.HexTest.testDecodeByteBufferOddCharacters()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e831" source="org.apache.commons.codec.binary.HexTest.testDecodeByteBufferOddCharacters()" target="org.apache.commons.codec.binary.Hex.decode(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e832" source="org.apache.commons.codec.binary.HexTest.testDecodeCharArrayEmpty()" target="org.apache.commons.codec.binary.Hex.decodeHex(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e833" source="org.apache.commons.codec.binary.HexTest.testDecodeClassCastException()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e834" source="org.apache.commons.codec.binary.HexTest.testDecodeClassCastException()" target="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e835" source="org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters1()" target="org.apache.commons.codec.binary.HexTest.checkDecodeHexCharArrayOddCharacters(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e836" source="org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters3()" target="org.apache.commons.codec.binary.HexTest.checkDecodeHexCharArrayOddCharacters(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e837" source="org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters5()" target="org.apache.commons.codec.binary.HexTest.checkDecodeHexCharArrayOddCharacters(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e838" source="org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e839" source="org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters()" target="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e840" source="org.apache.commons.codec.binary.HexTest.testDecodeStringEmpty()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e841" source="org.apache.commons.codec.binary.HexTest.testDecodeStringEmpty()" target="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e842" source="org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e843" source="org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty()" target="org.apache.commons.codec.binary.Hex.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e844" source="org.apache.commons.codec.binary.HexTest.testEncodeByteArrayObjectEmpty()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e845" source="org.apache.commons.codec.binary.HexTest.testEncodeByteArrayObjectEmpty()" target="org.apache.commons.codec.binary.Hex.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e846" source="org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e847" source="org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty()" target="org.apache.commons.codec.binary.Hex.encode(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e848" source="org.apache.commons.codec.binary.HexTest.testEncodeByteBufferObjectEmpty()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e849" source="org.apache.commons.codec.binary.HexTest.testEncodeByteBufferObjectEmpty()" target="org.apache.commons.codec.binary.Hex.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e850" source="org.apache.commons.codec.binary.HexTest.testEncodeClassCastException()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e851" source="org.apache.commons.codec.binary.HexTest.testEncodeClassCastException()" target="org.apache.commons.codec.binary.Hex.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e852" source="org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e853" source="org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom()" target="org.apache.commons.codec.binary.Hex.encodeHex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e854" source="org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom()" target="org.apache.commons.codec.binary.Hex.decodeHex(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e855" source="org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom()" target="org.apache.commons.codec.binary.Hex.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e856" source="org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom()" target="org.apache.commons.codec.binary.Hex.decode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e857" source="org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom()" target="org.apache.commons.codec.binary.Hex.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e858" source="org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom()" target="org.apache.commons.codec.binary.Hex.decode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e859" source="org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e860" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty()" target="org.apache.commons.codec.binary.Hex.encodeHex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e861" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e862" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty()" target="org.apache.commons.codec.binary.Hex.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e863" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e864" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex()" target="org.apache.commons.codec.binary.Hex.encodeHex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e865" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex()" target="org.apache.commons.codec.binary.Hex.encodeHex(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e866" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e867" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex()" target="org.apache.commons.codec.binary.Hex.encodeHex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e868" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex()" target="org.apache.commons.codec.binary.Hex.encodeHex(byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e869" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayZeroes()" target="org.apache.commons.codec.binary.Hex.encodeHex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e870" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty()" target="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e871" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e872" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty()" target="org.apache.commons.codec.binary.Hex.encode(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e873" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex()" target="org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e874" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex()" target="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e875" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex()" target="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e876" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex()" target="org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e877" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex()" target="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e878" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex()" target="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e879" source="org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferZeroes()" target="org.apache.commons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e880" source="org.apache.commons.codec.binary.HexTest.testEncodeStringEmpty()" target="org.apache.commons.codec.binary.Hex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e881" source="org.apache.commons.codec.binary.HexTest.testEncodeStringEmpty()" target="org.apache.commons.codec.binary.Hex.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e882" source="org.apache.commons.codec.binary.HexTest.testGetCharset()" target="org.apache.commons.codec.binary.Hex(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e883" source="org.apache.commons.codec.binary.HexTest.testGetCharset()" target="org.apache.commons.codec.binary.Hex.getCharset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e884" source="org.apache.commons.codec.binary.HexTest.testGetCharsetName()" target="org.apache.commons.codec.binary.Hex(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e885" source="org.apache.commons.codec.binary.HexTest.testGetCharsetName()" target="org.apache.commons.codec.binary.Hex.getCharsetName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e886" source="org.apache.commons.codec.binary.HexTest.testRequiredCharset()" target="org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e887" source="org.apache.commons.codec.binary.StringUtils.equals(java.lang.CharSequence,java.lang.CharSequence)" target="org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e888" source="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytes(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e889" source="org.apache.commons.codec.binary.StringUtils.getBytesUnchecked(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e890" source="org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytes(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e891" source="org.apache.commons.codec.binary.StringUtils.getBytesUtf16(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytes(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e892" source="org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytes(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e893" source="org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytes(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e894" source="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytes(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e895" source="org.apache.commons.codec.binary.StringUtils.newString(byte[],java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e896" source="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])" target="org.apache.commons.codec.binary.StringUtils.newString(byte[],java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e897" source="org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getByteBuffer(java.lang.String,java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e898" source="org.apache.commons.codec.binary.StringUtilsTest.testConstructor()" target="org.apache.commons.codec.binary.StringUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e899" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1()" target="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUnchecked(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e900" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1()" target="org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e901" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUnchecked(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUnchecked(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e902" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName()" target="org.apache.commons.codec.binary.StringUtils.getBytesUnchecked(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e903" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedNullInput()" target="org.apache.commons.codec.binary.StringUtils.getBytesUnchecked(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e904" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii()" target="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUnchecked(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e905" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii()" target="org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e906" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16()" target="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUnchecked(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e907" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf16(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e908" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be()" target="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUnchecked(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e909" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e910" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le()" target="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUnchecked(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e911" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e912" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8()" target="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUnchecked(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e913" source="org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e914" source="org.apache.commons.codec.binary.StringUtilsTest.testNewString(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.newString(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e915" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc()" target="org.apache.commons.codec.binary.StringUtils.newString(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e916" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1()" target="org.apache.commons.codec.binary.StringUtilsTest.testNewString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e917" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1()" target="org.apache.commons.codec.binary.StringUtils.newStringIso8859_1(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e918" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput()" target="org.apache.commons.codec.binary.StringUtils.newString(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e919" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii()" target="org.apache.commons.codec.binary.StringUtilsTest.testNewString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e920" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii()" target="org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e921" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16()" target="org.apache.commons.codec.binary.StringUtilsTest.testNewString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e922" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16()" target="org.apache.commons.codec.binary.StringUtils.newStringUtf16(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e923" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be()" target="org.apache.commons.codec.binary.StringUtilsTest.testNewString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e924" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be()" target="org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e925" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le()" target="org.apache.commons.codec.binary.StringUtilsTest.testNewString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e926" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le()" target="org.apache.commons.codec.binary.StringUtils.newStringUtf16Le(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e927" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8()" target="org.apache.commons.codec.binary.StringUtilsTest.testNewString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e928" source="org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8()" target="org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e929" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder#engine" target="org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e930" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.isConcat()" target="org.apache.commons.codec.language.bm.PhoneticEngine.isConcat()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e931" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e932" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.Object)" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e933" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.String)" target="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e934" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.getNameType()" target="org.apache.commons.codec.language.bm.PhoneticEngine.getNameType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e935" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.getRuleType()" target="org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e936" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean)" target="org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e937" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean)" target="org.apache.commons.codec.language.bm.PhoneticEngine.getNameType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e938" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean)" target="org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e939" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean)" target="org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e940" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int)" target="org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e941" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int)" target="org.apache.commons.codec.language.bm.PhoneticEngine.getNameType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e942" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int)" target="org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e943" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int)" target="org.apache.commons.codec.language.bm.PhoneticEngine.isConcat()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e944" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(org.apache.commons.codec.language.bm.NameType)" target="org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e945" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(org.apache.commons.codec.language.bm.NameType)" target="org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e946" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(org.apache.commons.codec.language.bm.NameType)" target="org.apache.commons.codec.language.bm.PhoneticEngine.isConcat()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e947" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(org.apache.commons.codec.language.bm.NameType)" target="org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e948" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(org.apache.commons.codec.language.bm.RuleType)" target="org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e949" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(org.apache.commons.codec.language.bm.RuleType)" target="org.apache.commons.codec.language.bm.PhoneticEngine.getNameType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e950" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(org.apache.commons.codec.language.bm.RuleType)" target="org.apache.commons.codec.language.bm.PhoneticEngine.isConcat()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e951" source="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(org.apache.commons.codec.language.bm.RuleType)" target="org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e952" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest()" target="org.apache.commons.codec.StringEncoderAbstractTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e953" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createStringEncoder()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e954" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e955" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(org.apache.commons.codec.language.bm.NameType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e956" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(org.apache.commons.codec.language.bm.RuleType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e957" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.assertNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoder,java.lang.String)" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e958" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e959" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e960" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e961" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.assertNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoder,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e962" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e963" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.assertNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoder,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e964" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e965" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.assertNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoder,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e966" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e967" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e968" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException()" target="org.apache.commons.codec.language.bm.Rule.getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e969" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException()" target="org.apache.commons.codec.language.bm.Lang.loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e970" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException()" target="org.apache.commons.codec.language.bm.Languages.getInstance(org.apache.commons.codec.language.bm.NameType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e971" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException()" target="org.apache.commons.codec.language.bm.Languages.getInstance(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e972" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e973" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e974" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException()" target="org.apache.commons.codec.language.bm.Rule(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e975" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException()" target="org.apache.commons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e976" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException()" target="org.apache.commons.codec.language.bm.Rule.patternAndContextMatches(java.lang.CharSequence,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e977" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e978" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(org.apache.commons.codec.language.bm.NameType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e979" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(org.apache.commons.codec.language.bm.RuleType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e980" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e981" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e982" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e983" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e984" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.isConcat()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e985" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e986" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(org.apache.commons.codec.language.bm.NameType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e987" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.getNameType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e988" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e989" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(org.apache.commons.codec.language.bm.RuleType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e990" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.getRuleType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e991" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e992" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(org.apache.commons.codec.language.bm.RuleType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e993" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e994" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e995" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e996" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e997" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e998" source="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3()" target="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e999" source="org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.cacheSubSequence(java.lang.CharSequence)" target="org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1000" source="org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.test()" target="org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.test(java.lang.CharSequence,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1001" source="org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.test()" target="org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.cacheSubSequence(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1002" source="org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.test(java.lang.CharSequence,int)" target="org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.test(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1003" source="org.apache.commons.codec.language.bm.Lang.guessLanguage(java.lang.String)" target="org.apache.commons.codec.language.bm.Lang.guessLanguages(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1004" source="org.apache.commons.codec.language.bm.Lang.guessLanguage(java.lang.String)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.isSingleton()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1005" source="org.apache.commons.codec.language.bm.Lang.guessLanguage(java.lang.String)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.getAny()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1006" source="org.apache.commons.codec.language.bm.Lang.loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)" target="org.apache.commons.codec.language.bm.Lang$LangRule(java.util.regex.Pattern,java.util.Set,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1007" source="org.apache.commons.codec.language.bm.Lang.loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)" target="org.apache.commons.codec.language.bm.Lang(java.util.List,org.apache.commons.codec.language.bm.Languages)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1008" source="org.apache.commons.codec.language.bm.Lang.guessLanguages(java.lang.String)" target="org.apache.commons.codec.language.bm.Languages.getLanguages()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1009" source="org.apache.commons.codec.language.bm.Lang.guessLanguages(java.lang.String)" target="org.apache.commons.codec.language.bm.Lang$LangRule.matches(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1010" source="org.apache.commons.codec.language.bm.Lang.guessLanguages(java.lang.String)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.from(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1011" source="org.apache.commons.codec.language.bm.LanguageGuessingTest#lang" target="org.apache.commons.codec.language.bm.Lang.instance(org.apache.commons.codec.language.bm.NameType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1012" source="org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing()" target="org.apache.commons.codec.language.bm.Lang.guessLanguages(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1013" source="org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing()" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.contains(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1014" source="org.apache.commons.codec.language.bm.Languages$LanguageSet.from(java.util.Set)" target="org.apache.commons.codec.language.bm.Languages$SomeLanguages(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1015" source="org.apache.commons.codec.language.bm.Languages$SomeLanguages(java.util.Set)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1016" source="org.apache.commons.codec.language.bm.Languages$SomeLanguages.merge(org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.from(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1017" source="org.apache.commons.codec.language.bm.Languages$SomeLanguages.restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.from(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1018" source="org.apache.commons.codec.language.bm.Languages$1()" target="org.apache.commons.codec.language.bm.Languages$LanguageSet()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1019" source="org.apache.commons.codec.language.bm.Languages#NO_LANGUAGES" target="org.apache.commons.codec.language.bm.Languages$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1020" source="org.apache.commons.codec.language.bm.Languages$2()" target="org.apache.commons.codec.language.bm.Languages$LanguageSet()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1021" source="org.apache.commons.codec.language.bm.Languages#ANY_LANGUAGE" target="org.apache.commons.codec.language.bm.Languages$2()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1022" source="org.apache.commons.codec.language.bm.Languages.langResourceName(org.apache.commons.codec.language.bm.NameType)" target="org.apache.commons.codec.language.bm.NameType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1023" source="org.apache.commons.codec.language.bm.Languages.getInstance(java.lang.String)" target="org.apache.commons.codec.language.bm.Languages(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1024" source="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.makeString()" target="org.apache.commons.codec.language.bm.Rule$Phoneme.getPhonemeText()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1025" source="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.empty(org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder(org.apache.commons.codec.language.bm.Rule$Phoneme)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1026" source="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.empty(org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1027" source="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.append(java.lang.CharSequence)" target="org.apache.commons.codec.language.bm.Rule$Phoneme.append(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1028" source="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.apply(org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int)" target="org.apache.commons.codec.language.bm.Rule$PhonemeExpr.getPhonemes()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1029" source="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.apply(org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int)" target="org.apache.commons.codec.language.bm.Rule$Phoneme.getLanguages()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1030" source="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.apply(org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1031" source="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.apply(org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.isEmpty()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1032" source="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.apply(org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int)" target="org.apache.commons.codec.language.bm.Rule$Phoneme(org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1033" source="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.invoke()" target="org.apache.commons.codec.language.bm.Rule.getPattern()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1034" source="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.invoke()" target="org.apache.commons.codec.language.bm.Rule.patternAndContextMatches(java.lang.CharSequence,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1035" source="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.invoke()" target="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.apply(org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1036" source="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.invoke()" target="org.apache.commons.codec.language.bm.Rule.getPhoneme()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1037" source="org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean)" target="org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1038" source="org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)" target="org.apache.commons.codec.language.bm.Lang.instance(org.apache.commons.codec.language.bm.NameType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1039" source="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String)" target="org.apache.commons.codec.language.bm.Lang.guessLanguages(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1040" source="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String)" target="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1041" source="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1042" source="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1043" source="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1044" source="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.PhoneticEngine.join(java.lang.Iterable,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1045" source="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.empty(org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1046" source="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication(java.util.Map,java.lang.CharSequence,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1047" source="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.invoke()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1048" source="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.getI()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1049" source="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.getPhonemeBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1050" source="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1051" source="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.makeString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1052" source="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)" target="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.getPhonemes()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1053" source="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)" target="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.empty(org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1054" source="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)" target="org.apache.commons.codec.language.bm.Rule$Phoneme.getLanguages()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1055" source="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)" target="org.apache.commons.codec.language.bm.Rule$Phoneme.getPhonemeText()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1056" source="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)" target="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication(java.util.Map,java.lang.CharSequence,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1057" source="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)" target="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.invoke()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1058" source="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)" target="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.isFound()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1059" source="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)" target="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.getPhonemeBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1060" source="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)" target="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.append(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1061" source="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)" target="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.getI()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1062" source="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)" target="org.apache.commons.codec.language.bm.Rule$Phoneme.mergeWithLanguage(org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1063" source="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)" target="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1064" source="org.apache.commons.codec.language.bm.PhoneticEnginePerformanceTest.test()" target="org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1065" source="org.apache.commons.codec.language.bm.PhoneticEnginePerformanceTest.test()" target="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1066" source="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(java.util.Map,boolean,java.lang.String)" target="org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1067" source="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(java.util.Map,boolean,java.lang.String)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.from(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1068" source="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(java.util.Map,boolean,java.lang.String)" target="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1069" source="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(java.util.Map,boolean,java.lang.String)" target="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1070" source="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion()" target="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(java.util.Map,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1071" source="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI()" target="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(java.util.Map,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1072" source="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC()" target="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(java.util.Map,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1073" source="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC()" target="org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(java.util.Map,boolean,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1074" source="org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode()" target="org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1075" source="org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode()" target="org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1076" source="org.apache.commons.codec.language.bm.Rule$Phoneme#COMPARATOR" target="org.apache.commons.codec.language.bm.Rule$Phoneme$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1077" source="org.apache.commons.codec.language.bm.Rule$Phoneme(org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme)" target="org.apache.commons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1078" source="org.apache.commons.codec.language.bm.Rule$Phoneme(org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1079" source="org.apache.commons.codec.language.bm.Rule$Phoneme.join(org.apache.commons.codec.language.bm.Rule$Phoneme)" target="org.apache.commons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1080" source="org.apache.commons.codec.language.bm.Rule$Phoneme.join(org.apache.commons.codec.language.bm.Rule$Phoneme)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1081" source="org.apache.commons.codec.language.bm.Rule$Phoneme.mergeWithLanguage(org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1082" source="org.apache.commons.codec.language.bm.Rule$Phoneme.mergeWithLanguage(org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.merge(org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1083" source="org.apache.commons.codec.language.bm.Rule#ALL_STRINGS_RMATCHER" target="org.apache.commons.codec.language.bm.Rule$Phoneme$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1084" source="org.apache.commons.codec.language.bm.Rule(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr)" target="org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1085" source="org.apache.commons.codec.language.bm.Rule.patternAndContextMatches(java.lang.CharSequence,int)" target="org.apache.commons.codec.language.bm.Rule$RPattern.isMatch(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1086" source="org.apache.commons.codec.language.bm.Rule.createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)" target="org.apache.commons.codec.language.bm.NameType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1087" source="org.apache.commons.codec.language.bm.Rule.createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)" target="org.apache.commons.codec.language.bm.RuleType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1088" source="org.apache.commons.codec.language.bm.Rule.getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)" target="org.apache.commons.codec.language.bm.Rule.getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1089" source="org.apache.commons.codec.language.bm.Rule.getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.from(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1090" source="org.apache.commons.codec.language.bm.Rule.getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1091" source="org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)" target="org.apache.commons.codec.language.bm.NameType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1092" source="org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)" target="org.apache.commons.codec.language.bm.RuleType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1093" source="org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.isSingleton()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1094" source="org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1095" source="org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.getAny()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1096" source="org.apache.commons.codec.language.bm.Rule$2(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr)" target="org.apache.commons.codec.language.bm.Rule(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1097" source="org.apache.commons.codec.language.bm.Rule.parseRules(java.util.Scanner,java.lang.String)" target="org.apache.commons.codec.language.bm.Rule.parseRules(java.util.Scanner,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1098" source="org.apache.commons.codec.language.bm.Rule.parseRules(java.util.Scanner,java.lang.String)" target="org.apache.commons.codec.language.bm.Rule.createScanner(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1099" source="org.apache.commons.codec.language.bm.Rule.parseRules(java.util.Scanner,java.lang.String)" target="org.apache.commons.codec.language.bm.Rule.stripQuotes(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1100" source="org.apache.commons.codec.language.bm.Rule.parseRules(java.util.Scanner,java.lang.String)" target="org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1101" source="org.apache.commons.codec.language.bm.Rule.parseRules(java.util.Scanner,java.lang.String)" target="org.apache.commons.codec.language.bm.Rule$2(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1102" source="org.apache.commons.codec.language.bm.Rule.parseRules(java.util.Scanner,java.lang.String)" target="org.apache.commons.codec.language.bm.Rule(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1103" source="org.apache.commons.codec.language.bm.Rule.createScanner(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)" target="org.apache.commons.codec.language.bm.Rule.createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1104" source="org.apache.commons.codec.language.bm.Rule.parsePhoneme(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1105" source="org.apache.commons.codec.language.bm.Rule.parsePhoneme(java.lang.String)" target="org.apache.commons.codec.language.bm.Languages$LanguageSet.from(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1106" source="org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule.parsePhoneme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1107" source="org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1108" source="org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule$PhonemeList(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1109" source="org.apache.commons.codec.language.bm.Rule$5.isMatch(java.lang.CharSequence)" target="org.apache.commons.codec.language.bm.Rule.startsWith(java.lang.CharSequence,java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1110" source="org.apache.commons.codec.language.bm.Rule$6.isMatch(java.lang.CharSequence)" target="org.apache.commons.codec.language.bm.Rule.endsWith(java.lang.CharSequence,java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1111" source="org.apache.commons.codec.language.bm.Rule$7.isMatch(java.lang.CharSequence)" target="org.apache.commons.codec.language.bm.Rule.contains(java.lang.CharSequence,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1112" source="org.apache.commons.codec.language.bm.Rule$8.isMatch(java.lang.CharSequence)" target="org.apache.commons.codec.language.bm.Rule.contains(java.lang.CharSequence,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1113" source="org.apache.commons.codec.language.bm.Rule$9.isMatch(java.lang.CharSequence)" target="org.apache.commons.codec.language.bm.Rule.contains(java.lang.CharSequence,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1114" source="org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule$3()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1115" source="org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule$4()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1116" source="org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule$5()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1117" source="org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule.startsWith(java.lang.CharSequence,java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1118" source="org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule$6()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1119" source="org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule.endsWith(java.lang.CharSequence,java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1120" source="org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule$7()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1121" source="org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule.contains(java.lang.CharSequence,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1122" source="org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule$8()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1123" source="org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule$9()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1124" source="org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)" target="org.apache.commons.codec.language.bm.Rule$Phoneme$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1125" source="org.apache.commons.codec.language.bm.RuleTest.makePhonemes()" target="org.apache.commons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1126" source="org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative()" target="org.apache.commons.codec.language.bm.RuleTest.makePhonemes()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1127" source="org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative()" target="org.apache.commons.codec.language.bm.Rule$Phoneme.getPhonemeText()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1128" source="org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative()" target="org.apache.commons.codec.language.bm.RuleTest$NegativeIntegerBaseMatcher()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1129" source="org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero()" target="org.apache.commons.codec.language.bm.RuleTest.makePhonemes()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1130" source="org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero()" target="org.apache.commons.codec.language.bm.Rule$Phoneme.getPhonemeText()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1131" source="org.apache.commons.codec.language.bm.RuleTest.testSubSequenceWorks()" target="org.apache.commons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1132" source="org.apache.commons.codec.language.bm.RuleTest.testSubSequenceWorks()" target="org.apache.commons.codec.language.bm.Rule$Phoneme.getPhonemeText()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1133" source="org.apache.commons.codec.language.bm.RuleTest.testSubSequenceWorks()" target="org.apache.commons.codec.language.bm.Rule$Phoneme(org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1134" source="org.apache.commons.codec.language.bm.NameType#ASHKENAZI" target="org.apache.commons.codec.language.bm.NameType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1135" source="org.apache.commons.codec.language.bm.NameType#GENERIC" target="org.apache.commons.codec.language.bm.NameType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1136" source="org.apache.commons.codec.language.bm.NameType#SEPHARDIC" target="org.apache.commons.codec.language.bm.NameType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1137" source="org.apache.commons.codec.language.bm.RuleType#APPROX" target="org.apache.commons.codec.language.bm.RuleType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1138" source="org.apache.commons.codec.language.bm.RuleType#EXACT" target="org.apache.commons.codec.language.bm.RuleType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1139" source="org.apache.commons.codec.language.bm.RuleType#RULES" target="org.apache.commons.codec.language.bm.RuleType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1140" source="org.apache.commons.codec.language.AbstractCaverphone.isEncodeEqual(java.lang.String,java.lang.String)" target="org.apache.commons.codec.StringEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1141" source="org.apache.commons.codec.language.AbstractCaverphone.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1142" source="org.apache.commons.codec.language.AbstractCaverphone.encode(java.lang.Object)" target="org.apache.commons.codec.StringEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1143" source="org.apache.commons.codec.language.Caverphone#encoder" target="org.apache.commons.codec.language.Caverphone2()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1144" source="org.apache.commons.codec.language.Caverphone.isCaverphoneEqual(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.Caverphone.caverphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1145" source="org.apache.commons.codec.language.Caverphone.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1146" source="org.apache.commons.codec.language.Caverphone.encode(java.lang.Object)" target="org.apache.commons.codec.language.Caverphone.caverphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1147" source="org.apache.commons.codec.language.Caverphone.caverphone(java.lang.String)" target="org.apache.commons.codec.language.Caverphone2.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1148" source="org.apache.commons.codec.language.Caverphone.encode(java.lang.String)" target="org.apache.commons.codec.language.Caverphone.caverphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1149" source="org.apache.commons.codec.language.Caverphone1()" target="org.apache.commons.codec.language.AbstractCaverphone()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1150" source="org.apache.commons.codec.language.Caverphone1Test()" target="org.apache.commons.codec.StringEncoderAbstractTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1151" source="org.apache.commons.codec.language.Caverphone1Test.createStringEncoder()" target="org.apache.commons.codec.language.Caverphone1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1152" source="org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1153" source="org.apache.commons.codec.language.Caverphone1Test.testEndMb()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1154" source="org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals()" target="org.apache.commons.codec.language.Caverphone1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1155" source="org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals()" target="org.apache.commons.codec.language.AbstractCaverphone.isEncodeEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1156" source="org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1157" source="org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1158" source="org.apache.commons.codec.language.Caverphone2()" target="org.apache.commons.codec.language.AbstractCaverphone()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1159" source="org.apache.commons.codec.language.Caverphone2Test()" target="org.apache.commons.codec.StringEncoderAbstractTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1160" source="org.apache.commons.codec.language.Caverphone2Test.createStringEncoder()" target="org.apache.commons.codec.language.Caverphone2()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1161" source="org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1162" source="org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1163" source="org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1164" source="org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1165" source="org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1166" source="org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1167" source="org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncoding(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1168" source="org.apache.commons.codec.language.Caverphone2Test.testEndMb()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1169" source="org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals()" target="org.apache.commons.codec.language.Caverphone2()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1170" source="org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals()" target="org.apache.commons.codec.language.AbstractCaverphone.isEncodeEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1171" source="org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1172" source="org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.toString()" target="org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.copyData(int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1173" source="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer(char[])" target="org.apache.commons.codec.language.ColognePhonetic$CologneBuffer(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1174" source="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.getNextChar()" target="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.getNextPos()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1175" source="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.removeNext()" target="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.getNextChar()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1176" source="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.addLeft(char)" target="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.getNextPos()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1177" source="org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer(int)" target="org.apache.commons.codec.language.ColognePhonetic$CologneBuffer(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1178" source="org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1179" source="org.apache.commons.codec.language.ColognePhonetic.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1180" source="org.apache.commons.codec.language.ColognePhonetic.encode(java.lang.Object)" target="org.apache.commons.codec.language.ColognePhonetic.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1181" source="org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)" target="org.apache.commons.codec.language.ColognePhonetic.preprocess(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1182" source="org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)" target="org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1183" source="org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)" target="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1184" source="org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)" target="org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.length()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1185" source="org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)" target="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.removeNext()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1186" source="org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)" target="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.getNextChar()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1187" source="org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)" target="org.apache.commons.codec.language.ColognePhonetic.arrayContains(char[],char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1188" source="org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)" target="org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.addLeft(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1189" source="org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)" target="org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.addRight(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1190" source="org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)" target="org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1191" source="org.apache.commons.codec.language.ColognePhonetic.encode(java.lang.String)" target="org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1192" source="org.apache.commons.codec.language.ColognePhoneticTest()" target="org.apache.commons.codec.StringEncoderAbstractTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1193" source="org.apache.commons.codec.language.ColognePhoneticTest.createStringEncoder()" target="org.apache.commons.codec.language.ColognePhonetic()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1194" source="org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncoding(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1195" source="org.apache.commons.codec.language.ColognePhoneticTest.testAaclan()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncoding(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1196" source="org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncoding(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1197" source="org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1198" source="org.apache.commons.codec.language.ColognePhoneticTest.testExamples()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1199" source="org.apache.commons.codec.language.ColognePhoneticTest.testHyphen()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1200" source="org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1201" source="org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals()" target="org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1202" source="org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1203" source="org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1204" source="org.apache.commons.codec.language.DaitchMokotoffSoundex$1.compare(org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule,org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getPatternLength()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1205" source="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.equals(java.lang.Object)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1206" source="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.hashCode()" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1207" source="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.createBranch()" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1208" source="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.createBranch()" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1209" source="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getReplacements(java.lang.String,boolean)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getPatternLength()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1210" source="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getReplacements(java.lang.String,boolean)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.isVowel(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1211" source="org.apache.commons.codec.language.DaitchMokotoffSoundex()" target="org.apache.commons.codec.language.DaitchMokotoffSoundex(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1212" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1213" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.encode(java.lang.Object)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1214" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.encode(java.lang.String)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1215" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1216" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String,boolean)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex.cleanup(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1217" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String,boolean)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1218" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String,boolean)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.matches(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1219" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String,boolean)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getReplacements(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1220" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String,boolean)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.createBranch()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1221" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String,boolean)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.processNextReplacement(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1222" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String,boolean)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getPatternLength()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1223" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String,boolean)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.finish()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1224" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String,boolean)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1225" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.parseRules(java.util.Scanner,java.lang.String,java.util.Map,java.util.Map)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1226" source="org.apache.commons.codec.language.DaitchMokotoffSoundex.parseRules(java.util.Scanner,java.lang.String,java.util.Map,java.util.Map)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1227" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest()" target="org.apache.commons.codec.StringEncoderAbstractTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1228" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.encode(java.lang.String)" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1229" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.encode(java.lang.String)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1230" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.soundex(java.lang.String)" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1231" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.soundex(java.lang.String)" target="org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1232" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.createStringEncoder()" target="org.apache.commons.codec.language.DaitchMokotoffSoundex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1233" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding()" target="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1234" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes()" target="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1235" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeBasic()" target="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1236" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1237" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1238" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable()" target="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1239" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic()" target="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1240" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2()" target="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1241" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3()" target="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1242" source="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters()" target="org.apache.commons.codec.language.DaitchMokotoffSoundexTest.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1243" source="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1244" source="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1245" source="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1246" source="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1247" source="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1248" source="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1249" source="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1250" source="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1251" source="org.apache.commons.codec.language.DoubleMetaphone.conditionC0(java.lang.String,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1252" source="org.apache.commons.codec.language.DoubleMetaphone.conditionC0(java.lang.String,int)" target="org.apache.commons.codec.language.DoubleMetaphone.isVowel(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1253" source="org.apache.commons.codec.language.DoubleMetaphone.conditionC0(java.lang.String,int)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1254" source="org.apache.commons.codec.language.DoubleMetaphone.conditionCH0(java.lang.String,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1255" source="org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(java.lang.String,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1256" source="org.apache.commons.codec.language.DoubleMetaphone.conditionL0(java.lang.String,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1257" source="org.apache.commons.codec.language.DoubleMetaphone.conditionM0(java.lang.String,int)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1258" source="org.apache.commons.codec.language.DoubleMetaphone.conditionM0(java.lang.String,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1259" source="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1260" source="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean)" target="org.apache.commons.codec.binary.StringUtils.equals(java.lang.CharSequence,java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1261" source="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1262" source="org.apache.commons.codec.language.DoubleMetaphone.handleAEIOUY(org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1263" source="org.apache.commons.codec.language.DoubleMetaphone.handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.conditionC0(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1264" source="org.apache.commons.codec.language.DoubleMetaphone.handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1265" source="org.apache.commons.codec.language.DoubleMetaphone.handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1266" source="org.apache.commons.codec.language.DoubleMetaphone.handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1267" source="org.apache.commons.codec.language.DoubleMetaphone.handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1268" source="org.apache.commons.codec.language.DoubleMetaphone.handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1269" source="org.apache.commons.codec.language.DoubleMetaphone.handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1270" source="org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1271" source="org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1272" source="org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1273" source="org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1274" source="org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1275" source="org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1276" source="org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.conditionCH0(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1277" source="org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1278" source="org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1279" source="org.apache.commons.codec.language.DoubleMetaphone.handleD(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1280" source="org.apache.commons.codec.language.DoubleMetaphone.handleD(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1281" source="org.apache.commons.codec.language.DoubleMetaphone.handleD(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1282" source="org.apache.commons.codec.language.DoubleMetaphone.handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1283" source="org.apache.commons.codec.language.DoubleMetaphone.handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleGH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1284" source="org.apache.commons.codec.language.DoubleMetaphone.handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.isVowel(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1285" source="org.apache.commons.codec.language.DoubleMetaphone.handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1286" source="org.apache.commons.codec.language.DoubleMetaphone.handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1287" source="org.apache.commons.codec.language.DoubleMetaphone.handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1288" source="org.apache.commons.codec.language.DoubleMetaphone.handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1289" source="org.apache.commons.codec.language.DoubleMetaphone.handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1290" source="org.apache.commons.codec.language.DoubleMetaphone.handleGH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.isVowel(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1291" source="org.apache.commons.codec.language.DoubleMetaphone.handleGH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1292" source="org.apache.commons.codec.language.DoubleMetaphone.handleGH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1293" source="org.apache.commons.codec.language.DoubleMetaphone.handleGH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1294" source="org.apache.commons.codec.language.DoubleMetaphone.handleH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.isVowel(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1295" source="org.apache.commons.codec.language.DoubleMetaphone.handleH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1296" source="org.apache.commons.codec.language.DoubleMetaphone.handleH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1297" source="org.apache.commons.codec.language.DoubleMetaphone.handleJ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1298" source="org.apache.commons.codec.language.DoubleMetaphone.handleJ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1299" source="org.apache.commons.codec.language.DoubleMetaphone.handleJ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1300" source="org.apache.commons.codec.language.DoubleMetaphone.handleJ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1301" source="org.apache.commons.codec.language.DoubleMetaphone.handleJ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.isVowel(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1302" source="org.apache.commons.codec.language.DoubleMetaphone.handleL(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1303" source="org.apache.commons.codec.language.DoubleMetaphone.handleL(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.conditionL0(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1304" source="org.apache.commons.codec.language.DoubleMetaphone.handleL(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1305" source="org.apache.commons.codec.language.DoubleMetaphone.handleL(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1306" source="org.apache.commons.codec.language.DoubleMetaphone.handleP(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1307" source="org.apache.commons.codec.language.DoubleMetaphone.handleP(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1308" source="org.apache.commons.codec.language.DoubleMetaphone.handleP(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1309" source="org.apache.commons.codec.language.DoubleMetaphone.handleR(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1310" source="org.apache.commons.codec.language.DoubleMetaphone.handleR(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1311" source="org.apache.commons.codec.language.DoubleMetaphone.handleR(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1312" source="org.apache.commons.codec.language.DoubleMetaphone.handleR(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1313" source="org.apache.commons.codec.language.DoubleMetaphone.handleS(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1314" source="org.apache.commons.codec.language.DoubleMetaphone.handleS(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1315" source="org.apache.commons.codec.language.DoubleMetaphone.handleS(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1316" source="org.apache.commons.codec.language.DoubleMetaphone.handleS(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1317" source="org.apache.commons.codec.language.DoubleMetaphone.handleS(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1318" source="org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1319" source="org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1320" source="org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1321" source="org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1322" source="org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.isVowel(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1323" source="org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1324" source="org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1325" source="org.apache.commons.codec.language.DoubleMetaphone.handleT(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1326" source="org.apache.commons.codec.language.DoubleMetaphone.handleT(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1327" source="org.apache.commons.codec.language.DoubleMetaphone.handleT(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1328" source="org.apache.commons.codec.language.DoubleMetaphone.handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1329" source="org.apache.commons.codec.language.DoubleMetaphone.handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1330" source="org.apache.commons.codec.language.DoubleMetaphone.handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.isVowel(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1331" source="org.apache.commons.codec.language.DoubleMetaphone.handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1332" source="org.apache.commons.codec.language.DoubleMetaphone.handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1333" source="org.apache.commons.codec.language.DoubleMetaphone.handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1334" source="org.apache.commons.codec.language.DoubleMetaphone.handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1335" source="org.apache.commons.codec.language.DoubleMetaphone.handleX(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1336" source="org.apache.commons.codec.language.DoubleMetaphone.handleX(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1337" source="org.apache.commons.codec.language.DoubleMetaphone.handleX(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1338" source="org.apache.commons.codec.language.DoubleMetaphone.handleZ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1339" source="org.apache.commons.codec.language.DoubleMetaphone.handleZ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1340" source="org.apache.commons.codec.language.DoubleMetaphone.handleZ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String,int,int,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1341" source="org.apache.commons.codec.language.DoubleMetaphone.handleZ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1342" source="org.apache.commons.codec.language.DoubleMetaphone.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1343" source="org.apache.commons.codec.language.DoubleMetaphone.encode(java.lang.Object)" target="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1344" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String)" target="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1345" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.cleanInput(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1346" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.isSlavoGermanic(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1347" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.isSilentStart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1348" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1349" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.getMaxCodeLen()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1350" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.isComplete()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1351" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleAEIOUY(org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1352" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1353" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1354" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1355" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleD(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1356" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1357" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1358" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleJ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1359" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleL(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1360" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.conditionM0(java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1361" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleP(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1362" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleR(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1363" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleS(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1364" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleT(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1365" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1366" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleX(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1367" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.handleZ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1368" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.getAlternate()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1369" source="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.getPrimary()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1370" source="org.apache.commons.codec.language.DoubleMetaphone.encode(java.lang.String)" target="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1371" source="org.apache.commons.codec.language.DoubleMetaphone2Test()" target="org.apache.commons.codec.StringEncoderAbstractTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1372" source="org.apache.commons.codec.language.DoubleMetaphone2Test.createStringEncoder()" target="org.apache.commons.codec.language.DoubleMetaphone()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1373" source="org.apache.commons.codec.language.DoubleMetaphone2Test.checkDoubleMetaphone(int,boolean)" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1374" source="org.apache.commons.codec.language.DoubleMetaphone2Test.checkDoubleMetaphone(int,boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1375" source="org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate()" target="org.apache.commons.codec.language.DoubleMetaphone2Test.checkDoubleMetaphone(int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1376" source="org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary()" target="org.apache.commons.codec.language.DoubleMetaphone2Test.checkDoubleMetaphone(int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1377" source="org.apache.commons.codec.language.DoubleMetaphoneTest()" target="org.apache.commons.codec.StringEncoderAbstractTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1378" source="org.apache.commons.codec.language.DoubleMetaphoneTest.createStringEncoder()" target="org.apache.commons.codec.language.DoubleMetaphone()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1379" source="org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphone(java.lang.String,java.lang.String)" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1380" source="org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphone(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.DoubleMetaphone.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1381" source="org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphone(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.DoubleMetaphone.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1382" source="org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphone(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1383" source="org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphone(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1384" source="org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphoneAlt(java.lang.String,java.lang.String)" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1385" source="org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphoneAlt(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1386" source="org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest(java.lang.String[][],boolean)" target="org.apache.commons.codec.language.DoubleMetaphoneTest.validateFixture(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1387" source="org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest(java.lang.String[][],boolean)" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1388" source="org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest(java.lang.String[][],boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1389" source="org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest(java.lang.String[][],boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1390" source="org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneNotEqualTest(boolean)" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1391" source="org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneNotEqualTest(boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1392" source="org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneNotEqualTest(boolean)" target="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1393" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1394" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla()" target="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1395" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184()" target="org.apache.commons.codec.language.DoubleMetaphone()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1396" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184()" target="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1397" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone()" target="org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphone(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1398" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone()" target="org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphoneAlt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1399" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1400" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty()" target="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1401" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic()" target="org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest(java.lang.String[][],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1402" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2()" target="org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest(java.lang.String[][],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1403" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3()" target="org.apache.commons.codec.language.DoubleMetaphoneTest.validateFixture(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1404" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1405" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3()" target="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1406" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES()" target="org.apache.commons.codec.language.DoubleMetaphoneTest.validateFixture(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1407" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1408" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES()" target="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1409" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual()" target="org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneNotEqualTest(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1410" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1411" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde()" target="org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1412" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength()" target="org.apache.commons.codec.language.DoubleMetaphone()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1413" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength()" target="org.apache.commons.codec.language.DoubleMetaphone.getMaxCodeLen()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1414" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength()" target="org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1415" source="org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength()" target="org.apache.commons.codec.language.DoubleMetaphone.setMaxCodeLen(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1416" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.cleanName(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1417" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeVowels(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1418" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeDoubleConsonants(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1419" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getFirst3Last3(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1420" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1421" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.leftToRightThenRightToLeftProcessing(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1422" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1423" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.Object)" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1424" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.cleanName(java.lang.String)" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1425" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.cleanName(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1426" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeVowels(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1427" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeDoubleConsonants(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1428" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getFirst3Last3(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1429" source="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeVowels(java.lang.String)" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isVowel(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1430" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest()" target="org.apache.commons.codec.StringEncoderAbstractTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1431" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.createStringEncoder()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1432" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1433" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1434" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1435" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1436" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1437" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1438" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1439" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1440" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1441" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1442" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NINO_NoChange()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1443" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NINO_NoChange()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1444" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1445" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1446" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1447" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1448" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1449" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1450" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1451" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1452" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1453" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1454" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1455" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1456" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1457" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1458" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1459" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1460" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1461" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1462" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1463" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1464" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1465" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1466" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1467" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1468" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1469" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1470" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1471" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1472" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1473" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1474" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1475" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1476" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1477" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1478" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1479" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1480" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1481" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1482" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1483" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1484" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1485" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1486" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1487" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1488" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1489" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1490" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1491" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1492" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1493" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1494" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1495" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1496" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1497" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1498" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1499" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1500" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1501" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1502" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1503" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1504" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1505" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1506" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1507" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1508" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1509" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1510" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1511" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1512" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1513" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1514" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1515" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1516" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1517" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1518" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1519" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1520" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1521" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1522" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1523" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1524" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1525" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1526" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1527" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1528" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1529" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1530" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1531" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1532" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1533" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1534" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1535" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1536" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1537" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1538" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1539" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1540" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1541" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1542" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_One_Letter_to_Nothing()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1543" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_One_Letter_to_Nothing()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1544" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1545" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1546" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1547" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1548" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Space_to_Nothing()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1549" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Space_to_Nothing()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1550" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3_PETE_Returns_PETE()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1551" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3_PETE_Returns_PETE()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getFirst3Last3(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1552" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3__ALEXANDER_Returns_Aleder()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1553" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3__ALEXANDER_Returns_Aleder()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getFirst3Last3(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1554" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_13_Returns_1_Successfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1555" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_13_Returns_1_Successfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1556" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1557" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1558" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_2_Returns5_Successfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1559" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_2_Returns5_Successfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1560" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_7_Return4_Successfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1561" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_7_Return4_Successfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1562" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testIsVowel_CapitalA_ReturnsTrue()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1563" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testIsVowel_CapitalA_ReturnsTrue()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isVowel(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1564" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testIsVowel_SmallD_ReturnsFalse()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1565" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testIsVowel_SmallD_ReturnsFalse()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isVowel(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1566" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1567" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeDoubleConsonants(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1568" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleDoubleVowel_BEETLE_NotRemoved()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1569" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleDoubleVowel_BEETLE_NotRemoved()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeDoubleConsonants(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1570" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1571" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeDoubleConsonants(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1572" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1573" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeVowels(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1574" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1575" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeVowels(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1576" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1577" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.removeVowels(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1578" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1579" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.cleanName(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1580" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1581" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1582" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1583" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1584" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1585" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1586" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1587" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1588" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1589" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1590" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_7_Returns4_Successfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1591" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_7_Returns4_Successfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1592" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1593" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1594" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1595" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1596" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1597" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1598" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1599" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1600" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1601" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1602" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1603" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1604" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1605" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1606" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1607" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1608" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1609" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1610" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisVowel_SingleVowel_ReturnsTrue()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1611" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisVowel_SingleVowel_ReturnsTrue()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.isVowel(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1612" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1613" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.leftToRightThenRightToLeftProcessing(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1614" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1615" source="org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0()" target="org.apache.commons.codec.language.MatchRatingApproachEncoder.leftToRightThenRightToLeftProcessing(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1616" source="org.apache.commons.codec.language.Metaphone.isMetaphoneEqual(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1617" source="org.apache.commons.codec.language.Metaphone.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1618" source="org.apache.commons.codec.language.Metaphone.encode(java.lang.Object)" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1619" source="org.apache.commons.codec.language.Metaphone.encode(java.lang.String)" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1620" source="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)" target="org.apache.commons.codec.language.Metaphone.getMaxCodeLen()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1621" source="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)" target="org.apache.commons.codec.language.Metaphone.isPreviousChar(java.lang.StringBuilder,int,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1622" source="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)" target="org.apache.commons.codec.language.Metaphone.isLastChar(int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1623" source="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)" target="org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1624" source="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)" target="org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder,int,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1625" source="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)" target="org.apache.commons.codec.language.Metaphone.isVowel(java.lang.StringBuilder,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1626" source="org.apache.commons.codec.language.MetaphoneTest()" target="org.apache.commons.codec.StringEncoderAbstractTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1627" source="org.apache.commons.codec.language.MetaphoneTest.createStringEncoder()" target="org.apache.commons.codec.language.Metaphone()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1628" source="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1629" source="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])" target="org.apache.commons.codec.language.Metaphone.isMetaphoneEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1630" source="org.apache.commons.codec.language.MetaphoneTest.assertMetaphoneEqual(java.lang.String[][])" target="org.apache.commons.codec.language.MetaphoneTest.validateFixture(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1631" source="org.apache.commons.codec.language.MetaphoneTest.assertMetaphoneEqual(java.lang.String[][])" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1632" source="org.apache.commons.codec.language.MetaphoneTest.assertMetaphoneEqual(java.lang.String[][])" target="org.apache.commons.codec.language.Metaphone.isMetaphoneEqual(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1633" source="org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1634" source="org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1635" source="org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1636" source="org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1637" source="org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1638" source="org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1639" source="org.apache.commons.codec.language.MetaphoneTest.testExceedLength()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1640" source="org.apache.commons.codec.language.MetaphoneTest.testExceedLength()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1641" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1()" target="org.apache.commons.codec.language.MetaphoneTest.assertMetaphoneEqual(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1642" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2()" target="org.apache.commons.codec.language.MetaphoneTest.assertMetaphoneEqual(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1643" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero()" target="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1644" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert()" target="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1645" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary()" target="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1646" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn()" target="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1647" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight()" target="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1648" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary()" target="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1649" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis()" target="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1650" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter()" target="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1651" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay()" target="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1652" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan()" target="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1653" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite()" target="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1654" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright()" target="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1655" source="org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan()" target="org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1656" source="org.apache.commons.codec.language.MetaphoneTest.testMetaphone()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1657" source="org.apache.commons.codec.language.MetaphoneTest.testMetaphone()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1658" source="org.apache.commons.codec.language.MetaphoneTest.testPHTOF()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1659" source="org.apache.commons.codec.language.MetaphoneTest.testPHTOF()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1660" source="org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1661" source="org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1662" source="org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1663" source="org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation()" target="org.apache.commons.codec.language.Metaphone.setMaxCodeLen(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1664" source="org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1665" source="org.apache.commons.codec.language.MetaphoneTest.testTCH()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1666" source="org.apache.commons.codec.language.MetaphoneTest.testTCH()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1667" source="org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1668" source="org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1669" source="org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1670" source="org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1671" source="org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1672" source="org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1673" source="org.apache.commons.codec.language.MetaphoneTest.testWhy()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1674" source="org.apache.commons.codec.language.MetaphoneTest.testWhy()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1675" source="org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1676" source="org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1677" source="org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1678" source="org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA()" target="org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1679" source="org.apache.commons.codec.language.Nysiis()" target="org.apache.commons.codec.language.Nysiis(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1680" source="org.apache.commons.codec.language.Nysiis.transcodeRemaining(char,char,char,char)" target="org.apache.commons.codec.language.Nysiis.isVowel(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1681" source="org.apache.commons.codec.language.Nysiis.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1682" source="org.apache.commons.codec.language.Nysiis.encode(java.lang.Object)" target="org.apache.commons.codec.language.Nysiis.nysiis(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1683" source="org.apache.commons.codec.language.Nysiis.encode(java.lang.String)" target="org.apache.commons.codec.language.Nysiis.nysiis(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1684" source="org.apache.commons.codec.language.Nysiis.nysiis(java.lang.String)" target="org.apache.commons.codec.language.SoundexUtils.clean(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1685" source="org.apache.commons.codec.language.Nysiis.nysiis(java.lang.String)" target="org.apache.commons.codec.language.Nysiis.transcodeRemaining(char,char,char,char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1686" source="org.apache.commons.codec.language.Nysiis.nysiis(java.lang.String)" target="org.apache.commons.codec.language.Nysiis.isStrict()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1687" source="org.apache.commons.codec.language.NysiisTest#fullNysiis" target="org.apache.commons.codec.language.Nysiis(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1688" source="org.apache.commons.codec.language.NysiisTest()" target="org.apache.commons.codec.StringEncoderAbstractTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1689" source="org.apache.commons.codec.language.NysiisTest.createStringEncoder()" target="org.apache.commons.codec.language.Nysiis()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1690" source="org.apache.commons.codec.language.NysiisTest.assertEncodings(java.lang.String[][])" target="org.apache.commons.codec.language.Nysiis.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1691" source="org.apache.commons.codec.language.NysiisTest.encodeAll(java.lang.String[],java.lang.String)" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1692" source="org.apache.commons.codec.language.NysiisTest.encodeAll(java.lang.String[],java.lang.String)" target="org.apache.commons.codec.language.Nysiis.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1693" source="org.apache.commons.codec.language.NysiisTest.testBran()" target="org.apache.commons.codec.language.NysiisTest.encodeAll(java.lang.String[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1694" source="org.apache.commons.codec.language.NysiisTest.testCap()" target="org.apache.commons.codec.language.NysiisTest.encodeAll(java.lang.String[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1695" source="org.apache.commons.codec.language.NysiisTest.testDad()" target="org.apache.commons.codec.language.NysiisTest.encodeAll(java.lang.String[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1696" source="org.apache.commons.codec.language.NysiisTest.testDan()" target="org.apache.commons.codec.language.NysiisTest.encodeAll(java.lang.String[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1697" source="org.apache.commons.codec.language.NysiisTest.testDropBy()" target="org.apache.commons.codec.language.NysiisTest.assertEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1698" source="org.apache.commons.codec.language.NysiisTest.testFal()" target="org.apache.commons.codec.language.NysiisTest.encodeAll(java.lang.String[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1699" source="org.apache.commons.codec.language.NysiisTest.testOthers()" target="org.apache.commons.codec.language.NysiisTest.assertEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1700" source="org.apache.commons.codec.language.NysiisTest.testRule1()" target="org.apache.commons.codec.language.NysiisTest.assertEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1701" source="org.apache.commons.codec.language.NysiisTest.testRule2()" target="org.apache.commons.codec.language.NysiisTest.assertEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1702" source="org.apache.commons.codec.language.NysiisTest.testRule4Dot1()" target="org.apache.commons.codec.language.NysiisTest.assertEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1703" source="org.apache.commons.codec.language.NysiisTest.testRule4Dot2()" target="org.apache.commons.codec.language.NysiisTest.assertEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1704" source="org.apache.commons.codec.language.NysiisTest.testRule5()" target="org.apache.commons.codec.language.NysiisTest.assertEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1705" source="org.apache.commons.codec.language.NysiisTest.testRule6()" target="org.apache.commons.codec.language.NysiisTest.assertEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1706" source="org.apache.commons.codec.language.NysiisTest.testRule7()" target="org.apache.commons.codec.language.NysiisTest.assertEncodings(java.lang.String[][])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1707" source="org.apache.commons.codec.language.NysiisTest.testSnad()" target="org.apache.commons.codec.language.NysiisTest.encodeAll(java.lang.String[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1708" source="org.apache.commons.codec.language.NysiisTest.testSnat()" target="org.apache.commons.codec.language.NysiisTest.encodeAll(java.lang.String[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1709" source="org.apache.commons.codec.language.NysiisTest.testSpecialBranches()" target="org.apache.commons.codec.language.NysiisTest.encodeAll(java.lang.String[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1710" source="org.apache.commons.codec.language.NysiisTest.testTranan()" target="org.apache.commons.codec.language.NysiisTest.encodeAll(java.lang.String[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1711" source="org.apache.commons.codec.language.NysiisTest.testTrueVariant()" target="org.apache.commons.codec.language.Nysiis(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1712" source="org.apache.commons.codec.language.NysiisTest.testTrueVariant()" target="org.apache.commons.codec.language.Nysiis.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1713" source="org.apache.commons.codec.language.RefinedSoundex#US_ENGLISH" target="org.apache.commons.codec.language.RefinedSoundex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1714" source="org.apache.commons.codec.language.RefinedSoundex.difference(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.StringEncoder,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1715" source="org.apache.commons.codec.language.RefinedSoundex.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1716" source="org.apache.commons.codec.language.RefinedSoundex.encode(java.lang.Object)" target="org.apache.commons.codec.language.RefinedSoundex.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1717" source="org.apache.commons.codec.language.RefinedSoundex.encode(java.lang.String)" target="org.apache.commons.codec.language.RefinedSoundex.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1718" source="org.apache.commons.codec.language.RefinedSoundex.soundex(java.lang.String)" target="org.apache.commons.codec.language.SoundexUtils.clean(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1719" source="org.apache.commons.codec.language.RefinedSoundex.soundex(java.lang.String)" target="org.apache.commons.codec.language.RefinedSoundex.getMappingCode(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1720" source="org.apache.commons.codec.language.RefinedSoundexTest()" target="org.apache.commons.codec.StringEncoderAbstractTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1721" source="org.apache.commons.codec.language.RefinedSoundexTest.createStringEncoder()" target="org.apache.commons.codec.language.RefinedSoundex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1722" source="org.apache.commons.codec.language.RefinedSoundexTest.testDifference()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1723" source="org.apache.commons.codec.language.RefinedSoundexTest.testDifference()" target="org.apache.commons.codec.language.RefinedSoundex.difference(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1724" source="org.apache.commons.codec.language.RefinedSoundexTest.testEncode()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1725" source="org.apache.commons.codec.language.RefinedSoundexTest.testEncode()" target="org.apache.commons.codec.language.RefinedSoundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1726" source="org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1727" source="org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter()" target="org.apache.commons.codec.language.RefinedSoundex.getMappingCode(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1728" source="org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance()" target="org.apache.commons.codec.language.RefinedSoundex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1729" source="org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance()" target="org.apache.commons.codec.language.RefinedSoundex.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1730" source="org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2()" target="org.apache.commons.codec.language.RefinedSoundex(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1731" source="org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2()" target="org.apache.commons.codec.language.RefinedSoundex.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1732" source="org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3()" target="org.apache.commons.codec.language.RefinedSoundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1733" source="org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3()" target="org.apache.commons.codec.language.RefinedSoundex.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1734" source="org.apache.commons.codec.language.Soundex#US_ENGLISH" target="org.apache.commons.codec.language.Soundex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1735" source="org.apache.commons.codec.language.Soundex.map(char)" target="org.apache.commons.codec.language.Soundex.getSoundexMapping()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1736" source="org.apache.commons.codec.language.Soundex.difference(java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.StringEncoder,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1737" source="org.apache.commons.codec.language.Soundex.encode(java.lang.Object)" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1738" source="org.apache.commons.codec.language.Soundex.encode(java.lang.Object)" target="org.apache.commons.codec.language.Soundex.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1739" source="org.apache.commons.codec.language.Soundex.encode(java.lang.String)" target="org.apache.commons.codec.language.Soundex.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1740" source="org.apache.commons.codec.language.Soundex.soundex(java.lang.String)" target="org.apache.commons.codec.language.SoundexUtils.clean(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1741" source="org.apache.commons.codec.language.Soundex.soundex(java.lang.String)" target="org.apache.commons.codec.language.Soundex.map(char)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1742" source="org.apache.commons.codec.language.SoundexTest()" target="org.apache.commons.codec.StringEncoderAbstractTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1743" source="org.apache.commons.codec.language.SoundexTest.createStringEncoder()" target="org.apache.commons.codec.language.Soundex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1744" source="org.apache.commons.codec.language.SoundexTest.testB650()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1745" source="org.apache.commons.codec.language.SoundexTest.testBadCharacters()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1746" source="org.apache.commons.codec.language.SoundexTest.testBadCharacters()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1747" source="org.apache.commons.codec.language.SoundexTest.testDifference()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1748" source="org.apache.commons.codec.language.SoundexTest.testDifference()" target="org.apache.commons.codec.language.Soundex.difference(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1749" source="org.apache.commons.codec.language.SoundexTest.testEncodeBasic()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1750" source="org.apache.commons.codec.language.SoundexTest.testEncodeBasic()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1751" source="org.apache.commons.codec.language.SoundexTest.testEncodeBatch2()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1752" source="org.apache.commons.codec.language.SoundexTest.testEncodeBatch2()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1753" source="org.apache.commons.codec.language.SoundexTest.testEncodeBatch3()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1754" source="org.apache.commons.codec.language.SoundexTest.testEncodeBatch3()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1755" source="org.apache.commons.codec.language.SoundexTest.testEncodeBatch4()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1756" source="org.apache.commons.codec.language.SoundexTest.testEncodeBatch4()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1757" source="org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1758" source="org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1759" source="org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1760" source="org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1761" source="org.apache.commons.codec.language.SoundexTest.testHWRuleEx1()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1762" source="org.apache.commons.codec.language.SoundexTest.testHWRuleEx1()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1763" source="org.apache.commons.codec.language.SoundexTest.testHWRuleEx2()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1764" source="org.apache.commons.codec.language.SoundexTest.testHWRuleEx2()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1765" source="org.apache.commons.codec.language.SoundexTest.testHWRuleEx3()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1766" source="org.apache.commons.codec.language.SoundexTest.testHWRuleEx3()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1767" source="org.apache.commons.codec.language.SoundexTest.testHWRuleEx3()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1768" source="org.apache.commons.codec.language.SoundexTest.testMsSqlServer1()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1769" source="org.apache.commons.codec.language.SoundexTest.testMsSqlServer1()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1770" source="org.apache.commons.codec.language.SoundexTest.testMsSqlServer2()" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1771" source="org.apache.commons.codec.language.SoundexTest.testMsSqlServer3()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1772" source="org.apache.commons.codec.language.SoundexTest.testMsSqlServer3()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1773" source="org.apache.commons.codec.language.SoundexTest.testNewInstance()" target="org.apache.commons.codec.language.Soundex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1774" source="org.apache.commons.codec.language.SoundexTest.testNewInstance()" target="org.apache.commons.codec.language.Soundex.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1775" source="org.apache.commons.codec.language.SoundexTest.testNewInstance2()" target="org.apache.commons.codec.language.Soundex(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1776" source="org.apache.commons.codec.language.SoundexTest.testNewInstance2()" target="org.apache.commons.codec.language.Soundex.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1777" source="org.apache.commons.codec.language.SoundexTest.testNewInstance3()" target="org.apache.commons.codec.language.Soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1778" source="org.apache.commons.codec.language.SoundexTest.testNewInstance3()" target="org.apache.commons.codec.language.Soundex.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1779" source="org.apache.commons.codec.language.SoundexTest.testSoundexUtilsConstructable()" target="org.apache.commons.codec.language.SoundexUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1780" source="org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour()" target="org.apache.commons.codec.language.SoundexUtils.clean(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1781" source="org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour()" target="org.apache.commons.codec.language.SoundexUtils.differenceEncoded(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1782" source="org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic()" target="org.apache.commons.codec.language.Soundex.soundex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1783" source="org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1784" source="org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1785" source="org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1786" source="org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1787" source="org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1788" source="org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex()" target="org.apache.commons.codec.language.Soundex.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1789" source="org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.StringEncoder,java.lang.String,java.lang.String)" target="org.apache.commons.codec.language.SoundexUtils.differenceEncoded(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1790" source="org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.StringEncoder,java.lang.String,java.lang.String)" target="org.apache.commons.codec.StringEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1791" source="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes()" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1792" source="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes()" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1793" source="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes()" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1794" source="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall()" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1795" source="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall()" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1796" source="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall()" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1797" source="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData()" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1798" source="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings()" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1799" source="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt()" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1800" source="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt()" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1801" source="org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt()" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1802" source="org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt()" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1803" source="org.apache.commons.codec.digest.B64Test.testB64T()" target="org.apache.commons.codec.digest.B64()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1804" source="org.apache.commons.codec.digest.B64Test.testB64from24bit()" target="org.apache.commons.codec.digest.B64.b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1805" source="org.apache.commons.codec.digest.Crypt.crypt(byte[])" target="org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1806" source="org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1807" source="org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1808" source="org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1809" source="org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1810" source="org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1811" source="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String)" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1812" source="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1813" source="org.apache.commons.codec.digest.CryptTest.testCrypt()" target="org.apache.commons.codec.digest.Crypt()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1814" source="org.apache.commons.codec.digest.CryptTest.testCryptWithBytes()" target="org.apache.commons.codec.digest.Crypt.crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1815" source="org.apache.commons.codec.digest.CryptTest.testCryptWithBytes()" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1816" source="org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt()" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1817" source="org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant()" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1818" source="org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant()" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1819" source="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1820" source="org.apache.commons.codec.digest.DigestUtils.md2(byte[])" target="org.apache.commons.codec.digest.DigestUtils.getMd2Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1821" source="org.apache.commons.codec.digest.DigestUtils.md2(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1822" source="org.apache.commons.codec.digest.DigestUtils.md2(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.getMd2Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1823" source="org.apache.commons.codec.digest.DigestUtils.md2(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.md2(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1824" source="org.apache.commons.codec.digest.DigestUtils.md2(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1825" source="org.apache.commons.codec.digest.DigestUtils.md2(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1826" source="org.apache.commons.codec.digest.DigestUtils.md2(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.getMd2Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1827" source="org.apache.commons.codec.digest.DigestUtils.md5(byte[])" target="org.apache.commons.codec.digest.DigestUtils.getMd5Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1828" source="org.apache.commons.codec.digest.DigestUtils.md5(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1829" source="org.apache.commons.codec.digest.DigestUtils.md5(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.getMd5Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1830" source="org.apache.commons.codec.digest.DigestUtils.md5(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.md5(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1831" source="org.apache.commons.codec.digest.DigestUtils.md5(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1832" source="org.apache.commons.codec.digest.DigestUtils.md5(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1833" source="org.apache.commons.codec.digest.DigestUtils.md5(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.getMd5Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1834" source="org.apache.commons.codec.digest.DigestUtils.sha(byte[])" target="org.apache.commons.codec.digest.DigestUtils.sha1(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1835" source="org.apache.commons.codec.digest.DigestUtils.sha(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.sha1(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1836" source="org.apache.commons.codec.digest.DigestUtils.sha(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.sha1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1837" source="org.apache.commons.codec.digest.DigestUtils.sha1(byte[])" target="org.apache.commons.codec.digest.DigestUtils.getSha1Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1838" source="org.apache.commons.codec.digest.DigestUtils.sha1(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1839" source="org.apache.commons.codec.digest.DigestUtils.sha1(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.getSha1Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1840" source="org.apache.commons.codec.digest.DigestUtils.sha1(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.sha1(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1841" source="org.apache.commons.codec.digest.DigestUtils.sha1(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1842" source="org.apache.commons.codec.digest.DigestUtils.sha1(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1843" source="org.apache.commons.codec.digest.DigestUtils.sha1(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.getSha1Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1844" source="org.apache.commons.codec.digest.DigestUtils.sha224(byte[])" target="org.apache.commons.codec.digest.DigestUtils.getSha224Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1845" source="org.apache.commons.codec.digest.DigestUtils.sha224(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1846" source="org.apache.commons.codec.digest.DigestUtils.sha224(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.getSha224Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1847" source="org.apache.commons.codec.digest.DigestUtils.sha224(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.sha224(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1848" source="org.apache.commons.codec.digest.DigestUtils.sha224(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1849" source="org.apache.commons.codec.digest.DigestUtils.sha224(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1850" source="org.apache.commons.codec.digest.DigestUtils.sha224(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.getSha224Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1851" source="org.apache.commons.codec.digest.DigestUtils.sha256(byte[])" target="org.apache.commons.codec.digest.DigestUtils.getSha256Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1852" source="org.apache.commons.codec.digest.DigestUtils.sha256(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1853" source="org.apache.commons.codec.digest.DigestUtils.sha256(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.getSha256Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1854" source="org.apache.commons.codec.digest.DigestUtils.sha256(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.sha256(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1855" source="org.apache.commons.codec.digest.DigestUtils.sha256(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1856" source="org.apache.commons.codec.digest.DigestUtils.sha256(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1857" source="org.apache.commons.codec.digest.DigestUtils.sha256(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.getSha256Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1858" source="org.apache.commons.codec.digest.DigestUtils.sha384(byte[])" target="org.apache.commons.codec.digest.DigestUtils.getSha384Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1859" source="org.apache.commons.codec.digest.DigestUtils.sha384(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1860" source="org.apache.commons.codec.digest.DigestUtils.sha384(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.getSha384Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1861" source="org.apache.commons.codec.digest.DigestUtils.sha384(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.sha384(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1862" source="org.apache.commons.codec.digest.DigestUtils.sha384(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1863" source="org.apache.commons.codec.digest.DigestUtils.sha384(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1864" source="org.apache.commons.codec.digest.DigestUtils.sha384(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.getSha384Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1865" source="org.apache.commons.codec.digest.DigestUtils.sha512(byte[])" target="org.apache.commons.codec.digest.DigestUtils.getSha512Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1866" source="org.apache.commons.codec.digest.DigestUtils.sha512(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1867" source="org.apache.commons.codec.digest.DigestUtils.sha512(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.getSha512Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1868" source="org.apache.commons.codec.digest.DigestUtils.sha512(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.sha512(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1869" source="org.apache.commons.codec.digest.DigestUtils.sha512(java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1870" source="org.apache.commons.codec.digest.DigestUtils.sha512(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.digest(java.security.MessageDigest,java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1871" source="org.apache.commons.codec.digest.DigestUtils.sha512(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.getSha512Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1872" source="org.apache.commons.codec.digest.DigestUtils.md2Hex(byte[])" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1873" source="org.apache.commons.codec.digest.DigestUtils.md2Hex(byte[])" target="org.apache.commons.codec.digest.DigestUtils.md2(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1874" source="org.apache.commons.codec.digest.DigestUtils.md2Hex(java.io.InputStream)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1875" source="org.apache.commons.codec.digest.DigestUtils.md2Hex(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.md2(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1876" source="org.apache.commons.codec.digest.DigestUtils.md2Hex(java.lang.String)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1877" source="org.apache.commons.codec.digest.DigestUtils.md2Hex(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.md2(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1878" source="org.apache.commons.codec.digest.DigestUtils.md2Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1879" source="org.apache.commons.codec.digest.DigestUtils.md2Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.md2(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1880" source="org.apache.commons.codec.digest.DigestUtils.md5Hex(byte[])" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1881" source="org.apache.commons.codec.digest.DigestUtils.md5Hex(byte[])" target="org.apache.commons.codec.digest.DigestUtils.md5(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1882" source="org.apache.commons.codec.digest.DigestUtils.md5Hex(java.io.InputStream)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1883" source="org.apache.commons.codec.digest.DigestUtils.md5Hex(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.md5(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1884" source="org.apache.commons.codec.digest.DigestUtils.md5Hex(java.lang.String)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1885" source="org.apache.commons.codec.digest.DigestUtils.md5Hex(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.md5(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1886" source="org.apache.commons.codec.digest.DigestUtils.md5Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1887" source="org.apache.commons.codec.digest.DigestUtils.md5Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.md5(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1888" source="org.apache.commons.codec.digest.DigestUtils.sha1Hex(byte[])" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1889" source="org.apache.commons.codec.digest.DigestUtils.sha1Hex(byte[])" target="org.apache.commons.codec.digest.DigestUtils.sha1(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1890" source="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.io.InputStream)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1891" source="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.sha1(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1892" source="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.lang.String)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1893" source="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.sha1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1894" source="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1895" source="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.sha1(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1896" source="org.apache.commons.codec.digest.DigestUtils.sha224Hex(byte[])" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1897" source="org.apache.commons.codec.digest.DigestUtils.sha224Hex(byte[])" target="org.apache.commons.codec.digest.DigestUtils.sha224(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1898" source="org.apache.commons.codec.digest.DigestUtils.sha224Hex(java.io.InputStream)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1899" source="org.apache.commons.codec.digest.DigestUtils.sha224Hex(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.sha224(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1900" source="org.apache.commons.codec.digest.DigestUtils.sha224Hex(java.lang.String)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1901" source="org.apache.commons.codec.digest.DigestUtils.sha224Hex(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.sha224(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1902" source="org.apache.commons.codec.digest.DigestUtils.sha224Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1903" source="org.apache.commons.codec.digest.DigestUtils.sha224Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.sha224(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1904" source="org.apache.commons.codec.digest.DigestUtils.sha256Hex(byte[])" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1905" source="org.apache.commons.codec.digest.DigestUtils.sha256Hex(byte[])" target="org.apache.commons.codec.digest.DigestUtils.sha256(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1906" source="org.apache.commons.codec.digest.DigestUtils.sha256Hex(java.io.InputStream)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1907" source="org.apache.commons.codec.digest.DigestUtils.sha256Hex(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.sha256(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1908" source="org.apache.commons.codec.digest.DigestUtils.sha256Hex(java.lang.String)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1909" source="org.apache.commons.codec.digest.DigestUtils.sha256Hex(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.sha256(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1910" source="org.apache.commons.codec.digest.DigestUtils.sha256Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1911" source="org.apache.commons.codec.digest.DigestUtils.sha256Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.sha256(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1912" source="org.apache.commons.codec.digest.DigestUtils.sha384Hex(byte[])" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1913" source="org.apache.commons.codec.digest.DigestUtils.sha384Hex(byte[])" target="org.apache.commons.codec.digest.DigestUtils.sha384(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1914" source="org.apache.commons.codec.digest.DigestUtils.sha384Hex(java.io.InputStream)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1915" source="org.apache.commons.codec.digest.DigestUtils.sha384Hex(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.sha384(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1916" source="org.apache.commons.codec.digest.DigestUtils.sha384Hex(java.lang.String)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1917" source="org.apache.commons.codec.digest.DigestUtils.sha384Hex(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.sha384(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1918" source="org.apache.commons.codec.digest.DigestUtils.sha384Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1919" source="org.apache.commons.codec.digest.DigestUtils.sha384Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.sha384(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1920" source="org.apache.commons.codec.digest.DigestUtils.sha512Hex(byte[])" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1921" source="org.apache.commons.codec.digest.DigestUtils.sha512Hex(byte[])" target="org.apache.commons.codec.digest.DigestUtils.sha512(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1922" source="org.apache.commons.codec.digest.DigestUtils.sha512Hex(java.io.InputStream)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1923" source="org.apache.commons.codec.digest.DigestUtils.sha512Hex(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.sha512(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1924" source="org.apache.commons.codec.digest.DigestUtils.sha512Hex(java.lang.String)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1925" source="org.apache.commons.codec.digest.DigestUtils.sha512Hex(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.sha512(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1926" source="org.apache.commons.codec.digest.DigestUtils.sha512Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1927" source="org.apache.commons.codec.digest.DigestUtils.sha512Hex(java.nio.ByteBuffer)" target="org.apache.commons.codec.digest.DigestUtils.sha512(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1928" source="org.apache.commons.codec.digest.DigestUtils.shaHex(byte[])" target="org.apache.commons.codec.digest.DigestUtils.sha1Hex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1929" source="org.apache.commons.codec.digest.DigestUtils.shaHex(java.io.InputStream)" target="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1930" source="org.apache.commons.codec.digest.DigestUtils.shaHex(java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1931" source="org.apache.commons.codec.digest.DigestUtils.getMd2Digest()" target="org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1932" source="org.apache.commons.codec.digest.DigestUtils.getMd5Digest()" target="org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1933" source="org.apache.commons.codec.digest.DigestUtils.getSha1Digest()" target="org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1934" source="org.apache.commons.codec.digest.DigestUtils.getSha224Digest()" target="org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1935" source="org.apache.commons.codec.digest.DigestUtils.getSha256Digest()" target="org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1936" source="org.apache.commons.codec.digest.DigestUtils.getSha384Digest()" target="org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1937" source="org.apache.commons.codec.digest.DigestUtils.getSha512Digest()" target="org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1938" source="org.apache.commons.codec.digest.DigestUtils.getShaDigest()" target="org.apache.commons.codec.digest.DigestUtils.getSha1Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1939" source="org.apache.commons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest,java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1940" source="org.apache.commons.codec.digest.DigestUtilsTest.testConstructable()" target="org.apache.commons.codec.digest.DigestUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1941" source="org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException()" target="org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1942" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex()" target="org.apache.commons.codec.digest.DigestUtils.md2Hex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1943" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex()" target="org.apache.commons.codec.digest.DigestUtils.md2Hex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1944" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex()" target="org.apache.commons.codec.digest.DigestUtils.md2Hex(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1945" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex()" target="org.apache.commons.codec.digest.DigestUtils.md2Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1946" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength()" target="org.apache.commons.codec.digest.DigestUtils.md2Hex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1947" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1948" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length()" target="org.apache.commons.codec.digest.DigestUtils.md2(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1949" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1950" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex()" target="org.apache.commons.codec.digest.DigestUtils.md5Hex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1951" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex()" target="org.apache.commons.codec.digest.DigestUtils.md5Hex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1952" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex()" target="org.apache.commons.codec.digest.DigestUtils.md5Hex(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1953" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex()" target="org.apache.commons.codec.digest.DigestUtils.md5Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1954" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForByteBuffer()" target="org.apache.commons.codec.digest.DigestUtils.md5Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1955" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForByteBuffer()" target="org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1956" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes()" target="org.apache.commons.codec.digest.DigestUtils.md5Hex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1957" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1958" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForByteBuffer()" target="org.apache.commons.codec.digest.DigestUtils.md5(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1959" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForByteBuffer()" target="org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1960" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes()" target="org.apache.commons.codec.digest.DigestUtils.md5(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1961" source="org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1962" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex()" target="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1963" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex()" target="org.apache.commons.codec.digest.DigestUtils.sha1Hex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1964" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1965" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex()" target="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1966" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex()" target="org.apache.commons.codec.digest.DigestUtils.sha1Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1967" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray()" target="org.apache.commons.codec.digest.DigestUtils.getSha1Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1968" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray()" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1969" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray()" target="org.apache.commons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1970" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer()" target="org.apache.commons.codec.digest.DigestUtils.getSha1Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1971" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer()" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1972" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer()" target="org.apache.commons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest,java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1973" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString()" target="org.apache.commons.codec.digest.DigestUtils.getSha1Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1974" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1975" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString()" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1976" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString()" target="org.apache.commons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1977" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha224()" target="org.apache.commons.codec.digest.DigestUtils.sha224Hex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1978" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha256()" target="org.apache.commons.codec.digest.DigestUtils.sha256Hex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1979" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha256()" target="org.apache.commons.codec.digest.DigestUtils.sha256Hex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1980" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha256()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1981" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha256()" target="org.apache.commons.codec.digest.DigestUtils.sha256Hex(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1982" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha256()" target="org.apache.commons.codec.digest.DigestUtils.sha256Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1983" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha384()" target="org.apache.commons.codec.digest.DigestUtils.sha384Hex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1984" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha384()" target="org.apache.commons.codec.digest.DigestUtils.sha384Hex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1985" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha384()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1986" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha384()" target="org.apache.commons.codec.digest.DigestUtils.sha384Hex(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1987" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha384()" target="org.apache.commons.codec.digest.DigestUtils.sha384Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1988" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha512()" target="org.apache.commons.codec.digest.DigestUtils.sha512Hex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1989" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha512()" target="org.apache.commons.codec.digest.DigestUtils.sha512Hex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1990" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha512()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1991" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha512()" target="org.apache.commons.codec.digest.DigestUtils.sha512Hex(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1992" source="org.apache.commons.codec.digest.DigestUtilsTest.testSha512()" target="org.apache.commons.codec.digest.DigestUtils.sha512Hex(java.nio.ByteBuffer)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1993" source="org.apache.commons.codec.digest.DigestUtilsTest.testShaHex()" target="org.apache.commons.codec.digest.DigestUtils.shaHex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1994" source="org.apache.commons.codec.digest.DigestUtilsTest.testShaHex()" target="org.apache.commons.codec.digest.DigestUtils.shaHex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1995" source="org.apache.commons.codec.digest.DigestUtilsTest.testShaHex()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1996" source="org.apache.commons.codec.digest.DigestUtilsTest.testShaHex()" target="org.apache.commons.codec.digest.DigestUtils.shaHex(java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1997" source="org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray()" target="org.apache.commons.codec.digest.DigestUtils.getShaDigest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1998" source="org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray()" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1999" source="org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray()" target="org.apache.commons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2000" source="org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString()" target="org.apache.commons.codec.digest.DigestUtils.getShaDigest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2001" source="org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2002" source="org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString()" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2003" source="org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString()" target="org.apache.commons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2004" source="org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],byte[])" target="org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2005" source="org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2006" source="org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2007" source="org.apache.commons.codec.digest.HmacUtils.hmacMd5(java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2008" source="org.apache.commons.codec.digest.HmacUtils.hmacMd5(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2009" source="org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],byte[])" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2010" source="org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2011" source="org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2012" source="org.apache.commons.codec.digest.HmacUtils.hmacSha1(java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2013" source="org.apache.commons.codec.digest.HmacUtils.hmacSha1(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2014" source="org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],byte[])" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2015" source="org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2016" source="org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2017" source="org.apache.commons.codec.digest.HmacUtils.hmacSha256(java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2018" source="org.apache.commons.codec.digest.HmacUtils.hmacSha256(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2019" source="org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],byte[])" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2020" source="org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2021" source="org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2022" source="org.apache.commons.codec.digest.HmacUtils.hmacSha384(java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2023" source="org.apache.commons.codec.digest.HmacUtils.hmacSha384(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2024" source="org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],byte[])" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2025" source="org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2026" source="org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2027" source="org.apache.commons.codec.digest.HmacUtils.hmacSha512(java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2028" source="org.apache.commons.codec.digest.HmacUtils.hmacSha512(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2029" source="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],byte[])" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2030" source="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],byte[])" target="org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2031" source="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],java.io.InputStream)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2032" source="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2033" source="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2034" source="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.HmacUtils.hmacMd5(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2035" source="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],byte[])" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2036" source="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],byte[])" target="org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2037" source="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],java.io.InputStream)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2038" source="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2039" source="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2040" source="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.HmacUtils.hmacSha1(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2041" source="org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],byte[])" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2042" source="org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],byte[])" target="org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2043" source="org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],java.io.InputStream)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2044" source="org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2045" source="org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2046" source="org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.HmacUtils.hmacSha256(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2047" source="org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],byte[])" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2048" source="org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],byte[])" target="org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2049" source="org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],java.io.InputStream)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2050" source="org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2051" source="org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2052" source="org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.HmacUtils.hmacSha384(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2053" source="org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],byte[])" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2054" source="org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],byte[])" target="org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2055" source="org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],java.io.InputStream)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2056" source="org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],java.io.InputStream)" target="org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2057" source="org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(java.lang.String,java.lang.String)" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2058" source="org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.HmacUtils.hmacSha512(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2059" source="org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[])" target="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2060" source="org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[])" target="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2061" source="org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[])" target="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2062" source="org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byte[])" target="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2063" source="org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[])" target="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2064" source="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])" target="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(java.lang.String,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2065" source="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])" target="org.apache.commons.codec.digest.HmacAlgorithms.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2066" source="org.apache.commons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac,java.lang.String)" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2067" source="org.apache.commons.codec.digest.HmacUtilsTest.testConstructor()" target="org.apache.commons.codec.digest.HmacUtils()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2068" source="org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey()" target="org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2069" source="org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac()" target="org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2070" source="org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac()" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2071" source="org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac()" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2072" source="org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac()" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2073" source="org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac()" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2074" source="org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex()" target="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2075" source="org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex()" target="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2076" source="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2077" source="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2078" source="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray()" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2079" source="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray()" target="org.apache.commons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2080" source="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray()" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2081" source="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream()" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2082" source="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream()" target="org.apache.commons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2083" source="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream()" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2084" source="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString()" target="org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2085" source="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString()" target="org.apache.commons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2086" source="org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString()" target="org.apache.commons.codec.binary.Hex.encodeHexString(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2087" source="org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac()" target="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2088" source="org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac()" target="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(java.lang.String,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2089" source="org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac()" target="org.apache.commons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2090" source="org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullAlgo()" target="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(java.lang.String,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2091" source="org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey()" target="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2092" source="org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException()" target="org.apache.commons.codec.digest.HmacUtils.getInitializedMac(java.lang.String,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2093" source="org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException()" target="org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2094" source="org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2095" source="org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2096" source="org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacMd5(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2097" source="org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2098" source="org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2099" source="org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2100" source="org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail()" target="org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2101" source="org.apache.commons.codec.digest.HmacUtilsTest.testNullKey()" target="org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2102" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2103" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2104" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha1(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2105" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2106" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2107" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2108" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2109" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2110" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2111" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha256(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2112" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2113" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2114" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2115" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2116" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2117" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2118" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha384(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2119" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2120" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2121" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2122" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2123" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2124" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2125" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha512(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2126" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2127" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2128" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2129" source="org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail()" target="org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2130" source="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[])" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2131" source="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[])" target="org.apache.commons.codec.digest.B64.getRandomSalt(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2132" source="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2133" source="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String)" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2134" source="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2135" source="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[])" target="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2136" source="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[])" target="org.apache.commons.codec.digest.B64.getRandomSalt(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2137" source="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2138" source="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.B64.getRandomSalt(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2139" source="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.getMd5Digest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2140" source="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.B64.b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2141" source="org.apache.commons.codec.digest.Md5CryptTest.testCtor()" target="org.apache.commons.codec.digest.Md5Crypt()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2142" source="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes()" target="org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2143" source="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes()" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2144" source="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall()" target="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2145" source="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall()" target="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2146" source="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput()" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2147" source="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData()" target="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2148" source="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings()" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2149" source="org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt()" target="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2150" source="org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes()" target="org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2151" source="org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes()" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2152" source="org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall()" target="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2153" source="org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall()" target="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2154" source="org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData()" target="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2155" source="org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings()" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2156" source="org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt()" target="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2157" source="org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize()" target="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2158" source="org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds()" target="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2159" source="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[])" target="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2160" source="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.B64.getRandomSalt(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2161" source="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2162" source="org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)" target="org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2163" source="org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)" target="org.apache.commons.codec.digest.B64.b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2164" source="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[])" target="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2165" source="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.B64.getRandomSalt(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2166" source="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2167" source="org.apache.commons.codec.digest.Sha2CryptTest.testCtor()" target="org.apache.commons.codec.digest.Sha2Crypt()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2168" source="org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize()" target="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2169" source="org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds()" target="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2170" source="org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt()" target="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2171" source="org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes()" target="org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2172" source="org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes()" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2173" source="org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall()" target="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2174" source="org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall()" target="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2175" source="org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData()" target="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2176" source="org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings()" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2177" source="org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt()" target="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2178" source="org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(byte[],int)" target="org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(byte)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2179" source="org.apache.commons.codec.digest.UnixCrypt.body(int[],int,int)" target="org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int,int,int,int,int,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2180" source="org.apache.commons.codec.digest.UnixCrypt.body(int[],int,int)" target="org.apache.commons.codec.digest.UnixCrypt.permOp(int,int,int,int,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2181" source="org.apache.commons.codec.digest.UnixCrypt.desSetKey(byte[])" target="org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2182" source="org.apache.commons.codec.digest.UnixCrypt.desSetKey(byte[])" target="org.apache.commons.codec.digest.UnixCrypt.permOp(int,int,int,int,int[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2183" source="org.apache.commons.codec.digest.UnixCrypt.desSetKey(byte[])" target="org.apache.commons.codec.digest.UnixCrypt.hPermOp(int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2184" source="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[])" target="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2185" source="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.UnixCrypt.desSetKey(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2186" source="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.UnixCrypt.body(int[],int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2187" source="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],java.lang.String)" target="org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(int,byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2188" source="org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String)" target="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2189" source="org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String,java.lang.String)" target="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2190" source="org.apache.commons.codec.digest.UnixCryptTest.testCtor()" target="org.apache.commons.codec.digest.UnixCrypt()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2191" source="org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt()" target="org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2192" source="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes()" target="org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2193" source="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes()" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2194" source="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall()" target="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2195" source="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall()" target="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2196" source="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData()" target="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2197" source="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings()" target="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2198" source="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt()" target="org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2199" source="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt()" target="org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2200" source="org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt()" target="org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2201" source="org.apache.commons.codec.digest.HmacAlgorithms#HMAC_MD5" target="org.apache.commons.codec.digest.HmacAlgorithms(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2202" source="org.apache.commons.codec.digest.HmacAlgorithms#HMAC_SHA_1" target="org.apache.commons.codec.digest.HmacAlgorithms(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2203" source="org.apache.commons.codec.digest.HmacAlgorithms#HMAC_SHA_256" target="org.apache.commons.codec.digest.HmacAlgorithms(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2204" source="org.apache.commons.codec.digest.HmacAlgorithms#HMAC_SHA_384" target="org.apache.commons.codec.digest.HmacAlgorithms(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2205" source="org.apache.commons.codec.digest.HmacAlgorithms#HMAC_SHA_512" target="org.apache.commons.codec.digest.HmacAlgorithms(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2206" source="org.apache.commons.codec.BinaryEncoderAbstractTest.testEncodeEmpty()" target="org.apache.commons.codec.BinaryEncoderAbstractTest.makeEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2207" source="org.apache.commons.codec.BinaryEncoderAbstractTest.testEncodeEmpty()" target="org.apache.commons.codec.BinaryEncoder.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2208" source="org.apache.commons.codec.BinaryEncoderAbstractTest.testEncodeNull()" target="org.apache.commons.codec.BinaryEncoderAbstractTest.makeEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2209" source="org.apache.commons.codec.BinaryEncoderAbstractTest.testEncodeNull()" target="org.apache.commons.codec.BinaryEncoder.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2210" source="org.apache.commons.codec.CharEncodingTest.testConstructor()" target="org.apache.commons.codec.CharEncoding()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2211" source="org.apache.commons.codec.CharsetsTest.testToCharset()" target="org.apache.commons.codec.Charsets.toCharset(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2212" source="org.apache.commons.codec.CharsetsTest.testToCharset()" target="org.apache.commons.codec.Charsets.toCharset(java.nio.charset.Charset)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2213" source="org.apache.commons.codec.DecoderExceptionTest.testConstructor0()" target="org.apache.commons.codec.DecoderException()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2214" source="org.apache.commons.codec.DecoderExceptionTest.testConstructorString()" target="org.apache.commons.codec.DecoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2215" source="org.apache.commons.codec.DecoderExceptionTest.testConstructorStringThrowable()" target="org.apache.commons.codec.DecoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2216" source="org.apache.commons.codec.DecoderExceptionTest.testConstructorThrowable()" target="org.apache.commons.codec.DecoderException(java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2217" source="org.apache.commons.codec.EncoderExceptionTest.testConstructor0()" target="org.apache.commons.codec.EncoderException()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2218" source="org.apache.commons.codec.EncoderExceptionTest.testConstructorString()" target="org.apache.commons.codec.EncoderException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2219" source="org.apache.commons.codec.EncoderExceptionTest.testConstructorStringThrowable()" target="org.apache.commons.codec.EncoderException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2220" source="org.apache.commons.codec.EncoderExceptionTest.testConstructorThrowable()" target="org.apache.commons.codec.EncoderException(java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2221" source="org.apache.commons.codec.StringEncoderAbstractTest#stringEncoder" target="org.apache.commons.codec.StringEncoderAbstractTest.createStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2222" source="org.apache.commons.codec.StringEncoderAbstractTest.checkEncoding(java.lang.String,java.lang.String)" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2223" source="org.apache.commons.codec.StringEncoderAbstractTest.checkEncoding(java.lang.String,java.lang.String)" target="org.apache.commons.codec.StringEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2224" source="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String,java.lang.String[])" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncoding(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2225" source="org.apache.commons.codec.StringEncoderAbstractTest.checkEncodings(java.lang.String[][])" target="org.apache.commons.codec.StringEncoderAbstractTest.checkEncoding(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2226" source="org.apache.commons.codec.StringEncoderAbstractTest.testEncodeEmpty()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2227" source="org.apache.commons.codec.StringEncoderAbstractTest.testEncodeEmpty()" target="org.apache.commons.codec.Encoder.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2228" source="org.apache.commons.codec.StringEncoderAbstractTest.testEncodeNull()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2229" source="org.apache.commons.codec.StringEncoderAbstractTest.testEncodeNull()" target="org.apache.commons.codec.StringEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2230" source="org.apache.commons.codec.StringEncoderAbstractTest.testEncodeWithInvalidObject()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2231" source="org.apache.commons.codec.StringEncoderAbstractTest.testEncodeWithInvalidObject()" target="org.apache.commons.codec.Encoder.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2232" source="org.apache.commons.codec.StringEncoderAbstractTest.testLocaleIndependence()" target="org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2233" source="org.apache.commons.codec.StringEncoderAbstractTest.testLocaleIndependence()" target="org.apache.commons.codec.StringEncoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2234" source="org.apache.commons.codec.StringEncoderComparator.compare(java.lang.Object,java.lang.Object)" target="org.apache.commons.codec.Encoder.encode(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2235" source="org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone()" target="org.apache.commons.codec.StringEncoderComparator(org.apache.commons.codec.StringEncoder)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2236" source="org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone()" target="org.apache.commons.codec.language.DoubleMetaphone()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2237" source="org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput()" target="org.apache.commons.codec.StringEncoderComparator(org.apache.commons.codec.StringEncoder)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2238" source="org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput()" target="org.apache.commons.codec.language.DoubleMetaphone()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2239" source="org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput()" target="org.apache.commons.codec.StringEncoderComparator.compare(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2240" source="org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex()" target="org.apache.commons.codec.StringEncoderComparator(org.apache.commons.codec.StringEncoder)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2241" source="org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex()" target="org.apache.commons.codec.language.Soundex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2242" source="org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex()" target="org.apache.commons.codec.StringEncoderComparator.compare(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
  </graph>
</graphml>
