<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <key id="type" for="node" attr.name="type" attr.type="string" />
  <key id="type" for="edge" attr.name="type" attr.type="string" />
  <key id="USES_REFLEXION" for="node" attr.name="USES_REFLEXION" attr.type="boolean">
    <default>false</default>
  </key>
  <graph id="G" edgedefault="directed" buildtime="651">
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$1(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$1.getValue(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.getOwnerId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$1.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.setOwnerId(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys#OWNER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$2(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$2.getValue(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.getViewerId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$2.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.setViewerId(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys#VIEWER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$3(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$3.getValue(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.getAppId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$3.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.setAppId(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys#APP_ID">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$4(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$4.getValue(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.getDomain()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$4.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.setDomain(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys#DOMAIN">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$5(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$5.getValue(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.getContainer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$5.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.setContainer(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys#CONTAINER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$6(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$6.getValue(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.getAppUrl()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$6.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.setAppUrl(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys#APP_URL">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$7(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$7.getValue(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.getModuleId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$7.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.setModuleId(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys#MODULE_ID">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$8(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$8.getValue(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.getExpiresAt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$8.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.setExpiresAt(java.lang.Long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys#EXPIRES">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$9(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$9.getValue(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.getTrustedJson()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys$9.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.setTrustedJson(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys#TRUSTED_JSON">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken#TIME_SOURCE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.TimeSource()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.isExpired()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.enforceNotExpired()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.toMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.getMapKeys()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys.getValue(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys.getKey()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.getExpiresAt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.getTimeSource()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.TimeSource.currentTimeMillis()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobExpiredException(long,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.loadFromMap(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken$Keys.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.setExpires()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.setExpires(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.getMaxTokenTTL()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AnonymousAuthenticationHandler.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AnonymousSecurityToken()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AnonymousSecurityToken(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AnonymousSecurityToken(java.lang.String,java.lang.Long,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AnonymousSecurityToken.getAppId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.getAppUrl()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfo.getAuthType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfoUtil.getAuthTypeFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfo.getSecurityToken()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfoUtil.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfoUtil$Attribute#SECURITY_TOKEN">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfoUtil$Attribute()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfoUtil$Attribute#AUTH_TYPE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfoUtil.getRequestAttribute(javax.servlet.http.HttpServletRequest,org.apache.shindig.auth.AuthInfoUtil$Attribute)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfoUtil$Attribute.getId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfoUtil.setRequestAttribute(javax.servlet.http.HttpServletRequest,org.apache.shindig.auth.AuthInfoUtil$Attribute,T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfoUtil.setAuthTypeForRequest(javax.servlet.http.HttpServletRequest,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfoUtil.setSecurityTokenForRequest(javax.servlet.http.HttpServletRequest,org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfoUtilTest.testAuthType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthInfoUtilTest.testToken()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilter$StashedBodyRequestwrapper.getInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilter$StashedBodyRequestwrapper$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.InjectedFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilter.callChain(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilter$StashedBodyRequestwrapper(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationHandler.getWWWAuthenticateHeader(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilter.getRealm(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationHandler.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationHandler.getName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilter.setAuthHeader(java.lang.String,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException.getAdditionalHeaders()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException.getRedirect()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilter.onRedirect(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilter.onError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilterTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.EasyMockTestCase()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilterTest.setup()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.EasyMockTestCase.mock(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder(javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilterTest$NullSecurityTokenAuthenticationHandler()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilterTest.testDoFilter_BadArgs()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilterTest.testNullSecurityToken()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationServletFilter.setAuthenticationHandlers(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder.getHeader(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BasicSecurityToken()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BasicSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.setActiveUrl(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BasicSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig.addConfigObserver(org.apache.shindig.config.ContainerConfig$ConfigObserver,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BasicSecurityTokenCodec.getTokenTimeToLive(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BasicSecurityTokenCodec.getTokenTimeToLive()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.Utf8UrlCoder.encode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BasicSecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityTokenException(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.Utf8UrlCoder.decode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityTokenException(java.lang.Exception)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BasicSecurityTokenCodec.containersChanged(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig.getInt(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BasicSecurityTokenCodecTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BasicSecurityTokenCodecTest.testGetTokenTimeToLive()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityToken.getAppId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.getActiveUrl()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.loadContainers(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Map,java.util.Map,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig.getContainers()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.getTokenTimeToLive(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.getTokenTimeToLive()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.getAuthenticationMode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.getContainer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypter.unwrap(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.loadCrypter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter(java.lang.String,org.apache.shindig.common.util.HMACType)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.containersChanged(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.makeContainer(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.getContainerKey(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.getBlobCrypter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.FakeTimeSource()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testAnonymous()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.isAnonymous()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig$Transaction.removeContainer(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testExpired()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.setTimeSource(org.apache.shindig.common.util.TimeSource)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.FakeTimeSource.incrementSeconds(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testGetTokenTimeToLive()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testMalformed()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testUnknownContainer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testWrongContainer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenTest#timeSource">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter(byte[],org.apache.shindig.common.util.HMACType)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.Crypto.getRandomBytes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.getDomain()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.getModuleId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.getOwnerId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.getViewerId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.getTrustedJson()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityToken.getUpdatedToken()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.getActiveUrl()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.DefaultSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.DefaultSecurityTokenCodec.getTokenTimeToLive()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityTokenCodec.getTokenTimeToLive()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.DefaultSecurityTokenCodec.getTokenTimeToLive(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityTokenCodec.getTokenTimeToLive(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.DefaultSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.DefaultSecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.DefaultSecurityTokenCodecTest$FakeContainerConfig(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testBasicDecoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testInvalidDecoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testNullDecoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testRealDecoder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.DefaultSecurityTokenCodec.getCodec()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.isAnonymous()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.isExpired()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.isExpired()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.getExpiresAt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.getActiveUrl()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.getAppId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.getAppUrl()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.getAuthenticationMode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.getContainer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.getDomain()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.getOwnerId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.getTrustedJson()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.getUpdatedToken()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.SecurityToken.getUpdatedToken()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.getViewerId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.ForwardingSecurityToken.getModuleId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.OAuthUtil$SignatureType#URL_ONLY">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.OAuthUtil$SignatureType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.OAuthUtil$SignatureType#URL_AND_FORM_PARAMS">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.OAuthUtil$SignatureType#URL_AND_BODY_HASH">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getMappedParameters(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getActiveUrl(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.setup()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.UrlParameterAuthenticationHandler(org.apache.shindig.auth.SecurityTokenCodec,java.lang.Boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testGetSecurityTokenFromRequest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testInvalidRequests()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setHeader(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testOAuth1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testOAuth2Header()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testOAuth2Param()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testSecurityToken()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationMode#UNAUTHENTICATED">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationMode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationMode#SECURITY_TOKEN_URL_PARAMETER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationMode#OAUTH">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationMode#OAUTH_CONSUMER_REQUEST">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationMode#COOKIE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException(java.lang.String,java.lang.Throwable,java.util.Map,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.jasper.JasperExpressionsTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.jasper.JasperExpressionsTest.booleanCoercionOfNumbersFails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.jasper.JasperExpressionsTest.booleanCoercionOfStringsFails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.jasper.JasperExpressionsTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Expressions(org.apache.shindig.expressions.Functions,org.apache.shindig.common.cache.CacheProvider,org.apache.shindig.expressions.ELTypeConverter,org.apache.shindig.expressions.ExpressionProvider)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.jasper.JasperTypeConverter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.jasper.JasperProvider()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ShindigTypeConverter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.juel.JuelExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.juel.JuelExpressionsTest.booleanCoercionOfNumbersFails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.juel.JuelExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.juel.JuelExpressionsTest.booleanCoercionOfStringsFails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.juel.JuelExpressionsTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Expressions.forTesting(org.apache.shindig.expressions.Functions)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Expressions.newELContext(javax.el.ELResolver[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.RootELResolver(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.juel.JuelProvider$1.get(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.Cache.getElement(K)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.juel.JuelProvider$1.put(java.lang.String,de.odysseus.el.tree.Tree)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.Cache.addElement(K,V)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.juel.JuelProvider.createTreeCache(org.apache.shindig.common.cache.CacheProvider)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.NullCache()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.CacheProvider.createCache(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.juel.JuelProvider$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.juel.JuelProvider.newExpressionFactory(org.apache.shindig.common.cache.CacheProvider,org.apache.shindig.expressions.ELTypeConverter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.juel.JuelTypeConverter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.juel.JuelTypeConverter.convert(java.lang.Object,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ShindigTypeConverter.convert(java.lang.Object,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Expressions$Context.getVariableMapper()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Expressions$Variables()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Expressions$ValueExpressionWrapper.getValue(javax.el.ELContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ELTypeConverter.convert(java.lang.Object,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Expressions.newExpressionFactory(org.apache.shindig.expressions.ExpressionProvider,org.apache.shindig.common.cache.CacheProvider)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Expressions$Context(javax.el.ELResolver)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Expressions.createDefaultELResolver()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.JsonELResolver()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionProvider.newExpressionFactory(org.apache.shindig.common.cache.CacheProvider,org.apache.shindig.expressions.ELTypeConverter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Expressions.constant(java.lang.Object,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ELTypeConverter.isPostConvertible(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Expressions$ValueExpressionWrapper(javax.el.ValueExpression,org.apache.shindig.expressions.ELTypeConverter,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.juel.JuelProvider()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.arraySupport()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.booleanCoercionOfBooleans()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.booleanCoercionOfNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.booleanCoercionOfNumbers()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.booleanCoercionOfStrings()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfCollection()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfJSONArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfJSONObjectWithListProperty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfJSONObjectWithoutListProperty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfScalar()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.jsonArrayCoercion()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.jsonArrayCoercionOfStatic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.jsonArraySupport()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.jsonObjectSupport()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.listSupport()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.mapSupport()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.missingJsonSubproperty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.missingMapSubproperty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ExpressionsTest.missingTopLevelVariable()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Functions$DefaultFunctions()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.Functions(java.lang.Class[])">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.expressions.Functions.addMethod(java.lang.reflect.Method)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.expressions.FunctionsTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.FunctionsTest.testDefaultBinding()">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.expressions.Functions.resolveFunction(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.FunctionsTest.testExpose()">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.expressions.FunctionsTest.testExpressionEvaluation()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.FunctionsTest.testNonStaticNotExposed()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.JsonELResolver.isReadOnly(javax.el.ELContext,java.lang.Object,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.JsonELResolver.isJson(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.JsonELResolver.getType(javax.el.ELContext,java.lang.Object,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.JsonELResolver.getValue(javax.el.ELContext,java.lang.Object,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.JsonELResolver.toInt(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.JsonELResolver.setValue(javax.el.ELContext,java.lang.Object,java.lang.Object,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctions.decodeBase64(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.CharsetUtil.newUtf8String(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.CharsetUtil.getUtf8Bytes(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctions.formDecode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctions.formEncode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctionsTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctionsTest.testDecodeBase64()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctionsTest.testDecodeBase64Null()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctionsTest.testHtmlDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctionsTest.testHtmlEncode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctionsTest.testParseJsonArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctionsTest.testParseJsonNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctionsTest.testParseJsonObject()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctionsTest.testUrlDecode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctionsTest.testUrlDecodeNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctionsTest.testUrlEncode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.OpensocialFunctionsTest.testUrlEncodeNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.RootELResolver()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ShindigTypeConverter.coerceToBoolean(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ShindigTypeConverter.coerceToJsonArray(java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.expressions.ShindigTypeConverter.coerceToIterable(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ShindigTypeConverter$1.iterator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ShindigTypeConverter$1$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.expressions.ShindigTypeConverter$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter#timeSource">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter.setHmacTypeFromPreferredHMACAlgorithm()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter.init(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter(java.io.File,org.apache.shindig.common.util.HMACType)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter.init(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter.deriveKey(byte,byte[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.GenericDigestUtils.digest(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter.serialize(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.Crypto.aes128cbcEncrypt(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.Crypto.hmacSha(byte[],byte[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HMACType.getName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterException(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BasicBlobCrypter.deserialize(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HMACType.getLength()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.Crypto.hmacShaVerify(byte[],byte[],byte[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.Crypto.aes128cbcDecrypt(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterTest.assertThrowsBlobCrypterException(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterTest.checkString(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterTest.testBadKey()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterTest.testDecryptGarbage()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterTest.testEncryptAndDecrypt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.Crypto.getRandomString(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterTest.testFixedKey()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterTest.testManyEntries()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterTest.testShortKeyFails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterTest.testTamperData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterTest.testTamperIV()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterTest.testTamperMac()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobExpiredException(java.util.Date,java.util.Date)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.BlobCrypterException(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.Crypto#HMAC_TYPE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.Crypto#HMAC_SHA_LEN">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.Crypto.aes128cbcDecryptWithIv(byte[],byte[],byte[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.Crypto.aes128cbcEncryptWithIV(byte[],byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.Crypto.hmacSha(byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.Crypto.getRandomDigits(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.Crypto.hmacShaVerify(byte[],byte[],byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.CryptoTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.CryptoTest.testAes128Cbc()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.CryptoTest.testHmacSha1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.CryptoTest.testHmacSha1Verify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.CryptoTest.testHmacSha1VerifyTampered()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.CryptoTest.testHmacSha256()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.CryptoTest.testHmacSha256Verify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.CryptoTest.testHmacSha384()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.CryptoTest.testHmacSha384Verify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.CryptoTest.testHmacSha512()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.CryptoTest.testHmacSha512Verify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.crypto.CryptoTest.testRandomDigits()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.ehcache.EhCacheCacheProvider(java.lang.String,java.lang.String,boolean,boolean,org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.ehcache.EhCacheCacheProvider.getConfiguration(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.ehcache.EhCacheCacheProvider.create(boolean,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler.register(org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupCapable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.ehcache.EhCacheCacheProvider.createCache(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.ehcache.EhConfiguredCache(java.lang.String,net.sf.ehcache.CacheManager)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.ResourceLoader.open(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.ehcache.EhCacheCacheProviderTest.getNamedCache()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.Cache.removeElement(K)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.Cache.getCapacity()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.Cache.getSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.ehcache.EhCacheCacheProviderTest.setup()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.ehcache.EhCacheCacheProviderTest.testCacheManagerDuplication()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.ehcache.EhConfiguredCache.removeElement(K)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.ehcache.EhConfiguredCache.getElement(K)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheProvider(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheProvider(com.google.inject.Injector,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheProvider.createCache(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheProvider.getCapacity(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCache(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheProviderTest.getCache(org.apache.shindig.common.cache.CacheProvider,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheProviderTest.createProvider(java.lang.String,java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheProviderTest$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheProviderTest.configuredCapacity()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheProviderTest.configuredMultipleCalls()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheProviderTest.defaultCapacityForNamedCache()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheProviderTest.malformedConfiguredCapacity()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheProviderTest.missingConfiguredCapacity()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheTest#cache">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheTest.exceededCapacityRemoved()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCache.addElement(K,V)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCache.getSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCache.getCapacity()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCache.getElement(K)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.LruCacheTest.normalCapacityOk()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.SoftExpiringCache(org.apache.shindig.common.cache.Cache)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.SoftExpiringCache.getElement(K)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.SoftExpiringCache$CachedObject(V,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.SoftExpiringCache.addElement(K,V,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.SoftExpiringCacheTest.makeSoftExpiringCache()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.SoftExpiringCache.setTimeSource(org.apache.shindig.common.util.TimeSource)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.SoftExpiringCacheTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.FakeTimeSource(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.SoftExpiringCacheTest.testGeneralCacheExpiration()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.FakeTimeSource.setCurrentTimeMillis(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.cache.SoftExpiringCacheTest.testMissingValue()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.DefaultUriParser.parse(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.fromJavaUri(java.net.URI)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri#parser">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.DefaultUriParser()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri(org.apache.shindig.common.uri.UriBuilder)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.getScheme()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.getAuthority()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.getPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.getQuery()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.getFragment()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.getQueryParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.getFragmentParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.toJavaUri()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri$UriException(java.lang.Exception)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri$UriException(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.toUri()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriParser.parse(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.isAbsolute()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.normalizePath(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.validate(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder$ParamString(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder$ParamString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder$ParamString.setString(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder$ParamString.getString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.joinParameters(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder$ParamString.addAll(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder$ParamString.add(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.splitParameters(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.getScheme()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.getAuthority()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.getPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.getQuery()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.getFragment()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.equals(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.hashCode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.hashCode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.getFragmentParameter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder$ParamString.get(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.getQueryParameter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.getFragmentParameters(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder$ParamString.getParams(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.getQueryParameters(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder$ParamString.getParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.addFragmentParameter(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.addFragmentParameters(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.addQueryParameter(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.addQueryParameters(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.parse(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.putFragmentParameter(java.lang.String,java.lang.Iterable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder$ParamString.put(java.lang.String,java.lang.Iterable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.putFragmentParameter(java.lang.String,java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder$ParamString.put(java.lang.String,java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.putQueryParameter(java.lang.String,java.lang.Iterable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.putQueryParameter(java.lang.String,java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.removeFragmentParameter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder$ParamString.remove(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilder.removeQueryParameter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.addBatchFragmentParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.addBatchParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalFragmentParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.addSingleFragmentParameter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.addSingleQueryParameter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.addTwoFragmentParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.addTwoQueryParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.allPartsUsed()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestHttpStandardPortAndModify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestHttpsStandardPort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestNonStandardPort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestNonePort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.constructFromUriAndBack()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.constructFromUriAndModify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.equalsAndHashCodeOk()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.fragmentParamsAreEscaped()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.fragmentStringIsUnescaped()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.hostRelativePaths()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.iterableFragmentParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.iterableQueryParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.justAuthorityAndPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.justFragment()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.justPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.justQuery()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.justSchemeAndAuthority()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.noAuthorityUsed()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.noFragmentUsed()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.noPathNoHostNoAuthority()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.noPathUsed()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.noQueryUsed()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.noSchemeUsed()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.parse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.queryParamsAreEscaped()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.queryStringIsUnescaped()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.relativePaths()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.removeFragmentParameter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriBuilderTest.removeQueryParameter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.absoluteUrlIsAbsolute()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.equalsAndHashCodeOk()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.fromJavaUri()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.parseFull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.getQueryParameters(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.getQueryParameter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.parseInvalidHost()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.parseInvalidPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.parseInvalidScheme()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.parseNoAuthority()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.parseNoFragment()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.parseNoPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.parseNoQuery()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.Uri.getQueryParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.parseNoScheme()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.parseWithSpecialCharacters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.relativeUrlIsNotAbsolute()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.resolveAbsolute()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.resolveAuthority()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.resolveFragment()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.resolvePathAbsolute()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.resolvePathIncludesSubdirs()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.resolvePathRelative()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.resolvePathRelativeToNullPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.resolvePathSubdirsExtendsBeyondRoot()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.resolveQuery()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.toJavaUri()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.uri.UriTest.toJavaUriWithSpecialChars()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.BasicAuthority.getAuthority()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.BasicAuthority.getServerHostname()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.BasicAuthority.getServerPort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.BasicAuthority.getOrigin()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.BasicAuthority.getScheme()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.ServletRequestContext.getScheme()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.ServletRequestContext.getHost()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.ServletRequestContext.getPort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.BasicAuthorityTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.BasicAuthorityTest.testBasicAuthorityWorks()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.BasicAuthority(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.BasicAuthorityTest.testDefaultHostAndPort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.BasicAuthorityTest.testJettyHostAndPort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler.cleanup()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupCapable.cleanup()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.GuiceServletContextListener.contextDestroyed(javax.servlet.ServletContextEvent)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.GuiceServletContextListener.contextInitialized(javax.servlet.ServletContextEvent)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.common.servlet.GuiceServletContextListener.setSystemProperties(javax.servlet.ServletContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HostFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.ServletRequestContext.setRequestInfo(javax.servlet.ServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder.getResponseAsString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder.getWriter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder.getOutputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder.addDateHeader(java.lang.String,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtil.formatRfc1123Date(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder.sendError(int,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder.sendRedirect(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder.setStatus(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder.setHeader(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder.setDateHeader(java.lang.String,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder.addHeader(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletResponseRecorder.setStatus(int,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletUserAgentProvider.get()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent$Parser.parse(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest$PassThroughUAParser.parse(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent(org.apache.shindig.common.servlet.UserAgent$Browser,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest#parser">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest$PassThroughUAParser()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testNoRequestGetsNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletUserAgentProvider(org.apache.shindig.common.servlet.UserAgent$Parser,com.google.inject.Provider)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest$HttpServletRequestProvider(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testNoUserAgentGetsNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.EasyMockTestCase.replay()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.EasyMockTestCase.verify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testProviderWorks()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent.getBrowser()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent.getVersion()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtil.getCachingHeadersToSet(int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtil.getCachingHeadersToSet(int,java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.Pair.of(T1,T2)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtil.setNoCache(javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest#timeSource">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest#testStartTime">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.FakeTimeSource.currentTimeMillis()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest#recorder">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest.checkCacheControlHeaders(long,org.apache.shindig.common.servlet.HttpServletResponseRecorder,int,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtil.parseRfc1123Date(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest.testCORSmultiple()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtil.setCORSheader(javax.servlet.http.HttpServletResponse,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest.testCORSnull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest.testCORSstar()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeaders()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtil.getDefaultTtl()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersAllowProxy()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersFixedTtl()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersNoCache()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersNoProxy()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersWithTtlAndNoProxy()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtilTest.testSetNoCche()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent$Browser#MSIE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent$Browser()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent$Browser#FIREFOX">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent$Browser#SAFARI">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent$Browser#WEBKIT">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent$Browser#CHROME">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent$Browser#OPERA">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent$Browser#HTML5">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent$Browser#OTHER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgent.getVersionNumber()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgentTest.getUaEntry(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingAlphaSuffix()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingEmbeddedInTheMiddle()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingMultiPart()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingNoMatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingStandard()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingStandardDecimal()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.DomUtil.getElementsByTagNameCaseInsensitive(org.w3c.dom.Document,java.util.Set)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.DomUtil$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.DomUtilTest.getElementsByTagNameCaseInsensitive()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil.parse(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.DomUtilTest.getFirstNamedChildNode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.DomUtil.getFirstNamedChildNode(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.DomUtilTest.getLastNamedChildNode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.DomUtil.getLastNamedChildNode(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil#ERROR_HANDLER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil#REUSABLE_BUILDER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil$2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil.getBoolAttribute(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil.getBoolAttribute(org.w3c.dom.Node,java.lang.String,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil.getAttribute(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil.getIntAttribute(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil.getIntAttribute(org.w3c.dom.Node,java.lang.String,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil.getAttribute(org.w3c.dom.Node,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil.getHttpUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil.getHttpUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri,org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil.getUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil.getUriAttribute(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil.getBuilder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlException(java.lang.String,java.lang.Exception)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlException(java.lang.Exception)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtil.parseSilent(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtilTest#URI_VALUE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtilTest#HTTPS_URI_VALUE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtilTest#FTP_URI_VALUE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtilTest.getAttribute()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtilTest.getBoolAttribute()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtilTest.getIntAttribute()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtilTest.getUriAttribute()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtilTest.makeElement()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtilTest.parseBadXmlThrows()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.xml.XmlUtilTest.testHttpUriAttribute()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.Base32#ENCODER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.StringEncoding(char[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.Base32.decode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.Base32.decodeBase32(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.StringEncoding.decode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.Base32.encode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.Base32.encodeBase32(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.StringEncoding.encode(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.Base32.decode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.Base32.encode(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.CharsetUtilTest.testGetUtf8String()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.CharsetUtilTest.testStringOfLength(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.CharsetUtilTest.testLatin1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtil.formatIso8601Date(java.util.Date)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtil.formatIso8601Date(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtil.formatRfc1123Date(java.util.Date)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtilTest.format()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtilTest.formatInWrongLocale()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtilTest.formatRfc1123Date()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtilTest.formatIso8601()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtilTest.formatIso8601Date()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtilTest.parse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtilTest.parseAsctime()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtilTest.parseMalformedIso8691()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtil.parseIso8601DateTime(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtilTest.parseMalformedRfc1123()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtilTest.parseRfc1036()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DateUtilTest.parseWrongTimeZone()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.GenericDigestUtils#type">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DigestType.getName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.GenericDigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.GenericDigestUtils.digest(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.GenericDigestUtils.digest(java.security.MessageDigest,java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.GenericDigestUtils.digest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.GenericDigestUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.GenericDigestUtils.digestHex(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.GenericDigestUtils.digestHex(java.io.InputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.GenericDigestUtils.digestHex(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HashUtil.checksum(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HashUtil.getMessageDigest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HashUtil.bytesToHex(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HashUtil.rawChecksum(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HashUtilTest.testChecksum()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HashUtilTest.testChecksumNPE()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HashUtilTest.testRawChecksum()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HashUtilTest.testRawChecksumNPE()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtil.fromJson(org.json.JSONObject)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtil.collect(java.lang.Object,java.lang.String,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtil.buildHolder(org.json.JSONObject,java.lang.String[],int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtil.fromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtil.convertToJsonValue(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtil.parametersToJsonObject(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtil.isAllLiterals(org.json.JSONArray)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtilTest.assertJsonEquals(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtilTest.testArrayPathToJsonParsing()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtilTest.testJSONToParameterMapParsing()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtilTest.testJsonFromRequest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtilTest.testParameterMapToJsonParsing()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtilTest.testSimplePathToJsonParsing()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.JsonConversionUtilTest.testValueToJsonParsing()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.OpenSocialVersion#COMPARATOR">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.VersionComparator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.OpenSocialVersion.isEqualOrGreaterThan(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.OpenSocialVersion.isEqualOrGreaterThan(org.apache.shindig.common.util.OpenSocialVersion)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.OpenSocialVersion(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.OpenSocialVersion.isEquivalent(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.OpenSocialVersion.isEquivalent(org.apache.shindig.common.util.OpenSocialVersion)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.ResourceLoader.openResource(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.ResourceLoader.openResource(java.lang.ClassLoader,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.ResourceLoader.getContent(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.StringEncodingTest.testBase32()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.StringEncodingTest.testEncoding(org.apache.shindig.common.util.StringEncoding,byte[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.StringEncodingTest.testRoundTrip(org.apache.shindig.common.util.StringEncoding,byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.Utf8UrlCoderTest.decodeComplex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.Utf8UrlCoderTest.decodeSimple()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.Utf8UrlCoderTest.encodeComplex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.Utf8UrlCoderTest.encodeSimple()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DigestType#SHA">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DigestType(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DigestType#SHA256">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DigestType#SHA384">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.DigestType#SHA512">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HMACType#HMACSHA1">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HMACType(int,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HMACType#HMACSHA256">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HMACType#HMACSHA384">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.HMACType#HMACSHA512">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken$Codec.createToken(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken.setAppId(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken.setAppUrl(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken.setDomain(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken.setOwnerId(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken.setTrustedJson(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken.setViewerId(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken.setModuleId(long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken.setActiveUrl(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken.setContainer(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeGadgetToken.setExpiresAt(java.lang.Long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.constructor(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.getIntHeader(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.getHeader(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.getParameter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.getParameterValues(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.getRequestURL()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.getRequestURI()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.getInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.getSession()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.getSession(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.getDateHeader(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setCookie(javax.servlet.http.Cookie)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.addToCookieMap(javax.servlet.http.Cookie)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setCookieHeader()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setCookies(javax.servlet.http.Cookie[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setDateHeader(java.lang.String,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.splitAndTrim(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.addToHeaderMap(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setParameter(java.lang.String,java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setParameter(java.lang.String,boolean,java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setPostData(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setPostData(byte[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setQueryString(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.decodeQueryString(java.lang.String,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.addParameter(java.util.Map,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.decodeParameterPart(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.ImmediateExecutorService.shutdownNow()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.ImmediateExecutorService.shutdown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.EasyMockTestCase.mock(java.lang.Class,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.EasyMockTestCase.mock(java.lang.Class,java.lang.reflect.Method[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.EasyMockTestCase.mock(java.lang.Class,java.lang.reflect.Method[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonAssert.assertJsonArrayEquals(java.lang.String,org.json.JSONArray,org.json.JSONArray)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonAssert.assertJsonObjectEquals(java.lang.String,org.json.JSONObject,org.json.JSONObject)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonAssert.assertJsonArrayEquals(org.json.JSONArray,org.json.JSONArray)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonAssert.assertJsonObjectEquals(org.json.JSONObject,org.json.JSONObject)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonAssert.assertObjectEquals(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonAssert.assertObjectEquals(java.lang.String,java.lang.Object,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.serialize(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.serialize(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.appendArray(java.lang.Appendable,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.serialize(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.appendCollection(java.lang.Appendable,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.serialize(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.appendMap(java.lang.Appendable,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.serialize(org.json.JSONArray)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.appendJsonArray(java.lang.Appendable,org.json.JSONArray)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.serialize(org.json.JSONObject)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.appendJsonObject(java.lang.Appendable,org.json.JSONObject)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.appendString(java.lang.Appendable,java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.appendMultimap(java.lang.Appendable,com.google.common.collect.Multimap)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializer.appendPojo(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.common.JsonUtil.getGetters(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.runJsonOrgTest(java.util.Map,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.avg(long,long,long)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.runSerializerTest(java.util.Map,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.emptyString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.escapeBrackets()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.escapeSequences()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.main(java.lang.String[])">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.serializeArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.serializeJsonArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.serializeJsonObjectWithComplexArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest$JsonPojo()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.serializeJsonObjectWithNullPropertyValue()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.serializeMixedArray()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.serializeMixedObjects()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.serializePojo()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.serializePrimitives()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.serializeSimpleCollection()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.serializeSimpleJsonObject()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.serializeSimpleMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonSerializerTest.serializeSimpleMultimap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonUtil$1.load(java.lang.Class)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.common.JsonUtil.getPropertyName(java.lang.reflect.Method)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.common.JsonUtilTest$Duplicate()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonUtilTest$DuplicateBase()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonUtilTest.duplicateMethodPojo()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonUtil.getProperty(java.lang.Object,java.lang.String)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.common.JsonUtilTest.excludedPropertiesOfPojo()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonUtilTest.getPropertyOfJsonObject()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonUtilTest.getPropertyOfMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.JsonUtilTest.getPropertyOfPojo()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.OpenSocialVersionTest.createOpenSocialVersion()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.OpenSocialVersionTest.testEqualOrGreaterThan()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.OpenSocialVersionTest.testEquivalence()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.OpenSocialVersionTest.testVersionSorting()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.Pair(T1,T2)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.PairTest.testPair()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.PropertiesModule()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.PropertiesModule.readPropertyFile(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.PropertiesModule.getDefaultPropertiesPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.PropertiesModule(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.PropertiesModule.getContextRoot()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.PropertiesModule.configure()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.PropertiesModule.getProperties()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.PropertiesModule.getServerPort()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.PropertiesModule.getServerHostname()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.deepCopyObject(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.deepCopyConfig(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.mergeObjects(java.util.Map,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.mergeParents(java.lang.String,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfigException(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.getTemporaryConfig(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.addContainer(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.changeContainersInConfig(org.apache.shindig.config.BasicContainerConfig,java.util.Map,java.util.Set)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.commit()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.diffConfiguration(org.apache.shindig.config.BasicContainerConfig,java.util.Set,java.util.Set)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.setNewConfig(org.apache.shindig.config.BasicContainerConfig)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig.notifyObservers(java.util.Collection,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig.getList(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig.getProperty(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig.getMap(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig.getBool(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig.getInt(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig.newTransaction()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig$BasicTransaction()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig.addConfigObserver(org.apache.shindig.config.ContainerConfig$ConfigObserver,boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfig.getContainers()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig$ConfigObserver.containersChanged(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest#DEFAULT_CONTAINER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.makeContainer(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest#MODIFIED_DEFAULT_CONTAINER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest#EXTRA_CONTAINER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest#MODIFIED_EXTRA_CONTAINER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig$Transaction.clearContainers()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.testAddNewContainer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.testAddObserverNotifiesImmediately()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.testAliasesArePopulated()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.makeContainer(java.util.List,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.testClearContainerConfig()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.testContainersAreMergedRecursively()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig.getProperties(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.testGetContainers()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.testGetProperties()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.testInheritance()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.testNulledPropertiesRemainNulledAfterSeveralTransactions()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig.getProperty(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.testPropertyTypes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig.getBool(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig.getList(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfig.getMap(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.testReadSameContainer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.testRemoveContainer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest.testReplaceContainer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfigELResolver.getType(javax.el.ELContext,java.lang.Object,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfigELResolver.getValue(javax.el.ELContext,java.lang.Object,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfigELResolver$ContainerReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.DynamicConfigProperty(java.lang.String,org.apache.shindig.expressions.Expressions,javax.el.ELContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.evaluateAll(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.parseAll(java.lang.Object,javax.el.ELContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.getTemporaryConfig(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfig(org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfig.getExpressions()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.changeContainersInConfig(org.apache.shindig.config.BasicContainerConfig,java.util.Map,java.util.Set)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfig.createExpressionContext(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfig.getProperty(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfigELResolver(org.apache.shindig.config.ContainerConfig,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfig.newTransaction()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfigTest#DEFAULT_EXPR_CONTAINER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfigTest#MODIFIED_DEFAULT_EXPR_CONTAINER">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfigTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.BasicContainerConfigTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfigTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfigTest.testExpressionInheritance()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfigTest.testExpressionValues()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ExpressionContainerConfigTest.testGetProperties()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoader.getTransactionFromFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfig(java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfig(org.json.JSONObject,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoader.parseJsonContainer(org.json.JSONObject)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoader.jsonToConfig(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoader.jsonToMap(org.json.JSONObject)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoader.loadContainers(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoader.loadResources(java.lang.Iterable,java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoader.loadFiles(java.io.File[],java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfigException(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoader.loadFromString(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.ContainerConfigException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoader.parseJsonContainer(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoader.addToTransactionFromFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.config.ContainerConfig$Transaction)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoader.addHostAndPortToDefaultContainer(java.util.List,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoader.addContainersToTransaction(org.apache.shindig.config.ContainerConfig$Transaction,java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.util.ResourceLoader.getContent(java.io.File)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.createDefaultContainer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.aliasesArePopulated()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.badConfigThrows()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.expressionEvaluation()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.expressionEvaluationUsingParent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.invalidContainerReturnsNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.nullEntryEvaluation()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.parseBasicConfig()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.parseWithDefaultInheritance()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.pathQuery()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderClasspathFailureTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderClasspathTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderFileFailureTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderFileTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.shindigPortTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.testCommonEnvironmentAddedToAllContainers()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigLoaderTest.testNullEntriesOverrideEntriesInParent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigTest.createDefaultContainer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigTest.createContainer(org.json.JSONObject)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigTest.aliasesArePopulated()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigTest.badConfigThrows()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigTest.expressionEvaluation()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigTest.expressionEvaluationUsingParent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigTest.invalidContainerReturnsNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigTest.nullEntryEvaluation()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigTest.parseBasicConfig()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigTest.parseWithDefaultInheritance()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigTest.pathQuery()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigTest.shindigPortTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.config.JsonContainerConfigTest.testCommonEnvironmentAddedToAllContainers()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.EnumImpl(E)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.EnumImpl(E,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Enum$EnumKey.getDisplayValue()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Car()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Passenger(java.lang.String,org.apache.shindig.protocol.model.Model$Gender)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$ExpensiveCar()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Engine#DIESEL">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Engine(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Engine#GAS">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Engine#HYBRID">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Engine#TURBO">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Gender#male">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Gender()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Gender#female">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.FilterOperation#contains">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.FilterOperation()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.FilterOperation#equals">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.FilterOperation#startsWith">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.FilterOperation#present">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.SortOrder#ascending">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.SortOrder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.SortOrder#descending">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Enum$Field#VALUE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Enum$Field(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Enum$Field#DISPLAY_VALUE">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParser.convertToFormData(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.CommonsFormDataItem(org.apache.commons.fileupload.FileItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParser.parse(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.build()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.write(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFileItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.writeBoundary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFormField(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFormField(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParser()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.setupRequest(byte[],java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setContentType(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testIsMultipartContent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setMethod(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.MultipartFormParser.isMultipartContent(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testMultipleFileItemAndRequest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.getContentType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.MultipartFormParser.parse(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.FormDataItem.isFormField()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.FormDataItem.getFieldName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.FormDataItem.getName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItem()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItemAndRequest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleRequest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.DataCollectionConverter.unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataCollection(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.DataCollectionConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataCollection.getEntry()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.ExtendableBeanConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter(com.thoughtworks.xstream.mapper.Mapper,com.google.inject.Injector)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter(com.thoughtworks.xstream.mapper.Mapper,org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider(com.google.inject.Injector)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.getPropertyType(java.lang.Object,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.instantiateNewInstance(com.thoughtworks.xstream.converters.UnmarshallingContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.newInstance(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.propertyDefinedInClass(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.writeProperty(java.lang.Object,java.lang.String,java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter$1.visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter$1.writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.visitSerializableProperties(java.lang.Object,org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider$Visitor)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider(com.google.inject.Injector,java.util.Comparator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.getProperty(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.propertyWriteable(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.getSerializableProperties(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.canStreamProperty(java.beans.PropertyDescriptor)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider$Visitor.shouldVisit(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider$Visitor.visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.InterfaceClassMapper.getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.ImplicitCollectionFieldMapping.matches(java.lang.Class,java.lang.String)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.InterfaceClassMapper.serializedClass(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.WriterStack.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.ClassFieldMapping.matches(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.ClassFieldMapping.getElementName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasingMapper(com.thoughtworks.xstream.mapper.Mapper,org.apache.shindig.protocol.conversion.xstream.WriterStack,java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasMapping.getFieldName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasMapping.getAlias()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasingMapper.realMember(java.lang.Class,java.lang.String)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasMapping.getType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasingMapper.serializedMember(java.lang.Class,java.lang.String)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasMapping.getParent()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.RestfullCollectionConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollection.getItemsPerPage()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollection.getStartIndex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollection.getTotalResults()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollection.isFiltered()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollection.isSorted()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollection.isUpdatedSince()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollection.getList()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.StackDriver.createWriter(java.io.OutputStream)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper(com.thoughtworks.xstream.io.HierarchicalStreamWriter,org.apache.shindig.protocol.conversion.xstream.WriterStack,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.StackDriver.createWriter(java.io.Writer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.translateName(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.WriterStack.peekNamespace()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.NamespaceSet.getElementName(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.addNamespace(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.NamespaceSet.nameSpaceEntrySet()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.WriterStack.push(java.lang.String,org.apache.shindig.protocol.conversion.xstream.NamespaceSet)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.endNode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.WriterStack.pop()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.startNode(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.startNode(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.ThreadSafeWriterStack#stackHolder">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.ThreadSafeWriterStack$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.ThreadSafeWriterStack.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.ThreadSafeWriterStack.peek(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.ThreadSafeWriterStack.peekNamespace()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration$ConverterSet#MAP">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration$ConverterSet()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration$ConverterSet#COLLECTION">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration$ConverterSet#DEFAULT">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator$DelegateInvocationHandler(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator$DelegateInvocationHandler(java.lang.Object,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator$DelegateInvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator.getParameterizedReturnType(java.lang.reflect.Method)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator(java.util.Map,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class,java.util.Map)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator.normalizeFields(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator$NullClass()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator.convertEnum(java.lang.Enum)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator.validateTypes(java.lang.reflect.Type,java.lang.reflect.Type)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator.normalizeName(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator.nullable(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator.validate()">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator.validate(java.lang.Class,java.lang.Class)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean$RealStyle#R_A">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean$RealStyle()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean$RealStyle#R_B">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface$Style#A">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface$Style()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface$Style#B">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.createSimpleDelegator()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.tesValidate()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanList()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setBeanList(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getBeanList()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setS(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.getS()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getS()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setBeanMap(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getBeanMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testExtraFields()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$TokenData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$TokenData.getId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$TokenInter.getId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$TokenInter.getContainer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testExtraFieldsBadCase()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testPrivateAccess()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getPrivateData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testSimpleBean()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.setI(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getI()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.getI()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setStyle(org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean$RealStyle)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getStyle()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testStringList()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getList()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setList(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testStringMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setMap(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testUnimplementedFunction()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getUnknown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testValidateGoodBean()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegator.validateDelegator(java.lang.Object)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testValidateMissingField()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testValidateWrongtype()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testWrontType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getWrongType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilter$FilterInvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set,java.lang.String)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilter$FilterInvocationHandler(java.lang.Object,java.util.Set,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilter.getBeanFields(java.lang.Class,int)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilterTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilterTest.testInt()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setI(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilterTest.testList()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.getList()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilterTest.testListFields()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilterTest.testMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.getBeanMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilterTest.testNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilterTest.testProcessFields()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilter.processBeanFields(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilterTest.testSimple()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanFilterTest.testString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getRequired()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter$1.load(java.lang.Class)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.getPropertyName(java.lang.reflect.Method)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.Object,java.lang.reflect.Type)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertGeneric(java.lang.Object,java.lang.reflect.ParameterizedType)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToSet(org.json.JSONArray,java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToList(org.json.JSONArray,java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToMap(org.json.JSONObject,java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToOsEnum(org.json.JSONObject,java.lang.Class)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToClass(org.json.JSONObject,java.lang.Class)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToEnum(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToString(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Enum$Field.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterInjectedClassTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter(com.google.inject.Injector)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterInjectedClassTest$TestModule()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterInjectedClassTest.testJsonToObject()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterInjectedClassTest$TestObject.getX()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterInjectedClassTest$TestObject.getY()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$TestObject$TestEnum#foo">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$TestObject$TestEnum()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$TestObject$TestEnum#bar">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$TestObject$TestEnum#baz">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testEmptyExtendableBean()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testEmptyJsonMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$4()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testGetPropertyNameOfBridgeMethod()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToCar()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Car.getEngine()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Enum.getValue()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Car.getParkingTickets()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Car.getPassengers()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Passenger.getGender()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.model.Model$Passenger.getName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToMapWithConversion()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToNestedGeneric()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToObject()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToPrimitives()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanXStreamConverter(org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.ThreadSafeWriterStack()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.StackDriver(com.thoughtworks.xstream.io.HierarchicalStreamDriver,org.apache.shindig.protocol.conversion.xstream.WriterStack,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration.getNameSpaces()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration.getConverterConfig(org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration$ConverterSet,com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.io.HierarchicalStreamDriver,org.apache.shindig.protocol.conversion.xstream.WriterStack)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanXStreamConverter.convertToString(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanXStreamConverter.convertToXml(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.WriterStack.reset()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.xstream.InterfaceClassMapper.setBaseObject(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanXStreamConverter.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ApiServlet()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.InjectedServlet()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ApiServlet.getSecurityToken(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ApiServlet.getResponseItem(java.util.concurrent.Future)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ResponseItem(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ApiServlet.responseItemFromException(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ResponseItem(int,java.lang.String,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ProtocolException.getCode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ProtocolException.getResponse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ResponseItem(int,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ApiServlet.init(javax.servlet.ServletConfig)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.InjectedServlet.init(javax.servlet.ServletConfig)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ApiServlet$2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.HandlerRegistry.addHandlers(java.util.Set)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.SystemHandler(org.apache.shindig.protocol.HandlerRegistry)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ApiServlet.sendSecurityError(javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ApiServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanJsonConverter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.setParameter(java.lang.String,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem(org.json.JSONObject,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanJsonConverter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ProtocolException(int,java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getOptionalTypedParameter(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanConverter.convertToObject(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getTypedParameter(java.lang.String,java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getTypedRequest(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getStartIndex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getAttribute(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getAttributeMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getAppId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getFilterBy()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getFilterValue()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getSortBy()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getUpdatedSince()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getListParameter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getFields()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getFields(java.util.Set)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getFilterOperation()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getSortOrder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.setAttribute(java.lang.String,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest#FAKE_TOKEN">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest.testAttributes()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest.testCount()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest.testFields()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest.testGetAppId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.auth.AbstractSecurityToken.getAppId()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest.testGetInvalidJsonTypedParameter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest.testGetParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItem.getParameters()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest.testGetTypedParameter()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest.testGetTypedParameterEmpty()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest.testJSONConstructor()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest.testParseCommaSeparatedList()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest.testSortOrder()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.BaseRequestItemTest.testStartIndex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ContentTypes.extractMimePart(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ContentTypes$InvalidContentTypeException(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ContentTypes.checkContentTypes(java.util.Set,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ContentTypesTest.testAllowAtom()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ContentTypesTest.testAllowJson()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ContentTypesTest.testAllowJsonRpc()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ContentTypesTest.testAllowMultipart()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ContentTypesTest.testAllowXml()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ContentTypesTest.testExtractMimePartEmptyString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ContentTypesTest.testExtractMimePartNull()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ContentTypesTest.testForbidden()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ContentTypesTest.testStrictDisallowUnknown()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ContentTypesTest.textExtractMimePart()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataCollectionTest.testBasicMethods()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataCollection.setEntry(java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServlet()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServlet.getRestHandler(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.HandlerRegistry.getRestHandler(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServlet.getConverterForRequest(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServlet.getConverterForContentType(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServlet.getConverterForFormat(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServlet.executeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServlet.doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ApiServlet.setCharacterEncodings(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestHandler.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanConverter.getContentType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ResponseItem.getErrorCode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ResponseItem.getResponse()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.servlet.HttpUtil.isJSONP(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanConverter.convertToString(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ResponseItem.getErrorMessage()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest#FAKE_GADGET_TOKEN">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest.assertConverterForContentType(org.apache.shindig.protocol.conversion.BeanConverter,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest.assertConverterForFormat(org.apache.shindig.protocol.conversion.BeanConverter,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanJsonConverter.getContentType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry(com.google.inject.Injector,org.apache.shindig.protocol.conversion.BeanJsonConverter,org.apache.shindig.protocol.HandlerExecutionListener)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.HandlerExecutionListener$NoOpHandler()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ApiServlet.setHandlerRegistry(org.apache.shindig.protocol.HandlerRegistry)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ApiServlet.setContainerConfig(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ApiServlet.setJSONPAllowed(java.lang.Boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ApiServlet.setBeanConverters(org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest.setupRequest(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setPathInfo(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setCharacterEncoding(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.common.testing.FakeHttpServletRequest.setAttribute(java.lang.String,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest.testDisallowJSONP()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest.verifyHandlerWasFoundForPathInfo(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest.testFailedRequest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest.testGetConverterForContentType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest.testGetConverterForFormat()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest.testOverrideGetWithPost()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest.testOverridePostWithGet()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest.testUriRecognition()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DataServiceServletTest.verifyHandlerWasFoundForPathInfo(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper.executed(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.HandlerExecutionListener.executed(java.lang.String,java.lang.String,org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper.executing(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.HandlerExecutionListener.executing(java.lang.String,java.lang.String,org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.call(java.lang.Object,org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.RequestItem.getTypedRequest(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.getRestRequestItem(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanJsonConverter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.getRequestItem(java.lang.Object,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanJsonConverter,java.lang.reflect.Constructor)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.getRpcRequestItem(org.json.JSONObject,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanJsonConverter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.getRequestItem(java.lang.Object,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanJsonConverter,java.lang.reflect.Constructor)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationWrapper.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$PartType#CONST">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$PartType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$PartType#SINGULAR_PARAM">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$PartType#PLURAL_PARAM">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath(java.lang.String,org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$Part(java.lang.String,org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$PartType)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath.accept(java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationWrapper(java.util.Map,org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationHandler.execute(org.json.JSONObject,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationWrapper.execute(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry.getRestHandler(java.lang.String,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$ErrorRestHandler(org.apache.shindig.protocol.ProtocolException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry.getRpcHandler(org.json.JSONObject)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$ErrorRpcHandler(org.apache.shindig.protocol.ProtocolException)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationWrapper(org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationHandler,org.json.JSONObject)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry.addHandlers(java.util.Set)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry.createRpcHandler(com.google.inject.Provider,org.apache.shindig.protocol.Service,org.apache.shindig.protocol.Operation,java.lang.reflect.Method)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry.createRestHandler(com.google.inject.Provider,org.apache.shindig.protocol.Service,org.apache.shindig.protocol.Operation,java.lang.reflect.Method)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller(java.lang.reflect.Method,boolean)">
      <data key="type">METHOD</data>
      <data key="USES_REFLEXION">true</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler(org.apache.shindig.protocol.Operation,org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller,com.google.inject.Provider,org.apache.shindig.protocol.conversion.BeanJsonConverter,org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper(java.lang.String,java.lang.String,org.apache.shindig.protocol.HandlerExecutionListener)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationHandler(org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller,com.google.inject.Provider,org.apache.shindig.protocol.conversion.BeanJsonConverter,org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testAddNonService()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testFutureDispatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testFutureException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RpcHandler.execute(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testGetForAliasHandler()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testGetHandlerRPC()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testGetHandlerRest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testNoArgumentClass()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testNonFutureDispatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testNonFutureException()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testOverrideHandlerRPC()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testOverrideHandlerRPCName()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testOverrideHandlerRest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRestHandler_serviceDoesntExist()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRestPath()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRestPathOrdering()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRestWithInputClassThatIsntRequestItem()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRpcHandler_serviceDoesntExist()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRpcWithInputClassThatIsntRequestItem()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testSupportedRestServices()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry.getSupportedRestServices()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testSupportedRpcServices()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.DefaultHandlerRegistry.getSupportedRpcServices()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.HandlerPreconditions.requireEmpty(java.util.Collection,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.HandlerPreconditions.requireNotEmpty(java.util.Collection,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.HandlerPreconditions.requirePlural(java.util.Collection,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.HandlerPreconditions.requireSingular(java.util.Collection,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet.getErrorJson(org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet.addResult(java.util.Map,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet.getPostContent(javax.servlet.http.HttpServletRequest,java.util.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.FormDataItem.getAsString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet.getHandler(org.json.JSONObject,javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.HandlerRegistry.getRpcHandler(org.json.JSONObject)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet.dispatch(org.json.JSONObject,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.conversion.BeanConverter.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet.dispatchBatch(org.json.JSONArray,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet.sendBadRequest(java.lang.Throwable,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet.sendJsonParseError(org.json.JSONException,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet.isContentJsonBatch(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest#FAKE_GADGET_TOKEN">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest#handler">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.mockFormDataItem(java.lang.String,java.lang.String,byte[],boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.FormDataItem.getSize()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.multipart.FormDataItem.getInputStream()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest$1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.setUp()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServlet.setMultipartFormParser(org.apache.shindig.protocol.multipart.MultipartFormParser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.TestHandler.setMock(org.apache.shindig.protocol.TestHandler)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.setupRequest(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest$6()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testBasicBatch()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.getOutput()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testDisallowJSONP()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testFailedRequest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testGetExecution()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseErrorWithData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseErrorWithoutData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseWithKey()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseWithoutKey()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testInvalidService()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testMethodRecognition()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest$2()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest$2.get(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RequestItem.getFormMimePart(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest$4()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest$4.get(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest$5()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest$5.get(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataRequestFieldIsSubjectedToContentTypeCheck()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest$3()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest$3.get(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ProtocolException(int,java.lang.String,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.ProtocolException.checkErrorCode(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollection(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollection(java.util.List,int,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollection(java.util.List,int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollectionTest.testBasicMethods()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollection.setList(java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollection.setStartIndex(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollection.setTotalResults(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollectionTest.testConstructors()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RestfulCollectionTest.testMapMethods()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.SystemHandler.listMethods(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RequestItem.getFilterBy()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RequestItem.getFilterOperation()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.RequestItem.getFilterValue()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.HandlerRegistry.getSupportedRestServices()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.HandlerRegistry.getSupportedRpcServices()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.TestHandler.get(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.TestHandler.overridden(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.TestHandler.overriddenRpc(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.TestHandler.create(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.TestHandler.futureException(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.apache.shindig.protocol.TestHandler.exception(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD</data>
    </node>
    <edge id="e1" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$1(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken$Keys(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$1.getValue(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getOwnerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e3" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$1.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.setOwnerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e4" source="org.apache.shindig.auth.AbstractSecurityToken$Keys#OWNER" target="org.apache.shindig.auth.AbstractSecurityToken$Keys$1(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e5" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$2(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken$Keys(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e6" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$2.getValue(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getViewerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e7" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$2.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.setViewerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e8" source="org.apache.shindig.auth.AbstractSecurityToken$Keys#VIEWER" target="org.apache.shindig.auth.AbstractSecurityToken$Keys$2(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e9" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$3(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken$Keys(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e10" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$3.getValue(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getAppId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e11" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$3.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.setAppId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e12" source="org.apache.shindig.auth.AbstractSecurityToken$Keys#APP_ID" target="org.apache.shindig.auth.AbstractSecurityToken$Keys$3(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e13" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$4(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken$Keys(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e14" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$4.getValue(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getDomain()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e15" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$4.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.setDomain(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e16" source="org.apache.shindig.auth.AbstractSecurityToken$Keys#DOMAIN" target="org.apache.shindig.auth.AbstractSecurityToken$Keys$4(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e17" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$5(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken$Keys(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e18" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$5.getValue(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e19" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$5.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.setContainer(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e20" source="org.apache.shindig.auth.AbstractSecurityToken$Keys#CONTAINER" target="org.apache.shindig.auth.AbstractSecurityToken$Keys$5(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e21" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$6(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken$Keys(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e22" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$6.getValue(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getAppUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e23" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$6.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.setAppUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e24" source="org.apache.shindig.auth.AbstractSecurityToken$Keys#APP_URL" target="org.apache.shindig.auth.AbstractSecurityToken$Keys$6(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e25" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$7(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken$Keys(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e26" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$7.getValue(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getModuleId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e27" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$7.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.setModuleId(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e28" source="org.apache.shindig.auth.AbstractSecurityToken$Keys#MODULE_ID" target="org.apache.shindig.auth.AbstractSecurityToken$Keys$7(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e29" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$8(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken$Keys(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e30" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$8.getValue(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getExpiresAt()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e31" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$8.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.setExpiresAt(java.lang.Long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e32" source="org.apache.shindig.auth.AbstractSecurityToken$Keys#EXPIRES" target="org.apache.shindig.auth.AbstractSecurityToken$Keys$8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e33" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$9(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken$Keys(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e34" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$9.getValue(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getTrustedJson()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e35" source="org.apache.shindig.auth.AbstractSecurityToken$Keys$9.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.setTrustedJson(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e36" source="org.apache.shindig.auth.AbstractSecurityToken$Keys#TRUSTED_JSON" target="org.apache.shindig.auth.AbstractSecurityToken$Keys$9(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e37" source="org.apache.shindig.auth.AbstractSecurityToken#TIME_SOURCE" target="org.apache.shindig.common.util.TimeSource()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e38" source="org.apache.shindig.auth.AbstractSecurityToken.isExpired()" target="org.apache.shindig.auth.AbstractSecurityToken.enforceNotExpired()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e39" source="org.apache.shindig.auth.AbstractSecurityToken.toMap()" target="org.apache.shindig.auth.AbstractSecurityToken.getMapKeys()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e40" source="org.apache.shindig.auth.AbstractSecurityToken.toMap()" target="org.apache.shindig.auth.AbstractSecurityToken$Keys.getValue(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e41" source="org.apache.shindig.auth.AbstractSecurityToken.toMap()" target="org.apache.shindig.auth.AbstractSecurityToken$Keys.getKey()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e42" source="org.apache.shindig.auth.AbstractSecurityToken.enforceNotExpired()" target="org.apache.shindig.auth.AbstractSecurityToken.getExpiresAt()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e43" source="org.apache.shindig.auth.AbstractSecurityToken.enforceNotExpired()" target="org.apache.shindig.auth.AbstractSecurityToken.getTimeSource()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e44" source="org.apache.shindig.auth.AbstractSecurityToken.enforceNotExpired()" target="org.apache.shindig.common.util.TimeSource.currentTimeMillis()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e45" source="org.apache.shindig.auth.AbstractSecurityToken.enforceNotExpired()" target="org.apache.shindig.common.crypto.BlobExpiredException(long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e46" source="org.apache.shindig.auth.AbstractSecurityToken.loadFromMap(java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.getMapKeys()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e47" source="org.apache.shindig.auth.AbstractSecurityToken.loadFromMap(java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken$Keys.loadFromMap(org.apache.shindig.auth.AbstractSecurityToken,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e48" source="org.apache.shindig.auth.AbstractSecurityToken.setExpires()" target="org.apache.shindig.auth.AbstractSecurityToken.setExpires(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e49" source="org.apache.shindig.auth.AbstractSecurityToken.setExpires(int)" target="org.apache.shindig.auth.AbstractSecurityToken.setExpiresAt(java.lang.Long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e50" source="org.apache.shindig.auth.AbstractSecurityToken.setExpires(int)" target="org.apache.shindig.auth.AbstractSecurityToken.getTimeSource()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e51" source="org.apache.shindig.auth.AbstractSecurityToken.setExpires(int)" target="org.apache.shindig.common.util.TimeSource.currentTimeMillis()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e52" source="org.apache.shindig.auth.AbstractSecurityToken.setExpires(int)" target="org.apache.shindig.auth.AbstractSecurityToken.getMaxTokenTTL()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e53" source="org.apache.shindig.auth.AnonymousAuthenticationHandler.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.auth.AnonymousSecurityToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e54" source="org.apache.shindig.auth.AnonymousSecurityToken()" target="org.apache.shindig.auth.AnonymousSecurityToken(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e55" source="org.apache.shindig.auth.AnonymousSecurityToken(java.lang.String)" target="org.apache.shindig.auth.AnonymousSecurityToken(java.lang.String,java.lang.Long,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e56" source="org.apache.shindig.auth.AnonymousSecurityToken(java.lang.String,java.lang.Long,java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e57" source="org.apache.shindig.auth.AnonymousSecurityToken(java.lang.String,java.lang.Long,java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setContainer(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e58" source="org.apache.shindig.auth.AnonymousSecurityToken(java.lang.String,java.lang.Long,java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setModuleId(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e59" source="org.apache.shindig.auth.AnonymousSecurityToken(java.lang.String,java.lang.Long,java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setAppUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e60" source="org.apache.shindig.auth.AnonymousSecurityToken(java.lang.String,java.lang.Long,java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setOwnerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e61" source="org.apache.shindig.auth.AnonymousSecurityToken(java.lang.String,java.lang.Long,java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setViewerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e62" source="org.apache.shindig.auth.AnonymousSecurityToken(java.lang.String,java.lang.Long,java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setDomain(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e63" source="org.apache.shindig.auth.AnonymousSecurityToken(java.lang.String,java.lang.Long,java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setTrustedJson(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e64" source="org.apache.shindig.auth.AnonymousSecurityToken.getAppId()" target="org.apache.shindig.auth.AbstractSecurityToken.getAppUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e65" source="org.apache.shindig.auth.AuthInfo.getAuthType()" target="org.apache.shindig.auth.AuthInfoUtil.getAuthTypeFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e66" source="org.apache.shindig.auth.AuthInfo.getSecurityToken()" target="org.apache.shindig.auth.AuthInfoUtil.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e67" source="org.apache.shindig.auth.AuthInfoUtil$Attribute#SECURITY_TOKEN" target="org.apache.shindig.auth.AuthInfoUtil$Attribute()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e68" source="org.apache.shindig.auth.AuthInfoUtil$Attribute#AUTH_TYPE" target="org.apache.shindig.auth.AuthInfoUtil$Attribute()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e69" source="org.apache.shindig.auth.AuthInfoUtil.getRequestAttribute(javax.servlet.http.HttpServletRequest,org.apache.shindig.auth.AuthInfoUtil$Attribute)" target="org.apache.shindig.auth.AuthInfoUtil$Attribute.getId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e70" source="org.apache.shindig.auth.AuthInfoUtil.setRequestAttribute(javax.servlet.http.HttpServletRequest,org.apache.shindig.auth.AuthInfoUtil$Attribute,T)" target="org.apache.shindig.auth.AuthInfoUtil$Attribute.getId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e71" source="org.apache.shindig.auth.AuthInfoUtil.getAuthTypeFromRequest(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.auth.AuthInfoUtil.getRequestAttribute(javax.servlet.http.HttpServletRequest,org.apache.shindig.auth.AuthInfoUtil$Attribute)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e72" source="org.apache.shindig.auth.AuthInfoUtil.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.auth.AuthInfoUtil.getRequestAttribute(javax.servlet.http.HttpServletRequest,org.apache.shindig.auth.AuthInfoUtil$Attribute)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e73" source="org.apache.shindig.auth.AuthInfoUtil.setAuthTypeForRequest(javax.servlet.http.HttpServletRequest,java.lang.String)" target="org.apache.shindig.auth.AuthInfoUtil.setRequestAttribute(javax.servlet.http.HttpServletRequest,org.apache.shindig.auth.AuthInfoUtil$Attribute,T)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e74" source="org.apache.shindig.auth.AuthInfoUtil.setSecurityTokenForRequest(javax.servlet.http.HttpServletRequest,org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AuthInfoUtil.setRequestAttribute(javax.servlet.http.HttpServletRequest,org.apache.shindig.auth.AuthInfoUtil$Attribute,T)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e75" source="org.apache.shindig.auth.AuthInfoUtilTest.testAuthType()" target="org.apache.shindig.common.testing.FakeHttpServletRequest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e76" source="org.apache.shindig.auth.AuthInfoUtilTest.testAuthType()" target="org.apache.shindig.auth.AuthInfoUtil.setAuthTypeForRequest(javax.servlet.http.HttpServletRequest,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e77" source="org.apache.shindig.auth.AuthInfoUtilTest.testAuthType()" target="org.apache.shindig.auth.AuthInfoUtil.getAuthTypeFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e78" source="org.apache.shindig.auth.AuthInfoUtilTest.testToken()" target="org.apache.shindig.common.testing.FakeHttpServletRequest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e79" source="org.apache.shindig.auth.AuthInfoUtilTest.testToken()" target="org.apache.shindig.common.testing.FakeGadgetToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e80" source="org.apache.shindig.auth.AuthInfoUtilTest.testToken()" target="org.apache.shindig.auth.AuthInfoUtil.setSecurityTokenForRequest(javax.servlet.http.HttpServletRequest,org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e81" source="org.apache.shindig.auth.AuthInfoUtilTest.testToken()" target="org.apache.shindig.auth.AuthInfoUtil.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e82" source="org.apache.shindig.auth.AuthenticationServletFilter$StashedBodyRequestwrapper.getInputStream()" target="org.apache.shindig.auth.AuthenticationServletFilter$StashedBodyRequestwrapper$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e83" source="org.apache.shindig.auth.AuthenticationServletFilter()" target="org.apache.shindig.common.servlet.InjectedFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e84" source="org.apache.shindig.auth.AuthenticationServletFilter.callChain(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.auth.AuthenticationServletFilter$StashedBodyRequestwrapper(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e85" source="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" target="org.apache.shindig.auth.AuthenticationHandler.getWWWAuthenticateHeader(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e86" source="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" target="org.apache.shindig.auth.AuthenticationServletFilter.getRealm(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e87" source="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" target="org.apache.shindig.auth.AuthenticationHandler.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e88" source="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" target="org.apache.shindig.auth.AuthInfoUtil.setAuthTypeForRequest(javax.servlet.http.HttpServletRequest,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e89" source="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" target="org.apache.shindig.auth.AuthenticationHandler.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e90" source="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" target="org.apache.shindig.auth.AuthInfoUtil.setSecurityTokenForRequest(javax.servlet.http.HttpServletRequest,org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e91" source="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" target="org.apache.shindig.auth.AuthenticationServletFilter.callChain(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e92" source="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" target="org.apache.shindig.auth.AuthenticationServletFilter.setAuthHeader(java.lang.String,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e93" source="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" target="org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException.getAdditionalHeaders()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e94" source="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" target="org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException.getRedirect()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e95" source="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" target="org.apache.shindig.auth.AuthenticationServletFilter.onRedirect(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e96" source="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" target="org.apache.shindig.auth.AuthenticationServletFilter.onError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e97" source="org.apache.shindig.auth.AuthenticationServletFilter.onRedirect(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException)" target="org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException.getRedirect()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e98" source="org.apache.shindig.auth.AuthenticationServletFilterTest()" target="org.apache.shindig.common.EasyMockTestCase()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e99" source="org.apache.shindig.auth.AuthenticationServletFilterTest.setup()" target="org.apache.shindig.common.EasyMockTestCase.mock(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e100" source="org.apache.shindig.auth.AuthenticationServletFilterTest.setup()" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder(javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e101" source="org.apache.shindig.auth.AuthenticationServletFilterTest.setup()" target="org.apache.shindig.auth.AuthenticationServletFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e102" source="org.apache.shindig.auth.AuthenticationServletFilterTest.setup()" target="org.apache.shindig.auth.AuthenticationServletFilterTest$NullSecurityTokenAuthenticationHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e103" source="org.apache.shindig.auth.AuthenticationServletFilterTest.testDoFilter_BadArgs()" target="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e104" source="org.apache.shindig.auth.AuthenticationServletFilterTest.testNullSecurityToken()" target="org.apache.shindig.auth.AuthenticationServletFilter.setAuthenticationHandlers(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e105" source="org.apache.shindig.auth.AuthenticationServletFilterTest.testNullSecurityToken()" target="org.apache.shindig.auth.AuthenticationServletFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e106" source="org.apache.shindig.auth.AuthenticationServletFilterTest.testNullSecurityToken()" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder.getHeader(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e107" source="org.apache.shindig.auth.BasicSecurityToken()" target="org.apache.shindig.auth.AbstractSecurityToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e108" source="org.apache.shindig.auth.BasicSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)" target="org.apache.shindig.auth.AbstractSecurityToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e109" source="org.apache.shindig.auth.BasicSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)" target="org.apache.shindig.auth.AbstractSecurityToken.setOwnerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e110" source="org.apache.shindig.auth.BasicSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)" target="org.apache.shindig.auth.AbstractSecurityToken.setViewerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e111" source="org.apache.shindig.auth.BasicSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)" target="org.apache.shindig.auth.AbstractSecurityToken.setAppId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e112" source="org.apache.shindig.auth.BasicSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)" target="org.apache.shindig.auth.AbstractSecurityToken.setDomain(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e113" source="org.apache.shindig.auth.BasicSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)" target="org.apache.shindig.auth.AbstractSecurityToken.setAppUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e114" source="org.apache.shindig.auth.BasicSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)" target="org.apache.shindig.auth.AbstractSecurityToken.setModuleId(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e115" source="org.apache.shindig.auth.BasicSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)" target="org.apache.shindig.auth.AbstractSecurityToken.setContainer(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e116" source="org.apache.shindig.auth.BasicSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)" target="org.apache.shindig.auth.AbstractSecurityToken.setActiveUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e117" source="org.apache.shindig.auth.BasicSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)" target="org.apache.shindig.auth.AbstractSecurityToken.setExpiresAt(java.lang.Long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e118" source="org.apache.shindig.auth.BasicSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)" target="org.apache.shindig.config.ContainerConfig.addConfigObserver(org.apache.shindig.config.ContainerConfig$ConfigObserver,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e119" source="org.apache.shindig.auth.BasicSecurityTokenCodec.getTokenTimeToLive(java.lang.String)" target="org.apache.shindig.auth.BasicSecurityTokenCodec.getTokenTimeToLive()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e120" source="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e121" source="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.setExpires(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e122" source="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.setExpires()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e123" source="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getExpiresAt()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e124" source="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.BasicSecurityToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e125" source="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.getExpiresAt()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e126" source="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.common.util.Utf8UrlCoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e127" source="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getOwnerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e128" source="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getViewerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e129" source="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getAppId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e130" source="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getDomain()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e131" source="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getAppUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e132" source="org.apache.shindig.auth.BasicSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getModuleId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e133" source="org.apache.shindig.auth.BasicSecurityTokenCodec.createToken(java.util.Map)" target="org.apache.shindig.auth.AnonymousSecurityToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e134" source="org.apache.shindig.auth.BasicSecurityTokenCodec.createToken(java.util.Map)" target="org.apache.shindig.auth.SecurityTokenException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e135" source="org.apache.shindig.auth.BasicSecurityTokenCodec.createToken(java.util.Map)" target="org.apache.shindig.common.util.Utf8UrlCoder.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e136" source="org.apache.shindig.auth.BasicSecurityTokenCodec.createToken(java.util.Map)" target="org.apache.shindig.auth.BasicSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e137" source="org.apache.shindig.auth.BasicSecurityTokenCodec.createToken(java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.enforceNotExpired()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e138" source="org.apache.shindig.auth.BasicSecurityTokenCodec.createToken(java.util.Map)" target="org.apache.shindig.auth.SecurityTokenException(java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e139" source="org.apache.shindig.auth.BasicSecurityTokenCodec.containersChanged(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Collection)" target="org.apache.shindig.config.ContainerConfig.getInt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e140" source="org.apache.shindig.auth.BasicSecurityTokenCodecTest.setUp()" target="org.apache.shindig.config.BasicContainerConfig()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e141" source="org.apache.shindig.auth.BasicSecurityTokenCodecTest.setUp()" target="org.apache.shindig.auth.BasicSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e142" source="org.apache.shindig.auth.BasicSecurityTokenCodecTest.testGetTokenTimeToLive()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e143" source="org.apache.shindig.auth.BasicSecurityTokenCodecTest.testGetTokenTimeToLive()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e144" source="org.apache.shindig.auth.BasicSecurityTokenCodecTest.testGetTokenTimeToLive()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e145" source="org.apache.shindig.auth.BasicSecurityTokenCodecTest.testGetTokenTimeToLive()" target="org.apache.shindig.auth.BasicSecurityTokenCodec.getTokenTimeToLive(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e146" source="org.apache.shindig.auth.BasicSecurityTokenCodecTest.testGetTokenTimeToLive()" target="org.apache.shindig.auth.BasicSecurityTokenCodec.getTokenTimeToLive()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e147" source="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e148" source="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.loadFromMap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e149" source="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.setContainer(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e150" source="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.setDomain(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e151" source="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.setActiveUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e152" source="org.apache.shindig.auth.BlobCrypterSecurityToken.getAppId()" target="org.apache.shindig.auth.AbstractSecurityToken.getAppUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e153" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e154" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e155" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getDomain()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e156" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getActiveUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e157" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.setAppId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e158" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getAppId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e159" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.setAppUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e160" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getAppUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e161" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.setExpiresAt(java.lang.Long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e162" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getExpiresAt()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e163" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.setModuleId(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e164" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getModuleId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e165" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.setOwnerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e166" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getOwnerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e167" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.setTrustedJson(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e168" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getTrustedJson()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e169" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.setViewerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e170" source="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getViewerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e171" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)" target="org.apache.shindig.config.ContainerConfig.addConfigObserver(org.apache.shindig.config.ContainerConfig$ConfigObserver,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e172" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.loadContainers(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Map,java.util.Map,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e173" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)" target="org.apache.shindig.config.ContainerConfig.getContainers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e174" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.getTokenTimeToLive(java.lang.String)" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.getTokenTimeToLive()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e175" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityToken.getAuthenticationMode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e176" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityTokenException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e177" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.BlobCrypterSecurityToken.fromToken(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e178" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e179" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.setExpires(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e180" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.setExpires()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e181" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.common.crypto.BlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e182" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.AbstractSecurityToken.toMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e183" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityTokenException(java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e184" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)" target="org.apache.shindig.auth.AnonymousSecurityToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e185" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)" target="org.apache.shindig.auth.SecurityTokenException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e186" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)" target="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e187" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)" target="org.apache.shindig.common.crypto.BlobCrypter.unwrap(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e188" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)" target="org.apache.shindig.auth.AbstractSecurityToken.enforceNotExpired()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e189" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)" target="org.apache.shindig.auth.SecurityTokenException(java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e190" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.loadCrypter(java.lang.String)" target="org.apache.shindig.common.crypto.BasicBlobCrypter(java.lang.String,org.apache.shindig.common.util.HMACType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e191" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.containersChanged(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Collection)" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.loadContainers(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Map,java.util.Map,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e192" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.loadContainers(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Map,java.util.Map,java.util.Map)" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e193" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.loadContainers(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Map,java.util.Map,java.util.Map)" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.loadCrypter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e194" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.loadContainers(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Map,java.util.Map,java.util.Map)" target="org.apache.shindig.config.ContainerConfig.getInt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e195" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.makeContainer(java.lang.String)" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.getContainerKey(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e196" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.getBlobCrypter(java.lang.String)" target="org.apache.shindig.common.crypto.BasicBlobCrypter(java.lang.String,org.apache.shindig.common.util.HMACType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e197" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.setUp()" target="org.apache.shindig.config.BasicContainerConfig()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e198" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.setUp()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e199" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.setUp()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e200" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.setUp()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.makeContainer(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e201" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.setUp()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e202" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.setUp()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e203" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.setUp()" target="org.apache.shindig.common.util.FakeTimeSource()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e204" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testAnonymous()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e205" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testAnonymous()" target="org.apache.shindig.auth.SecurityToken.isAnonymous()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e206" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()" target="org.apache.shindig.auth.AbstractSecurityToken$Keys.getKey()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e207" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()" target="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e208" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()" target="org.apache.shindig.auth.AbstractSecurityToken.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e209" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.getBlobCrypter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e210" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.getContainerKey(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e211" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()" target="org.apache.shindig.common.crypto.BlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e212" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()" target="org.apache.shindig.auth.AbstractSecurityToken.toMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e213" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e214" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e215" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e216" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.makeContainer(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e217" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e218" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testChangingContainers()" target="org.apache.shindig.config.ContainerConfig$Transaction.removeContainer(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e219" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.AbstractSecurityToken$Keys.getKey()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e220" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e221" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.AbstractSecurityToken.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e222" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.getBlobCrypter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e223" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.getContainerKey(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e224" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.common.crypto.BlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e225" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.AbstractSecurityToken.toMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e226" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e227" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.SecurityToken.getAppId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e228" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.SecurityToken.getAppUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e229" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.SecurityToken.getDomain()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e230" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.SecurityToken.getModuleId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e231" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.SecurityToken.getOwnerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e232" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.SecurityToken.getViewerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e233" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testCreateToken()" target="org.apache.shindig.auth.SecurityToken.getTrustedJson()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e234" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testExpired()" target="org.apache.shindig.auth.AbstractSecurityToken$Keys.getKey()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e235" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testExpired()" target="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e236" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testExpired()" target="org.apache.shindig.auth.AbstractSecurityToken.setTimeSource(org.apache.shindig.common.util.TimeSource)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e237" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testExpired()" target="org.apache.shindig.common.util.FakeTimeSource.incrementSeconds(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e238" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testExpired()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.getTokenTimeToLive(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e239" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testExpired()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e240" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testExpired()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e241" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testGetTokenTimeToLive()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.makeContainer(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e242" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testGetTokenTimeToLive()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e243" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testGetTokenTimeToLive()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e244" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testGetTokenTimeToLive()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e245" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testGetTokenTimeToLive()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.getTokenTimeToLive(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e246" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testGetTokenTimeToLive()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.getTokenTimeToLive()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e247" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testMalformed()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e248" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testUnknownContainer()" target="org.apache.shindig.auth.AbstractSecurityToken$Keys.getKey()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e249" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testUnknownContainer()" target="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e250" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testUnknownContainer()" target="org.apache.shindig.auth.AbstractSecurityToken.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e251" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testUnknownContainer()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.getBlobCrypter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e252" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testUnknownContainer()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.getContainerKey(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e253" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testUnknownContainer()" target="org.apache.shindig.common.crypto.BlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e254" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testUnknownContainer()" target="org.apache.shindig.auth.AbstractSecurityToken.toMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e255" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testUnknownContainer()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e256" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testWrongContainer()" target="org.apache.shindig.auth.AbstractSecurityToken$Keys.getKey()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e257" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testWrongContainer()" target="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e258" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testWrongContainer()" target="org.apache.shindig.auth.AbstractSecurityToken.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e259" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testWrongContainer()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.getBlobCrypter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e260" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testWrongContainer()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.getContainerKey(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e261" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testWrongContainer()" target="org.apache.shindig.common.crypto.BlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e262" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testWrongContainer()" target="org.apache.shindig.auth.AbstractSecurityToken.toMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e263" source="org.apache.shindig.auth.BlobCrypterSecurityTokenCodecTest.testWrongContainer()" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e264" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest#timeSource" target="org.apache.shindig.common.util.FakeTimeSource()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e265" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.setUp()" target="org.apache.shindig.common.crypto.BasicBlobCrypter(byte[],org.apache.shindig.common.util.HMACType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e266" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.setUp()" target="org.apache.shindig.common.crypto.Crypto.getRandomBytes(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e267" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e268" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e269" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e270" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.auth.AbstractSecurityToken.toMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e271" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e272" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.auth.BlobCrypterSecurityToken.getAppId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e273" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getAppUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e274" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getDomain()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e275" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getModuleId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e276" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getOwnerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e277" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getViewerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e278" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getTrustedJson()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e279" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.auth.BlobCrypterSecurityToken.getUpdatedToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e280" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testNullValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getActiveUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e281" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.auth.AbstractSecurityToken$Keys.getKey()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e282" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.auth.BlobCrypterSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e283" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e284" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e285" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.auth.AbstractSecurityToken.toMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e286" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e287" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.auth.BlobCrypterSecurityToken.getAppId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e288" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getAppUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e289" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getDomain()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e290" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getModuleId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e291" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getOwnerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e292" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getViewerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e293" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getTrustedJson()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e294" source="org.apache.shindig.auth.BlobCrypterSecurityTokenTest.testRealValues()" target="org.apache.shindig.auth.AbstractSecurityToken.getActiveUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e295" source="org.apache.shindig.auth.DefaultSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e296" source="org.apache.shindig.auth.DefaultSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)" target="org.apache.shindig.auth.BasicSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e297" source="org.apache.shindig.auth.DefaultSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)" target="org.apache.shindig.auth.BlobCrypterSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e298" source="org.apache.shindig.auth.DefaultSecurityTokenCodec.getTokenTimeToLive()" target="org.apache.shindig.auth.SecurityTokenCodec.getTokenTimeToLive()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e299" source="org.apache.shindig.auth.DefaultSecurityTokenCodec.getTokenTimeToLive(java.lang.String)" target="org.apache.shindig.auth.SecurityTokenCodec.getTokenTimeToLive(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e300" source="org.apache.shindig.auth.DefaultSecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.auth.SecurityTokenCodec.encodeToken(org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e301" source="org.apache.shindig.auth.DefaultSecurityTokenCodec.createToken(java.util.Map)" target="org.apache.shindig.auth.SecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e302" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest$FakeContainerConfig(java.lang.String)" target="org.apache.shindig.config.BasicContainerConfig()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e303" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testBasicDecoder()" target="org.apache.shindig.auth.DefaultSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e304" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testBasicDecoder()" target="org.apache.shindig.auth.DefaultSecurityTokenCodecTest$FakeContainerConfig(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e305" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testBasicDecoder()" target="org.apache.shindig.auth.DefaultSecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e306" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testBasicDecoder()" target="org.apache.shindig.auth.SecurityToken.getOwnerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e307" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testBasicDecoder()" target="org.apache.shindig.auth.SecurityToken.getViewerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e308" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testBasicDecoder()" target="org.apache.shindig.auth.SecurityToken.getAppUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e309" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testBasicDecoder()" target="org.apache.shindig.auth.SecurityToken.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e310" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testBasicDecoder()" target="org.apache.shindig.auth.SecurityToken.getExpiresAt()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e311" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testInvalidDecoder()" target="org.apache.shindig.auth.DefaultSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e312" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testInvalidDecoder()" target="org.apache.shindig.auth.DefaultSecurityTokenCodecTest$FakeContainerConfig(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e313" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testNullDecoder()" target="org.apache.shindig.auth.DefaultSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e314" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testNullDecoder()" target="org.apache.shindig.auth.DefaultSecurityTokenCodecTest$FakeContainerConfig(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e315" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testRealDecoder()" target="org.apache.shindig.auth.DefaultSecurityTokenCodec(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e316" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testRealDecoder()" target="org.apache.shindig.auth.DefaultSecurityTokenCodecTest$FakeContainerConfig(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e317" source="org.apache.shindig.auth.DefaultSecurityTokenCodecTest.testRealDecoder()" target="org.apache.shindig.auth.DefaultSecurityTokenCodec.getCodec()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e318" source="org.apache.shindig.auth.ForwardingSecurityToken.isAnonymous()" target="org.apache.shindig.auth.SecurityToken.isAnonymous()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e319" source="org.apache.shindig.auth.ForwardingSecurityToken.isExpired()" target="org.apache.shindig.auth.SecurityToken.isExpired()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e320" source="org.apache.shindig.auth.ForwardingSecurityToken.getExpiresAt()" target="org.apache.shindig.auth.SecurityToken.getExpiresAt()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e321" source="org.apache.shindig.auth.ForwardingSecurityToken.getActiveUrl()" target="org.apache.shindig.auth.SecurityToken.getActiveUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e322" source="org.apache.shindig.auth.ForwardingSecurityToken.getAppId()" target="org.apache.shindig.auth.SecurityToken.getAppId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e323" source="org.apache.shindig.auth.ForwardingSecurityToken.getAppUrl()" target="org.apache.shindig.auth.SecurityToken.getAppUrl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e324" source="org.apache.shindig.auth.ForwardingSecurityToken.getAuthenticationMode()" target="org.apache.shindig.auth.SecurityToken.getAuthenticationMode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e325" source="org.apache.shindig.auth.ForwardingSecurityToken.getContainer()" target="org.apache.shindig.auth.SecurityToken.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e326" source="org.apache.shindig.auth.ForwardingSecurityToken.getDomain()" target="org.apache.shindig.auth.SecurityToken.getDomain()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e327" source="org.apache.shindig.auth.ForwardingSecurityToken.getOwnerId()" target="org.apache.shindig.auth.SecurityToken.getOwnerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e328" source="org.apache.shindig.auth.ForwardingSecurityToken.getTrustedJson()" target="org.apache.shindig.auth.SecurityToken.getTrustedJson()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e329" source="org.apache.shindig.auth.ForwardingSecurityToken.getUpdatedToken()" target="org.apache.shindig.auth.SecurityToken.getUpdatedToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e330" source="org.apache.shindig.auth.ForwardingSecurityToken.getViewerId()" target="org.apache.shindig.auth.SecurityToken.getViewerId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e331" source="org.apache.shindig.auth.ForwardingSecurityToken.getModuleId()" target="org.apache.shindig.auth.SecurityToken.getModuleId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e332" source="org.apache.shindig.auth.OAuthUtil$SignatureType#URL_ONLY" target="org.apache.shindig.auth.OAuthUtil$SignatureType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e333" source="org.apache.shindig.auth.OAuthUtil$SignatureType#URL_AND_FORM_PARAMS" target="org.apache.shindig.auth.OAuthUtil$SignatureType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e334" source="org.apache.shindig.auth.OAuthUtil$SignatureType#URL_AND_BODY_HASH" target="org.apache.shindig.auth.OAuthUtil$SignatureType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e335" source="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getMappedParameters(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getActiveUrl(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e336" source="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getMappedParameters(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e337" source="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.auth.SecurityTokenCodec.createToken(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e338" source="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e339" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.setup()" target="org.apache.shindig.auth.BasicSecurityToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e340" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.setup()" target="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e341" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.setup()" target="org.apache.shindig.auth.UrlParameterAuthenticationHandler(org.apache.shindig.auth.SecurityTokenCodec,java.lang.Boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e342" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testGetSecurityTokenFromRequest()" target="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e343" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testInvalidRequests()" target="org.apache.shindig.common.testing.FakeHttpServletRequest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e344" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testInvalidRequests()" target="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e345" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testInvalidRequests()" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setHeader(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e346" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testOAuth1()" target="org.apache.shindig.common.testing.FakeHttpServletRequest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e347" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testOAuth1()" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setHeader(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e348" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testOAuth1()" target="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e349" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testOAuth2Header()" target="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e350" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testOAuth2Header()" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setHeader(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e351" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testOAuth2Header()" target="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e352" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testOAuth2Param()" target="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e353" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testOAuth2Param()" target="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e354" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testSecurityToken()" target="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e355" source="org.apache.shindig.auth.UrlParameterAuthenticationHandlerTest.testSecurityToken()" target="org.apache.shindig.auth.UrlParameterAuthenticationHandler.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e356" source="org.apache.shindig.auth.AuthenticationMode#UNAUTHENTICATED" target="org.apache.shindig.auth.AuthenticationMode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e357" source="org.apache.shindig.auth.AuthenticationMode#SECURITY_TOKEN_URL_PARAMETER" target="org.apache.shindig.auth.AuthenticationMode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e358" source="org.apache.shindig.auth.AuthenticationMode#OAUTH" target="org.apache.shindig.auth.AuthenticationMode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e359" source="org.apache.shindig.auth.AuthenticationMode#OAUTH_CONSUMER_REQUEST" target="org.apache.shindig.auth.AuthenticationMode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e360" source="org.apache.shindig.auth.AuthenticationMode#COOKIE" target="org.apache.shindig.auth.AuthenticationMode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e361" source="org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException(java.lang.String,java.lang.Throwable)" target="org.apache.shindig.auth.AuthenticationHandler$InvalidAuthenticationException(java.lang.String,java.lang.Throwable,java.util.Map,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e362" source="org.apache.shindig.expressions.jasper.JasperExpressionsTest()" target="org.apache.shindig.expressions.ExpressionsTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e363" source="org.apache.shindig.expressions.jasper.JasperExpressionsTest.booleanCoercionOfNumbersFails()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e364" source="org.apache.shindig.expressions.jasper.JasperExpressionsTest.booleanCoercionOfNumbersFails()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e365" source="org.apache.shindig.expressions.jasper.JasperExpressionsTest.booleanCoercionOfStringsFails()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e366" source="org.apache.shindig.expressions.jasper.JasperExpressionsTest.booleanCoercionOfStringsFails()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e367" source="org.apache.shindig.expressions.jasper.JasperExpressionsTest.setUp()" target="org.apache.shindig.expressions.ExpressionsTest.setUp()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e368" source="org.apache.shindig.expressions.jasper.JasperExpressionsTest.setUp()" target="org.apache.shindig.expressions.Expressions(org.apache.shindig.expressions.Functions,org.apache.shindig.common.cache.CacheProvider,org.apache.shindig.expressions.ELTypeConverter,org.apache.shindig.expressions.ExpressionProvider)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e369" source="org.apache.shindig.expressions.jasper.JasperExpressionsTest.setUp()" target="org.apache.shindig.expressions.jasper.JasperTypeConverter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e370" source="org.apache.shindig.expressions.jasper.JasperExpressionsTest.setUp()" target="org.apache.shindig.expressions.jasper.JasperProvider()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e371" source="org.apache.shindig.expressions.jasper.JasperTypeConverter()" target="org.apache.shindig.expressions.ShindigTypeConverter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e372" source="org.apache.shindig.expressions.juel.JuelExpressionsTest.evaluate(java.lang.String,java.lang.Class)" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e373" source="org.apache.shindig.expressions.juel.JuelExpressionsTest.booleanCoercionOfNumbersFails()" target="org.apache.shindig.expressions.juel.JuelExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e374" source="org.apache.shindig.expressions.juel.JuelExpressionsTest.booleanCoercionOfNumbersFails()" target="org.apache.shindig.expressions.juel.JuelExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e375" source="org.apache.shindig.expressions.juel.JuelExpressionsTest.booleanCoercionOfStringsFails()" target="org.apache.shindig.expressions.juel.JuelExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e376" source="org.apache.shindig.expressions.juel.JuelExpressionsTest.booleanCoercionOfStringsFails()" target="org.apache.shindig.expressions.juel.JuelExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e377" source="org.apache.shindig.expressions.juel.JuelExpressionsTest.setUp()" target="org.apache.shindig.expressions.Expressions.forTesting(org.apache.shindig.expressions.Functions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e378" source="org.apache.shindig.expressions.juel.JuelExpressionsTest.setUp()" target="org.apache.shindig.expressions.Expressions.newELContext(javax.el.ELResolver[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e379" source="org.apache.shindig.expressions.juel.JuelExpressionsTest.setUp()" target="org.apache.shindig.expressions.RootELResolver(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e380" source="org.apache.shindig.expressions.juel.JuelProvider$1.get(java.lang.String)" target="org.apache.shindig.common.cache.Cache.getElement(K)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e381" source="org.apache.shindig.expressions.juel.JuelProvider$1.put(java.lang.String,de.odysseus.el.tree.Tree)" target="org.apache.shindig.common.cache.Cache.addElement(K,V)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e382" source="org.apache.shindig.expressions.juel.JuelProvider.createTreeCache(org.apache.shindig.common.cache.CacheProvider)" target="org.apache.shindig.common.cache.NullCache()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e383" source="org.apache.shindig.expressions.juel.JuelProvider.createTreeCache(org.apache.shindig.common.cache.CacheProvider)" target="org.apache.shindig.common.cache.CacheProvider.createCache(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e384" source="org.apache.shindig.expressions.juel.JuelProvider.createTreeCache(org.apache.shindig.common.cache.CacheProvider)" target="org.apache.shindig.expressions.juel.JuelProvider$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e385" source="org.apache.shindig.expressions.juel.JuelProvider.createTreeCache(org.apache.shindig.common.cache.CacheProvider)" target="org.apache.shindig.common.cache.Cache.getElement(K)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e386" source="org.apache.shindig.expressions.juel.JuelProvider.createTreeCache(org.apache.shindig.common.cache.CacheProvider)" target="org.apache.shindig.common.cache.Cache.addElement(K,V)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e387" source="org.apache.shindig.expressions.juel.JuelProvider.newExpressionFactory(org.apache.shindig.common.cache.CacheProvider,org.apache.shindig.expressions.ELTypeConverter)" target="org.apache.shindig.expressions.juel.JuelProvider.createTreeCache(org.apache.shindig.common.cache.CacheProvider)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e388" source="org.apache.shindig.expressions.juel.JuelTypeConverter()" target="org.apache.shindig.expressions.ShindigTypeConverter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e389" source="org.apache.shindig.expressions.juel.JuelTypeConverter.convert(java.lang.Object,java.lang.Class)" target="org.apache.shindig.expressions.ShindigTypeConverter.convert(java.lang.Object,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e390" source="org.apache.shindig.expressions.Expressions$Context.getVariableMapper()" target="org.apache.shindig.expressions.Expressions$Variables()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e391" source="org.apache.shindig.expressions.Expressions$ValueExpressionWrapper.getValue(javax.el.ELContext)" target="org.apache.shindig.expressions.ELTypeConverter.convert(java.lang.Object,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e392" source="org.apache.shindig.expressions.Expressions(org.apache.shindig.expressions.Functions,org.apache.shindig.common.cache.CacheProvider,org.apache.shindig.expressions.ELTypeConverter,org.apache.shindig.expressions.ExpressionProvider)" target="org.apache.shindig.expressions.Expressions.newExpressionFactory(org.apache.shindig.expressions.ExpressionProvider,org.apache.shindig.common.cache.CacheProvider)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e393" source="org.apache.shindig.expressions.Expressions(org.apache.shindig.expressions.Functions,org.apache.shindig.common.cache.CacheProvider,org.apache.shindig.expressions.ELTypeConverter,org.apache.shindig.expressions.ExpressionProvider)" target="org.apache.shindig.expressions.Expressions$Context(javax.el.ELResolver)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e394" source="org.apache.shindig.expressions.Expressions(org.apache.shindig.expressions.Functions,org.apache.shindig.common.cache.CacheProvider,org.apache.shindig.expressions.ELTypeConverter,org.apache.shindig.expressions.ExpressionProvider)" target="org.apache.shindig.expressions.Expressions.createDefaultELResolver()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e395" source="org.apache.shindig.expressions.Expressions.newELContext(javax.el.ELResolver[])" target="org.apache.shindig.expressions.Expressions$Context(javax.el.ELResolver)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e396" source="org.apache.shindig.expressions.Expressions.createDefaultELResolver()" target="org.apache.shindig.expressions.JsonELResolver()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e397" source="org.apache.shindig.expressions.Expressions.newExpressionFactory(org.apache.shindig.expressions.ExpressionProvider,org.apache.shindig.common.cache.CacheProvider)" target="org.apache.shindig.expressions.ExpressionProvider.newExpressionFactory(org.apache.shindig.common.cache.CacheProvider,org.apache.shindig.expressions.ELTypeConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e398" source="org.apache.shindig.expressions.Expressions.constant(java.lang.Object,java.lang.Class)" target="org.apache.shindig.expressions.ELTypeConverter.isPostConvertible(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e399" source="org.apache.shindig.expressions.Expressions.constant(java.lang.Object,java.lang.Class)" target="org.apache.shindig.expressions.Expressions$ValueExpressionWrapper(javax.el.ValueExpression,org.apache.shindig.expressions.ELTypeConverter,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e400" source="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)" target="org.apache.shindig.expressions.ELTypeConverter.isPostConvertible(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e401" source="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)" target="org.apache.shindig.expressions.Expressions$ValueExpressionWrapper(javax.el.ValueExpression,org.apache.shindig.expressions.ELTypeConverter,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e402" source="org.apache.shindig.expressions.Expressions.forTesting()" target="org.apache.shindig.expressions.Expressions(org.apache.shindig.expressions.Functions,org.apache.shindig.common.cache.CacheProvider,org.apache.shindig.expressions.ELTypeConverter,org.apache.shindig.expressions.ExpressionProvider)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e403" source="org.apache.shindig.expressions.Expressions.forTesting()" target="org.apache.shindig.expressions.juel.JuelTypeConverter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e404" source="org.apache.shindig.expressions.Expressions.forTesting()" target="org.apache.shindig.expressions.juel.JuelProvider()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e405" source="org.apache.shindig.expressions.Expressions.forTesting(org.apache.shindig.expressions.Functions)" target="org.apache.shindig.expressions.Expressions(org.apache.shindig.expressions.Functions,org.apache.shindig.common.cache.CacheProvider,org.apache.shindig.expressions.ELTypeConverter,org.apache.shindig.expressions.ExpressionProvider)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e406" source="org.apache.shindig.expressions.Expressions.forTesting(org.apache.shindig.expressions.Functions)" target="org.apache.shindig.expressions.juel.JuelTypeConverter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e407" source="org.apache.shindig.expressions.Expressions.forTesting(org.apache.shindig.expressions.Functions)" target="org.apache.shindig.expressions.juel.JuelProvider()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e408" source="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e409" source="org.apache.shindig.expressions.ExpressionsTest.arraySupport()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e410" source="org.apache.shindig.expressions.ExpressionsTest.arraySupport()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e411" source="org.apache.shindig.expressions.ExpressionsTest.booleanCoercionOfBooleans()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e412" source="org.apache.shindig.expressions.ExpressionsTest.booleanCoercionOfBooleans()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e413" source="org.apache.shindig.expressions.ExpressionsTest.booleanCoercionOfNull()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e414" source="org.apache.shindig.expressions.ExpressionsTest.booleanCoercionOfNull()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e415" source="org.apache.shindig.expressions.ExpressionsTest.booleanCoercionOfNumbers()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e416" source="org.apache.shindig.expressions.ExpressionsTest.booleanCoercionOfNumbers()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e417" source="org.apache.shindig.expressions.ExpressionsTest.booleanCoercionOfStrings()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e418" source="org.apache.shindig.expressions.ExpressionsTest.booleanCoercionOfStrings()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e419" source="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfCollection()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e420" source="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfCollection()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e421" source="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfJSONArray()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e422" source="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfJSONArray()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e423" source="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfJSONObjectWithListProperty()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e424" source="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfJSONObjectWithListProperty()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e425" source="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfJSONObjectWithoutListProperty()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e426" source="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfJSONObjectWithoutListProperty()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e427" source="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfNull()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e428" source="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfNull()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e429" source="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfScalar()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e430" source="org.apache.shindig.expressions.ExpressionsTest.iterableCoercionOfScalar()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e431" source="org.apache.shindig.expressions.ExpressionsTest.jsonArrayCoercion()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e432" source="org.apache.shindig.expressions.ExpressionsTest.jsonArrayCoercion()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e433" source="org.apache.shindig.expressions.ExpressionsTest.jsonArrayCoercionOfStatic()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e434" source="org.apache.shindig.expressions.ExpressionsTest.jsonArraySupport()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e435" source="org.apache.shindig.expressions.ExpressionsTest.jsonArraySupport()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e436" source="org.apache.shindig.expressions.ExpressionsTest.jsonObjectSupport()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e437" source="org.apache.shindig.expressions.ExpressionsTest.jsonObjectSupport()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e438" source="org.apache.shindig.expressions.ExpressionsTest.listSupport()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e439" source="org.apache.shindig.expressions.ExpressionsTest.listSupport()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e440" source="org.apache.shindig.expressions.ExpressionsTest.mapSupport()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e441" source="org.apache.shindig.expressions.ExpressionsTest.mapSupport()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e442" source="org.apache.shindig.expressions.ExpressionsTest.missingJsonSubproperty()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e443" source="org.apache.shindig.expressions.ExpressionsTest.missingJsonSubproperty()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e444" source="org.apache.shindig.expressions.ExpressionsTest.missingMapSubproperty()" target="org.apache.shindig.expressions.ExpressionsTest.addVariable(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e445" source="org.apache.shindig.expressions.ExpressionsTest.missingMapSubproperty()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e446" source="org.apache.shindig.expressions.ExpressionsTest.missingTopLevelVariable()" target="org.apache.shindig.expressions.ExpressionsTest.evaluate(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e447" source="org.apache.shindig.expressions.ExpressionsTest.setUp()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e448" source="org.apache.shindig.expressions.ExpressionsTest.setUp()" target="org.apache.shindig.expressions.Expressions.newELContext(javax.el.ELResolver[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e449" source="org.apache.shindig.expressions.ExpressionsTest.setUp()" target="org.apache.shindig.expressions.RootELResolver(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e450" source="org.apache.shindig.expressions.Functions$DefaultFunctions()" target="org.apache.shindig.expressions.Functions(java.lang.Class[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e451" source="org.apache.shindig.expressions.Functions(java.lang.Class[])" target="org.apache.shindig.expressions.Functions.addMethod(java.lang.reflect.Method)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e452" source="org.apache.shindig.expressions.FunctionsTest.setUp()" target="org.apache.shindig.expressions.Functions(java.lang.Class[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e453" source="org.apache.shindig.expressions.FunctionsTest.testDefaultBinding()" target="org.apache.shindig.expressions.Functions.resolveFunction(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e454" source="org.apache.shindig.expressions.FunctionsTest.testExpose()" target="org.apache.shindig.expressions.Functions.resolveFunction(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e455" source="org.apache.shindig.expressions.FunctionsTest.testExpressionEvaluation()" target="org.apache.shindig.expressions.Expressions.forTesting(org.apache.shindig.expressions.Functions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e456" source="org.apache.shindig.expressions.FunctionsTest.testExpressionEvaluation()" target="org.apache.shindig.expressions.Expressions.newELContext(javax.el.ELResolver[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e457" source="org.apache.shindig.expressions.FunctionsTest.testExpressionEvaluation()" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e458" source="org.apache.shindig.expressions.FunctionsTest.testNonStaticNotExposed()" target="org.apache.shindig.expressions.Functions.resolveFunction(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e459" source="org.apache.shindig.expressions.JsonELResolver.isReadOnly(javax.el.ELContext,java.lang.Object,java.lang.Object)" target="org.apache.shindig.expressions.JsonELResolver.isJson(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e460" source="org.apache.shindig.expressions.JsonELResolver.getType(javax.el.ELContext,java.lang.Object,java.lang.Object)" target="org.apache.shindig.expressions.JsonELResolver.isJson(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e461" source="org.apache.shindig.expressions.JsonELResolver.getType(javax.el.ELContext,java.lang.Object,java.lang.Object)" target="org.apache.shindig.expressions.JsonELResolver.getValue(javax.el.ELContext,java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e462" source="org.apache.shindig.expressions.JsonELResolver.getValue(javax.el.ELContext,java.lang.Object,java.lang.Object)" target="org.apache.shindig.expressions.JsonELResolver.toInt(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e463" source="org.apache.shindig.expressions.JsonELResolver.setValue(javax.el.ELContext,java.lang.Object,java.lang.Object,java.lang.Object)" target="org.apache.shindig.expressions.JsonELResolver.toInt(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e464" source="org.apache.shindig.expressions.OpensocialFunctions.decodeBase64(java.lang.String)" target="org.apache.shindig.common.util.CharsetUtil.newUtf8String(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e465" source="org.apache.shindig.expressions.OpensocialFunctions.decodeBase64(java.lang.String)" target="org.apache.shindig.common.util.CharsetUtil.getUtf8Bytes(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e466" source="org.apache.shindig.expressions.OpensocialFunctions.formDecode(java.lang.String)" target="org.apache.shindig.common.util.Utf8UrlCoder.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e467" source="org.apache.shindig.expressions.OpensocialFunctions.formEncode(java.lang.String)" target="org.apache.shindig.common.util.Utf8UrlCoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e468" source="org.apache.shindig.expressions.OpensocialFunctionsTest.setUp()" target="org.apache.shindig.expressions.Functions(java.lang.Class[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e469" source="org.apache.shindig.expressions.OpensocialFunctionsTest.setUp()" target="org.apache.shindig.expressions.Expressions.forTesting(org.apache.shindig.expressions.Functions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e470" source="org.apache.shindig.expressions.OpensocialFunctionsTest.setUp()" target="org.apache.shindig.expressions.Expressions.newELContext(javax.el.ELResolver[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e471" source="org.apache.shindig.expressions.OpensocialFunctionsTest.setUp()" target="org.apache.shindig.expressions.RootELResolver(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e472" source="org.apache.shindig.expressions.OpensocialFunctionsTest.testDecodeBase64()" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e473" source="org.apache.shindig.expressions.OpensocialFunctionsTest.testDecodeBase64Null()" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e474" source="org.apache.shindig.expressions.OpensocialFunctionsTest.testHtmlDecode()" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e475" source="org.apache.shindig.expressions.OpensocialFunctionsTest.testHtmlEncode()" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e476" source="org.apache.shindig.expressions.OpensocialFunctionsTest.testParseJsonArray()" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e477" source="org.apache.shindig.expressions.OpensocialFunctionsTest.testParseJsonNull()" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e478" source="org.apache.shindig.expressions.OpensocialFunctionsTest.testParseJsonObject()" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e479" source="org.apache.shindig.expressions.OpensocialFunctionsTest.testUrlDecode()" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e480" source="org.apache.shindig.expressions.OpensocialFunctionsTest.testUrlDecodeNull()" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e481" source="org.apache.shindig.expressions.OpensocialFunctionsTest.testUrlEncode()" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e482" source="org.apache.shindig.expressions.OpensocialFunctionsTest.testUrlEncodeNull()" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e483" source="org.apache.shindig.expressions.RootELResolver()" target="org.apache.shindig.expressions.RootELResolver(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e484" source="org.apache.shindig.expressions.ShindigTypeConverter.convert(java.lang.Object,java.lang.Class)" target="org.apache.shindig.expressions.ShindigTypeConverter.coerceToBoolean(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e485" source="org.apache.shindig.expressions.ShindigTypeConverter.convert(java.lang.Object,java.lang.Class)" target="org.apache.shindig.expressions.ShindigTypeConverter.coerceToJsonArray(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e486" source="org.apache.shindig.expressions.ShindigTypeConverter.convert(java.lang.Object,java.lang.Class)" target="org.apache.shindig.expressions.ShindigTypeConverter.coerceToIterable(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e487" source="org.apache.shindig.expressions.ShindigTypeConverter$1.iterator()" target="org.apache.shindig.expressions.ShindigTypeConverter$1$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e488" source="org.apache.shindig.expressions.ShindigTypeConverter.coerceToIterable(java.lang.Object)" target="org.apache.shindig.expressions.ShindigTypeConverter$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e489" source="org.apache.shindig.expressions.ShindigTypeConverter.coerceToIterable(java.lang.Object)" target="org.apache.shindig.expressions.ShindigTypeConverter$1$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e490" source="org.apache.shindig.expressions.ShindigTypeConverter.coerceToIterable(java.lang.Object)" target="org.apache.shindig.expressions.ShindigTypeConverter.coerceToIterable(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e491" source="org.apache.shindig.common.crypto.BasicBlobCrypter#timeSource" target="org.apache.shindig.common.util.TimeSource()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e492" source="org.apache.shindig.common.crypto.BasicBlobCrypter(byte[])" target="org.apache.shindig.common.crypto.BasicBlobCrypter(byte[],org.apache.shindig.common.util.HMACType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e493" source="org.apache.shindig.common.crypto.BasicBlobCrypter(byte[])" target="org.apache.shindig.common.crypto.BasicBlobCrypter.setHmacTypeFromPreferredHMACAlgorithm()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e494" source="org.apache.shindig.common.crypto.BasicBlobCrypter(byte[],org.apache.shindig.common.util.HMACType)" target="org.apache.shindig.common.crypto.BasicBlobCrypter.init(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e495" source="org.apache.shindig.common.crypto.BasicBlobCrypter(java.io.File)" target="org.apache.shindig.common.crypto.BasicBlobCrypter(java.io.File,org.apache.shindig.common.util.HMACType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e496" source="org.apache.shindig.common.crypto.BasicBlobCrypter(java.io.File)" target="org.apache.shindig.common.crypto.BasicBlobCrypter.setHmacTypeFromPreferredHMACAlgorithm()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e497" source="org.apache.shindig.common.crypto.BasicBlobCrypter(java.io.File,org.apache.shindig.common.util.HMACType)" target="org.apache.shindig.common.crypto.BasicBlobCrypter.init(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e498" source="org.apache.shindig.common.crypto.BasicBlobCrypter(java.lang.String)" target="org.apache.shindig.common.crypto.BasicBlobCrypter(java.lang.String,org.apache.shindig.common.util.HMACType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e499" source="org.apache.shindig.common.crypto.BasicBlobCrypter(java.lang.String)" target="org.apache.shindig.common.crypto.BasicBlobCrypter.setHmacTypeFromPreferredHMACAlgorithm()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e500" source="org.apache.shindig.common.crypto.BasicBlobCrypter(java.lang.String,org.apache.shindig.common.util.HMACType)" target="org.apache.shindig.common.crypto.BasicBlobCrypter.init(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e501" source="org.apache.shindig.common.crypto.BasicBlobCrypter.deriveKey(byte,byte[],int)" target="org.apache.shindig.common.util.GenericDigestUtils.digest(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e502" source="org.apache.shindig.common.crypto.BasicBlobCrypter.serialize(java.util.Map)" target="org.apache.shindig.common.util.Utf8UrlCoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e503" source="org.apache.shindig.common.crypto.BasicBlobCrypter.serialize(java.util.Map)" target="org.apache.shindig.common.util.CharsetUtil.getUtf8Bytes(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e504" source="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)" target="org.apache.shindig.common.crypto.BasicBlobCrypter.serialize(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e505" source="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)" target="org.apache.shindig.common.crypto.Crypto.aes128cbcEncrypt(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e506" source="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)" target="org.apache.shindig.common.crypto.Crypto.hmacSha(byte[],byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e507" source="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)" target="org.apache.shindig.common.util.HMACType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e508" source="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)" target="org.apache.shindig.common.util.CharsetUtil.newUtf8String(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e509" source="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)" target="org.apache.shindig.common.crypto.BlobCrypterException(java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e510" source="org.apache.shindig.common.crypto.BasicBlobCrypter.deserialize(byte[])" target="org.apache.shindig.common.util.CharsetUtil.newUtf8String(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e511" source="org.apache.shindig.common.crypto.BasicBlobCrypter.deserialize(byte[])" target="org.apache.shindig.common.util.Utf8UrlCoder.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e512" source="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)" target="org.apache.shindig.common.util.CharsetUtil.getUtf8Bytes(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e513" source="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)" target="org.apache.shindig.common.util.HMACType.getLength()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e514" source="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)" target="org.apache.shindig.common.crypto.Crypto.hmacShaVerify(byte[],byte[],byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e515" source="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)" target="org.apache.shindig.common.util.HMACType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e516" source="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)" target="org.apache.shindig.common.crypto.Crypto.aes128cbcDecrypt(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e517" source="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)" target="org.apache.shindig.common.crypto.BasicBlobCrypter.deserialize(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e518" source="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)" target="org.apache.shindig.common.crypto.BlobCrypterException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e519" source="org.apache.shindig.common.crypto.BasicBlobCrypter.init(byte[])" target="org.apache.shindig.common.crypto.BasicBlobCrypter.deriveKey(byte,byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e520" source="org.apache.shindig.common.crypto.BasicBlobCrypter.init(java.lang.String)" target="org.apache.shindig.common.util.CharsetUtil.getUtf8Bytes(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e521" source="org.apache.shindig.common.crypto.BasicBlobCrypter.init(java.lang.String)" target="org.apache.shindig.common.crypto.BasicBlobCrypter.init(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e522" source="org.apache.shindig.common.crypto.BlobCrypterTest()" target="org.apache.shindig.common.crypto.BasicBlobCrypter(byte[],org.apache.shindig.common.util.HMACType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e523" source="org.apache.shindig.common.crypto.BlobCrypterTest()" target="org.apache.shindig.common.util.FakeTimeSource()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e524" source="org.apache.shindig.common.crypto.BlobCrypterTest.assertThrowsBlobCrypterException(java.lang.String)" target="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e525" source="org.apache.shindig.common.crypto.BlobCrypterTest.checkString(java.lang.String)" target="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e526" source="org.apache.shindig.common.crypto.BlobCrypterTest.checkString(java.lang.String)" target="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e527" source="org.apache.shindig.common.crypto.BlobCrypterTest.testBadKey()" target="org.apache.shindig.common.crypto.BasicBlobCrypter(byte[],org.apache.shindig.common.util.HMACType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e528" source="org.apache.shindig.common.crypto.BlobCrypterTest.testBadKey()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e529" source="org.apache.shindig.common.crypto.BlobCrypterTest.testBadKey()" target="org.apache.shindig.common.crypto.BlobCrypter.unwrap(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e530" source="org.apache.shindig.common.crypto.BlobCrypterTest.testDecryptGarbage()" target="org.apache.shindig.common.crypto.BlobCrypterTest.assertThrowsBlobCrypterException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e531" source="org.apache.shindig.common.crypto.BlobCrypterTest.testEncryptAndDecrypt()" target="org.apache.shindig.common.crypto.BlobCrypterTest.checkString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e532" source="org.apache.shindig.common.crypto.BlobCrypterTest.testEncryptAndDecrypt()" target="org.apache.shindig.common.crypto.Crypto.getRandomString(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e533" source="org.apache.shindig.common.crypto.BlobCrypterTest.testFixedKey()" target="org.apache.shindig.common.crypto.BasicBlobCrypter(byte[],org.apache.shindig.common.util.HMACType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e534" source="org.apache.shindig.common.crypto.BlobCrypterTest.testFixedKey()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e535" source="org.apache.shindig.common.crypto.BlobCrypterTest.testFixedKey()" target="org.apache.shindig.common.crypto.BlobCrypter.unwrap(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e536" source="org.apache.shindig.common.crypto.BlobCrypterTest.testManyEntries()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e537" source="org.apache.shindig.common.crypto.BlobCrypterTest.testManyEntries()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e538" source="org.apache.shindig.common.crypto.BlobCrypterTest.testShortKeyFails()" target="org.apache.shindig.common.crypto.BasicBlobCrypter(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e539" source="org.apache.shindig.common.crypto.BlobCrypterTest.testTamperData()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e540" source="org.apache.shindig.common.crypto.BlobCrypterTest.testTamperData()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e541" source="org.apache.shindig.common.crypto.BlobCrypterTest.testTamperIV()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e542" source="org.apache.shindig.common.crypto.BlobCrypterTest.testTamperIV()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e543" source="org.apache.shindig.common.crypto.BlobCrypterTest.testTamperMac()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.wrap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e544" source="org.apache.shindig.common.crypto.BlobCrypterTest.testTamperMac()" target="org.apache.shindig.common.crypto.BasicBlobCrypter.unwrap(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e545" source="org.apache.shindig.common.crypto.BlobExpiredException(java.util.Date,java.util.Date)" target="org.apache.shindig.common.crypto.BlobCrypterException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e546" source="org.apache.shindig.common.crypto.BlobExpiredException(long,long)" target="org.apache.shindig.common.crypto.BlobExpiredException(java.util.Date,java.util.Date)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e547" source="org.apache.shindig.common.crypto.Crypto#HMAC_TYPE" target="org.apache.shindig.common.util.HMACType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e548" source="org.apache.shindig.common.crypto.Crypto#HMAC_SHA_LEN" target="org.apache.shindig.common.util.HMACType.getLength()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e549" source="org.apache.shindig.common.crypto.Crypto.aes128cbcDecrypt(byte[],byte[])" target="org.apache.shindig.common.crypto.Crypto.aes128cbcDecryptWithIv(byte[],byte[],byte[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e550" source="org.apache.shindig.common.crypto.Crypto.aes128cbcEncrypt(byte[],byte[])" target="org.apache.shindig.common.crypto.Crypto.getRandomBytes(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e551" source="org.apache.shindig.common.crypto.Crypto.aes128cbcEncrypt(byte[],byte[])" target="org.apache.shindig.common.crypto.Crypto.aes128cbcEncryptWithIV(byte[],byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e552" source="org.apache.shindig.common.crypto.Crypto.hmacSha(byte[],byte[])" target="org.apache.shindig.common.crypto.Crypto.hmacSha(byte[],byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e553" source="org.apache.shindig.common.crypto.Crypto.getRandomDigits(int)" target="org.apache.shindig.common.crypto.Crypto.getRandomBytes(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e554" source="org.apache.shindig.common.crypto.Crypto.getRandomString(int)" target="org.apache.shindig.common.crypto.Crypto.getRandomBytes(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e555" source="org.apache.shindig.common.crypto.Crypto.hmacShaVerify(byte[],byte[],byte[])" target="org.apache.shindig.common.crypto.Crypto.hmacShaVerify(byte[],byte[],byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e556" source="org.apache.shindig.common.crypto.CryptoTest()" target="org.apache.shindig.common.crypto.BasicBlobCrypter(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e557" source="org.apache.shindig.common.crypto.CryptoTest()" target="org.apache.shindig.common.util.FakeTimeSource()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e558" source="org.apache.shindig.common.crypto.CryptoTest.testAes128Cbc()" target="org.apache.shindig.common.crypto.Crypto.getRandomBytes(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e559" source="org.apache.shindig.common.crypto.CryptoTest.testAes128Cbc()" target="org.apache.shindig.common.crypto.Crypto.aes128cbcEncrypt(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e560" source="org.apache.shindig.common.crypto.CryptoTest.testAes128Cbc()" target="org.apache.shindig.common.crypto.Crypto.aes128cbcDecrypt(byte[],byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e561" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha1()" target="org.apache.shindig.common.crypto.Crypto.hmacSha(byte[],byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e562" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha1()" target="org.apache.shindig.common.util.HMACType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e563" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha1Verify()" target="org.apache.shindig.common.crypto.Crypto.hmacShaVerify(byte[],byte[],byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e564" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha1Verify()" target="org.apache.shindig.common.util.HMACType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e565" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha1VerifyTampered()" target="org.apache.shindig.common.crypto.Crypto.hmacShaVerify(byte[],byte[],byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e566" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha1VerifyTampered()" target="org.apache.shindig.common.util.HMACType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e567" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha256()" target="org.apache.shindig.common.crypto.Crypto.hmacSha(byte[],byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e568" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha256()" target="org.apache.shindig.common.util.HMACType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e569" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha256Verify()" target="org.apache.shindig.common.crypto.Crypto.hmacShaVerify(byte[],byte[],byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e570" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha256Verify()" target="org.apache.shindig.common.util.HMACType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e571" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha384()" target="org.apache.shindig.common.crypto.Crypto.hmacSha(byte[],byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e572" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha384()" target="org.apache.shindig.common.util.HMACType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e573" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha384Verify()" target="org.apache.shindig.common.crypto.Crypto.hmacShaVerify(byte[],byte[],byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e574" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha384Verify()" target="org.apache.shindig.common.util.HMACType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e575" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha512()" target="org.apache.shindig.common.crypto.Crypto.hmacSha(byte[],byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e576" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha512()" target="org.apache.shindig.common.util.HMACType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e577" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha512Verify()" target="org.apache.shindig.common.crypto.Crypto.hmacShaVerify(byte[],byte[],byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e578" source="org.apache.shindig.common.crypto.CryptoTest.testHmacSha512Verify()" target="org.apache.shindig.common.util.HMACType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e579" source="org.apache.shindig.common.crypto.CryptoTest.testRandomDigits()" target="org.apache.shindig.common.crypto.Crypto.getRandomDigits(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e580" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProvider(java.lang.String,java.lang.String,boolean,boolean,org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler)" target="org.apache.shindig.common.cache.ehcache.EhCacheCacheProvider.getConfiguration(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e581" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProvider(java.lang.String,java.lang.String,boolean,boolean,org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler)" target="org.apache.shindig.common.cache.ehcache.EhCacheCacheProvider.create(boolean,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e582" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProvider(java.lang.String,java.lang.String,boolean,boolean,org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler)" target="org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler.register(org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupCapable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e583" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProvider.createCache(java.lang.String)" target="org.apache.shindig.common.cache.ehcache.EhConfiguredCache(java.lang.String,net.sf.ehcache.CacheManager)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e584" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProvider.getConfiguration(java.lang.String)" target="org.apache.shindig.common.util.ResourceLoader.open(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e585" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProviderTest.getNamedCache()" target="org.apache.shindig.common.cache.CacheProvider.createCache(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e586" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProviderTest.getNamedCache()" target="org.apache.shindig.common.cache.Cache.getElement(K)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e587" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProviderTest.getNamedCache()" target="org.apache.shindig.common.cache.Cache.addElement(K,V)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e588" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProviderTest.getNamedCache()" target="org.apache.shindig.common.cache.Cache.removeElement(K)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e589" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProviderTest.getNamedCache()" target="org.apache.shindig.common.cache.Cache.getCapacity()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e590" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProviderTest.getNamedCache()" target="org.apache.shindig.common.cache.Cache.getSize()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e591" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProviderTest.setup()" target="org.apache.shindig.common.cache.ehcache.EhCacheCacheProvider(java.lang.String,java.lang.String,boolean,boolean,org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e592" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProviderTest.setup()" target="org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e593" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProviderTest.testCacheManagerDuplication()" target="org.apache.shindig.common.cache.ehcache.EhCacheCacheProvider(java.lang.String,java.lang.String,boolean,boolean,org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e594" source="org.apache.shindig.common.cache.ehcache.EhCacheCacheProviderTest.testCacheManagerDuplication()" target="org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e595" source="org.apache.shindig.common.cache.ehcache.EhConfiguredCache.removeElement(K)" target="org.apache.shindig.common.cache.ehcache.EhConfiguredCache.getElement(K)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e596" source="org.apache.shindig.common.cache.LruCacheProvider(int)" target="org.apache.shindig.common.cache.LruCacheProvider(com.google.inject.Injector,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e597" source="org.apache.shindig.common.cache.LruCacheProvider.createCache(java.lang.String)" target="org.apache.shindig.common.cache.LruCacheProvider.getCapacity(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e598" source="org.apache.shindig.common.cache.LruCacheProvider.createCache(java.lang.String)" target="org.apache.shindig.common.cache.LruCache(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e599" source="org.apache.shindig.common.cache.LruCacheProviderTest.getCache(org.apache.shindig.common.cache.CacheProvider,java.lang.String)" target="org.apache.shindig.common.cache.CacheProvider.createCache(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e600" source="org.apache.shindig.common.cache.LruCacheProviderTest.createProvider(java.lang.String,java.lang.String,int)" target="org.apache.shindig.common.cache.LruCacheProviderTest$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e601" source="org.apache.shindig.common.cache.LruCacheProviderTest.createProvider(java.lang.String,java.lang.String,int)" target="org.apache.shindig.common.cache.LruCacheProvider(com.google.inject.Injector,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e602" source="org.apache.shindig.common.cache.LruCacheProviderTest.configuredCapacity()" target="org.apache.shindig.common.cache.LruCacheProviderTest.createProvider(java.lang.String,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e603" source="org.apache.shindig.common.cache.LruCacheProviderTest.configuredCapacity()" target="org.apache.shindig.common.cache.LruCacheProviderTest.getCache(org.apache.shindig.common.cache.CacheProvider,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e604" source="org.apache.shindig.common.cache.LruCacheProviderTest.configuredMultipleCalls()" target="org.apache.shindig.common.cache.LruCacheProviderTest.createProvider(java.lang.String,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e605" source="org.apache.shindig.common.cache.LruCacheProviderTest.configuredMultipleCalls()" target="org.apache.shindig.common.cache.LruCacheProviderTest.getCache(org.apache.shindig.common.cache.CacheProvider,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e606" source="org.apache.shindig.common.cache.LruCacheProviderTest.defaultCapacityForNamedCache()" target="org.apache.shindig.common.cache.LruCacheProvider(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e607" source="org.apache.shindig.common.cache.LruCacheProviderTest.defaultCapacityForNamedCache()" target="org.apache.shindig.common.cache.LruCacheProviderTest.getCache(org.apache.shindig.common.cache.CacheProvider,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e608" source="org.apache.shindig.common.cache.LruCacheProviderTest.malformedConfiguredCapacity()" target="org.apache.shindig.common.cache.LruCacheProviderTest.createProvider(java.lang.String,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e609" source="org.apache.shindig.common.cache.LruCacheProviderTest.malformedConfiguredCapacity()" target="org.apache.shindig.common.cache.LruCacheProviderTest.getCache(org.apache.shindig.common.cache.CacheProvider,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e610" source="org.apache.shindig.common.cache.LruCacheProviderTest.missingConfiguredCapacity()" target="org.apache.shindig.common.cache.LruCacheProviderTest.createProvider(java.lang.String,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e611" source="org.apache.shindig.common.cache.LruCacheProviderTest.missingConfiguredCapacity()" target="org.apache.shindig.common.cache.LruCacheProviderTest.getCache(org.apache.shindig.common.cache.CacheProvider,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e612" source="org.apache.shindig.common.cache.LruCacheTest#cache" target="org.apache.shindig.common.cache.LruCache(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e613" source="org.apache.shindig.common.cache.LruCacheTest.exceededCapacityRemoved()" target="org.apache.shindig.common.cache.LruCache.addElement(K,V)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e614" source="org.apache.shindig.common.cache.LruCacheTest.exceededCapacityRemoved()" target="org.apache.shindig.common.cache.LruCache.getSize()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e615" source="org.apache.shindig.common.cache.LruCacheTest.exceededCapacityRemoved()" target="org.apache.shindig.common.cache.LruCache.getCapacity()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e616" source="org.apache.shindig.common.cache.LruCacheTest.exceededCapacityRemoved()" target="org.apache.shindig.common.cache.LruCache.getElement(K)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e617" source="org.apache.shindig.common.cache.LruCacheTest.normalCapacityOk()" target="org.apache.shindig.common.cache.LruCache.addElement(K,V)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e618" source="org.apache.shindig.common.cache.LruCacheTest.normalCapacityOk()" target="org.apache.shindig.common.cache.LruCache.getSize()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e619" source="org.apache.shindig.common.cache.LruCacheTest.normalCapacityOk()" target="org.apache.shindig.common.cache.LruCache.getCapacity()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e620" source="org.apache.shindig.common.cache.LruCacheTest.normalCapacityOk()" target="org.apache.shindig.common.cache.LruCache.getElement(K)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e621" source="org.apache.shindig.common.cache.SoftExpiringCache(org.apache.shindig.common.cache.Cache)" target="org.apache.shindig.common.util.TimeSource()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e622" source="org.apache.shindig.common.cache.SoftExpiringCache.getElement(K)" target="org.apache.shindig.common.cache.Cache.getElement(K)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e623" source="org.apache.shindig.common.cache.SoftExpiringCache.getElement(K)" target="org.apache.shindig.common.cache.SoftExpiringCache$CachedObject(V,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e624" source="org.apache.shindig.common.cache.SoftExpiringCache.getElement(K)" target="org.apache.shindig.common.util.TimeSource.currentTimeMillis()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e625" source="org.apache.shindig.common.cache.SoftExpiringCache.addElement(K,V,long)" target="org.apache.shindig.common.util.TimeSource.currentTimeMillis()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e626" source="org.apache.shindig.common.cache.SoftExpiringCache.addElement(K,V,long)" target="org.apache.shindig.common.cache.Cache.addElement(K,V)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e627" source="org.apache.shindig.common.cache.SoftExpiringCacheTest.makeSoftExpiringCache()" target="org.apache.shindig.common.cache.SoftExpiringCache(org.apache.shindig.common.cache.Cache)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e628" source="org.apache.shindig.common.cache.SoftExpiringCacheTest.makeSoftExpiringCache()" target="org.apache.shindig.common.cache.SoftExpiringCache.setTimeSource(org.apache.shindig.common.util.TimeSource)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e629" source="org.apache.shindig.common.cache.SoftExpiringCacheTest.setUp()" target="org.apache.shindig.common.util.FakeTimeSource(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e630" source="org.apache.shindig.common.cache.SoftExpiringCacheTest.setUp()" target="org.apache.shindig.common.cache.LruCache(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e631" source="org.apache.shindig.common.cache.SoftExpiringCacheTest.testGeneralCacheExpiration()" target="org.apache.shindig.common.cache.SoftExpiringCacheTest.makeSoftExpiringCache()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e632" source="org.apache.shindig.common.cache.SoftExpiringCacheTest.testGeneralCacheExpiration()" target="org.apache.shindig.common.cache.SoftExpiringCache.addElement(K,V,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e633" source="org.apache.shindig.common.cache.SoftExpiringCacheTest.testGeneralCacheExpiration()" target="org.apache.shindig.common.cache.SoftExpiringCache.getElement(K)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e634" source="org.apache.shindig.common.cache.SoftExpiringCacheTest.testGeneralCacheExpiration()" target="org.apache.shindig.common.util.FakeTimeSource.setCurrentTimeMillis(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e635" source="org.apache.shindig.common.cache.SoftExpiringCacheTest.testMissingValue()" target="org.apache.shindig.common.cache.SoftExpiringCacheTest.makeSoftExpiringCache()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e636" source="org.apache.shindig.common.cache.SoftExpiringCacheTest.testMissingValue()" target="org.apache.shindig.common.cache.SoftExpiringCache.getElement(K)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e637" source="org.apache.shindig.common.uri.DefaultUriParser.parse(java.lang.String)" target="org.apache.shindig.common.uri.Uri.fromJavaUri(java.net.URI)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e638" source="org.apache.shindig.common.uri.Uri#parser" target="org.apache.shindig.common.uri.DefaultUriParser()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e639" source="org.apache.shindig.common.uri.Uri(org.apache.shindig.common.uri.UriBuilder)" target="org.apache.shindig.common.uri.UriBuilder.getScheme()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e640" source="org.apache.shindig.common.uri.Uri(org.apache.shindig.common.uri.UriBuilder)" target="org.apache.shindig.common.uri.UriBuilder.getAuthority()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e641" source="org.apache.shindig.common.uri.Uri(org.apache.shindig.common.uri.UriBuilder)" target="org.apache.shindig.common.uri.UriBuilder.getPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e642" source="org.apache.shindig.common.uri.Uri(org.apache.shindig.common.uri.UriBuilder)" target="org.apache.shindig.common.uri.UriBuilder.getQuery()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e643" source="org.apache.shindig.common.uri.Uri(org.apache.shindig.common.uri.UriBuilder)" target="org.apache.shindig.common.uri.UriBuilder.getFragment()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e644" source="org.apache.shindig.common.uri.Uri(org.apache.shindig.common.uri.UriBuilder)" target="org.apache.shindig.common.uri.UriBuilder.getQueryParameters()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e645" source="org.apache.shindig.common.uri.Uri(org.apache.shindig.common.uri.UriBuilder)" target="org.apache.shindig.common.uri.UriBuilder.getFragmentParameters()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e646" source="org.apache.shindig.common.uri.Uri.toJavaUri()" target="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e647" source="org.apache.shindig.common.uri.Uri.toJavaUri()" target="org.apache.shindig.common.uri.Uri$UriException(java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e648" source="org.apache.shindig.common.uri.Uri.fromJavaUri(java.net.URI)" target="org.apache.shindig.common.uri.Uri$UriException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e649" source="org.apache.shindig.common.uri.Uri.fromJavaUri(java.net.URI)" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e650" source="org.apache.shindig.common.uri.Uri.fromJavaUri(java.net.URI)" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e651" source="org.apache.shindig.common.uri.Uri.fromJavaUri(java.net.URI)" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e652" source="org.apache.shindig.common.uri.Uri.fromJavaUri(java.net.URI)" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e653" source="org.apache.shindig.common.uri.Uri.fromJavaUri(java.net.URI)" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e654" source="org.apache.shindig.common.uri.Uri.fromJavaUri(java.net.URI)" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e655" source="org.apache.shindig.common.uri.Uri.fromJavaUri(java.net.URI)" target="org.apache.shindig.common.uri.UriBuilder.toUri()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e656" source="org.apache.shindig.common.uri.Uri.parse(java.lang.String)" target="org.apache.shindig.common.uri.UriParser.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e657" source="org.apache.shindig.common.uri.Uri.parse(java.lang.String)" target="org.apache.shindig.common.uri.Uri$UriException(java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e658" source="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.Uri.isAbsolute()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e659" source="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.UriBuilder(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e660" source="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e661" source="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e662" source="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e663" source="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e664" source="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.Uri.normalizePath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e665" source="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.UriBuilder.toUri()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e666" source="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.Uri.validate(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e667" source="org.apache.shindig.common.uri.Uri.validate(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.Uri$UriException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e668" source="org.apache.shindig.common.uri.UriBuilder$ParamString(java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder$ParamString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e669" source="org.apache.shindig.common.uri.UriBuilder$ParamString(java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.setString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e670" source="org.apache.shindig.common.uri.UriBuilder$ParamString.getString()" target="org.apache.shindig.common.uri.UriBuilder.joinParameters(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e671" source="org.apache.shindig.common.uri.UriBuilder$ParamString.addAll(java.util.Map)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.add(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e672" source="org.apache.shindig.common.uri.UriBuilder$ParamString.setString(java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder.splitParameters(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e673" source="org.apache.shindig.common.uri.UriBuilder()" target="org.apache.shindig.common.uri.UriBuilder$ParamString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e674" source="org.apache.shindig.common.uri.UriBuilder(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.common.uri.UriBuilder$ParamString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e675" source="org.apache.shindig.common.uri.UriBuilder(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.common.uri.UriBuilder$ParamString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e676" source="org.apache.shindig.common.uri.UriBuilder(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.Uri.getScheme()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e677" source="org.apache.shindig.common.uri.UriBuilder(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.Uri.getAuthority()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e678" source="org.apache.shindig.common.uri.UriBuilder(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.Uri.getPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e679" source="org.apache.shindig.common.uri.UriBuilder(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.UriBuilder$ParamString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e680" source="org.apache.shindig.common.uri.UriBuilder(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.Uri.getQuery()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e681" source="org.apache.shindig.common.uri.UriBuilder(org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.Uri.getFragment()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e682" source="org.apache.shindig.common.uri.UriBuilder.equals(java.lang.Object)" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e683" source="org.apache.shindig.common.uri.UriBuilder.hashCode()" target="org.apache.shindig.common.uri.UriBuilder.toUri()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e684" source="org.apache.shindig.common.uri.UriBuilder.hashCode()" target="org.apache.shindig.common.uri.Uri.hashCode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e685" source="org.apache.shindig.common.uri.UriBuilder.getFragment()" target="org.apache.shindig.common.uri.UriBuilder$ParamString.getString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e686" source="org.apache.shindig.common.uri.UriBuilder.getFragmentParameter(java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.get(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e687" source="org.apache.shindig.common.uri.UriBuilder.getQuery()" target="org.apache.shindig.common.uri.UriBuilder$ParamString.getString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e688" source="org.apache.shindig.common.uri.UriBuilder.getQueryParameter(java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.get(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e689" source="org.apache.shindig.common.uri.UriBuilder.joinParameters(java.util.Map)" target="org.apache.shindig.common.util.Utf8UrlCoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e690" source="org.apache.shindig.common.uri.UriBuilder.toString()" target="org.apache.shindig.common.uri.UriBuilder.toUri()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e691" source="org.apache.shindig.common.uri.UriBuilder.toString()" target="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e692" source="org.apache.shindig.common.uri.UriBuilder.getFragmentParameters(java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.getParams(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e693" source="org.apache.shindig.common.uri.UriBuilder.getQueryParameters(java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.getParams(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e694" source="org.apache.shindig.common.uri.UriBuilder.getFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder$ParamString.getParams()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e695" source="org.apache.shindig.common.uri.UriBuilder.getQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder$ParamString.getParams()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e696" source="org.apache.shindig.common.uri.UriBuilder.splitParameters(java.lang.String)" target="org.apache.shindig.common.util.Utf8UrlCoder.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e697" source="org.apache.shindig.common.uri.UriBuilder.toUri()" target="org.apache.shindig.common.uri.Uri(org.apache.shindig.common.uri.UriBuilder)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e698" source="org.apache.shindig.common.uri.UriBuilder.addFragmentParameter(java.lang.String,java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.add(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e699" source="org.apache.shindig.common.uri.UriBuilder.addFragmentParameters(java.util.Map)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.addAll(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e700" source="org.apache.shindig.common.uri.UriBuilder.addQueryParameter(java.lang.String,java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.add(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e701" source="org.apache.shindig.common.uri.UriBuilder.addQueryParameters(java.util.Map)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.addAll(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e702" source="org.apache.shindig.common.uri.UriBuilder.parse(java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e703" source="org.apache.shindig.common.uri.UriBuilder.parse(java.lang.String)" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e704" source="org.apache.shindig.common.uri.UriBuilder.putFragmentParameter(java.lang.String,java.lang.Iterable)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.put(java.lang.String,java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e705" source="org.apache.shindig.common.uri.UriBuilder.putFragmentParameter(java.lang.String,java.lang.String[])" target="org.apache.shindig.common.uri.UriBuilder$ParamString.put(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e706" source="org.apache.shindig.common.uri.UriBuilder.putQueryParameter(java.lang.String,java.lang.Iterable)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.put(java.lang.String,java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e707" source="org.apache.shindig.common.uri.UriBuilder.putQueryParameter(java.lang.String,java.lang.String[])" target="org.apache.shindig.common.uri.UriBuilder$ParamString.put(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e708" source="org.apache.shindig.common.uri.UriBuilder.removeFragmentParameter(java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.remove(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e709" source="org.apache.shindig.common.uri.UriBuilder.removeQueryParameter(java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.remove(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e710" source="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.setString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e711" source="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)" target="org.apache.shindig.common.uri.UriBuilder$ParamString.setString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e712" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e713" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e714" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e715" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e716" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.addFragmentParameters(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e717" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e718" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e719" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchParameters()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e720" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchParameters()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e721" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchParameters()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e722" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchParameters()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e723" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchParameters()" target="org.apache.shindig.common.uri.UriBuilder.addQueryParameters(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e724" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchParameters()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e725" source="org.apache.shindig.common.uri.UriBuilderTest.addBatchParameters()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e726" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e727" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e728" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e729" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e730" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.addFragmentParameter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e731" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e732" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e733" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalParameters()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e734" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalParameters()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e735" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalParameters()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e736" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalParameters()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e737" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalParameters()" target="org.apache.shindig.common.uri.UriBuilder.addQueryParameter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e738" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalParameters()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e739" source="org.apache.shindig.common.uri.UriBuilderTest.addIdenticalParameters()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e740" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleFragmentParameter()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e741" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleFragmentParameter()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e742" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleFragmentParameter()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e743" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleFragmentParameter()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e744" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleFragmentParameter()" target="org.apache.shindig.common.uri.UriBuilder.addFragmentParameter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e745" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleFragmentParameter()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e746" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleFragmentParameter()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e747" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleQueryParameter()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e748" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleQueryParameter()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e749" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleQueryParameter()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e750" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleQueryParameter()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e751" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleQueryParameter()" target="org.apache.shindig.common.uri.UriBuilder.addQueryParameter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e752" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleQueryParameter()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e753" source="org.apache.shindig.common.uri.UriBuilderTest.addSingleQueryParameter()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e754" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e755" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e756" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e757" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e758" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.addFragmentParameter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e759" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e760" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e761" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e762" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e763" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e764" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e765" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder.addQueryParameter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e766" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e767" source="org.apache.shindig.common.uri.UriBuilderTest.addTwoQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e768" source="org.apache.shindig.common.uri.UriBuilderTest.allPartsUsed()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e769" source="org.apache.shindig.common.uri.UriBuilderTest.allPartsUsed()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e770" source="org.apache.shindig.common.uri.UriBuilderTest.allPartsUsed()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e771" source="org.apache.shindig.common.uri.UriBuilderTest.allPartsUsed()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e772" source="org.apache.shindig.common.uri.UriBuilderTest.allPartsUsed()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e773" source="org.apache.shindig.common.uri.UriBuilderTest.allPartsUsed()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e774" source="org.apache.shindig.common.uri.UriBuilderTest.allPartsUsed()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e775" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestHttpStandardPortAndModify()" target="org.apache.shindig.common.uri.UriBuilder(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e776" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestHttpStandardPortAndModify()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e777" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestHttpStandardPortAndModify()" target="org.apache.shindig.common.uri.UriBuilder.getQueryParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e778" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestHttpStandardPortAndModify()" target="org.apache.shindig.common.uri.UriBuilder.getFragmentParameters()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e779" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestHttpStandardPortAndModify()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e780" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestHttpsStandardPort()" target="org.apache.shindig.common.uri.UriBuilder(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e781" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestHttpsStandardPort()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e782" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestNonStandardPort()" target="org.apache.shindig.common.uri.UriBuilder(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e783" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestNonStandardPort()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e784" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestNonePort()" target="org.apache.shindig.common.uri.UriBuilder(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e785" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromServletRequestNonePort()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e786" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromUriAndBack()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e787" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromUriAndBack()" target="org.apache.shindig.common.uri.UriBuilder(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e788" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromUriAndBack()" target="org.apache.shindig.common.uri.UriBuilder.toUri()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e789" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromUriAndModify()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e790" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromUriAndModify()" target="org.apache.shindig.common.uri.UriBuilder(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e791" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromUriAndModify()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e792" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromUriAndModify()" target="org.apache.shindig.common.uri.UriBuilder.addQueryParameter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e793" source="org.apache.shindig.common.uri.UriBuilderTest.constructFromUriAndModify()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e794" source="org.apache.shindig.common.uri.UriBuilderTest.equalsAndHashCodeOk()" target="org.apache.shindig.common.uri.UriBuilder.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e795" source="org.apache.shindig.common.uri.UriBuilderTest.equalsAndHashCodeOk()" target="org.apache.shindig.common.uri.UriBuilder(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e796" source="org.apache.shindig.common.uri.UriBuilderTest.equalsAndHashCodeOk()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e797" source="org.apache.shindig.common.uri.UriBuilderTest.equalsAndHashCodeOk()" target="org.apache.shindig.common.uri.UriBuilder.hashCode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e798" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e799" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e800" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e801" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e802" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.addFragmentParameter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e803" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e804" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e805" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.getFragment()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e806" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentStringIsUnescaped()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e807" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentStringIsUnescaped()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e808" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentStringIsUnescaped()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e809" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentStringIsUnescaped()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e810" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentStringIsUnescaped()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e811" source="org.apache.shindig.common.uri.UriBuilderTest.fragmentStringIsUnescaped()" target="org.apache.shindig.common.uri.UriBuilder.getFragmentParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e812" source="org.apache.shindig.common.uri.UriBuilderTest.hostRelativePaths()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e813" source="org.apache.shindig.common.uri.UriBuilderTest.hostRelativePaths()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e814" source="org.apache.shindig.common.uri.UriBuilderTest.hostRelativePaths()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e815" source="org.apache.shindig.common.uri.UriBuilderTest.hostRelativePaths()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e816" source="org.apache.shindig.common.uri.UriBuilderTest.hostRelativePaths()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e817" source="org.apache.shindig.common.uri.UriBuilderTest.iterableFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e818" source="org.apache.shindig.common.uri.UriBuilderTest.iterableFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e819" source="org.apache.shindig.common.uri.UriBuilderTest.iterableFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e820" source="org.apache.shindig.common.uri.UriBuilderTest.iterableFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e821" source="org.apache.shindig.common.uri.UriBuilderTest.iterableFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.putFragmentParameter(java.lang.String,java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e822" source="org.apache.shindig.common.uri.UriBuilderTest.iterableFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e823" source="org.apache.shindig.common.uri.UriBuilderTest.iterableFragmentParameters()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e824" source="org.apache.shindig.common.uri.UriBuilderTest.iterableQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e825" source="org.apache.shindig.common.uri.UriBuilderTest.iterableQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e826" source="org.apache.shindig.common.uri.UriBuilderTest.iterableQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e827" source="org.apache.shindig.common.uri.UriBuilderTest.iterableQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e828" source="org.apache.shindig.common.uri.UriBuilderTest.iterableQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder.putQueryParameter(java.lang.String,java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e829" source="org.apache.shindig.common.uri.UriBuilderTest.iterableQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e830" source="org.apache.shindig.common.uri.UriBuilderTest.iterableQueryParameters()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e831" source="org.apache.shindig.common.uri.UriBuilderTest.justAuthorityAndPath()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e832" source="org.apache.shindig.common.uri.UriBuilderTest.justAuthorityAndPath()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e833" source="org.apache.shindig.common.uri.UriBuilderTest.justAuthorityAndPath()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e834" source="org.apache.shindig.common.uri.UriBuilderTest.justAuthorityAndPath()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e835" source="org.apache.shindig.common.uri.UriBuilderTest.justFragment()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e836" source="org.apache.shindig.common.uri.UriBuilderTest.justFragment()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e837" source="org.apache.shindig.common.uri.UriBuilderTest.justFragment()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e838" source="org.apache.shindig.common.uri.UriBuilderTest.justPath()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e839" source="org.apache.shindig.common.uri.UriBuilderTest.justPath()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e840" source="org.apache.shindig.common.uri.UriBuilderTest.justPath()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e841" source="org.apache.shindig.common.uri.UriBuilderTest.justQuery()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e842" source="org.apache.shindig.common.uri.UriBuilderTest.justQuery()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e843" source="org.apache.shindig.common.uri.UriBuilderTest.justQuery()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e844" source="org.apache.shindig.common.uri.UriBuilderTest.justSchemeAndAuthority()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e845" source="org.apache.shindig.common.uri.UriBuilderTest.justSchemeAndAuthority()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e846" source="org.apache.shindig.common.uri.UriBuilderTest.justSchemeAndAuthority()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e847" source="org.apache.shindig.common.uri.UriBuilderTest.justSchemeAndAuthority()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e848" source="org.apache.shindig.common.uri.UriBuilderTest.noAuthorityUsed()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e849" source="org.apache.shindig.common.uri.UriBuilderTest.noAuthorityUsed()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e850" source="org.apache.shindig.common.uri.UriBuilderTest.noAuthorityUsed()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e851" source="org.apache.shindig.common.uri.UriBuilderTest.noAuthorityUsed()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e852" source="org.apache.shindig.common.uri.UriBuilderTest.noAuthorityUsed()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e853" source="org.apache.shindig.common.uri.UriBuilderTest.noAuthorityUsed()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e854" source="org.apache.shindig.common.uri.UriBuilderTest.noFragmentUsed()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e855" source="org.apache.shindig.common.uri.UriBuilderTest.noFragmentUsed()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e856" source="org.apache.shindig.common.uri.UriBuilderTest.noFragmentUsed()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e857" source="org.apache.shindig.common.uri.UriBuilderTest.noFragmentUsed()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e858" source="org.apache.shindig.common.uri.UriBuilderTest.noFragmentUsed()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e859" source="org.apache.shindig.common.uri.UriBuilderTest.noFragmentUsed()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e860" source="org.apache.shindig.common.uri.UriBuilderTest.noPathNoHostNoAuthority()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e861" source="org.apache.shindig.common.uri.UriBuilderTest.noPathNoHostNoAuthority()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e862" source="org.apache.shindig.common.uri.UriBuilderTest.noPathNoHostNoAuthority()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e863" source="org.apache.shindig.common.uri.UriBuilderTest.noPathNoHostNoAuthority()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e864" source="org.apache.shindig.common.uri.UriBuilderTest.noPathUsed()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e865" source="org.apache.shindig.common.uri.UriBuilderTest.noPathUsed()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e866" source="org.apache.shindig.common.uri.UriBuilderTest.noPathUsed()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e867" source="org.apache.shindig.common.uri.UriBuilderTest.noPathUsed()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e868" source="org.apache.shindig.common.uri.UriBuilderTest.noPathUsed()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e869" source="org.apache.shindig.common.uri.UriBuilderTest.noPathUsed()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e870" source="org.apache.shindig.common.uri.UriBuilderTest.noQueryUsed()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e871" source="org.apache.shindig.common.uri.UriBuilderTest.noQueryUsed()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e872" source="org.apache.shindig.common.uri.UriBuilderTest.noQueryUsed()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e873" source="org.apache.shindig.common.uri.UriBuilderTest.noQueryUsed()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e874" source="org.apache.shindig.common.uri.UriBuilderTest.noQueryUsed()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e875" source="org.apache.shindig.common.uri.UriBuilderTest.noQueryUsed()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e876" source="org.apache.shindig.common.uri.UriBuilderTest.noSchemeUsed()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e877" source="org.apache.shindig.common.uri.UriBuilderTest.noSchemeUsed()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e878" source="org.apache.shindig.common.uri.UriBuilderTest.noSchemeUsed()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e879" source="org.apache.shindig.common.uri.UriBuilderTest.noSchemeUsed()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e880" source="org.apache.shindig.common.uri.UriBuilderTest.noSchemeUsed()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e881" source="org.apache.shindig.common.uri.UriBuilderTest.noSchemeUsed()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e882" source="org.apache.shindig.common.uri.UriBuilderTest.parse()" target="org.apache.shindig.common.uri.UriBuilder.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e883" source="org.apache.shindig.common.uri.UriBuilderTest.parse()" target="org.apache.shindig.common.uri.UriBuilder.getScheme()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e884" source="org.apache.shindig.common.uri.UriBuilderTest.parse()" target="org.apache.shindig.common.uri.UriBuilder.getAuthority()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e885" source="org.apache.shindig.common.uri.UriBuilderTest.parse()" target="org.apache.shindig.common.uri.UriBuilder.getPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e886" source="org.apache.shindig.common.uri.UriBuilderTest.parse()" target="org.apache.shindig.common.uri.UriBuilder.getQuery()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e887" source="org.apache.shindig.common.uri.UriBuilderTest.parse()" target="org.apache.shindig.common.uri.UriBuilder.getFragment()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e888" source="org.apache.shindig.common.uri.UriBuilderTest.parse()" target="org.apache.shindig.common.uri.UriBuilder.getQueryParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e889" source="org.apache.shindig.common.uri.UriBuilderTest.parse()" target="org.apache.shindig.common.uri.UriBuilder.getQueryParameters(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e890" source="org.apache.shindig.common.uri.UriBuilderTest.queryParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e891" source="org.apache.shindig.common.uri.UriBuilderTest.queryParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e892" source="org.apache.shindig.common.uri.UriBuilderTest.queryParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e893" source="org.apache.shindig.common.uri.UriBuilderTest.queryParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e894" source="org.apache.shindig.common.uri.UriBuilderTest.queryParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.addQueryParameter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e895" source="org.apache.shindig.common.uri.UriBuilderTest.queryParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e896" source="org.apache.shindig.common.uri.UriBuilderTest.queryParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e897" source="org.apache.shindig.common.uri.UriBuilderTest.queryParamsAreEscaped()" target="org.apache.shindig.common.uri.UriBuilder.getQuery()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e898" source="org.apache.shindig.common.uri.UriBuilderTest.queryStringIsUnescaped()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e899" source="org.apache.shindig.common.uri.UriBuilderTest.queryStringIsUnescaped()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e900" source="org.apache.shindig.common.uri.UriBuilderTest.queryStringIsUnescaped()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e901" source="org.apache.shindig.common.uri.UriBuilderTest.queryStringIsUnescaped()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e902" source="org.apache.shindig.common.uri.UriBuilderTest.queryStringIsUnescaped()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e903" source="org.apache.shindig.common.uri.UriBuilderTest.queryStringIsUnescaped()" target="org.apache.shindig.common.uri.UriBuilder.getQueryParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e904" source="org.apache.shindig.common.uri.UriBuilderTest.relativePaths()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e905" source="org.apache.shindig.common.uri.UriBuilderTest.relativePaths()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e906" source="org.apache.shindig.common.uri.UriBuilderTest.relativePaths()" target="org.apache.shindig.common.uri.UriBuilder.setQuery(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e907" source="org.apache.shindig.common.uri.UriBuilderTest.relativePaths()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e908" source="org.apache.shindig.common.uri.UriBuilderTest.relativePaths()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e909" source="org.apache.shindig.common.uri.UriBuilderTest.removeFragmentParameter()" target="org.apache.shindig.common.uri.UriBuilder.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e910" source="org.apache.shindig.common.uri.UriBuilderTest.removeFragmentParameter()" target="org.apache.shindig.common.uri.UriBuilder.removeFragmentParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e911" source="org.apache.shindig.common.uri.UriBuilderTest.removeFragmentParameter()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e912" source="org.apache.shindig.common.uri.UriBuilderTest.removeQueryParameter()" target="org.apache.shindig.common.uri.UriBuilder.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e913" source="org.apache.shindig.common.uri.UriBuilderTest.removeQueryParameter()" target="org.apache.shindig.common.uri.UriBuilder.removeQueryParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e914" source="org.apache.shindig.common.uri.UriBuilderTest.removeQueryParameter()" target="org.apache.shindig.common.uri.UriBuilder.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e915" source="org.apache.shindig.common.uri.UriTest.absoluteUrlIsAbsolute()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e916" source="org.apache.shindig.common.uri.UriTest.absoluteUrlIsAbsolute()" target="org.apache.shindig.common.uri.Uri.isAbsolute()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e917" source="org.apache.shindig.common.uri.UriTest.equalsAndHashCodeOk()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e918" source="org.apache.shindig.common.uri.UriTest.equalsAndHashCodeOk()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e919" source="org.apache.shindig.common.uri.UriTest.equalsAndHashCodeOk()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e920" source="org.apache.shindig.common.uri.UriTest.equalsAndHashCodeOk()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e921" source="org.apache.shindig.common.uri.UriTest.equalsAndHashCodeOk()" target="org.apache.shindig.common.uri.UriBuilder.setPath(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e922" source="org.apache.shindig.common.uri.UriTest.equalsAndHashCodeOk()" target="org.apache.shindig.common.uri.UriBuilder.addQueryParameter(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e923" source="org.apache.shindig.common.uri.UriTest.equalsAndHashCodeOk()" target="org.apache.shindig.common.uri.UriBuilder.setFragment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e924" source="org.apache.shindig.common.uri.UriTest.equalsAndHashCodeOk()" target="org.apache.shindig.common.uri.UriBuilder.toUri()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e925" source="org.apache.shindig.common.uri.UriTest.equalsAndHashCodeOk()" target="org.apache.shindig.common.uri.Uri.hashCode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e926" source="org.apache.shindig.common.uri.UriTest.fromJavaUri()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e927" source="org.apache.shindig.common.uri.UriTest.fromJavaUri()" target="org.apache.shindig.common.uri.Uri.fromJavaUri(java.net.URI)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e928" source="org.apache.shindig.common.uri.UriTest.parseFull()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e929" source="org.apache.shindig.common.uri.UriTest.parseFull()" target="org.apache.shindig.common.uri.Uri.getScheme()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e930" source="org.apache.shindig.common.uri.UriTest.parseFull()" target="org.apache.shindig.common.uri.Uri.getAuthority()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e931" source="org.apache.shindig.common.uri.UriTest.parseFull()" target="org.apache.shindig.common.uri.Uri.getPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e932" source="org.apache.shindig.common.uri.UriTest.parseFull()" target="org.apache.shindig.common.uri.Uri.getQuery()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e933" source="org.apache.shindig.common.uri.UriTest.parseFull()" target="org.apache.shindig.common.uri.Uri.getQueryParameters(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e934" source="org.apache.shindig.common.uri.UriTest.parseFull()" target="org.apache.shindig.common.uri.Uri.getQueryParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e935" source="org.apache.shindig.common.uri.UriTest.parseFull()" target="org.apache.shindig.common.uri.Uri.getFragment()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e936" source="org.apache.shindig.common.uri.UriTest.parseFull()" target="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e937" source="org.apache.shindig.common.uri.UriTest.parseInvalidHost()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e938" source="org.apache.shindig.common.uri.UriTest.parseInvalidPath()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e939" source="org.apache.shindig.common.uri.UriTest.parseInvalidScheme()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e940" source="org.apache.shindig.common.uri.UriTest.parseNoAuthority()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e941" source="org.apache.shindig.common.uri.UriTest.parseNoAuthority()" target="org.apache.shindig.common.uri.Uri.getScheme()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e942" source="org.apache.shindig.common.uri.UriTest.parseNoAuthority()" target="org.apache.shindig.common.uri.Uri.getAuthority()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e943" source="org.apache.shindig.common.uri.UriTest.parseNoAuthority()" target="org.apache.shindig.common.uri.Uri.getPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e944" source="org.apache.shindig.common.uri.UriTest.parseNoAuthority()" target="org.apache.shindig.common.uri.Uri.getQuery()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e945" source="org.apache.shindig.common.uri.UriTest.parseNoAuthority()" target="org.apache.shindig.common.uri.Uri.getQueryParameters(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e946" source="org.apache.shindig.common.uri.UriTest.parseNoAuthority()" target="org.apache.shindig.common.uri.Uri.getQueryParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e947" source="org.apache.shindig.common.uri.UriTest.parseNoAuthority()" target="org.apache.shindig.common.uri.Uri.getFragment()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e948" source="org.apache.shindig.common.uri.UriTest.parseNoFragment()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e949" source="org.apache.shindig.common.uri.UriTest.parseNoFragment()" target="org.apache.shindig.common.uri.Uri.getScheme()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e950" source="org.apache.shindig.common.uri.UriTest.parseNoFragment()" target="org.apache.shindig.common.uri.Uri.getAuthority()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e951" source="org.apache.shindig.common.uri.UriTest.parseNoFragment()" target="org.apache.shindig.common.uri.Uri.getPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e952" source="org.apache.shindig.common.uri.UriTest.parseNoFragment()" target="org.apache.shindig.common.uri.Uri.getQuery()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e953" source="org.apache.shindig.common.uri.UriTest.parseNoFragment()" target="org.apache.shindig.common.uri.Uri.getFragment()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e954" source="org.apache.shindig.common.uri.UriTest.parseNoPath()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e955" source="org.apache.shindig.common.uri.UriTest.parseNoPath()" target="org.apache.shindig.common.uri.Uri.getScheme()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e956" source="org.apache.shindig.common.uri.UriTest.parseNoPath()" target="org.apache.shindig.common.uri.Uri.getAuthority()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e957" source="org.apache.shindig.common.uri.UriTest.parseNoPath()" target="org.apache.shindig.common.uri.Uri.getPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e958" source="org.apache.shindig.common.uri.UriTest.parseNoPath()" target="org.apache.shindig.common.uri.Uri.getQuery()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e959" source="org.apache.shindig.common.uri.UriTest.parseNoPath()" target="org.apache.shindig.common.uri.Uri.getQueryParameters(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e960" source="org.apache.shindig.common.uri.UriTest.parseNoPath()" target="org.apache.shindig.common.uri.Uri.getQueryParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e961" source="org.apache.shindig.common.uri.UriTest.parseNoPath()" target="org.apache.shindig.common.uri.Uri.getFragment()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e962" source="org.apache.shindig.common.uri.UriTest.parseNoQuery()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e963" source="org.apache.shindig.common.uri.UriTest.parseNoQuery()" target="org.apache.shindig.common.uri.Uri.getScheme()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e964" source="org.apache.shindig.common.uri.UriTest.parseNoQuery()" target="org.apache.shindig.common.uri.Uri.getAuthority()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e965" source="org.apache.shindig.common.uri.UriTest.parseNoQuery()" target="org.apache.shindig.common.uri.Uri.getPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e966" source="org.apache.shindig.common.uri.UriTest.parseNoQuery()" target="org.apache.shindig.common.uri.Uri.getQuery()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e967" source="org.apache.shindig.common.uri.UriTest.parseNoQuery()" target="org.apache.shindig.common.uri.Uri.getQueryParameters()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e968" source="org.apache.shindig.common.uri.UriTest.parseNoQuery()" target="org.apache.shindig.common.uri.Uri.getQueryParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e969" source="org.apache.shindig.common.uri.UriTest.parseNoQuery()" target="org.apache.shindig.common.uri.Uri.getFragment()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e970" source="org.apache.shindig.common.uri.UriTest.parseNoScheme()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e971" source="org.apache.shindig.common.uri.UriTest.parseNoScheme()" target="org.apache.shindig.common.uri.Uri.getScheme()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e972" source="org.apache.shindig.common.uri.UriTest.parseNoScheme()" target="org.apache.shindig.common.uri.Uri.getAuthority()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e973" source="org.apache.shindig.common.uri.UriTest.parseNoScheme()" target="org.apache.shindig.common.uri.Uri.getPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e974" source="org.apache.shindig.common.uri.UriTest.parseNoScheme()" target="org.apache.shindig.common.uri.Uri.getQuery()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e975" source="org.apache.shindig.common.uri.UriTest.parseNoScheme()" target="org.apache.shindig.common.uri.Uri.getQueryParameters(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e976" source="org.apache.shindig.common.uri.UriTest.parseNoScheme()" target="org.apache.shindig.common.uri.Uri.getQueryParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e977" source="org.apache.shindig.common.uri.UriTest.parseNoScheme()" target="org.apache.shindig.common.uri.Uri.getFragment()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e978" source="org.apache.shindig.common.uri.UriTest.parseWithSpecialCharacters()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e979" source="org.apache.shindig.common.uri.UriTest.parseWithSpecialCharacters()" target="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e980" source="org.apache.shindig.common.uri.UriTest.relativeUrlIsNotAbsolute()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e981" source="org.apache.shindig.common.uri.UriTest.relativeUrlIsNotAbsolute()" target="org.apache.shindig.common.uri.Uri.isAbsolute()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e982" source="org.apache.shindig.common.uri.UriTest.resolveAbsolute()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e983" source="org.apache.shindig.common.uri.UriTest.resolveAbsolute()" target="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e984" source="org.apache.shindig.common.uri.UriTest.resolveAbsolute()" target="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e985" source="org.apache.shindig.common.uri.UriTest.resolveAuthority()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e986" source="org.apache.shindig.common.uri.UriTest.resolveAuthority()" target="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e987" source="org.apache.shindig.common.uri.UriTest.resolveAuthority()" target="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e988" source="org.apache.shindig.common.uri.UriTest.resolveFragment()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e989" source="org.apache.shindig.common.uri.UriTest.resolveFragment()" target="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e990" source="org.apache.shindig.common.uri.UriTest.resolveFragment()" target="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e991" source="org.apache.shindig.common.uri.UriTest.resolvePathAbsolute()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e992" source="org.apache.shindig.common.uri.UriTest.resolvePathAbsolute()" target="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e993" source="org.apache.shindig.common.uri.UriTest.resolvePathAbsolute()" target="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e994" source="org.apache.shindig.common.uri.UriTest.resolvePathIncludesSubdirs()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e995" source="org.apache.shindig.common.uri.UriTest.resolvePathIncludesSubdirs()" target="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e996" source="org.apache.shindig.common.uri.UriTest.resolvePathIncludesSubdirs()" target="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e997" source="org.apache.shindig.common.uri.UriTest.resolvePathRelative()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e998" source="org.apache.shindig.common.uri.UriTest.resolvePathRelative()" target="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e999" source="org.apache.shindig.common.uri.UriTest.resolvePathRelative()" target="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1000" source="org.apache.shindig.common.uri.UriTest.resolvePathRelativeToNullPath()" target="org.apache.shindig.common.uri.UriBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1001" source="org.apache.shindig.common.uri.UriTest.resolvePathRelativeToNullPath()" target="org.apache.shindig.common.uri.UriBuilder.setScheme(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1002" source="org.apache.shindig.common.uri.UriTest.resolvePathRelativeToNullPath()" target="org.apache.shindig.common.uri.UriBuilder.setAuthority(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1003" source="org.apache.shindig.common.uri.UriTest.resolvePathRelativeToNullPath()" target="org.apache.shindig.common.uri.UriBuilder.toUri()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1004" source="org.apache.shindig.common.uri.UriTest.resolvePathRelativeToNullPath()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1005" source="org.apache.shindig.common.uri.UriTest.resolvePathRelativeToNullPath()" target="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1006" source="org.apache.shindig.common.uri.UriTest.resolvePathRelativeToNullPath()" target="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1007" source="org.apache.shindig.common.uri.UriTest.resolvePathSubdirsExtendsBeyondRoot()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1008" source="org.apache.shindig.common.uri.UriTest.resolvePathSubdirsExtendsBeyondRoot()" target="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1009" source="org.apache.shindig.common.uri.UriTest.resolvePathSubdirsExtendsBeyondRoot()" target="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1010" source="org.apache.shindig.common.uri.UriTest.resolveQuery()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1011" source="org.apache.shindig.common.uri.UriTest.resolveQuery()" target="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1012" source="org.apache.shindig.common.uri.UriTest.resolveQuery()" target="org.apache.shindig.common.uri.Uri.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1013" source="org.apache.shindig.common.uri.UriTest.toJavaUri()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1014" source="org.apache.shindig.common.uri.UriTest.toJavaUri()" target="org.apache.shindig.common.uri.Uri.toJavaUri()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1015" source="org.apache.shindig.common.uri.UriTest.toJavaUriWithSpecialChars()" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1016" source="org.apache.shindig.common.uri.UriTest.toJavaUriWithSpecialChars()" target="org.apache.shindig.common.uri.Uri.toJavaUri()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1017" source="org.apache.shindig.common.servlet.BasicAuthority.getAuthority()" target="org.apache.shindig.common.servlet.BasicAuthority.getServerHostname()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1018" source="org.apache.shindig.common.servlet.BasicAuthority.getAuthority()" target="org.apache.shindig.common.servlet.BasicAuthority.getServerPort()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1019" source="org.apache.shindig.common.servlet.BasicAuthority.getOrigin()" target="org.apache.shindig.common.servlet.BasicAuthority.getScheme()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1020" source="org.apache.shindig.common.servlet.BasicAuthority.getOrigin()" target="org.apache.shindig.common.servlet.BasicAuthority.getAuthority()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1021" source="org.apache.shindig.common.servlet.BasicAuthority.getScheme()" target="org.apache.shindig.common.servlet.ServletRequestContext.getScheme()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1022" source="org.apache.shindig.common.servlet.BasicAuthority.getServerHostname()" target="org.apache.shindig.common.servlet.ServletRequestContext.getHost()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1023" source="org.apache.shindig.common.servlet.BasicAuthority.getServerPort()" target="org.apache.shindig.common.servlet.ServletRequestContext.getPort()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1024" source="org.apache.shindig.common.servlet.BasicAuthorityTest()" target="org.apache.shindig.common.EasyMockTestCase()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1025" source="org.apache.shindig.common.servlet.BasicAuthorityTest.testBasicAuthorityWorks()" target="org.apache.shindig.common.servlet.BasicAuthority(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1026" source="org.apache.shindig.common.servlet.BasicAuthorityTest.testBasicAuthorityWorks()" target="org.apache.shindig.common.servlet.BasicAuthority.getAuthority()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1027" source="org.apache.shindig.common.servlet.BasicAuthorityTest.testDefaultHostAndPort()" target="org.apache.shindig.common.servlet.BasicAuthority(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1028" source="org.apache.shindig.common.servlet.BasicAuthorityTest.testDefaultHostAndPort()" target="org.apache.shindig.common.servlet.BasicAuthority.getAuthority()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1029" source="org.apache.shindig.common.servlet.BasicAuthorityTest.testJettyHostAndPort()" target="org.apache.shindig.common.servlet.BasicAuthority(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1030" source="org.apache.shindig.common.servlet.BasicAuthorityTest.testJettyHostAndPort()" target="org.apache.shindig.common.servlet.BasicAuthority.getAuthority()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1031" source="org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler.cleanup()" target="org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupCapable.cleanup()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1032" source="org.apache.shindig.common.servlet.GuiceServletContextListener.contextDestroyed(javax.servlet.ServletContextEvent)" target="org.apache.shindig.common.servlet.GuiceServletContextListener$CleanupHandler.cleanup()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1033" source="org.apache.shindig.common.servlet.GuiceServletContextListener.contextInitialized(javax.servlet.ServletContextEvent)" target="org.apache.shindig.common.servlet.GuiceServletContextListener.setSystemProperties(javax.servlet.ServletContext)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1034" source="org.apache.shindig.common.servlet.HostFilter.doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" target="org.apache.shindig.common.servlet.ServletRequestContext.setRequestInfo(javax.servlet.ServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1035" source="org.apache.shindig.common.servlet.HttpServletResponseRecorder.getResponseAsString()" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder.getWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1036" source="org.apache.shindig.common.servlet.HttpServletResponseRecorder.getOutputStream()" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1037" source="org.apache.shindig.common.servlet.HttpServletResponseRecorder.addDateHeader(java.lang.String,long)" target="org.apache.shindig.common.util.DateUtil.formatRfc1123Date(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1038" source="org.apache.shindig.common.servlet.HttpServletResponseRecorder.sendError(int,java.lang.String)" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder.getWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1039" source="org.apache.shindig.common.servlet.HttpServletResponseRecorder.sendRedirect(java.lang.String)" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder.setStatus(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1040" source="org.apache.shindig.common.servlet.HttpServletResponseRecorder.sendRedirect(java.lang.String)" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder.setHeader(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1041" source="org.apache.shindig.common.servlet.HttpServletResponseRecorder.setDateHeader(java.lang.String,long)" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder.addDateHeader(java.lang.String,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1042" source="org.apache.shindig.common.servlet.HttpServletResponseRecorder.setHeader(java.lang.String,java.lang.String)" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder.addHeader(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1043" source="org.apache.shindig.common.servlet.HttpServletResponseRecorder.setStatus(int,java.lang.String)" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder.getWriter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1044" source="org.apache.shindig.common.servlet.HttpServletUserAgentProvider.get()" target="org.apache.shindig.common.servlet.UserAgent$Parser.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1045" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest$PassThroughUAParser.parse(java.lang.String)" target="org.apache.shindig.common.servlet.UserAgent(org.apache.shindig.common.servlet.UserAgent$Browser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1046" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest#parser" target="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest$PassThroughUAParser()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1047" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest()" target="org.apache.shindig.common.EasyMockTestCase()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1048" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testNoRequestGetsNull()" target="org.apache.shindig.common.servlet.HttpServletUserAgentProvider(org.apache.shindig.common.servlet.UserAgent$Parser,com.google.inject.Provider)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1049" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testNoRequestGetsNull()" target="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest$HttpServletRequestProvider(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1050" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testNoRequestGetsNull()" target="org.apache.shindig.common.servlet.HttpServletUserAgentProvider.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1051" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testNoUserAgentGetsNull()" target="org.apache.shindig.common.EasyMockTestCase.mock(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1052" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testNoUserAgentGetsNull()" target="org.apache.shindig.common.EasyMockTestCase.replay()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1053" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testNoUserAgentGetsNull()" target="org.apache.shindig.common.servlet.HttpServletUserAgentProvider(org.apache.shindig.common.servlet.UserAgent$Parser,com.google.inject.Provider)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1054" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testNoUserAgentGetsNull()" target="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest$HttpServletRequestProvider(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1055" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testNoUserAgentGetsNull()" target="org.apache.shindig.common.servlet.HttpServletUserAgentProvider.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1056" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testNoUserAgentGetsNull()" target="org.apache.shindig.common.EasyMockTestCase.verify()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1057" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testProviderWorks()" target="org.apache.shindig.common.EasyMockTestCase.mock(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1058" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testProviderWorks()" target="org.apache.shindig.common.EasyMockTestCase.replay()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1059" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testProviderWorks()" target="org.apache.shindig.common.servlet.HttpServletUserAgentProvider(org.apache.shindig.common.servlet.UserAgent$Parser,com.google.inject.Provider)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1060" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testProviderWorks()" target="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest$HttpServletRequestProvider(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1061" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testProviderWorks()" target="org.apache.shindig.common.servlet.HttpServletUserAgentProvider.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1062" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testProviderWorks()" target="org.apache.shindig.common.servlet.UserAgent.getBrowser()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1063" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testProviderWorks()" target="org.apache.shindig.common.servlet.UserAgent.getVersion()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1064" source="org.apache.shindig.common.servlet.HttpServletUserAgentProviderTest.testProviderWorks()" target="org.apache.shindig.common.EasyMockTestCase.verify()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1065" source="org.apache.shindig.common.servlet.HttpUtil.getCachingHeadersToSet(int,boolean)" target="org.apache.shindig.common.servlet.HttpUtil.getCachingHeadersToSet(int,java.lang.String,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1066" source="org.apache.shindig.common.servlet.HttpUtil.getCachingHeadersToSet(int,java.lang.String,java.lang.String,boolean)" target="org.apache.shindig.common.Pair.of(T1,T2)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1067" source="org.apache.shindig.common.servlet.HttpUtil.getCachingHeadersToSet(int,java.lang.String,java.lang.String,boolean)" target="org.apache.shindig.common.util.DateUtil.formatRfc1123Date(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1068" source="org.apache.shindig.common.servlet.HttpUtil.getCachingHeadersToSet(int,java.lang.String,java.lang.String,boolean)" target="org.apache.shindig.common.util.TimeSource.currentTimeMillis()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1069" source="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1070" source="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,boolean)" target="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1071" source="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,int)" target="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1072" source="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,int,boolean)" target="org.apache.shindig.common.servlet.HttpUtil.getCachingHeadersToSet(int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1073" source="org.apache.shindig.common.servlet.HttpUtil.setNoCache(javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1074" source="org.apache.shindig.common.servlet.HttpUtilTest#timeSource" target="org.apache.shindig.common.util.FakeTimeSource()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1075" source="org.apache.shindig.common.servlet.HttpUtilTest#testStartTime" target="org.apache.shindig.common.util.FakeTimeSource.currentTimeMillis()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1076" source="org.apache.shindig.common.servlet.HttpUtilTest#recorder" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder(javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1077" source="org.apache.shindig.common.servlet.HttpUtilTest.checkCacheControlHeaders(long,org.apache.shindig.common.servlet.HttpServletResponseRecorder,int,boolean)" target="org.apache.shindig.common.util.DateUtil.parseRfc1123Date(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1078" source="org.apache.shindig.common.servlet.HttpUtilTest.checkCacheControlHeaders(long,org.apache.shindig.common.servlet.HttpServletResponseRecorder,int,boolean)" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder.getHeader(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1079" source="org.apache.shindig.common.servlet.HttpUtilTest.testCORSmultiple()" target="org.apache.shindig.common.servlet.HttpUtil.setCORSheader(javax.servlet.http.HttpServletResponse,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1080" source="org.apache.shindig.common.servlet.HttpUtilTest.testCORSnull()" target="org.apache.shindig.common.servlet.HttpUtil.setCORSheader(javax.servlet.http.HttpServletResponse,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1081" source="org.apache.shindig.common.servlet.HttpUtilTest.testCORSnull()" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder.getHeader(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1082" source="org.apache.shindig.common.servlet.HttpUtilTest.testCORSstar()" target="org.apache.shindig.common.servlet.HttpUtil.setCORSheader(javax.servlet.http.HttpServletResponse,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1083" source="org.apache.shindig.common.servlet.HttpUtilTest.testCORSstar()" target="org.apache.shindig.common.servlet.HttpServletResponseRecorder.getHeader(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1084" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeaders()" target="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1085" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeaders()" target="org.apache.shindig.common.servlet.HttpUtilTest.checkCacheControlHeaders(long,org.apache.shindig.common.servlet.HttpServletResponseRecorder,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1086" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeaders()" target="org.apache.shindig.common.servlet.HttpUtil.getDefaultTtl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1087" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersAllowProxy()" target="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1088" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersAllowProxy()" target="org.apache.shindig.common.servlet.HttpUtilTest.checkCacheControlHeaders(long,org.apache.shindig.common.servlet.HttpServletResponseRecorder,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1089" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersAllowProxy()" target="org.apache.shindig.common.servlet.HttpUtil.getDefaultTtl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1090" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersFixedTtl()" target="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1091" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersFixedTtl()" target="org.apache.shindig.common.servlet.HttpUtilTest.checkCacheControlHeaders(long,org.apache.shindig.common.servlet.HttpServletResponseRecorder,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1092" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersNoCache()" target="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1093" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersNoCache()" target="org.apache.shindig.common.servlet.HttpUtilTest.checkCacheControlHeaders(long,org.apache.shindig.common.servlet.HttpServletResponseRecorder,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1094" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersNoProxy()" target="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1095" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersNoProxy()" target="org.apache.shindig.common.servlet.HttpUtilTest.checkCacheControlHeaders(long,org.apache.shindig.common.servlet.HttpServletResponseRecorder,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1096" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersNoProxy()" target="org.apache.shindig.common.servlet.HttpUtil.getDefaultTtl()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1097" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersWithTtlAndNoProxy()" target="org.apache.shindig.common.servlet.HttpUtil.setCachingHeaders(javax.servlet.http.HttpServletResponse,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1098" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetCachingHeadersWithTtlAndNoProxy()" target="org.apache.shindig.common.servlet.HttpUtilTest.checkCacheControlHeaders(long,org.apache.shindig.common.servlet.HttpServletResponseRecorder,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1099" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetNoCche()" target="org.apache.shindig.common.servlet.HttpUtil.setNoCache(javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1100" source="org.apache.shindig.common.servlet.HttpUtilTest.testSetNoCche()" target="org.apache.shindig.common.servlet.HttpUtilTest.checkCacheControlHeaders(long,org.apache.shindig.common.servlet.HttpServletResponseRecorder,int,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1101" source="org.apache.shindig.common.servlet.UserAgent$Browser#MSIE" target="org.apache.shindig.common.servlet.UserAgent$Browser()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1102" source="org.apache.shindig.common.servlet.UserAgent$Browser#FIREFOX" target="org.apache.shindig.common.servlet.UserAgent$Browser()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1103" source="org.apache.shindig.common.servlet.UserAgent$Browser#SAFARI" target="org.apache.shindig.common.servlet.UserAgent$Browser()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1104" source="org.apache.shindig.common.servlet.UserAgent$Browser#WEBKIT" target="org.apache.shindig.common.servlet.UserAgent$Browser()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1105" source="org.apache.shindig.common.servlet.UserAgent$Browser#CHROME" target="org.apache.shindig.common.servlet.UserAgent$Browser()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1106" source="org.apache.shindig.common.servlet.UserAgent$Browser#OPERA" target="org.apache.shindig.common.servlet.UserAgent$Browser()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1107" source="org.apache.shindig.common.servlet.UserAgent$Browser#HTML5" target="org.apache.shindig.common.servlet.UserAgent$Browser()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1108" source="org.apache.shindig.common.servlet.UserAgent$Browser#OTHER" target="org.apache.shindig.common.servlet.UserAgent$Browser()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1109" source="org.apache.shindig.common.servlet.UserAgent.getVersionNumber()" target="org.apache.shindig.common.servlet.UserAgent.getVersion()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1110" source="org.apache.shindig.common.servlet.UserAgentTest.getUaEntry(java.lang.String)" target="org.apache.shindig.common.servlet.UserAgent(org.apache.shindig.common.servlet.UserAgent$Browser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1111" source="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingAlphaSuffix()" target="org.apache.shindig.common.servlet.UserAgentTest.getUaEntry(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1112" source="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingAlphaSuffix()" target="org.apache.shindig.common.servlet.UserAgent.getVersionNumber()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1113" source="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingEmbeddedInTheMiddle()" target="org.apache.shindig.common.servlet.UserAgentTest.getUaEntry(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1114" source="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingEmbeddedInTheMiddle()" target="org.apache.shindig.common.servlet.UserAgent.getVersionNumber()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1115" source="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingMultiPart()" target="org.apache.shindig.common.servlet.UserAgentTest.getUaEntry(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1116" source="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingMultiPart()" target="org.apache.shindig.common.servlet.UserAgent.getVersionNumber()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1117" source="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingNoMatch()" target="org.apache.shindig.common.servlet.UserAgentTest.getUaEntry(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1118" source="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingNoMatch()" target="org.apache.shindig.common.servlet.UserAgent.getVersionNumber()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1119" source="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingStandard()" target="org.apache.shindig.common.servlet.UserAgentTest.getUaEntry(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1120" source="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingStandard()" target="org.apache.shindig.common.servlet.UserAgent.getVersionNumber()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1121" source="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingStandardDecimal()" target="org.apache.shindig.common.servlet.UserAgentTest.getUaEntry(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1122" source="org.apache.shindig.common.servlet.UserAgentTest.testVersionNumberParsingStandardDecimal()" target="org.apache.shindig.common.servlet.UserAgent.getVersionNumber()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1123" source="org.apache.shindig.common.xml.DomUtil.getElementsByTagNameCaseInsensitive(org.w3c.dom.Document,java.util.Set)" target="org.apache.shindig.common.xml.DomUtil$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1124" source="org.apache.shindig.common.xml.DomUtilTest.getElementsByTagNameCaseInsensitive()" target="org.apache.shindig.common.xml.XmlUtil.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1125" source="org.apache.shindig.common.xml.DomUtilTest.getElementsByTagNameCaseInsensitive()" target="org.apache.shindig.common.xml.DomUtil.getElementsByTagNameCaseInsensitive(org.w3c.dom.Document,java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1126" source="org.apache.shindig.common.xml.DomUtilTest.getFirstNamedChildNode()" target="org.apache.shindig.common.xml.XmlUtil.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1127" source="org.apache.shindig.common.xml.DomUtilTest.getFirstNamedChildNode()" target="org.apache.shindig.common.xml.DomUtil.getFirstNamedChildNode(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1128" source="org.apache.shindig.common.xml.DomUtilTest.getLastNamedChildNode()" target="org.apache.shindig.common.xml.XmlUtil.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1129" source="org.apache.shindig.common.xml.DomUtilTest.getLastNamedChildNode()" target="org.apache.shindig.common.xml.DomUtil.getLastNamedChildNode(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1130" source="org.apache.shindig.common.xml.XmlUtil#ERROR_HANDLER" target="org.apache.shindig.common.xml.XmlUtil$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1131" source="org.apache.shindig.common.xml.XmlUtil#REUSABLE_BUILDER" target="org.apache.shindig.common.xml.XmlUtil$2()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1132" source="org.apache.shindig.common.xml.XmlUtil.getBoolAttribute(org.w3c.dom.Node,java.lang.String)" target="org.apache.shindig.common.xml.XmlUtil.getBoolAttribute(org.w3c.dom.Node,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1133" source="org.apache.shindig.common.xml.XmlUtil.getBoolAttribute(org.w3c.dom.Node,java.lang.String,boolean)" target="org.apache.shindig.common.xml.XmlUtil.getAttribute(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1134" source="org.apache.shindig.common.xml.XmlUtil.getIntAttribute(org.w3c.dom.Node,java.lang.String)" target="org.apache.shindig.common.xml.XmlUtil.getIntAttribute(org.w3c.dom.Node,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1135" source="org.apache.shindig.common.xml.XmlUtil.getIntAttribute(org.w3c.dom.Node,java.lang.String,int)" target="org.apache.shindig.common.xml.XmlUtil.getAttribute(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1136" source="org.apache.shindig.common.xml.XmlUtil.getAttribute(org.w3c.dom.Node,java.lang.String)" target="org.apache.shindig.common.xml.XmlUtil.getAttribute(org.w3c.dom.Node,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1137" source="org.apache.shindig.common.xml.XmlUtil.getHttpUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.xml.XmlUtil.getHttpUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri,org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1138" source="org.apache.shindig.common.xml.XmlUtil.getHttpUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri,org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.xml.XmlUtil.getUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1139" source="org.apache.shindig.common.xml.XmlUtil.getHttpUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri,org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.Uri.resolve(org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1140" source="org.apache.shindig.common.xml.XmlUtil.getHttpUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri,org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.Uri.getScheme()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1141" source="org.apache.shindig.common.xml.XmlUtil.getUriAttribute(org.w3c.dom.Node,java.lang.String)" target="org.apache.shindig.common.xml.XmlUtil.getUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1142" source="org.apache.shindig.common.xml.XmlUtil.getUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.xml.XmlUtil.getAttribute(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1143" source="org.apache.shindig.common.xml.XmlUtil.getUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri)" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1144" source="org.apache.shindig.common.xml.XmlUtil.parse(java.lang.String)" target="org.apache.shindig.common.xml.XmlUtil.getBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1145" source="org.apache.shindig.common.xml.XmlUtil.parse(java.lang.String)" target="org.apache.shindig.common.xml.XmlException(java.lang.String,java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1146" source="org.apache.shindig.common.xml.XmlUtil.parse(java.lang.String)" target="org.apache.shindig.common.xml.XmlException(java.lang.Exception)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1147" source="org.apache.shindig.common.xml.XmlUtil.parseSilent(java.lang.String)" target="org.apache.shindig.common.xml.XmlUtil.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1148" source="org.apache.shindig.common.xml.XmlUtilTest#URI_VALUE" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1149" source="org.apache.shindig.common.xml.XmlUtilTest#HTTPS_URI_VALUE" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1150" source="org.apache.shindig.common.xml.XmlUtilTest#FTP_URI_VALUE" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1151" source="org.apache.shindig.common.xml.XmlUtilTest.getAttribute()" target="org.apache.shindig.common.xml.XmlUtil.getAttribute(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1152" source="org.apache.shindig.common.xml.XmlUtilTest.getAttribute()" target="org.apache.shindig.common.xml.XmlUtil.getAttribute(org.w3c.dom.Node,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1153" source="org.apache.shindig.common.xml.XmlUtilTest.getBoolAttribute()" target="org.apache.shindig.common.xml.XmlUtil.getBoolAttribute(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1154" source="org.apache.shindig.common.xml.XmlUtilTest.getBoolAttribute()" target="org.apache.shindig.common.xml.XmlUtil.getBoolAttribute(org.w3c.dom.Node,java.lang.String,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1155" source="org.apache.shindig.common.xml.XmlUtilTest.getIntAttribute()" target="org.apache.shindig.common.xml.XmlUtil.getIntAttribute(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1156" source="org.apache.shindig.common.xml.XmlUtilTest.getIntAttribute()" target="org.apache.shindig.common.xml.XmlUtil.getIntAttribute(org.w3c.dom.Node,java.lang.String,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1157" source="org.apache.shindig.common.xml.XmlUtilTest.getUriAttribute()" target="org.apache.shindig.common.xml.XmlUtil.getUriAttribute(org.w3c.dom.Node,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1158" source="org.apache.shindig.common.xml.XmlUtilTest.getUriAttribute()" target="org.apache.shindig.common.xml.XmlUtil.getUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1159" source="org.apache.shindig.common.xml.XmlUtilTest.makeElement()" target="org.apache.shindig.common.xml.XmlUtil.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1160" source="org.apache.shindig.common.xml.XmlUtilTest.parseBadXmlThrows()" target="org.apache.shindig.common.xml.XmlUtil.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1161" source="org.apache.shindig.common.xml.XmlUtilTest.testHttpUriAttribute()" target="org.apache.shindig.common.xml.XmlUtil.getHttpUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1162" source="org.apache.shindig.common.xml.XmlUtilTest.testHttpUriAttribute()" target="org.apache.shindig.common.xml.XmlUtil.getHttpUriAttribute(org.w3c.dom.Node,java.lang.String,org.apache.shindig.common.uri.Uri,org.apache.shindig.common.uri.Uri)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1163" source="org.apache.shindig.common.util.Base32#ENCODER" target="org.apache.shindig.common.util.StringEncoding(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1164" source="org.apache.shindig.common.util.Base32.decode(byte[])" target="org.apache.shindig.common.util.Base32.decodeBase32(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1165" source="org.apache.shindig.common.util.Base32.decodeBase32(byte[])" target="org.apache.shindig.common.util.StringEncoding.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1166" source="org.apache.shindig.common.util.Base32.encode(byte[])" target="org.apache.shindig.common.util.Base32.encodeBase32(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1167" source="org.apache.shindig.common.util.Base32.encodeBase32(byte[])" target="org.apache.shindig.common.util.StringEncoding.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1168" source="org.apache.shindig.common.util.Base32.decode(java.lang.Object)" target="org.apache.shindig.common.util.Base32.decodeBase32(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1169" source="org.apache.shindig.common.util.Base32.encode(java.lang.Object)" target="org.apache.shindig.common.util.Base32.encodeBase32(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1170" source="org.apache.shindig.common.util.CharsetUtilTest.testGetUtf8String()" target="org.apache.shindig.common.util.CharsetUtil.getUtf8Bytes(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1171" source="org.apache.shindig.common.util.CharsetUtilTest.testGetUtf8String()" target="org.apache.shindig.common.util.CharsetUtilTest.testStringOfLength(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1172" source="org.apache.shindig.common.util.CharsetUtilTest.testLatin1()" target="org.apache.shindig.common.util.CharsetUtil.getUtf8Bytes(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1173" source="org.apache.shindig.common.util.CharsetUtilTest.testStringOfLength(int)" target="org.apache.shindig.common.util.CharsetUtil.getUtf8Bytes(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1174" source="org.apache.shindig.common.util.DateUtil.formatIso8601Date(java.util.Date)" target="org.apache.shindig.common.util.DateUtil.formatIso8601Date(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1175" source="org.apache.shindig.common.util.DateUtil.formatRfc1123Date(java.util.Date)" target="org.apache.shindig.common.util.DateUtil.formatRfc1123Date(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1176" source="org.apache.shindig.common.util.DateUtilTest.format()" target="org.apache.shindig.common.util.DateUtil.formatRfc1123Date(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1177" source="org.apache.shindig.common.util.DateUtilTest.formatInWrongLocale()" target="org.apache.shindig.common.util.DateUtilTest.formatRfc1123Date()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1178" source="org.apache.shindig.common.util.DateUtilTest.formatIso8601()" target="org.apache.shindig.common.util.DateUtil.formatIso8601Date(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1179" source="org.apache.shindig.common.util.DateUtilTest.formatIso8601Date()" target="org.apache.shindig.common.util.DateUtil.formatIso8601Date(java.util.Date)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1180" source="org.apache.shindig.common.util.DateUtilTest.formatRfc1123Date()" target="org.apache.shindig.common.util.DateUtil.formatRfc1123Date(java.util.Date)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1181" source="org.apache.shindig.common.util.DateUtilTest.parse()" target="org.apache.shindig.common.util.DateUtil.parseRfc1123Date(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1182" source="org.apache.shindig.common.util.DateUtilTest.parseAsctime()" target="org.apache.shindig.common.util.DateUtil.parseRfc1123Date(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1183" source="org.apache.shindig.common.util.DateUtilTest.parseMalformedIso8691()" target="org.apache.shindig.common.util.DateUtil.parseIso8601DateTime(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1184" source="org.apache.shindig.common.util.DateUtilTest.parseMalformedRfc1123()" target="org.apache.shindig.common.util.DateUtil.parseRfc1123Date(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1185" source="org.apache.shindig.common.util.DateUtilTest.parseRfc1036()" target="org.apache.shindig.common.util.DateUtil.parseRfc1123Date(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1186" source="org.apache.shindig.common.util.DateUtilTest.parseWrongTimeZone()" target="org.apache.shindig.common.util.DateUtil.parseRfc1123Date(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1187" source="org.apache.shindig.common.util.FakeTimeSource()" target="org.apache.shindig.common.util.FakeTimeSource(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1188" source="org.apache.shindig.common.util.FakeTimeSource(long)" target="org.apache.shindig.common.util.TimeSource()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1189" source="org.apache.shindig.common.util.GenericDigestUtils#type" target="org.apache.shindig.common.util.DigestType.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1190" source="org.apache.shindig.common.util.GenericDigestUtils.digest(byte[])" target="org.apache.shindig.common.util.GenericDigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1191" source="org.apache.shindig.common.util.GenericDigestUtils.digest(java.io.InputStream)" target="org.apache.shindig.common.util.GenericDigestUtils.digest(java.security.MessageDigest,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1192" source="org.apache.shindig.common.util.GenericDigestUtils.digest(java.io.InputStream)" target="org.apache.shindig.common.util.GenericDigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1193" source="org.apache.shindig.common.util.GenericDigestUtils.digest(java.lang.String)" target="org.apache.shindig.common.util.GenericDigestUtils.digest(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1194" source="org.apache.shindig.common.util.GenericDigestUtils.digest(java.lang.String)" target="org.apache.shindig.common.util.GenericDigestUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1195" source="org.apache.shindig.common.util.GenericDigestUtils.digestHex(byte[])" target="org.apache.shindig.common.util.GenericDigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1196" source="org.apache.shindig.common.util.GenericDigestUtils.digestHex(java.io.InputStream)" target="org.apache.shindig.common.util.GenericDigestUtils.digest(java.security.MessageDigest,java.io.InputStream)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1197" source="org.apache.shindig.common.util.GenericDigestUtils.digestHex(java.io.InputStream)" target="org.apache.shindig.common.util.GenericDigestUtils.getDigest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1198" source="org.apache.shindig.common.util.GenericDigestUtils.digestHex(java.lang.String)" target="org.apache.shindig.common.util.GenericDigestUtils.digest(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1199" source="org.apache.shindig.common.util.GenericDigestUtils.digestHex(java.lang.String)" target="org.apache.shindig.common.util.GenericDigestUtils.getBytesUtf8(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1200" source="org.apache.shindig.common.util.HashUtil.checksum(byte[])" target="org.apache.shindig.common.util.HashUtil.getMessageDigest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1201" source="org.apache.shindig.common.util.HashUtil.checksum(byte[])" target="org.apache.shindig.common.util.HashUtil.bytesToHex(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1202" source="org.apache.shindig.common.util.HashUtil.rawChecksum(byte[])" target="org.apache.shindig.common.util.HashUtil.getMessageDigest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1203" source="org.apache.shindig.common.util.HashUtilTest.testChecksum()" target="org.apache.shindig.common.util.HashUtil.checksum(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1204" source="org.apache.shindig.common.util.HashUtilTest.testChecksumNPE()" target="org.apache.shindig.common.util.HashUtil.checksum(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1205" source="org.apache.shindig.common.util.HashUtilTest.testRawChecksum()" target="org.apache.shindig.common.util.HashUtil.rawChecksum(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1206" source="org.apache.shindig.common.util.HashUtilTest.testRawChecksumNPE()" target="org.apache.shindig.common.util.HashUtil.rawChecksum(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1207" source="org.apache.shindig.common.util.JsonConversionUtil.fromJson(org.json.JSONObject)" target="org.apache.shindig.common.util.JsonConversionUtil.collect(java.lang.Object,java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1208" source="org.apache.shindig.common.util.JsonConversionUtil.buildHolder(org.json.JSONObject,java.lang.String[],int)" target="org.apache.shindig.common.util.JsonConversionUtil.buildHolder(org.json.JSONObject,java.lang.String[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1209" source="org.apache.shindig.common.util.JsonConversionUtil.fromRequest(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.common.util.JsonConversionUtil.buildHolder(org.json.JSONObject,java.lang.String[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1210" source="org.apache.shindig.common.util.JsonConversionUtil.fromRequest(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.common.util.JsonConversionUtil.convertToJsonValue(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1211" source="org.apache.shindig.common.util.JsonConversionUtil.parametersToJsonObject(java.util.Map)" target="org.apache.shindig.common.util.JsonConversionUtil.buildHolder(org.json.JSONObject,java.lang.String[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1212" source="org.apache.shindig.common.util.JsonConversionUtil.parametersToJsonObject(java.util.Map)" target="org.apache.shindig.common.util.JsonConversionUtil.convertToJsonValue(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1213" source="org.apache.shindig.common.util.JsonConversionUtil.collect(java.lang.Object,java.lang.String,java.util.Map)" target="org.apache.shindig.common.util.JsonConversionUtil.collect(java.lang.Object,java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1214" source="org.apache.shindig.common.util.JsonConversionUtil.collect(java.lang.Object,java.lang.String,java.util.Map)" target="org.apache.shindig.common.util.JsonConversionUtil.isAllLiterals(org.json.JSONArray)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1215" source="org.apache.shindig.common.util.JsonConversionUtilTest.assertJsonEquals(java.lang.Object,java.lang.Object)" target="org.apache.shindig.common.util.JsonConversionUtilTest.assertJsonEquals(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1216" source="org.apache.shindig.common.util.JsonConversionUtilTest.testArrayPathToJsonParsing()" target="org.apache.shindig.common.util.JsonConversionUtil.buildHolder(org.json.JSONObject,java.lang.String[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1217" source="org.apache.shindig.common.util.JsonConversionUtilTest.testArrayPathToJsonParsing()" target="org.apache.shindig.common.util.JsonConversionUtilTest.assertJsonEquals(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1218" source="org.apache.shindig.common.util.JsonConversionUtilTest.testJSONToParameterMapParsing()" target="org.apache.shindig.common.util.JsonConversionUtil.fromJson(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1219" source="org.apache.shindig.common.util.JsonConversionUtilTest.testJsonFromRequest()" target="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1220" source="org.apache.shindig.common.util.JsonConversionUtilTest.testJsonFromRequest()" target="org.apache.shindig.common.util.JsonConversionUtil.fromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1221" source="org.apache.shindig.common.util.JsonConversionUtilTest.testParameterMapToJsonParsing()" target="org.apache.shindig.common.util.JsonConversionUtilTest.assertJsonEquals(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1222" source="org.apache.shindig.common.util.JsonConversionUtilTest.testParameterMapToJsonParsing()" target="org.apache.shindig.common.util.JsonConversionUtil.parametersToJsonObject(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1223" source="org.apache.shindig.common.util.JsonConversionUtilTest.testSimplePathToJsonParsing()" target="org.apache.shindig.common.util.JsonConversionUtil.buildHolder(org.json.JSONObject,java.lang.String[],int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1224" source="org.apache.shindig.common.util.JsonConversionUtilTest.testSimplePathToJsonParsing()" target="org.apache.shindig.common.util.JsonConversionUtilTest.assertJsonEquals(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1225" source="org.apache.shindig.common.util.JsonConversionUtilTest.testValueToJsonParsing()" target="org.apache.shindig.common.util.JsonConversionUtilTest.assertJsonEquals(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1226" source="org.apache.shindig.common.util.JsonConversionUtilTest.testValueToJsonParsing()" target="org.apache.shindig.common.util.JsonConversionUtil.convertToJsonValue(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1227" source="org.apache.shindig.common.util.OpenSocialVersion#COMPARATOR" target="org.apache.shindig.common.util.VersionComparator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1228" source="org.apache.shindig.common.util.OpenSocialVersion.isEqualOrGreaterThan(java.lang.String)" target="org.apache.shindig.common.util.OpenSocialVersion.isEqualOrGreaterThan(org.apache.shindig.common.util.OpenSocialVersion)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1229" source="org.apache.shindig.common.util.OpenSocialVersion.isEqualOrGreaterThan(java.lang.String)" target="org.apache.shindig.common.util.OpenSocialVersion(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1230" source="org.apache.shindig.common.util.OpenSocialVersion.isEquivalent(java.lang.String)" target="org.apache.shindig.common.util.OpenSocialVersion.isEquivalent(org.apache.shindig.common.util.OpenSocialVersion)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1231" source="org.apache.shindig.common.util.OpenSocialVersion.isEquivalent(java.lang.String)" target="org.apache.shindig.common.util.OpenSocialVersion(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1232" source="org.apache.shindig.common.util.ResourceLoader.open(java.lang.String)" target="org.apache.shindig.common.util.ResourceLoader.openResource(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1233" source="org.apache.shindig.common.util.ResourceLoader.openResource(java.lang.String)" target="org.apache.shindig.common.util.ResourceLoader.openResource(java.lang.ClassLoader,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1234" source="org.apache.shindig.common.util.ResourceLoader.getContent(java.lang.String)" target="org.apache.shindig.common.util.ResourceLoader.openResource(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1235" source="org.apache.shindig.common.util.StringEncodingTest.testBase32()" target="org.apache.shindig.common.util.StringEncoding(char[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1236" source="org.apache.shindig.common.util.StringEncodingTest.testBase32()" target="org.apache.shindig.common.util.StringEncodingTest.testEncoding(org.apache.shindig.common.util.StringEncoding,byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1237" source="org.apache.shindig.common.util.StringEncodingTest.testBase32()" target="org.apache.shindig.common.util.StringEncodingTest.testRoundTrip(org.apache.shindig.common.util.StringEncoding,byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1238" source="org.apache.shindig.common.util.StringEncodingTest.testBase32()" target="org.apache.shindig.common.crypto.Crypto.getRandomBytes(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1239" source="org.apache.shindig.common.util.StringEncodingTest.testEncoding(org.apache.shindig.common.util.StringEncoding,byte[],java.lang.String)" target="org.apache.shindig.common.util.StringEncoding.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1240" source="org.apache.shindig.common.util.StringEncodingTest.testEncoding(org.apache.shindig.common.util.StringEncoding,byte[],java.lang.String)" target="org.apache.shindig.common.util.StringEncoding.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1241" source="org.apache.shindig.common.util.StringEncodingTest.testRoundTrip(org.apache.shindig.common.util.StringEncoding,byte[])" target="org.apache.shindig.common.util.StringEncoding.encode(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1242" source="org.apache.shindig.common.util.StringEncodingTest.testRoundTrip(org.apache.shindig.common.util.StringEncoding,byte[])" target="org.apache.shindig.common.util.StringEncoding.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1243" source="org.apache.shindig.common.util.Utf8UrlCoderTest.decodeComplex()" target="org.apache.shindig.common.util.Utf8UrlCoder.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1244" source="org.apache.shindig.common.util.Utf8UrlCoderTest.decodeSimple()" target="org.apache.shindig.common.util.Utf8UrlCoder.decode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1245" source="org.apache.shindig.common.util.Utf8UrlCoderTest.encodeComplex()" target="org.apache.shindig.common.util.Utf8UrlCoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1246" source="org.apache.shindig.common.util.Utf8UrlCoderTest.encodeSimple()" target="org.apache.shindig.common.util.Utf8UrlCoder.encode(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1247" source="org.apache.shindig.common.util.DigestType#SHA" target="org.apache.shindig.common.util.DigestType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1248" source="org.apache.shindig.common.util.DigestType#SHA256" target="org.apache.shindig.common.util.DigestType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1249" source="org.apache.shindig.common.util.DigestType#SHA384" target="org.apache.shindig.common.util.DigestType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1250" source="org.apache.shindig.common.util.DigestType#SHA512" target="org.apache.shindig.common.util.DigestType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1251" source="org.apache.shindig.common.util.HMACType#HMACSHA1" target="org.apache.shindig.common.util.HMACType(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1252" source="org.apache.shindig.common.util.HMACType#HMACSHA256" target="org.apache.shindig.common.util.HMACType(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1253" source="org.apache.shindig.common.util.HMACType#HMACSHA384" target="org.apache.shindig.common.util.HMACType(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1254" source="org.apache.shindig.common.util.HMACType#HMACSHA512" target="org.apache.shindig.common.util.HMACType(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1255" source="org.apache.shindig.common.testing.FakeGadgetToken$Codec.createToken(java.util.Map)" target="org.apache.shindig.common.testing.FakeGadgetToken(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1256" source="org.apache.shindig.common.testing.FakeGadgetToken()" target="org.apache.shindig.auth.AbstractSecurityToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1257" source="org.apache.shindig.common.testing.FakeGadgetToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1258" source="org.apache.shindig.common.testing.FakeGadgetToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeGadgetToken.setAppId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1259" source="org.apache.shindig.common.testing.FakeGadgetToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeGadgetToken.setAppUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1260" source="org.apache.shindig.common.testing.FakeGadgetToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeGadgetToken.setDomain(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1261" source="org.apache.shindig.common.testing.FakeGadgetToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeGadgetToken.setOwnerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1262" source="org.apache.shindig.common.testing.FakeGadgetToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeGadgetToken.setTrustedJson(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1263" source="org.apache.shindig.common.testing.FakeGadgetToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeGadgetToken.setViewerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1264" source="org.apache.shindig.common.testing.FakeGadgetToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeGadgetToken.setModuleId(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1265" source="org.apache.shindig.common.testing.FakeGadgetToken(java.util.Map)" target="org.apache.shindig.common.testing.FakeGadgetToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1266" source="org.apache.shindig.common.testing.FakeGadgetToken.setActiveUrl(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setActiveUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1267" source="org.apache.shindig.common.testing.FakeGadgetToken.setAppId(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setAppId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1268" source="org.apache.shindig.common.testing.FakeGadgetToken.setAppUrl(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setAppUrl(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1269" source="org.apache.shindig.common.testing.FakeGadgetToken.setContainer(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setContainer(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1270" source="org.apache.shindig.common.testing.FakeGadgetToken.setDomain(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setDomain(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1271" source="org.apache.shindig.common.testing.FakeGadgetToken.setExpiresAt(java.lang.Long)" target="org.apache.shindig.auth.AbstractSecurityToken.setExpiresAt(java.lang.Long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1272" source="org.apache.shindig.common.testing.FakeGadgetToken.setModuleId(long)" target="org.apache.shindig.auth.AbstractSecurityToken.setModuleId(long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1273" source="org.apache.shindig.common.testing.FakeGadgetToken.setOwnerId(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setOwnerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1274" source="org.apache.shindig.common.testing.FakeGadgetToken.setTrustedJson(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setTrustedJson(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1275" source="org.apache.shindig.common.testing.FakeGadgetToken.setViewerId(java.lang.String)" target="org.apache.shindig.auth.AbstractSecurityToken.setViewerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1276" source="org.apache.shindig.common.testing.FakeHttpServletRequest()" target="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1277" source="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.constructor(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1278" source="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.constructor(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1279" source="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1280" source="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1281" source="org.apache.shindig.common.testing.FakeHttpServletRequest.getIntHeader(java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.getHeader(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1282" source="org.apache.shindig.common.testing.FakeHttpServletRequest.getParameter(java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.getParameterValues(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1283" source="org.apache.shindig.common.testing.FakeHttpServletRequest.getRequestURL()" target="org.apache.shindig.common.testing.FakeHttpServletRequest.getRequestURI()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1284" source="org.apache.shindig.common.testing.FakeHttpServletRequest.getInputStream()" target="org.apache.shindig.common.testing.FakeHttpServletRequest$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1285" source="org.apache.shindig.common.testing.FakeHttpServletRequest.getSession()" target="org.apache.shindig.common.testing.FakeHttpServletRequest.getSession(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1286" source="org.apache.shindig.common.testing.FakeHttpServletRequest.getDateHeader(java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.getHeader(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1287" source="org.apache.shindig.common.testing.FakeHttpServletRequest.setCookie(javax.servlet.http.Cookie)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.addToCookieMap(javax.servlet.http.Cookie)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1288" source="org.apache.shindig.common.testing.FakeHttpServletRequest.setCookie(javax.servlet.http.Cookie)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setCookieHeader()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1289" source="org.apache.shindig.common.testing.FakeHttpServletRequest.setCookies(javax.servlet.http.Cookie[])" target="org.apache.shindig.common.testing.FakeHttpServletRequest.addToCookieMap(javax.servlet.http.Cookie)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1290" source="org.apache.shindig.common.testing.FakeHttpServletRequest.setCookies(javax.servlet.http.Cookie[])" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setCookieHeader()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1291" source="org.apache.shindig.common.testing.FakeHttpServletRequest.setDateHeader(java.lang.String,long)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setHeader(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1292" source="org.apache.shindig.common.testing.FakeHttpServletRequest.setHeader(java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.splitAndTrim(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1293" source="org.apache.shindig.common.testing.FakeHttpServletRequest.setHeader(java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.addToCookieMap(javax.servlet.http.Cookie)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1294" source="org.apache.shindig.common.testing.FakeHttpServletRequest.setHeader(java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setCookieHeader()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1295" source="org.apache.shindig.common.testing.FakeHttpServletRequest.setHeader(java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.addToHeaderMap(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1296" source="org.apache.shindig.common.testing.FakeHttpServletRequest.setParameter(java.lang.String,java.lang.String[])" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setParameter(java.lang.String,boolean,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1297" source="org.apache.shindig.common.testing.FakeHttpServletRequest.setPostData(java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setPostData(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1298" source="org.apache.shindig.common.testing.FakeHttpServletRequest.setQueryString(java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.decodeQueryString(java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1299" source="org.apache.shindig.common.testing.FakeHttpServletRequest.constructor(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setHeader(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1300" source="org.apache.shindig.common.testing.FakeHttpServletRequest.constructor(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.decodeQueryString(java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1301" source="org.apache.shindig.common.testing.FakeHttpServletRequest.decodeQueryString(java.lang.String,java.util.Map)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.addParameter(java.util.Map,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1302" source="org.apache.shindig.common.testing.FakeHttpServletRequest.decodeQueryString(java.lang.String,java.util.Map)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.decodeParameterPart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1303" source="org.apache.shindig.common.testing.FakeHttpServletRequest.setCookieHeader()" target="org.apache.shindig.common.testing.FakeHttpServletRequest.addToHeaderMap(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1304" source="org.apache.shindig.common.testing.ImmediateExecutorService.shutdownNow()" target="org.apache.shindig.common.testing.ImmediateExecutorService.shutdown()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1305" source="org.apache.shindig.common.EasyMockTestCase.mock(java.lang.Class)" target="org.apache.shindig.common.EasyMockTestCase.mock(java.lang.Class,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1306" source="org.apache.shindig.common.EasyMockTestCase.mock(java.lang.Class,java.lang.reflect.Method[])" target="org.apache.shindig.common.EasyMockTestCase.mock(java.lang.Class,java.lang.reflect.Method[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1307" source="org.apache.shindig.common.JsonAssert.assertJsonArrayEquals(java.lang.String,org.json.JSONArray,org.json.JSONArray)" target="org.apache.shindig.common.JsonAssert.assertJsonObjectEquals(java.lang.String,org.json.JSONObject,org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1308" source="org.apache.shindig.common.JsonAssert.assertJsonArrayEquals(java.lang.String,org.json.JSONArray,org.json.JSONArray)" target="org.apache.shindig.common.JsonAssert.assertJsonArrayEquals(java.lang.String,org.json.JSONArray,org.json.JSONArray)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1309" source="org.apache.shindig.common.JsonAssert.assertJsonArrayEquals(org.json.JSONArray,org.json.JSONArray)" target="org.apache.shindig.common.JsonAssert.assertJsonArrayEquals(java.lang.String,org.json.JSONArray,org.json.JSONArray)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1310" source="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1311" source="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.JsonAssert.assertJsonObjectEquals(java.lang.String,org.json.JSONObject,org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1312" source="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.JsonAssert.assertJsonArrayEquals(java.lang.String,org.json.JSONArray,org.json.JSONArray)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1313" source="org.apache.shindig.common.JsonAssert.assertJsonObjectEquals(java.lang.String,org.json.JSONObject,org.json.JSONObject)" target="org.apache.shindig.common.JsonAssert.assertJsonObjectEquals(java.lang.String,org.json.JSONObject,org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1314" source="org.apache.shindig.common.JsonAssert.assertJsonObjectEquals(java.lang.String,org.json.JSONObject,org.json.JSONObject)" target="org.apache.shindig.common.JsonAssert.assertJsonArrayEquals(java.lang.String,org.json.JSONArray,org.json.JSONArray)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1315" source="org.apache.shindig.common.JsonAssert.assertJsonObjectEquals(org.json.JSONObject,org.json.JSONObject)" target="org.apache.shindig.common.JsonAssert.assertJsonObjectEquals(java.lang.String,org.json.JSONObject,org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1316" source="org.apache.shindig.common.JsonAssert.assertObjectEquals(java.lang.Object,java.lang.Object)" target="org.apache.shindig.common.JsonAssert.assertObjectEquals(java.lang.String,java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1317" source="org.apache.shindig.common.JsonAssert.assertObjectEquals(java.lang.String,java.lang.Object,java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.serialize(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1318" source="org.apache.shindig.common.JsonAssert.assertObjectEquals(java.lang.String,java.lang.Object,java.lang.Object)" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1319" source="org.apache.shindig.common.JsonSerializer.serialize(java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1320" source="org.apache.shindig.common.JsonSerializer.serialize(java.lang.Object[])" target="org.apache.shindig.common.JsonSerializer.appendArray(java.lang.Appendable,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1321" source="org.apache.shindig.common.JsonSerializer.serialize(java.util.Collection)" target="org.apache.shindig.common.JsonSerializer.appendCollection(java.lang.Appendable,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1322" source="org.apache.shindig.common.JsonSerializer.serialize(java.util.Map)" target="org.apache.shindig.common.JsonSerializer.appendMap(java.lang.Appendable,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1323" source="org.apache.shindig.common.JsonSerializer.serialize(org.json.JSONArray)" target="org.apache.shindig.common.JsonSerializer.appendJsonArray(java.lang.Appendable,org.json.JSONArray)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1324" source="org.apache.shindig.common.JsonSerializer.serialize(org.json.JSONObject)" target="org.apache.shindig.common.JsonSerializer.appendJsonObject(java.lang.Appendable,org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1325" source="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.appendString(java.lang.Appendable,java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1326" source="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.common.util.DateUtil.formatIso8601Date(java.util.Date)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1327" source="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.appendJsonObject(java.lang.Appendable,org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1328" source="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.appendJsonArray(java.lang.Appendable,org.json.JSONArray)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1329" source="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.appendMap(java.lang.Appendable,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1330" source="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.appendMultimap(java.lang.Appendable,com.google.common.collect.Multimap)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1331" source="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.appendCollection(java.lang.Appendable,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1332" source="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.appendArray(java.lang.Appendable,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1333" source="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.appendPojo(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1334" source="org.apache.shindig.common.JsonSerializer.appendArray(java.lang.Appendable,java.lang.Object[])" target="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1335" source="org.apache.shindig.common.JsonSerializer.appendCollection(java.lang.Appendable,java.util.Collection)" target="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1336" source="org.apache.shindig.common.JsonSerializer.appendJsonArray(java.lang.Appendable,org.json.JSONArray)" target="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1337" source="org.apache.shindig.common.JsonSerializer.appendJsonObject(java.lang.Appendable,org.json.JSONObject)" target="org.apache.shindig.common.JsonSerializer.appendString(java.lang.Appendable,java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1338" source="org.apache.shindig.common.JsonSerializer.appendJsonObject(java.lang.Appendable,org.json.JSONObject)" target="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1339" source="org.apache.shindig.common.JsonSerializer.appendMap(java.lang.Appendable,java.util.Map)" target="org.apache.shindig.common.JsonSerializer.appendString(java.lang.Appendable,java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1340" source="org.apache.shindig.common.JsonSerializer.appendMap(java.lang.Appendable,java.util.Map)" target="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1341" source="org.apache.shindig.common.JsonSerializer.appendMultimap(java.lang.Appendable,com.google.common.collect.Multimap)" target="org.apache.shindig.common.JsonSerializer.appendMap(java.lang.Appendable,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1342" source="org.apache.shindig.common.JsonSerializer.appendPojo(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.common.JsonUtil.getGetters(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1343" source="org.apache.shindig.common.JsonSerializer.appendPojo(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.appendString(java.lang.Appendable,java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1344" source="org.apache.shindig.common.JsonSerializer.appendPojo(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1345" source="org.apache.shindig.common.JsonSerializerTest.runJsonOrgTest(java.util.Map,int)" target="org.apache.shindig.common.JsonSerializerTest.avg(long,long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1346" source="org.apache.shindig.common.JsonSerializerTest.runSerializerTest(java.util.Map,int)" target="org.apache.shindig.common.JsonSerializer.serialize(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1347" source="org.apache.shindig.common.JsonSerializerTest.runSerializerTest(java.util.Map,int)" target="org.apache.shindig.common.JsonSerializerTest.avg(long,long,long)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1348" source="org.apache.shindig.common.JsonSerializerTest.emptyString()" target="org.apache.shindig.common.JsonSerializer.appendString(java.lang.Appendable,java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1349" source="org.apache.shindig.common.JsonSerializerTest.escapeBrackets()" target="org.apache.shindig.common.JsonSerializer.appendString(java.lang.Appendable,java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1350" source="org.apache.shindig.common.JsonSerializerTest.escapeSequences()" target="org.apache.shindig.common.JsonSerializer.appendString(java.lang.Appendable,java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1351" source="org.apache.shindig.common.JsonSerializerTest.main(java.lang.String[])" target="org.apache.shindig.common.JsonSerializerTest.runJsonOrgTest(java.util.Map,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1352" source="org.apache.shindig.common.JsonSerializerTest.main(java.lang.String[])" target="org.apache.shindig.common.JsonSerializerTest.runSerializerTest(java.util.Map,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1353" source="org.apache.shindig.common.JsonSerializerTest.serializeArray()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1354" source="org.apache.shindig.common.JsonSerializerTest.serializeArray()" target="org.apache.shindig.common.JsonSerializer.serialize(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1355" source="org.apache.shindig.common.JsonSerializerTest.serializeJsonArray()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1356" source="org.apache.shindig.common.JsonSerializerTest.serializeJsonArray()" target="org.apache.shindig.common.JsonSerializer.serialize(org.json.JSONArray)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1357" source="org.apache.shindig.common.JsonSerializerTest.serializeJsonObjectWithComplexArray()" target="org.apache.shindig.common.JsonSerializerTest$JsonPojo()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1358" source="org.apache.shindig.common.JsonSerializerTest.serializeJsonObjectWithComplexArray()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1359" source="org.apache.shindig.common.JsonSerializerTest.serializeJsonObjectWithComplexArray()" target="org.apache.shindig.common.JsonSerializer.serialize(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1360" source="org.apache.shindig.common.JsonSerializerTest.serializeJsonObjectWithNullPropertyValue()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1361" source="org.apache.shindig.common.JsonSerializerTest.serializeJsonObjectWithNullPropertyValue()" target="org.apache.shindig.common.JsonSerializer.serialize(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1362" source="org.apache.shindig.common.JsonSerializerTest.serializeMixedArray()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1363" source="org.apache.shindig.common.JsonSerializerTest.serializeMixedArray()" target="org.apache.shindig.common.JsonSerializer.serialize(java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1364" source="org.apache.shindig.common.JsonSerializerTest.serializeMixedObjects()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1365" source="org.apache.shindig.common.JsonSerializerTest.serializeMixedObjects()" target="org.apache.shindig.common.JsonSerializer.serialize(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1366" source="org.apache.shindig.common.JsonSerializerTest.serializePojo()" target="org.apache.shindig.common.JsonSerializerTest$JsonPojo()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1367" source="org.apache.shindig.common.JsonSerializerTest.serializePojo()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1368" source="org.apache.shindig.common.JsonSerializerTest.serializePojo()" target="org.apache.shindig.common.JsonSerializer.serialize(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1369" source="org.apache.shindig.common.JsonSerializerTest.serializePrimitives()" target="org.apache.shindig.common.JsonSerializer.serialize(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1370" source="org.apache.shindig.common.JsonSerializerTest.serializeSimpleCollection()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1371" source="org.apache.shindig.common.JsonSerializerTest.serializeSimpleCollection()" target="org.apache.shindig.common.JsonSerializer.serialize(java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1372" source="org.apache.shindig.common.JsonSerializerTest.serializeSimpleJsonObject()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1373" source="org.apache.shindig.common.JsonSerializerTest.serializeSimpleJsonObject()" target="org.apache.shindig.common.JsonSerializer.serialize(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1374" source="org.apache.shindig.common.JsonSerializerTest.serializeSimpleMap()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1375" source="org.apache.shindig.common.JsonSerializerTest.serializeSimpleMap()" target="org.apache.shindig.common.JsonSerializer.serialize(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1376" source="org.apache.shindig.common.JsonSerializerTest.serializeSimpleMultimap()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1377" source="org.apache.shindig.common.JsonSerializerTest.serializeSimpleMultimap()" target="org.apache.shindig.common.JsonSerializer.serialize(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1378" source="org.apache.shindig.common.JsonUtil$1.load(java.lang.Class)" target="org.apache.shindig.common.JsonUtil.getPropertyName(java.lang.reflect.Method)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1379" source="org.apache.shindig.common.JsonUtilTest$Duplicate()" target="org.apache.shindig.common.JsonUtilTest$DuplicateBase()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1380" source="org.apache.shindig.common.JsonUtilTest.duplicateMethodPojo()" target="org.apache.shindig.common.JsonUtilTest$Duplicate()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1381" source="org.apache.shindig.common.JsonUtilTest.duplicateMethodPojo()" target="org.apache.shindig.common.JsonUtil.getProperty(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1382" source="org.apache.shindig.common.JsonUtilTest.excludedPropertiesOfPojo()" target="org.apache.shindig.common.JsonSerializerTest$JsonPojo()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1383" source="org.apache.shindig.common.JsonUtilTest.excludedPropertiesOfPojo()" target="org.apache.shindig.common.JsonUtil.getProperty(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1384" source="org.apache.shindig.common.JsonUtilTest.getPropertyOfJsonObject()" target="org.apache.shindig.common.JsonUtil.getProperty(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1385" source="org.apache.shindig.common.JsonUtilTest.getPropertyOfMap()" target="org.apache.shindig.common.JsonUtil.getProperty(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1386" source="org.apache.shindig.common.JsonUtilTest.getPropertyOfPojo()" target="org.apache.shindig.common.JsonSerializerTest$JsonPojo()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1387" source="org.apache.shindig.common.JsonUtilTest.getPropertyOfPojo()" target="org.apache.shindig.common.JsonUtil.getProperty(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1388" source="org.apache.shindig.common.OpenSocialVersionTest.createOpenSocialVersion()" target="org.apache.shindig.common.util.OpenSocialVersion(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1389" source="org.apache.shindig.common.OpenSocialVersionTest.testEqualOrGreaterThan()" target="org.apache.shindig.common.util.OpenSocialVersion(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1390" source="org.apache.shindig.common.OpenSocialVersionTest.testEqualOrGreaterThan()" target="org.apache.shindig.common.util.OpenSocialVersion.isEqualOrGreaterThan(org.apache.shindig.common.util.OpenSocialVersion)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1391" source="org.apache.shindig.common.OpenSocialVersionTest.testEqualOrGreaterThan()" target="org.apache.shindig.common.util.OpenSocialVersion.isEqualOrGreaterThan(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1392" source="org.apache.shindig.common.OpenSocialVersionTest.testEquivalence()" target="org.apache.shindig.common.util.OpenSocialVersion(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1393" source="org.apache.shindig.common.OpenSocialVersionTest.testEquivalence()" target="org.apache.shindig.common.util.OpenSocialVersion.isEquivalent(org.apache.shindig.common.util.OpenSocialVersion)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1394" source="org.apache.shindig.common.OpenSocialVersionTest.testEquivalence()" target="org.apache.shindig.common.util.OpenSocialVersion.isEquivalent(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1395" source="org.apache.shindig.common.OpenSocialVersionTest.testVersionSorting()" target="org.apache.shindig.common.util.OpenSocialVersion(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1396" source="org.apache.shindig.common.OpenSocialVersionTest.testVersionSorting()" target="org.apache.shindig.common.util.OpenSocialVersion.isEqualOrGreaterThan(org.apache.shindig.common.util.OpenSocialVersion)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1397" source="org.apache.shindig.common.Pair.of(T1,T2)" target="org.apache.shindig.common.Pair(T1,T2)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1398" source="org.apache.shindig.common.PairTest.testPair()" target="org.apache.shindig.common.Pair.of(T1,T2)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1399" source="org.apache.shindig.common.PropertiesModule()" target="org.apache.shindig.common.PropertiesModule.readPropertyFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1400" source="org.apache.shindig.common.PropertiesModule()" target="org.apache.shindig.common.PropertiesModule.getDefaultPropertiesPath()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1401" source="org.apache.shindig.common.PropertiesModule(java.lang.String)" target="org.apache.shindig.common.PropertiesModule.readPropertyFile(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1402" source="org.apache.shindig.common.PropertiesModule.readPropertyFile(java.lang.String)" target="org.apache.shindig.common.PropertiesModule.getContextRoot()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1403" source="org.apache.shindig.common.PropertiesModule.readPropertyFile(java.lang.String)" target="org.apache.shindig.common.util.ResourceLoader.openResource(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1404" source="org.apache.shindig.common.PropertiesModule.configure()" target="org.apache.shindig.common.PropertiesModule.getContextRoot()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1405" source="org.apache.shindig.common.PropertiesModule.configure()" target="org.apache.shindig.common.PropertiesModule.getProperties()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1406" source="org.apache.shindig.common.PropertiesModule.configure()" target="org.apache.shindig.common.PropertiesModule.getServerPort()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1407" source="org.apache.shindig.common.PropertiesModule.configure()" target="org.apache.shindig.common.PropertiesModule.getServerHostname()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1408" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.deepCopyObject(java.lang.Object)" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.deepCopyObject(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1409" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.deepCopyConfig(java.util.Map)" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.deepCopyObject(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1410" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.mergeObjects(java.util.Map,java.util.Map)" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.mergeObjects(java.util.Map,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1411" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.mergeParents(java.lang.String,java.util.Map)" target="org.apache.shindig.config.ContainerConfigException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1412" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.mergeParents(java.lang.String,java.util.Map)" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.mergeObjects(java.util.Map,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1413" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.mergeParents(java.lang.String,java.util.Map)" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.mergeParents(java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1414" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.getTemporaryConfig(boolean)" target="org.apache.shindig.config.BasicContainerConfig()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1415" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.getTemporaryConfig(boolean)" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.deepCopyConfig(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1416" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.addContainer(java.util.Map)" target="org.apache.shindig.config.ContainerConfigException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1417" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.changeContainersInConfig(org.apache.shindig.config.BasicContainerConfig,java.util.Map,java.util.Set)" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.mergeParents(java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1418" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.commit()" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.getTemporaryConfig(boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1419" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.commit()" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.changeContainersInConfig(org.apache.shindig.config.BasicContainerConfig,java.util.Map,java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1420" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.commit()" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.diffConfiguration(org.apache.shindig.config.BasicContainerConfig,java.util.Set,java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1421" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.commit()" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.setNewConfig(org.apache.shindig.config.BasicContainerConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1422" source="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.commit()" target="org.apache.shindig.config.BasicContainerConfig.notifyObservers(java.util.Collection,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1423" source="org.apache.shindig.config.BasicContainerConfig.getList(java.lang.String,java.lang.String)" target="org.apache.shindig.config.BasicContainerConfig.getProperty(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1424" source="org.apache.shindig.config.BasicContainerConfig.getMap(java.lang.String,java.lang.String)" target="org.apache.shindig.config.BasicContainerConfig.getProperty(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1425" source="org.apache.shindig.config.BasicContainerConfig.getBool(java.lang.String,java.lang.String)" target="org.apache.shindig.config.BasicContainerConfig.getProperty(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1426" source="org.apache.shindig.config.BasicContainerConfig.getInt(java.lang.String,java.lang.String)" target="org.apache.shindig.config.BasicContainerConfig.getProperty(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1427" source="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)" target="org.apache.shindig.config.BasicContainerConfig.getProperty(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1428" source="org.apache.shindig.config.BasicContainerConfig.toString()" target="org.apache.shindig.common.JsonSerializer.serialize(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1429" source="org.apache.shindig.config.BasicContainerConfig.newTransaction()" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1430" source="org.apache.shindig.config.BasicContainerConfig.addConfigObserver(org.apache.shindig.config.ContainerConfig$ConfigObserver,boolean)" target="org.apache.shindig.config.BasicContainerConfig.notifyObservers(java.util.Collection,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1431" source="org.apache.shindig.config.BasicContainerConfig.addConfigObserver(org.apache.shindig.config.ContainerConfig$ConfigObserver,boolean)" target="org.apache.shindig.config.BasicContainerConfig.getContainers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1432" source="org.apache.shindig.config.BasicContainerConfig.notifyObservers(java.util.Collection,java.util.Collection)" target="org.apache.shindig.config.ContainerConfig$ConfigObserver.containersChanged(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1433" source="org.apache.shindig.config.BasicContainerConfigTest#DEFAULT_CONTAINER" target="org.apache.shindig.config.BasicContainerConfigTest.makeContainer(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1434" source="org.apache.shindig.config.BasicContainerConfigTest#MODIFIED_DEFAULT_CONTAINER" target="org.apache.shindig.config.BasicContainerConfigTest.makeContainer(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1435" source="org.apache.shindig.config.BasicContainerConfigTest#EXTRA_CONTAINER" target="org.apache.shindig.config.BasicContainerConfigTest.makeContainer(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1436" source="org.apache.shindig.config.BasicContainerConfigTest#MODIFIED_EXTRA_CONTAINER" target="org.apache.shindig.config.BasicContainerConfigTest.makeContainer(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1437" source="org.apache.shindig.config.BasicContainerConfigTest.setUp()" target="org.apache.shindig.config.BasicContainerConfig()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1438" source="org.apache.shindig.config.BasicContainerConfigTest.setUp()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1439" source="org.apache.shindig.config.BasicContainerConfigTest.setUp()" target="org.apache.shindig.config.ContainerConfig$Transaction.clearContainers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1440" source="org.apache.shindig.config.BasicContainerConfigTest.setUp()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1441" source="org.apache.shindig.config.BasicContainerConfigTest.setUp()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1442" source="org.apache.shindig.config.BasicContainerConfigTest.testAddNewContainer()" target="org.apache.shindig.config.ContainerConfig$ConfigObserver.containersChanged(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1443" source="org.apache.shindig.config.BasicContainerConfigTest.testAddNewContainer()" target="org.apache.shindig.config.ContainerConfig.addConfigObserver(org.apache.shindig.config.ContainerConfig$ConfigObserver,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1444" source="org.apache.shindig.config.BasicContainerConfigTest.testAddNewContainer()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1445" source="org.apache.shindig.config.BasicContainerConfigTest.testAddNewContainer()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1446" source="org.apache.shindig.config.BasicContainerConfigTest.testAddNewContainer()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1447" source="org.apache.shindig.config.BasicContainerConfigTest.testAddNewContainer()" target="org.apache.shindig.config.ContainerConfig.getContainers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1448" source="org.apache.shindig.config.BasicContainerConfigTest.testAddNewContainer()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1449" source="org.apache.shindig.config.BasicContainerConfigTest.testAddObserverNotifiesImmediately()" target="org.apache.shindig.config.ContainerConfig$ConfigObserver.containersChanged(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1450" source="org.apache.shindig.config.BasicContainerConfigTest.testAddObserverNotifiesImmediately()" target="org.apache.shindig.config.BasicContainerConfig()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1451" source="org.apache.shindig.config.BasicContainerConfigTest.testAddObserverNotifiesImmediately()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1452" source="org.apache.shindig.config.BasicContainerConfigTest.testAddObserverNotifiesImmediately()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1453" source="org.apache.shindig.config.BasicContainerConfigTest.testAddObserverNotifiesImmediately()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1454" source="org.apache.shindig.config.BasicContainerConfigTest.testAddObserverNotifiesImmediately()" target="org.apache.shindig.config.ContainerConfig.addConfigObserver(org.apache.shindig.config.ContainerConfig$ConfigObserver,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1455" source="org.apache.shindig.config.BasicContainerConfigTest.testAliasesArePopulated()" target="org.apache.shindig.config.BasicContainerConfigTest.makeContainer(java.util.List,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1456" source="org.apache.shindig.config.BasicContainerConfigTest.testAliasesArePopulated()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1457" source="org.apache.shindig.config.BasicContainerConfigTest.testAliasesArePopulated()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1458" source="org.apache.shindig.config.BasicContainerConfigTest.testAliasesArePopulated()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1459" source="org.apache.shindig.config.BasicContainerConfigTest.testAliasesArePopulated()" target="org.apache.shindig.config.ContainerConfig.getContainers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1460" source="org.apache.shindig.config.BasicContainerConfigTest.testAliasesArePopulated()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1461" source="org.apache.shindig.config.BasicContainerConfigTest.testClearContainerConfig()" target="org.apache.shindig.config.ContainerConfig$ConfigObserver.containersChanged(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1462" source="org.apache.shindig.config.BasicContainerConfigTest.testClearContainerConfig()" target="org.apache.shindig.config.BasicContainerConfig()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1463" source="org.apache.shindig.config.BasicContainerConfigTest.testClearContainerConfig()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1464" source="org.apache.shindig.config.BasicContainerConfigTest.testClearContainerConfig()" target="org.apache.shindig.config.ContainerConfig$Transaction.clearContainers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1465" source="org.apache.shindig.config.BasicContainerConfigTest.testClearContainerConfig()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1466" source="org.apache.shindig.config.BasicContainerConfigTest.testClearContainerConfig()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1467" source="org.apache.shindig.config.BasicContainerConfigTest.testClearContainerConfig()" target="org.apache.shindig.config.ContainerConfig.addConfigObserver(org.apache.shindig.config.ContainerConfig$ConfigObserver,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1468" source="org.apache.shindig.config.BasicContainerConfigTest.testClearContainerConfig()" target="org.apache.shindig.config.BasicContainerConfigTest.makeContainer(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1469" source="org.apache.shindig.config.BasicContainerConfigTest.testClearContainerConfig()" target="org.apache.shindig.config.ContainerConfig.getContainers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1470" source="org.apache.shindig.config.BasicContainerConfigTest.testContainersAreMergedRecursively()" target="org.apache.shindig.config.BasicContainerConfigTest.makeContainer(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1471" source="org.apache.shindig.config.BasicContainerConfigTest.testContainersAreMergedRecursively()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1472" source="org.apache.shindig.config.BasicContainerConfigTest.testContainersAreMergedRecursively()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1473" source="org.apache.shindig.config.BasicContainerConfigTest.testContainersAreMergedRecursively()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1474" source="org.apache.shindig.config.BasicContainerConfigTest.testContainersAreMergedRecursively()" target="org.apache.shindig.config.ContainerConfig.getProperties(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1475" source="org.apache.shindig.config.BasicContainerConfigTest.testGetContainers()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1476" source="org.apache.shindig.config.BasicContainerConfigTest.testGetContainers()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1477" source="org.apache.shindig.config.BasicContainerConfigTest.testGetContainers()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1478" source="org.apache.shindig.config.BasicContainerConfigTest.testGetContainers()" target="org.apache.shindig.config.ContainerConfig.getContainers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1479" source="org.apache.shindig.config.BasicContainerConfigTest.testGetProperties()" target="org.apache.shindig.config.ContainerConfig.getProperties(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1480" source="org.apache.shindig.config.BasicContainerConfigTest.testInheritance()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1481" source="org.apache.shindig.config.BasicContainerConfigTest.testInheritance()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1482" source="org.apache.shindig.config.BasicContainerConfigTest.testInheritance()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1483" source="org.apache.shindig.config.BasicContainerConfigTest.testInheritance()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1484" source="org.apache.shindig.config.BasicContainerConfigTest.testNulledPropertiesRemainNulledAfterSeveralTransactions()" target="org.apache.shindig.config.BasicContainerConfigTest.makeContainer(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1485" source="org.apache.shindig.config.BasicContainerConfigTest.testNulledPropertiesRemainNulledAfterSeveralTransactions()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1486" source="org.apache.shindig.config.BasicContainerConfigTest.testNulledPropertiesRemainNulledAfterSeveralTransactions()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1487" source="org.apache.shindig.config.BasicContainerConfigTest.testNulledPropertiesRemainNulledAfterSeveralTransactions()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1488" source="org.apache.shindig.config.BasicContainerConfigTest.testNulledPropertiesRemainNulledAfterSeveralTransactions()" target="org.apache.shindig.config.ContainerConfig.getProperty(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1489" source="org.apache.shindig.config.BasicContainerConfigTest.testPropertyTypes()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1490" source="org.apache.shindig.config.BasicContainerConfigTest.testPropertyTypes()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1491" source="org.apache.shindig.config.BasicContainerConfigTest.testPropertyTypes()" target="org.apache.shindig.config.BasicContainerConfigTest.makeContainer(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1492" source="org.apache.shindig.config.BasicContainerConfigTest.testPropertyTypes()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1493" source="org.apache.shindig.config.BasicContainerConfigTest.testPropertyTypes()" target="org.apache.shindig.config.ContainerConfig.getBool(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1494" source="org.apache.shindig.config.BasicContainerConfigTest.testPropertyTypes()" target="org.apache.shindig.config.ContainerConfig.getInt(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1495" source="org.apache.shindig.config.BasicContainerConfigTest.testPropertyTypes()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1496" source="org.apache.shindig.config.BasicContainerConfigTest.testPropertyTypes()" target="org.apache.shindig.config.ContainerConfig.getList(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1497" source="org.apache.shindig.config.BasicContainerConfigTest.testPropertyTypes()" target="org.apache.shindig.config.ContainerConfig.getMap(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1498" source="org.apache.shindig.config.BasicContainerConfigTest.testReadSameContainer()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1499" source="org.apache.shindig.config.BasicContainerConfigTest.testReadSameContainer()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1500" source="org.apache.shindig.config.BasicContainerConfigTest.testReadSameContainer()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1501" source="org.apache.shindig.config.BasicContainerConfigTest.testReadSameContainer()" target="org.apache.shindig.config.ContainerConfig$ConfigObserver.containersChanged(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1502" source="org.apache.shindig.config.BasicContainerConfigTest.testReadSameContainer()" target="org.apache.shindig.config.ContainerConfig.addConfigObserver(org.apache.shindig.config.ContainerConfig$ConfigObserver,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1503" source="org.apache.shindig.config.BasicContainerConfigTest.testReadSameContainer()" target="org.apache.shindig.config.ContainerConfig.getContainers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1504" source="org.apache.shindig.config.BasicContainerConfigTest.testReadSameContainer()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1505" source="org.apache.shindig.config.BasicContainerConfigTest.testRemoveContainer()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1506" source="org.apache.shindig.config.BasicContainerConfigTest.testRemoveContainer()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1507" source="org.apache.shindig.config.BasicContainerConfigTest.testRemoveContainer()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1508" source="org.apache.shindig.config.BasicContainerConfigTest.testRemoveContainer()" target="org.apache.shindig.config.ContainerConfig$ConfigObserver.containersChanged(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1509" source="org.apache.shindig.config.BasicContainerConfigTest.testRemoveContainer()" target="org.apache.shindig.config.ContainerConfig.addConfigObserver(org.apache.shindig.config.ContainerConfig$ConfigObserver,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1510" source="org.apache.shindig.config.BasicContainerConfigTest.testRemoveContainer()" target="org.apache.shindig.config.ContainerConfig$Transaction.removeContainer(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1511" source="org.apache.shindig.config.BasicContainerConfigTest.testRemoveContainer()" target="org.apache.shindig.config.ContainerConfig.getContainers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1512" source="org.apache.shindig.config.BasicContainerConfigTest.testReplaceContainer()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1513" source="org.apache.shindig.config.BasicContainerConfigTest.testReplaceContainer()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1514" source="org.apache.shindig.config.BasicContainerConfigTest.testReplaceContainer()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1515" source="org.apache.shindig.config.BasicContainerConfigTest.testReplaceContainer()" target="org.apache.shindig.config.ContainerConfig$ConfigObserver.containersChanged(org.apache.shindig.config.ContainerConfig,java.util.Collection,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1516" source="org.apache.shindig.config.BasicContainerConfigTest.testReplaceContainer()" target="org.apache.shindig.config.ContainerConfig.addConfigObserver(org.apache.shindig.config.ContainerConfig$ConfigObserver,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1517" source="org.apache.shindig.config.BasicContainerConfigTest.testReplaceContainer()" target="org.apache.shindig.config.ContainerConfig.getContainers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1518" source="org.apache.shindig.config.BasicContainerConfigTest.testReplaceContainer()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1519" source="org.apache.shindig.config.ContainerConfigELResolver.getType(javax.el.ELContext,java.lang.Object,java.lang.Object)" target="org.apache.shindig.config.ContainerConfigELResolver.getValue(javax.el.ELContext,java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1520" source="org.apache.shindig.config.ContainerConfigELResolver.getValue(javax.el.ELContext,java.lang.Object,java.lang.Object)" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1521" source="org.apache.shindig.config.ContainerConfigELResolver.getValue(javax.el.ELContext,java.lang.Object,java.lang.Object)" target="org.apache.shindig.config.ContainerConfigELResolver$ContainerReference()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1522" source="org.apache.shindig.config.ContainerConfigELResolver.getValue(javax.el.ELContext,java.lang.Object,java.lang.Object)" target="org.apache.shindig.config.ContainerConfig.getProperty(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1523" source="org.apache.shindig.config.DynamicConfigProperty(java.lang.String,org.apache.shindig.expressions.Expressions,javax.el.ELContext)" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1524" source="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction()" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1525" source="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.evaluateAll(java.lang.Object)" target="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.evaluateAll(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1526" source="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.parseAll(java.lang.Object,javax.el.ELContext)" target="org.apache.shindig.config.DynamicConfigProperty(java.lang.String,org.apache.shindig.expressions.Expressions,javax.el.ELContext)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1527" source="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.parseAll(java.lang.Object,javax.el.ELContext)" target="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.parseAll(java.lang.Object,javax.el.ELContext)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1528" source="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.getTemporaryConfig(boolean)" target="org.apache.shindig.config.ExpressionContainerConfig(org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1529" source="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.getTemporaryConfig(boolean)" target="org.apache.shindig.config.ExpressionContainerConfig.getExpressions()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1530" source="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.getTemporaryConfig(boolean)" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.deepCopyConfig(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1531" source="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.changeContainersInConfig(org.apache.shindig.config.BasicContainerConfig,java.util.Map,java.util.Set)" target="org.apache.shindig.config.BasicContainerConfig$BasicTransaction.mergeParents(java.lang.String,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1532" source="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.changeContainersInConfig(org.apache.shindig.config.BasicContainerConfig,java.util.Map,java.util.Set)" target="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.parseAll(java.lang.Object,javax.el.ELContext)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1533" source="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.changeContainersInConfig(org.apache.shindig.config.BasicContainerConfig,java.util.Map,java.util.Set)" target="org.apache.shindig.config.ExpressionContainerConfig.createExpressionContext(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1534" source="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.changeContainersInConfig(org.apache.shindig.config.BasicContainerConfig,java.util.Map,java.util.Set)" target="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction.evaluateAll(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1535" source="org.apache.shindig.config.ExpressionContainerConfig(org.apache.shindig.expressions.Expressions)" target="org.apache.shindig.config.BasicContainerConfig()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1536" source="org.apache.shindig.config.ExpressionContainerConfig.getProperty(java.lang.String,java.lang.String)" target="org.apache.shindig.expressions.Expressions.parse(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1537" source="org.apache.shindig.config.ExpressionContainerConfig.getProperty(java.lang.String,java.lang.String)" target="org.apache.shindig.config.ExpressionContainerConfig.createExpressionContext(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1538" source="org.apache.shindig.config.ExpressionContainerConfig.getProperty(java.lang.String,java.lang.String)" target="org.apache.shindig.config.BasicContainerConfig.getProperty(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1539" source="org.apache.shindig.config.ExpressionContainerConfig.createExpressionContext(java.lang.String)" target="org.apache.shindig.config.ExpressionContainerConfig.getExpressions()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1540" source="org.apache.shindig.config.ExpressionContainerConfig.createExpressionContext(java.lang.String)" target="org.apache.shindig.expressions.Expressions.newELContext(javax.el.ELResolver[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1541" source="org.apache.shindig.config.ExpressionContainerConfig.createExpressionContext(java.lang.String)" target="org.apache.shindig.config.ContainerConfigELResolver(org.apache.shindig.config.ContainerConfig,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1542" source="org.apache.shindig.config.ExpressionContainerConfig.newTransaction()" target="org.apache.shindig.config.ExpressionContainerConfig$ExpressionTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1543" source="org.apache.shindig.config.ExpressionContainerConfigTest#DEFAULT_EXPR_CONTAINER" target="org.apache.shindig.config.BasicContainerConfigTest.makeContainer(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1544" source="org.apache.shindig.config.ExpressionContainerConfigTest#MODIFIED_DEFAULT_EXPR_CONTAINER" target="org.apache.shindig.config.BasicContainerConfigTest.makeContainer(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1545" source="org.apache.shindig.config.ExpressionContainerConfigTest()" target="org.apache.shindig.config.BasicContainerConfigTest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1546" source="org.apache.shindig.config.ExpressionContainerConfigTest.setUp()" target="org.apache.shindig.config.ExpressionContainerConfig(org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1547" source="org.apache.shindig.config.ExpressionContainerConfigTest.setUp()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1548" source="org.apache.shindig.config.ExpressionContainerConfigTest.setUp()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1549" source="org.apache.shindig.config.ExpressionContainerConfigTest.setUp()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1550" source="org.apache.shindig.config.ExpressionContainerConfigTest.setUp()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1551" source="org.apache.shindig.config.ExpressionContainerConfigTest.testExpressionInheritance()" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1552" source="org.apache.shindig.config.ExpressionContainerConfigTest.testExpressionInheritance()" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1553" source="org.apache.shindig.config.ExpressionContainerConfigTest.testExpressionInheritance()" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1554" source="org.apache.shindig.config.ExpressionContainerConfigTest.testExpressionInheritance()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1555" source="org.apache.shindig.config.ExpressionContainerConfigTest.testExpressionValues()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1556" source="org.apache.shindig.config.ExpressionContainerConfigTest.testGetProperties()" target="org.apache.shindig.config.ContainerConfig.getProperties(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1557" source="org.apache.shindig.config.JsonContainerConfig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.expressions.Expressions)" target="org.apache.shindig.config.ExpressionContainerConfig(org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1558" source="org.apache.shindig.config.JsonContainerConfig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.expressions.Expressions)" target="org.apache.shindig.config.JsonContainerConfigLoader.getTransactionFromFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1559" source="org.apache.shindig.config.JsonContainerConfig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.expressions.Expressions)" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1560" source="org.apache.shindig.config.JsonContainerConfig(java.lang.String,org.apache.shindig.expressions.Expressions)" target="org.apache.shindig.config.JsonContainerConfig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1561" source="org.apache.shindig.config.JsonContainerConfig(org.json.JSONObject,org.apache.shindig.expressions.Expressions)" target="org.apache.shindig.config.ExpressionContainerConfig(org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1562" source="org.apache.shindig.config.JsonContainerConfig(org.json.JSONObject,org.apache.shindig.expressions.Expressions)" target="org.apache.shindig.config.ExpressionContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1563" source="org.apache.shindig.config.JsonContainerConfig(org.json.JSONObject,org.apache.shindig.expressions.Expressions)" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1564" source="org.apache.shindig.config.JsonContainerConfig(org.json.JSONObject,org.apache.shindig.expressions.Expressions)" target="org.apache.shindig.config.JsonContainerConfigLoader.parseJsonContainer(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1565" source="org.apache.shindig.config.JsonContainerConfig(org.json.JSONObject,org.apache.shindig.expressions.Expressions)" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1566" source="org.apache.shindig.config.JsonContainerConfigLoader.jsonToConfig(java.lang.Object)" target="org.apache.shindig.config.JsonContainerConfigLoader.jsonToConfig(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1567" source="org.apache.shindig.config.JsonContainerConfigLoader.jsonToConfig(java.lang.Object)" target="org.apache.shindig.config.JsonContainerConfigLoader.jsonToMap(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1568" source="org.apache.shindig.config.JsonContainerConfigLoader.loadContainers(java.lang.String)" target="org.apache.shindig.config.JsonContainerConfigLoader.loadResources(java.lang.Iterable,java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1569" source="org.apache.shindig.config.JsonContainerConfigLoader.loadContainers(java.lang.String)" target="org.apache.shindig.common.util.ResourceLoader.getContent(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1570" source="org.apache.shindig.config.JsonContainerConfigLoader.loadContainers(java.lang.String)" target="org.apache.shindig.config.JsonContainerConfigLoader.loadFiles(java.io.File[],java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1571" source="org.apache.shindig.config.JsonContainerConfigLoader.loadContainers(java.lang.String)" target="org.apache.shindig.config.ContainerConfigException(java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1572" source="org.apache.shindig.config.JsonContainerConfigLoader.jsonToMap(org.json.JSONObject)" target="org.apache.shindig.config.JsonContainerConfigLoader.jsonToConfig(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1573" source="org.apache.shindig.config.JsonContainerConfigLoader.jsonToMap(org.json.JSONObject)" target="org.apache.shindig.common.util.ResourceLoader.open(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1574" source="org.apache.shindig.config.JsonContainerConfigLoader.loadFromString(java.lang.String)" target="org.apache.shindig.config.JsonContainerConfigLoader.jsonToMap(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1575" source="org.apache.shindig.config.JsonContainerConfigLoader.loadFromString(java.lang.String)" target="org.apache.shindig.config.ContainerConfigException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1576" source="org.apache.shindig.config.JsonContainerConfigLoader.parseJsonContainer(java.lang.String)" target="org.apache.shindig.config.JsonContainerConfigLoader.parseJsonContainer(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1577" source="org.apache.shindig.config.JsonContainerConfigLoader.parseJsonContainer(org.json.JSONObject)" target="org.apache.shindig.config.JsonContainerConfigLoader.jsonToMap(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1578" source="org.apache.shindig.config.JsonContainerConfigLoader.addToTransactionFromFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.config.ContainerConfig$Transaction)" target="org.apache.shindig.config.JsonContainerConfigLoader.loadContainers(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1579" source="org.apache.shindig.config.JsonContainerConfigLoader.addToTransactionFromFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.config.ContainerConfig$Transaction)" target="org.apache.shindig.config.JsonContainerConfigLoader.addHostAndPortToDefaultContainer(java.util.List,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1580" source="org.apache.shindig.config.JsonContainerConfigLoader.addToTransactionFromFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.config.ContainerConfig$Transaction)" target="org.apache.shindig.config.JsonContainerConfigLoader.addContainersToTransaction(org.apache.shindig.config.ContainerConfig$Transaction,java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1581" source="org.apache.shindig.config.JsonContainerConfigLoader.getTransactionFromFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.config.ContainerConfig)" target="org.apache.shindig.config.JsonContainerConfigLoader.addToTransactionFromFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.config.ContainerConfig$Transaction)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1582" source="org.apache.shindig.config.JsonContainerConfigLoader.getTransactionFromFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.config.ContainerConfig)" target="org.apache.shindig.config.ContainerConfig.newTransaction()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1583" source="org.apache.shindig.config.JsonContainerConfigLoader.addContainersToTransaction(org.apache.shindig.config.ContainerConfig$Transaction,java.util.List)" target="org.apache.shindig.config.ContainerConfig$Transaction.addContainer(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1584" source="org.apache.shindig.config.JsonContainerConfigLoader.loadFiles(java.io.File[],java.util.List)" target="org.apache.shindig.config.JsonContainerConfigLoader.loadFiles(java.io.File[],java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1585" source="org.apache.shindig.config.JsonContainerConfigLoader.loadFiles(java.io.File[],java.util.List)" target="org.apache.shindig.config.ContainerConfigException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1586" source="org.apache.shindig.config.JsonContainerConfigLoader.loadFiles(java.io.File[],java.util.List)" target="org.apache.shindig.config.JsonContainerConfigLoader.loadFromString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1587" source="org.apache.shindig.config.JsonContainerConfigLoader.loadFiles(java.io.File[],java.util.List)" target="org.apache.shindig.common.util.ResourceLoader.getContent(java.io.File)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1588" source="org.apache.shindig.config.JsonContainerConfigLoader.loadFiles(java.io.File[],java.util.List)" target="org.apache.shindig.config.ContainerConfigException(java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1589" source="org.apache.shindig.config.JsonContainerConfigLoader.loadResources(java.lang.Iterable,java.util.List)" target="org.apache.shindig.common.util.ResourceLoader.getContent(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1590" source="org.apache.shindig.config.JsonContainerConfigLoader.loadResources(java.lang.Iterable,java.util.List)" target="org.apache.shindig.config.JsonContainerConfigLoader.loadFromString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1591" source="org.apache.shindig.config.JsonContainerConfigLoader.loadResources(java.lang.Iterable,java.util.List)" target="org.apache.shindig.config.ContainerConfigException(java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1592" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.createDefaultContainer()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1593" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.aliasesArePopulated()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createDefaultContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1594" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.aliasesArePopulated()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1595" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.aliasesArePopulated()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1596" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.aliasesArePopulated()" target="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1597" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.badConfigThrows()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1598" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.badConfigThrows()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1599" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)" target="org.apache.shindig.config.JsonContainerConfigLoader.getTransactionFromFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1600" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)" target="org.apache.shindig.config.ContainerConfig$Transaction.commit()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1601" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.expressionEvaluation()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1602" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.expressionEvaluation()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1603" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.expressionEvaluation()" target="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1604" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.expressionEvaluationUsingParent()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1605" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.expressionEvaluationUsingParent()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createDefaultContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1606" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.expressionEvaluationUsingParent()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1607" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.expressionEvaluationUsingParent()" target="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1608" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.invalidContainerReturnsNull()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1609" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.invalidContainerReturnsNull()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createDefaultContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1610" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.invalidContainerReturnsNull()" target="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1611" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.nullEntryEvaluation()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1612" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.nullEntryEvaluation()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1613" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.nullEntryEvaluation()" target="org.apache.shindig.config.BasicContainerConfig.getMap(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1614" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.parseBasicConfig()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1615" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.parseBasicConfig()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createDefaultContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1616" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.parseBasicConfig()" target="org.apache.shindig.config.BasicContainerConfig.getContainers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1617" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.parseBasicConfig()" target="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1618" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.parseBasicConfig()" target="org.apache.shindig.config.BasicContainerConfig.getMap(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1619" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.parseWithDefaultInheritance()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1620" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.parseWithDefaultInheritance()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createDefaultContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1621" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.parseWithDefaultInheritance()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1622" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.parseWithDefaultInheritance()" target="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1623" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.parseWithDefaultInheritance()" target="org.apache.shindig.config.BasicContainerConfig.getMap(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1624" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.parseWithDefaultInheritance()" target="org.apache.shindig.config.BasicContainerConfig.getList(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1625" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.pathQuery()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1626" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.pathQuery()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createDefaultContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1627" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.pathQuery()" target="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1628" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderClasspathFailureTest()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1629" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderClasspathFailureTest()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1630" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderClasspathFailureTest()" target="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1631" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderClasspathTest()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1632" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderClasspathTest()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1633" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderClasspathTest()" target="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1634" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderFileFailureTest()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1635" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderFileFailureTest()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1636" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderFileFailureTest()" target="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1637" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderFileTest()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1638" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderFileTest()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1639" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.resourceLoaderFileTest()" target="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1640" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.setUp()" target="org.apache.shindig.config.ExpressionContainerConfig(org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1641" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.setUp()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1642" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.shindigPortTest()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1643" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.shindigPortTest()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1644" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.shindigPortTest()" target="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1645" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.testCommonEnvironmentAddedToAllContainers()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1646" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.testCommonEnvironmentAddedToAllContainers()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1647" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.testCommonEnvironmentAddedToAllContainers()" target="org.apache.shindig.config.BasicContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1648" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.testNullEntriesOverrideEntriesInParent()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createConfigForTest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1649" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.testNullEntriesOverrideEntriesInParent()" target="org.apache.shindig.config.JsonContainerConfigLoaderTest.createTemporaryFile(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1650" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.testNullEntriesOverrideEntriesInParent()" target="org.apache.shindig.config.BasicContainerConfig.getMap(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1651" source="org.apache.shindig.config.JsonContainerConfigLoaderTest.testNullEntriesOverrideEntriesInParent()" target="org.apache.shindig.config.ExpressionContainerConfig.getProperty(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1652" source="org.apache.shindig.config.JsonContainerConfigTest.createDefaultContainer()" target="org.apache.shindig.config.JsonContainerConfigTest.createContainer(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1653" source="org.apache.shindig.config.JsonContainerConfigTest.aliasesArePopulated()" target="org.apache.shindig.config.JsonContainerConfigTest.createDefaultContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1654" source="org.apache.shindig.config.JsonContainerConfigTest.aliasesArePopulated()" target="org.apache.shindig.config.JsonContainerConfigTest.createContainer(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1655" source="org.apache.shindig.config.JsonContainerConfigTest.aliasesArePopulated()" target="org.apache.shindig.config.JsonContainerConfig(java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1656" source="org.apache.shindig.config.JsonContainerConfigTest.aliasesArePopulated()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1657" source="org.apache.shindig.config.JsonContainerConfigTest.aliasesArePopulated()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1658" source="org.apache.shindig.config.JsonContainerConfigTest.badConfigThrows()" target="org.apache.shindig.config.JsonContainerConfig(java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1659" source="org.apache.shindig.config.JsonContainerConfigTest.badConfigThrows()" target="org.apache.shindig.config.JsonContainerConfigTest.createContainer(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1660" source="org.apache.shindig.config.JsonContainerConfigTest.badConfigThrows()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1661" source="org.apache.shindig.config.JsonContainerConfigTest.expressionEvaluation()" target="org.apache.shindig.config.JsonContainerConfig(java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1662" source="org.apache.shindig.config.JsonContainerConfigTest.expressionEvaluation()" target="org.apache.shindig.config.JsonContainerConfigTest.createContainer(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1663" source="org.apache.shindig.config.JsonContainerConfigTest.expressionEvaluation()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1664" source="org.apache.shindig.config.JsonContainerConfigTest.expressionEvaluation()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1665" source="org.apache.shindig.config.JsonContainerConfigTest.expressionEvaluationUsingParent()" target="org.apache.shindig.config.JsonContainerConfigTest.createContainer(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1666" source="org.apache.shindig.config.JsonContainerConfigTest.expressionEvaluationUsingParent()" target="org.apache.shindig.config.JsonContainerConfigTest.createDefaultContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1667" source="org.apache.shindig.config.JsonContainerConfigTest.expressionEvaluationUsingParent()" target="org.apache.shindig.config.JsonContainerConfig(java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1668" source="org.apache.shindig.config.JsonContainerConfigTest.expressionEvaluationUsingParent()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1669" source="org.apache.shindig.config.JsonContainerConfigTest.expressionEvaluationUsingParent()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1670" source="org.apache.shindig.config.JsonContainerConfigTest.invalidContainerReturnsNull()" target="org.apache.shindig.config.JsonContainerConfig(java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1671" source="org.apache.shindig.config.JsonContainerConfigTest.invalidContainerReturnsNull()" target="org.apache.shindig.config.JsonContainerConfigTest.createDefaultContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1672" source="org.apache.shindig.config.JsonContainerConfigTest.invalidContainerReturnsNull()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1673" source="org.apache.shindig.config.JsonContainerConfigTest.invalidContainerReturnsNull()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1674" source="org.apache.shindig.config.JsonContainerConfigTest.nullEntryEvaluation()" target="org.apache.shindig.config.JsonContainerConfig(java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1675" source="org.apache.shindig.config.JsonContainerConfigTest.nullEntryEvaluation()" target="org.apache.shindig.config.JsonContainerConfigTest.createContainer(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1676" source="org.apache.shindig.config.JsonContainerConfigTest.nullEntryEvaluation()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1677" source="org.apache.shindig.config.JsonContainerConfigTest.nullEntryEvaluation()" target="org.apache.shindig.config.BasicContainerConfig.getMap(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1678" source="org.apache.shindig.config.JsonContainerConfigTest.parseBasicConfig()" target="org.apache.shindig.config.JsonContainerConfig(java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1679" source="org.apache.shindig.config.JsonContainerConfigTest.parseBasicConfig()" target="org.apache.shindig.config.JsonContainerConfigTest.createDefaultContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1680" source="org.apache.shindig.config.JsonContainerConfigTest.parseBasicConfig()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1681" source="org.apache.shindig.config.JsonContainerConfigTest.parseBasicConfig()" target="org.apache.shindig.config.ContainerConfig.getContainers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1682" source="org.apache.shindig.config.JsonContainerConfigTest.parseBasicConfig()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1683" source="org.apache.shindig.config.JsonContainerConfigTest.parseBasicConfig()" target="org.apache.shindig.config.ContainerConfig.getMap(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1684" source="org.apache.shindig.config.JsonContainerConfigTest.parseWithDefaultInheritance()" target="org.apache.shindig.config.JsonContainerConfigTest.createContainer(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1685" source="org.apache.shindig.config.JsonContainerConfigTest.parseWithDefaultInheritance()" target="org.apache.shindig.config.JsonContainerConfigTest.createDefaultContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1686" source="org.apache.shindig.config.JsonContainerConfigTest.parseWithDefaultInheritance()" target="org.apache.shindig.config.JsonContainerConfig(java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1687" source="org.apache.shindig.config.JsonContainerConfigTest.parseWithDefaultInheritance()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1688" source="org.apache.shindig.config.JsonContainerConfigTest.parseWithDefaultInheritance()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1689" source="org.apache.shindig.config.JsonContainerConfigTest.parseWithDefaultInheritance()" target="org.apache.shindig.config.ContainerConfig.getMap(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1690" source="org.apache.shindig.config.JsonContainerConfigTest.parseWithDefaultInheritance()" target="org.apache.shindig.config.ContainerConfig.getList(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1691" source="org.apache.shindig.config.JsonContainerConfigTest.pathQuery()" target="org.apache.shindig.config.JsonContainerConfig(java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1692" source="org.apache.shindig.config.JsonContainerConfigTest.pathQuery()" target="org.apache.shindig.config.JsonContainerConfigTest.createDefaultContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1693" source="org.apache.shindig.config.JsonContainerConfigTest.pathQuery()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1694" source="org.apache.shindig.config.JsonContainerConfigTest.pathQuery()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1695" source="org.apache.shindig.config.JsonContainerConfigTest.shindigPortTest()" target="org.apache.shindig.config.JsonContainerConfig(java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1696" source="org.apache.shindig.config.JsonContainerConfigTest.shindigPortTest()" target="org.apache.shindig.config.JsonContainerConfigTest.createContainer(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1697" source="org.apache.shindig.config.JsonContainerConfigTest.shindigPortTest()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1698" source="org.apache.shindig.config.JsonContainerConfigTest.shindigPortTest()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1699" source="org.apache.shindig.config.JsonContainerConfigTest.testCommonEnvironmentAddedToAllContainers()" target="org.apache.shindig.config.JsonContainerConfig(java.lang.String,org.apache.shindig.expressions.Expressions)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1700" source="org.apache.shindig.config.JsonContainerConfigTest.testCommonEnvironmentAddedToAllContainers()" target="org.apache.shindig.config.JsonContainerConfigTest.createContainer(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1701" source="org.apache.shindig.config.JsonContainerConfigTest.testCommonEnvironmentAddedToAllContainers()" target="org.apache.shindig.expressions.Expressions.forTesting()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1702" source="org.apache.shindig.config.JsonContainerConfigTest.testCommonEnvironmentAddedToAllContainers()" target="org.apache.shindig.config.ContainerConfig.getString(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1703" source="org.apache.shindig.protocol.model.EnumImpl(E)" target="org.apache.shindig.protocol.model.EnumImpl(E,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1704" source="org.apache.shindig.protocol.model.EnumImpl(E)" target="org.apache.shindig.protocol.model.Enum$EnumKey.getDisplayValue()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1705" source="org.apache.shindig.protocol.model.Model$Car()" target="org.apache.shindig.protocol.model.EnumImpl(E,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1706" source="org.apache.shindig.protocol.model.Model$Car()" target="org.apache.shindig.protocol.model.Model$Passenger(java.lang.String,org.apache.shindig.protocol.model.Model$Gender)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1707" source="org.apache.shindig.protocol.model.Model$ExpensiveCar()" target="org.apache.shindig.protocol.model.Model$Car()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1708" source="org.apache.shindig.protocol.model.Model$Engine#DIESEL" target="org.apache.shindig.protocol.model.Model$Engine(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1709" source="org.apache.shindig.protocol.model.Model$Engine#GAS" target="org.apache.shindig.protocol.model.Model$Engine(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1710" source="org.apache.shindig.protocol.model.Model$Engine#HYBRID" target="org.apache.shindig.protocol.model.Model$Engine(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1711" source="org.apache.shindig.protocol.model.Model$Engine#TURBO" target="org.apache.shindig.protocol.model.Model$Engine(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1712" source="org.apache.shindig.protocol.model.Model$Gender#male" target="org.apache.shindig.protocol.model.Model$Gender()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1713" source="org.apache.shindig.protocol.model.Model$Gender#female" target="org.apache.shindig.protocol.model.Model$Gender()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1714" source="org.apache.shindig.protocol.model.FilterOperation#contains" target="org.apache.shindig.protocol.model.FilterOperation()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1715" source="org.apache.shindig.protocol.model.FilterOperation#equals" target="org.apache.shindig.protocol.model.FilterOperation()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1716" source="org.apache.shindig.protocol.model.FilterOperation#startsWith" target="org.apache.shindig.protocol.model.FilterOperation()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1717" source="org.apache.shindig.protocol.model.FilterOperation#present" target="org.apache.shindig.protocol.model.FilterOperation()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1718" source="org.apache.shindig.protocol.model.SortOrder#ascending" target="org.apache.shindig.protocol.model.SortOrder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1719" source="org.apache.shindig.protocol.model.SortOrder#descending" target="org.apache.shindig.protocol.model.SortOrder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1720" source="org.apache.shindig.protocol.model.Enum$Field#VALUE" target="org.apache.shindig.protocol.model.Enum$Field(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1721" source="org.apache.shindig.protocol.model.Enum$Field#DISPLAY_VALUE" target="org.apache.shindig.protocol.model.Enum$Field(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1722" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParser.convertToFormData(java.util.List)" target="org.apache.shindig.protocol.multipart.CommonsFormDataItem(org.apache.commons.fileupload.FileItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1723" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParser.parse(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParser.convertToFormData(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1724" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1725" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.build()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.write(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1726" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFileItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.writeBoundary()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1727" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFileItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.write(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1728" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFormField(java.lang.String,java.lang.String)" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFormField(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1729" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFormField(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.writeBoundary()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1730" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFormField(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.write(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1731" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.writeBoundary()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.write(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1732" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.setUp()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParser()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1733" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.setupRequest(byte[],java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1734" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.setupRequest(byte[],java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setPostData(byte[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1735" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.setupRequest(byte[],java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setContentType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1736" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testIsMultipartContent()" target="org.apache.shindig.common.testing.FakeHttpServletRequest()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1737" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testIsMultipartContent()" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setMethod(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1738" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testIsMultipartContent()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.isMultipartContent(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1739" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testIsMultipartContent()" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setContentType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1740" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testMultipleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1741" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testMultipleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFileItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1742" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testMultipleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFormField(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1743" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testMultipleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.setupRequest(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1744" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testMultipleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.build()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1745" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testMultipleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1746" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testMultipleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.parse(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1747" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testMultipleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.FormDataItem.isFormField()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1748" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testMultipleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.FormDataItem.getFieldName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1749" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testMultipleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.FormDataItem.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1750" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testMultipleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1751" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testMultipleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1752" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItem()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1753" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItem()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFileItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1754" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItem()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.setupRequest(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1755" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItem()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.build()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1756" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItem()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1757" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItem()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.parse(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1758" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItem()" target="org.apache.shindig.protocol.multipart.FormDataItem.isFormField()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1759" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItem()" target="org.apache.shindig.protocol.multipart.FormDataItem.getFieldName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1760" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItem()" target="org.apache.shindig.protocol.multipart.FormDataItem.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1761" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItem()" target="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1762" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItem()" target="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1763" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1764" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFileItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1765" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFormField(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1766" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.setupRequest(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1767" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.build()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1768" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1769" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.parse(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1770" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.FormDataItem.isFormField()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1771" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.FormDataItem.getFieldName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1772" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.FormDataItem.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1773" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1774" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleFileItemAndRequest()" target="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1775" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1776" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.addFormField(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1777" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.setupRequest(byte[],java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1778" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.build()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1779" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleRequest()" target="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest$MultipartFormBuilder.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1780" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleRequest()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.parse(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1781" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleRequest()" target="org.apache.shindig.protocol.multipart.FormDataItem.isFormField()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1782" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleRequest()" target="org.apache.shindig.protocol.multipart.FormDataItem.getFieldName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1783" source="org.apache.shindig.protocol.multipart.DefaultMultipartFormParserTest.testSingleRequest()" target="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1784" source="org.apache.shindig.protocol.conversion.xstream.DataCollectionConverter.unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)" target="org.apache.shindig.protocol.DataCollection(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1785" source="org.apache.shindig.protocol.conversion.xstream.DataCollectionConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)" target="org.apache.shindig.protocol.DataCollection.getEntry()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1786" source="org.apache.shindig.protocol.conversion.xstream.ExtendableBeanConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)" target="org.apache.shindig.protocol.conversion.xstream.ExtendableBeanConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1787" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter(com.thoughtworks.xstream.mapper.Mapper,com.google.inject.Injector)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter(com.thoughtworks.xstream.mapper.Mapper,org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1788" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter(com.thoughtworks.xstream.mapper.Mapper,com.google.inject.Injector)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider(com.google.inject.Injector)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1789" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.getPropertyType(java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1790" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.instantiateNewInstance(com.thoughtworks.xstream.converters.UnmarshallingContext)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.newInstance(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1791" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.instantiateNewInstance(com.thoughtworks.xstream.converters.UnmarshallingContext)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1792" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.propertyDefinedInClass(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1793" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1794" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.writeProperty(java.lang.Object,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1795" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter$1.visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter$1.writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1796" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.visitSerializableProperties(java.lang.Object,org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider$Visitor)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1797" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1798" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanConverter$1.writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1799" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider(com.google.inject.Injector)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider(com.google.inject.Injector,java.util.Comparator)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1800" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.propertyDefinedInClass(java.lang.String,java.lang.Class)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.getProperty(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1801" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.propertyWriteable(java.lang.String,java.lang.Class)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.getProperty(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1802" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.getPropertyType(java.lang.Object,java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.getProperty(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1803" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.getSerializableProperties(java.lang.Object)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.canStreamProperty(java.beans.PropertyDescriptor)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1804" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.visitSerializableProperties(java.lang.Object,org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider$Visitor)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.getSerializableProperties(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1805" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.visitSerializableProperties(java.lang.Object,org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider$Visitor)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider$Visitor.shouldVisit(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1806" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.visitSerializableProperties(java.lang.Object,org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider$Visitor)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider$Visitor.visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1807" source="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.writeProperty(java.lang.Object,java.lang.String,java.lang.Object)" target="org.apache.shindig.protocol.conversion.xstream.GuiceBeanProvider.getProperty(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1808" source="org.apache.shindig.protocol.conversion.xstream.InterfaceClassMapper.getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.ImplicitCollectionFieldMapping.matches(java.lang.Class,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1809" source="org.apache.shindig.protocol.conversion.xstream.InterfaceClassMapper.serializedClass(java.lang.Class)" target="org.apache.shindig.protocol.conversion.xstream.WriterStack.peek()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1810" source="org.apache.shindig.protocol.conversion.xstream.InterfaceClassMapper.serializedClass(java.lang.Class)" target="org.apache.shindig.protocol.conversion.xstream.ClassFieldMapping.matches(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1811" source="org.apache.shindig.protocol.conversion.xstream.InterfaceClassMapper.serializedClass(java.lang.Class)" target="org.apache.shindig.protocol.conversion.xstream.ClassFieldMapping.getElementName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1812" source="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasingMapper(com.thoughtworks.xstream.mapper.Mapper,org.apache.shindig.protocol.conversion.xstream.WriterStack,java.util.List)" target="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasMapping.getFieldName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1813" source="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasingMapper(com.thoughtworks.xstream.mapper.Mapper,org.apache.shindig.protocol.conversion.xstream.WriterStack,java.util.List)" target="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasMapping.getAlias()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1814" source="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasingMapper.realMember(java.lang.Class,java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasMapping.getType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1815" source="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasingMapper.realMember(java.lang.Class,java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasMapping.getFieldName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1816" source="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasingMapper.serializedMember(java.lang.Class,java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasMapping.getParent()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1817" source="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasingMapper.serializedMember(java.lang.Class,java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasMapping.getType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1818" source="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasingMapper.serializedMember(java.lang.Class,java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasMapping.getAlias()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1819" source="org.apache.shindig.protocol.conversion.xstream.InterfaceFieldAliasingMapper.serializedMember(java.lang.Class,java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.WriterStack.peek()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1820" source="org.apache.shindig.protocol.conversion.xstream.RestfullCollectionConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)" target="org.apache.shindig.protocol.RestfulCollection.getItemsPerPage()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1821" source="org.apache.shindig.protocol.conversion.xstream.RestfullCollectionConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)" target="org.apache.shindig.protocol.RestfulCollection.getStartIndex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1822" source="org.apache.shindig.protocol.conversion.xstream.RestfullCollectionConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)" target="org.apache.shindig.protocol.RestfulCollection.getTotalResults()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1823" source="org.apache.shindig.protocol.conversion.xstream.RestfullCollectionConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)" target="org.apache.shindig.protocol.RestfulCollection.isFiltered()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1824" source="org.apache.shindig.protocol.conversion.xstream.RestfullCollectionConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)" target="org.apache.shindig.protocol.RestfulCollection.isSorted()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1825" source="org.apache.shindig.protocol.conversion.xstream.RestfullCollectionConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)" target="org.apache.shindig.protocol.RestfulCollection.isUpdatedSince()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1826" source="org.apache.shindig.protocol.conversion.xstream.RestfullCollectionConverter.marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)" target="org.apache.shindig.protocol.RestfulCollection.getList()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1827" source="org.apache.shindig.protocol.conversion.xstream.StackDriver.createWriter(java.io.OutputStream)" target="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper(com.thoughtworks.xstream.io.HierarchicalStreamWriter,org.apache.shindig.protocol.conversion.xstream.WriterStack,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1828" source="org.apache.shindig.protocol.conversion.xstream.StackDriver.createWriter(java.io.Writer)" target="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper(com.thoughtworks.xstream.io.HierarchicalStreamWriter,org.apache.shindig.protocol.conversion.xstream.WriterStack,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1829" source="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.translateName(java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.WriterStack.peekNamespace()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1830" source="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.translateName(java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.NamespaceSet.getElementName(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1831" source="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.addNamespace(java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.WriterStack.peekNamespace()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1832" source="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.addNamespace(java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.NamespaceSet.nameSpaceEntrySet()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1833" source="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.addNamespace(java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.WriterStack.push(java.lang.String,org.apache.shindig.protocol.conversion.xstream.NamespaceSet)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1834" source="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.endNode()" target="org.apache.shindig.protocol.conversion.xstream.WriterStack.pop()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1835" source="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.startNode(java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.translateName(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1836" source="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.startNode(java.lang.String)" target="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.addNamespace(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1837" source="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.startNode(java.lang.String,java.lang.Class)" target="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.translateName(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1838" source="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.startNode(java.lang.String,java.lang.Class)" target="org.apache.shindig.protocol.conversion.xstream.StackWriterWrapper.addNamespace(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1839" source="org.apache.shindig.protocol.conversion.xstream.ThreadSafeWriterStack#stackHolder" target="org.apache.shindig.protocol.conversion.xstream.ThreadSafeWriterStack$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1840" source="org.apache.shindig.protocol.conversion.xstream.ThreadSafeWriterStack.peek()" target="org.apache.shindig.protocol.conversion.xstream.ThreadSafeWriterStack.peek(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1841" source="org.apache.shindig.protocol.conversion.xstream.ThreadSafeWriterStack.peekNamespace()" target="org.apache.shindig.protocol.conversion.xstream.ThreadSafeWriterStack.peek(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1842" source="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration$ConverterSet#MAP" target="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration$ConverterSet()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1843" source="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration$ConverterSet#COLLECTION" target="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration$ConverterSet()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1844" source="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration$ConverterSet#DEFAULT" target="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration$ConverterSet()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1845" source="org.apache.shindig.protocol.conversion.BeanDelegator$DelegateInvocationHandler(java.lang.Object)" target="org.apache.shindig.protocol.conversion.BeanDelegator$DelegateInvocationHandler(java.lang.Object,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1846" source="org.apache.shindig.protocol.conversion.BeanDelegator$DelegateInvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1847" source="org.apache.shindig.protocol.conversion.BeanDelegator$DelegateInvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" target="org.apache.shindig.protocol.conversion.BeanDelegator.getParameterizedReturnType(java.lang.reflect.Method)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1848" source="org.apache.shindig.protocol.conversion.BeanDelegator()" target="org.apache.shindig.protocol.conversion.BeanDelegator(java.util.Map,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1849" source="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class)" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1850" source="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class,java.util.Map)" target="org.apache.shindig.protocol.conversion.BeanDelegator.normalizeFields(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1851" source="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class,java.util.Map)" target="org.apache.shindig.protocol.conversion.BeanDelegator$NullClass()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1852" source="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class,java.util.Map)" target="org.apache.shindig.protocol.conversion.BeanDelegator.convertEnum(java.lang.Enum)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1853" source="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class,java.util.Map)" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1854" source="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class,java.util.Map)" target="org.apache.shindig.protocol.conversion.BeanDelegator$DelegateInvocationHandler(java.lang.Object,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1855" source="org.apache.shindig.protocol.conversion.BeanDelegator.validateTypes(java.lang.reflect.Type,java.lang.reflect.Type)" target="org.apache.shindig.protocol.conversion.BeanDelegator.validateTypes(java.lang.reflect.Type,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1856" source="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object)" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1857" source="org.apache.shindig.protocol.conversion.BeanDelegator.normalizeFields(java.util.Map)" target="org.apache.shindig.protocol.conversion.BeanDelegator.normalizeName(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1858" source="org.apache.shindig.protocol.conversion.BeanDelegator.normalizeFields(java.util.Map)" target="org.apache.shindig.protocol.conversion.BeanDelegator.nullable(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1859" source="org.apache.shindig.protocol.conversion.BeanDelegator.validate()" target="org.apache.shindig.protocol.conversion.BeanDelegator.validate(java.lang.Class,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1860" source="org.apache.shindig.protocol.conversion.BeanDelegator.validate(java.lang.Class,java.lang.Class)" target="org.apache.shindig.protocol.conversion.BeanDelegator.validateTypes(java.lang.reflect.Type,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1861" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean$RealStyle#R_A" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean$RealStyle()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1862" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean$RealStyle#R_B" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean$RealStyle()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1863" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface$Style#A" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface$Style()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1864" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface$Style#B" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface$Style()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1865" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.createSimpleDelegator()" target="org.apache.shindig.protocol.conversion.BeanDelegator(java.util.Map,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1866" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.setUp()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest.createSimpleDelegator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1867" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.setUp()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1868" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.setUp()" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1869" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.tesValidate()" target="org.apache.shindig.protocol.conversion.BeanDelegator.validate()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1870" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanList()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setBeanList(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1871" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanList()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getBeanList()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1872" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanList()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1873" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanList()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setS(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1874" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanList()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.getS()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1875" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanList()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getS()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1876" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setBeanMap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1877" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getBeanMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1878" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1879" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setS(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1880" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.getS()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1881" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testBeanMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getS()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1882" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testExtraFields()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$TokenData()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1883" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testExtraFields()" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1884" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testExtraFields()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$TokenData.getId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1885" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testExtraFields()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$TokenInter.getId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1886" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testExtraFields()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$TokenInter.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1887" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testExtraFieldsBadCase()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$TokenData()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1888" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testExtraFieldsBadCase()" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1889" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testExtraFieldsBadCase()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$TokenData.getId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1890" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testExtraFieldsBadCase()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$TokenInter.getId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1891" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testExtraFieldsBadCase()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$TokenInter.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1892" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testPrivateAccess()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getPrivateData()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1893" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testSimpleBean()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setS(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1894" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testSimpleBean()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getS()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1895" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testSimpleBean()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.setI(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1896" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testSimpleBean()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getI()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1897" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testSimpleBean()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.getI()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1898" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testSimpleBean()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setStyle(org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean$RealStyle)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1899" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testSimpleBean()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getStyle()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1900" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testStringList()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getList()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1901" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testStringList()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setList(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1902" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testStringMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1903" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testStringMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setMap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1904" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testUnimplementedFunction()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getUnknown()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1905" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testValidateGoodBean()" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1906" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testValidateGoodBean()" target="org.apache.shindig.protocol.conversion.BeanDelegator.validateDelegator(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1907" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testValidateMissingField()" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1908" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testValidateMissingField()" target="org.apache.shindig.protocol.conversion.BeanDelegator.validateDelegator(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1909" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testValidateWrongtype()" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object,java.lang.Class,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1910" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testValidateWrongtype()" target="org.apache.shindig.protocol.conversion.BeanDelegator.validateDelegator(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1911" source="org.apache.shindig.protocol.conversion.BeanDelegatorTest.testWrontType()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getWrongType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1912" source="org.apache.shindig.protocol.conversion.BeanFilter$FilterInvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" target="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1913" source="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set)" target="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1914" source="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set,java.lang.String)" target="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1915" source="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set,java.lang.String)" target="org.apache.shindig.protocol.conversion.BeanFilter$FilterInvocationHandler(java.lang.Object,java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1916" source="org.apache.shindig.protocol.conversion.BeanFilter.getBeanFields(java.lang.Class,int)" target="org.apache.shindig.protocol.conversion.BeanFilter.getBeanFields(java.lang.Class,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1917" source="org.apache.shindig.protocol.conversion.BeanFilterTest.setUp()" target="org.apache.shindig.protocol.conversion.BeanFilter()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1918" source="org.apache.shindig.protocol.conversion.BeanFilterTest.setUp()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest.createSimpleDelegator()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1919" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testInt()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1920" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testInt()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setI(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1921" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testInt()" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1922" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testInt()" target="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1923" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testInt()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getI()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1924" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testList()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1925" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testList()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setList(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1926" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testList()" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1927" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testList()" target="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1928" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testList()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getList()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1929" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testList()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.getList()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1930" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testListFields()" target="org.apache.shindig.protocol.conversion.BeanFilter.getBeanFields(java.lang.Class,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1931" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1932" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setS(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1933" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setBeanMap(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1934" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setList(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1935" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testMap()" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1936" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testMap()" target="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1937" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getBeanMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1938" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getS()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1939" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getList()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1940" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testMap()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.getBeanMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1941" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testNull()" target="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1942" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testProcessFields()" target="org.apache.shindig.protocol.conversion.BeanFilter.processBeanFields(java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1943" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testSimple()" target="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1944" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testString()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1945" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testString()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBean.setS(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1946" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testString()" target="org.apache.shindig.protocol.conversion.BeanDelegator.createDelegator(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1947" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testString()" target="org.apache.shindig.protocol.conversion.BeanFilter.createFilteredBean(java.lang.Object,java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1948" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testString()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getS()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1949" source="org.apache.shindig.protocol.conversion.BeanFilterTest.testString()" target="org.apache.shindig.protocol.conversion.BeanDelegatorTest$SimpleBeanInterface.getRequired()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1950" source="org.apache.shindig.protocol.conversion.BeanJsonConverter$1.load(java.lang.Class)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.getPropertyName(java.lang.reflect.Method)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1951" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.Class)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1952" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.reflect.Type)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.Object,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1953" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertGeneric(java.lang.Object,java.lang.reflect.ParameterizedType)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToSet(org.json.JSONArray,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1954" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertGeneric(java.lang.Object,java.lang.reflect.ParameterizedType)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToList(org.json.JSONArray,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1955" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertGeneric(java.lang.Object,java.lang.reflect.ParameterizedType)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToMap(org.json.JSONObject,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1956" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertGeneric(java.lang.Object,java.lang.reflect.ParameterizedType)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToOsEnum(org.json.JSONObject,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1957" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertGeneric(java.lang.Object,java.lang.reflect.ParameterizedType)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToClass(org.json.JSONObject,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1958" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToClass(org.json.JSONObject,java.lang.Class)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.Object,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1959" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.Object,java.lang.reflect.Type)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToMap(org.json.JSONObject,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1960" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.Object,java.lang.reflect.Type)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToList(org.json.JSONArray,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1961" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.Object,java.lang.reflect.Type)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertGeneric(java.lang.Object,java.lang.reflect.ParameterizedType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1962" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.Object,java.lang.reflect.Type)" target="org.apache.shindig.common.uri.Uri.parse(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1963" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.Object,java.lang.reflect.Type)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToSet(org.json.JSONArray,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1964" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.Object,java.lang.reflect.Type)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToEnum(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1965" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.Object,java.lang.reflect.Type)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToClass(org.json.JSONObject,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1966" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToString(java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.serialize(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1967" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToList(org.json.JSONArray,java.lang.reflect.Type)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.Object,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1968" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToMap(org.json.JSONObject,java.lang.reflect.Type)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.Object,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1969" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToSet(org.json.JSONArray,java.lang.reflect.Type)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToList(org.json.JSONArray,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1970" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToOsEnum(org.json.JSONObject,java.lang.Class)" target="org.apache.shindig.protocol.model.Enum$Field.toString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1971" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToOsEnum(org.json.JSONObject,java.lang.Class)" target="org.apache.shindig.protocol.model.EnumImpl(E,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1972" source="org.apache.shindig.protocol.conversion.BeanJsonConverter.append(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.common.JsonSerializer.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1973" source="org.apache.shindig.protocol.conversion.BeanJsonConverterInjectedClassTest.setUp()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter(com.google.inject.Injector)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1974" source="org.apache.shindig.protocol.conversion.BeanJsonConverterInjectedClassTest.setUp()" target="org.apache.shindig.protocol.conversion.BeanJsonConverterInjectedClassTest$TestModule()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1975" source="org.apache.shindig.protocol.conversion.BeanJsonConverterInjectedClassTest.testJsonToObject()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1976" source="org.apache.shindig.protocol.conversion.BeanJsonConverterInjectedClassTest.testJsonToObject()" target="org.apache.shindig.protocol.conversion.BeanJsonConverterInjectedClassTest$TestObject.getX()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1977" source="org.apache.shindig.protocol.conversion.BeanJsonConverterInjectedClassTest.testJsonToObject()" target="org.apache.shindig.protocol.conversion.BeanJsonConverterInjectedClassTest$TestObject.getY()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1978" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$TestObject$TestEnum#foo" target="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$TestObject$TestEnum()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1979" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$TestObject$TestEnum#bar" target="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$TestObject$TestEnum()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1980" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$TestObject$TestEnum#baz" target="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$TestObject$TestEnum()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1981" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.setUp()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter(com.google.inject.Injector)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1982" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testEmptyExtendableBean()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1983" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testEmptyJsonMap()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1984" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testEmptyJsonMap()" target="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$4()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1985" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testGetPropertyNameOfBridgeMethod()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.getPropertyName(java.lang.reflect.Method)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1986" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToCar()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1987" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToCar()" target="org.apache.shindig.protocol.model.Model$Car.getEngine()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1988" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToCar()" target="org.apache.shindig.protocol.model.Enum.getValue()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1989" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToCar()" target="org.apache.shindig.protocol.model.Model$Car.getParkingTickets()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1990" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToCar()" target="org.apache.shindig.protocol.model.Model$Car.getPassengers()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1991" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToCar()" target="org.apache.shindig.protocol.model.Model$Passenger.getGender()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1992" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToCar()" target="org.apache.shindig.protocol.model.Model$Passenger.getName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1993" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToMap()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1994" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToMap()" target="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1995" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToMapWithConversion()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1996" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToMapWithConversion()" target="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$2()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1997" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToNestedGeneric()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1998" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToNestedGeneric()" target="org.apache.shindig.protocol.conversion.BeanJsonConverterTest$3()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e1999" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToObject()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2000" source="org.apache.shindig.protocol.conversion.BeanJsonConverterTest.testJsonToPrimitives()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2001" source="org.apache.shindig.protocol.conversion.BeanXStreamConverter(org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration)" target="org.apache.shindig.protocol.conversion.xstream.ThreadSafeWriterStack()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2002" source="org.apache.shindig.protocol.conversion.BeanXStreamConverter(org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration)" target="org.apache.shindig.protocol.conversion.xstream.StackDriver(com.thoughtworks.xstream.io.HierarchicalStreamDriver,org.apache.shindig.protocol.conversion.xstream.WriterStack,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2003" source="org.apache.shindig.protocol.conversion.BeanXStreamConverter(org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration)" target="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration.getNameSpaces()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2004" source="org.apache.shindig.protocol.conversion.BeanXStreamConverter(org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration)" target="org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration.getConverterConfig(org.apache.shindig.protocol.conversion.xstream.XStreamConfiguration$ConverterSet,com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.io.HierarchicalStreamDriver,org.apache.shindig.protocol.conversion.xstream.WriterStack)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2005" source="org.apache.shindig.protocol.conversion.BeanXStreamConverter.convertToString(java.lang.Object)" target="org.apache.shindig.protocol.conversion.BeanXStreamConverter.convertToXml(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2006" source="org.apache.shindig.protocol.conversion.BeanXStreamConverter.convertToXml(java.lang.Object)" target="org.apache.shindig.protocol.conversion.xstream.WriterStack.reset()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2007" source="org.apache.shindig.protocol.conversion.BeanXStreamConverter.convertToXml(java.lang.Object)" target="org.apache.shindig.protocol.conversion.xstream.InterfaceClassMapper.setBaseObject(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2008" source="org.apache.shindig.protocol.conversion.BeanXStreamConverter.append(java.lang.Appendable,java.lang.Object)" target="org.apache.shindig.protocol.conversion.BeanXStreamConverter.convertToString(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2009" source="org.apache.shindig.protocol.ApiServlet()" target="org.apache.shindig.common.servlet.InjectedServlet()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2010" source="org.apache.shindig.protocol.ApiServlet.getSecurityToken(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.auth.AuthInfoUtil.getSecurityTokenFromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2011" source="org.apache.shindig.protocol.ApiServlet.getResponseItem(java.util.concurrent.Future)" target="org.apache.shindig.protocol.ResponseItem(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2012" source="org.apache.shindig.protocol.ApiServlet.getResponseItem(java.util.concurrent.Future)" target="org.apache.shindig.protocol.ApiServlet.responseItemFromException(java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2013" source="org.apache.shindig.protocol.ApiServlet.responseItemFromException(java.lang.Throwable)" target="org.apache.shindig.protocol.ResponseItem(int,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2014" source="org.apache.shindig.protocol.ApiServlet.responseItemFromException(java.lang.Throwable)" target="org.apache.shindig.protocol.ProtocolException.getCode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2015" source="org.apache.shindig.protocol.ApiServlet.responseItemFromException(java.lang.Throwable)" target="org.apache.shindig.protocol.ProtocolException.getResponse()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2016" source="org.apache.shindig.protocol.ApiServlet.responseItemFromException(java.lang.Throwable)" target="org.apache.shindig.protocol.ResponseItem(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2017" source="org.apache.shindig.protocol.ApiServlet.init(javax.servlet.ServletConfig)" target="org.apache.shindig.common.servlet.InjectedServlet.init(javax.servlet.ServletConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2018" source="org.apache.shindig.protocol.ApiServlet.init(javax.servlet.ServletConfig)" target="org.apache.shindig.protocol.ApiServlet$2()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2019" source="org.apache.shindig.protocol.ApiServlet.init(javax.servlet.ServletConfig)" target="org.apache.shindig.protocol.HandlerRegistry.addHandlers(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2020" source="org.apache.shindig.protocol.ApiServlet.init(javax.servlet.ServletConfig)" target="org.apache.shindig.protocol.SystemHandler(org.apache.shindig.protocol.HandlerRegistry)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2021" source="org.apache.shindig.protocol.ApiServlet.sendSecurityError(javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ApiServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2022" source="org.apache.shindig.protocol.ApiServlet.sendSecurityError(javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ResponseItem(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2023" source="org.apache.shindig.protocol.BaseRequestItem(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanJsonConverter)" target="org.apache.shindig.protocol.BaseRequestItem.setParameter(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2024" source="org.apache.shindig.protocol.BaseRequestItem(org.json.JSONObject,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanJsonConverter)" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2025" source="org.apache.shindig.protocol.BaseRequestItem.getOptionalTypedParameter(java.lang.String,java.lang.Class)" target="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2026" source="org.apache.shindig.protocol.BaseRequestItem.getOptionalTypedParameter(java.lang.String,java.lang.Class)" target="org.apache.shindig.protocol.conversion.BeanConverter.convertToObject(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2027" source="org.apache.shindig.protocol.BaseRequestItem.getOptionalTypedParameter(java.lang.String,java.lang.Class)" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2028" source="org.apache.shindig.protocol.BaseRequestItem.getTypedParameter(java.lang.String,java.lang.Class)" target="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2029" source="org.apache.shindig.protocol.BaseRequestItem.getTypedParameter(java.lang.String,java.lang.Class)" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2030" source="org.apache.shindig.protocol.BaseRequestItem.getTypedParameter(java.lang.String,java.lang.Class)" target="org.apache.shindig.protocol.conversion.BeanConverter.convertToObject(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2031" source="org.apache.shindig.protocol.BaseRequestItem.getTypedRequest(java.lang.Class)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToObject(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2032" source="org.apache.shindig.protocol.BaseRequestItem.getTypedRequest(java.lang.Class)" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2033" source="org.apache.shindig.protocol.BaseRequestItem.getCount()" target="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2034" source="org.apache.shindig.protocol.BaseRequestItem.getCount()" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2035" source="org.apache.shindig.protocol.BaseRequestItem.getStartIndex()" target="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2036" source="org.apache.shindig.protocol.BaseRequestItem.getStartIndex()" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2037" source="org.apache.shindig.protocol.BaseRequestItem.getAttribute(java.lang.String)" target="org.apache.shindig.protocol.BaseRequestItem.getAttributeMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2038" source="org.apache.shindig.protocol.BaseRequestItem.getAppId()" target="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2039" source="org.apache.shindig.protocol.BaseRequestItem.getAppId()" target="org.apache.shindig.auth.SecurityToken.getAppId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2040" source="org.apache.shindig.protocol.BaseRequestItem.getFilterBy()" target="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2041" source="org.apache.shindig.protocol.BaseRequestItem.getFilterValue()" target="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2042" source="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String,java.lang.String)" target="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2043" source="org.apache.shindig.protocol.BaseRequestItem.getSortBy()" target="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2044" source="org.apache.shindig.protocol.BaseRequestItem.getUpdatedSince()" target="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2045" source="org.apache.shindig.protocol.BaseRequestItem.getListParameter(java.lang.String)" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2046" source="org.apache.shindig.protocol.BaseRequestItem.getFields()" target="org.apache.shindig.protocol.BaseRequestItem.getFields(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2047" source="org.apache.shindig.protocol.BaseRequestItem.getFields(java.util.Set)" target="org.apache.shindig.protocol.BaseRequestItem.getListParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2048" source="org.apache.shindig.protocol.BaseRequestItem.getFilterOperation()" target="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2049" source="org.apache.shindig.protocol.BaseRequestItem.getFilterOperation()" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2050" source="org.apache.shindig.protocol.BaseRequestItem.getSortOrder()" target="org.apache.shindig.protocol.BaseRequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2051" source="org.apache.shindig.protocol.BaseRequestItem.getSortOrder()" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2052" source="org.apache.shindig.protocol.BaseRequestItem.setAttribute(java.lang.String,java.lang.Object)" target="org.apache.shindig.protocol.BaseRequestItem.getAttributeMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2053" source="org.apache.shindig.protocol.BaseRequestItemTest#FAKE_TOKEN" target="org.apache.shindig.common.testing.FakeGadgetToken()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2054" source="org.apache.shindig.protocol.BaseRequestItemTest.setUp()" target="org.apache.shindig.common.testing.FakeGadgetToken.setAppId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2055" source="org.apache.shindig.protocol.BaseRequestItemTest.setUp()" target="org.apache.shindig.common.testing.FakeGadgetToken.setOwnerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2056" source="org.apache.shindig.protocol.BaseRequestItemTest.setUp()" target="org.apache.shindig.common.testing.FakeGadgetToken.setViewerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2057" source="org.apache.shindig.protocol.BaseRequestItemTest.setUp()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter(com.google.inject.Injector)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2058" source="org.apache.shindig.protocol.BaseRequestItemTest.setUp()" target="org.apache.shindig.protocol.BaseRequestItem(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanJsonConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2059" source="org.apache.shindig.protocol.BaseRequestItemTest.testAttributes()" target="org.apache.shindig.protocol.BaseRequestItem.getAttribute(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2060" source="org.apache.shindig.protocol.BaseRequestItemTest.testAttributes()" target="org.apache.shindig.protocol.BaseRequestItem.setAttribute(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2061" source="org.apache.shindig.protocol.BaseRequestItemTest.testCount()" target="org.apache.shindig.protocol.BaseRequestItem.setParameter(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2062" source="org.apache.shindig.protocol.BaseRequestItemTest.testCount()" target="org.apache.shindig.protocol.BaseRequestItem.getCount()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2063" source="org.apache.shindig.protocol.BaseRequestItemTest.testFields()" target="org.apache.shindig.protocol.BaseRequestItem.setParameter(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2064" source="org.apache.shindig.protocol.BaseRequestItemTest.testFields()" target="org.apache.shindig.protocol.BaseRequestItem.getFields()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2065" source="org.apache.shindig.protocol.BaseRequestItemTest.testGetAppId()" target="org.apache.shindig.protocol.BaseRequestItem.setParameter(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2066" source="org.apache.shindig.protocol.BaseRequestItemTest.testGetAppId()" target="org.apache.shindig.protocol.BaseRequestItem.getAppId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2067" source="org.apache.shindig.protocol.BaseRequestItemTest.testGetAppId()" target="org.apache.shindig.auth.AbstractSecurityToken.getAppId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2068" source="org.apache.shindig.protocol.BaseRequestItemTest.testGetInvalidJsonTypedParameter()" target="org.apache.shindig.protocol.BaseRequestItem.setParameter(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2069" source="org.apache.shindig.protocol.BaseRequestItemTest.testGetInvalidJsonTypedParameter()" target="org.apache.shindig.protocol.BaseRequestItem.getTypedParameter(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2070" source="org.apache.shindig.protocol.BaseRequestItemTest.testGetInvalidJsonTypedParameter()" target="org.apache.shindig.protocol.ProtocolException.getCode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2071" source="org.apache.shindig.protocol.BaseRequestItemTest.testGetParameters()" target="org.apache.shindig.protocol.BaseRequestItem.setParameter(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2072" source="org.apache.shindig.protocol.BaseRequestItemTest.testGetParameters()" target="org.apache.shindig.protocol.BaseRequestItem.getParameters()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2073" source="org.apache.shindig.protocol.BaseRequestItemTest.testGetTypedParameter()" target="org.apache.shindig.protocol.BaseRequestItem.setParameter(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2074" source="org.apache.shindig.protocol.BaseRequestItemTest.testGetTypedParameter()" target="org.apache.shindig.protocol.BaseRequestItem.getTypedParameter(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2075" source="org.apache.shindig.protocol.BaseRequestItemTest.testGetTypedParameterEmpty()" target="org.apache.shindig.protocol.BaseRequestItem.getTypedParameter(java.lang.String,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2076" source="org.apache.shindig.protocol.BaseRequestItemTest.testJSONConstructor()" target="org.apache.shindig.protocol.BaseRequestItem(org.json.JSONObject,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanJsonConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2077" source="org.apache.shindig.protocol.BaseRequestItemTest.testJSONConstructor()" target="org.apache.shindig.protocol.BaseRequestItem.getListParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2078" source="org.apache.shindig.protocol.BaseRequestItemTest.testParseCommaSeparatedList()" target="org.apache.shindig.protocol.BaseRequestItem.setParameter(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2079" source="org.apache.shindig.protocol.BaseRequestItemTest.testParseCommaSeparatedList()" target="org.apache.shindig.protocol.BaseRequestItem.getListParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2080" source="org.apache.shindig.protocol.BaseRequestItemTest.testSortOrder()" target="org.apache.shindig.protocol.BaseRequestItem.setParameter(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2081" source="org.apache.shindig.protocol.BaseRequestItemTest.testSortOrder()" target="org.apache.shindig.protocol.BaseRequestItem.getSortOrder()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2082" source="org.apache.shindig.protocol.BaseRequestItemTest.testStartIndex()" target="org.apache.shindig.protocol.BaseRequestItem.setParameter(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2083" source="org.apache.shindig.protocol.BaseRequestItemTest.testStartIndex()" target="org.apache.shindig.protocol.BaseRequestItem.getStartIndex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2084" source="org.apache.shindig.protocol.ContentTypes.extractMimePart(java.lang.String)" target="org.apache.shindig.protocol.ContentTypes$InvalidContentTypeException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2085" source="org.apache.shindig.protocol.ContentTypes.checkContentTypes(java.util.Set,java.lang.String)" target="org.apache.shindig.protocol.ContentTypes$InvalidContentTypeException(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2086" source="org.apache.shindig.protocol.ContentTypes.checkContentTypes(java.util.Set,java.lang.String)" target="org.apache.shindig.protocol.ContentTypes.extractMimePart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2087" source="org.apache.shindig.protocol.ContentTypesTest.testAllowAtom()" target="org.apache.shindig.protocol.ContentTypes.checkContentTypes(java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2088" source="org.apache.shindig.protocol.ContentTypesTest.testAllowJson()" target="org.apache.shindig.protocol.ContentTypes.checkContentTypes(java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2089" source="org.apache.shindig.protocol.ContentTypesTest.testAllowJsonRpc()" target="org.apache.shindig.protocol.ContentTypes.checkContentTypes(java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2090" source="org.apache.shindig.protocol.ContentTypesTest.testAllowMultipart()" target="org.apache.shindig.protocol.ContentTypes.checkContentTypes(java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2091" source="org.apache.shindig.protocol.ContentTypesTest.testAllowXml()" target="org.apache.shindig.protocol.ContentTypes.checkContentTypes(java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2092" source="org.apache.shindig.protocol.ContentTypesTest.testExtractMimePartEmptyString()" target="org.apache.shindig.protocol.ContentTypes.extractMimePart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2093" source="org.apache.shindig.protocol.ContentTypesTest.testExtractMimePartNull()" target="org.apache.shindig.protocol.ContentTypes.extractMimePart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2094" source="org.apache.shindig.protocol.ContentTypesTest.testForbidden()" target="org.apache.shindig.protocol.ContentTypes.checkContentTypes(java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2095" source="org.apache.shindig.protocol.ContentTypesTest.testStrictDisallowUnknown()" target="org.apache.shindig.protocol.ContentTypes.checkContentTypes(java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2096" source="org.apache.shindig.protocol.ContentTypesTest.textExtractMimePart()" target="org.apache.shindig.protocol.ContentTypes.extractMimePart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2097" source="org.apache.shindig.protocol.DataCollectionTest.testBasicMethods()" target="org.apache.shindig.protocol.DataCollection(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2098" source="org.apache.shindig.protocol.DataCollectionTest.testBasicMethods()" target="org.apache.shindig.protocol.DataCollection.getEntry()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2099" source="org.apache.shindig.protocol.DataCollectionTest.testBasicMethods()" target="org.apache.shindig.protocol.DataCollection.setEntry(java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2100" source="org.apache.shindig.protocol.DataServiceServlet()" target="org.apache.shindig.protocol.ApiServlet()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2101" source="org.apache.shindig.protocol.DataServiceServlet.getRestHandler(javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.protocol.HandlerRegistry.getRestHandler(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2102" source="org.apache.shindig.protocol.DataServiceServlet.getConverterForRequest(java.lang.String,java.lang.String)" target="org.apache.shindig.protocol.DataServiceServlet.getConverterForContentType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2103" source="org.apache.shindig.protocol.DataServiceServlet.getConverterForRequest(java.lang.String,java.lang.String)" target="org.apache.shindig.protocol.DataServiceServlet.getConverterForFormat(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2104" source="org.apache.shindig.protocol.DataServiceServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.DataServiceServlet.executeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2105" source="org.apache.shindig.protocol.DataServiceServlet.doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.DataServiceServlet.executeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2106" source="org.apache.shindig.protocol.DataServiceServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ContentTypes.checkContentTypes(java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2107" source="org.apache.shindig.protocol.DataServiceServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.DataServiceServlet.executeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2108" source="org.apache.shindig.protocol.DataServiceServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.DataServiceServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2109" source="org.apache.shindig.protocol.DataServiceServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ResponseItem(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2110" source="org.apache.shindig.protocol.DataServiceServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ContentTypes.checkContentTypes(java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2111" source="org.apache.shindig.protocol.DataServiceServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.DataServiceServlet.executeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2112" source="org.apache.shindig.protocol.DataServiceServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.DataServiceServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2113" source="org.apache.shindig.protocol.DataServiceServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ResponseItem(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2114" source="org.apache.shindig.protocol.DataServiceServlet.executeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ApiServlet.setCharacterEncodings(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2115" source="org.apache.shindig.protocol.DataServiceServlet.executeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ApiServlet.getSecurityToken(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2116" source="org.apache.shindig.protocol.DataServiceServlet.executeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ApiServlet.sendSecurityError(javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2117" source="org.apache.shindig.protocol.DataServiceServlet.executeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.common.servlet.HttpUtil.setCORSheader(javax.servlet.http.HttpServletResponse,java.util.Collection)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2118" source="org.apache.shindig.protocol.DataServiceServlet.executeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.config.ContainerConfig.getList(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2119" source="org.apache.shindig.protocol.DataServiceServlet.executeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.auth.SecurityToken.getContainer()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2120" source="org.apache.shindig.protocol.DataServiceServlet.executeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2121" source="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.protocol.DataServiceServlet.getRestHandler(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2122" source="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.protocol.ContentTypes.extractMimePart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2123" source="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.protocol.DataServiceServlet.getConverterForRequest(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2124" source="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.protocol.DataServiceServlet.getConverterForFormat(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2125" source="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.protocol.RestHandler.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2126" source="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.protocol.ApiServlet.getResponseItem(java.util.concurrent.Future)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2127" source="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.protocol.conversion.BeanConverter.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2128" source="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.protocol.ResponseItem.getErrorCode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2129" source="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.protocol.ResponseItem.getResponse()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2130" source="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.common.servlet.HttpUtil.isJSONP(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2131" source="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.protocol.conversion.BeanConverter.convertToString(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2132" source="org.apache.shindig.protocol.DataServiceServlet.handleSingleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken)" target="org.apache.shindig.protocol.DataServiceServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2133" source="org.apache.shindig.protocol.DataServiceServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.ResponseItem.getErrorMessage()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2134" source="org.apache.shindig.protocol.DataServiceServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.ResponseItem.getErrorCode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2135" source="org.apache.shindig.protocol.DataServiceServletTest#FAKE_GADGET_TOKEN" target="org.apache.shindig.common.testing.FakeGadgetToken.setViewerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2136" source="org.apache.shindig.protocol.DataServiceServletTest.assertConverterForContentType(org.apache.shindig.protocol.conversion.BeanConverter,java.lang.String)" target="org.apache.shindig.protocol.DataServiceServlet.getConverterForContentType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2137" source="org.apache.shindig.protocol.DataServiceServletTest.assertConverterForFormat(org.apache.shindig.protocol.conversion.BeanConverter,java.lang.String)" target="org.apache.shindig.protocol.DataServiceServlet.getConverterForFormat(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2138" source="org.apache.shindig.protocol.DataServiceServletTest.setUp()" target="org.apache.shindig.protocol.DataServiceServlet()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2139" source="org.apache.shindig.protocol.DataServiceServletTest.setUp()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2140" source="org.apache.shindig.protocol.DataServiceServletTest.setUp()" target="org.apache.shindig.protocol.conversion.BeanConverter.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2141" source="org.apache.shindig.protocol.DataServiceServletTest.setUp()" target="org.apache.shindig.protocol.DefaultHandlerRegistry(com.google.inject.Injector,org.apache.shindig.protocol.conversion.BeanJsonConverter,org.apache.shindig.protocol.HandlerExecutionListener)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2142" source="org.apache.shindig.protocol.DataServiceServletTest.setUp()" target="org.apache.shindig.protocol.HandlerExecutionListener$NoOpHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2143" source="org.apache.shindig.protocol.DataServiceServletTest.setUp()" target="org.apache.shindig.protocol.HandlerRegistry.addHandlers(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2144" source="org.apache.shindig.protocol.DataServiceServletTest.setUp()" target="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2145" source="org.apache.shindig.protocol.DataServiceServletTest.setUp()" target="org.apache.shindig.protocol.ApiServlet.setHandlerRegistry(org.apache.shindig.protocol.HandlerRegistry)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2146" source="org.apache.shindig.protocol.DataServiceServletTest.setUp()" target="org.apache.shindig.protocol.ApiServlet.setContainerConfig(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2147" source="org.apache.shindig.protocol.DataServiceServletTest.setUp()" target="org.apache.shindig.protocol.ApiServlet.setJSONPAllowed(java.lang.Boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2148" source="org.apache.shindig.protocol.DataServiceServletTest.setUp()" target="org.apache.shindig.protocol.ApiServlet.setBeanConverters(org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2149" source="org.apache.shindig.protocol.DataServiceServletTest.setupRequest(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2150" source="org.apache.shindig.protocol.DataServiceServletTest.setupRequest(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setPathInfo(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2151" source="org.apache.shindig.protocol.DataServiceServletTest.setupRequest(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setParameter(java.lang.String,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2152" source="org.apache.shindig.protocol.DataServiceServletTest.setupRequest(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setCharacterEncoding(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2153" source="org.apache.shindig.protocol.DataServiceServletTest.setupRequest(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setPostData(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2154" source="org.apache.shindig.protocol.DataServiceServletTest.setupRequest(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setMethod(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2155" source="org.apache.shindig.protocol.DataServiceServletTest.setupRequest(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setAttribute(java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2156" source="org.apache.shindig.protocol.DataServiceServletTest.setupRequest(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.auth.AuthInfoUtil$Attribute.getId()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2157" source="org.apache.shindig.protocol.DataServiceServletTest.setupRequest(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.common.testing.FakeHttpServletRequest.setContentType(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2158" source="org.apache.shindig.protocol.DataServiceServletTest.testDisallowJSONP()" target="org.apache.shindig.protocol.ApiServlet.setJSONPAllowed(java.lang.Boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2159" source="org.apache.shindig.protocol.DataServiceServletTest.testDisallowJSONP()" target="org.apache.shindig.protocol.DataServiceServletTest.verifyHandlerWasFoundForPathInfo(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2160" source="org.apache.shindig.protocol.DataServiceServletTest.testFailedRequest()" target="org.apache.shindig.protocol.DataServiceServletTest.setupRequest(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2161" source="org.apache.shindig.protocol.DataServiceServletTest.testGetConverterForContentType()" target="org.apache.shindig.protocol.DataServiceServletTest.assertConverterForContentType(org.apache.shindig.protocol.conversion.BeanConverter,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2162" source="org.apache.shindig.protocol.DataServiceServletTest.testGetConverterForFormat()" target="org.apache.shindig.protocol.DataServiceServletTest.assertConverterForFormat(org.apache.shindig.protocol.conversion.BeanConverter,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2163" source="org.apache.shindig.protocol.DataServiceServletTest.testOverrideGetWithPost()" target="org.apache.shindig.protocol.DataServiceServletTest.verifyHandlerWasFoundForPathInfo(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2164" source="org.apache.shindig.protocol.DataServiceServletTest.testOverridePostWithGet()" target="org.apache.shindig.protocol.DataServiceServletTest.verifyHandlerWasFoundForPathInfo(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2165" source="org.apache.shindig.protocol.DataServiceServletTest.testUriRecognition()" target="org.apache.shindig.protocol.DataServiceServletTest.verifyHandlerWasFoundForPathInfo(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2166" source="org.apache.shindig.protocol.DataServiceServletTest.verifyHandlerWasFoundForPathInfo(java.lang.String)" target="org.apache.shindig.protocol.DataServiceServletTest.verifyHandlerWasFoundForPathInfo(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2167" source="org.apache.shindig.protocol.DataServiceServletTest.verifyHandlerWasFoundForPathInfo(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.protocol.DataServiceServletTest.setupRequest(java.lang.String,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2168" source="org.apache.shindig.protocol.DataServiceServletTest.verifyHandlerWasFoundForPathInfo(java.lang.String,java.lang.String,java.lang.String)" target="org.apache.shindig.protocol.conversion.BeanJsonConverter.convertToString(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2169" source="org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper.executed(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.HandlerExecutionListener.executed(java.lang.String,java.lang.String,org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2170" source="org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper.executing(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.HandlerExecutionListener.executing(java.lang.String,java.lang.String,org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2171" source="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.call(java.lang.Object,org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.RequestItem.getTypedRequest(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2172" source="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.getRestRequestItem(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanJsonConverter)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.getRequestItem(java.lang.Object,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanJsonConverter,java.lang.reflect.Constructor)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2173" source="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.getRpcRequestItem(org.json.JSONObject,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanJsonConverter)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.getRequestItem(java.lang.Object,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanJsonConverter,java.lang.reflect.Constructor)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2174" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.getRestRequestItem(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanJsonConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2175" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper.executing(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2176" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.call(java.lang.Object,org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2177" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper.executed(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2178" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationWrapper.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2179" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$PartType#CONST" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$PartType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2180" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$PartType#SINGULAR_PARAM" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$PartType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2181" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$PartType#PLURAL_PARAM" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$PartType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2182" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath(java.lang.String,org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$Part(java.lang.String,org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath$PartType)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2183" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath.accept(java.lang.String[])" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2184" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath.accept(java.lang.String[])" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationWrapper(java.util.Map,org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2185" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationHandler.execute(org.json.JSONObject,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.getRpcRequestItem(org.json.JSONObject,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanJsonConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2186" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationHandler.execute(org.json.JSONObject,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper.executing(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2187" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationHandler.execute(org.json.JSONObject,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller.call(java.lang.Object,org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2188" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationHandler.execute(org.json.JSONObject,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper.executed(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2189" source="org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationWrapper.execute(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationHandler.execute(org.json.JSONObject,java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2190" source="org.apache.shindig.protocol.DefaultHandlerRegistry.getRestHandler(java.lang.String,java.lang.String)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath.accept(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2191" source="org.apache.shindig.protocol.DefaultHandlerRegistry.getRestHandler(java.lang.String,java.lang.String)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$ErrorRestHandler(org.apache.shindig.protocol.ProtocolException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2192" source="org.apache.shindig.protocol.DefaultHandlerRegistry.getRestHandler(java.lang.String,java.lang.String)" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2193" source="org.apache.shindig.protocol.DefaultHandlerRegistry.getRpcHandler(org.json.JSONObject)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$ErrorRpcHandler(org.apache.shindig.protocol.ProtocolException)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2194" source="org.apache.shindig.protocol.DefaultHandlerRegistry.getRpcHandler(org.json.JSONObject)" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2195" source="org.apache.shindig.protocol.DefaultHandlerRegistry.getRpcHandler(org.json.JSONObject)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationWrapper(org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationHandler,org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2196" source="org.apache.shindig.protocol.DefaultHandlerRegistry.addHandlers(java.util.Set)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2197" source="org.apache.shindig.protocol.DefaultHandlerRegistry.addHandlers(java.util.Set)" target="org.apache.shindig.protocol.DefaultHandlerRegistry.createRpcHandler(com.google.inject.Provider,org.apache.shindig.protocol.Service,org.apache.shindig.protocol.Operation,java.lang.reflect.Method)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2198" source="org.apache.shindig.protocol.DefaultHandlerRegistry.addHandlers(java.util.Set)" target="org.apache.shindig.protocol.DefaultHandlerRegistry.createRestHandler(com.google.inject.Provider,org.apache.shindig.protocol.Service,org.apache.shindig.protocol.Operation,java.lang.reflect.Method)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2199" source="org.apache.shindig.protocol.DefaultHandlerRegistry.createRestHandler(com.google.inject.Provider,org.apache.shindig.protocol.Service,org.apache.shindig.protocol.Operation,java.lang.reflect.Method)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller(java.lang.reflect.Method,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2200" source="org.apache.shindig.protocol.DefaultHandlerRegistry.createRestHandler(com.google.inject.Provider,org.apache.shindig.protocol.Service,org.apache.shindig.protocol.Operation,java.lang.reflect.Method)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler(org.apache.shindig.protocol.Operation,org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller,com.google.inject.Provider,org.apache.shindig.protocol.conversion.BeanJsonConverter,org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2201" source="org.apache.shindig.protocol.DefaultHandlerRegistry.createRestHandler(com.google.inject.Provider,org.apache.shindig.protocol.Service,org.apache.shindig.protocol.Operation,java.lang.reflect.Method)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper(java.lang.String,java.lang.String,org.apache.shindig.protocol.HandlerExecutionListener)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2202" source="org.apache.shindig.protocol.DefaultHandlerRegistry.createRestHandler(com.google.inject.Provider,org.apache.shindig.protocol.Service,org.apache.shindig.protocol.Operation,java.lang.reflect.Method)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath(java.lang.String,org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2203" source="org.apache.shindig.protocol.DefaultHandlerRegistry.createRpcHandler(com.google.inject.Provider,org.apache.shindig.protocol.Service,org.apache.shindig.protocol.Operation,java.lang.reflect.Method)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller(java.lang.reflect.Method,boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2204" source="org.apache.shindig.protocol.DefaultHandlerRegistry.createRpcHandler(com.google.inject.Provider,org.apache.shindig.protocol.Service,org.apache.shindig.protocol.Operation,java.lang.reflect.Method)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RpcInvocationHandler(org.apache.shindig.protocol.DefaultHandlerRegistry$MethodCaller,com.google.inject.Provider,org.apache.shindig.protocol.conversion.BeanJsonConverter,org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2205" source="org.apache.shindig.protocol.DefaultHandlerRegistry.createRpcHandler(com.google.inject.Provider,org.apache.shindig.protocol.Service,org.apache.shindig.protocol.Operation,java.lang.reflect.Method)" target="org.apache.shindig.protocol.DefaultHandlerRegistry$ExecutionListenerWrapper(java.lang.String,java.lang.String,org.apache.shindig.protocol.HandlerExecutionListener)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2206" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.setUp()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter(com.google.inject.Injector)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2207" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.setUp()" target="org.apache.shindig.protocol.DefaultHandlerRegistry(com.google.inject.Injector,org.apache.shindig.protocol.conversion.BeanJsonConverter,org.apache.shindig.protocol.HandlerExecutionListener)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2208" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.setUp()" target="org.apache.shindig.protocol.HandlerExecutionListener$NoOpHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2209" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.setUp()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.addHandlers(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2210" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.setUp()" target="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2211" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testAddNonService()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.addHandlers(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2212" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testFutureDispatch()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRestHandler(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2213" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testFutureDispatch()" target="org.apache.shindig.protocol.RestHandler.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2214" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testFutureException()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRpcHandler(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2215" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testFutureException()" target="org.apache.shindig.protocol.RpcHandler.execute(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2216" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testGetForAliasHandler()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRestHandler(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2217" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testGetHandlerRPC()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRpcHandler(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2218" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testGetHandlerRest()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRestHandler(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2219" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testNoArgumentClass()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRpcHandler(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2220" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testNoArgumentClass()" target="org.apache.shindig.protocol.RpcHandler.execute(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2221" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testNonFutureDispatch()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRestHandler(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2222" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testNonFutureDispatch()" target="org.apache.shindig.protocol.RestHandler.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2223" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testNonFutureException()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRpcHandler(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2224" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testNonFutureException()" target="org.apache.shindig.protocol.RpcHandler.execute(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2225" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testOverrideHandlerRPC()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRpcHandler(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2226" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testOverrideHandlerRPCName()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRpcHandler(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2227" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testOverrideHandlerRest()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRestHandler(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2228" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRestHandler_serviceDoesntExist()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRestHandler(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2229" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRestHandler_serviceDoesntExist()" target="org.apache.shindig.protocol.RestHandler.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2230" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRestHandler_serviceDoesntExist()" target="org.apache.shindig.protocol.ProtocolException.getCode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2231" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRestPath()" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath(java.lang.String,org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2232" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRestPath()" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath.accept(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2233" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRestPathOrdering()" target="org.apache.shindig.protocol.DefaultHandlerRegistry$RestPath(java.lang.String,org.apache.shindig.protocol.DefaultHandlerRegistry$RestInvocationHandler)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2234" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRestWithInputClassThatIsntRequestItem()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRestHandler(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2235" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRestWithInputClassThatIsntRequestItem()" target="org.apache.shindig.protocol.RestHandler.execute(java.util.Map,java.io.Reader,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2236" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRpcHandler_serviceDoesntExist()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRpcHandler(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2237" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRpcHandler_serviceDoesntExist()" target="org.apache.shindig.protocol.RpcHandler.execute(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2238" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRpcHandler_serviceDoesntExist()" target="org.apache.shindig.protocol.ProtocolException.getCode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2239" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRpcWithInputClassThatIsntRequestItem()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getRpcHandler(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2240" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testRpcWithInputClassThatIsntRequestItem()" target="org.apache.shindig.protocol.RpcHandler.execute(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2241" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testSupportedRestServices()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getSupportedRestServices()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2242" source="org.apache.shindig.protocol.DefaultHandlerRegistryTest.testSupportedRpcServices()" target="org.apache.shindig.protocol.DefaultHandlerRegistry.getSupportedRpcServices()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2243" source="org.apache.shindig.protocol.HandlerPreconditions.requireEmpty(java.util.Collection,java.lang.String)" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2244" source="org.apache.shindig.protocol.HandlerPreconditions.requireNotEmpty(java.util.Collection,java.lang.String)" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2245" source="org.apache.shindig.protocol.HandlerPreconditions.requirePlural(java.util.Collection,java.lang.String)" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2246" source="org.apache.shindig.protocol.HandlerPreconditions.requireSingular(java.util.Collection,java.lang.String)" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2247" source="org.apache.shindig.protocol.JsonRpcServlet()" target="org.apache.shindig.protocol.ApiServlet()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2248" source="org.apache.shindig.protocol.JsonRpcServlet.getErrorJson(org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.ResponseItem.getErrorCode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2249" source="org.apache.shindig.protocol.JsonRpcServlet.getErrorJson(org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.ResponseItem.getErrorMessage()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2250" source="org.apache.shindig.protocol.JsonRpcServlet.getErrorJson(org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.ResponseItem.getResponse()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2251" source="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.ResponseItem.getErrorCode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2252" source="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.JsonRpcServlet.getErrorJson(org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2253" source="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.ResponseItem.getResponse()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2254" source="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.JsonRpcServlet.addResult(java.util.Map,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2255" source="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.DataCollection.getEntry()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2256" source="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.RestfulCollection.getTotalResults()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2257" source="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.RestfulCollection.getList()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2258" source="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.RestfulCollection.getStartIndex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2259" source="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.RestfulCollection.getItemsPerPage()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2260" source="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.RestfulCollection.isFiltered()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2261" source="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.RestfulCollection.isUpdatedSince()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2262" source="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.RestfulCollection.isSorted()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2263" source="org.apache.shindig.protocol.JsonRpcServlet.getPostContent(javax.servlet.http.HttpServletRequest,java.util.Map)" target="org.apache.shindig.protocol.ContentTypes.checkContentTypes(java.util.Set,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2264" source="org.apache.shindig.protocol.JsonRpcServlet.getPostContent(javax.servlet.http.HttpServletRequest,java.util.Map)" target="org.apache.shindig.protocol.multipart.MultipartFormParser.isMultipartContent(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2265" source="org.apache.shindig.protocol.JsonRpcServlet.getPostContent(javax.servlet.http.HttpServletRequest,java.util.Map)" target="org.apache.shindig.protocol.multipart.MultipartFormParser.parse(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2266" source="org.apache.shindig.protocol.JsonRpcServlet.getPostContent(javax.servlet.http.HttpServletRequest,java.util.Map)" target="org.apache.shindig.protocol.multipart.FormDataItem.isFormField()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2267" source="org.apache.shindig.protocol.JsonRpcServlet.getPostContent(javax.servlet.http.HttpServletRequest,java.util.Map)" target="org.apache.shindig.protocol.multipart.FormDataItem.getFieldName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2268" source="org.apache.shindig.protocol.JsonRpcServlet.getPostContent(javax.servlet.http.HttpServletRequest,java.util.Map)" target="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2269" source="org.apache.shindig.protocol.JsonRpcServlet.getPostContent(javax.servlet.http.HttpServletRequest,java.util.Map)" target="org.apache.shindig.protocol.multipart.FormDataItem.getAsString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2270" source="org.apache.shindig.protocol.JsonRpcServlet.getHandler(org.json.JSONObject,javax.servlet.http.HttpServletRequest)" target="org.apache.shindig.protocol.HandlerRegistry.getRpcHandler(org.json.JSONObject)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2271" source="org.apache.shindig.protocol.JsonRpcServlet.dispatch(org.json.JSONObject,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)" target="org.apache.shindig.protocol.JsonRpcServlet.getHandler(org.json.JSONObject,javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2272" source="org.apache.shindig.protocol.JsonRpcServlet.dispatch(org.json.JSONObject,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)" target="org.apache.shindig.protocol.RpcHandler.execute(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2273" source="org.apache.shindig.protocol.JsonRpcServlet.dispatch(org.json.JSONObject,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)" target="org.apache.shindig.protocol.ApiServlet.getResponseItem(java.util.concurrent.Future)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2274" source="org.apache.shindig.protocol.JsonRpcServlet.dispatch(org.json.JSONObject,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)" target="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2275" source="org.apache.shindig.protocol.JsonRpcServlet.dispatch(org.json.JSONObject,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)" target="org.apache.shindig.protocol.conversion.BeanConverter.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2276" source="org.apache.shindig.protocol.JsonRpcServlet.dispatchBatch(org.json.JSONArray,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)" target="org.apache.shindig.protocol.JsonRpcServlet.getHandler(org.json.JSONObject,javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2277" source="org.apache.shindig.protocol.JsonRpcServlet.dispatchBatch(org.json.JSONArray,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)" target="org.apache.shindig.protocol.RpcHandler.execute(java.util.Map,org.apache.shindig.auth.SecurityToken,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2278" source="org.apache.shindig.protocol.JsonRpcServlet.dispatchBatch(org.json.JSONArray,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)" target="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2279" source="org.apache.shindig.protocol.JsonRpcServlet.dispatchBatch(org.json.JSONArray,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)" target="org.apache.shindig.protocol.ApiServlet.getResponseItem(java.util.concurrent.Future)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2280" source="org.apache.shindig.protocol.JsonRpcServlet.dispatchBatch(org.json.JSONArray,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)" target="org.apache.shindig.protocol.conversion.BeanConverter.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2281" source="org.apache.shindig.protocol.JsonRpcServlet.sendBadRequest(java.lang.Throwable,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.JsonRpcServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2282" source="org.apache.shindig.protocol.JsonRpcServlet.sendBadRequest(java.lang.Throwable,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ResponseItem(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2283" source="org.apache.shindig.protocol.JsonRpcServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.conversion.BeanConverter.append(java.lang.Appendable,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2284" source="org.apache.shindig.protocol.JsonRpcServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.JsonRpcServlet.getErrorJson(org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2285" source="org.apache.shindig.protocol.JsonRpcServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)" target="org.apache.shindig.protocol.ResponseItem.getErrorCode()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2286" source="org.apache.shindig.protocol.JsonRpcServlet.sendJsonParseError(org.json.JSONException,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.JsonRpcServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2287" source="org.apache.shindig.protocol.JsonRpcServlet.sendJsonParseError(org.json.JSONException,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ResponseItem(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2288" source="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ApiServlet.setCharacterEncodings(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2289" source="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.JsonRpcServlet.sendError(javax.servlet.http.HttpServletResponse,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2290" source="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ResponseItem(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2291" source="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ApiServlet.getSecurityToken(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2292" source="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.ApiServlet.sendSecurityError(javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2293" source="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.JsonRpcServlet.getPostContent(javax.servlet.http.HttpServletRequest,java.util.Map)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2294" source="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.common.servlet.HttpUtil.isJSONP(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2295" source="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.common.util.JsonConversionUtil.fromRequest(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2296" source="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.JsonRpcServlet.dispatch(org.json.JSONObject,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2297" source="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.JsonRpcServlet.isContentJsonBatch(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2298" source="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.JsonRpcServlet.dispatchBatch(org.json.JSONArray,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shindig.auth.SecurityToken,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2299" source="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.JsonRpcServlet.sendJsonParseError(org.json.JSONException,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2300" source="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" target="org.apache.shindig.protocol.JsonRpcServlet.sendBadRequest(java.lang.Throwable,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2301" source="org.apache.shindig.protocol.JsonRpcServletTest#FAKE_GADGET_TOKEN" target="org.apache.shindig.common.testing.FakeGadgetToken.setViewerId(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2302" source="org.apache.shindig.protocol.JsonRpcServletTest#handler" target="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2303" source="org.apache.shindig.protocol.JsonRpcServletTest.mockFormDataItem(java.lang.String,java.lang.String,byte[],boolean)" target="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2304" source="org.apache.shindig.protocol.JsonRpcServletTest.mockFormDataItem(java.lang.String,java.lang.String,byte[],boolean)" target="org.apache.shindig.protocol.multipart.FormDataItem.getSize()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2305" source="org.apache.shindig.protocol.JsonRpcServletTest.mockFormDataItem(java.lang.String,java.lang.String,byte[],boolean)" target="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2306" source="org.apache.shindig.protocol.JsonRpcServletTest.mockFormDataItem(java.lang.String,java.lang.String,byte[],boolean)" target="org.apache.shindig.protocol.multipart.FormDataItem.getAsString()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2307" source="org.apache.shindig.protocol.JsonRpcServletTest.mockFormDataItem(java.lang.String,java.lang.String,byte[],boolean)" target="org.apache.shindig.protocol.multipart.FormDataItem.getFieldName()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2308" source="org.apache.shindig.protocol.JsonRpcServletTest.mockFormDataItem(java.lang.String,java.lang.String,byte[],boolean)" target="org.apache.shindig.protocol.multipart.FormDataItem.isFormField()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2309" source="org.apache.shindig.protocol.JsonRpcServletTest.mockFormDataItem(java.lang.String,java.lang.String,byte[],boolean)" target="org.apache.shindig.protocol.multipart.FormDataItem.getInputStream()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2310" source="org.apache.shindig.protocol.JsonRpcServletTest$1()" target="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2311" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.JsonRpcServlet()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2312" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.isMultipartContent(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2313" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.JsonRpcServlet.setMultipartFormParser(org.apache.shindig.protocol.multipart.MultipartFormParser)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2314" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.conversion.BeanJsonConverter(com.google.inject.Injector)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2315" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.DefaultHandlerRegistry(com.google.inject.Injector,org.apache.shindig.protocol.conversion.BeanJsonConverter,org.apache.shindig.protocol.HandlerExecutionListener)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2316" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.HandlerExecutionListener$NoOpHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2317" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.HandlerRegistry.addHandlers(java.util.Set)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2318" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.ApiServlet.setHandlerRegistry(org.apache.shindig.protocol.HandlerRegistry)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2319" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.ApiServlet.setBeanConverters(org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanConverter,org.apache.shindig.protocol.conversion.BeanConverter)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2320" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.ApiServlet.setContainerConfig(org.apache.shindig.config.ContainerConfig)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2321" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.ApiServlet.setJSONPAllowed(java.lang.Boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2322" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.TestHandler.setMock(org.apache.shindig.protocol.TestHandler)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2323" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.JsonRpcServletTest$1()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2324" source="org.apache.shindig.protocol.JsonRpcServletTest.setUp()" target="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2325" source="org.apache.shindig.protocol.JsonRpcServletTest.setupRequest(java.lang.String)" target="org.apache.shindig.protocol.JsonRpcServletTest$6()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2326" source="org.apache.shindig.protocol.JsonRpcServletTest.testBasicBatch()" target="org.apache.shindig.protocol.JsonRpcServletTest.setupRequest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2327" source="org.apache.shindig.protocol.JsonRpcServletTest.testBasicBatch()" target="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2328" source="org.apache.shindig.protocol.JsonRpcServletTest.testBasicBatch()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2329" source="org.apache.shindig.protocol.JsonRpcServletTest.testBasicBatch()" target="org.apache.shindig.protocol.JsonRpcServletTest.getOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2330" source="org.apache.shindig.protocol.JsonRpcServletTest.testDisallowJSONP()" target="org.apache.shindig.protocol.ApiServlet.setJSONPAllowed(java.lang.Boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2331" source="org.apache.shindig.protocol.JsonRpcServletTest.testDisallowJSONP()" target="org.apache.shindig.protocol.JsonRpcServletTest.setupRequest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2332" source="org.apache.shindig.protocol.JsonRpcServletTest.testDisallowJSONP()" target="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2333" source="org.apache.shindig.protocol.JsonRpcServletTest.testDisallowJSONP()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2334" source="org.apache.shindig.protocol.JsonRpcServletTest.testDisallowJSONP()" target="org.apache.shindig.protocol.JsonRpcServletTest.getOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2335" source="org.apache.shindig.protocol.JsonRpcServletTest.testFailedRequest()" target="org.apache.shindig.protocol.JsonRpcServletTest.setupRequest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2336" source="org.apache.shindig.protocol.JsonRpcServletTest.testFailedRequest()" target="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2337" source="org.apache.shindig.protocol.JsonRpcServletTest.testFailedRequest()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2338" source="org.apache.shindig.protocol.JsonRpcServletTest.testFailedRequest()" target="org.apache.shindig.protocol.JsonRpcServletTest.getOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2339" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetExecution()" target="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2340" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetExecution()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2341" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetExecution()" target="org.apache.shindig.protocol.JsonRpcServletTest.getOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2342" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseErrorWithData()" target="org.apache.shindig.protocol.ResponseItem(int,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2343" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseErrorWithData()" target="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2344" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseErrorWithData()" target="org.apache.shindig.common.JsonAssert.assertObjectEquals(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2345" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseErrorWithoutData()" target="org.apache.shindig.protocol.ResponseItem(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2346" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseErrorWithoutData()" target="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2347" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseErrorWithoutData()" target="org.apache.shindig.common.JsonAssert.assertObjectEquals(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2348" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseWithKey()" target="org.apache.shindig.protocol.ResponseItem(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2349" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseWithKey()" target="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2350" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseWithKey()" target="org.apache.shindig.common.JsonAssert.assertObjectEquals(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2351" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseWithoutKey()" target="org.apache.shindig.protocol.ResponseItem(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2352" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseWithoutKey()" target="org.apache.shindig.protocol.JsonRpcServlet.getJSONResponse(java.lang.String,org.apache.shindig.protocol.ResponseItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2353" source="org.apache.shindig.protocol.JsonRpcServletTest.testGetJsonResponseWithoutKey()" target="org.apache.shindig.common.JsonAssert.assertObjectEquals(java.lang.Object,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2354" source="org.apache.shindig.protocol.JsonRpcServletTest.testInvalidService()" target="org.apache.shindig.protocol.JsonRpcServletTest.setupRequest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2355" source="org.apache.shindig.protocol.JsonRpcServletTest.testInvalidService()" target="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2356" source="org.apache.shindig.protocol.JsonRpcServletTest.testInvalidService()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2357" source="org.apache.shindig.protocol.JsonRpcServletTest.testInvalidService()" target="org.apache.shindig.protocol.JsonRpcServletTest.getOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2358" source="org.apache.shindig.protocol.JsonRpcServletTest.testMethodRecognition()" target="org.apache.shindig.protocol.JsonRpcServletTest.setupRequest(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2359" source="org.apache.shindig.protocol.JsonRpcServletTest.testMethodRecognition()" target="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2360" source="org.apache.shindig.protocol.JsonRpcServletTest.testMethodRecognition()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2361" source="org.apache.shindig.protocol.JsonRpcServletTest.testMethodRecognition()" target="org.apache.shindig.protocol.JsonRpcServletTest.getOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2362" source="org.apache.shindig.protocol.JsonRpcServletTest$2()" target="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2363" source="org.apache.shindig.protocol.JsonRpcServletTest$2.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.RequestItem.getFormMimePart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2364" source="org.apache.shindig.protocol.JsonRpcServletTest$2.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2365" source="org.apache.shindig.protocol.JsonRpcServletTest$2.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2366" source="org.apache.shindig.protocol.JsonRpcServletTest$2.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.RequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2367" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()" target="org.apache.shindig.protocol.TestHandler.setMock(org.apache.shindig.protocol.TestHandler)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2368" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()" target="org.apache.shindig.protocol.JsonRpcServletTest$2()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2369" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()" target="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2370" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()" target="org.apache.shindig.protocol.RequestItem.getFormMimePart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2371" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()" target="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2372" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()" target="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2373" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()" target="org.apache.shindig.protocol.RequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2374" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()" target="org.apache.shindig.protocol.JsonRpcServletTest.mockFormDataItem(java.lang.String,java.lang.String,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2375" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.isMultipartContent(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2376" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.parse(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2377" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()" target="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2378" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2379" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormData()" target="org.apache.shindig.protocol.JsonRpcServletTest.getOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2380" source="org.apache.shindig.protocol.JsonRpcServletTest$4()" target="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2381" source="org.apache.shindig.protocol.JsonRpcServletTest$4.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.RequestItem.getFormMimePart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2382" source="org.apache.shindig.protocol.JsonRpcServletTest$4.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2383" source="org.apache.shindig.protocol.JsonRpcServletTest$4.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2384" source="org.apache.shindig.protocol.JsonRpcServletTest$4.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.RequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2385" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()" target="org.apache.shindig.protocol.TestHandler.setMock(org.apache.shindig.protocol.TestHandler)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2386" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()" target="org.apache.shindig.protocol.JsonRpcServletTest$4()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2387" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()" target="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2388" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()" target="org.apache.shindig.protocol.RequestItem.getFormMimePart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2389" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()" target="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2390" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()" target="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2391" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()" target="org.apache.shindig.protocol.RequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2392" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()" target="org.apache.shindig.protocol.JsonRpcServletTest.mockFormDataItem(java.lang.String,java.lang.String,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2393" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.isMultipartContent(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2394" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.parse(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2395" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()" target="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2396" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2397" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataOnlyRequestFieldHasContentTypeChecked()" target="org.apache.shindig.protocol.JsonRpcServletTest.getOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2398" source="org.apache.shindig.protocol.JsonRpcServletTest$5()" target="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2399" source="org.apache.shindig.protocol.JsonRpcServletTest$5.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.RequestItem.getFormMimePart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2400" source="org.apache.shindig.protocol.JsonRpcServletTest$5.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2401" source="org.apache.shindig.protocol.JsonRpcServletTest$5.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2402" source="org.apache.shindig.protocol.JsonRpcServletTest$5.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.RequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2403" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataRequestFieldIsSubjectedToContentTypeCheck()" target="org.apache.shindig.protocol.TestHandler.setMock(org.apache.shindig.protocol.TestHandler)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2404" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataRequestFieldIsSubjectedToContentTypeCheck()" target="org.apache.shindig.protocol.JsonRpcServletTest$5()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2405" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataRequestFieldIsSubjectedToContentTypeCheck()" target="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2406" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataRequestFieldIsSubjectedToContentTypeCheck()" target="org.apache.shindig.protocol.RequestItem.getFormMimePart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2407" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataRequestFieldIsSubjectedToContentTypeCheck()" target="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2408" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataRequestFieldIsSubjectedToContentTypeCheck()" target="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2409" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataRequestFieldIsSubjectedToContentTypeCheck()" target="org.apache.shindig.protocol.RequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2410" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataRequestFieldIsSubjectedToContentTypeCheck()" target="org.apache.shindig.protocol.JsonRpcServletTest.mockFormDataItem(java.lang.String,java.lang.String,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2411" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataRequestFieldIsSubjectedToContentTypeCheck()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.isMultipartContent(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2412" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataRequestFieldIsSubjectedToContentTypeCheck()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.parse(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2413" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataRequestFieldIsSubjectedToContentTypeCheck()" target="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2414" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataRequestFieldIsSubjectedToContentTypeCheck()" target="org.apache.shindig.protocol.JsonRpcServletTest.getOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2415" source="org.apache.shindig.protocol.JsonRpcServletTest$3()" target="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2416" source="org.apache.shindig.protocol.JsonRpcServletTest$3.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.RequestItem.getFormMimePart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2417" source="org.apache.shindig.protocol.JsonRpcServletTest$3.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2418" source="org.apache.shindig.protocol.JsonRpcServletTest$3.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2419" source="org.apache.shindig.protocol.JsonRpcServletTest$3.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.RequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2420" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()" target="org.apache.shindig.protocol.TestHandler.setMock(org.apache.shindig.protocol.TestHandler)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2421" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()" target="org.apache.shindig.protocol.JsonRpcServletTest$3()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2422" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()" target="org.apache.shindig.protocol.TestHandler()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2423" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()" target="org.apache.shindig.protocol.RequestItem.getFormMimePart(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2424" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()" target="org.apache.shindig.protocol.multipart.FormDataItem.get()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2425" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()" target="org.apache.shindig.protocol.multipart.FormDataItem.getContentType()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2426" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()" target="org.apache.shindig.protocol.RequestItem.getParameter(java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2427" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()" target="org.apache.shindig.protocol.JsonRpcServletTest.mockFormDataItem(java.lang.String,java.lang.String,byte[],boolean)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2428" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.isMultipartContent(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2429" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()" target="org.apache.shindig.protocol.multipart.MultipartFormParser.parse(javax.servlet.http.HttpServletRequest)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2430" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()" target="org.apache.shindig.protocol.JsonRpcServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2431" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()" target="org.apache.shindig.common.JsonAssert.assertJsonEquals(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2432" source="org.apache.shindig.protocol.JsonRpcServletTest.testPostMultipartFormDataWithRequestFieldHavingNoContentType()" target="org.apache.shindig.protocol.JsonRpcServletTest.getOutput()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2433" source="org.apache.shindig.protocol.ProtocolException(int,java.lang.String)" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2434" source="org.apache.shindig.protocol.ProtocolException(int,java.lang.String,java.lang.Object)" target="org.apache.shindig.protocol.ProtocolException.checkErrorCode(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2435" source="org.apache.shindig.protocol.ProtocolException(int,java.lang.String,java.lang.Throwable)" target="org.apache.shindig.protocol.ProtocolException.checkErrorCode(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2436" source="org.apache.shindig.protocol.ResponseItem(int,java.lang.String)" target="org.apache.shindig.protocol.ResponseItem(int,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2437" source="org.apache.shindig.protocol.RestfulCollection(java.util.List)" target="org.apache.shindig.protocol.RestfulCollection(java.util.List,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2438" source="org.apache.shindig.protocol.RestfulCollection(java.util.List,int,int)" target="org.apache.shindig.protocol.RestfulCollection(java.util.List,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2439" source="org.apache.shindig.protocol.RestfulCollectionTest.testBasicMethods()" target="org.apache.shindig.protocol.RestfulCollection(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2440" source="org.apache.shindig.protocol.RestfulCollectionTest.testBasicMethods()" target="org.apache.shindig.protocol.RestfulCollection.setList(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2441" source="org.apache.shindig.protocol.RestfulCollectionTest.testBasicMethods()" target="org.apache.shindig.protocol.RestfulCollection.setStartIndex(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2442" source="org.apache.shindig.protocol.RestfulCollectionTest.testBasicMethods()" target="org.apache.shindig.protocol.RestfulCollection.setTotalResults(int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2443" source="org.apache.shindig.protocol.RestfulCollectionTest.testBasicMethods()" target="org.apache.shindig.protocol.RestfulCollection.getList()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2444" source="org.apache.shindig.protocol.RestfulCollectionTest.testBasicMethods()" target="org.apache.shindig.protocol.RestfulCollection.getStartIndex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2445" source="org.apache.shindig.protocol.RestfulCollectionTest.testBasicMethods()" target="org.apache.shindig.protocol.RestfulCollection.getTotalResults()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2446" source="org.apache.shindig.protocol.RestfulCollectionTest.testConstructors()" target="org.apache.shindig.protocol.RestfulCollection(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2447" source="org.apache.shindig.protocol.RestfulCollectionTest.testConstructors()" target="org.apache.shindig.protocol.RestfulCollection.getList()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2448" source="org.apache.shindig.protocol.RestfulCollectionTest.testConstructors()" target="org.apache.shindig.protocol.RestfulCollection.getStartIndex()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2449" source="org.apache.shindig.protocol.RestfulCollectionTest.testConstructors()" target="org.apache.shindig.protocol.RestfulCollection.getTotalResults()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2450" source="org.apache.shindig.protocol.RestfulCollectionTest.testConstructors()" target="org.apache.shindig.protocol.RestfulCollection.getItemsPerPage()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2451" source="org.apache.shindig.protocol.RestfulCollectionTest.testConstructors()" target="org.apache.shindig.protocol.RestfulCollection(java.util.List,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2452" source="org.apache.shindig.protocol.RestfulCollectionTest.testMapMethods()" target="org.apache.shindig.protocol.RestfulCollection(java.util.List)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2453" source="org.apache.shindig.protocol.RestfulCollectionTest.testMapMethods()" target="org.apache.shindig.protocol.RestfulCollection(java.util.List,int,int,int)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2454" source="org.apache.shindig.protocol.SystemHandler.listMethods(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.RequestItem.getFilterBy()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2455" source="org.apache.shindig.protocol.SystemHandler.listMethods(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.RequestItem.getFilterOperation()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2456" source="org.apache.shindig.protocol.SystemHandler.listMethods(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.RequestItem.getFilterValue()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2457" source="org.apache.shindig.protocol.SystemHandler.listMethods(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.HandlerRegistry.getSupportedRestServices()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2458" source="org.apache.shindig.protocol.SystemHandler.listMethods(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.HandlerRegistry.getSupportedRpcServices()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2459" source="org.apache.shindig.protocol.TestHandler.get(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.TestHandler.get(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2460" source="org.apache.shindig.protocol.TestHandler.overridden(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.TestHandler.get(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2461" source="org.apache.shindig.protocol.TestHandler.overriddenRpc(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.TestHandler.get(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2462" source="org.apache.shindig.protocol.TestHandler.create(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.TestHandler.create(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2463" source="org.apache.shindig.protocol.TestHandler.futureException(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.TestHandler.futureException(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2464" source="org.apache.shindig.protocol.TestHandler.futureException(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.ProtocolException(int,java.lang.String,java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e2465" source="org.apache.shindig.protocol.TestHandler.exception(org.apache.shindig.protocol.RequestItem)" target="org.apache.shindig.protocol.TestHandler.exception(org.apache.shindig.protocol.RequestItem)">
      <data key="type">METHOD_CALL</data>
    </edge>
  </graph>
</graphml>
