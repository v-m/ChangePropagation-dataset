<?xml version="1.0" encoding="UTF-8"?>
<mutation operator-id="ABS" parent="../../../smf.run.xml" name="main" config-file="mutations.xml" time="56272">
  <class-to-mutate />
  <mutants>
    <mutant id="mutant_569" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(flags.length())" to="(flags.length() &gt;= 0 ? flags.length() * -1 : flags.length())" />
    <mutant id="mutant_565" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI).compareTo(BigInteger.ZERO))" to="(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI).compareTo(BigInteger.ZERO) &gt;= 0 ? size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI).compareTo(BigInteger.ZERO) * -1 : size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI).compareTo(BigInteger.ZERO))" />
    <mutant id="mutant_566" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_567" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_568" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="8" to="(-1 * 8)" />
    <mutant id="mutant_561" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix * -1 : prefix)" />
    <mutant id="mutant_562" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_563" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="off" to="(off &gt;= 0 ? off * -1 : off)" />
    <mutant id="mutant_564" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="bytesToRead" to="(bytesToRead &gt;= 0 ? bytesToRead * -1 : bytesToRead)" />
    <mutant id="mutant_560" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="buffer.length" to="buffer.length &gt;= 0 ? buffer.length * -1 : buffer.length" />
    <mutant id="mutant_576" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="maxBytesPerChar" to="(maxBytesPerChar &gt;= 0 ? maxBytesPerChar * -1 : maxBytesPerChar)" />
    <mutant id="mutant_577" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)" from="value2" to="(value2 &gt;= 0 ? value2 : value2 * -1)" />
    <mutant id="mutant_578" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="CharSequenceInputStream.NO_MARK" to="CharSequenceInputStream.NO_MARK &gt;= 0 ? CharSequenceInputStream.NO_MARK * -1 : CharSequenceInputStream.NO_MARK" />
    <mutant id="mutant_579" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,long)" from="0" to="-1 * 0" />
    <mutant id="mutant_572" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="length" to="(length &gt;= 0 ? length * -1 : length)" />
    <mutant id="mutant_573" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="n" to="n &gt;= 0 ? n * -1 : n" />
    <mutant id="mutant_574" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="16" to="(-1 * 16)" />
    <mutant id="mutant_575" viable="false" in="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)" from="count" to="count &gt;= 0 ? count : count * -1" />
    <mutant id="mutant_570" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_571" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="c" to="(c &gt;= 0 ? c * -1 : c)" />
    <mutant id="mutant_107" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_108" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(byte[],java.io.OutputStream)" from="bytes" to="(bytes &gt;= 0 ? bytes * -1 : bytes)" />
    <mutant id="mutant_109" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_103" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="length" to="(length &gt;= 0 ? length * -1 : length)" />
    <mutant id="mutant_587" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="n" to="(n &gt;= 0 ? n : n * -1)" />
    <mutant id="mutant_104" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_588" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_105" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="lineLengthBytes" to="(lineLengthBytes &gt;= 0 ? lineLengthBytes : lineLengthBytes * -1)" />
    <mutant id="mutant_589" viable="true" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])" from="(org.apache.commons.io.FilenameUtils.indexOfExtension(filename))" to="(org.apache.commons.io.FilenameUtils.indexOfExtension(filename) &gt;= 0 ? org.apache.commons.io.FilenameUtils.indexOfExtension(filename) : org.apache.commons.io.FilenameUtils.indexOfExtension(filename) * -1)" />
    <mutant id="mutant_106" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="k" to="(k &gt;= 0 ? k * -1 : k)" />
    <mutant id="mutant_1298" viable="false" in="org.apache.commons.io.input.Tailer.create(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)" from="delayMillis" to="(delayMillis &gt;= 0 ? delayMillis : delayMillis * -1)" />
    <mutant id="mutant_1299" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="len" to="len &gt;= 0 ? len : len * -1" />
    <mutant id="mutant_1296" viable="true" in="org.apache.commons.io.output.ChunkedWriter.write(char[],int,int)" from="dstOffset" to="(dstOffset &gt;= 0 ? dstOffset * -1 : dstOffset)" />
    <mutant id="mutant_1297" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="childDepth" to="(childDepth &gt;= 0 ? childDepth : childDepth * -1)" />
    <mutant id="mutant_1294" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1295" viable="false" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_583" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_100" viable="true" in="org.apache.commons.io.output.ChunkedWriter(java.io.Writer,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_584" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1)" />
    <mutant id="mutant_101" viable="false" in="org.apache.commons.io.EndianUtils.swapShort(short)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_585" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_102" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix : prefix * -1)" />
    <mutant id="mutant_586" viable="false" in="?" from="255" to="(-1 * 255)" />
    <mutant id="mutant_580" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_581" viable="false" in="org.apache.commons.io.input.BoundedInputStream.available()" from="(max)" to="(max &gt;= 0 ? max : max * -1)" />
    <mutant id="mutant_582" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="(file1.lastModified())" to="(file1.lastModified() &gt;= 0 ? file1.lastModified() : file1.lastModified() * -1)" />
    <mutant id="mutant_118" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_119" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="2" to="(-1 * 2)" />
    <mutant id="mutant_114" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_598" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(newLineSequence.length)" to="(newLineSequence.length &gt;= 0 ? newLineSequence.length * -1 : newLineSequence.length)" />
    <mutant id="mutant_115" viable="false" in="?" from="1024" to="(-1 * 1024)" />
    <mutant id="mutant_599" viable="false" in="org.apache.commons.io.input.NullReader.read()" from="(position)" to="(position &gt;= 0 ? position : position * -1)" />
    <mutant id="mutant_116" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_117" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1292" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)" from="maxSizeInclusive" to="(maxSizeInclusive &gt;= 0 ? maxSizeInclusive : maxSizeInclusive * -1)" />
    <mutant id="mutant_1293" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1290" viable="true" in="org.apache.commons.io.ByteOrderMark.getBytes()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1291" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)" from="ch" to="(ch &gt;= 0 ? ch : ch * -1)" />
    <mutant id="mutant_1289" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size2" to="(size2 &gt;= 0 ? size2 * -1 : size2)" />
    <mutant id="mutant_1287" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="position" to="position &gt;= 0 ? position : position * -1" />
    <mutant id="mutant_1288" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_1285" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1286" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix : prefix * -1)" />
    <mutant id="mutant_1283" viable="false" in="org.apache.commons.io.FileUtils.waitFor(java.io.File,int)" from="0" to="-1 * 0" />
    <mutant id="mutant_1284" viable="true" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="result" to="(result &gt;= 0 ? result : result * -1)" />
    <mutant id="mutant_110" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="chunk" to="chunk &gt;= 0 ? chunk * -1 : chunk" />
    <mutant id="mutant_594" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()" from="target" to="(target &gt;= 0 ? target : target * -1)" />
    <mutant id="mutant_111" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip : toSkip * -1)" />
    <mutant id="mutant_595" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_112" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="count" to="(count &gt;= 0 ? count : count * -1)" />
    <mutant id="mutant_596" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="delayMillis" to="(delayMillis &gt;= 0 ? delayMillis * -1 : delayMillis)" />
    <mutant id="mutant_113" viable="false" in="org.apache.commons.io.input.BOMInputStream.skip(long)" from="n" to="(n &gt;= 0 ? n : n * -1)" />
    <mutant id="mutant_597" viable="false" in="org.apache.commons.io.input.CountingInputStream.afterRead(int)" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF * -1 : IOUtils.EOF)" />
    <mutant id="mutant_590" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(xmlProlog.length())" to="(xmlProlog.length() &gt;= 0 ? xmlProlog.length() : xmlProlog.length() * -1)" />
    <mutant id="mutant_591" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_592" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="(depthLimit)" to="(depthLimit &gt;= 0 ? depthLimit : depthLimit * -1)" />
    <mutant id="mutant_593" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="(position)" to="(position &gt;= 0 ? position : position * -1)" />
    <mutant id="mutant_129" viable="false" in="org.apache.commons.io.input.BoundedInputStream.available()" from="(pos)" to="(pos &gt;= 0 ? pos : pos * -1)" />
    <mutant id="mutant_125" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="remain" to="(remain &gt;= 0 ? remain : remain * -1)" />
    <mutant id="mutant_126" viable="true" in="org.apache.commons.io.output.WriterOutputStream.write(int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_127" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="value" to="(value &gt;= 0 ? value * -1 : value)" />
    <mutant id="mutant_128" viable="false" in="?" from="1024" to="-1 * 1024" />
    <mutant id="mutant_121" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="(position)" to="(position &gt;= 0 ? position * -1 : position)" />
    <mutant id="mutant_122" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_123" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="c" to="(c &gt;= 0 ? c * -1 : c)" />
    <mutant id="mutant_124" viable="false" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posWin" to="posWin &gt;= 0 ? posWin * -1 : posWin" />
    <mutant id="mutant_120" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_136" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="length" to="(length &gt;= 0 ? length * -1 : length)" />
    <mutant id="mutant_137" viable="false" in="?" from="254" to="(-1 * 254)" />
    <mutant id="mutant_138" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="(b.length)" to="(b.length &gt;= 0 ? b.length * -1 : b.length)" />
    <mutant id="mutant_139" viable="false" in="org.apache.commons.io.input.NullInputStream.read()" from="(position)" to="(position &gt;= 0 ? position : position * -1)" />
    <mutant id="mutant_132" viable="false" in="org.apache.commons.io.input.Tailer(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)" from="delayMillis" to="delayMillis &gt;= 0 ? delayMillis : delayMillis * -1" />
    <mutant id="mutant_133" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="blockSize" to="blockSize &gt;= 0 ? blockSize : blockSize * -1" />
    <mutant id="mutant_134" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(byte[],java.io.OutputStream)" from="bytes" to="bytes &gt;= 0 ? bytes * -1 : bytes" />
    <mutant id="mutant_135" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])" from="0" to="-1 * 0" />
    <mutant id="mutant_130" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(java.lang.String)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_131" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_147" viable="false" in="?" from="XmlStreamWriter.BUFFER_SIZE" to="(XmlStreamWriter.BUFFER_SIZE &gt;= 0 ? XmlStreamWriter.BUFFER_SIZE * -1 : XmlStreamWriter.BUFFER_SIZE)" />
    <mutant id="mutant_148" viable="true" in="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)" from="0" to="-1 * 0" />
    <mutant id="mutant_149" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()" from="c" to="c &gt;= 0 ? c * -1 : c" />
    <mutant id="mutant_143" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(totalByteLength)" to="(totalByteLength &gt;= 0 ? totalByteLength * -1 : totalByteLength)" />
    <mutant id="mutant_144" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_145" viable="false" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_146" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posWin" to="posWin &gt;= 0 ? posWin : posWin * -1" />
    <mutant id="mutant_140" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="3" to="(-1 * 3)" />
    <mutant id="mutant_141" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="count" to="count &gt;= 0 ? count : count * -1" />
    <mutant id="mutant_142" viable="false" in="org.apache.commons.io.filefilter.OrFileFilter.toString()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_158" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="off" to="(off &gt;= 0 ? off : off * -1)" />
    <mutant id="mutant_159" viable="true" in="org.apache.commons.io.output.ProxyOutputStream.write(int)" from="idx" to="(idx &gt;= 0 ? idx : idx * -1)" />
    <mutant id="mutant_154" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="4" to="(-1 * 4)" />
    <mutant id="mutant_155" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="FilenameUtils.NOT_FOUND" to="FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND : FilenameUtils.NOT_FOUND * -1" />
    <mutant id="mutant_156" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="returnLength" to="returnLength &gt;= 0 ? returnLength : returnLength * -1" />
    <mutant id="mutant_157" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_150" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_151" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="bytesRead" to="(bytesRead &gt;= 0 ? bytesRead * -1 : bytesRead)" />
    <mutant id="mutant_152" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(files.length)" to="(files.length &gt;= 0 ? files.length : files.length * -1)" />
    <mutant id="mutant_153" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target" to="(target &gt;= 0 ? target : target * -1)" />
    <mutant id="mutant_169" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(byte[],java.io.OutputStream)" from="offset" to="offset &gt;= 0 ? offset : offset * -1" />
    <mutant id="mutant_160" viable="false" in="org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File,int,int)" from="readTimeout" to="(readTimeout &gt;= 0 ? readTimeout * -1 : readTimeout)" />
    <mutant id="mutant_165" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="strStartIndex" to="(strStartIndex &gt;= 0 ? strStartIndex : strStartIndex * -1)" />
    <mutant id="mutant_166" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target" to="target &gt;= 0 ? target : target * -1" />
    <mutant id="mutant_167" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="value" to="(value &gt;= 0 ? value : value * -1)" />
    <mutant id="mutant_168" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="bytesRead" to="bytesRead &gt;= 0 ? bytesRead : bytesRead * -1" />
    <mutant id="mutant_161" viable="false" in="?" from="0" to="(-1 * 0)" />
    <mutant id="mutant_162" viable="false" in="?" from="os" to="os &gt;= 0 ? os * -1 : os" />
    <mutant id="mutant_163" viable="false" in="org.apache.commons.io.input.ProxyReader.read(char[])" from="n" to="(n &gt;= 0 ? n : n * -1)" />
    <mutant id="mutant_164" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="k" to="(k &gt;= 0 ? k * -1 : k)" />
    <mutant id="mutant_170" viable="false" in="?" from="63" to="(-1 * 63)" />
    <mutant id="mutant_171" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" from="(files.length)" to="(files.length &gt;= 0 ? files.length * -1 : files.length)" />
    <mutant id="mutant_176" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="bytesToRead" to="(bytesToRead &gt;= 0 ? bytesToRead * -1 : bytesToRead)" />
    <mutant id="mutant_177" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="(currentLastBytePos)" to="(currentLastBytePos &gt;= 0 ? currentLastBytePos : currentLastBytePos * -1)" />
    <mutant id="mutant_178" viable="true" in="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_179" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="off" to="(off &gt;= 0 ? off : off * -1)" />
    <mutant id="mutant_172" viable="false" in="?" from="60" to="(-1 * 60)" />
    <mutant id="mutant_173" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="IOUtils.SKIP_BUFFER_SIZE" to="IOUtils.SKIP_BUFFER_SIZE &gt;= 0 ? IOUtils.SKIP_BUFFER_SIZE * -1 : IOUtils.SKIP_BUFFER_SIZE" />
    <mutant id="mutant_174" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_175" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="mark" to="mark &gt;= 0 ? mark : mark * -1" />
    <mutant id="mutant_180" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_181" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="remaining" to="(remaining &gt;= 0 ? remaining : remaining * -1)" />
    <mutant id="mutant_182" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="depth" to="(depth &gt;= 0 ? depth * -1 : depth)" />
    <mutant id="mutant_187" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(files.length)" to="(files.length &gt;= 0 ? files.length : files.length * -1)" />
    <mutant id="mutant_188" viable="false" in="?" from="(FileUtils.ONE_GB)" to="(FileUtils.ONE_GB &gt;= 0 ? FileUtils.ONE_GB * -1 : FileUtils.ONE_GB)" />
    <mutant id="mutant_189" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_183" viable="true" in="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.Charset,int,boolean)" from="bufferSize" to="(bufferSize &gt;= 0 ? bufferSize : bufferSize * -1)" />
    <mutant id="mutant_184" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="(currentBufferIndex)" to="(currentBufferIndex &gt;= 0 ? currentBufferIndex : currentBufferIndex * -1)" />
    <mutant id="mutant_185" viable="false" in="?" from="(FileUtils.ONE_MB)" to="(FileUtils.ONE_MB &gt;= 0 ? FileUtils.ONE_MB * -1 : FileUtils.ONE_MB)" />
    <mutant id="mutant_186" viable="false" in="org.apache.commons.io.input.NullInputStream.doEndOfFile()" from="IOUtils.EOF" to="IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1" />
    <mutant id="mutant_190" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read()" from="1" to="-1 * 1" />
    <mutant id="mutant_191" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)" from="value" to="(value &gt;= 0 ? value : value * -1)" />
    <mutant id="mutant_192" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="k" to="(k &gt;= 0 ? k : k * -1)" />
    <mutant id="mutant_193" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="bytesRead" to="bytesRead &gt;= 0 ? bytesRead : bytesRead * -1" />
    <mutant id="mutant_198" viable="false" in="org.apache.commons.io.input.BoundedInputStream.mark(int)" from="mark" to="mark &gt;= 0 ? mark * -1 : mark" />
    <mutant id="mutant_199" viable="false" in="?" from="os" to="os &gt;= 0 ? os * -1 : os" />
    <mutant id="mutant_194" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="value4" to="(value4 &gt;= 0 ? value4 : value4 * -1)" />
    <mutant id="mutant_195" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="c" to="(c &gt;= 0 ? c : c * -1)" />
    <mutant id="mutant_196" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="(size)" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_197" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="remaining" to="(remaining &gt;= 0 ? remaining * -1 : remaining)" />
    <mutant id="mutant_900" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="1" to="-1 * 1" />
    <mutant id="mutant_901" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="off" to="(off &gt;= 0 ? off : off * -1)" />
    <mutant id="mutant_902" viable="false" in="org.apache.commons.io.input.TeeInputStream.read(byte[],int,int)" from="end" to="(end &gt;= 0 ? end * -1 : end)" />
    <mutant id="mutant_907" viable="false" in="?" from="255" to="(-1 * 255)" />
    <mutant id="mutant_908" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(byte[],java.io.OutputStream)" from="bytes" to="(bytes &gt;= 0 ? bytes * -1 : bytes)" />
    <mutant id="mutant_909" viable="false" in="org.apache.commons.io.FileUtils.toURLs(java.io.File[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_903" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long)" from="length" to="(length &gt;= 0 ? length * -1 : length)" />
    <mutant id="mutant_904" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="index" to="(index &gt;= 0 ? index : index * -1)" />
    <mutant id="mutant_905" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j" to="(j &gt;= 0 ? j : j * -1)" />
    <mutant id="mutant_906" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="remaining" to="remaining &gt;= 0 ? remaining * -1 : remaining" />
    <mutant id="mutant_910" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="off" to="(off &gt;= 0 ? off : off * -1)" />
    <mutant id="mutant_911" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_912" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,long)" from="((int)(size))" to="(((int)(size)) &gt;= 0 ? ((int)(size)) : ((int)(size)) * -1)" />
    <mutant id="mutant_913" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_918" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(flags.length())" to="(flags.length() &gt;= 0 ? flags.length() : flags.length() * -1)" />
    <mutant id="mutant_919" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="c" to="c &gt;= 0 ? c * -1 : c" />
    <mutant id="mutant_914" viable="false" in="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,int)" from="bufSize" to="(bufSize &gt;= 0 ? bufSize * -1 : bufSize)" />
    <mutant id="mutant_915" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="returnLength" to="returnLength &gt;= 0 ? returnLength * -1 : returnLength" />
    <mutant id="mutant_916" viable="false" in="org.apache.commons.io.input.BOMInputStream.readFirstBytes()" from="(fbIndex)" to="(fbIndex &gt;= 0 ? fbIndex * -1 : fbIndex)" />
    <mutant id="mutant_917" viable="true" in="org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])" from="wildcards.length" to="(wildcards.length &gt;= 0 ? wildcards.length * -1 : wildcards.length)" />
    <mutant id="mutant_921" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_922" viable="false" in="?" from="239" to="(-1 * 239)" />
    <mutant id="mutant_923" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="k" to="(k &gt;= 0 ? k * -1 : k)" />
    <mutant id="mutant_924" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="k" to="(k &gt;= 0 ? k * -1 : k)" />
    <mutant id="mutant_920" viable="false" in="org.apache.commons.io.input.TeeInputStream.read(byte[])" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1)" />
    <mutant id="mutant_929" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="(pos)" to="(pos &gt;= 0 ? pos : pos * -1)" />
    <mutant id="mutant_925" viable="false" in="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean)" from="Tailer.DEFAULT_BUFSIZE" to="(Tailer.DEFAULT_BUFSIZE &gt;= 0 ? Tailer.DEFAULT_BUFSIZE * -1 : Tailer.DEFAULT_BUFSIZE)" />
    <mutant id="mutant_926" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter.toString()" from="0" to="(-1 * 0)" />
    <mutant id="mutant_927" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_928" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="position" to="(position &gt;= 0 ? position : position * -1)" />
    <mutant id="mutant_1311" viable="true" in="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1312" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read()" from="(idx)" to="(idx &gt;= 0 ? idx : idx * -1)" />
    <mutant id="mutant_1310" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="pos" to="(pos &gt;= 0 ? pos * -1 : pos)" />
    <mutant id="mutant_1319" viable="false" in="org.apache.commons.io.input.TeeInputStream.read(byte[])" from="n" to="(n &gt;= 0 ? n * -1 : n)" />
    <mutant id="mutant_1317" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(readlimit)" to="(readlimit &gt;= 0 ? readlimit * -1 : readlimit)" />
    <mutant id="mutant_1318" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1315" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1316" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="c" to="(c &gt;= 0 ? c * -1 : c)" />
    <mutant id="mutant_1313" viable="true" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="wildcards.length" to="wildcards.length &gt;= 0 ? wildcards.length : wildcards.length * -1" />
    <mutant id="mutant_1314" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_932" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(FilenameUtils.NOT_FOUND)" to="(FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND * -1 : FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_933" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="24" to="(-1 * 24)" />
    <mutant id="mutant_934" viable="false" in="org.apache.commons.io.input.ProxyReader.read(java.nio.CharBuffer)" from="IOUtils.EOF" to="IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1" />
    <mutant id="mutant_935" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="c" to="(c &gt;= 0 ? c * -1 : c)" />
    <mutant id="mutant_930" viable="true" in="org.apache.commons.io.ThreadMonitor.start(long)" from="timeout" to="(timeout &gt;= 0 ? timeout : timeout * -1)" />
    <mutant id="mutant_931" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_936" viable="false" in="org.apache.commons.io.input.ProxyReader.read()" from="c" to="c &gt;= 0 ? c : c * -1" />
    <mutant id="mutant_937" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_938" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="lastModified" to="lastModified &gt;= 0 ? lastModified : lastModified * -1" />
    <mutant id="mutant_939" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="0" to="-1 * 0" />
    <mutant id="mutant_1300" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1301" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="lineLengthBytes" to="(lineLengthBytes &gt;= 0 ? lineLengthBytes : lineLengthBytes * -1)" />
    <mutant id="mutant_1308" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="(size)" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_1309" viable="true" in="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)" from="c" to="c &gt;= 0 ? c * -1 : c" />
    <mutant id="mutant_1306" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1307" viable="false" in="?" from="Pattern.MULTILINE" to="(Pattern.MULTILINE &gt;= 0 ? Pattern.MULTILINE * -1 : Pattern.MULTILINE)" />
    <mutant id="mutant_1304" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="count" to="(count &gt;= 0 ? count : count * -1)" />
    <mutant id="mutant_1305" viable="false" in="org.apache.commons.io.input.BOMInputStream.read()" from="in.read()" to="in.read() &gt;= 0 ? in.read() * -1 : in.read()" />
    <mutant id="mutant_1302" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="bytesToRead" to="(bytesToRead &gt;= 0 ? bytesToRead : bytesToRead * -1)" />
    <mutant id="mutant_1303" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="((int)(result))" to="((int)(result)) &gt;= 0 ? ((int)(result)) * -1 : ((int)(result))" />
    <mutant id="mutant_943" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="wcsIdx" to="(wcsIdx &gt;= 0 ? wcsIdx * -1 : wcsIdx)" />
    <mutant id="mutant_944" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.toString()" from="0" to="-1 * 0" />
    <mutant id="mutant_945" viable="false" in="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],int,int)" from="off" to="(off &gt;= 0 ? off * -1 : off)" />
    <mutant id="mutant_946" viable="false" in="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="count" to="(count &gt;= 0 ? count * -1 : count)" />
    <mutant id="mutant_940" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)" from="value" to="(value &gt;= 0 ? value : value * -1)" />
    <mutant id="mutant_941" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="(FilenameUtils.NOT_FOUND)" to="(FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND : FilenameUtils.NOT_FOUND * -1)" />
    <mutant id="mutant_942" viable="false" in="org.apache.commons.io.EndianUtils.read(java.io.InputStream)" from="value" to="value &gt;= 0 ? value * -1 : value" />
    <mutant id="mutant_947" viable="false" in="org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)" from="(file.lastModified())" to="(file.lastModified() &gt;= 0 ? file.lastModified() * -1 : file.lastModified())" />
    <mutant id="mutant_948" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_949" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(filledBufferSum)" to="(filledBufferSum &gt;= 0 ? filledBufferSum : filledBufferSum * -1)" />
    <mutant id="mutant_954" viable="false" in="?" from="4096" to="-1 * 4096" />
    <mutant id="mutant_955" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="0" to="-1 * 0" />
    <mutant id="mutant_956" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1)" />
    <mutant id="mutant_957" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="remaining" to="(remaining &gt;= 0 ? remaining : remaining * -1)" />
    <mutant id="mutant_950" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="rePos" to="(rePos &gt;= 0 ? rePos * -1 : rePos)" />
    <mutant id="mutant_951" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="num" to="num &gt;= 0 ? num * -1 : num" />
    <mutant id="mutant_952" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="inBufferPos" to="inBufferPos &gt;= 0 ? inBufferPos : inBufferPos * -1" />
    <mutant id="mutant_953" viable="false" in="?" from="0" to="(-1 * 0)" />
    <mutant id="mutant_958" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()" from="count" to="count &gt;= 0 ? count : count * -1" />
    <mutant id="mutant_959" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="CharSequenceInputStream.NO_MARK" to="CharSequenceInputStream.NO_MARK &gt;= 0 ? CharSequenceInputStream.NO_MARK * -1 : CharSequenceInputStream.NO_MARK" />
    <mutant id="mutant_965" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_966" viable="true" in="org.apache.commons.io.monitor.FileAlterationMonitor(long,org.apache.commons.io.monitor.FileAlterationObserver[])" from="interval" to="(interval &gt;= 0 ? interval : interval * -1)" />
    <mutant id="mutant_967" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="0" to="-1 * 0" />
    <mutant id="mutant_968" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_961" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="((int)(avail))" to="((int)(avail)) &gt;= 0 ? ((int)(avail)) * -1 : ((int)(avail))" />
    <mutant id="mutant_962" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_963" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix * -1 : prefix)" />
    <mutant id="mutant_964" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read()" from="(idx)" to="(idx &gt;= 0 ? idx * -1 : idx)" />
    <mutant id="mutant_969" viable="true" in="org.apache.commons.io.output.ProxyOutputStream.write(byte[])" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_1355" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="(currentBufferIndex)" to="(currentBufferIndex &gt;= 0 ? currentBufferIndex * -1 : currentBufferIndex)" />
    <mutant id="mutant_1356" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1353" viable="true" in="org.apache.commons.io.output.ChunkedOutputStream.write(byte[],int,int)" from="bytes" to="(bytes &gt;= 0 ? bytes : bytes * -1)" />
    <mutant id="mutant_1354" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="2" to="(-1 * 2)" />
    <mutant id="mutant_1351" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_1352" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long)" from="IOUtils.DEFAULT_BUFFER_SIZE" to="IOUtils.DEFAULT_BUFFER_SIZE &gt;= 0 ? IOUtils.DEFAULT_BUFFER_SIZE * -1 : IOUtils.DEFAULT_BUFFER_SIZE" />
    <mutant id="mutant_1350" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip" to="toSkip &gt;= 0 ? toSkip * -1 : toSkip" />
    <mutant id="mutant_960" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(files.length)" to="(files.length &gt;= 0 ? files.length * -1 : files.length)" />
    <mutant id="mutant_1359" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="off" to="(off &gt;= 0 ? off : off * -1)" />
    <mutant id="mutant_1357" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="2" to="(-1 * 2)" />
    <mutant id="mutant_1358" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_976" viable="true" in="org.apache.commons.io.FilenameUtils.getPath(java.lang.String)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_977" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_978" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_979" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_972" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_973" viable="true" in="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)" from="maxCharsFromTargetReader" to="maxCharsFromTargetReader &gt;= 0 ? maxCharsFromTargetReader : maxCharsFromTargetReader * -1" />
    <mutant id="mutant_974" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="off" to="(off &gt;= 0 ? off : off * -1)" />
    <mutant id="mutant_975" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)" from="lastWindowsPos" to="(lastWindowsPos &gt;= 0 ? lastWindowsPos * -1 : lastWindowsPos)" />
    <mutant id="mutant_1344" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_1345" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="currentLastBytePos" to="currentLastBytePos &gt;= 0 ? currentLastBytePos : currentLastBytePos * -1" />
    <mutant id="mutant_1342" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="inBufferPos" to="(inBufferPos &gt;= 0 ? inBufferPos * -1 : inBufferPos)" />
    <mutant id="mutant_1343" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="position" to="(position &gt;= 0 ? position * -1 : position)" />
    <mutant id="mutant_1340" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1341" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="numberOfBytes" to="numberOfBytes &gt;= 0 ? numberOfBytes * -1 : numberOfBytes" />
    <mutant id="mutant_970" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)" from="acceptedFiles.size()" to="acceptedFiles.size() &gt;= 0 ? acceptedFiles.size() * -1 : acceptedFiles.size()" />
    <mutant id="mutant_971" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="childDepth" to="(childDepth &gt;= 0 ? childDepth * -1 : childDepth)" />
    <mutant id="mutant_1348" viable="false" in="org.apache.commons.io.input.TeeInputStream.read(byte[],int,int)" from="n" to="n &gt;= 0 ? n : n * -1" />
    <mutant id="mutant_1349" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_1346" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_1347" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="last" to="last &gt;= 0 ? last * -1 : last" />
    <mutant id="mutant_503" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_987" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="len" to="len &gt;= 0 ? len * -1 : len" />
    <mutant id="mutant_504" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_988" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="remain" to="(remain &gt;= 0 ? remain * -1 : remain)" />
    <mutant id="mutant_505" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="16" to="(-1 * 16)" />
    <mutant id="mutant_989" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceKb(java.lang.String,long)" from="timeout" to="(timeout &gt;= 0 ? timeout : timeout * -1)" />
    <mutant id="mutant_506" viable="false" in="?" from="1" to="(-1 * 1)" />
    <mutant id="mutant_983" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size2" to="size2 &gt;= 0 ? size2 * -1 : size2" />
    <mutant id="mutant_500" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="childDepth" to="(childDepth &gt;= 0 ? childDepth : childDepth * -1)" />
    <mutant id="mutant_984" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(wcs.length)" to="(wcs.length &gt;= 0 ? wcs.length : wcs.length * -1)" />
    <mutant id="mutant_501" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="j" to="(j &gt;= 0 ? j : j * -1)" />
    <mutant id="mutant_985" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_502" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="returnLength" to="returnLength &gt;= 0 ? returnLength * -1 : returnLength" />
    <mutant id="mutant_986" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_507" viable="false" in="?" from="FileSystemUtils.POSIX_UNIX" to="FileSystemUtils.POSIX_UNIX &gt;= 0 ? FileSystemUtils.POSIX_UNIX : FileSystemUtils.POSIX_UNIX * -1" />
    <mutant id="mutant_508" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(Math.min(posUnix, posWin))" to="(Math.min(posUnix, posWin) &gt;= 0 ? Math.min(posUnix, posWin) * -1 : Math.min(posUnix, posWin))" />
    <mutant id="mutant_509" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long)" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_1333" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="pos" to="pos &gt;= 0 ? pos * -1 : pos" />
    <mutant id="mutant_1334" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)" from="count" to="(count &gt;= 0 ? count * -1 : count)" />
    <mutant id="mutant_1331" viable="false" in="org.apache.commons.io.input.BOMInputStream$1.compare(org.apache.commons.io.ByteOrderMark,org.apache.commons.io.ByteOrderMark)" from="0" to="-1 * 0" />
    <mutant id="mutant_1332" viable="false" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix" to="posUnix &gt;= 0 ? posUnix : posUnix * -1" />
    <mutant id="mutant_1330" viable="true" in="org.apache.commons.io.input.XmlStreamReader.read(char[],int,int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_980" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_981" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target" to="target &gt;= 0 ? target * -1 : target" />
    <mutant id="mutant_1339" viable="false" in="?" from="0" to="(-1 * 0)" />
    <mutant id="mutant_982" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="c" to="(c &gt;= 0 ? c * -1 : c)" />
    <mutant id="mutant_1337" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="c" to="(c &gt;= 0 ? c : c * -1)" />
    <mutant id="mutant_1338" viable="true" in="org.apache.commons.io.filefilter.AgeFileFilter.toString()" from="(cutoff)" to="(cutoff &gt;= 0 ? cutoff : cutoff * -1)" />
    <mutant id="mutant_1335" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read()" from="b" to="(b &gt;= 0 ? b * -1 : b)" />
    <mutant id="mutant_1336" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_514" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_998" viable="true" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="(Integer.MAX_VALUE)" to="(Integer.MAX_VALUE &gt;= 0 ? Integer.MAX_VALUE : Integer.MAX_VALUE * -1)" />
    <mutant id="mutant_515" viable="false" in="org.apache.commons.io.input.BOMInputStream.readFirstBytes()" from="IOUtils.EOF" to="IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1" />
    <mutant id="mutant_999" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="wcsIdx" to="(wcsIdx &gt;= 0 ? wcsIdx * -1 : wcsIdx)" />
    <mutant id="mutant_516" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_517" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="IOUtils.SKIP_BUFFER_SIZE" to="IOUtils.SKIP_BUFFER_SIZE &gt;= 0 ? IOUtils.SKIP_BUFFER_SIZE : IOUtils.SKIP_BUFFER_SIZE * -1" />
    <mutant id="mutant_510" viable="true" in="org.apache.commons.io.filefilter.OrFileFilter.toString()" from="0" to="-1 * 0" />
    <mutant id="mutant_994" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(wcs.length)" to="(wcs.length &gt;= 0 ? wcs.length * -1 : wcs.length)" />
    <mutant id="mutant_511" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="(depthLimit)" to="(depthLimit &gt;= 0 ? depthLimit * -1 : depthLimit)" />
    <mutant id="mutant_995" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="IOUtils.EOF" to="IOUtils.EOF &gt;= 0 ? IOUtils.EOF * -1 : IOUtils.EOF" />
    <mutant id="mutant_512" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_996" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="last" to="last &gt;= 0 ? last * -1 : last" />
    <mutant id="mutant_513" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(wcs.length)" to="(wcs.length &gt;= 0 ? wcs.length : wcs.length * -1)" />
    <mutant id="mutant_997" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_518" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(readlimit)" to="(readlimit &gt;= 0 ? readlimit : readlimit * -1)" />
    <mutant id="mutant_519" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="position" to="(position &gt;= 0 ? position : position * -1)" />
    <mutant id="mutant_1322" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="location" to="(location &gt;= 0 ? location * -1 : location)" />
    <mutant id="mutant_1323" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="(markedAt)" to="(markedAt &gt;= 0 ? markedAt * -1 : markedAt)" />
    <mutant id="mutant_1320" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(byte[],java.io.OutputStream)" from="0" to="-1 * 0" />
    <mutant id="mutant_1321" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_990" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="totalRead" to="(totalRead &gt;= 0 ? totalRead : totalRead * -1)" />
    <mutant id="mutant_991" viable="false" in="org.apache.commons.io.input.CharSequenceReader.close()" from="mark" to="mark &gt;= 0 ? mark : mark * -1" />
    <mutant id="mutant_992" viable="false" in="?" from="60" to="(-1 * 60)" />
    <mutant id="mutant_1328" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator(java.lang.Iterable)" from="list.size()" to="list.size() &gt;= 0 ? list.size() * -1 : list.size()" />
    <mutant id="mutant_993" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1329" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)" from="magicNumber.length" to="magicNumber.length &gt;= 0 ? magicNumber.length : magicNumber.length * -1" />
    <mutant id="mutant_1326" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="length" to="(length &gt;= 0 ? length * -1 : length)" />
    <mutant id="mutant_1327" viable="false" in="?" from="(FileUtils.ONE_KB)" to="(FileUtils.ONE_KB &gt;= 0 ? FileUtils.ONE_KB * -1 : FileUtils.ONE_KB)" />
    <mutant id="mutant_1324" viable="false" in="org.apache.commons.io.input.NullReader.mark(int)" from="position" to="position &gt;= 0 ? position : position * -1" />
    <mutant id="mutant_1325" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_525" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="filledBufferSum" to="filledBufferSum &gt;= 0 ? filledBufferSum * -1 : filledBufferSum" />
    <mutant id="mutant_526" viable="false" in="?" from="1928235200184222815L" to="-1 * 1928235200184222815L" />
    <mutant id="mutant_527" viable="false" in="org.apache.commons.io.input.CountingInputStream.afterRead(int)" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1)" />
    <mutant id="mutant_528" viable="false" in="org.apache.commons.io.input.BOMInputStream.mark(int)" from="fbIndex" to="fbIndex &gt;= 0 ? fbIndex * -1 : fbIndex" />
    <mutant id="mutant_521" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="value" to="(value &gt;= 0 ? value * -1 : value)" />
    <mutant id="mutant_522" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_523" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(filename.length())" to="(filename.length() &gt;= 0 ? filename.length() * -1 : filename.length())" />
    <mutant id="mutant_524" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="0" to="-1 * 0" />
    <mutant id="mutant_529" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="chunk" to="(chunk &gt;= 0 ? chunk * -1 : chunk)" />
    <mutant id="mutant_1399" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1397" viable="false" in="?" from="1" to="-1 * 1" />
    <mutant id="mutant_1398" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_1395" viable="true" in="org.apache.commons.io.ByteOrderMark.getBytes()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1396" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1393" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_1394" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_520" viable="true" in="org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_536" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(currentLastBytePos)" to="(currentLastBytePos &gt;= 0 ? currentLastBytePos * -1 : currentLastBytePos)" />
    <mutant id="mutant_537" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count)" to="(count &gt;= 0 ? count : count * -1)" />
    <mutant id="mutant_538" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,byte[])" from="n" to="(n &gt;= 0 ? n : n * -1)" />
    <mutant id="mutant_539" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="remaining" to="(remaining &gt;= 0 ? remaining * -1 : remaining)" />
    <mutant id="mutant_532" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="count" to="count &gt;= 0 ? count * -1 : count" />
    <mutant id="mutant_533" viable="false" in="?" from="(FileUtils.ONE_KB)" to="(FileUtils.ONE_KB &gt;= 0 ? FileUtils.ONE_KB : FileUtils.ONE_KB * -1)" />
    <mutant id="mutant_534" viable="true" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="(bom.get(i))" to="(bom.get(i) &gt;= 0 ? bom.get(i) * -1 : bom.get(i))" />
    <mutant id="mutant_535" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_1391" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="names.size()" to="names.size() &gt;= 0 ? names.size() * -1 : names.size()" />
    <mutant id="mutant_1392" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.write(int)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1390" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.getThreshold()" from="threshold" to="threshold &gt;= 0 ? threshold : threshold * -1" />
    <mutant id="mutant_1388" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read()" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF * -1 : IOUtils.EOF)" />
    <mutant id="mutant_1389" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="returnLength" to="(returnLength &gt;= 0 ? returnLength * -1 : returnLength)" />
    <mutant id="mutant_1386" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="Integer.MAX_VALUE" to="(Integer.MAX_VALUE &gt;= 0 ? Integer.MAX_VALUE * -1 : Integer.MAX_VALUE)" />
    <mutant id="mutant_1387" viable="true" in="org.apache.commons.io.input.BoundedReader.mark(int)" from="charsRead" to="charsRead &gt;= 0 ? charsRead : charsRead * -1" />
    <mutant id="mutant_1384" viable="false" in="org.apache.commons.io.EndianUtils.swapShort(short)" from="8" to="(-1 * 8)" />
    <mutant id="mutant_1385" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long)" from="threshold" to="(threshold &gt;= 0 ? threshold * -1 : threshold)" />
    <mutant id="mutant_1382" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_1383" viable="false" in="org.apache.commons.io.EndianUtils.read(java.io.InputStream)" from="value" to="(value &gt;= 0 ? value : value * -1)" />
    <mutant id="mutant_530" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="byteDecrement" to="byteDecrement &gt;= 0 ? byteDecrement : byteDecrement * -1" />
    <mutant id="mutant_531" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(readlimit)" to="(readlimit &gt;= 0 ? readlimit * -1 : readlimit)" />
    <mutant id="mutant_547" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="depth" to="(depth &gt;= 0 ? depth : depth * -1)" />
    <mutant id="mutant_548" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_549" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(no)" to="(no &gt;= 0 ? no * -1 : no)" />
    <mutant id="mutant_543" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="chars_read" to="(chars_read &gt;= 0 ? chars_read : chars_read * -1)" />
    <mutant id="mutant_544" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_545" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_546" viable="true" in="org.apache.commons.io.ThreadMonitor.run()" from="timeout" to="(timeout &gt;= 0 ? timeout * -1 : timeout)" />
    <mutant id="mutant_1380" viable="false" in="org.apache.commons.io.input.NullReader.getSize()" from="size" to="size &gt;= 0 ? size : size * -1" />
    <mutant id="mutant_1381" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="(currentBuffer.length)" to="(currentBuffer.length &gt;= 0 ? currentBuffer.length * -1 : currentBuffer.length)" />
    <mutant id="mutant_1377" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="0" to="-1 * 0" />
    <mutant id="mutant_1378" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="offset" to="offset &gt;= 0 ? offset * -1 : offset" />
    <mutant id="mutant_1375" viable="true" in="org.apache.commons.io.output.ProxyWriter.write(char[],int,int)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_1376" viable="false" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1373" viable="false" in="?" from="0" to="-1 * 0" />
    <mutant id="mutant_1374" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="this.currentLastBytePos" to="this.currentLastBytePos &gt;= 0 ? this.currentLastBytePos * -1 : this.currentLastBytePos" />
    <mutant id="mutant_1371" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(line.length())" to="(line.length() &gt;= 0 ? line.length() * -1 : line.length())" />
    <mutant id="mutant_1372" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="xmlPrologEnd" to="(xmlPrologEnd &gt;= 0 ? xmlPrologEnd * -1 : xmlPrologEnd)" />
    <mutant id="mutant_540" viable="false" in="?" from="(osName.indexOf(&quot;mpe/ix&quot;))" to="(osName.indexOf(&quot;mpe/ix&quot;) &gt;= 0 ? osName.indexOf(&quot;mpe/ix&quot;) * -1 : osName.indexOf(&quot;mpe/ix&quot;))" />
    <mutant id="mutant_541" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(lines.size())" to="(lines.size() &gt;= 0 ? lines.size() : lines.size() * -1)" />
    <mutant id="mutant_542" viable="false" in="org.apache.commons.io.input.BOMInputStream.mark(int)" from="readlimit" to="(readlimit &gt;= 0 ? readlimit : readlimit * -1)" />
    <mutant id="mutant_1379" viable="false" in="?" from="1185122225658782848L" to="-1 * 1185122225658782848L" />
    <mutant id="mutant_558" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" from="extensionPos" to="(extensionPos &gt;= 0 ? extensionPos * -1 : extensionPos)" />
    <mutant id="mutant_559" viable="false" in="?" from="FileUtils.ONE_EB" to="(FileUtils.ONE_EB &gt;= 0 ? FileUtils.ONE_EB * -1 : FileUtils.ONE_EB)" />
    <mutant id="mutant_554" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix : prefix * -1)" />
    <mutant id="mutant_555" viable="false" in="org.apache.commons.io.input.NullReader.close()" from="0" to="-1 * 0" />
    <mutant id="mutant_556" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="n" to="(n &gt;= 0 ? n * -1 : n)" />
    <mutant id="mutant_557" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="repeat" to="repeat &gt;= 0 ? repeat * -1 : repeat" />
    <mutant id="mutant_1370" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1366" viable="false" in="org.apache.commons.io.input.BoundedInputStream(java.io.InputStream,long)" from="size" to="size &gt;= 0 ? size : size * -1" />
    <mutant id="mutant_1367" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_1364" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[])" from="buffer.length" to="(buffer.length &gt;= 0 ? buffer.length * -1 : buffer.length)" />
    <mutant id="mutant_1365" viable="false" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="lastModified" to="lastModified &gt;= 0 ? lastModified : lastModified * -1" />
    <mutant id="mutant_1362" viable="false" in="org.apache.commons.io.input.NullReader(long,boolean,boolean)" from="size" to="size &gt;= 0 ? size : size * -1" />
    <mutant id="mutant_1363" viable="false" in="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.Charset)" from="ReaderInputStream.DEFAULT_BUFFER_SIZE" to="(ReaderInputStream.DEFAULT_BUFFER_SIZE &gt;= 0 ? ReaderInputStream.DEFAULT_BUFFER_SIZE * -1 : ReaderInputStream.DEFAULT_BUFFER_SIZE)" />
    <mutant id="mutant_1360" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_1361" viable="true" in="org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)" from="threshold" to="(threshold &gt;= 0 ? threshold * -1 : threshold)" />
    <mutant id="mutant_550" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="newLineMatchByteCount" to="newLineMatchByteCount &gt;= 0 ? newLineMatchByteCount : newLineMatchByteCount * -1" />
    <mutant id="mutant_551" viable="false" in="org.apache.commons.io.input.BoundedInputStream.available()" from="(max)" to="(max &gt;= 0 ? max : max * -1)" />
    <mutant id="mutant_552" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="no" to="no &gt;= 0 ? no : no * -1" />
    <mutant id="mutant_553" viable="false" in="org.apache.commons.io.input.BoundedInputStream.mark(int)" from="pos" to="pos &gt;= 0 ? pos : pos * -1" />
    <mutant id="mutant_1368" viable="false" in="org.apache.commons.io.FileUtils.sizeOfDirectory0(java.io.File)" from="0" to="-1 * 0" />
    <mutant id="mutant_1369" viable="false" in="?" from="(osName.indexOf(&quot;aix&quot;))" to="(osName.indexOf(&quot;aix&quot;) &gt;= 0 ? osName.indexOf(&quot;aix&quot;) * -1 : osName.indexOf(&quot;aix&quot;))" />
    <mutant id="mutant_448" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="value" to="(value &gt;= 0 ? value * -1 : value)" />
    <mutant id="mutant_449" viable="false" in="org.apache.commons.io.input.BoundedReader.reset()" from="charsRead" to="charsRead &gt;= 0 ? charsRead : charsRead * -1" />
    <mutant id="mutant_444" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="2" to="(-1 * 2)" />
    <mutant id="mutant_445" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="5" to="(-1 * 5)" />
    <mutant id="mutant_446" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_447" viable="true" in="org.apache.commons.io.input.BoundedReader(java.io.Reader,int)" from="maxCharsFromTargetReader" to="maxCharsFromTargetReader &gt;= 0 ? maxCharsFromTargetReader * -1 : maxCharsFromTargetReader" />
    <mutant id="mutant_1199" viable="true" in="org.apache.commons.io.output.ProxyWriter.write(java.lang.String)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_1197" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(encoding.length())" to="(encoding.length() &gt;= 0 ? encoding.length() * -1 : encoding.length())" />
    <mutant id="mutant_1198" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="blockSize" to="blockSize &gt;= 0 ? blockSize * -1 : blockSize" />
    <mutant id="mutant_1195" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" from="offset" to="offset &gt;= 0 ? offset : offset * -1" />
    <mutant id="mutant_1196" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="wcsIdx" to="(wcsIdx &gt;= 0 ? wcsIdx * -1 : wcsIdx)" />
    <mutant id="mutant_440" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="endIndex" to="(endIndex &gt;= 0 ? endIndex : endIndex * -1)" />
    <mutant id="mutant_441" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_442" viable="true" in="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="flags" to="(flags &gt;= 0 ? flags * -1 : flags)" />
    <mutant id="mutant_443" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="count" to="(count &gt;= 0 ? count : count * -1)" />
    <mutant id="mutant_459" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="childDepth" to="(childDepth &gt;= 0 ? childDepth * -1 : childDepth)" />
    <mutant id="mutant_455" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_456" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="end" to="(end &gt;= 0 ? end : end * -1)" />
    <mutant id="mutant_457" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_458" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="totalByteLength" to="totalByteLength &gt;= 0 ? totalByteLength * -1 : totalByteLength" />
    <mutant id="mutant_1193" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(currentBuffer.length)" to="(currentBuffer.length &gt;= 0 ? currentBuffer.length : currentBuffer.length * -1)" />
    <mutant id="mutant_1194" viable="false" in="org.apache.commons.io.output.ChunkedWriter.write(char[],int,int)" from="bytes" to="bytes &gt;= 0 ? bytes : bytes * -1" />
    <mutant id="mutant_1191" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count)" to="(count &gt;= 0 ? count : count * -1)" />
    <mutant id="mutant_1192" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1190" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="firstCount" to="(firstCount &gt;= 0 ? firstCount * -1 : firstCount)" />
    <mutant id="mutant_1188" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1189" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="(filters.length)" to="(filters.length &gt;= 0 ? filters.length : filters.length * -1)" />
    <mutant id="mutant_1186" viable="false" in="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long)" from="delayMillis" to="(delayMillis &gt;= 0 ? delayMillis : delayMillis * -1)" />
    <mutant id="mutant_1187" viable="true" in="org.apache.commons.io.filefilter.OrFileFilter.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1184" viable="true" in="org.apache.commons.io.output.ChunkedWriter.write(char[],int,int)" from="chunk" to="chunk &gt;= 0 ? chunk * -1 : chunk" />
    <mutant id="mutant_1185" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,byte[])" from="n" to="n &gt;= 0 ? n : n * -1" />
    <mutant id="mutant_451" viable="false" in="org.apache.commons.io.FileCleaningTracker$Reaper.run()" from="0" to="(-1 * 0)" />
    <mutant id="mutant_452" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_453" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="2" to="(-1 * 2)" />
    <mutant id="mutant_454" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="position" to="position &gt;= 0 ? position * -1 : position" />
    <mutant id="mutant_450" viable="true" in="org.apache.commons.io.output.CountingOutputStream.resetByteCount()" from="0" to="-1 * 0" />
    <mutant id="mutant_466" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read()" from="(pos)" to="(pos &gt;= 0 ? pos * -1 : pos)" />
    <mutant id="mutant_467" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" from="(files.length)" to="(files.length &gt;= 0 ? files.length : files.length * -1)" />
    <mutant id="mutant_468" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_469" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_1182" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="off" to="(off &gt;= 0 ? off * -1 : off)" />
    <mutant id="mutant_1183" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO))" to="(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO) &gt;= 0 ? size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO) : size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO) * -1)" />
    <mutant id="mutant_1180" viable="false" in="?" from="20" to="-1 * 20" />
    <mutant id="mutant_1181" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1179" viable="false" in="?" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1177" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1178" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_1175" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" from="data.length" to="data.length &gt;= 0 ? data.length : data.length * -1" />
    <mutant id="mutant_1176" viable="false" in="?" from="5345244090827540862L" to="-1 * 5345244090827540862L" />
    <mutant id="mutant_1173" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="origLength" to="(origLength &gt;= 0 ? origLength : origLength * -1)" />
    <mutant id="mutant_1174" viable="true" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="depthLimit" to="depthLimit &gt;= 0 ? depthLimit * -1 : depthLimit" />
    <mutant id="mutant_462" viable="false" in="org.apache.commons.io.IOUtils.buffer(java.io.Writer,int)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_463" viable="false" in="?" from="FileSystemUtils.WINDOWS" to="FileSystemUtils.WINDOWS &gt;= 0 ? FileSystemUtils.WINDOWS : FileSystemUtils.WINDOWS * -1" />
    <mutant id="mutant_464" viable="true" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_465" viable="false" in="?" from="4" to="-1 * 4" />
    <mutant id="mutant_460" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="n" to="n &gt;= 0 ? n * -1 : n" />
    <mutant id="mutant_461" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])" from="delegates.length" to="delegates.length &gt;= 0 ? delegates.length * -1 : delegates.length" />
    <mutant id="mutant_477" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="count" to="count &gt;= 0 ? count * -1 : count" />
    <mutant id="mutant_478" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF * -1 : IOUtils.EOF)" />
    <mutant id="mutant_479" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1171" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" from="FilenameUtils.NOT_FOUND" to="FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND * -1 : FilenameUtils.NOT_FOUND" />
    <mutant id="mutant_1172" viable="false" in="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)" from="bufSize" to="(bufSize &gt;= 0 ? bufSize * -1 : bufSize)" />
    <mutant id="mutant_1170" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(FilenameUtils.NOT_FOUND)" to="(FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND : FilenameUtils.NOT_FOUND * -1)" />
    <mutant id="mutant_1168" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(encoding.length())" to="(encoding.length() &gt;= 0 ? encoding.length() : encoding.length() * -1)" />
    <mutant id="mutant_1169" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_1166" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="newLineMatchByteCount" to="(newLineMatchByteCount &gt;= 0 ? newLineMatchByteCount * -1 : newLineMatchByteCount)" />
    <mutant id="mutant_1167" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_1164" viable="false" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_1165" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)" from="(org.apache.commons.io.EndianUtils.read(input))" to="(org.apache.commons.io.EndianUtils.read(input) &gt;= 0 ? org.apache.commons.io.EndianUtils.read(input) * -1 : org.apache.commons.io.EndianUtils.read(input))" />
    <mutant id="mutant_1162" viable="true" in="org.apache.commons.io.DirectoryWalker$CancelException(java.lang.String,java.io.File,int)" from="depth" to="depth &gt;= 0 ? depth * -1 : depth" />
    <mutant id="mutant_1163" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="end" to="(end &gt;= 0 ? end * -1 : end)" />
    <mutant id="mutant_473" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="position" to="(position &gt;= 0 ? position : position * -1)" />
    <mutant id="mutant_474" viable="true" in="org.apache.commons.io.output.TeeOutputStream.write(int)" from="b" to="(b &gt;= 0 ? b : b * -1)" />
    <mutant id="mutant_475" viable="false" in="?" from="os" to="os &gt;= 0 ? os : os * -1" />
    <mutant id="mutant_476" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="low" to="(low &gt;= 0 ? low * -1 : low)" />
    <mutant id="mutant_470" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(backtrack.size())" to="(backtrack.size() &gt;= 0 ? backtrack.size() : backtrack.size() * -1)" />
    <mutant id="mutant_471" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="result" to="(result &gt;= 0 ? result * -1 : result)" />
    <mutant id="mutant_472" viable="false" in="org.apache.commons.io.input.NullInputStream.mark(int)" from="mark" to="mark &gt;= 0 ? mark : mark * -1" />
    <mutant id="mutant_488" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read()" from="IOUtils.EOF" to="IOUtils.EOF &gt;= 0 ? IOUtils.EOF * -1 : IOUtils.EOF" />
    <mutant id="mutant_489" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_484" viable="false" in="org.apache.commons.io.input.BoundedInputStream(java.io.InputStream)" from="IOUtils.EOF" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF * -1 : IOUtils.EOF)" />
    <mutant id="mutant_485" viable="false" in="?" from="1" to="(-1 * 1)" />
    <mutant id="mutant_486" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="0" to="-1 * 0" />
    <mutant id="mutant_487" viable="true" in="org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass(java.lang.String[])" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_480" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="k" to="(k &gt;= 0 ? k : k * -1)" />
    <mutant id="mutant_481" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="FilenameUtils.NOT_FOUND" to="FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND * -1 : FilenameUtils.NOT_FOUND" />
    <mutant id="mutant_482" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="c" to="(c &gt;= 0 ? c * -1 : c)" />
    <mutant id="mutant_483" viable="true" in="org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)" from="index" to="(index &gt;= 0 ? index : index * -1)" />
    <mutant id="mutant_499" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)" from="value" to="(value &gt;= 0 ? value * -1 : value)" />
    <mutant id="mutant_490" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="(filename.length())" to="(filename.length() &gt;= 0 ? filename.length() : filename.length() * -1)" />
    <mutant id="mutant_495" viable="true" in="org.apache.commons.io.ByteOrderMark.toString()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_496" viable="false" in="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)" from="delayMillis" to="(delayMillis &gt;= 0 ? delayMillis : delayMillis * -1)" />
    <mutant id="mutant_497" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="depth" to="(depth &gt;= 0 ? depth : depth * -1)" />
    <mutant id="mutant_498" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="size" to="size &gt;= 0 ? size * -1 : size" />
    <mutant id="mutant_491" viable="true" in="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)" from="off" to="(off &gt;= 0 ? off : off * -1)" />
    <mutant id="mutant_492" viable="false" in="org.apache.commons.io.input.TeeInputStream.read(byte[])" from="n" to="n &gt;= 0 ? n * -1 : n" />
    <mutant id="mutant_493" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(comparator.compare(entry.getFile(), files[c]))" to="(comparator.compare(entry.getFile(), files[c]) &gt;= 0 ? comparator.compare(entry.getFile(), files[c]) : comparator.compare(entry.getFile(), files[c]) * -1)" />
    <mutant id="mutant_494" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1)" />
    <mutant id="mutant_1612" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF * -1 : IOUtils.EOF)" />
    <mutant id="mutant_1613" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1610" viable="false" in="?" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1611" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,char[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1609" viable="false" in="org.apache.commons.io.filefilter.AgeFileFilter(long,boolean)" from="this.cutoff" to="this.cutoff &gt;= 0 ? this.cutoff : this.cutoff * -1" />
    <mutant id="mutant_1607" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="end" to="(end &gt;= 0 ? end * -1 : end)" />
    <mutant id="mutant_1608" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix * -1 : prefix)" />
    <mutant id="mutant_1605" viable="false" in="org.apache.commons.io.FileUtils.toURLs(java.io.File[])" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1606" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix * -1 : prefix)" />
    <mutant id="mutant_1603" viable="false" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j" to="j &gt;= 0 ? j : j * -1" />
    <mutant id="mutant_1604" viable="false" in="org.apache.commons.io.FileUtils.waitFor(java.io.File,int)" from="timeout" to="(timeout &gt;= 0 ? timeout * -1 : timeout)" />
    <mutant id="mutant_1601" viable="false" in="?" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1602" viable="false" in="org.apache.commons.io.input.ProxyReader.read(char[],int,int)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_1600" viable="true" in="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_800" viable="false" in="?" from="(osName.indexOf(&quot;linux&quot;))" to="(osName.indexOf(&quot;linux&quot;) &gt;= 0 ? osName.indexOf(&quot;linux&quot;) : osName.indexOf(&quot;linux&quot;) * -1)" />
    <mutant id="mutant_801" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="lastBlockLength" to="(lastBlockLength &gt;= 0 ? lastBlockLength : lastBlockLength * -1)" />
    <mutant id="mutant_802" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="c" to="c &gt;= 0 ? c * -1 : c" />
    <mutant id="mutant_803" viable="false" in="org.apache.commons.io.input.BOMInputStream$1.compare(org.apache.commons.io.ByteOrderMark,org.apache.commons.io.ByteOrderMark)" from="len1" to="(len1 &gt;= 0 ? len1 : len1 * -1)" />
    <mutant id="mutant_808" viable="true" in="org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)" from="end" to="(end &gt;= 0 ? end : end * -1)" />
    <mutant id="mutant_809" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(cbuf.position())" to="(cbuf.position() &gt;= 0 ? cbuf.position() * -1 : cbuf.position())" />
    <mutant id="mutant_804" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="totalRead" to="totalRead &gt;= 0 ? totalRead : totalRead * -1" />
    <mutant id="mutant_805" viable="false" in="org.apache.commons.io.input.AutoCloseInputStream.afterRead(int)" from="n" to="(n &gt;= 0 ? n * -1 : n)" />
    <mutant id="mutant_806" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="n" to="n &gt;= 0 ? n * -1 : n" />
    <mutant id="mutant_807" viable="false" in="org.apache.commons.io.input.NullInputStream.read()" from="(size)" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_811" viable="false" in="org.apache.commons.io.input.NullReader.read()" from="(position)" to="(position &gt;= 0 ? position * -1 : position)" />
    <mutant id="mutant_812" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()" from="remaining" to="(remaining &gt;= 0 ? remaining : remaining * -1)" />
    <mutant id="mutant_813" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_814" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="n" to="n &gt;= 0 ? n * -1 : n" />
    <mutant id="mutant_810" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_819" viable="false" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_815" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_816" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="4294967295L" to="(-1 * 4294967295L)" />
    <mutant id="mutant_817" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target" to="target &gt;= 0 ? target : target * -1" />
    <mutant id="mutant_818" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="6" to="(-1 * 6)" />
    <mutant id="mutant_822" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_823" viable="true" in="org.apache.commons.io.output.ChunkedWriter.write(char[],int,int)" from="chunk" to="(chunk &gt;= 0 ? chunk * -1 : chunk)" />
    <mutant id="mutant_824" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip * -1 : toSkip)" />
    <mutant id="mutant_825" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="chars_read" to="(chars_read &gt;= 0 ? chars_read : chars_read * -1)" />
    <mutant id="mutant_820" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="0" to="(-1 * 0)" />
    <mutant id="mutant_821" viable="true" in="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_826" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="i" to="i &gt;= 0 ? i * -1 : i" />
    <mutant id="mutant_827" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read()" from="(pos)" to="(pos &gt;= 0 ? pos : pos * -1)" />
    <mutant id="mutant_828" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posWin" to="posWin &gt;= 0 ? posWin : posWin * -1" />
    <mutant id="mutant_829" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_833" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="remain" to="(remain &gt;= 0 ? remain * -1 : remain)" />
    <mutant id="mutant_834" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="lineLengthBytes" to="(lineLengthBytes &gt;= 0 ? lineLengthBytes * -1 : lineLengthBytes)" />
    <mutant id="mutant_835" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_836" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)" from="8" to="(-1 * 8)" />
    <mutant id="mutant_830" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_831" viable="false" in="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener)" from="Tailer.DEFAULT_DELAY_MILLIS" to="(Tailer.DEFAULT_DELAY_MILLIS &gt;= 0 ? Tailer.DEFAULT_DELAY_MILLIS * -1 : Tailer.DEFAULT_DELAY_MILLIS)" />
    <mutant id="mutant_832" viable="false" in="?" from="1000" to="-1 * 1000" />
    <mutant id="mutant_837" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="j" to="(j &gt;= 0 ? j : j * -1)" />
    <mutant id="mutant_838" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[])" from="b.length" to="(b.length &gt;= 0 ? b.length * -1 : b.length)" />
    <mutant id="mutant_839" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_844" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="count" to="count &gt;= 0 ? count * -1 : count" />
    <mutant id="mutant_845" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter.toString()" from="(size)" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_846" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="(size)" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_847" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="0" to="(-1 * 0)" />
    <mutant id="mutant_840" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" from="FilenameUtils.NOT_FOUND" to="FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND * -1 : FilenameUtils.NOT_FOUND" />
    <mutant id="mutant_841" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix : prefix * -1)" />
    <mutant id="mutant_842" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" from="bytes" to="(bytes &gt;= 0 ? bytes : bytes * -1)" />
    <mutant id="mutant_843" viable="true" in="org.apache.commons.io.DirectoryWalker.checkIfCancelled(java.io.File,int,java.util.Collection)" from="depth" to="(depth &gt;= 0 ? depth * -1 : depth)" />
    <mutant id="mutant_848" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="24" to="(-1 * 24)" />
    <mutant id="mutant_849" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="ch" to="ch &gt;= 0 ? ch * -1 : ch" />
    <mutant id="mutant_1234" viable="true" in="org.apache.commons.io.output.ChunkedOutputStream.write(byte[],int,int)" from="chunk" to="chunk &gt;= 0 ? chunk * -1 : chunk" />
    <mutant id="mutant_1235" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="0" to="-1 * 0" />
    <mutant id="mutant_1232" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="n" to="(n &gt;= 0 ? n * -1 : n)" />
    <mutant id="mutant_1233" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix" to="(posUnix &gt;= 0 ? posUnix : posUnix * -1)" />
    <mutant id="mutant_1230" viable="false" in="?" from="(osName.indexOf(&quot;windows&quot;))" to="(osName.indexOf(&quot;windows&quot;) &gt;= 0 ? osName.indexOf(&quot;windows&quot;) : osName.indexOf(&quot;windows&quot;) * -1)" />
    <mutant id="mutant_1231" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1238" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="remain" to="remain &gt;= 0 ? remain : remain * -1" />
    <mutant id="mutant_1239" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1236" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1237" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_855" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_856" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" from="extensionPos" to="(extensionPos &gt;= 0 ? extensionPos : extensionPos * -1)" />
    <mutant id="mutant_857" viable="false" in="org.apache.commons.io.monitor.FileAlterationMonitor(long)" from="this.interval" to="this.interval &gt;= 0 ? this.interval : this.interval * -1" />
    <mutant id="mutant_858" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="(file1.lastModified())" to="(file1.lastModified() &gt;= 0 ? file1.lastModified() * -1 : file1.lastModified())" />
    <mutant id="mutant_851" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="remain" to="(remain &gt;= 0 ? remain : remain * -1)" />
    <mutant id="mutant_852" viable="true" in="org.apache.commons.io.input.BoundedReader.mark(int)" from="(charsRead)" to="(charsRead &gt;= 0 ? charsRead * -1 : charsRead)" />
    <mutant id="mutant_853" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="wcsIdx" to="(wcsIdx &gt;= 0 ? wcsIdx : wcsIdx * -1)" />
    <mutant id="mutant_854" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="0" to="-1 * 0" />
    <mutant id="mutant_859" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_1223" viable="false" in="org.apache.commons.io.input.TeeInputStream.read(byte[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1224" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_1221" viable="false" in="?" from="2224170307287243428L" to="(-1 * 2224170307287243428L)" />
    <mutant id="mutant_1222" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="(urls.length)" to="(urls.length &gt;= 0 ? urls.length * -1 : urls.length)" />
    <mutant id="mutant_1220" viable="true" in="org.apache.commons.io.input.XmlStreamReader(java.net.URLConnection,java.lang.String)" from="XmlStreamReader.BUFFER_SIZE" to="(XmlStreamReader.BUFFER_SIZE &gt;= 0 ? XmlStreamReader.BUFFER_SIZE * -1 : XmlStreamReader.BUFFER_SIZE)" />
    <mutant id="mutant_1229" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_850" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1227" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="(charsRead)" to="(charsRead &gt;= 0 ? charsRead : charsRead * -1)" />
    <mutant id="mutant_1228" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1225" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="firstGT" to="(firstGT &gt;= 0 ? firstGT : firstGT * -1)" />
    <mutant id="mutant_1226" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])" from="acceptedFiles.size()" to="acceptedFiles.size() &gt;= 0 ? acceptedFiles.size() * -1 : acceptedFiles.size()" />
    <mutant id="mutant_866" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="(prefixes.length)" to="(prefixes.length &gt;= 0 ? prefixes.length * -1 : prefixes.length)" />
    <mutant id="mutant_867" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="buffer.length" to="buffer.length &gt;= 0 ? buffer.length : buffer.length * -1" />
    <mutant id="mutant_868" viable="false" in="org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(java.util.Collection)" from="files.size()" to="files.size() &gt;= 0 ? files.size() * -1 : files.size()" />
    <mutant id="mutant_869" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(idx)" to="(idx &gt;= 0 ? idx : idx * -1)" />
    <mutant id="mutant_862" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String)" from="CharSequenceInputStream.BUFFER_SIZE" to="(CharSequenceInputStream.BUFFER_SIZE &gt;= 0 ? CharSequenceInputStream.BUFFER_SIZE * -1 : CharSequenceInputStream.BUFFER_SIZE)" />
    <mutant id="mutant_863" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="numberOfBytes" to="numberOfBytes &gt;= 0 ? numberOfBytes * -1 : numberOfBytes" />
    <mutant id="mutant_864" viable="false" in="?" from="(osName.indexOf(&quot;digital unix&quot;))" to="(osName.indexOf(&quot;digital unix&quot;) &gt;= 0 ? osName.indexOf(&quot;digital unix&quot;) * -1 : osName.indexOf(&quot;digital unix&quot;))" />
    <mutant id="mutant_865" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(currentLastBytePos)" to="(currentLastBytePos &gt;= 0 ? currentLastBytePos : currentLastBytePos * -1)" />
    <mutant id="mutant_1212" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_1213" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_1210" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="(idx)" to="(idx &gt;= 0 ? idx * -1 : idx)" />
    <mutant id="mutant_1211" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()" from="target" to="(target &gt;= 0 ? target * -1 : target)" />
    <mutant id="mutant_860" viable="false" in="org.apache.commons.io.input.Tailer.create(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)" from="bufSize" to="(bufSize &gt;= 0 ? bufSize : bufSize * -1)" />
    <mutant id="mutant_1218" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_861" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1219" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="textIdx" to="(textIdx &gt;= 0 ? textIdx * -1 : textIdx)" />
    <mutant id="mutant_1216" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1217" viable="false" in="org.apache.commons.io.input.ProxyReader.read(char[],int,int)" from="n" to="n &gt;= 0 ? n * -1 : n" />
    <mutant id="mutant_1214" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1215" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_877" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(mark)" to="(mark &gt;= 0 ? mark : mark * -1)" />
    <mutant id="mutant_878" viable="true" in="org.apache.commons.io.filefilter.WildcardFileFilter.toString()" from="(wildcards.length)" to="(wildcards.length &gt;= 0 ? wildcards.length * -1 : wildcards.length)" />
    <mutant id="mutant_879" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j" to="(j &gt;= 0 ? j : j * -1)" />
    <mutant id="mutant_873" viable="true" in="org.apache.commons.io.FilenameUtils.getName(java.lang.String)" from="index" to="(index &gt;= 0 ? index * -1 : index)" />
    <mutant id="mutant_874" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="48" to="(-1 * 48)" />
    <mutant id="mutant_875" viable="true" in="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,int)" from="flags" to="(flags &gt;= 0 ? flags : flags * -1)" />
    <mutant id="mutant_876" viable="false" in="org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass(java.lang.String[])" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1201" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1202" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1200" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="(currentBuffer.length)" to="(currentBuffer.length &gt;= 0 ? currentBuffer.length * -1 : currentBuffer.length)" />
    <mutant id="mutant_1209" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.createLeftOver()" from="1" to="(-1 * 1)" />
    <mutant id="mutant_870" viable="false" in="org.apache.commons.io.input.BOMInputStream.mark(int)" from="markFbIndex" to="markFbIndex &gt;= 0 ? markFbIndex : markFbIndex * -1" />
    <mutant id="mutant_871" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="(prefixes.length)" to="(prefixes.length &gt;= 0 ? prefixes.length : prefixes.length * -1)" />
    <mutant id="mutant_1207" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="expected" to="(expected &gt;= 0 ? expected * -1 : expected)" />
    <mutant id="mutant_872" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix" to="posUnix &gt;= 0 ? posUnix * -1 : posUnix" />
    <mutant id="mutant_1208" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)" from="acceptedFiles.size()" to="acceptedFiles.size() &gt;= 0 ? acceptedFiles.size() : acceptedFiles.size() * -1" />
    <mutant id="mutant_1205" viable="true" in="org.apache.commons.io.monitor.FileAlterationMonitor.getInterval()" from="interval" to="interval &gt;= 0 ? interval * -1 : interval" />
    <mutant id="mutant_1206" viable="false" in="org.apache.commons.io.output.ThresholdingOutputStream.resetByteCount()" from="this.written" to="this.written &gt;= 0 ? this.written : this.written * -1" />
    <mutant id="mutant_1203" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="max" to="(max &gt;= 0 ? max : max * -1)" />
    <mutant id="mutant_1204" viable="false" in="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_404" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_888" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" from="offset" to="offset &gt;= 0 ? offset * -1 : offset" />
    <mutant id="mutant_405" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)" from="8" to="-1 * 8" />
    <mutant id="mutant_889" viable="false" in="?" from="0" to="-1 * 0" />
    <mutant id="mutant_406" viable="true" in="org.apache.commons.io.monitor.FileEntry.setLength(long)" from="length" to="length &gt;= 0 ? length : length * -1" />
    <mutant id="mutant_407" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="2" to="-1 * 2" />
    <mutant id="mutant_400" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_884" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File)" from="4096" to="(-1 * 4096)" />
    <mutant id="mutant_401" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="timeout" to="(timeout &gt;= 0 ? timeout * -1 : timeout)" />
    <mutant id="mutant_885" viable="false" in="org.apache.commons.io.input.NullReader.doEndOfFile()" from="IOUtils.EOF" to="IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1" />
    <mutant id="mutant_402" viable="false" in="org.apache.commons.io.input.CountingInputStream.getCount()" from="result" to="(result &gt;= 0 ? result : result * -1)" />
    <mutant id="mutant_886" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_403" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_887" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(lines.size())" to="(lines.size() &gt;= 0 ? lines.size() : lines.size() * -1)" />
    <mutant id="mutant_1281" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="inBufferPos" to="(inBufferPos &gt;= 0 ? inBufferPos : inBufferPos * -1)" />
    <mutant id="mutant_1282" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="48" to="(-1 * 48)" />
    <mutant id="mutant_1280" viable="true" in="org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_408" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="position" to="position &gt;= 0 ? position * -1 : position" />
    <mutant id="mutant_409" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1278" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="fbIndex" to="fbIndex &gt;= 0 ? fbIndex : fbIndex * -1" />
    <mutant id="mutant_1279" viable="true" in="org.apache.commons.io.output.ProxyWriter.write(char[])" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_1276" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_1277" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip : toSkip * -1)" />
    <mutant id="mutant_1274" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_1275" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="0" to="-1 * 0" />
    <mutant id="mutant_1272" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="(str.length())" to="(str.length() &gt;= 0 ? str.length() : str.length() * -1)" />
    <mutant id="mutant_1273" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="max" to="(max &gt;= 0 ? max * -1 : max)" />
    <mutant id="mutant_880" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.toString()" from="0" to="(-1 * 0)" />
    <mutant id="mutant_881" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip : toSkip * -1)" />
    <mutant id="mutant_882" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_883" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_415" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="8" to="(-1 * 8)" />
    <mutant id="mutant_899" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_416" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="bytesToRead" to="(bytesToRead &gt;= 0 ? bytesToRead * -1 : bytesToRead)" />
    <mutant id="mutant_417" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="c" to="(c &gt;= 0 ? c * -1 : c)" />
    <mutant id="mutant_418" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="0" to="-1 * 0" />
    <mutant id="mutant_411" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,int)" from="buffer.length" to="(buffer.length &gt;= 0 ? buffer.length * -1 : buffer.length)" />
    <mutant id="mutant_895" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_412" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_896" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="(parent.getLevel())" to="(parent.getLevel() &gt;= 0 ? parent.getLevel() : parent.getLevel() * -1)" />
    <mutant id="mutant_413" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.available()" from="(this.bbuf.remaining())" to="(this.bbuf.remaining() &gt;= 0 ? this.bbuf.remaining() : this.bbuf.remaining() * -1)" />
    <mutant id="mutant_897" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_414" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)" from="n" to="(n &gt;= 0 ? n * -1 : n)" />
    <mutant id="mutant_898" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream(int)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_1270" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="length" to="length &gt;= 0 ? length : length * -1" />
    <mutant id="mutant_1271" viable="false" in="org.apache.commons.io.input.NullReader.doEndOfFile()" from="IOUtils.EOF" to="IOUtils.EOF &gt;= 0 ? IOUtils.EOF * -1 : IOUtils.EOF" />
    <mutant id="mutant_419" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1267" viable="true" in="org.apache.commons.io.IOCase.checkCompareTo(java.lang.String,java.lang.String)" from="str1.compareTo(str2)" to="str1.compareTo(str2) &gt;= 0 ? str1.compareTo(str2) : str1.compareTo(str2) * -1" />
    <mutant id="mutant_1268" viable="false" in="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder)" from="ReaderInputStream.DEFAULT_BUFFER_SIZE" to="(ReaderInputStream.DEFAULT_BUFFER_SIZE &gt;= 0 ? ReaderInputStream.DEFAULT_BUFFER_SIZE * -1 : ReaderInputStream.DEFAULT_BUFFER_SIZE)" />
    <mutant id="mutant_1265" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="k" to="(k &gt;= 0 ? k : k * -1)" />
    <mutant id="mutant_1266" viable="false" in="?" from="255" to="(-1 * 255)" />
    <mutant id="mutant_1263" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="(url.indexOf('%'))" to="(url.indexOf('%') &gt;= 0 ? url.indexOf('%') : url.indexOf('%') * -1)" />
    <mutant id="mutant_1264" viable="false" in="?" from="109" to="(-1 * 109)" />
    <mutant id="mutant_1261" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read(byte[])" from="n" to="(n &gt;= 0 ? n * -1 : n)" />
    <mutant id="mutant_1262" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_891" viable="false" in="org.apache.commons.io.monitor.FileEntry.setLastModified(long)" from="this.lastModified" to="this.lastModified &gt;= 0 ? this.lastModified * -1 : this.lastModified" />
    <mutant id="mutant_892" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()" from="target" to="target &gt;= 0 ? target : target * -1" />
    <mutant id="mutant_893" viable="false" in="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)" from="delayMillis" to="(delayMillis &gt;= 0 ? delayMillis * -1 : delayMillis)" />
    <mutant id="mutant_410" viable="false" in="org.apache.commons.io.input.TeeInputStream.read(byte[],int,int)" from="st" to="(st &gt;= 0 ? st * -1 : st)" />
    <mutant id="mutant_894" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="actual" to="(actual &gt;= 0 ? actual : actual * -1)" />
    <mutant id="mutant_1269" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_890" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()" from="remaining" to="remaining &gt;= 0 ? remaining : remaining * -1" />
    <mutant id="mutant_426" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()" from="(written)" to="(written &gt;= 0 ? written : written * -1)" />
    <mutant id="mutant_427" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="extensions.length" to="extensions.length &gt;= 0 ? extensions.length : extensions.length * -1" />
    <mutant id="mutant_428" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter.toString()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_429" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(line.length())" to="(line.length() &gt;= 0 ? line.length() : line.length() * -1)" />
    <mutant id="mutant_422" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="value" to="(value &gt;= 0 ? value : value * -1)" />
    <mutant id="mutant_423" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(newLineSequence.length)" to="(newLineSequence.length &gt;= 0 ? newLineSequence.length : newLineSequence.length * -1)" />
    <mutant id="mutant_424" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream(int)" from="threshold" to="threshold &gt;= 0 ? threshold : threshold * -1" />
    <mutant id="mutant_425" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="bufferSize" to="(bufferSize &gt;= 0 ? bufferSize * -1 : bufferSize)" />
    <mutant id="mutant_1260" viable="false" in="?" from="63" to="(-1 * 63)" />
    <mutant id="mutant_1256" viable="false" in="org.apache.commons.io.output.ChunkedOutputStream(java.io.OutputStream,int)" from="this.chunkSize" to="this.chunkSize &gt;= 0 ? this.chunkSize : this.chunkSize * -1" />
    <mutant id="mutant_1257" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(b.length)" to="(b.length &gt;= 0 ? b.length : b.length * -1)" />
    <mutant id="mutant_1254" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1255" viable="true" in="org.apache.commons.io.output.ChunkedWriter(java.io.Writer)" from="ChunkedWriter.DEFAULT_CHUNK_SIZE" to="(ChunkedWriter.DEFAULT_CHUNK_SIZE &gt;= 0 ? ChunkedWriter.DEFAULT_CHUNK_SIZE * -1 : ChunkedWriter.DEFAULT_CHUNK_SIZE)" />
    <mutant id="mutant_1252" viable="false" in="org.apache.commons.io.FileUtils.waitFor(java.io.File,int)" from="tick" to="tick &gt;= 0 ? tick * -1 : tick" />
    <mutant id="mutant_1253" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1250" viable="true" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1251" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="off" to="(off &gt;= 0 ? off * -1 : off)" />
    <mutant id="mutant_420" viable="true" in="org.apache.commons.io.ByteOrderMark.hashCode()" from="hashCode" to="hashCode &gt;= 0 ? hashCode * -1 : hashCode" />
    <mutant id="mutant_421" viable="false" in="org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[],boolean)" from="data.length" to="(data.length &gt;= 0 ? data.length * -1 : data.length)" />
    <mutant id="mutant_1258" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="position" to="position &gt;= 0 ? position : position * -1" />
    <mutant id="mutant_1259" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="value" to="(value &gt;= 0 ? value : value * -1)" />
    <mutant id="mutant_437" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="0" to="-1 * 0" />
    <mutant id="mutant_438" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" from="files.length" to="files.length &gt;= 0 ? files.length : files.length * -1" />
    <mutant id="mutant_439" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="(max)" to="(max &gt;= 0 ? max : max * -1)" />
    <mutant id="mutant_433" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_434" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_435" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="position" to="position &gt;= 0 ? position : position * -1" />
    <mutant id="mutant_436" viable="true" in="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])" from="bytes.length" to="bytes.length &gt;= 0 ? bytes.length : bytes.length * -1" />
    <mutant id="mutant_1245" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.reset()" from="buffers.get(0).length" to="buffers.get(0).length &gt;= 0 ? buffers.get(0).length : buffers.get(0).length * -1" />
    <mutant id="mutant_1246" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_1243" viable="false" in="?" from="4808255005272229056L" to="(-1 * 4808255005272229056L)" />
    <mutant id="mutant_1244" viable="false" in="?" from="os" to="os &gt;= 0 ? os * -1 : os" />
    <mutant id="mutant_1241" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="currentBuffer.length" to="currentBuffer.length &gt;= 0 ? currentBuffer.length : currentBuffer.length * -1" />
    <mutant id="mutant_1242" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip * -1 : toSkip)" />
    <mutant id="mutant_1240" viable="false" in="org.apache.commons.io.input.BoundedInputStream.available()" from="0" to="-1 * 0" />
    <mutant id="mutant_430" viable="false" in="?" from="0" to="(-1 * 0)" />
    <mutant id="mutant_431" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)" from="ch2" to="(ch2 &gt;= 0 ? ch2 * -1 : ch2)" />
    <mutant id="mutant_432" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1249" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="bytesRead" to="bytesRead &gt;= 0 ? bytesRead : bytesRead * -1" />
    <mutant id="mutant_1247" viable="false" in="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener)" from="Tailer.DEFAULT_DELAY_MILLIS" to="(Tailer.DEFAULT_DELAY_MILLIS &gt;= 0 ? Tailer.DEFAULT_DELAY_MILLIS : Tailer.DEFAULT_DELAY_MILLIS * -1)" />
    <mutant id="mutant_1248" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="0" to="(-1 * 0)" />
    <mutant id="mutant_327" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="file.lastModified()" to="file.lastModified() &gt;= 0 ? file.lastModified() : file.lastModified() * -1" />
    <mutant id="mutant_328" viable="false" in="?" from="FileSystemUtils.INIT_PROBLEM" to="FileSystemUtils.INIT_PROBLEM &gt;= 0 ? FileSystemUtils.INIT_PROBLEM * -1 : FileSystemUtils.INIT_PROBLEM" />
    <mutant id="mutant_329" viable="true" in="org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass(java.lang.String[])" from="(interfaces.length)" to="(interfaces.length &gt;= 0 ? interfaces.length * -1 : interfaces.length)" />
    <mutant id="mutant_323" viable="false" in="?" from="FileSystemUtils.UNIX" to="FileSystemUtils.UNIX &gt;= 0 ? FileSystemUtils.UNIX * -1 : FileSystemUtils.UNIX" />
    <mutant id="mutant_324" viable="false" in="org.apache.commons.io.input.BoundedInputStream.mark(int)" from="pos" to="pos &gt;= 0 ? pos * -1 : pos" />
    <mutant id="mutant_325" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_326" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1)" />
    <mutant id="mutant_1083" viable="false" in="org.apache.commons.io.input.ProxyInputStream.skip(long)" from="ln" to="(ln &gt;= 0 ? ln * -1 : ln)" />
    <mutant id="mutant_1084" viable="false" in="?" from="2132740084016138541L" to="(-1 * 2132740084016138541L)" />
    <mutant id="mutant_1081" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="c" to="c &gt;= 0 ? c * -1 : c" />
    <mutant id="mutant_1082" viable="false" in="org.apache.commons.io.input.CharSequenceReader.close()" from="mark" to="mark &gt;= 0 ? mark * -1 : mark" />
    <mutant id="mutant_1080" viable="false" in="org.apache.commons.io.input.TeeInputStream.read(byte[],int,int)" from="n" to="n &gt;= 0 ? n * -1 : n" />
    <mutant id="mutant_1078" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix : prefix * -1)" />
    <mutant id="mutant_1079" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="(currentBuffer.length)" to="(currentBuffer.length &gt;= 0 ? currentBuffer.length : currentBuffer.length * -1)" />
    <mutant id="mutant_1076" viable="false" in="org.apache.commons.io.FileUtils.waitFor(java.io.File,int)" from="tick" to="(tick &gt;= 0 ? tick : tick * -1)" />
    <mutant id="mutant_1077" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="24" to="(-1 * 24)" />
    <mutant id="mutant_1074" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="(max)" to="(max &gt;= 0 ? max : max * -1)" />
    <mutant id="mutant_1075" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read()" from="result" to="result &gt;= 0 ? result * -1 : result" />
    <mutant id="mutant_320" viable="true" in="org.apache.commons.io.ByteOrderMark.toString()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_321" viable="false" in="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long)" from="delayMillis" to="(delayMillis &gt;= 0 ? delayMillis * -1 : delayMillis)" />
    <mutant id="mutant_322" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="remaining" to="remaining &gt;= 0 ? remaining : remaining * -1" />
    <mutant id="mutant_338" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix" to="(posUnix &gt;= 0 ? posUnix : posUnix * -1)" />
    <mutant id="mutant_339" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="(FilenameUtils.NOT_FOUND)" to="(FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND : FilenameUtils.NOT_FOUND * -1)" />
    <mutant id="mutant_334" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="off" to="(off &gt;= 0 ? off * -1 : off)" />
    <mutant id="mutant_335" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(currentLastBytePos)" to="(currentLastBytePos &gt;= 0 ? currentLastBytePos : currentLastBytePos * -1)" />
    <mutant id="mutant_336" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_337" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="(size)" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_1072" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="firstGT" to="(firstGT &gt;= 0 ? firstGT * -1 : firstGT)" />
    <mutant id="mutant_1073" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.mark(int)" from="this.mark_bbuf" to="this.mark_bbuf &gt;= 0 ? this.mark_bbuf * -1 : this.mark_bbuf" />
    <mutant id="mutant_1070" viable="false" in="org.apache.commons.io.input.ProxyReader.read(java.nio.CharBuffer)" from="target.length()" to="target.length() &gt;= 0 ? target.length() : target.length() * -1" />
    <mutant id="mutant_1071" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1069" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)" from="lastUnixPos" to="(lastUnixPos &gt;= 0 ? lastUnixPos * -1 : lastUnixPos)" />
    <mutant id="mutant_1067" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count)" to="(count &gt;= 0 ? count * -1 : count)" />
    <mutant id="mutant_1068" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.reset()" from="0" to="-1 * 0" />
    <mutant id="mutant_1065" viable="true" in="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)" from="count" to="count &gt;= 0 ? count * -1 : count" />
    <mutant id="mutant_1066" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_1063" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long)" from="IOUtils.DEFAULT_BUFFER_SIZE" to="IOUtils.DEFAULT_BUFFER_SIZE &gt;= 0 ? IOUtils.DEFAULT_BUFFER_SIZE * -1 : IOUtils.DEFAULT_BUFFER_SIZE" />
    <mutant id="mutant_1064" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_330" viable="false" in="org.apache.commons.io.FileUtils.waitFor(java.io.File,int)" from="tick" to="tick &gt;= 0 ? tick : tick * -1" />
    <mutant id="mutant_331" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="position" to="(position &gt;= 0 ? position * -1 : position)" />
    <mutant id="mutant_332" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="bytes" to="(bytes &gt;= 0 ? bytes : bytes * -1)" />
    <mutant id="mutant_333" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()" from="c" to="c &gt;= 0 ? c : c * -1" />
    <mutant id="mutant_349" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="b" to="(b &gt;= 0 ? b : b * -1)" />
    <mutant id="mutant_345" viable="true" in="org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_346" viable="false" in="org.apache.commons.io.input.NullInputStream.getSize()" from="size" to="size &gt;= 0 ? size : size * -1" />
    <mutant id="mutant_347" viable="false" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="wcsIdx" to="wcsIdx &gt;= 0 ? wcsIdx : wcsIdx * -1" />
    <mutant id="mutant_348" viable="false" in="org.apache.commons.io.input.NullReader.mark(int)" from="readlimit" to="readlimit &gt;= 0 ? readlimit : readlimit * -1" />
    <mutant id="mutant_1061" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1062" viable="false" in="?" from="FileSystemUtils.WINDOWS" to="FileSystemUtils.WINDOWS &gt;= 0 ? FileSystemUtils.WINDOWS * -1 : FileSystemUtils.WINDOWS" />
    <mutant id="mutant_1060" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="(search.length())" to="(search.length() &gt;= 0 ? search.length() * -1 : search.length())" />
    <mutant id="mutant_1058" viable="false" in="?" from="0" to="-1 * 0" />
    <mutant id="mutant_1059" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="blockSize" to="(blockSize &gt;= 0 ? blockSize : blockSize * -1)" />
    <mutant id="mutant_1056" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i" to="i &gt;= 0 ? i * -1 : i" />
    <mutant id="mutant_1057" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="readed" to="readed &gt;= 0 ? readed * -1 : readed" />
    <mutant id="mutant_1054" viable="true" in="org.apache.commons.io.filefilter.AndFileFilter.toString()" from="(fileFilters.size())" to="(fileFilters.size() &gt;= 0 ? fileFilters.size() : fileFilters.size() * -1)" />
    <mutant id="mutant_1055" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_1052" viable="false" in="?" from="7426486598995782105L" to="(-1 * 7426486598995782105L)" />
    <mutant id="mutant_1053" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="(FileUtils.ONE_KB)" to="(FileUtils.ONE_KB &gt;= 0 ? FileUtils.ONE_KB : FileUtils.ONE_KB * -1)" />
    <mutant id="mutant_341" viable="true" in="org.apache.commons.io.output.WriterOutputStream.write(byte[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_342" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="32" to="(-1 * 32)" />
    <mutant id="mutant_343" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(no)" to="(no &gt;= 0 ? no : no * -1)" />
    <mutant id="mutant_344" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip * -1 : toSkip)" />
    <mutant id="mutant_340" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter(long,boolean)" from="size" to="size &gt;= 0 ? size * -1 : size" />
    <mutant id="mutant_356" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="chunk" to="chunk &gt;= 0 ? chunk * -1 : chunk" />
    <mutant id="mutant_357" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)" from="value" to="(value &gt;= 0 ? value * -1 : value)" />
    <mutant id="mutant_358" viable="true" in="org.apache.commons.io.filefilter.OrFileFilter.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_359" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_1050" viable="false" in="org.apache.commons.io.IOUtils.toBufferedReader(java.io.Reader,int)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_1051" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size1" to="(size1 &gt;= 0 ? size1 * -1 : size1)" />
    <mutant id="mutant_1047" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.read()" from="target" to="target &gt;= 0 ? target * -1 : target" />
    <mutant id="mutant_1048" viable="false" in="?" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1045" viable="true" in="org.apache.commons.io.output.ProxyWriter.write(char[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_1046" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(buf.length())" to="(buf.length() &gt;= 0 ? buf.length() : buf.length() * -1)" />
    <mutant id="mutant_1043" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_1044" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List,org.apache.commons.io.IOCase)" from="prefixes.size()" to="prefixes.size() &gt;= 0 ? prefixes.size() * -1 : prefixes.size()" />
    <mutant id="mutant_1041" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1042" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="strStartIndex" to="(strStartIndex &gt;= 0 ? strStartIndex * -1 : strStartIndex)" />
    <mutant id="mutant_352" viable="true" in="org.apache.commons.io.output.ChunkedOutputStream.write(byte[],int,int)" from="length" to="length &gt;= 0 ? length * -1 : length" />
    <mutant id="mutant_353" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="off" to="(off &gt;= 0 ? off * -1 : off)" />
    <mutant id="mutant_354" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_355" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_350" viable="true" in="org.apache.commons.io.DirectoryWalker$CancelException(java.io.File,int)" from="depth" to="(depth &gt;= 0 ? depth : depth * -1)" />
    <mutant id="mutant_1049" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_351" viable="true" in="org.apache.commons.io.filefilter.WildcardFileFilter.toString()" from="0" to="-1 * 0" />
    <mutant id="mutant_367" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(byte[],java.io.OutputStream)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_368" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="this.mark_cbuf" to="this.mark_cbuf &gt;= 0 ? this.mark_cbuf * -1 : this.mark_cbuf" />
    <mutant id="mutant_369" viable="true" in="org.apache.commons.io.output.WriterOutputStream.write(byte[])" from="b.length" to="(b.length &gt;= 0 ? b.length : b.length * -1)" />
    <mutant id="mutant_363" viable="false" in="org.apache.commons.io.input.NullReader.read()" from="(position)" to="(position &gt;= 0 ? position * -1 : position)" />
    <mutant id="mutant_364" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="len" to="len &gt;= 0 ? len * -1 : len" />
    <mutant id="mutant_365" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_366" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)" from="(threshold)" to="(threshold &gt;= 0 ? threshold : threshold * -1)" />
    <mutant id="mutant_360" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip : toSkip * -1)" />
    <mutant id="mutant_361" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_362" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="0" to="-1 * 0" />
    <mutant id="mutant_378" viable="true" in="org.apache.commons.io.output.ProxyWriter.write(char[])" from="0" to="-1 * 0" />
    <mutant id="mutant_379" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="(array.length)" to="(array.length &gt;= 0 ? array.length : array.length * -1)" />
    <mutant id="mutant_374" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip : toSkip * -1)" />
    <mutant id="mutant_375" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_376" viable="false" in="org.apache.commons.io.input.BoundedReader.mark(int)" from="markedAt" to="markedAt &gt;= 0 ? markedAt : markedAt * -1" />
    <mutant id="mutant_377" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_370" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_371" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="inputOffset" to="(inputOffset &gt;= 0 ? inputOffset : inputOffset * -1)" />
    <mutant id="mutant_372" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="IOUtils.EOF" to="IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1" />
    <mutant id="mutant_373" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="c" to="(c &gt;= 0 ? c * -1 : c)" />
    <mutant id="mutant_389" viable="false" in="org.apache.commons.io.input.BoundedReader.mark(int)" from="markedAt" to="markedAt &gt;= 0 ? markedAt * -1 : markedAt" />
    <mutant id="mutant_380" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="3" to="(-1 * 3)" />
    <mutant id="mutant_1098" viable="true" in="org.apache.commons.io.filefilter.OrFileFilter.toString()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1099" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLastModified()" from="lastModified" to="lastModified &gt;= 0 ? lastModified * -1 : lastModified" />
    <mutant id="mutant_1096" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="8" to="(-1 * 8)" />
    <mutant id="mutant_1097" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)" from="buf.length" to="(buf.length &gt;= 0 ? buf.length * -1 : buf.length)" />
    <mutant id="mutant_385" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="16" to="(-1 * 16)" />
    <mutant id="mutant_386" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_387" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j" to="(j &gt;= 0 ? j : j * -1)" />
    <mutant id="mutant_388" viable="false" in="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,int)" from="delayMillis" to="(delayMillis &gt;= 0 ? delayMillis : delayMillis * -1)" />
    <mutant id="mutant_381" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="wcsIdx" to="(wcsIdx &gt;= 0 ? wcsIdx * -1 : wcsIdx)" />
    <mutant id="mutant_382" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_383" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="4294967295L" to="(-1 * 4294967295L)" />
    <mutant id="mutant_384" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="read" to="(read &gt;= 0 ? read : read * -1)" />
    <mutant id="mutant_1094" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.write(char[],int,int)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_1095" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(byte[],java.io.OutputStream)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1092" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="suffixes.length" to="suffixes.length &gt;= 0 ? suffixes.length : suffixes.length * -1" />
    <mutant id="mutant_1093" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_1090" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="FileUtils.FILE_COPY_BUFFER_SIZE" to="FileUtils.FILE_COPY_BUFFER_SIZE &gt;= 0 ? FileUtils.FILE_COPY_BUFFER_SIZE : FileUtils.FILE_COPY_BUFFER_SIZE * -1" />
    <mutant id="mutant_1091" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_390" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="length" to="length &gt;= 0 ? length : length * -1" />
    <mutant id="mutant_1089" viable="true" in="org.apache.commons.io.filefilter.WildcardFileFilter(java.lang.String[],org.apache.commons.io.IOCase)" from="wildcards.length" to="(wildcards.length &gt;= 0 ? wildcards.length * -1 : wildcards.length)" />
    <mutant id="mutant_391" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1087" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="count" to="count &gt;= 0 ? count * -1 : count" />
    <mutant id="mutant_1088" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip" to="toSkip &gt;= 0 ? toSkip * -1 : toSkip" />
    <mutant id="mutant_1085" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)" from="ch" to="ch &gt;= 0 ? ch * -1 : ch" />
    <mutant id="mutant_1086" viable="false" in="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)" from="delayMillis" to="(delayMillis &gt;= 0 ? delayMillis * -1 : delayMillis)" />
    <mutant id="mutant_396" viable="false" in="org.apache.commons.io.input.ProxyReader.read()" from="1" to="(-1 * 1)" />
    <mutant id="mutant_397" viable="true" in="org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)" from="c" to="(c &gt;= 0 ? c * -1 : c)" />
    <mutant id="mutant_398" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="0" to="-1 * 0" />
    <mutant id="mutant_399" viable="true" in="org.apache.commons.io.filefilter.EmptyFileFilter.accept(java.io.File)" from="(file.length())" to="(file.length() &gt;= 0 ? file.length() : file.length() * -1)" />
    <mutant id="mutant_392" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="lineStart" to="(lineStart &gt;= 0 ? lineStart * -1 : lineStart)" />
    <mutant id="mutant_393" viable="false" in="org.apache.commons.io.input.TeeInputStream.read()" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF * -1 : IOUtils.EOF)" />
    <mutant id="mutant_394" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)" from="value" to="(value &gt;= 0 ? value : value * -1)" />
    <mutant id="mutant_395" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="length" to="length &gt;= 0 ? length * -1 : length" />
    <mutant id="mutant_1519" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="value" to="(value &gt;= 0 ? value : value * -1)" />
    <mutant id="mutant_1510" viable="false" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="length" to="length &gt;= 0 ? length * -1 : length" />
    <mutant id="mutant_1517" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream,int)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_1518" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip * -1 : toSkip)" />
    <mutant id="mutant_1515" viable="false" in="org.apache.commons.io.filefilter.AndFileFilter.toString()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1516" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_1513" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" from="bytes" to="(bytes &gt;= 0 ? bytes * -1 : bytes)" />
    <mutant id="mutant_1514" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="bytesRead" to="bytesRead &gt;= 0 ? bytesRead : bytesRead * -1" />
    <mutant id="mutant_1511" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="XmlStreamReader.BUFFER_SIZE" to="XmlStreamReader.BUFFER_SIZE &gt;= 0 ? XmlStreamReader.BUFFER_SIZE : XmlStreamReader.BUFFER_SIZE * -1" />
    <mutant id="mutant_1512" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="c" to="(c &gt;= 0 ? c * -1 : c)" />
    <mutant id="mutant_1508" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="(lines.size())" to="(lines.size() &gt;= 0 ? lines.size() * -1 : lines.size())" />
    <mutant id="mutant_1509" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(FilenameUtils.NOT_FOUND)" to="(FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND * -1 : FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_1506" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(currentBuffer.length)" to="(currentBuffer.length &gt;= 0 ? currentBuffer.length * -1 : currentBuffer.length)" />
    <mutant id="mutant_1507" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1504" viable="false" in="org.apache.commons.io.input.ProxyReader.read()" from="c" to="(c &gt;= 0 ? c * -1 : c)" />
    <mutant id="mutant_1505" viable="true" in="org.apache.commons.io.monitor.FileEntry.setLength(long)" from="length" to="length &gt;= 0 ? length * -1 : length" />
    <mutant id="mutant_1502" viable="true" in="org.apache.commons.io.output.ChunkedWriter.write(char[],int,int)" from="bytes" to="(bytes &gt;= 0 ? bytes : bytes * -1)" />
    <mutant id="mutant_1503" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="end" to="(end &gt;= 0 ? end * -1 : end)" />
    <mutant id="mutant_1500" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1501" viable="false" in="org.apache.commons.io.input.TeeInputStream.read()" from="ch" to="ch &gt;= 0 ? ch * -1 : ch" />
    <mutant id="mutant_1553" viable="false" in="org.apache.commons.io.input.BoundedReader.read()" from="(charsRead)" to="(charsRead &gt;= 0 ? charsRead : charsRead * -1)" />
    <mutant id="mutant_1554" viable="true" in="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1551" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="blockSize" to="blockSize &gt;= 0 ? blockSize * -1 : blockSize" />
    <mutant id="mutant_1552" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1550" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="remain" to="(remain &gt;= 0 ? remain * -1 : remain)" />
    <mutant id="mutant_1559" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posWin" to="posWin &gt;= 0 ? posWin * -1 : posWin" />
    <mutant id="mutant_1557" viable="false" in="?" from="1024" to="(-1 * 1024)" />
    <mutant id="mutant_1558" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()" from="pos" to="(pos &gt;= 0 ? pos * -1 : pos)" />
    <mutant id="mutant_1555" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="IOUtils.SKIP_BUFFER_SIZE" to="(IOUtils.SKIP_BUFFER_SIZE &gt;= 0 ? IOUtils.SKIP_BUFFER_SIZE : IOUtils.SKIP_BUFFER_SIZE * -1)" />
    <mutant id="mutant_1556" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1542" viable="false" in="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.Charset,int)" from="bufferSize" to="(bufferSize &gt;= 0 ? bufferSize : bufferSize * -1)" />
    <mutant id="mutant_1543" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip * -1 : toSkip)" />
    <mutant id="mutant_1540" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1541" viable="false" in="org.apache.commons.io.input.CountingInputStream.skip(long)" from="length" to="(length &gt;= 0 ? length * -1 : length)" />
    <mutant id="mutant_1548" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="avoidNewlineSplitBufferSize" to="avoidNewlineSplitBufferSize &gt;= 0 ? avoidNewlineSplitBufferSize : avoidNewlineSplitBufferSize * -1" />
    <mutant id="mutant_1549" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1546" viable="false" in="?" from="4" to="(-1 * 4)" />
    <mutant id="mutant_1547" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="FileUtils.sizeOfDirectory(file1)" to="FileUtils.sizeOfDirectory(file1) &gt;= 0 ? FileUtils.sizeOfDirectory(file1) * -1 : FileUtils.sizeOfDirectory(file1)" />
    <mutant id="mutant_1544" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1545" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_701" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length" to="(length &gt;= 0 ? length * -1 : length)" />
    <mutant id="mutant_702" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="pos" to="pos &gt;= 0 ? pos : pos * -1" />
    <mutant id="mutant_703" viable="true" in="org.apache.commons.io.input.BoundedReader.read()" from="1" to="(-1 * 1)" />
    <mutant id="mutant_704" viable="false" in="org.apache.commons.io.FileUtils.toURLs(java.io.File[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_700" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="origLastModified" to="(origLastModified &gt;= 0 ? origLastModified * -1 : origLastModified)" />
    <mutant id="mutant_709" viable="false" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="textIdx" to="textIdx &gt;= 0 ? textIdx : textIdx * -1" />
    <mutant id="mutant_705" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="(filename.length())" to="(filename.length() &gt;= 0 ? filename.length() : filename.length() * -1)" />
    <mutant id="mutant_706" viable="false" in="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)" from="((int)(count))" to="((int)(count)) &gt;= 0 ? ((int)(count)) : ((int)(count)) * -1" />
    <mutant id="mutant_707" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount(byte[],int)" from="(newLineSequence.length)" to="(newLineSequence.length &gt;= 0 ? newLineSequence.length : newLineSequence.length * -1)" />
    <mutant id="mutant_708" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)" from="value" to="(value &gt;= 0 ? value * -1 : value)" />
    <mutant id="mutant_1531" viable="true" in="org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)" from="stopInterval" to="(stopInterval &gt;= 0 ? stopInterval * -1 : stopInterval)" />
    <mutant id="mutant_1532" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetByteCount()" from="this.count" to="this.count &gt;= 0 ? this.count : this.count * -1" />
    <mutant id="mutant_1530" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()" from="remaining" to="remaining &gt;= 0 ? remaining : remaining * -1" />
    <mutant id="mutant_1539" viable="true" in="org.apache.commons.io.output.CountingOutputStream.beforeWrite(int)" from="n" to="n &gt;= 0 ? n * -1 : n" />
    <mutant id="mutant_1537" viable="true" in="org.apache.commons.io.output.ChunkedOutputStream.write(byte[],int,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1538" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="size" to="size &gt;= 0 ? size : size * -1" />
    <mutant id="mutant_1535" viable="false" in="?" from="1L" to="-1 * 1L" />
    <mutant id="mutant_1536" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="(position)" to="(position &gt;= 0 ? position : position * -1)" />
    <mutant id="mutant_1533" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="k" to="(k &gt;= 0 ? k : k * -1)" />
    <mutant id="mutant_1534" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="returnLength" to="returnLength &gt;= 0 ? returnLength : returnLength * -1" />
    <mutant id="mutant_712" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="n" to="n &gt;= 0 ? n : n * -1" />
    <mutant id="mutant_713" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_714" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="this.no" to="this.no &gt;= 0 ? this.no : this.no * -1" />
    <mutant id="mutant_715" viable="false" in="org.apache.commons.io.input.BoundedInputStream.mark(int)" from="readlimit" to="(readlimit &gt;= 0 ? readlimit : readlimit * -1)" />
    <mutant id="mutant_710" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="secondCount" to="(secondCount &gt;= 0 ? secondCount : secondCount * -1)" />
    <mutant id="mutant_711" viable="false" in="?" from="6994123481142850163L" to="(-1 * 6994123481142850163L)" />
    <mutant id="mutant_716" viable="false" in="?" from="63" to="(-1 * 63)" />
    <mutant id="mutant_717" viable="false" in="org.apache.commons.io.ThreadMonitor(java.lang.Thread,long)" from="this.timeout" to="this.timeout &gt;= 0 ? this.timeout : this.timeout * -1" />
    <mutant id="mutant_718" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="bufferSize" to="(bufferSize &gt;= 0 ? bufferSize * -1 : bufferSize)" />
    <mutant id="mutant_719" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="(tok.countTokens())" to="(tok.countTokens() &gt;= 0 ? tok.countTokens() : tok.countTokens() * -1)" />
    <mutant id="mutant_1520" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1521" viable="true" in="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)" from="endLen" to="(endLen &gt;= 0 ? endLen : endLen * -1)" />
    <mutant id="mutant_1528" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_1529" viable="true" in="org.apache.commons.io.output.CountingOutputStream.getCount()" from="((int)(result))" to="((int)(result)) &gt;= 0 ? ((int)(result)) * -1 : ((int)(result))" />
    <mutant id="mutant_1526" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="maxBytesPerChar" to="(maxBytesPerChar &gt;= 0 ? maxBytesPerChar * -1 : maxBytesPerChar)" />
    <mutant id="mutant_1527" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target" to="(target &gt;= 0 ? target : target * -1)" />
    <mutant id="mutant_1524" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="inBufferPos" to="(inBufferPos &gt;= 0 ? inBufferPos : inBufferPos * -1)" />
    <mutant id="mutant_1525" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.compare(java.io.File,java.io.File)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1522" viable="false" in="?" from="146927496096066153L" to="(-1 * 146927496096066153L)" />
    <mutant id="mutant_1523" viable="true" in="org.apache.commons.io.comparator.DirectoryFileComparator.getType(java.io.File)" from="1" to="-1 * 1" />
    <mutant id="mutant_723" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="IOUtils.EOF" to="IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1" />
    <mutant id="mutant_724" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="XmlStreamReader.BUFFER_SIZE" to="XmlStreamReader.BUFFER_SIZE &gt;= 0 ? XmlStreamReader.BUFFER_SIZE * -1 : XmlStreamReader.BUFFER_SIZE" />
    <mutant id="mutant_725" viable="false" in="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_726" viable="true" in="org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)" from="st" to="(st &gt;= 0 ? st : st * -1)" />
    <mutant id="mutant_720" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size2" to="size2 &gt;= 0 ? size2 : size2 * -1" />
    <mutant id="mutant_721" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="length" to="(length &gt;= 0 ? length * -1 : length)" />
    <mutant id="mutant_722" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(position)" to="(position &gt;= 0 ? position * -1 : position)" />
    <mutant id="mutant_727" viable="true" in="org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)" from="st" to="(st &gt;= 0 ? st * -1 : st)" />
    <mutant id="mutant_728" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="start" to="(start &gt;= 0 ? start * -1 : start)" />
    <mutant id="mutant_729" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="127" to="(-1 * 127)" />
    <mutant id="mutant_1113" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,byte)" from="6" to="(-1 * 6)" />
    <mutant id="mutant_1597" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.nio.charset.Charset,int)" from="maxBytesPerChar" to="(maxBytesPerChar &gt;= 0 ? maxBytesPerChar : maxBytesPerChar * -1)" />
    <mutant id="mutant_1114" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="b" to="(b &gt;= 0 ? b : b * -1)" />
    <mutant id="mutant_1598" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="(data.length)" to="(data.length &gt;= 0 ? data.length : data.length * -1)" />
    <mutant id="mutant_1111" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="remaining" to="(remaining &gt;= 0 ? remaining : remaining * -1)" />
    <mutant id="mutant_1595" viable="false" in="?" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1112" viable="true" in="org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[],int,long)" from="(proc.exitValue())" to="(proc.exitValue() &gt;= 0 ? proc.exitValue() : proc.exitValue() * -1)" />
    <mutant id="mutant_1596" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.skip(long)" from="skipped" to="(skipped &gt;= 0 ? skipped * -1 : skipped)" />
    <mutant id="mutant_1593" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="depth" to="(depth &gt;= 0 ? depth * -1 : depth)" />
    <mutant id="mutant_1110" viable="false" in="org.apache.commons.io.input.NullInputStream.close()" from="0" to="-1 * 0" />
    <mutant id="mutant_1594" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="FileUtils.FILE_COPY_BUFFER_SIZE" to="FileUtils.FILE_COPY_BUFFER_SIZE &gt;= 0 ? FileUtils.FILE_COPY_BUFFER_SIZE * -1 : FileUtils.FILE_COPY_BUFFER_SIZE" />
    <mutant id="mutant_1591" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_1592" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="0" to="-1 * 0" />
    <mutant id="mutant_1119" viable="true" in="org.apache.commons.io.filefilter.AndFileFilter.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1117" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(XmlStreamReader.BUFFER_SIZE)" to="(XmlStreamReader.BUFFER_SIZE &gt;= 0 ? XmlStreamReader.BUFFER_SIZE * -1 : XmlStreamReader.BUFFER_SIZE)" />
    <mutant id="mutant_1118" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1115" viable="true" in="org.apache.commons.io.monitor.FileAlterationMonitor.run()" from="interval" to="(interval &gt;= 0 ? interval : interval * -1)" />
    <mutant id="mutant_1599" viable="true" in="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder)" from="WriterOutputStream.DEFAULT_BUFFER_SIZE" to="(WriterOutputStream.DEFAULT_BUFFER_SIZE &gt;= 0 ? WriterOutputStream.DEFAULT_BUFFER_SIZE : WriterOutputStream.DEFAULT_BUFFER_SIZE * -1)" />
    <mutant id="mutant_1116" viable="false" in="org.apache.commons.io.input.NullInputStream.getSize()" from="size" to="size &gt;= 0 ? size * -1 : size" />
    <mutant id="mutant_734" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(mark)" to="(mark &gt;= 0 ? mark : mark * -1)" />
    <mutant id="mutant_735" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="(readlimit)" to="(readlimit &gt;= 0 ? readlimit : readlimit * -1)" />
    <mutant id="mutant_736" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="size" to="size &gt;= 0 ? size * -1 : size" />
    <mutant id="mutant_737" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLevel()" from="0" to="-1 * 0" />
    <mutant id="mutant_730" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="length" to="(length &gt;= 0 ? length * -1 : length)" />
    <mutant id="mutant_731" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_732" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read(byte[])" from="bts.length" to="bts.length &gt;= 0 ? bts.length : bts.length * -1" />
    <mutant id="mutant_733" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="off" to="off &gt;= 0 ? off : off * -1" />
    <mutant id="mutant_1590" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="remain" to="(remain &gt;= 0 ? remain : remain * -1)" />
    <mutant id="mutant_738" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="remain" to="(remain &gt;= 0 ? remain : remain * -1)" />
    <mutant id="mutant_739" viable="true" in="org.apache.commons.io.output.WriterOutputStream.flushOutput()" from="(decoderOut.position())" to="(decoderOut.position() &gt;= 0 ? decoderOut.position() * -1 : decoderOut.position())" />
    <mutant id="mutant_1102" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1586" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="c" to="(c &gt;= 0 ? c : c * -1)" />
    <mutant id="mutant_1103" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="remain" to="remain &gt;= 0 ? remain : remain * -1" />
    <mutant id="mutant_1587" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip * -1 : toSkip)" />
    <mutant id="mutant_1100" viable="false" in="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)" from="this.byteOffset" to="this.byteOffset &gt;= 0 ? this.byteOffset : this.byteOffset * -1" />
    <mutant id="mutant_1584" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1101" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="no" to="(no &gt;= 0 ? no * -1 : no)" />
    <mutant id="mutant_1585" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="newLineMatchByteCount" to="newLineMatchByteCount &gt;= 0 ? newLineMatchByteCount * -1 : newLineMatchByteCount" />
    <mutant id="mutant_1582" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target" to="target &gt;= 0 ? target * -1 : target" />
    <mutant id="mutant_1583" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="2" to="-1 * 2" />
    <mutant id="mutant_1580" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="3" to="(-1 * 3)" />
    <mutant id="mutant_1581" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="0" to="-1 * 0" />
    <mutant id="mutant_1108" viable="false" in="org.apache.commons.io.input.ReaderInputStream(java.io.Reader,java.nio.charset.CharsetEncoder,int)" from="bufferSize" to="(bufferSize &gt;= 0 ? bufferSize : bufferSize * -1)" />
    <mutant id="mutant_1109" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="readCount" to="readCount &gt;= 0 ? readCount : readCount * -1" />
    <mutant id="mutant_1106" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="74" to="(-1 * 74)" />
    <mutant id="mutant_1107" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="last" to="last &gt;= 0 ? last * -1 : last" />
    <mutant id="mutant_1104" viable="true" in="org.apache.commons.io.output.ProxyOutputStream.write(byte[])" from="0" to="-1 * 0" />
    <mutant id="mutant_1588" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_1105" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1589" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_745" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_746" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer)" from="IOUtils.DEFAULT_BUFFER_SIZE" to="IOUtils.DEFAULT_BUFFER_SIZE &gt;= 0 ? IOUtils.DEFAULT_BUFFER_SIZE * -1 : IOUtils.DEFAULT_BUFFER_SIZE" />
    <mutant id="mutant_747" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="IOUtils.EOF" to="IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1" />
    <mutant id="mutant_748" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="firstCount" to="firstCount &gt;= 0 ? firstCount : firstCount * -1" />
    <mutant id="mutant_741" viable="true" in="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)" from="CopyUtils.DEFAULT_BUFFER_SIZE" to="CopyUtils.DEFAULT_BUFFER_SIZE &gt;= 0 ? CopyUtils.DEFAULT_BUFFER_SIZE * -1 : CopyUtils.DEFAULT_BUFFER_SIZE" />
    <mutant id="mutant_742" viable="false" in="?" from="4" to="(-1 * 4)" />
    <mutant id="mutant_743" viable="true" in="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String,int,boolean)" from="bufferSize" to="(bufferSize &gt;= 0 ? bufferSize * -1 : bufferSize)" />
    <mutant id="mutant_744" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String,int)" from="bufferSize" to="(bufferSize &gt;= 0 ? bufferSize : bufferSize * -1)" />
    <mutant id="mutant_749" viable="true" in="org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)" from="(FilenameUtils.NOT_FOUND)" to="(FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND * -1 : FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_1575" viable="true" in="org.apache.commons.io.ByteOrderMark.get(int)" from="pos" to="(pos &gt;= 0 ? pos * -1 : pos)" />
    <mutant id="mutant_1576" viable="true" in="org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)" from="st" to="(st &gt;= 0 ? st : st * -1)" />
    <mutant id="mutant_1573" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_1574" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1571" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1572" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1570" viable="false" in="org.apache.commons.io.input.BOMInputStream(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_740" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="0" to="-1 * 0" />
    <mutant id="mutant_1579" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="(filledBufferSum)" to="(filledBufferSum &gt;= 0 ? filledBufferSum : filledBufferSum * -1)" />
    <mutant id="mutant_1577" viable="true" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="b" to="(b &gt;= 0 ? b * -1 : b)" />
    <mutant id="mutant_1578" viable="false" in="?" from="FileUtils.ONE_KB" to="(FileUtils.ONE_KB &gt;= 0 ? FileUtils.ONE_KB * -1 : FileUtils.ONE_KB)" />
    <mutant id="mutant_756" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="actual" to="(actual &gt;= 0 ? actual * -1 : actual)" />
    <mutant id="mutant_757" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size2" to="(size2 &gt;= 0 ? size2 : size2 * -1)" />
    <mutant id="mutant_758" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="read" to="read &gt;= 0 ? read : read * -1" />
    <mutant id="mutant_759" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="file.length()" to="file.length() &gt;= 0 ? file.length() : file.length() * -1" />
    <mutant id="mutant_752" viable="true" in="org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,boolean,java.lang.String)" from="XmlStreamReader.BUFFER_SIZE" to="(XmlStreamReader.BUFFER_SIZE &gt;= 0 ? XmlStreamReader.BUFFER_SIZE * -1 : XmlStreamReader.BUFFER_SIZE)" />
    <mutant id="mutant_753" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="off" to="(off &gt;= 0 ? off * -1 : off)" />
    <mutant id="mutant_754" viable="true" in="org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)" from="end" to="(end &gt;= 0 ? end * -1 : end)" />
    <mutant id="mutant_755" viable="false" in="org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)" from="(file1.length())" to="(file1.length() &gt;= 0 ? file1.length() : file1.length() * -1)" />
    <mutant id="mutant_1564" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_1565" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)" from="value1" to="(value1 &gt;= 0 ? value1 : value1 * -1)" />
    <mutant id="mutant_1562" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="j" to="(j &gt;= 0 ? j : j * -1)" />
    <mutant id="mutant_1563" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_1560" viable="true" in="org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass(java.lang.String[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1561" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="(avoidNewlineSplitBufferSize)" to="(avoidNewlineSplitBufferSize &gt;= 0 ? avoidNewlineSplitBufferSize * -1 : avoidNewlineSplitBufferSize)" />
    <mutant id="mutant_750" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="FileSystemUtils.OTHER" to="FileSystemUtils.OTHER &gt;= 0 ? FileSystemUtils.OTHER : FileSystemUtils.OTHER * -1" />
    <mutant id="mutant_751" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="off" to="(off &gt;= 0 ? off : off * -1)" />
    <mutant id="mutant_1568" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1569" viable="true" in="org.apache.commons.io.output.ProxyWriter.write(char[])" from="chr.length" to="chr.length &gt;= 0 ? chr.length * -1 : chr.length" />
    <mutant id="mutant_1566" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(readlimit)" to="(readlimit &gt;= 0 ? readlimit * -1 : readlimit)" />
    <mutant id="mutant_1567" viable="false" in="org.apache.commons.io.input.NullInputStream.reset()" from="mark" to="mark &gt;= 0 ? mark * -1 : mark" />
    <mutant id="mutant_767" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="(pos)" to="(pos &gt;= 0 ? pos * -1 : pos)" />
    <mutant id="mutant_768" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix : prefix * -1)" />
    <mutant id="mutant_769" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="read" to="read &gt;= 0 ? read * -1 : read" />
    <mutant id="mutant_763" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(xmlProlog.length())" to="(xmlProlog.length() &gt;= 0 ? xmlProlog.length() * -1 : xmlProlog.length())" />
    <mutant id="mutant_764" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_765" viable="false" in="org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File,int,int)" from="readTimeout" to="(readTimeout &gt;= 0 ? readTimeout : readTimeout * -1)" />
    <mutant id="mutant_766" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target" to="(target &gt;= 0 ? target * -1 : target)" />
    <mutant id="mutant_1160" viable="true" in="org.apache.commons.io.output.ChunkedWriter.write(char[],int,int)" from="chunkSize" to="(chunkSize &gt;= 0 ? chunkSize * -1 : chunkSize)" />
    <mutant id="mutant_1161" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix" to="posUnix &gt;= 0 ? posUnix : posUnix * -1" />
    <mutant id="mutant_1157" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)" from="value" to="(value &gt;= 0 ? value * -1 : value)" />
    <mutant id="mutant_1158" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="5" to="(-1 * 5)" />
    <mutant id="mutant_1155" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="k" to="(k &gt;= 0 ? k : k * -1)" />
    <mutant id="mutant_1156" viable="false" in="org.apache.commons.io.comparator.CompositeFileComparator.toString()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1153" viable="true" in="org.apache.commons.io.output.ChunkedWriter(java.io.Writer,int)" from="chunkSize" to="(chunkSize &gt;= 0 ? chunkSize * -1 : chunkSize)" />
    <mutant id="mutant_1154" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="chars_read" to="chars_read &gt;= 0 ? chars_read : chars_read * -1" />
    <mutant id="mutant_1151" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="(encoding.length())" to="(encoding.length() &gt;= 0 ? encoding.length() * -1 : encoding.length())" />
    <mutant id="mutant_1152" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix : prefix * -1)" />
    <mutant id="mutant_760" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_761" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter.toString()" from="this.byteOffset" to="(this.byteOffset &gt;= 0 ? this.byteOffset : this.byteOffset * -1)" />
    <mutant id="mutant_762" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="firstGT" to="(firstGT &gt;= 0 ? firstGT : firstGT * -1)" />
    <mutant id="mutant_1159" viable="false" in="?" from="0" to="(-1 * 0)" />
    <mutant id="mutant_778" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="0" to="-1 * 0" />
    <mutant id="mutant_779" viable="false" in="org.apache.commons.io.input.TeeInputStream.read(byte[],int,int)" from="n" to="(n &gt;= 0 ? n : n * -1)" />
    <mutant id="mutant_774" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="wcsIdx" to="(wcsIdx &gt;= 0 ? wcsIdx * -1 : wcsIdx)" />
    <mutant id="mutant_775" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="leftOverOfLastFilePart.length" to="(leftOverOfLastFilePart.length &gt;= 0 ? leftOverOfLastFilePart.length : leftOverOfLastFilePart.length * -1)" />
    <mutant id="mutant_776" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="returnLength" to="returnLength &gt;= 0 ? returnLength : returnLength * -1" />
    <mutant id="mutant_777" viable="false" in="org.apache.commons.io.input.BOMInputStream$1.compare(org.apache.commons.io.ByteOrderMark,org.apache.commons.io.ByteOrderMark)" from="len2" to="(len2 &gt;= 0 ? len2 : len2 * -1)" />
    <mutant id="mutant_1150" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1146" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix * -1 : prefix)" />
    <mutant id="mutant_1147" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="len" to="len &gt;= 0 ? len * -1 : len" />
    <mutant id="mutant_1144" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="i" to="i &gt;= 0 ? i * -1 : i" />
    <mutant id="mutant_1145" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_1142" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="endIndex" to="(endIndex &gt;= 0 ? endIndex : endIndex * -1)" />
    <mutant id="mutant_1143" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="avoidNewlineSplitBufferSize" to="avoidNewlineSplitBufferSize &gt;= 0 ? avoidNewlineSplitBufferSize * -1 : avoidNewlineSplitBufferSize" />
    <mutant id="mutant_1140" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.read()" from="target" to="(target &gt;= 0 ? target * -1 : target)" />
    <mutant id="mutant_1141" viable="false" in="?" from="2" to="-1 * 2" />
    <mutant id="mutant_770" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="blockSize" to="(blockSize &gt;= 0 ? blockSize : blockSize * -1)" />
    <mutant id="mutant_771" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="bytesRead" to="bytesRead &gt;= 0 ? bytesRead * -1 : bytesRead" />
    <mutant id="mutant_772" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="bytesToRead" to="(bytesToRead &gt;= 0 ? bytesToRead * -1 : bytesToRead)" />
    <mutant id="mutant_773" viable="false" in="org.apache.commons.io.input.NullReader.read(char[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1148" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_1149" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_305" viable="false" in="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" from="(bom.length())" to="(bom.length() &gt;= 0 ? bom.length() : bom.length() * -1)" />
    <mutant id="mutant_789" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="firstGT" to="firstGT &gt;= 0 ? firstGT * -1 : firstGT" />
    <mutant id="mutant_306" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_307" viable="false" in="?" from="os" to="os &gt;= 0 ? os * -1 : os" />
    <mutant id="mutant_308" viable="true" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_301" viable="false" in="org.apache.commons.io.input.BOMInputStream.readFirstBytes()" from="(fbIndex)" to="(fbIndex &gt;= 0 ? fbIndex : fbIndex * -1)" />
    <mutant id="mutant_785" viable="true" in="org.apache.commons.io.output.ChunkedWriter.write(char[],int,int)" from="chunk" to="(chunk &gt;= 0 ? chunk : chunk * -1)" />
    <mutant id="mutant_302" viable="false" in="org.apache.commons.io.output.ThresholdingOutputStream(int)" from="this.threshold" to="this.threshold &gt;= 0 ? this.threshold : this.threshold * -1" />
    <mutant id="mutant_786" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)" from="value" to="(value &gt;= 0 ? value : value * -1)" />
    <mutant id="mutant_303" viable="true" in="org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)" from="CopyUtils.DEFAULT_BUFFER_SIZE" to="CopyUtils.DEFAULT_BUFFER_SIZE &gt;= 0 ? CopyUtils.DEFAULT_BUFFER_SIZE : CopyUtils.DEFAULT_BUFFER_SIZE * -1" />
    <mutant id="mutant_787" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_304" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,char[])" from="n" to="n &gt;= 0 ? n * -1 : n" />
    <mutant id="mutant_788" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="skipped" to="(skipped &gt;= 0 ? skipped * -1 : skipped)" />
    <mutant id="mutant_309" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="read" to="(read &gt;= 0 ? read * -1 : read)" />
    <mutant id="mutant_1135" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="off" to="off &gt;= 0 ? off * -1 : off" />
    <mutant id="mutant_1136" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="bufferLength" to="bufferLength &gt;= 0 ? bufferLength : bufferLength * -1" />
    <mutant id="mutant_1133" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1134" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="lineLengthBytes" to="lineLengthBytes &gt;= 0 ? lineLengthBytes : lineLengthBytes * -1" />
    <mutant id="mutant_1131" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="this.mark_bbuf" to="this.mark_bbuf &gt;= 0 ? this.mark_bbuf * -1 : this.mark_bbuf" />
    <mutant id="mutant_1132" viable="true" in="org.apache.commons.io.output.ChunkedWriter.write(char[],int,int)" from="srcOffset" to="srcOffset &gt;= 0 ? srcOffset : srcOffset * -1" />
    <mutant id="mutant_1130" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="pos" to="pos &gt;= 0 ? pos : pos * -1" />
    <mutant id="mutant_781" viable="true" in="org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)" from="off" to="(off &gt;= 0 ? off * -1 : off)" />
    <mutant id="mutant_782" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="pos" to="(pos &gt;= 0 ? pos : pos * -1)" />
    <mutant id="mutant_783" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="lastBlockLength" to="lastBlockLength &gt;= 0 ? lastBlockLength * -1 : lastBlockLength" />
    <mutant id="mutant_300" viable="false" in="?" from="30" to="(-1 * 30)" />
    <mutant id="mutant_784" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_1139" viable="false" in="org.apache.commons.io.input.CharSequenceReader.reset()" from="mark" to="mark &gt;= 0 ? mark : mark * -1" />
    <mutant id="mutant_1137" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="position" to="position &gt;= 0 ? position * -1 : position" />
    <mutant id="mutant_780" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="numberOfChars" to="(numberOfChars &gt;= 0 ? numberOfChars * -1 : numberOfChars)" />
    <mutant id="mutant_1138" viable="true" in="org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)" from="(FilenameUtils.NOT_FOUND)" to="(FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND * -1 : FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_316" viable="false" in="org.apache.commons.io.input.CountingInputStream.skip(long)" from="skip" to="skip &gt;= 0 ? skip * -1 : skip" />
    <mutant id="mutant_317" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="c" to="c &gt;= 0 ? c : c * -1" />
    <mutant id="mutant_318" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="IOUtils.SKIP_BUFFER_SIZE" to="(IOUtils.SKIP_BUFFER_SIZE &gt;= 0 ? IOUtils.SKIP_BUFFER_SIZE * -1 : IOUtils.SKIP_BUFFER_SIZE)" />
    <mutant id="mutant_319" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,byte[])" from="count" to="count &gt;= 0 ? count * -1 : count" />
    <mutant id="mutant_312" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="totalRead" to="totalRead &gt;= 0 ? totalRead * -1 : totalRead" />
    <mutant id="mutant_796" viable="true" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="(bytes.length)" to="(bytes.length &gt;= 0 ? bytes.length * -1 : bytes.length)" />
    <mutant id="mutant_313" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.mark(int)" from="this.mark_cbuf" to="this.mark_cbuf &gt;= 0 ? this.mark_cbuf : this.mark_cbuf * -1" />
    <mutant id="mutant_797" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)" from="off" to="(off &gt;= 0 ? off : off * -1)" />
    <mutant id="mutant_314" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_798" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_315" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="length" to="length &gt;= 0 ? length : length * -1" />
    <mutant id="mutant_799" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="inBufferPos" to="(inBufferPos &gt;= 0 ? inBufferPos * -1 : inBufferPos)" />
    <mutant id="mutant_1124" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="remain" to="remain &gt;= 0 ? remain : remain * -1" />
    <mutant id="mutant_1125" viable="false" in="org.apache.commons.io.input.NullReader.mark(int)" from="mark" to="mark &gt;= 0 ? mark : mark * -1" />
    <mutant id="mutant_1122" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetByteCount()" from="this.count" to="this.count &gt;= 0 ? this.count : this.count * -1" />
    <mutant id="mutant_1123" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)" from="(org.apache.commons.io.EndianUtils.read(input))" to="(org.apache.commons.io.EndianUtils.read(input) &gt;= 0 ? org.apache.commons.io.EndianUtils.read(input) : org.apache.commons.io.EndianUtils.read(input) * -1)" />
    <mutant id="mutant_1120" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length" to="length &gt;= 0 ? length * -1 : length" />
    <mutant id="mutant_1121" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)" from="remaining" to="remaining &gt;= 0 ? remaining : remaining * -1" />
    <mutant id="mutant_792" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="fbLength" to="fbLength &gt;= 0 ? fbLength * -1 : fbLength" />
    <mutant id="mutant_793" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="idx" to="idx &gt;= 0 ? idx * -1 : idx" />
    <mutant id="mutant_310" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_794" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="length" to="(length &gt;= 0 ? length * -1 : length)" />
    <mutant id="mutant_311" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_795" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_1128" viable="true" in="org.apache.commons.io.filefilter.RegexFileFilter(java.lang.String,org.apache.commons.io.IOCase)" from="Pattern.CASE_INSENSITIVE" to="Pattern.CASE_INSENSITIVE &gt;= 0 ? Pattern.CASE_INSENSITIVE : Pattern.CASE_INSENSITIVE * -1" />
    <mutant id="mutant_1129" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="skipped" to="(skipped &gt;= 0 ? skipped * -1 : skipped)" />
    <mutant id="mutant_790" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="24" to="(-1 * 24)" />
    <mutant id="mutant_1126" viable="true" in="org.apache.commons.io.output.ChunkedOutputStream.write(byte[],int,int)" from="chunk" to="(chunk &gt;= 0 ? chunk : chunk * -1)" />
    <mutant id="mutant_791" viable="false" in="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)" from="(Integer.MAX_VALUE)" to="(Integer.MAX_VALUE &gt;= 0 ? Integer.MAX_VALUE * -1 : Integer.MAX_VALUE)" />
    <mutant id="mutant_1127" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_9" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="(mark)" to="(mark &gt;= 0 ? mark * -1 : mark)" />
    <mutant id="mutant_206" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="offset" to="offset &gt;= 0 ? offset : offset * -1" />
    <mutant id="mutant_8" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,byte[])" from="count" to="count &gt;= 0 ? count : count * -1" />
    <mutant id="mutant_207" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI).compareTo(BigInteger.ZERO))" to="(size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI).compareTo(BigInteger.ZERO) &gt;= 0 ? size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI).compareTo(BigInteger.ZERO) * -1 : size.divide(org.apache.commons.io.FileUtils.ONE_TB_BI).compareTo(BigInteger.ZERO))" />
    <mutant id="mutant_208" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,int)" from="buffer.length" to="(buffer.length &gt;= 0 ? buffer.length : buffer.length * -1)" />
    <mutant id="mutant_209" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream)" from="1024" to="(-1 * 1024)" />
    <mutant id="mutant_5" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.InputStream,long)" from="n" to="(n &gt;= 0 ? n * -1 : n)" />
    <mutant id="mutant_202" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="ch" to="(ch &gt;= 0 ? ch * -1 : ch)" />
    <mutant id="mutant_686" viable="true" in="org.apache.commons.io.DirectoryWalker$CancelException(java.io.File,int)" from="depth" to="(depth &gt;= 0 ? depth * -1 : depth)" />
    <mutant id="mutant_4" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="n" to="(n &gt;= 0 ? n * -1 : n)" />
    <mutant id="mutant_203" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String,int)" from="bufferSize" to="(bufferSize &gt;= 0 ? bufferSize * -1 : bufferSize)" />
    <mutant id="mutant_687" viable="true" in="org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_7" viable="true" in="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)" from="CopyUtils.DEFAULT_BUFFER_SIZE" to="CopyUtils.DEFAULT_BUFFER_SIZE &gt;= 0 ? CopyUtils.DEFAULT_BUFFER_SIZE : CopyUtils.DEFAULT_BUFFER_SIZE * -1" />
    <mutant id="mutant_204" viable="true" in="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])" from="(bytes.length)" to="(bytes.length &gt;= 0 ? bytes.length * -1 : bytes.length)" />
    <mutant id="mutant_688" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_6" viable="true" in="org.apache.commons.io.output.WriterOutputStream.flushOutput()" from="0" to="(-1 * 0)" />
    <mutant id="mutant_205" viable="true" in="org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)" from="(FilenameUtils.NOT_FOUND)" to="(FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND * -1 : FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_689" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="textIdx" to="(textIdx &gt;= 0 ? textIdx * -1 : textIdx)" />
    <mutant id="mutant_85" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter(long,boolean)" from="size" to="size &gt;= 0 ? size : size * -1" />
    <mutant id="mutant_84" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(count)" to="(count &gt;= 0 ? count * -1 : count)" />
    <mutant id="mutant_87" viable="false" in="?" from="(osName.indexOf(&quot;sunos&quot;))" to="(osName.indexOf(&quot;sunos&quot;) &gt;= 0 ? osName.indexOf(&quot;sunos&quot;) * -1 : osName.indexOf(&quot;sunos&quot;))" />
    <mutant id="mutant_86" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(count)" to="(count &gt;= 0 ? count * -1 : count)" />
    <mutant id="mutant_89" viable="false" in="?" from="1" to="(-1 * 1)" />
    <mutant id="mutant_88" viable="false" in="org.apache.commons.io.input.ReaderInputStream.read(byte[])" from="b.length" to="(b.length &gt;= 0 ? b.length * -1 : b.length)" />
    <mutant id="mutant_90" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip : toSkip * -1)" />
    <mutant id="mutant_92" viable="true" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="result" to="(result &gt;= 0 ? result * -1 : result)" />
    <mutant id="mutant_91" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read()" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1)" />
    <mutant id="mutant_94" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="ch" to="(ch &gt;= 0 ? ch : ch * -1)" />
    <mutant id="mutant_93" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="(position)" to="(position &gt;= 0 ? position : position * -1)" />
    <mutant id="mutant_1" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_682" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_0" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.toString()" from="(delegates.length)" to="(delegates.length &gt;= 0 ? delegates.length * -1 : delegates.length)" />
    <mutant id="mutant_683" viable="true" in="org.apache.commons.io.ByteOrderMark.hashCode()" from="hashCode" to="hashCode &gt;= 0 ? hashCode : hashCode * -1" />
    <mutant id="mutant_3" viable="false" in="org.apache.commons.io.filefilter.OrFileFilter.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_200" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(this.mark_cbuf)" to="(this.mark_cbuf &gt;= 0 ? this.mark_cbuf : this.mark_cbuf * -1)" />
    <mutant id="mutant_684" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="8" to="(-1 * 8)" />
    <mutant id="mutant_2" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(currentBuffer.length)" to="(currentBuffer.length &gt;= 0 ? currentBuffer.length * -1 : currentBuffer.length)" />
    <mutant id="mutant_201" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.initialize()" from="0" to="-1 * 0" />
    <mutant id="mutant_685" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="avail" to="(avail &gt;= 0 ? avail * -1 : avail)" />
    <mutant id="mutant_680" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)" from="FilenameUtils.NOT_FOUND" to="FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND * -1 : FilenameUtils.NOT_FOUND" />
    <mutant id="mutant_681" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.skip(long)" from="0" to="-1 * 0" />
    <mutant id="mutant_217" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="16" to="(-1 * 16)" />
    <mutant id="mutant_218" viable="false" in="?" from="(osName.indexOf(&quot;solaris&quot;))" to="(osName.indexOf(&quot;solaris&quot;) &gt;= 0 ? osName.indexOf(&quot;solaris&quot;) * -1 : osName.indexOf(&quot;solaris&quot;))" />
    <mutant id="mutant_219" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="countRead" to="(countRead &gt;= 0 ? countRead * -1 : countRead)" />
    <mutant id="mutant_213" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="high" to="(high &gt;= 0 ? high : high * -1)" />
    <mutant id="mutant_697" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)" from="16" to="(-1 * 16)" />
    <mutant id="mutant_214" viable="true" in="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)" from="0" to="-1 * 0" />
    <mutant id="mutant_698" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="IOUtils.SKIP_BUFFER_SIZE" to="(IOUtils.SKIP_BUFFER_SIZE &gt;= 0 ? IOUtils.SKIP_BUFFER_SIZE : IOUtils.SKIP_BUFFER_SIZE * -1)" />
    <mutant id="mutant_215" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_699" viable="false" in="org.apache.commons.io.input.BOMInputStream$1.compare(org.apache.commons.io.ByteOrderMark,org.apache.commons.io.ByteOrderMark)" from="IOUtils.EOF" to="IOUtils.EOF &gt;= 0 ? IOUtils.EOF * -1 : IOUtils.EOF" />
    <mutant id="mutant_216" viable="true" in="org.apache.commons.io.ThreadMonitor.start(java.lang.Thread,long)" from="timeout" to="(timeout &gt;= 0 ? timeout : timeout * -1)" />
    <mutant id="mutant_74" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator(java.lang.Iterable)" from="list.size()" to="list.size() &gt;= 0 ? list.size() : list.size() * -1" />
    <mutant id="mutant_73" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_76" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="textIdx" to="(textIdx &gt;= 0 ? textIdx * -1 : textIdx)" />
    <mutant id="mutant_75" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1)" />
    <mutant id="mutant_78" viable="false" in="?" from="0" to="(-1 * 0)" />
    <mutant id="mutant_77" viable="false" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_79" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="(currentBuffer.length)" to="(currentBuffer.length &gt;= 0 ? currentBuffer.length : currentBuffer.length * -1)" />
    <mutant id="mutant_81" viable="false" in="org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass(java.lang.String[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_80" viable="true" in="org.apache.commons.io.filefilter.AndFileFilter.toString()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_83" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="16" to="(-1 * 16)" />
    <mutant id="mutant_82" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="bytesToRead" to="bytesToRead &gt;= 0 ? bytesToRead * -1 : bytesToRead" />
    <mutant id="mutant_693" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_210" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix" to="(posUnix &gt;= 0 ? posUnix * -1 : posUnix)" />
    <mutant id="mutant_694" viable="false" in="?" from="(osName.indexOf(&quot;unix&quot;))" to="(osName.indexOf(&quot;unix&quot;) &gt;= 0 ? osName.indexOf(&quot;unix&quot;) : osName.indexOf(&quot;unix&quot;) * -1)" />
    <mutant id="mutant_211" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.available()" from="(this.cbuf.remaining())" to="(this.cbuf.remaining() &gt;= 0 ? this.cbuf.remaining() * -1 : this.cbuf.remaining())" />
    <mutant id="mutant_695" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_212" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_696" viable="false" in="org.apache.commons.io.input.CountingInputStream.skip(long)" from="skip" to="skip &gt;= 0 ? skip : skip * -1" />
    <mutant id="mutant_690" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.eofGame()" from="1" to="(-1 * 1)" />
    <mutant id="mutant_691" viable="false" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="length" to="length &gt;= 0 ? length : length * -1" />
    <mutant id="mutant_692" viable="true" in="org.apache.commons.io.ByteOrderMark(java.lang.String,int[])" from="bytes.length" to="bytes.length &gt;= 0 ? bytes.length * -1 : bytes.length" />
    <mutant id="mutant_228" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="3" to="(-1 * 3)" />
    <mutant id="mutant_229" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_224" viable="false" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_225" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_226" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="totalRead" to="(totalRead &gt;= 0 ? totalRead * -1 : totalRead)" />
    <mutant id="mutant_227" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="(pos)" to="(pos &gt;= 0 ? pos : pos * -1)" />
    <mutant id="mutant_220" viable="true" in="org.apache.commons.io.IOCase.checkEndsWith(java.lang.String,java.lang.String)" from="endLen" to="(endLen &gt;= 0 ? endLen : endLen * -1)" />
    <mutant id="mutant_221" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="prefix" to="(prefix &gt;= 0 ? prefix * -1 : prefix)" />
    <mutant id="mutant_222" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="dest" to="dest &gt;= 0 ? dest * -1 : dest" />
    <mutant id="mutant_223" viable="true" in="org.apache.commons.io.output.CountingOutputStream.getByteCount()" from="this.count" to="this.count &gt;= 0 ? this.count * -1 : this.count" />
    <mutant id="mutant_239" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="leftOverOfLastFilePart.length" to="leftOverOfLastFilePart.length &gt;= 0 ? leftOverOfLastFilePart.length * -1 : leftOverOfLastFilePart.length" />
    <mutant id="mutant_235" viable="true" in="org.apache.commons.io.monitor.FileEntry.getLength()" from="length" to="length &gt;= 0 ? length : length * -1" />
    <mutant id="mutant_236" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" from="FilenameUtils.NOT_FOUND" to="FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND : FilenameUtils.NOT_FOUND * -1" />
    <mutant id="mutant_237" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_238" viable="true" in="org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_96" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="size" to="size &gt;= 0 ? size : size * -1" />
    <mutant id="mutant_95" viable="false" in="org.apache.commons.io.EndianUtils.swapInteger(int)" from="24" to="(-1 * 24)" />
    <mutant id="mutant_98" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="last" to="(last &gt;= 0 ? last * -1 : last)" />
    <mutant id="mutant_97" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="IOUtils.EOF" to="IOUtils.EOF &gt;= 0 ? IOUtils.EOF * -1 : IOUtils.EOF" />
    <mutant id="mutant_99" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="chunk" to="chunk &gt;= 0 ? chunk * -1 : chunk" />
    <mutant id="mutant_231" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="1" to="(-1 * 1)" />
    <mutant id="mutant_232" viable="false" in="org.apache.commons.io.output.AppendableOutputStream.write(int)" from="((char)(b))" to="(((char)(b)) &gt;= 0 ? ((char)(b)) : ((char)(b)) * -1)" />
    <mutant id="mutant_233" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_234" viable="false" in="org.apache.commons.io.FileUtils.sizeOfDirectory0(java.io.File)" from="size" to="size &gt;= 0 ? size : size * -1" />
    <mutant id="mutant_230" viable="false" in="org.apache.commons.io.input.TeeInputStream.read()" from="ch" to="ch &gt;= 0 ? ch : ch * -1" />
    <mutant id="mutant_246" viable="false" in="org.apache.commons.io.input.NullReader.close()" from="position" to="position &gt;= 0 ? position * -1 : position" />
    <mutant id="mutant_247" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(FilenameUtils.NOT_FOUND)" to="(FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND * -1 : FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_248" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="bytesRead" to="(bytesRead &gt;= 0 ? bytesRead : bytesRead * -1)" />
    <mutant id="mutant_249" viable="true" in="org.apache.commons.io.ByteOrderMark.toString()" from="(bytes.length)" to="(bytes.length &gt;= 0 ? bytes.length * -1 : bytes.length)" />
    <mutant id="mutant_242" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)" from="value" to="(value &gt;= 0 ? value * -1 : value)" />
    <mutant id="mutant_243" viable="false" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_244" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String,long)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_245" viable="true" in="org.apache.commons.io.output.FileWriterWithEncoding.write(char[],int,int)" from="st" to="(st &gt;= 0 ? st : st * -1)" />
    <mutant id="mutant_240" viable="false" in="org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_241" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_257" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="(size)" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_258" viable="false" in="org.apache.commons.io.input.BOMInputStream$1.compare(org.apache.commons.io.ByteOrderMark,org.apache.commons.io.ByteOrderMark)" from="1" to="-1 * 1" />
    <mutant id="mutant_259" viable="false" in="org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File,int,int)" from="connectionTimeout" to="(connectionTimeout &gt;= 0 ? connectionTimeout * -1 : connectionTimeout)" />
    <mutant id="mutant_253" viable="true" in="org.apache.commons.io.filefilter.OrFileFilter.toString()" from="(fileFilters.size())" to="(fileFilters.size() &gt;= 0 ? fileFilters.size() : fileFilters.size() * -1)" />
    <mutant id="mutant_254" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="(freeSpaceWindows(path, timeout))" to="(freeSpaceWindows(path, timeout) &gt;= 0 ? freeSpaceWindows(path, timeout) * -1 : freeSpaceWindows(path, timeout))" />
    <mutant id="mutant_255" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="pos" to="pos &gt;= 0 ? pos * -1 : pos" />
    <mutant id="mutant_256" viable="false" in="?" from="(osName.indexOf(&quot;mac os x&quot;))" to="(osName.indexOf(&quot;mac os x&quot;) &gt;= 0 ? osName.indexOf(&quot;mac os x&quot;) : osName.indexOf(&quot;mac os x&quot;) * -1)" />
    <mutant id="mutant_250" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_251" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()" from="c" to="c &gt;= 0 ? c * -1 : c" />
    <mutant id="mutant_252" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="(FilenameUtils.NOT_FOUND)" to="(FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND * -1 : FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_268" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_269" viable="true" in="org.apache.commons.io.output.DemuxOutputStream.write(int)" from="ch" to="(ch &gt;= 0 ? ch : ch * -1)" />
    <mutant id="mutant_264" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="location" to="(location &gt;= 0 ? location * -1 : location)" />
    <mutant id="mutant_265" viable="false" in="?" from="FileUtils.ONE_KB" to="(FileUtils.ONE_KB &gt;= 0 ? FileUtils.ONE_KB * -1 : FileUtils.ONE_KB)" />
    <mutant id="mutant_266" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.InputStream,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip : toSkip * -1)" />
    <mutant id="mutant_267" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="position" to="position &gt;= 0 ? position * -1 : position" />
    <mutant id="mutant_260" viable="true" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="end" to="(end &gt;= 0 ? end * -1 : end)" />
    <mutant id="mutant_261" viable="false" in="org.apache.commons.io.input.CharSequenceReader.skip(long)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_262" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_263" viable="false" in="?" from="0" to="-1 * 0" />
    <mutant id="mutant_279" viable="true" in="org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder)" from="WriterOutputStream.DEFAULT_BUFFER_SIZE" to="(WriterOutputStream.DEFAULT_BUFFER_SIZE &gt;= 0 ? WriterOutputStream.DEFAULT_BUFFER_SIZE * -1 : WriterOutputStream.DEFAULT_BUFFER_SIZE)" />
    <mutant id="mutant_270" viable="true" in="org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)" from="st" to="(st &gt;= 0 ? st * -1 : st)" />
    <mutant id="mutant_275" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="textIdx" to="(textIdx &gt;= 0 ? textIdx : textIdx * -1)" />
    <mutant id="mutant_276" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="bufferLength" to="(bufferLength &gt;= 0 ? bufferLength : bufferLength * -1)" />
    <mutant id="mutant_277" viable="false" in="org.apache.commons.io.FileUtils.toURLs(java.io.File[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_278" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,byte[])" from="n" to="n &gt;= 0 ? n * -1 : n" />
    <mutant id="mutant_271" viable="false" in="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)" from="(Integer.MAX_VALUE)" to="(Integer.MAX_VALUE &gt;= 0 ? Integer.MAX_VALUE : Integer.MAX_VALUE * -1)" />
    <mutant id="mutant_272" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="(pos)" to="(pos &gt;= 0 ? pos : pos * -1)" />
    <mutant id="mutant_273" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_274" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="FileUtils.sizeOfDirectory(file1)" to="FileUtils.sizeOfDirectory(file1) &gt;= 0 ? FileUtils.sizeOfDirectory(file1) : FileUtils.sizeOfDirectory(file1) * -1" />
    <mutant id="mutant_280" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="0" to="-1 * 0" />
    <mutant id="mutant_281" viable="true" in="org.apache.commons.io.filefilter.AgeFileFilter.accept(java.io.File)" from="cutoff" to="(cutoff &gt;= 0 ? cutoff : cutoff * -1)" />
    <mutant id="mutant_286" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="b" to="b &gt;= 0 ? b : b * -1" />
    <mutant id="mutant_287" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="pos" to="(pos &gt;= 0 ? pos : pos * -1)" />
    <mutant id="mutant_288" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO))" to="(size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO) &gt;= 0 ? size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO) * -1 : size.divide(org.apache.commons.io.FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO))" />
    <mutant id="mutant_289" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_282" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)" from="minSizeInclusive" to="(minSizeInclusive &gt;= 0 ? minSizeInclusive : minSizeInclusive * -1)" />
    <mutant id="mutant_283" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.Reader,char[],int,int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_284" viable="true" in="org.apache.commons.io.filefilter.NameFileFilter.toString()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_285" viable="true" in="org.apache.commons.io.output.ChunkedOutputStream(java.io.OutputStream,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_290" viable="true" in="org.apache.commons.io.output.ChunkedWriter.write(char[],int,int)" from="dstOffset" to="(dstOffset &gt;= 0 ? dstOffset : dstOffset * -1)" />
    <mutant id="mutant_291" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_292" viable="false" in="org.apache.commons.io.input.ProxyReader.skip(long)" from="ln" to="(ln &gt;= 0 ? ln * -1 : ln)" />
    <mutant id="mutant_297" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="position" to="position &gt;= 0 ? position : position * -1" />
    <mutant id="mutant_298" viable="false" in="org.apache.commons.io.input.Tailer(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean)" from="Tailer.DEFAULT_BUFSIZE" to="(Tailer.DEFAULT_BUFSIZE &gt;= 0 ? Tailer.DEFAULT_BUFSIZE : Tailer.DEFAULT_BUFSIZE * -1)" />
    <mutant id="mutant_299" viable="true" in="org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String,java.lang.String)" from="bytes" to="bytes &gt;= 0 ? bytes : bytes * -1" />
    <mutant id="mutant_293" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_294" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.eofGame(boolean)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_295" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)" from="8" to="(-1 * 8)" />
    <mutant id="mutant_296" viable="true" in="org.apache.commons.io.output.ProxyOutputStream.write(byte[])" from="bts.length" to="bts.length &gt;= 0 ? bts.length * -1 : bts.length" />
    <mutant id="mutant_27" viable="false" in="org.apache.commons.io.filefilter.PrefixFileFilter.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_26" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="low" to="(low &gt;= 0 ? low : low * -1)" />
    <mutant id="mutant_29" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_28" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,char[])" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF * -1 : IOUtils.EOF)" />
    <mutant id="mutant_21" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="(line.length())" to="(line.length() &gt;= 0 ? line.length() : line.length() * -1)" />
    <mutant id="mutant_20" viable="true" in="org.apache.commons.io.IOCase.checkIndexOf(java.lang.String,int,java.lang.String)" from="(str.length())" to="(str.length() &gt;= 0 ? str.length() * -1 : str.length())" />
    <mutant id="mutant_23" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,byte[],int,int)" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_22" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_25" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(charSequence.length())" to="(charSequence.length() &gt;= 0 ? charSequence.length() * -1 : charSequence.length())" />
    <mutant id="mutant_24" viable="true" in="org.apache.commons.io.output.ProxyWriter.write(java.lang.String)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_16" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="position" to="position &gt;= 0 ? position * -1 : position" />
    <mutant id="mutant_15" viable="false" in="?" from="111" to="(-1 * 111)" />
    <mutant id="mutant_18" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="value" to="(value &gt;= 0 ? value : value * -1)" />
    <mutant id="mutant_17" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)" from="value" to="(value &gt;= 0 ? value * -1 : value)" />
    <mutant id="mutant_19" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posWin" to="(posWin &gt;= 0 ? posWin * -1 : posWin)" />
    <mutant id="mutant_10" viable="true" in="org.apache.commons.io.filefilter.SizeFileFilter(long,boolean)" from="size" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_12" viable="false" in="org.apache.commons.io.input.NullReader.reset()" from="position" to="position &gt;= 0 ? position * -1 : position" />
    <mutant id="mutant_11" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_14" viable="false" in="org.apache.commons.io.input.Tailer.getDelay()" from="delayMillis" to="delayMillis &gt;= 0 ? delayMillis : delayMillis * -1" />
    <mutant id="mutant_13" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="0" to="-1 * 0" />
    <mutant id="mutant_49" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_48" viable="true" in="org.apache.commons.io.output.ProxyWriter.write(char[],int,int)" from="st" to="(st &gt;= 0 ? st * -1 : st)" />
    <mutant id="mutant_41" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_40" viable="true" in="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)" from="n" to="n &gt;= 0 ? n : n * -1" />
    <mutant id="mutant_43" viable="false" in="?" from="(osName.indexOf(&quot;aix&quot;))" to="(osName.indexOf(&quot;aix&quot;) &gt;= 0 ? osName.indexOf(&quot;aix&quot;) : osName.indexOf(&quot;aix&quot;) * -1)" />
    <mutant id="mutant_42" viable="false" in="?" from="1L" to="-1 * 1L" />
    <mutant id="mutant_45" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip : toSkip * -1)" />
    <mutant id="mutant_44" viable="false" in="org.apache.commons.io.input.BOMInputStream.getBOM()" from="(fbLength)" to="(fbLength &gt;= 0 ? fbLength : fbLength * -1)" />
    <mutant id="mutant_47" viable="false" in="?" from="176844364689077340L" to="-1 * 176844364689077340L" />
    <mutant id="mutant_46" viable="false" in="org.apache.commons.io.input.BOMInputStream.skip(long)" from="n" to="(n &gt;= 0 ? n : n * -1)" />
    <mutant id="mutant_50" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="chunk" to="chunk &gt;= 0 ? chunk : chunk * -1" />
    <mutant id="mutant_38" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)" from="(magicNumbers.length)" to="(magicNumbers.length &gt;= 0 ? magicNumbers.length : magicNumbers.length * -1)" />
    <mutant id="mutant_37" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)" from="FileSystemUtils.OS" to="(FileSystemUtils.OS &gt;= 0 ? FileSystemUtils.OS : FileSystemUtils.OS * -1)" />
    <mutant id="mutant_39" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size2" to="size2 &gt;= 0 ? size2 : size2 * -1" />
    <mutant id="mutant_30" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip : toSkip * -1)" />
    <mutant id="mutant_32" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)" from="extensionPos" to="extensionPos &gt;= 0 ? extensionPos * -1 : extensionPos" />
    <mutant id="mutant_31" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)" from="buf.length" to="(buf.length &gt;= 0 ? buf.length : buf.length * -1)" />
    <mutant id="mutant_34" viable="false" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="chars_read" to="chars_read &gt;= 0 ? chars_read : chars_read * -1" />
    <mutant id="mutant_33" viable="false" in="org.apache.commons.io.EndianUtils.swapFloat(float)" from="value" to="(value &gt;= 0 ? value * -1 : value)" />
    <mutant id="mutant_36" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_35" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(encoding.length())" to="(encoding.length() &gt;= 0 ? encoding.length() : encoding.length() * -1)" />
    <mutant id="mutant_63" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_62" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_65" viable="true" in="org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)" from="(org.apache.commons.io.FilenameUtils.indexOfExtension(filename))" to="(org.apache.commons.io.FilenameUtils.indexOfExtension(filename) &gt;= 0 ? org.apache.commons.io.FilenameUtils.indexOfExtension(filename) : org.apache.commons.io.FilenameUtils.indexOfExtension(filename) * -1)" />
    <mutant id="mutant_64" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip : toSkip * -1)" />
    <mutant id="mutant_67" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)" from="c" to="c &gt;= 0 ? c : c * -1" />
    <mutant id="mutant_66" viable="false" in="org.apache.commons.io.input.CountingInputStream.resetCount()" from="result" to="(result &gt;= 0 ? result * -1 : result)" />
    <mutant id="mutant_69" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.read()" from="target" to="target &gt;= 0 ? target : target * -1" />
    <mutant id="mutant_68" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceKb()" from="1" to="(-1 * 1)" />
    <mutant id="mutant_70" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_72" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="(max)" to="(max &gt;= 0 ? max * -1 : max)" />
    <mutant id="mutant_71" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_59" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetByteCount()" from="this.count" to="this.count &gt;= 0 ? this.count * -1 : this.count" />
    <mutant id="mutant_52" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="count" to="count &gt;= 0 ? count * -1 : count" />
    <mutant id="mutant_51" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="low" to="(low &gt;= 0 ? low * -1 : low)" />
    <mutant id="mutant_54" viable="false" in="?" from="FileSystemUtils.INIT_PROBLEM" to="FileSystemUtils.INIT_PROBLEM &gt;= 0 ? FileSystemUtils.INIT_PROBLEM : FileSystemUtils.INIT_PROBLEM * -1" />
    <mutant id="mutant_53" viable="false" in="org.apache.commons.io.input.DemuxInputStream.read()" from="IOUtils.EOF" to="IOUtils.EOF &gt;= 0 ? IOUtils.EOF * -1 : IOUtils.EOF" />
    <mutant id="mutant_56" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="index" to="index &gt;= 0 ? index * -1 : index" />
    <mutant id="mutant_55" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="position" to="position &gt;= 0 ? position : position * -1" />
    <mutant id="mutant_58" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_57" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence,int,int)" from="start" to="(start &gt;= 0 ? start : start * -1)" />
    <mutant id="mutant_61" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="0" to="(-1 * 0)" />
    <mutant id="mutant_60" viable="true" in="org.apache.commons.io.output.FileWriterWithEncoding.write(char[],int,int)" from="end" to="(end &gt;= 0 ? end * -1 : end)" />
    <mutant id="mutant_1432" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix * -1 : prefix)" />
    <mutant id="mutant_1433" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="length" to="(length &gt;= 0 ? length * -1 : length)" />
    <mutant id="mutant_1430" viable="false" in="org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])" from="0" to="-1 * 0" />
    <mutant id="mutant_1431" viable="true" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="result" to="(result &gt;= 0 ? result : result * -1)" />
    <mutant id="mutant_1438" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1439" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="skipped" to="(skipped &gt;= 0 ? skipped * -1 : skipped)" />
    <mutant id="mutant_1436" viable="true" in="org.apache.commons.io.HexDump.dump(java.lang.StringBuilder,long)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_1437" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="0" to="-1 * 0" />
    <mutant id="mutant_1434" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)" from="value" to="(value &gt;= 0 ? value : value * -1)" />
    <mutant id="mutant_1435" viable="false" in="org.apache.commons.io.input.BOMInputStream.reset()" from="fbIndex" to="fbIndex &gt;= 0 ? fbIndex * -1 : fbIndex" />
    <mutant id="mutant_1421" viable="true" in="org.apache.commons.io.monitor.FileAlterationMonitor.getInterval()" from="interval" to="interval &gt;= 0 ? interval : interval * -1" />
    <mutant id="mutant_1422" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_1420" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="0" to="-1 * 0" />
    <mutant id="mutant_1429" viable="false" in="org.apache.commons.io.EndianUtils.swapLong(long)" from="value" to="(value &gt;= 0 ? value * -1 : value)" />
    <mutant id="mutant_1427" viable="false" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="size1" to="size1 &gt;= 0 ? size1 * -1 : size1" />
    <mutant id="mutant_1428" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="(totalByteLength)" to="(totalByteLength &gt;= 0 ? totalByteLength * -1 : totalByteLength)" />
    <mutant id="mutant_1425" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_1426" viable="false" in="org.apache.commons.io.IOUtils.readFully(java.io.InputStream,int)" from="length" to="length &gt;= 0 ? length : length * -1" />
    <mutant id="mutant_1423" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,char[])" from="count" to="count &gt;= 0 ? count * -1 : count" />
    <mutant id="mutant_1424" viable="true" in="org.apache.commons.io.output.StringBuilderWriter(int)" from="capacity" to="(capacity &gt;= 0 ? capacity : capacity * -1)" />
    <mutant id="mutant_1410" viable="false" in="org.apache.commons.io.input.BOMInputStream.matches(org.apache.commons.io.ByteOrderMark)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1411" viable="false" in="org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)" from="(Integer.MAX_VALUE)" to="(Integer.MAX_VALUE &gt;= 0 ? Integer.MAX_VALUE : Integer.MAX_VALUE * -1)" />
    <mutant id="mutant_1418" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="(size)" to="(size &gt;= 0 ? size : size * -1)" />
    <mutant id="mutant_1419" viable="true" in="org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)" from="length" to="length &gt;= 0 ? length * -1 : length" />
    <mutant id="mutant_1416" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="length" to="(length &gt;= 0 ? length : length * -1)" />
    <mutant id="mutant_1417" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1414" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()" from="target" to="(target &gt;= 0 ? target * -1 : target)" />
    <mutant id="mutant_1415" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.skip(long)" from="skipped" to="(skipped &gt;= 0 ? skipped : skipped * -1)" />
    <mutant id="mutant_1412" viable="false" in="org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)" from="remaining" to="(remaining &gt;= 0 ? remaining * -1 : remaining)" />
    <mutant id="mutant_1413" viable="true" in="org.apache.commons.io.comparator.LastModifiedFileComparator.compare(java.io.File,java.io.File)" from="(file2.lastModified())" to="(file2.lastModified() &gt;= 0 ? file2.lastModified() : file2.lastModified() * -1)" />
    <mutant id="mutant_1409" viable="false" in="org.apache.commons.io.input.NullInputStream.close()" from="mark" to="mark &gt;= 0 ? mark : mark * -1" />
    <mutant id="mutant_1400" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="k" to="(k &gt;= 0 ? k * -1 : k)" />
    <mutant id="mutant_1407" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(byte[],java.io.OutputStream)" from="chunk" to="chunk &gt;= 0 ? chunk * -1 : chunk" />
    <mutant id="mutant_1408" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1405" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="separatorAdd" to="(separatorAdd &gt;= 0 ? separatorAdd * -1 : separatorAdd)" />
    <mutant id="mutant_1406" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_1403" viable="false" in="org.apache.commons.io.input.BoundedInputStream.skip(long)" from="(max)" to="(max &gt;= 0 ? max * -1 : max)" />
    <mutant id="mutant_1404" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="max" to="(max &gt;= 0 ? max : max * -1)" />
    <mutant id="mutant_1401" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)" from="value" to="(value &gt;= 0 ? value * -1 : value)" />
    <mutant id="mutant_1402" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_602" viable="true" in="org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)" from="FilenameUtils.NOT_FOUND" to="FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND : FilenameUtils.NOT_FOUND * -1" />
    <mutant id="mutant_603" viable="true" in="org.apache.commons.io.output.WriterOutputStream(java.io.Writer)" from="WriterOutputStream.DEFAULT_BUFFER_SIZE" to="(WriterOutputStream.DEFAULT_BUFFER_SIZE &gt;= 0 ? WriterOutputStream.DEFAULT_BUFFER_SIZE : WriterOutputStream.DEFAULT_BUFFER_SIZE * -1)" />
    <mutant id="mutant_604" viable="false" in="?" from="167" to="(-1 * 167)" />
    <mutant id="mutant_605" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="(array.length)" to="(array.length &gt;= 0 ? array.length : array.length * -1)" />
    <mutant id="mutant_600" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator(java.util.Comparator[])" from="delegates.length" to="delegates.length &gt;= 0 ? delegates.length : delegates.length * -1" />
    <mutant id="mutant_601" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1480" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_606" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(currentBuffer.length)" to="(currentBuffer.length &gt;= 0 ? currentBuffer.length * -1 : currentBuffer.length)" />
    <mutant id="mutant_607" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="(count)" to="(count &gt;= 0 ? count : count * -1)" />
    <mutant id="mutant_608" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence,java.lang.String)" from="CharSequenceInputStream.BUFFER_SIZE" to="(CharSequenceInputStream.BUFFER_SIZE &gt;= 0 ? CharSequenceInputStream.BUFFER_SIZE : CharSequenceInputStream.BUFFER_SIZE * -1)" />
    <mutant id="mutant_609" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix" to="(posUnix &gt;= 0 ? posUnix : posUnix * -1)" />
    <mutant id="mutant_1476" viable="false" in="org.apache.commons.io.input.CharSequenceReader.mark(int)" from="idx" to="idx &gt;= 0 ? idx * -1 : idx" />
    <mutant id="mutant_1477" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="firstCount" to="(firstCount &gt;= 0 ? firstCount : firstCount * -1)" />
    <mutant id="mutant_1474" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(char[],java.io.Writer)" from="bytes" to="(bytes &gt;= 0 ? bytes : bytes * -1)" />
    <mutant id="mutant_1475" viable="true" in="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1472" viable="false" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1473" viable="true" in="org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1470" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.compare(java.io.File,java.io.File)" from="result" to="result &gt;= 0 ? result : result * -1" />
    <mutant id="mutant_1471" viable="true" in="org.apache.commons.io.IOCase.checkCompareTo(java.lang.String,java.lang.String)" from="str1.compareTo(str2)" to="str1.compareTo(str2) &gt;= 0 ? str1.compareTo(str2) * -1 : str1.compareTo(str2)" />
    <mutant id="mutant_1478" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_1479" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_613" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_614" viable="true" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="0" to="-1 * 0" />
    <mutant id="mutant_615" viable="true" in="org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)" from="xmlPrologEnd" to="(xmlPrologEnd &gt;= 0 ? xmlPrologEnd : xmlPrologEnd * -1)" />
    <mutant id="mutant_616" viable="false" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="firstGT" to="firstGT &gt;= 0 ? firstGT : firstGT * -1" />
    <mutant id="mutant_610" viable="false" in="org.apache.commons.io.IOUtils.skipFully(java.io.Reader,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip : toSkip * -1)" />
    <mutant id="mutant_611" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="readed" to="readed &gt;= 0 ? readed : readed * -1" />
    <mutant id="mutant_612" viable="false" in="org.apache.commons.io.input.Tailer.run()" from="length" to="(length &gt;= 0 ? length * -1 : length)" />
    <mutant id="mutant_617" viable="false" in="org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)" from="secondCount" to="(secondCount &gt;= 0 ? secondCount : secondCount * -1)" />
    <mutant id="mutant_618" viable="false" in="org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)" from="end" to="(end &gt;= 0 ? end : end * -1)" />
    <mutant id="mutant_619" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read()" from="(idx)" to="(idx &gt;= 0 ? idx : idx * -1)" />
    <mutant id="mutant_1465" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_1466" viable="true" in="org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_1463" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1464" viable="true" in="org.apache.commons.io.comparator.DirectoryFileComparator.compare(java.io.File,java.io.File)" from="(getType(file1))" to="(getType(file1) &gt;= 0 ? getType(file1) : getType(file1) * -1)" />
    <mutant id="mutant_1461" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1462" viable="false" in="org.apache.commons.io.FileCleaningTracker$Reaper.run()" from="(trackers.size())" to="(trackers.size() &gt;= 0 ? trackers.size() : trackers.size() * -1)" />
    <mutant id="mutant_1460" viable="false" in="org.apache.commons.io.filefilter.SuffixFileFilter.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1469" viable="false" in="org.apache.commons.io.input.NullInputStream.read(byte[],int,int)" from="(position)" to="(position &gt;= 0 ? position * -1 : position)" />
    <mutant id="mutant_1467" viable="false" in="org.apache.commons.io.input.CharSequenceReader.mark(int)" from="mark" to="mark &gt;= 0 ? mark : mark * -1" />
    <mutant id="mutant_1468" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI).compareTo(BigInteger.ZERO))" to="(size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI).compareTo(BigInteger.ZERO) &gt;= 0 ? size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI).compareTo(BigInteger.ZERO) : size.divide(org.apache.commons.io.FileUtils.ONE_PB_BI).compareTo(BigInteger.ZERO) * -1)" />
    <mutant id="mutant_624" viable="true" in="org.apache.commons.io.output.CountingOutputStream.resetCount()" from="((int)(result))" to="((int)(result)) &gt;= 0 ? ((int)(result)) : ((int)(result)) * -1" />
    <mutant id="mutant_625" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix" to="posUnix &gt;= 0 ? posUnix : posUnix * -1" />
    <mutant id="mutant_626" viable="false" in="org.apache.commons.io.output.ThresholdingOutputStream(int)" from="this.threshold" to="this.threshold &gt;= 0 ? this.threshold * -1 : this.threshold" />
    <mutant id="mutant_627" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="childDepth" to="(childDepth &gt;= 0 ? childDepth : childDepth * -1)" />
    <mutant id="mutant_620" viable="false" in="org.apache.commons.io.IOUtils.buffer(java.io.OutputStream,int)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_621" viable="false" in="org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)" from="ch" to="(ch &gt;= 0 ? ch * -1 : ch)" />
    <mutant id="mutant_622" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_623" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="chars_read" to="(chars_read &gt;= 0 ? chars_read * -1 : chars_read)" />
    <mutant id="mutant_628" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="(wcs.length)" to="(wcs.length &gt;= 0 ? wcs.length * -1 : wcs.length)" />
    <mutant id="mutant_629" viable="false" in="org.apache.commons.io.IOUtils.writeChunked(byte[],java.io.OutputStream)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_1454" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)" from="24" to="(-1 * 24)" />
    <mutant id="mutant_1455" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="filledBufferSum" to="filledBufferSum &gt;= 0 ? filledBufferSum * -1 : filledBufferSum" />
    <mutant id="mutant_1452" viable="true" in="org.apache.commons.io.output.ClosedOutputStream.write(int)" from="b" to="(b &gt;= 0 ? b : b * -1)" />
    <mutant id="mutant_1453" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="j" to="(j &gt;= 0 ? j * -1 : j)" />
    <mutant id="mutant_1450" viable="false" in="?" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1451" viable="false" in="org.apache.commons.io.input.NullInputStream.skip(long)" from="numberOfBytes" to="(numberOfBytes &gt;= 0 ? numberOfBytes * -1 : numberOfBytes)" />
    <mutant id="mutant_1458" viable="false" in="org.apache.commons.io.input.Tailer.create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)" from="bufSize" to="(bufSize &gt;= 0 ? bufSize : bufSize * -1)" />
    <mutant id="mutant_1459" viable="false" in="?" from="6131563330944994230L" to="-1 * 6131563330944994230L" />
    <mutant id="mutant_1456" viable="true" in="org.apache.commons.io.output.ChunkedWriter(java.io.Writer,int)" from="chunkSize" to="chunkSize &gt;= 0 ? chunkSize * -1 : chunkSize" />
    <mutant id="mutant_1457" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_635" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.read()" from="target" to="(target &gt;= 0 ? target : target * -1)" />
    <mutant id="mutant_636" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(java.lang.String)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_637" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="3" to="(-1 * 3)" />
    <mutant id="mutant_638" viable="false" in="org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)" from="value" to="(value &gt;= 0 ? value * -1 : value)" />
    <mutant id="mutant_631" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="24" to="(-1 * 24)" />
    <mutant id="mutant_632" viable="false" in="org.apache.commons.io.DirectoryWalker(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)" from="this.depthLimit" to="this.depthLimit &gt;= 0 ? this.depthLimit * -1 : this.depthLimit" />
    <mutant id="mutant_633" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)" from="8" to="(-1 * 8)" />
    <mutant id="mutant_634" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="pos" to="(pos &gt;= 0 ? pos : pos * -1)" />
    <mutant id="mutant_639" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posUnix" to="(posUnix &gt;= 0 ? posUnix * -1 : posUnix)" />
    <mutant id="mutant_1443" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="prefix" to="(prefix &gt;= 0 ? prefix * -1 : prefix)" />
    <mutant id="mutant_1444" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_1441" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.compare(java.io.File,java.io.File)" from="0" to="-1 * 0" />
    <mutant id="mutant_1442" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read()" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1440" viable="false" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posWin" to="posWin &gt;= 0 ? posWin * -1 : posWin" />
    <mutant id="mutant_1449" viable="false" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_630" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_1447" viable="true" in="org.apache.commons.io.output.CountingOutputStream.resetByteCount()" from="this.count" to="this.count &gt;= 0 ? this.count : this.count * -1" />
    <mutant id="mutant_1448" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()" from="currentLastBytePos" to="currentLastBytePos &gt;= 0 ? currentLastBytePos * -1 : currentLastBytePos" />
    <mutant id="mutant_1445" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String,boolean,boolean,long)" from="3" to="(-1 * 3)" />
    <mutant id="mutant_1446" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,long,long,char[])" from="totalRead" to="totalRead &gt;= 0 ? totalRead : totalRead * -1" />
    <mutant id="mutant_646" viable="false" in="?" from="FileSystemUtils.OS" to="FileSystemUtils.OS &gt;= 0 ? FileSystemUtils.OS : FileSystemUtils.OS * -1" />
    <mutant id="mutant_647" viable="false" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart(long,int,byte[])" from="this.no" to="this.no &gt;= 0 ? this.no * -1 : this.no" />
    <mutant id="mutant_648" viable="false" in="org.apache.commons.io.FileUtils.sizeOfDirectory0(java.io.File)" from="0L" to="-1 * 0L" />
    <mutant id="mutant_649" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_642" viable="true" in="org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass(java.lang.String[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_643" viable="true" in="org.apache.commons.io.output.CountingOutputStream.resetByteCount()" from="tmp" to="tmp &gt;= 0 ? tmp : tmp * -1" />
    <mutant id="mutant_644" viable="true" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="(files.length)" to="(files.length &gt;= 0 ? files.length * -1 : files.length)" />
    <mutant id="mutant_645" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)" from="count" to="count &gt;= 0 ? count : count * -1" />
    <mutant id="mutant_1040" viable="true" in="org.apache.commons.io.output.ProxyWriter.write(char[])" from="len" to="(len &gt;= 0 ? len * -1 : len)" />
    <mutant id="mutant_1036" viable="false" in="?" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1037" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="numberOfChars" to="(numberOfChars &gt;= 0 ? numberOfChars : numberOfChars * -1)" />
    <mutant id="mutant_1034" viable="false" in="org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)" from="(max)" to="(max &gt;= 0 ? max : max * -1)" />
    <mutant id="mutant_1035" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_1032" viable="false" in="org.apache.commons.io.input.ProxyReader.read(java.nio.CharBuffer)" from="n" to="(n &gt;= 0 ? n : n * -1)" />
    <mutant id="mutant_1033" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.InputStream,byte[],int,int)" from="remaining" to="remaining &gt;= 0 ? remaining * -1 : remaining" />
    <mutant id="mutant_1030" viable="false" in="org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_1031" viable="true" in="org.apache.commons.io.comparator.CompositeFileComparator.toString()" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_640" viable="true" in="org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String,java.lang.String)" from="j" to="(j &gt;= 0 ? j : j * -1)" />
    <mutant id="mutant_641" viable="true" in="org.apache.commons.io.input.WindowsLineEndingInputStream.readWithUpdate()" from="target" to="target &gt;= 0 ? target : target * -1" />
    <mutant id="mutant_1038" viable="false" in="?" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1039" viable="true" in="org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_657" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,char[])" from="(IOUtils.EOF)" to="(IOUtils.EOF &gt;= 0 ? IOUtils.EOF : IOUtils.EOF * -1)" />
    <mutant id="mutant_658" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="pos" to="(pos &gt;= 0 ? pos * -1 : pos)" />
    <mutant id="mutant_659" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_653" viable="true" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="(FilenameUtils.NOT_FOUND)" to="(FilenameUtils.NOT_FOUND &gt;= 0 ? FilenameUtils.NOT_FOUND * -1 : FilenameUtils.NOT_FOUND)" />
    <mutant id="mutant_654" viable="false" in="org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])" from="c" to="(c &gt;= 0 ? c : c * -1)" />
    <mutant id="mutant_655" viable="false" in="org.apache.commons.io.output.CountingOutputStream.resetByteCount()" from="this.count" to="this.count &gt;= 0 ? this.count : this.count * -1" />
    <mutant id="mutant_656" viable="false" in="?" from="8" to="-1 * 8" />
    <mutant id="mutant_1025" viable="false" in="org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)" from="off" to="(off &gt;= 0 ? off * -1 : off)" />
    <mutant id="mutant_1026" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader(java.io.File,int,java.nio.charset.Charset)" from="1.0F" to="(-1 * 1.0F)" />
    <mutant id="mutant_1023" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()" from="c" to="c &gt;= 0 ? c * -1 : c" />
    <mutant id="mutant_1024" viable="false" in="org.apache.commons.io.ThreadMonitor(java.lang.Thread,long)" from="this.timeout" to="this.timeout &gt;= 0 ? this.timeout * -1 : this.timeout" />
    <mutant id="mutant_1021" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_1022" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.reset()" from="(this.cbuf.position())" to="(this.cbuf.position() &gt;= 0 ? this.cbuf.position() : this.cbuf.position() * -1)" />
    <mutant id="mutant_1020" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)" from="filledBufferSum" to="filledBufferSum &gt;= 0 ? filledBufferSum : filledBufferSum * -1" />
    <mutant id="mutant_650" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_651" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_652" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="count" to="(count &gt;= 0 ? count * -1 : count)" />
    <mutant id="mutant_1029" viable="false" in="org.apache.commons.io.input.BoundedReader.reset()" from="charsRead" to="charsRead &gt;= 0 ? charsRead * -1 : charsRead" />
    <mutant id="mutant_1027" viable="true" in="org.apache.commons.io.filefilter.AndFileFilter.toString()" from="0" to="(-1 * 0)" />
    <mutant id="mutant_1028" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_668" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int,boolean,long)" from="(freeSpaceWindows(path, timeout))" to="(freeSpaceWindows(path, timeout) &gt;= 0 ? freeSpaceWindows(path, timeout) : freeSpaceWindows(path, timeout) * -1)" />
    <mutant id="mutant_669" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="offset" to="(offset &gt;= 0 ? offset * -1 : offset)" />
    <mutant id="mutant_664" viable="true" in="org.apache.commons.io.output.ChunkedOutputStream(java.io.OutputStream,int)" from="chunkSize" to="chunkSize &gt;= 0 ? chunkSize * -1 : chunkSize" />
    <mutant id="mutant_665" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="childDepth" to="(childDepth &gt;= 0 ? childDepth : childDepth * -1)" />
    <mutant id="mutant_666" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_667" viable="true" in="org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)" from="index" to="(index &gt;= 0 ? index * -1 : index)" />
    <mutant id="mutant_1014" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="c" to="c &gt;= 0 ? c : c * -1" />
    <mutant id="mutant_1498" viable="false" in="org.apache.commons.io.input.NullInputStream.mark(int)" from="readlimit" to="readlimit &gt;= 0 ? readlimit * -1 : readlimit" />
    <mutant id="mutant_1015" viable="false" in="org.apache.commons.io.output.ThresholdingOutputStream.write(int)" from="(written)" to="(written &gt;= 0 ? written * -1 : written)" />
    <mutant id="mutant_1499" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])" from="read" to="read &gt;= 0 ? read : read * -1" />
    <mutant id="mutant_1012" viable="true" in="org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)" from="endIndex" to="(endIndex &gt;= 0 ? endIndex : endIndex * -1)" />
    <mutant id="mutant_1496" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.toList(org.apache.commons.io.filefilter.IOFileFilter[])" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1013" viable="true" in="org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)" from="2" to="(-1 * 2)" />
    <mutant id="mutant_1497" viable="true" in="org.apache.commons.io.input.BoundedReader.read(char[],int,int)" from="c" to="(c &gt;= 0 ? c : c * -1)" />
    <mutant id="mutant_1010" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="count" to="(count &gt;= 0 ? count : count * -1)" />
    <mutant id="mutant_1494" viable="false" in="org.apache.commons.io.input.ReaderInputStream.fillBuffer()" from="position" to="(position &gt;= 0 ? position * -1 : position)" />
    <mutant id="mutant_1011" viable="true" in="org.apache.commons.io.output.StringBuilderWriter.write(char[],int,int)" from="length" to="(length &gt;= 0 ? length * -1 : length)" />
    <mutant id="mutant_1495" viable="false" in="org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)" from="(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI).compareTo(BigInteger.ZERO))" to="(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI).compareTo(BigInteger.ZERO) &gt;= 0 ? size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI).compareTo(BigInteger.ZERO) * -1 : size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI).compareTo(BigInteger.ZERO))" />
    <mutant id="mutant_1492" viable="false" in="org.apache.commons.io.input.NullInputStream.available()" from="(Integer.MAX_VALUE)" to="(Integer.MAX_VALUE &gt;= 0 ? Integer.MAX_VALUE : Integer.MAX_VALUE * -1)" />
    <mutant id="mutant_1493" viable="true" in="org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[],long)" from="offset" to="offset &gt;= 0 ? offset * -1 : offset" />
    <mutant id="mutant_660" viable="true" in="org.apache.commons.io.output.ProxyOutputStream.write(int)" from="idx" to="(idx &gt;= 0 ? idx * -1 : idx)" />
    <mutant id="mutant_661" viable="true" in="org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)" from="minSizeInclusive" to="(minSizeInclusive &gt;= 0 ? minSizeInclusive * -1 : minSizeInclusive)" />
    <mutant id="mutant_662" viable="true" in="org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()" from="(currentLastBytePos)" to="(currentLastBytePos &gt;= 0 ? currentLastBytePos * -1 : currentLastBytePos)" />
    <mutant id="mutant_663" viable="false" in="org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)" from="posWin" to="posWin &gt;= 0 ? posWin : posWin * -1" />
    <mutant id="mutant_1018" viable="true" in="org.apache.commons.io.DirectoryWalker(java.io.FileFilter,int)" from="depthLimit" to="depthLimit &gt;= 0 ? depthLimit * -1 : depthLimit" />
    <mutant id="mutant_1019" viable="false" in="org.apache.commons.io.input.ProxyInputStream.skip(long)" from="0" to="-1 * 0" />
    <mutant id="mutant_1016" viable="false" in="org.apache.commons.io.IOUtils.read(java.io.Reader,char[],int,int)" from="remaining" to="(remaining &gt;= 0 ? remaining : remaining * -1)" />
    <mutant id="mutant_1017" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="inBufferPos" to="inBufferPos &gt;= 0 ? inBufferPos : inBufferPos * -1" />
    <mutant id="mutant_679" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="(XmlStreamReader.BUFFER_SIZE)" to="(XmlStreamReader.BUFFER_SIZE &gt;= 0 ? XmlStreamReader.BUFFER_SIZE : XmlStreamReader.BUFFER_SIZE * -1)" />
    <mutant id="mutant_675" viable="true" in="org.apache.commons.io.DirectoryWalker.walk(java.io.File,int,java.util.Collection)" from="depth" to="(depth &gt;= 0 ? depth : depth * -1)" />
    <mutant id="mutant_676" viable="false" in="org.apache.commons.io.input.ProxyReader.read(char[])" from="chr.length" to="chr.length &gt;= 0 ? chr.length : chr.length * -1" />
    <mutant id="mutant_677" viable="true" in="org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)" from="textIdx" to="(textIdx &gt;= 0 ? textIdx * -1 : textIdx)" />
    <mutant id="mutant_678" viable="false" in="org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)" from="bytesCopied" to="bytesCopied &gt;= 0 ? bytesCopied * -1 : bytesCopied" />
    <mutant id="mutant_1490" viable="false" in="org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream,int)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_1491" viable="false" in="org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)" from="len" to="(len &gt;= 0 ? len : len * -1)" />
    <mutant id="mutant_1003" viable="false" in="org.apache.commons.io.ByteOrderMark.toString()" from="i" to="(i &gt;= 0 ? i * -1 : i)" />
    <mutant id="mutant_1487" viable="true" in="org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)" from="n" to="(n &gt;= 0 ? n * -1 : n)" />
    <mutant id="mutant_1004" viable="false" in="org.apache.commons.io.input.NullReader.skip(long)" from="(position)" to="(position &gt;= 0 ? position : position * -1)" />
    <mutant id="mutant_1488" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)" from="inBufferPos" to="(inBufferPos &gt;= 0 ? inBufferPos : inBufferPos * -1)" />
    <mutant id="mutant_1001" viable="false" in="org.apache.commons.io.IOUtils.copyLarge(java.io.Reader,java.io.Writer,char[])" from="0" to="-1 * 0" />
    <mutant id="mutant_1485" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)" from="offset" to="(offset &gt;= 0 ? offset : offset * -1)" />
    <mutant id="mutant_1002" viable="false" in="org.apache.commons.io.FileUtils.toFiles(java.net.URL[])" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1486" viable="false" in="org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)" from="255" to="(-1 * 255)" />
    <mutant id="mutant_1483" viable="true" in="org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File,java.io.File)" from="result" to="(result &gt;= 0 ? result * -1 : result)" />
    <mutant id="mutant_1000" viable="true" in="org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String,long)" from="Integer.MAX_VALUE" to="(Integer.MAX_VALUE &gt;= 0 ? Integer.MAX_VALUE : Integer.MAX_VALUE * -1)" />
    <mutant id="mutant_1484" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="size" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_1481" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="toSkip" to="(toSkip &gt;= 0 ? toSkip : toSkip * -1)" />
    <mutant id="mutant_1482" viable="false" in="org.apache.commons.io.IOUtils.skip(java.io.Reader,long)" from="toSkip" to="toSkip &gt;= 0 ? toSkip : toSkip * -1" />
    <mutant id="mutant_671" viable="true" in="org.apache.commons.io.input.UnixLineEndingInputStream.readWithUpdate()" from="target" to="(target &gt;= 0 ? target : target * -1)" />
    <mutant id="mutant_672" viable="false" in="org.apache.commons.io.input.Tailer.readLines(java.io.RandomAccessFile)" from="rePos" to="rePos &gt;= 0 ? rePos * -1 : rePos" />
    <mutant id="mutant_673" viable="true" in="org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,char,boolean)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_1009" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(java.lang.String)" from="1" to="(-1 * 1)" />
    <mutant id="mutant_674" viable="true" in="org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)" from="(bytes.length)" to="(bytes.length &gt;= 0 ? bytes.length * -1 : bytes.length)" />
    <mutant id="mutant_1007" viable="false" in="org.apache.commons.io.output.ByteArrayOutputStream.write(int)" from="(filledBufferSum)" to="(filledBufferSum &gt;= 0 ? filledBufferSum * -1 : filledBufferSum)" />
    <mutant id="mutant_1008" viable="false" in="org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel,long)" from="remain" to="(remain &gt;= 0 ? remain : remain * -1)" />
    <mutant id="mutant_1005" viable="false" in="org.apache.commons.io.input.NullReader.read(char[],int,int)" from="(size)" to="(size &gt;= 0 ? size * -1 : size)" />
    <mutant id="mutant_1489" viable="false" in="org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)" from="i" to="(i &gt;= 0 ? i : i * -1)" />
    <mutant id="mutant_670" viable="true" in="org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream,java.lang.String)" from="c" to="(c &gt;= 0 ? c : c * -1)" />
    <mutant id="mutant_1006" viable="false" in="org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)" from="(Integer.MAX_VALUE)" to="(Integer.MAX_VALUE &gt;= 0 ? Integer.MAX_VALUE * -1 : Integer.MAX_VALUE)" />
  </mutants>
</mutation>
