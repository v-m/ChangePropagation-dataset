<?xml version="1.0" encoding="UTF-8"?>
<mutation operator-id="AOR" parent="../../../smf.run.xml" name="main" config-file="mutations.xml" time="449750">
  <class-to-mutate />
  <mutants>
    <mutant id="mutant_569" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="(&quot;The closure array must not contain a null closure, index &quot; + i)" to="(&quot;The closure array must not contain a null closure, index &quot; % i)" />
    <mutant id="mutant_565" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="(&quot;The closure array must not contain a null closure, index &quot; + i)" to="i" />
    <mutant id="mutant_566" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="(&quot;The closure array must not contain a null closure, index &quot; + i)" to="(&quot;The closure array must not contain a null closure, index &quot; * i)" />
    <mutant id="mutant_567" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="(&quot;The closure array must not contain a null closure, index &quot; + i)" to="&quot;The closure array must not contain a null closure, index &quot;" />
    <mutant id="mutant_568" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="(&quot;The closure array must not contain a null closure, index &quot; + i)" to="(&quot;The closure array must not contain a null closure, index &quot; - i)" />
    <mutant id="mutant_2172" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((offsetInBits + &quot; + &quot;) + lengthInBits)" to="((offsetInBits + &quot; + &quot;) * lengthInBits)" />
    <mutant id="mutant_2173" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((offsetInBits + &quot; + &quot;) + lengthInBits)" to="((offsetInBits + &quot; + &quot;) % lengthInBits)" />
    <mutant id="mutant_2170" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(offsetInBits + &quot; + &quot;)" to="(offsetInBits / &quot; + &quot;)" />
    <mutant id="mutant_2171" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(offsetInBits + &quot; + &quot;)" to="(offsetInBits * &quot; + &quot;)" />
    <mutant id="mutant_2169" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(offsetInBits + &quot; + &quot;)" to="(offsetInBits - &quot; + &quot;)" />
    <mutant id="mutant_2167" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(offsetInBits + &quot; + &quot;)" to="offsetInBits" />
    <mutant id="mutant_2168" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(offsetInBits + &quot; + &quot;)" to="(offsetInBits % &quot; + &quot;)" />
    <mutant id="mutant_2165" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="offsetInBits + lengthInBits" to="offsetInBits % lengthInBits" />
    <mutant id="mutant_2166" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(offsetInBits + &quot; + &quot;)" to="&quot; + &quot;" />
    <mutant id="mutant_2163" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="offsetInBits + lengthInBits" to="offsetInBits - lengthInBits" />
    <mutant id="mutant_2164" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="offsetInBits + lengthInBits" to="lengthInBits" />
    <mutant id="mutant_561" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) - &quot; was null&quot;)" />
    <mutant id="mutant_562" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) / &quot; was null&quot;)" />
    <mutant id="mutant_563" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="&quot; was null&quot;" />
    <mutant id="mutant_564" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="(&quot;The closure array must not contain a null closure, index &quot; + i)" to="(&quot;The closure array must not contain a null closure, index &quot; / i)" />
    <mutant id="mutant_560" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="(&quot;The predicate collection must not contain a null predicate, index &quot; + i)" />
    <mutant id="mutant_576" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="(&quot;The predicate array must not contain a null predicate, index &quot; + i)" to="(&quot;The predicate array must not contain a null predicate, index &quot; / i)" />
    <mutant id="mutant_577" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="(&quot;The predicate array must not contain a null predicate, index &quot; + i)" to="i" />
    <mutant id="mutant_578" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="(&quot;The predicate array must not contain a null predicate, index &quot; + i)" to="(&quot;The predicate array must not contain a null predicate, index &quot; * i)" />
    <mutant id="mutant_579" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="(&quot;The predicate array must not contain a null predicate, index &quot; + i)" to="&quot;The predicate array must not contain a null predicate, index &quot;" />
    <mutant id="mutant_2161" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="offsetInBits + lengthInBits" to="offsetInBits * lengthInBits" />
    <mutant id="mutant_2162" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="offsetInBits + lengthInBits" to="offsetInBits" />
    <mutant id="mutant_2160" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="offsetInBits + lengthInBits" to="offsetInBits / lengthInBits" />
    <mutant id="mutant_2158" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) + bitIndex)" to="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) / bitIndex)" />
    <mutant id="mutant_2159" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) + bitIndex)" to="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) * bitIndex)" />
    <mutant id="mutant_2156" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) + bitIndex)" to="bitIndex" />
    <mutant id="mutant_2157" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) + bitIndex)" to="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) % bitIndex)" />
    <mutant id="mutant_2154" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) + bitIndex)" to="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) - bitIndex)" />
    <mutant id="mutant_2155" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;) + bitIndex)" to="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;)" />
    <mutant id="mutant_2152" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;)" to="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) % &quot;, &quot;)" />
    <mutant id="mutant_2153" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;)" to="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) * &quot;, &quot;)" />
    <mutant id="mutant_572" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="((&quot;The closure array must not contain a null closure, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The closure array must not contain a null closure, index &quot; + i) / &quot; was null&quot;)" />
    <mutant id="mutant_573" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="((&quot;The closure array must not contain a null closure, index &quot; + i) + &quot; was null&quot;)" to="&quot; was null&quot;" />
    <mutant id="mutant_574" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="((&quot;The closure array must not contain a null closure, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The closure array must not contain a null closure, index &quot; + i) - &quot; was null&quot;)" />
    <mutant id="mutant_575" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="((&quot;The closure array must not contain a null closure, index &quot; + i) + &quot; was null&quot;)" to="(&quot;The closure array must not contain a null closure, index &quot; + i)" />
    <mutant id="mutant_570" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="((&quot;The closure array must not contain a null closure, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The closure array must not contain a null closure, index &quot; + i) * &quot; was null&quot;)" />
    <mutant id="mutant_571" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Closure[])" from="((&quot;The closure array must not contain a null closure, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The closure array must not contain a null closure, index &quot; + i) % &quot; was null&quot;)" />
    <mutant id="mutant_107" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.listIterator(int)" from="((size) + 1)" to="((size) / 1)" />
    <mutant id="mutant_108" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="((size) + 1)" to="1" />
    <mutant id="mutant_109" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="((size) + 1)" to="size" />
    <mutant id="mutant_103" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.listIterator(int)" from="((size) + 1)" to="size" />
    <mutant id="mutant_587" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="((&quot;The predicate array must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The predicate array must not contain a null predicate, index &quot; + i) / &quot; was null&quot;)" />
    <mutant id="mutant_104" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.listIterator(int)" from="((size) + 1)" to="((size) % 1)" />
    <mutant id="mutant_588" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="(&quot;The transformer array must not contain a null transformer, index &quot; + i)" to="(&quot;The transformer array must not contain a null transformer, index &quot; / i)" />
    <mutant id="mutant_105" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.listIterator(int)" from="((size) + 1)" to="((size) - 1)" />
    <mutant id="mutant_589" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="(&quot;The transformer array must not contain a null transformer, index &quot; + i)" to="i" />
    <mutant id="mutant_106" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.listIterator(int)" from="((size) + 1)" to="((size) * 1)" />
    <mutant id="mutant_2150" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;)" to="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) / &quot;, &quot;)" />
    <mutant id="mutant_2151" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;)" to="&quot;, &quot;" />
    <mutant id="mutant_2147" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value)" to="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) % value)" />
    <mutant id="mutant_2148" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;)" to="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value)" />
    <mutant id="mutant_1298" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) / &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2145" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value)" to="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) - value)" />
    <mutant id="mutant_1299" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) - &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2146" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value)" to="((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;)" />
    <mutant id="mutant_1296" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) % &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2143" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value)" to="value" />
    <mutant id="mutant_1297" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="&quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;" />
    <mutant id="mutant_2144" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value)" to="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) * value)" />
    <mutant id="mutant_1294" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" />
    <mutant id="mutant_2141" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;)" to="((&quot;Failed to put: &quot; + key) % &quot; -&gt; &quot;)" />
    <mutant id="mutant_1295" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) * &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2142" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value)" to="(((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) / value)" />
    <mutant id="mutant_583" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="((&quot;The predicate array must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="&quot; was null&quot;" />
    <mutant id="mutant_100" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(toIndexExclusive + (offset))" to="(toIndexExclusive - (offset))" />
    <mutant id="mutant_584" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="((&quot;The predicate array must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The predicate array must not contain a null predicate, index &quot; + i) % &quot; was null&quot;)" />
    <mutant id="mutant_101" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(toIndexExclusive + (offset))" to="(toIndexExclusive % (offset))" />
    <mutant id="mutant_585" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="((&quot;The predicate array must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="(&quot;The predicate array must not contain a null predicate, index &quot; + i)" />
    <mutant id="mutant_102" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.listIterator(int)" from="((size) + 1)" to="1" />
    <mutant id="mutant_586" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="((&quot;The predicate array must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The predicate array must not contain a null predicate, index &quot; + i) * &quot; was null&quot;)" />
    <mutant id="mutant_580" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="(&quot;The predicate array must not contain a null predicate, index &quot; + i)" to="(&quot;The predicate array must not contain a null predicate, index &quot; - i)" />
    <mutant id="mutant_581" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="(&quot;The predicate array must not contain a null predicate, index &quot; + i)" to="(&quot;The predicate array must not contain a null predicate, index &quot; % i)" />
    <mutant id="mutant_2149" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) + &quot;, &quot;)" to="((((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;) + value) - &quot;, &quot;)" />
    <mutant id="mutant_582" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Predicate[])" from="((&quot;The predicate array must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The predicate array must not contain a null predicate, index &quot; + i) - &quot; was null&quot;)" />
    <mutant id="mutant_118" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="(index + (offset))" to="(index - (offset))" />
    <mutant id="mutant_119" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="(index + (offset))" to="(index % (offset))" />
    <mutant id="mutant_114" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="(index + (offset))" to="offset" />
    <mutant id="mutant_598" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="((&quot;The transformer array must not contain a null transformer, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The transformer array must not contain a null transformer, index &quot; + i) % &quot; was null&quot;)" />
    <mutant id="mutant_115" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="(index + (offset))" to="(index * (offset))" />
    <mutant id="mutant_599" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="((&quot;The transformer array must not contain a null transformer, index &quot; + i) + &quot; was null&quot;)" to="&quot; was null&quot;" />
    <mutant id="mutant_116" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="(index + (offset))" to="(index / (offset))" />
    <mutant id="mutant_117" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="(index + (offset))" to="index" />
    <mutant id="mutant_1292" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;" />
    <mutant id="mutant_1293" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) % &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2140" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;)" to="((&quot;Failed to put: &quot; + key) / &quot; -&gt; &quot;)" />
    <mutant id="mutant_1290" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) / &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_1291" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) - &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_1289" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) % (maxSize))" />
    <mutant id="mutant_2136" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;)" to="((&quot;Failed to put: &quot; + key) * &quot; -&gt; &quot;)" />
    <mutant id="mutant_2137" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;)" to="(&quot;Failed to put: &quot; + key)" />
    <mutant id="mutant_1287" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(maxSize)" />
    <mutant id="mutant_2134" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(&quot;Failed to put: &quot; + key)" to="&quot;Failed to put: &quot;" />
    <mutant id="mutant_1288" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) / (maxSize))" />
    <mutant id="mutant_2135" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(&quot;Failed to put: &quot; + key)" to="(&quot;Failed to put: &quot; * key)" />
    <mutant id="mutant_1285" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) * (maxSize))" />
    <mutant id="mutant_2132" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(&quot;Failed to put: &quot; + key)" to="(&quot;Failed to put: &quot; / key)" />
    <mutant id="mutant_1286" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" />
    <mutant id="mutant_2133" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(&quot;Failed to put: &quot; + key)" to="key" />
    <mutant id="mutant_1283" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) % &quot; maxSize=&quot;)" />
    <mutant id="mutant_2130" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(&quot;Failed to put: &quot; + key)" to="(&quot;Failed to put: &quot; % key)" />
    <mutant id="mutant_1284" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) - (maxSize))" />
    <mutant id="mutant_2131" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="(&quot;Failed to put: &quot; + key)" to="(&quot;Failed to put: &quot; - key)" />
    <mutant id="mutant_110" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="((size) + 1)" to="((size) % 1)" />
    <mutant id="mutant_594" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="((&quot;The transformer array must not contain a null transformer, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The transformer array must not contain a null transformer, index &quot; + i) - &quot; was null&quot;)" />
    <mutant id="mutant_111" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="((size) + 1)" to="((size) - 1)" />
    <mutant id="mutant_595" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="((&quot;The transformer array must not contain a null transformer, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The transformer array must not contain a null transformer, index &quot; + i) / &quot; was null&quot;)" />
    <mutant id="mutant_112" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="((size) + 1)" to="((size) * 1)" />
    <mutant id="mutant_596" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="((&quot;The transformer array must not contain a null transformer, index &quot; + i) + &quot; was null&quot;)" to="(&quot;The transformer array must not contain a null transformer, index &quot; + i)" />
    <mutant id="mutant_113" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.add(int,E)" from="((size) + 1)" to="((size) / 1)" />
    <mutant id="mutant_597" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="((&quot;The transformer array must not contain a null transformer, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The transformer array must not contain a null transformer, index &quot; + i) * &quot; was null&quot;)" />
    <mutant id="mutant_590" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="(&quot;The transformer array must not contain a null transformer, index &quot; + i)" to="(&quot;The transformer array must not contain a null transformer, index &quot; % i)" />
    <mutant id="mutant_591" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="(&quot;The transformer array must not contain a null transformer, index &quot; + i)" to="&quot;The transformer array must not contain a null transformer, index &quot;" />
    <mutant id="mutant_592" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="(&quot;The transformer array must not contain a null transformer, index &quot; + i)" to="(&quot;The transformer array must not contain a null transformer, index &quot; - i)" />
    <mutant id="mutant_2138" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;)" to="&quot; -&gt; &quot;" />
    <mutant id="mutant_593" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(org.apache.commons.collections4.Transformer[])" from="(&quot;The transformer array must not contain a null transformer, index &quot; + i)" to="(&quot;The transformer array must not contain a null transformer, index &quot; * i)" />
    <mutant id="mutant_2139" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K,V)" from="((&quot;Failed to put: &quot; + key) + &quot; -&gt; &quot;)" to="((&quot;Failed to put: &quot; + key) - &quot; -&gt; &quot;)" />
    <mutant id="mutant_129" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;)" to="(&quot;Index \'&quot; + index)" />
    <mutant id="mutant_125" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(&quot;Index \'&quot; + index)" to="&quot;Index \'&quot;" />
    <mutant id="mutant_126" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;)" to="((&quot;Index \'&quot; + index) % &quot;\' out of bounds for size \'&quot;)" />
    <mutant id="mutant_127" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;)" to="&quot;\' out of bounds for size \'&quot;" />
    <mutant id="mutant_128" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;)" to="((&quot;Index \'&quot; + index) / &quot;\' out of bounds for size \'&quot;)" />
    <mutant id="mutant_121" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(&quot;Index \'&quot; + index)" to="(&quot;Index \'&quot; - index)" />
    <mutant id="mutant_122" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(&quot;Index \'&quot; + index)" to="index" />
    <mutant id="mutant_123" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(&quot;Index \'&quot; + index)" to="(&quot;Index \'&quot; / index)" />
    <mutant id="mutant_124" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(&quot;Index \'&quot; + index)" to="(&quot;Index \'&quot; % index)" />
    <mutant id="mutant_120" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(&quot;Index \'&quot; + index)" to="(&quot;Index \'&quot; * index)" />
    <mutant id="mutant_136" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size))" to="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) / (size))" />
    <mutant id="mutant_137" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size))" to="((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;)" />
    <mutant id="mutant_138" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) + &quot;\'&quot;)" to="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) - &quot;\'&quot;)" />
    <mutant id="mutant_139" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) + &quot;\'&quot;)" to="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size))" />
    <mutant id="mutant_2198" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; / key)" />
    <mutant id="mutant_2199" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="&quot;invalid lookup: &quot;" />
    <mutant id="mutant_2196" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; - key)" />
    <mutant id="mutant_2197" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; * key)" />
    <mutant id="mutant_132" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size))" to="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) - (size))" />
    <mutant id="mutant_133" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size))" to="(size)" />
    <mutant id="mutant_134" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size))" to="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) * (size))" />
    <mutant id="mutant_135" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size))" to="(((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) % (size))" />
    <mutant id="mutant_130" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;)" to="((&quot;Index \'&quot; + index) * &quot;\' out of bounds for size \'&quot;)" />
    <mutant id="mutant_131" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;)" to="((&quot;Index \'&quot; + index) - &quot;\' out of bounds for size \'&quot;)" />
    <mutant id="mutant_147" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(startIndex + (sub.offset))" to="(startIndex % (sub.offset))" />
    <mutant id="mutant_148" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(startIndex + (sub.offset))" to="(startIndex / (sub.offset))" />
    <mutant id="mutant_149" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(startIndex + (sub.offset))" to="startIndex" />
    <mutant id="mutant_2194" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="key" />
    <mutant id="mutant_2195" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; % key)" />
    <mutant id="mutant_2192" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; / key)" />
    <mutant id="mutant_2193" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="&quot;invalid lookup: &quot;" />
    <mutant id="mutant_2190" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; - key)" />
    <mutant id="mutant_2191" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; * key)" />
    <mutant id="mutant_2189" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) + (lengthInBits(key)))" to="(((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;)" />
    <mutant id="mutant_2187" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) + (lengthInBits(key)))" to="lengthInBits(key)" />
    <mutant id="mutant_2188" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) + (lengthInBits(key)))" to="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) % (lengthInBits(key)))" />
    <mutant id="mutant_2185" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) + (lengthInBits(key)))" to="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) - (lengthInBits(key)))" />
    <mutant id="mutant_2186" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) + (lengthInBits(key)))" to="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) * (lengthInBits(key)))" />
    <mutant id="mutant_143" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) + &quot;\'&quot;)" to="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) / &quot;\'&quot;)" />
    <mutant id="mutant_144" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(startIndex + (sub.offset))" to="sub.offset" />
    <mutant id="mutant_145" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(startIndex + (sub.offset))" to="(startIndex - (sub.offset))" />
    <mutant id="mutant_146" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(startIndex + (sub.offset))" to="(startIndex * (sub.offset))" />
    <mutant id="mutant_140" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) + &quot;\'&quot;)" to="&quot;\'&quot;" />
    <mutant id="mutant_141" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) + &quot;\'&quot;)" to="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) * &quot;\'&quot;)" />
    <mutant id="mutant_142" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.rangeCheck(int,int)" from="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) + &quot;\'&quot;)" to="((((&quot;Index \'&quot; + index) + &quot;\' out of bounds for size \'&quot;) + (size)) % &quot;\'&quot;)" />
    <mutant id="mutant_158" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode)" to="hashCode" />
    <mutant id="mutant_159" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode)" to="(31 + hashCode)" />
    <mutant id="mutant_2183" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;)" to="&quot; &gt; &quot;" />
    <mutant id="mutant_2184" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) + (lengthInBits(key)))" to="((((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;) / (lengthInBits(key)))" />
    <mutant id="mutant_2181" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;)" to="(((offsetInBits + &quot; + &quot;) + lengthInBits) * &quot; &gt; &quot;)" />
    <mutant id="mutant_2182" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;)" to="(((offsetInBits + &quot; + &quot;) + lengthInBits) % &quot; &gt; &quot;)" />
    <mutant id="mutant_2180" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;)" to="(((offsetInBits + &quot; + &quot;) + lengthInBits) - &quot; &gt; &quot;)" />
    <mutant id="mutant_2178" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;)" to="(((offsetInBits + &quot; + &quot;) + lengthInBits) / &quot; &gt; &quot;)" />
    <mutant id="mutant_2179" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="(((offsetInBits + &quot; + &quot;) + lengthInBits) + &quot; &gt; &quot;)" to="((offsetInBits + &quot; + &quot;) + lengthInBits)" />
    <mutant id="mutant_2176" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((offsetInBits + &quot; + &quot;) + lengthInBits)" to="((offsetInBits + &quot; + &quot;) / lengthInBits)" />
    <mutant id="mutant_2177" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((offsetInBits + &quot; + &quot;) + lengthInBits)" to="lengthInBits" />
    <mutant id="mutant_2174" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((offsetInBits + &quot; + &quot;) + lengthInBits)" to="(offsetInBits + &quot; + &quot;)" />
    <mutant id="mutant_2175" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K,int,int)" from="((offsetInBits + &quot; + &quot;) + lengthInBits)" to="((offsetInBits + &quot; + &quot;) - lengthInBits)" />
    <mutant id="mutant_154" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="super.nextIndex()" />
    <mutant id="mutant_155" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="(super.nextIndex()) / (sub.offset)" />
    <mutant id="mutant_156" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode)" to="(31 - hashCode)" />
    <mutant id="mutant_157" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode)" to="(31 % hashCode)" />
    <mutant id="mutant_150" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="sub.offset" />
    <mutant id="mutant_151" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="(super.nextIndex()) * (sub.offset)" />
    <mutant id="mutant_152" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="(super.nextIndex()) + (sub.offset)" />
    <mutant id="mutant_153" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="(super.nextIndex()) % (sub.offset)" />
    <mutant id="mutant_169" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.lastIndexOf(java.lang.Object)" from="(size) - 1" to="1" />
    <mutant id="mutant_160" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode)" to="(31 / hashCode)" />
    <mutant id="mutant_165" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode) + (e == null ? 0 : e.hashCode())" to="(31 * hashCode) / (e == null ? 0 : e.hashCode())" />
    <mutant id="mutant_166" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode) + (e == null ? 0 : e.hashCode())" to="(31 * hashCode) * (e == null ? 0 : e.hashCode())" />
    <mutant id="mutant_167" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode) + (e == null ? 0 : e.hashCode())" to="e == null ? 0 : e.hashCode()" />
    <mutant id="mutant_168" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.lastIndexOf(java.lang.Object)" from="(size) - 1" to="(size) % 1" />
    <mutant id="mutant_161" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode)" to="31" />
    <mutant id="mutant_162" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode) + (e == null ? 0 : e.hashCode())" to="(31 * hashCode) - (e == null ? 0 : e.hashCode())" />
    <mutant id="mutant_163" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode) + (e == null ? 0 : e.hashCode())" to="(31 * hashCode) % (e == null ? 0 : e.hashCode())" />
    <mutant id="mutant_164" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.hashCode()" from="(31 * hashCode) + (e == null ? 0 : e.hashCode())" to="31 * hashCode" />
    <mutant id="mutant_170" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.lastIndexOf(java.lang.Object)" from="(size) - 1" to="(size) * 1" />
    <mutant id="mutant_171" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.lastIndexOf(java.lang.Object)" from="(size) - 1" to="(size) / 1" />
    <mutant id="mutant_176" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.toString()" from="(16 * (size()))" to="(16 + (size()))" />
    <mutant id="mutant_177" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.toString()" from="(16 * (size()))" to="(16 / (size()))" />
    <mutant id="mutant_178" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.toString()" from="(16 * (size()))" to="(16 - (size()))" />
    <mutant id="mutant_179" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.toString()" from="(16 * (size()))" to="size()" />
    <mutant id="mutant_172" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.lastIndexOf(java.lang.Object)" from="(size) - 1" to="size" />
    <mutant id="mutant_173" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.lastIndexOf(java.lang.Object)" from="(size) - 1" to="(size) + 1" />
    <mutant id="mutant_174" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.toString()" from="(16 * (size()))" to="(16 % (size()))" />
    <mutant id="mutant_175" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.toString()" from="(16 * (size()))" to="16" />
    <mutant id="mutant_180" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="&quot;index (&quot;" />
    <mutant id="mutant_181" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="(&quot;Couldn\'t get the node: &quot; / &quot;index (&quot;)" />
    <mutant id="mutant_182" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="(&quot;Couldn\'t get the node: &quot; % &quot;index (&quot;)" />
    <mutant id="mutant_187" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) / index)" />
    <mutant id="mutant_188" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) % index)" />
    <mutant id="mutant_189" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) - index)" />
    <mutant id="mutant_183" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="(&quot;Couldn\'t get the node: &quot; - &quot;index (&quot;)" />
    <mutant id="mutant_184" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="(&quot;Couldn\'t get the node: &quot; * &quot;index (&quot;)" />
    <mutant id="mutant_185" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="&quot;Couldn\'t get the node: &quot;" />
    <mutant id="mutant_186" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" />
    <mutant id="mutant_190" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="index" />
    <mutant id="mutant_191" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) * index)" />
    <mutant id="mutant_192" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) less than zero.&quot;)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" />
    <mutant id="mutant_193" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) less than zero.&quot;)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) / &quot;) less than zero.&quot;)" />
    <mutant id="mutant_198" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="&quot;index (&quot;" />
    <mutant id="mutant_199" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="(&quot;Couldn\'t get the node: &quot; / &quot;index (&quot;)" />
    <mutant id="mutant_194" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) less than zero.&quot;)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) - &quot;) less than zero.&quot;)" />
    <mutant id="mutant_195" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) less than zero.&quot;)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) % &quot;) less than zero.&quot;)" />
    <mutant id="mutant_196" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) less than zero.&quot;)" to="&quot;) less than zero.&quot;" />
    <mutant id="mutant_197" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) less than zero.&quot;)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) * &quot;) less than zero.&quot;)" />
    <mutant id="mutant_1719" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger / offset)" />
    <mutant id="mutant_1717" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger - offset)" />
    <mutant id="mutant_1718" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger % offset)" />
    <mutant id="mutant_1715" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="offset" />
    <mutant id="mutant_1716" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="indexOfLargestMobileInteger" />
    <mutant id="mutant_1713" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger / offset)" />
    <mutant id="mutant_1714" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger * offset)" />
    <mutant id="mutant_1711" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger - offset)" />
    <mutant id="mutant_1712" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger % offset)" />
    <mutant id="mutant_1710" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="indexOfLargestMobileInteger" />
    <mutant id="mutant_1708" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_1709" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_1706" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i - 1)" to="1" />
    <mutant id="mutant_1707" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i - 1)" to="i" />
    <mutant id="mutant_1704" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_1705" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_1702" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_1703" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1700" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i + 1)" to="i" />
    <mutant id="mutant_1701" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_2608" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="(end) - (start)" to="end" />
    <mutant id="mutant_2609" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(lastReturnedIndex) + 1" to="1" />
    <mutant id="mutant_1751" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" />
    <mutant id="mutant_1752" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) * &quot;]&quot;" />
    <mutant id="mutant_1750" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) - (getValue()))" />
    <mutant id="mutant_1759" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(&quot;MapIterator[&quot; % (getKey()))" />
    <mutant id="mutant_2606" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="(end) - (start)" to="(end) * (start)" />
    <mutant id="mutant_2607" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="(end) - (start)" to="(end) % (start)" />
    <mutant id="mutant_1757" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) / &quot;]&quot;" />
    <mutant id="mutant_2604" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="(end) - (start)" to="(end) / (start)" />
    <mutant id="mutant_1758" viable="true" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(getKey())" />
    <mutant id="mutant_2605" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="(end) - (start)" to="start" />
    <mutant id="mutant_1755" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) % &quot;]&quot;" />
    <mutant id="mutant_2602" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start)) + (end)" to="end" />
    <mutant id="mutant_1756" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_2603" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="(end) - (start)" to="(end) + (start)" />
    <mutant id="mutant_1753" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) - &quot;]&quot;" />
    <mutant id="mutant_2600" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start)) + (end)" to="((maxElements) - (start)) * (end)" />
    <mutant id="mutant_1754" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())" />
    <mutant id="mutant_2601" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start)) + (end)" to="((maxElements) - (start)) / (end)" />
    <mutant id="mutant_1740" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;MapIterator[&quot; + (getKey())) % &quot;=&quot;)" />
    <mutant id="mutant_1741" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="&quot;=&quot;" />
    <mutant id="mutant_1748" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(getValue())" />
    <mutant id="mutant_1749" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) % (getValue()))" />
    <mutant id="mutant_1746" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) / (getValue()))" />
    <mutant id="mutant_1747" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) * (getValue()))" />
    <mutant id="mutant_1744" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;MapIterator[&quot; + (getKey())) * &quot;=&quot;)" />
    <mutant id="mutant_1745" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;MapIterator[&quot; + (getKey())) - &quot;=&quot;)" />
    <mutant id="mutant_1742" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="(&quot;MapIterator[&quot; + (getKey()))" />
    <mutant id="mutant_1743" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;MapIterator[&quot; + (getKey())) / &quot;=&quot;)" />
    <mutant id="mutant_900" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="size - 1" to="size * 1" />
    <mutant id="mutant_901" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="size - 1" to="size" />
    <mutant id="mutant_902" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="size - 1" to="1" />
    <mutant id="mutant_1739" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(&quot;MapIterator[&quot; * (getKey()))" />
    <mutant id="mutant_907" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(i + 1)" to="1" />
    <mutant id="mutant_908" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(i + 1)" to="i" />
    <mutant id="mutant_909" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_903" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="size - 1" to="size / 1" />
    <mutant id="mutant_904" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="size - 1" to="size + 1" />
    <mutant id="mutant_905" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="size - 1" to="size % 1" />
    <mutant id="mutant_906" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_1730" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger % offset)" />
    <mutant id="mutant_1737" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(&quot;MapIterator[&quot; % (getKey()))" />
    <mutant id="mutant_1738" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(getKey())" />
    <mutant id="mutant_1735" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(&quot;MapIterator[&quot; - (getKey()))" />
    <mutant id="mutant_1736" viable="true" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="&quot;MapIterator[&quot;" />
    <mutant id="mutant_1733" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="offset" />
    <mutant id="mutant_1734" viable="false" in="org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(&quot;MapIterator[&quot; / (getKey()))" />
    <mutant id="mutant_1731" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger / offset)" />
    <mutant id="mutant_1732" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger * offset)" />
    <mutant id="mutant_910" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_911" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_912" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(size - i)" to="(size / i)" />
    <mutant id="mutant_913" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(size - i)" to="size" />
    <mutant id="mutant_1728" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="indexOfLargestMobileInteger" />
    <mutant id="mutant_1729" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger - offset)" />
    <mutant id="mutant_918" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="((size - i) - 1)" to="1" />
    <mutant id="mutant_919" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="((size - i) - 1)" to="((size - i) % 1)" />
    <mutant id="mutant_914" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(size - i)" to="i" />
    <mutant id="mutant_915" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(size - i)" to="(size + i)" />
    <mutant id="mutant_916" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(size - i)" to="(size % i)" />
    <mutant id="mutant_917" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="(size - i)" to="(size * i)" />
    <mutant id="mutant_1726" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger * offset)" />
    <mutant id="mutant_1727" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="offset" />
    <mutant id="mutant_1724" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger % offset)" />
    <mutant id="mutant_1725" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger / offset)" />
    <mutant id="mutant_1722" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="indexOfLargestMobileInteger" />
    <mutant id="mutant_1723" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger - offset)" />
    <mutant id="mutant_1720" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="(indexOfLargestMobileInteger * offset)" />
    <mutant id="mutant_1721" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(indexOfLargestMobileInteger + offset)" to="offset" />
    <mutant id="mutant_921" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="((size - i) - 1)" to="(size - i)" />
    <mutant id="mutant_922" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="((size - i) - 1)" to="((size - i) / 1)" />
    <mutant id="mutant_923" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="((size - i) - 1)" to="((size - i) + 1)" />
    <mutant id="mutant_924" viable="true" in="org.apache.commons.collections4.map.CompositeMap.entrySet()" from="(composite.length) - 1" to="(composite.length) / 1" />
    <mutant id="mutant_920" viable="true" in="org.apache.commons.collections4.map.CompositeMap.removeComposited(java.util.Map)" from="((size - i) - 1)" to="((size - i) * 1)" />
    <mutant id="mutant_929" viable="true" in="org.apache.commons.collections4.map.CompositeMap.entrySet()" from="(composite.length) - 1" to="composite.length" />
    <mutant id="mutant_925" viable="true" in="org.apache.commons.collections4.map.CompositeMap.entrySet()" from="(composite.length) - 1" to="1" />
    <mutant id="mutant_926" viable="true" in="org.apache.commons.collections4.map.CompositeMap.entrySet()" from="(composite.length) - 1" to="(composite.length) % 1" />
    <mutant id="mutant_927" viable="true" in="org.apache.commons.collections4.map.CompositeMap.entrySet()" from="(composite.length) - 1" to="(composite.length) * 1" />
    <mutant id="mutant_928" viable="true" in="org.apache.commons.collections4.map.CompositeMap.entrySet()" from="(composite.length) - 1" to="(composite.length) + 1" />
    <mutant id="mutant_1311" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;)" to="(&quot;NPE, entry=&quot; + entry)" />
    <mutant id="mutant_1795" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; must be Comparable&quot;)" to="(dataElement / &quot; must be Comparable&quot;)" />
    <mutant id="mutant_2642" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n) - 1" to="((size()) - n) + 1" />
    <mutant id="mutant_1312" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;)" to="&quot; entryIsHeader=&quot;" />
    <mutant id="mutant_1796" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; must be Comparable&quot;)" to="(dataElement % &quot; must be Comparable&quot;)" />
    <mutant id="mutant_2643" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n) - 1" to="((size()) - n) / 1" />
    <mutant id="mutant_1793" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; cannot be null&quot;)" to="(dataElement % &quot; cannot be null&quot;)" />
    <mutant id="mutant_2640" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n) - 1" to="1" />
    <mutant id="mutant_1310" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;)" to="((&quot;NPE, entry=&quot; + entry) - &quot; entryIsHeader=&quot;)" />
    <mutant id="mutant_1794" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; must be Comparable&quot;)" to="(dataElement - &quot; must be Comparable&quot;)" />
    <mutant id="mutant_2641" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n) - 1" to="((size()) - n) % 1" />
    <mutant id="mutant_1791" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; cannot be null&quot;)" to="&quot; cannot be null&quot;" />
    <mutant id="mutant_1792" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; cannot be null&quot;)" to="(dataElement - &quot; cannot be null&quot;)" />
    <mutant id="mutant_1790" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; cannot be null&quot;)" to="(dataElement / &quot; cannot be null&quot;)" />
    <mutant id="mutant_1319" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header)))" to="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) - (entry == (header)))" />
    <mutant id="mutant_1317" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header)))" to="((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;)" />
    <mutant id="mutant_2648" viable="true" in="org.apache.commons.collections4.ArrayStack.pop()" from="(n - 1)" to="(n * 1)" />
    <mutant id="mutant_1318" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header)))" to="(entry == (header))" />
    <mutant id="mutant_2649" viable="true" in="org.apache.commons.collections4.ArrayStack.pop()" from="(n - 1)" to="(n + 1)" />
    <mutant id="mutant_1315" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header)))" to="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) % (entry == (header)))" />
    <mutant id="mutant_1799" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; must be Comparable&quot;)" to="(dataElement * &quot; must be Comparable&quot;)" />
    <mutant id="mutant_2646" viable="true" in="org.apache.commons.collections4.ArrayStack.pop()" from="(n - 1)" to="(n / 1)" />
    <mutant id="mutant_1316" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header)))" to="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) * (entry == (header)))" />
    <mutant id="mutant_2647" viable="true" in="org.apache.commons.collections4.ArrayStack.pop()" from="(n - 1)" to="n" />
    <mutant id="mutant_1313" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;)" to="((&quot;NPE, entry=&quot; + entry) / &quot; entryIsHeader=&quot;)" />
    <mutant id="mutant_1797" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; must be Comparable&quot;)" to="dataElement" />
    <mutant id="mutant_2644" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n) - 1" to="(size()) - n" />
    <mutant id="mutant_1314" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header)))" to="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) / (entry == (header)))" />
    <mutant id="mutant_1798" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; must be Comparable&quot;)" to="&quot; must be Comparable&quot;" />
    <mutant id="mutant_2645" viable="true" in="org.apache.commons.collections4.ArrayStack.pop()" from="(n - 1)" to="1" />
    <mutant id="mutant_932" viable="true" in="org.apache.commons.collections4.map.CompositeMap.keySet()" from="(this.composite.length) - 1" to="(this.composite.length) % 1" />
    <mutant id="mutant_933" viable="true" in="org.apache.commons.collections4.map.CompositeMap.keySet()" from="(this.composite.length) - 1" to="(this.composite.length) * 1" />
    <mutant id="mutant_934" viable="true" in="org.apache.commons.collections4.map.CompositeMap.keySet()" from="(this.composite.length) - 1" to="(this.composite.length) + 1" />
    <mutant id="mutant_935" viable="true" in="org.apache.commons.collections4.map.CompositeMap.keySet()" from="(this.composite.length) - 1" to="this.composite.length" />
    <mutant id="mutant_930" viable="true" in="org.apache.commons.collections4.map.CompositeMap.keySet()" from="(this.composite.length) - 1" to="(this.composite.length) / 1" />
    <mutant id="mutant_931" viable="true" in="org.apache.commons.collections4.map.CompositeMap.keySet()" from="(this.composite.length) - 1" to="1" />
    <mutant id="mutant_936" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(composite.length) - 1" to="(composite.length) / 1" />
    <mutant id="mutant_937" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(composite.length) - 1" to="1" />
    <mutant id="mutant_938" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(composite.length) - 1" to="(composite.length) % 1" />
    <mutant id="mutant_939" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(composite.length) - 1" to="(composite.length) * 1" />
    <mutant id="mutant_1300" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) * &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_1784" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doToString(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((nodeCount) * 32)" to="((nodeCount) - 32)" />
    <mutant id="mutant_2631" viable="true" in="org.apache.commons.collections4.ArrayStack.peek()" from="(n - 1)" to="(n + 1)" />
    <mutant id="mutant_1301" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_1785" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doToString(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((nodeCount) * 32)" to="((nodeCount) % 32)" />
    <mutant id="mutant_2632" viable="true" in="org.apache.commons.collections4.ArrayStack.peek()" from="(n - 1)" to="(n % 1)" />
    <mutant id="mutant_1782" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doToString(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((nodeCount) * 32)" to="((nodeCount) + 32)" />
    <mutant id="mutant_1783" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doToString(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((nodeCount) * 32)" to="nodeCount" />
    <mutant id="mutant_2630" viable="true" in="org.apache.commons.collections4.ArrayStack.peek()" from="(n - 1)" to="(n * 1)" />
    <mutant id="mutant_1780" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) - &quot;]&quot;" />
    <mutant id="mutant_1781" viable="true" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())" />
    <mutant id="mutant_1308" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;)" to="((&quot;NPE, entry=&quot; + entry) * &quot; entryIsHeader=&quot;)" />
    <mutant id="mutant_2639" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n) - 1" to="((size()) - n) * 1" />
    <mutant id="mutant_1309" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;)" to="((&quot;NPE, entry=&quot; + entry) % &quot; entryIsHeader=&quot;)" />
    <mutant id="mutant_1306" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;NPE, entry=&quot; + entry)" to="(&quot;NPE, entry=&quot; % entry)" />
    <mutant id="mutant_2637" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n)" to="(size())" />
    <mutant id="mutant_1307" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;NPE, entry=&quot; + entry)" to="entry" />
    <mutant id="mutant_2638" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n)" to="((size()) / n)" />
    <mutant id="mutant_1304" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;NPE, entry=&quot; + entry)" to="(&quot;NPE, entry=&quot; / entry)" />
    <mutant id="mutant_1788" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; cannot be null&quot;)" to="(dataElement * &quot; cannot be null&quot;)" />
    <mutant id="mutant_2635" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n)" to="((size()) + n)" />
    <mutant id="mutant_1305" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;NPE, entry=&quot; + entry)" to="&quot;NPE, entry=&quot;" />
    <mutant id="mutant_1789" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="(dataElement + &quot; cannot be null&quot;)" to="dataElement" />
    <mutant id="mutant_2636" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n)" to="n" />
    <mutant id="mutant_1302" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;NPE, entry=&quot; + entry)" to="(&quot;NPE, entry=&quot; * entry)" />
    <mutant id="mutant_1786" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doToString(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((nodeCount) * 32)" to="((nodeCount) / 32)" />
    <mutant id="mutant_2633" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n)" to="((size()) * n)" />
    <mutant id="mutant_1303" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;NPE, entry=&quot; + entry)" to="(&quot;NPE, entry=&quot; - entry)" />
    <mutant id="mutant_1787" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doToString(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)" from="((nodeCount) * 32)" to="32" />
    <mutant id="mutant_2634" viable="true" in="org.apache.commons.collections4.ArrayStack.peek(int)" from="((size()) - n)" to="((size()) % n)" />
    <mutant id="mutant_943" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(this.composite.length) + 1" to="1" />
    <mutant id="mutant_944" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(this.composite.length) + 1" to="(this.composite.length) % 1" />
    <mutant id="mutant_945" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(this.composite.length) + 1" to="(this.composite.length) * 1" />
    <mutant id="mutant_946" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(this.composite.length) + 1" to="(this.composite.length) - 1" />
    <mutant id="mutant_940" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(composite.length) - 1" to="(composite.length) + 1" />
    <mutant id="mutant_941" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(composite.length) - 1" to="composite.length" />
    <mutant id="mutant_942" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(this.composite.length) + 1" to="(this.composite.length) / 1" />
    <mutant id="mutant_947" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="(this.composite.length) + 1" to="this.composite.length" />
    <mutant id="mutant_948" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="((temp.length) - 1)" to="((temp.length) / 1)" />
    <mutant id="mutant_949" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="((temp.length) - 1)" to="1" />
    <mutant id="mutant_1773" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) - (getValue()))" />
    <mutant id="mutant_2620" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="((end) - pos)" to="end" />
    <mutant id="mutant_1774" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) / (getValue()))" />
    <mutant id="mutant_2621" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(pos - 1)" to="(pos * 1)" />
    <mutant id="mutant_1771" viable="true" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(getValue())" />
    <mutant id="mutant_1772" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) * (getValue()))" />
    <mutant id="mutant_1770" viable="true" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" />
    <mutant id="mutant_2628" viable="true" in="org.apache.commons.collections4.ArrayStack.peek()" from="(n - 1)" to="(n / 1)" />
    <mutant id="mutant_2629" viable="true" in="org.apache.commons.collections4.ArrayStack.peek()" from="(n - 1)" to="n" />
    <mutant id="mutant_1779" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) / &quot;]&quot;" />
    <mutant id="mutant_2626" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(pos - 1)" to="(pos / 1)" />
    <mutant id="mutant_2627" viable="true" in="org.apache.commons.collections4.ArrayStack.peek()" from="(n - 1)" to="1" />
    <mutant id="mutant_1777" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) % &quot;]&quot;" />
    <mutant id="mutant_2624" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(pos - 1)" to="(pos % 1)" />
    <mutant id="mutant_1778" viable="true" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_2625" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(pos - 1)" to="pos" />
    <mutant id="mutant_1775" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) % (getValue()))" />
    <mutant id="mutant_2622" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(pos - 1)" to="1" />
    <mutant id="mutant_1776" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) * &quot;]&quot;" />
    <mutant id="mutant_2623" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(pos - 1)" to="(pos + 1)" />
    <mutant id="mutant_954" viable="true" in="org.apache.commons.collections4.map.CompositeMap.clear()" from="(this.composite.length) - 1" to="(this.composite.length) / 1" />
    <mutant id="mutant_955" viable="true" in="org.apache.commons.collections4.map.CompositeMap.clear()" from="(this.composite.length) - 1" to="1" />
    <mutant id="mutant_956" viable="true" in="org.apache.commons.collections4.map.CompositeMap.clear()" from="(this.composite.length) - 1" to="(this.composite.length) % 1" />
    <mutant id="mutant_957" viable="true" in="org.apache.commons.collections4.map.CompositeMap.clear()" from="(this.composite.length) - 1" to="(this.composite.length) * 1" />
    <mutant id="mutant_950" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="((temp.length) - 1)" to="((temp.length) % 1)" />
    <mutant id="mutant_951" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="((temp.length) - 1)" to="((temp.length) * 1)" />
    <mutant id="mutant_952" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="((temp.length) - 1)" to="((temp.length) + 1)" />
    <mutant id="mutant_2619" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="((end) - pos)" to="((end) * pos)" />
    <mutant id="mutant_953" viable="true" in="org.apache.commons.collections4.map.CompositeMap.addComposited(java.util.Map)" from="((temp.length) - 1)" to="temp.length" />
    <mutant id="mutant_958" viable="true" in="org.apache.commons.collections4.map.CompositeMap.clear()" from="(this.composite.length) - 1" to="(this.composite.length) + 1" />
    <mutant id="mutant_959" viable="true" in="org.apache.commons.collections4.map.CompositeMap.clear()" from="(this.composite.length) - 1" to="this.composite.length" />
    <mutant id="mutant_1762" viable="true" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="&quot;MapIterator[&quot;" />
    <mutant id="mutant_1763" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(&quot;MapIterator[&quot; - (getKey()))" />
    <mutant id="mutant_2610" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(lastReturnedIndex) + 1" to="(lastReturnedIndex) * 1" />
    <mutant id="mutant_1760" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(&quot;MapIterator[&quot; / (getKey()))" />
    <mutant id="mutant_1761" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(&quot;MapIterator[&quot; * (getKey()))" />
    <mutant id="mutant_2617" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="((end) - pos)" to="pos" />
    <mutant id="mutant_2618" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="((end) - pos)" to="((end) / pos)" />
    <mutant id="mutant_1768" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;MapIterator[&quot; + (getKey())) / &quot;=&quot;)" />
    <mutant id="mutant_2615" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="((end) - pos)" to="((end) + pos)" />
    <mutant id="mutant_1769" viable="true" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="(&quot;MapIterator[&quot; + (getKey()))" />
    <mutant id="mutant_2616" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="((end) - pos)" to="((end) % pos)" />
    <mutant id="mutant_1766" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;MapIterator[&quot; + (getKey())) % &quot;=&quot;)" />
    <mutant id="mutant_2613" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(lastReturnedIndex) + 1" to="lastReturnedIndex" />
    <mutant id="mutant_1767" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;MapIterator[&quot; + (getKey())) - &quot;=&quot;)" />
    <mutant id="mutant_2614" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(lastReturnedIndex) + 1" to="(lastReturnedIndex) % 1" />
    <mutant id="mutant_1764" viable="false" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;MapIterator[&quot; + (getKey())) * &quot;=&quot;)" />
    <mutant id="mutant_2611" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(lastReturnedIndex) + 1" to="(lastReturnedIndex) / 1" />
    <mutant id="mutant_1765" viable="true" in="org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="&quot;=&quot;" />
    <mutant id="mutant_2612" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue$1.remove()" from="(lastReturnedIndex) + 1" to="(lastReturnedIndex) - 1" />
    <mutant id="mutant_965" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getKey()" from="(&quot;Invalid map index: &quot; + (index))" to="&quot;Invalid map index: &quot;" />
    <mutant id="mutant_966" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getValue()" from="(&quot;Invalid map index: &quot; + (index))" to="(&quot;Invalid map index: &quot; / (index))" />
    <mutant id="mutant_967" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getValue()" from="(&quot;Invalid map index: &quot; + (index))" to="(&quot;Invalid map index: &quot; - (index))" />
    <mutant id="mutant_968" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getValue()" from="(&quot;Invalid map index: &quot; + (index))" to="(&quot;Invalid map index: &quot; % (index))" />
    <mutant id="mutant_961" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getKey()" from="(&quot;Invalid map index: &quot; + (index))" to="(&quot;Invalid map index: &quot; - (index))" />
    <mutant id="mutant_962" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getKey()" from="(&quot;Invalid map index: &quot; + (index))" to="(&quot;Invalid map index: &quot; % (index))" />
    <mutant id="mutant_963" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getKey()" from="(&quot;Invalid map index: &quot; + (index))" to="(&quot;Invalid map index: &quot; * (index))" />
    <mutant id="mutant_964" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getKey()" from="(&quot;Invalid map index: &quot; + (index))" to="index" />
    <mutant id="mutant_2690" viable="true" in="org.apache.commons.collections4.CollectionUtils.size(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="object.getClass().getName()" />
    <mutant id="mutant_969" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getValue()" from="(&quot;Invalid map index: &quot; + (index))" to="(&quot;Invalid map index: &quot; * (index))" />
    <mutant id="mutant_1355" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(size)" />
    <mutant id="mutant_2202" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; - key)" />
    <mutant id="mutant_2686" viable="true" in="org.apache.commons.collections4.CollectionUtils.size(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="&quot;Unsupported object type: &quot;" />
    <mutant id="mutant_1356" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) % &quot; maxSize=&quot;)" />
    <mutant id="mutant_2203" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; * key)" />
    <mutant id="mutant_2687" viable="false" in="org.apache.commons.collections4.CollectionUtils.size(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="(&quot;Unsupported object type: &quot; - (object.getClass().getName()))" />
    <mutant id="mutant_1353" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) * (size))" />
    <mutant id="mutant_2200" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="key" />
    <mutant id="mutant_2684" viable="true" in="org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="object.getClass().getName()" />
    <mutant id="mutant_1354" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" />
    <mutant id="mutant_2201" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; % key)" />
    <mutant id="mutant_2685" viable="false" in="org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="(&quot;Unsupported object type: &quot; * (object.getClass().getName()))" />
    <mutant id="mutant_1351" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) - (size))" />
    <mutant id="mutant_2682" viable="false" in="org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="(&quot;Unsupported object type: &quot; / (object.getClass().getName()))" />
    <mutant id="mutant_1352" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) % (size))" />
    <mutant id="mutant_2683" viable="false" in="org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="(&quot;Unsupported object type: &quot; % (object.getClass().getName()))" />
    <mutant id="mutant_2680" viable="true" in="org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="&quot;Unsupported object type: &quot;" />
    <mutant id="mutant_1350" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) / (size))" />
    <mutant id="mutant_2681" viable="false" in="org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="(&quot;Unsupported object type: &quot; - (object.getClass().getName()))" />
    <mutant id="mutant_2208" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; - key)" />
    <mutant id="mutant_960" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getKey()" from="(&quot;Invalid map index: &quot; + (index))" to="(&quot;Invalid map index: &quot; / (index))" />
    <mutant id="mutant_2209" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; * key)" />
    <mutant id="mutant_1359" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" />
    <mutant id="mutant_2206" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="key" />
    <mutant id="mutant_2207" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; % key)" />
    <mutant id="mutant_1357" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) * &quot; maxSize=&quot;)" />
    <mutant id="mutant_2204" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; / key)" />
    <mutant id="mutant_2688" viable="false" in="org.apache.commons.collections4.CollectionUtils.size(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="(&quot;Unsupported object type: &quot; / (object.getClass().getName()))" />
    <mutant id="mutant_1358" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) / &quot; maxSize=&quot;)" />
    <mutant id="mutant_2205" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="&quot;invalid lookup: &quot;" />
    <mutant id="mutant_2689" viable="false" in="org.apache.commons.collections4.CollectionUtils.size(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="(&quot;Unsupported object type: &quot; % (object.getClass().getName()))" />
    <mutant id="mutant_976" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.setValue(V)" from="(&quot;Invalid map index: &quot; + (index))" to="index" />
    <mutant id="mutant_977" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.setValue(V)" from="(&quot;Invalid map index: &quot; + (index))" to="&quot;Invalid map index: &quot;" />
    <mutant id="mutant_978" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="((getKey()) * &quot;=&quot;)" />
    <mutant id="mutant_979" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="((getKey()) / &quot;=&quot;)" />
    <mutant id="mutant_972" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.setValue(V)" from="(&quot;Invalid map index: &quot; + (index))" to="(&quot;Invalid map index: &quot; / (index))" />
    <mutant id="mutant_973" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.setValue(V)" from="(&quot;Invalid map index: &quot; + (index))" to="(&quot;Invalid map index: &quot; - (index))" />
    <mutant id="mutant_974" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.setValue(V)" from="(&quot;Invalid map index: &quot; + (index))" to="(&quot;Invalid map index: &quot; % (index))" />
    <mutant id="mutant_975" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.setValue(V)" from="(&quot;Invalid map index: &quot; + (index))" to="(&quot;Invalid map index: &quot; * (index))" />
    <mutant id="mutant_1344" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) - &quot; size=&quot;)" />
    <mutant id="mutant_2675" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.util.Iterator,int)" from="(&quot;Entry does not exist: &quot; + i)" to="i" />
    <mutant id="mutant_1345" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="&quot; size=&quot;" />
    <mutant id="mutant_2676" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.util.Iterator,int)" from="(&quot;Entry does not exist: &quot; + i)" to="(&quot;Entry does not exist: &quot; % i)" />
    <mutant id="mutant_1342" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) / value)" />
    <mutant id="mutant_2673" viable="true" in="org.apache.commons.collections4.CollectionUtils.getCardinalityMap(java.lang.Iterable)" from="((c.intValue()) + 1)" to="((c.intValue()) % 1)" />
    <mutant id="mutant_1343" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;)" />
    <mutant id="mutant_2674" viable="true" in="org.apache.commons.collections4.CollectionUtils.get(java.util.Iterator,int)" from="(&quot;Entry does not exist: &quot; + i)" to="&quot;Entry does not exist: &quot;" />
    <mutant id="mutant_1340" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="value" />
    <mutant id="mutant_2671" viable="true" in="org.apache.commons.collections4.CollectionUtils.getCardinalityMap(java.lang.Iterable)" from="((c.intValue()) + 1)" to="((c.intValue()) * 1)" />
    <mutant id="mutant_1341" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) - value)" />
    <mutant id="mutant_2672" viable="true" in="org.apache.commons.collections4.CollectionUtils.getCardinalityMap(java.lang.Iterable)" from="((c.intValue()) + 1)" to="((c.intValue()) - 1)" />
    <mutant id="mutant_2670" viable="true" in="org.apache.commons.collections4.CollectionUtils.getCardinalityMap(java.lang.Iterable)" from="((c.intValue()) + 1)" to="c.intValue()" />
    <mutant id="mutant_970" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getValue()" from="(&quot;Invalid map index: &quot; + (index))" to="index" />
    <mutant id="mutant_971" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.getValue()" from="(&quot;Invalid map index: &quot; + (index))" to="&quot;Invalid map index: &quot;" />
    <mutant id="mutant_1348" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" />
    <mutant id="mutant_2679" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.util.Iterator,int)" from="(&quot;Entry does not exist: &quot; + i)" to="(&quot;Entry does not exist: &quot; - i)" />
    <mutant id="mutant_1349" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) % &quot; size=&quot;)" />
    <mutant id="mutant_1346" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) / &quot; size=&quot;)" />
    <mutant id="mutant_2677" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.util.Iterator,int)" from="(&quot;Entry does not exist: &quot; + i)" to="(&quot;Entry does not exist: &quot; / i)" />
    <mutant id="mutant_1347" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) * &quot; size=&quot;)" />
    <mutant id="mutant_2678" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.util.Iterator,int)" from="(&quot;Entry does not exist: &quot; + i)" to="(&quot;Entry does not exist: &quot; * i)" />
    <mutant id="mutant_503" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previousIndex()" from="(nextIndex()) - 1" to="(nextIndex()) / 1" />
    <mutant id="mutant_987" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="((getKey()) + &quot;=&quot;) * (getValue())" />
    <mutant id="mutant_504" viable="true" in="org.apache.commons.collections4.list.TreeList.get(int)" from="((size()) - 1)" to="1" />
    <mutant id="mutant_988" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="(getKey()) + &quot;=&quot;" />
    <mutant id="mutant_505" viable="true" in="org.apache.commons.collections4.list.TreeList.get(int)" from="((size()) - 1)" to="((size()) + 1)" />
    <mutant id="mutant_989" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="getValue()" />
    <mutant id="mutant_506" viable="true" in="org.apache.commons.collections4.list.TreeList.get(int)" from="((size()) - 1)" to="((size()) * 1)" />
    <mutant id="mutant_983" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="(getKey())" />
    <mutant id="mutant_500" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previousIndex()" from="(nextIndex()) - 1" to="nextIndex()" />
    <mutant id="mutant_984" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="((getKey()) + &quot;=&quot;) / (getValue())" />
    <mutant id="mutant_501" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previousIndex()" from="(nextIndex()) - 1" to="(nextIndex()) % 1" />
    <mutant id="mutant_985" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="((getKey()) + &quot;=&quot;) - (getValue())" />
    <mutant id="mutant_502" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previousIndex()" from="(nextIndex()) - 1" to="(nextIndex()) + 1" />
    <mutant id="mutant_986" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="((getKey()) + &quot;=&quot;) % (getValue())" />
    <mutant id="mutant_507" viable="true" in="org.apache.commons.collections4.list.TreeList.get(int)" from="((size()) - 1)" to="((size()) / 1)" />
    <mutant id="mutant_508" viable="true" in="org.apache.commons.collections4.list.TreeList.get(int)" from="((size()) - 1)" to="size()" />
    <mutant id="mutant_509" viable="true" in="org.apache.commons.collections4.list.TreeList.get(int)" from="((size()) - 1)" to="((size()) % 1)" />
    <mutant id="mutant_1333" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) / &quot; value=&quot;)" />
    <mutant id="mutant_2664" viable="true" in="org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)" from="((((Collection&lt;?&gt;)(a)).size()) + (((Collection&lt;?&gt;)(b)).size()))" to="((((Collection&lt;?&gt;)(a)).size()) % (((Collection&lt;?&gt;)(b)).size()))" />
    <mutant id="mutant_1334" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) % &quot; value=&quot;)" />
    <mutant id="mutant_2665" viable="true" in="org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)" from="((((Collection&lt;?&gt;)(a)).size()) + (((Collection&lt;?&gt;)(b)).size()))" to="((((Collection&lt;?&gt;)(a)).size()) * (((Collection&lt;?&gt;)(b)).size()))" />
    <mutant id="mutant_1331" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key)" to="key" />
    <mutant id="mutant_2662" viable="true" in="org.apache.commons.collections4.CollectionUtils.disjunction(java.lang.Iterable,java.lang.Iterable)" from="((helper.max(obj)) - (helper.min(obj)))" to="helper.min(obj)" />
    <mutant id="mutant_1332" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="&quot; value=&quot;" />
    <mutant id="mutant_2663" viable="true" in="org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)" from="((((Collection&lt;?&gt;)(a)).size()) + (((Collection&lt;?&gt;)(b)).size()))" to="((((Collection&lt;?&gt;)(a)).size()) - (((Collection&lt;?&gt;)(b)).size()))" />
    <mutant id="mutant_2660" viable="true" in="org.apache.commons.collections4.CollectionUtils.disjunction(java.lang.Iterable,java.lang.Iterable)" from="((helper.max(obj)) - (helper.min(obj)))" to="((helper.max(obj)) / (helper.min(obj)))" />
    <mutant id="mutant_1330" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key)" to="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) / key)" />
    <mutant id="mutant_2661" viable="true" in="org.apache.commons.collections4.CollectionUtils.disjunction(java.lang.Iterable,java.lang.Iterable)" from="((helper.max(obj)) - (helper.min(obj)))" to="helper.max(obj)" />
    <mutant id="mutant_980" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="&quot;=&quot;" />
    <mutant id="mutant_981" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="((getKey()) - &quot;=&quot;)" />
    <mutant id="mutant_1339" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) % value)" />
    <mutant id="mutant_982" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="((getKey()) % &quot;=&quot;)" />
    <mutant id="mutant_1337" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key)" />
    <mutant id="mutant_2668" viable="true" in="org.apache.commons.collections4.CollectionUtils.getCardinalityMap(java.lang.Iterable)" from="((c.intValue()) + 1)" to="((c.intValue()) / 1)" />
    <mutant id="mutant_1338" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) * value)" />
    <mutant id="mutant_2669" viable="true" in="org.apache.commons.collections4.CollectionUtils.getCardinalityMap(java.lang.Iterable)" from="((c.intValue()) + 1)" to="1" />
    <mutant id="mutant_1335" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) - &quot; value=&quot;)" />
    <mutant id="mutant_2666" viable="true" in="org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)" from="((((Collection&lt;?&gt;)(a)).size()) + (((Collection&lt;?&gt;)(b)).size()))" to="((((Collection&lt;?&gt;)(a)).size()) / (((Collection&lt;?&gt;)(b)).size()))" />
    <mutant id="mutant_1336" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) * &quot; value=&quot;)" />
    <mutant id="mutant_2667" viable="true" in="org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)" from="((((Collection&lt;?&gt;)(a)).size()) + (((Collection&lt;?&gt;)(b)).size()))" to="((Collection&lt;?&gt;)(a)).size()" />
    <mutant id="mutant_514" viable="true" in="org.apache.commons.collections4.list.TreeList.remove(int)" from="((size()) - 1)" to="size()" />
    <mutant id="mutant_998" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getValue()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="(&quot;Invalid map index: &quot; * (nextIndex))" />
    <mutant id="mutant_515" viable="true" in="org.apache.commons.collections4.list.TreeList.remove(int)" from="((size()) - 1)" to="((size()) % 1)" />
    <mutant id="mutant_999" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getValue()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="nextIndex" />
    <mutant id="mutant_516" viable="true" in="org.apache.commons.collections4.list.TreeList.set(int,E)" from="((size()) - 1)" to="1" />
    <mutant id="mutant_517" viable="true" in="org.apache.commons.collections4.list.TreeList.set(int,E)" from="((size()) - 1)" to="((size()) + 1)" />
    <mutant id="mutant_510" viable="true" in="org.apache.commons.collections4.list.TreeList.remove(int)" from="((size()) - 1)" to="1" />
    <mutant id="mutant_994" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getKey()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="&quot;Invalid map index: &quot;" />
    <mutant id="mutant_511" viable="true" in="org.apache.commons.collections4.list.TreeList.remove(int)" from="((size()) - 1)" to="((size()) + 1)" />
    <mutant id="mutant_995" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getKey()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="(&quot;Invalid map index: &quot; - (nextIndex))" />
    <mutant id="mutant_512" viable="true" in="org.apache.commons.collections4.list.TreeList.remove(int)" from="((size()) - 1)" to="((size()) * 1)" />
    <mutant id="mutant_996" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getValue()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="(&quot;Invalid map index: &quot; / (nextIndex))" />
    <mutant id="mutant_513" viable="true" in="org.apache.commons.collections4.list.TreeList.remove(int)" from="((size()) - 1)" to="((size()) / 1)" />
    <mutant id="mutant_997" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getValue()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="(&quot;Invalid map index: &quot; % (nextIndex))" />
    <mutant id="mutant_518" viable="true" in="org.apache.commons.collections4.list.TreeList.set(int,E)" from="((size()) - 1)" to="((size()) * 1)" />
    <mutant id="mutant_519" viable="true" in="org.apache.commons.collections4.list.TreeList.set(int,E)" from="((size()) - 1)" to="((size()) / 1)" />
    <mutant id="mutant_1322" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;)" to="&quot; key=&quot;" />
    <mutant id="mutant_2653" viable="true" in="org.apache.commons.collections4.ArrayStack.search(java.lang.Object)" from="(size()) - 1" to="(size()) * 1" />
    <mutant id="mutant_1323" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;)" to="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) * &quot; key=&quot;)" />
    <mutant id="mutant_2654" viable="true" in="org.apache.commons.collections4.ArrayStack.search(java.lang.Object)" from="(size()) - 1" to="(size()) + 1" />
    <mutant id="mutant_1320" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;)" to="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) % &quot; key=&quot;)" />
    <mutant id="mutant_2651" viable="true" in="org.apache.commons.collections4.ArrayStack.search(java.lang.Object)" from="(size()) - 1" to="1" />
    <mutant id="mutant_1321" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;)" to="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) - &quot; key=&quot;)" />
    <mutant id="mutant_2652" viable="true" in="org.apache.commons.collections4.ArrayStack.search(java.lang.Object)" from="(size()) - 1" to="(size()) / 1" />
    <mutant id="mutant_2650" viable="true" in="org.apache.commons.collections4.ArrayStack.pop()" from="(n - 1)" to="(n % 1)" />
    <mutant id="mutant_990" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getKey()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="(&quot;Invalid map index: &quot; / (nextIndex))" />
    <mutant id="mutant_991" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getKey()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="(&quot;Invalid map index: &quot; % (nextIndex))" />
    <mutant id="mutant_992" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getKey()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="(&quot;Invalid map index: &quot; * (nextIndex))" />
    <mutant id="mutant_1328" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key)" to="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) - key)" />
    <mutant id="mutant_2659" viable="true" in="org.apache.commons.collections4.CollectionUtils.disjunction(java.lang.Iterable,java.lang.Iterable)" from="((helper.max(obj)) - (helper.min(obj)))" to="((helper.max(obj)) * (helper.min(obj)))" />
    <mutant id="mutant_993" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getKey()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="nextIndex" />
    <mutant id="mutant_1329" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key)" to="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;)" />
    <mutant id="mutant_1326" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key)" to="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) % key)" />
    <mutant id="mutant_2657" viable="true" in="org.apache.commons.collections4.CollectionUtils.disjunction(java.lang.Iterable,java.lang.Iterable)" from="((helper.max(obj)) - (helper.min(obj)))" to="((helper.max(obj)) + (helper.min(obj)))" />
    <mutant id="mutant_1327" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key)" to="(((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) * key)" />
    <mutant id="mutant_2658" viable="true" in="org.apache.commons.collections4.CollectionUtils.disjunction(java.lang.Iterable,java.lang.Iterable)" from="((helper.max(obj)) - (helper.min(obj)))" to="((helper.max(obj)) % (helper.min(obj)))" />
    <mutant id="mutant_1324" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;)" to="(((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header)))" />
    <mutant id="mutant_2655" viable="true" in="org.apache.commons.collections4.ArrayStack.search(java.lang.Object)" from="(size()) - 1" to="size()" />
    <mutant id="mutant_1325" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;)" to="((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) / &quot; key=&quot;)" />
    <mutant id="mutant_2656" viable="true" in="org.apache.commons.collections4.ArrayStack.search(java.lang.Object)" from="(size()) - 1" to="(size()) % 1" />
    <mutant id="mutant_525" viable="true" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(&quot;Invalid index:&quot; + index)" to="index" />
    <mutant id="mutant_526" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(&quot;Invalid index:&quot; + index)" to="(&quot;Invalid index:&quot; - index)" />
    <mutant id="mutant_527" viable="true" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(&quot;Invalid index:&quot; + index)" to="&quot;Invalid index:&quot;" />
    <mutant id="mutant_528" viable="true" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;)" to="&quot;, size=&quot;" />
    <mutant id="mutant_521" viable="true" in="org.apache.commons.collections4.list.TreeList.set(int,E)" from="((size()) - 1)" to="((size()) % 1)" />
    <mutant id="mutant_522" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(&quot;Invalid index:&quot; + index)" to="(&quot;Invalid index:&quot; * index)" />
    <mutant id="mutant_523" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(&quot;Invalid index:&quot; + index)" to="(&quot;Invalid index:&quot; % index)" />
    <mutant id="mutant_524" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(&quot;Invalid index:&quot; + index)" to="(&quot;Invalid index:&quot; / index)" />
    <mutant id="mutant_2250" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size())) + 2" to="((sequence1.size()) + (sequence2.size())) % 2" />
    <mutant id="mutant_529" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;)" to="((&quot;Invalid index:&quot; + index) * &quot;, size=&quot;)" />
    <mutant id="mutant_1399" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) % &quot;]&quot;" />
    <mutant id="mutant_2246" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size()))" to="((sequence1.size()) * (sequence2.size()))" />
    <mutant id="mutant_2247" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size()))" to="(sequence1.size())" />
    <mutant id="mutant_1397" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(getValue())" />
    <mutant id="mutant_2244" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size()))" to="((sequence1.size()) - (sequence2.size()))" />
    <mutant id="mutant_1398" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) - &quot;]&quot;" />
    <mutant id="mutant_2245" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size()))" to="((sequence1.size()) % (sequence2.size()))" />
    <mutant id="mutant_1395" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) % (getValue()))" />
    <mutant id="mutant_2242" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an internal Entry!&quot;)" to="(h % &quot; is not an internal Entry!&quot;)" />
    <mutant id="mutant_1396" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) - (getValue()))" />
    <mutant id="mutant_2243" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an internal Entry!&quot;)" to="h" />
    <mutant id="mutant_1393" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) * (getValue()))" />
    <mutant id="mutant_2240" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an internal Entry!&quot;)" to="&quot; is not an internal Entry!&quot;" />
    <mutant id="mutant_1394" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" />
    <mutant id="mutant_2241" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an internal Entry!&quot;)" to="(h / &quot; is not an internal Entry!&quot;)" />
    <mutant id="mutant_520" viable="true" in="org.apache.commons.collections4.list.TreeList.set(int,E)" from="((size()) - 1)" to="size()" />
    <mutant id="mutant_2248" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size()))" to="((sequence1.size()) / (sequence2.size()))" />
    <mutant id="mutant_2249" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size())) + 2" to="2" />
    <mutant id="mutant_536" viable="true" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) + (size()))" to="((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;)" />
    <mutant id="mutant_537" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) + (size()))" to="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) - (size()))" />
    <mutant id="mutant_538" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) + (size()))" to="size()" />
    <mutant id="mutant_539" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) + (size()))" to="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) / (size()))" />
    <mutant id="mutant_532" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;)" to="((&quot;Invalid index:&quot; + index) / &quot;, size=&quot;)" />
    <mutant id="mutant_533" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;)" to="((&quot;Invalid index:&quot; + index) % &quot;, size=&quot;)" />
    <mutant id="mutant_534" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) + (size()))" to="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) * (size()))" />
    <mutant id="mutant_535" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) + (size()))" to="(((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;) % (size()))" />
    <mutant id="mutant_1391" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (getKey())) % &quot;=&quot;)" />
    <mutant id="mutant_1392" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) / (getValue()))" />
    <mutant id="mutant_1390" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (getKey())) - &quot;=&quot;)" />
    <mutant id="mutant_1388" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (getKey())) / &quot;=&quot;)" />
    <mutant id="mutant_2235" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an external Entry!&quot;)" to="&quot; is not an external Entry!&quot;" />
    <mutant id="mutant_1389" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="&quot;=&quot;" />
    <mutant id="mutant_2236" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an external Entry!&quot;)" to="(h % &quot; is not an external Entry!&quot;)" />
    <mutant id="mutant_1386" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (getKey())) * &quot;=&quot;)" />
    <mutant id="mutant_2233" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an external Entry!&quot;)" to="(h * &quot; is not an external Entry!&quot;)" />
    <mutant id="mutant_1387" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="(&quot;Iterator[&quot; + (getKey()))" />
    <mutant id="mutant_2234" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an external Entry!&quot;)" to="(h / &quot; is not an external Entry!&quot;)" />
    <mutant id="mutant_1384" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(&quot;Iterator[&quot; - (getKey()))" />
    <mutant id="mutant_2231" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="offsetInBits + lengthInBits" to="offsetInBits % lengthInBits" />
    <mutant id="mutant_1385" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(getKey())" />
    <mutant id="mutant_2232" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an external Entry!&quot;)" to="(h - &quot; is not an external Entry!&quot;)" />
    <mutant id="mutant_1382" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(&quot;Iterator[&quot; * (getKey()))" />
    <mutant id="mutant_1383" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="&quot;Iterator[&quot;" />
    <mutant id="mutant_2230" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="offsetInBits + lengthInBits" to="lengthInBits" />
    <mutant id="mutant_530" viable="true" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;)" to="(&quot;Invalid index:&quot; + index)" />
    <mutant id="mutant_531" viable="false" in="org.apache.commons.collections4.list.TreeList.checkInterval(int,int,int)" from="((&quot;Invalid index:&quot; + index) + &quot;, size=&quot;)" to="((&quot;Invalid index:&quot; + index) - &quot;, size=&quot;)" />
    <mutant id="mutant_2239" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an internal Entry!&quot;)" to="(h - &quot; is not an internal Entry!&quot;)" />
    <mutant id="mutant_2237" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an external Entry!&quot;)" to="h" />
    <mutant id="mutant_2238" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)" from="(h + &quot; is not an internal Entry!&quot;)" to="(h * &quot; is not an internal Entry!&quot;)" />
    <mutant id="mutant_547" viable="true" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="((&quot;The current criterion \'&quot; + (criterion)) + &quot;\' is invalid.&quot;)" to="(&quot;The current criterion \'&quot; + (criterion))" />
    <mutant id="mutant_548" viable="false" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="((&quot;The current criterion \'&quot; + (criterion)) + &quot;\' is invalid.&quot;)" to="((&quot;The current criterion \'&quot; + (criterion)) - &quot;\' is invalid.&quot;)" />
    <mutant id="mutant_549" viable="false" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="((&quot;The current criterion \'&quot; + (criterion)) + &quot;\' is invalid.&quot;)" to="((&quot;The current criterion \'&quot; + (criterion)) * &quot;\' is invalid.&quot;)" />
    <mutant id="mutant_543" viable="false" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="(&quot;The current criterion \'&quot; + (criterion))" to="(&quot;The current criterion \'&quot; % (criterion))" />
    <mutant id="mutant_544" viable="false" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="(&quot;The current criterion \'&quot; + (criterion))" to="(&quot;The current criterion \'&quot; / (criterion))" />
    <mutant id="mutant_545" viable="false" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="(&quot;The current criterion \'&quot; + (criterion))" to="(&quot;The current criterion \'&quot; * (criterion))" />
    <mutant id="mutant_546" viable="false" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="((&quot;The current criterion \'&quot; + (criterion)) + &quot;\' is invalid.&quot;)" to="((&quot;The current criterion \'&quot; + (criterion)) / &quot;\' is invalid.&quot;)" />
    <mutant id="mutant_1380" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(&quot;Iterator[&quot; % (getKey()))" />
    <mutant id="mutant_1381" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(&quot;Iterator[&quot; / (getKey()))" />
    <mutant id="mutant_1377" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) % &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2224" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + lengthInBits)" to="lengthInBits" />
    <mutant id="mutant_1378" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2225" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + lengthInBits)" to="(offsetInBits % lengthInBits)" />
    <mutant id="mutant_1375" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="&quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;" />
    <mutant id="mutant_2222" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + lengthInBits)" to="offsetInBits" />
    <mutant id="mutant_1376" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) * &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2223" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + lengthInBits)" to="(offsetInBits - lengthInBits)" />
    <mutant id="mutant_1373" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) * &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2220" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + lengthInBits)" to="(offsetInBits / lengthInBits)" />
    <mutant id="mutant_1374" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) - &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2221" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + lengthInBits)" to="(offsetInBits * lengthInBits)" />
    <mutant id="mutant_1371" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;" />
    <mutant id="mutant_1372" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) % &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_540" viable="true" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="(&quot;The current criterion \'&quot; + (criterion))" to="(criterion)" />
    <mutant id="mutant_541" viable="true" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="(&quot;The current criterion \'&quot; + (criterion))" to="&quot;The current criterion \'&quot;" />
    <mutant id="mutant_542" viable="false" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="(&quot;The current criterion \'&quot; + (criterion))" to="(&quot;The current criterion \'&quot; - (criterion))" />
    <mutant id="mutant_2228" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="offsetInBits + lengthInBits" to="offsetInBits" />
    <mutant id="mutant_2229" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="offsetInBits + lengthInBits" to="offsetInBits - lengthInBits" />
    <mutant id="mutant_1379" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) / &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2226" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="offsetInBits + lengthInBits" to="offsetInBits / lengthInBits" />
    <mutant id="mutant_2227" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="offsetInBits + lengthInBits" to="offsetInBits * lengthInBits" />
    <mutant id="mutant_558" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) * &quot; was null&quot;)" />
    <mutant id="mutant_559" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) + &quot; was null&quot;)" to="((&quot;The predicate collection must not contain a null predicate, index &quot; + i) % &quot; was null&quot;)" />
    <mutant id="mutant_554" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="(&quot;The predicate collection must not contain a null predicate, index &quot; + i)" to="i" />
    <mutant id="mutant_555" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="(&quot;The predicate collection must not contain a null predicate, index &quot; + i)" to="(&quot;The predicate collection must not contain a null predicate, index &quot; / i)" />
    <mutant id="mutant_556" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="(&quot;The predicate collection must not contain a null predicate, index &quot; + i)" to="(&quot;The predicate collection must not contain a null predicate, index &quot; * i)" />
    <mutant id="mutant_557" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="(&quot;The predicate collection must not contain a null predicate, index &quot; + i)" to="(&quot;The predicate collection must not contain a null predicate, index &quot; % i)" />
    <mutant id="mutant_1370" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) - &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_1366" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(maxSize)" />
    <mutant id="mutant_2213" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; % key)" />
    <mutant id="mutant_2697" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Index cannot be negative: &quot; + i)" to="(&quot;Index cannot be negative: &quot; / i)" />
    <mutant id="mutant_1367" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) * (maxSize))" />
    <mutant id="mutant_2214" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + (current.bitIndex))" to="offsetInBits" />
    <mutant id="mutant_2698" viable="true" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="&quot;Entry does not exist: &quot;" />
    <mutant id="mutant_1364" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" />
    <mutant id="mutant_2211" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="&quot;invalid lookup: &quot;" />
    <mutant id="mutant_2695" viable="true" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Index cannot be negative: &quot; + i)" to="&quot;Index cannot be negative: &quot;" />
    <mutant id="mutant_1365" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) - (maxSize))" />
    <mutant id="mutant_2212" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="key" />
    <mutant id="mutant_2696" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Index cannot be negative: &quot; + i)" to="i" />
    <mutant id="mutant_1362" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) / (maxSize))" />
    <mutant id="mutant_2693" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Index cannot be negative: &quot; + i)" to="(&quot;Index cannot be negative: &quot; - i)" />
    <mutant id="mutant_1363" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) % (maxSize))" />
    <mutant id="mutant_2210" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(K)" from="(&quot;invalid lookup: &quot; + key)" to="(&quot;invalid lookup: &quot; / key)" />
    <mutant id="mutant_2694" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Index cannot be negative: &quot; + i)" to="(&quot;Index cannot be negative: &quot; * i)" />
    <mutant id="mutant_1360" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="&quot; maxSize=&quot;" />
    <mutant id="mutant_2691" viable="false" in="org.apache.commons.collections4.CollectionUtils.size(java.lang.Object)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="(&quot;Unsupported object type: &quot; * (object.getClass().getName()))" />
    <mutant id="mutant_1361" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) - &quot; maxSize=&quot;)" />
    <mutant id="mutant_2692" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Index cannot be negative: &quot; + i)" to="(&quot;Index cannot be negative: &quot; % i)" />
    <mutant id="mutant_550" viable="false" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="((&quot;The current criterion \'&quot; + (criterion)) + &quot;\' is invalid.&quot;)" to="((&quot;The current criterion \'&quot; + (criterion)) % &quot;\' is invalid.&quot;)" />
    <mutant id="mutant_551" viable="true" in="org.apache.commons.collections4.functors.ComparatorPredicate.evaluate(T)" from="((&quot;The current criterion \'&quot; + (criterion)) + &quot;\' is invalid.&quot;)" to="&quot;\' is invalid.&quot;" />
    <mutant id="mutant_552" viable="true" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="(&quot;The predicate collection must not contain a null predicate, index &quot; + i)" to="&quot;The predicate collection must not contain a null predicate, index &quot;" />
    <mutant id="mutant_2219" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + (current.bitIndex))" to="(offsetInBits / (current.bitIndex))" />
    <mutant id="mutant_553" viable="false" in="org.apache.commons.collections4.functors.FunctorUtils.validate(java.util.Collection)" from="(&quot;The predicate collection must not contain a null predicate, index &quot; + i)" to="(&quot;The predicate collection must not contain a null predicate, index &quot; - i)" />
    <mutant id="mutant_2217" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + (current.bitIndex))" to="(offsetInBits % (current.bitIndex))" />
    <mutant id="mutant_2218" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + (current.bitIndex))" to="current.bitIndex" />
    <mutant id="mutant_1368" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) / &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2215" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + (current.bitIndex))" to="(offsetInBits - (current.bitIndex))" />
    <mutant id="mutant_2699" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="i" />
    <mutant id="mutant_1369" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((&quot;NPE, entry=&quot; + entry) + &quot; entryIsHeader=&quot;) + (entry == (header))) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" />
    <mutant id="mutant_2216" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K,int,int)" from="(offsetInBits + (current.bitIndex))" to="(offsetInBits * (current.bitIndex))" />
    <mutant id="mutant_448" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="getOffset(movedNode)" />
    <mutant id="mutant_449" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="(getOffset(newTop)) / (getOffset(movedNode))" />
    <mutant id="mutant_444" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="(getOffset(newTop)) - (getOffset(movedNode))" />
    <mutant id="mutant_445" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="(getOffset(newTop)) * (getOffset(movedNode))" />
    <mutant id="mutant_446" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="(getOffset(newTop)) % (getOffset(movedNode))" />
    <mutant id="mutant_447" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="getOffset(newTop)" />
    <mutant id="mutant_2051" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + (otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="beginIndex2 - (otherLengthInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2052" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + i" to="beginIndex1" />
    <mutant id="mutant_2050" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + (otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="beginIndex2" />
    <mutant id="mutant_2048" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + (otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="beginIndex2 % (otherLengthInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2049" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + (otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="beginIndex2 / (otherLengthInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1199" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) - &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2046" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + (otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="otherLengthInBits / (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2047" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + (otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="beginIndex2 * (otherLengthInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1197" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) * &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2044" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="(otherLengthInBits + (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1198" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" />
    <mutant id="mutant_2045" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="(otherLengthInBits * (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1195" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) / &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2042" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="(StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_1196" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;" />
    <mutant id="mutant_2043" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="(otherLengthInBits % (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_440" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(relativePosition) + (getOffset(newTop))" to="relativePosition" />
    <mutant id="mutant_441" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(relativePosition) + (getOffset(newTop))" to="getOffset(newTop)" />
    <mutant id="mutant_442" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(relativePosition) + (getOffset(newTop))" to="(relativePosition) - (getOffset(newTop))" />
    <mutant id="mutant_443" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(relativePosition) + (getOffset(newTop))" to="(relativePosition) % (getOffset(newTop))" />
    <mutant id="mutant_459" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="getOffset(newTop)" />
    <mutant id="mutant_455" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(relativePosition) + (getOffset(newTop))" to="(relativePosition) % (getOffset(newTop))" />
    <mutant id="mutant_456" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="(getOffset(newTop)) - (getOffset(movedNode))" />
    <mutant id="mutant_457" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="(getOffset(newTop)) * (getOffset(movedNode))" />
    <mutant id="mutant_458" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="(getOffset(newTop)) % (getOffset(movedNode))" />
    <mutant id="mutant_1193" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(maxSize)" />
    <mutant id="mutant_2040" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="(otherLengthInBits - (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1194" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) % &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2041" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits / (StringKeyAnalyzer.LENGTH))" to="otherLengthInBits" />
    <mutant id="mutant_1191" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) / (maxSize))" />
    <mutant id="mutant_1192" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) * (maxSize))" />
    <mutant id="mutant_1190" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) - (maxSize))" />
    <mutant id="mutant_2037" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + (lengthInBits / (StringKeyAnalyzer.LENGTH))" to="beginIndex1 / (lengthInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2038" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + (lengthInBits / (StringKeyAnalyzer.LENGTH))" to="beginIndex1 % (lengthInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1188" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) % (maxSize))" />
    <mutant id="mutant_2035" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + (lengthInBits / (StringKeyAnalyzer.LENGTH))" to="lengthInBits / (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_1189" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" />
    <mutant id="mutant_2036" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + (lengthInBits / (StringKeyAnalyzer.LENGTH))" to="beginIndex1" />
    <mutant id="mutant_1186" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) * &quot; maxSize=&quot;)" />
    <mutant id="mutant_2033" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="(lengthInBits - (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1187" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="&quot; maxSize=&quot;" />
    <mutant id="mutant_2034" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + (lengthInBits / (StringKeyAnalyzer.LENGTH))" to="beginIndex1 - (lengthInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1184" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) % &quot; maxSize=&quot;)" />
    <mutant id="mutant_2031" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="(lengthInBits * (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1185" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) / &quot; maxSize=&quot;)" />
    <mutant id="mutant_2032" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="lengthInBits" />
    <mutant id="mutant_451" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(relativePosition) + (getOffset(newTop))" to="(relativePosition) / (getOffset(newTop))" />
    <mutant id="mutant_452" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(relativePosition) + (getOffset(newTop))" to="relativePosition" />
    <mutant id="mutant_453" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(relativePosition) + (getOffset(newTop))" to="getOffset(newTop)" />
    <mutant id="mutant_454" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(relativePosition) + (getOffset(newTop))" to="(relativePosition) - (getOffset(newTop))" />
    <mutant id="mutant_2039" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + (lengthInBits / (StringKeyAnalyzer.LENGTH))" to="beginIndex1 * (lengthInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_450" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(relativePosition) + (getOffset(newTop))" to="(relativePosition) * (getOffset(newTop))" />
    <mutant id="mutant_466" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.recalcHeight()" from="(Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) + 1" to="(Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) - 1" />
    <mutant id="mutant_467" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.recalcHeight()" from="(Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) + 1" to="(Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) % 1" />
    <mutant id="mutant_468" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (left.relativePosition))" to="(index * (left.relativePosition))" />
    <mutant id="mutant_469" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (left.relativePosition))" to="(index / (left.relativePosition))" />
    <mutant id="mutant_1182" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" />
    <mutant id="mutant_1183" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) - &quot; maxSize=&quot;)" />
    <mutant id="mutant_2030" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="(lengthInBits % (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1180" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(size)" />
    <mutant id="mutant_1181" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) / (size))" />
    <mutant id="mutant_1179" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) * (size))" />
    <mutant id="mutant_2026" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="otherOffsetInBits / (StringKeyAnalyzer.LENGTH)" to="otherOffsetInBits - (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2027" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="otherOffsetInBits / (StringKeyAnalyzer.LENGTH)" to="otherOffsetInBits + (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_1177" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) % (size))" />
    <mutant id="mutant_2024" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="otherOffsetInBits / (StringKeyAnalyzer.LENGTH)" to="otherOffsetInBits" />
    <mutant id="mutant_1178" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) - (size))" />
    <mutant id="mutant_2025" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="otherOffsetInBits / (StringKeyAnalyzer.LENGTH)" to="otherOffsetInBits * (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_1175" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) / &quot; size=&quot;)" />
    <mutant id="mutant_2022" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="otherOffsetInBits / (StringKeyAnalyzer.LENGTH)" to="otherOffsetInBits % (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_1176" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" />
    <mutant id="mutant_2023" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="otherOffsetInBits / (StringKeyAnalyzer.LENGTH)" to="StringKeyAnalyzer.LENGTH" />
    <mutant id="mutant_1173" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) * &quot; size=&quot;)" />
    <mutant id="mutant_2020" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="offsetInBits / (StringKeyAnalyzer.LENGTH)" to="offsetInBits * (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_1174" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) - &quot; size=&quot;)" />
    <mutant id="mutant_2021" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="offsetInBits / (StringKeyAnalyzer.LENGTH)" to="offsetInBits - (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_462" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.recalcHeight()" from="(Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) + 1" to="(Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) * 1" />
    <mutant id="mutant_463" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.recalcHeight()" from="(Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) + 1" to="1" />
    <mutant id="mutant_464" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.recalcHeight()" from="(Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) + 1" to="(Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) / 1" />
    <mutant id="mutant_465" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.recalcHeight()" from="(Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))) + 1" to="Math.max(((getLeftSubTree()) == null ? -1 : getLeftSubTree().height), ((getRightSubTree()) == null ? -1 : getRightSubTree().height))" />
    <mutant id="mutant_460" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="getOffset(movedNode)" />
    <mutant id="mutant_2028" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="(lengthInBits + (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_461" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateRight()" from="(getOffset(newTop)) + (getOffset(movedNode))" to="(getOffset(newTop)) / (getOffset(movedNode))" />
    <mutant id="mutant_2029" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="(StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_477" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (right.relativePosition))" to="right.relativePosition" />
    <mutant id="mutant_478" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (right.relativePosition))" to="index" />
    <mutant id="mutant_479" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (right.relativePosition))" to="(index % (right.relativePosition))" />
    <mutant id="mutant_1171" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" />
    <mutant id="mutant_1172" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="&quot; size=&quot;" />
    <mutant id="mutant_1170" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) % &quot; size=&quot;)" />
    <mutant id="mutant_1168" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) / value)" />
    <mutant id="mutant_2015" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits % (StringKeyAnalyzer.LENGTH))" to="(otherLengthInBits * (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2499" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="(x + start1)" />
    <mutant id="mutant_1169" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) - value)" />
    <mutant id="mutant_2016" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="offsetInBits / (StringKeyAnalyzer.LENGTH)" to="offsetInBits + (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_1166" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) % value)" />
    <mutant id="mutant_2013" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits % (StringKeyAnalyzer.LENGTH))" to="(otherLengthInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2497" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="start1" />
    <mutant id="mutant_1167" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="value" />
    <mutant id="mutant_2014" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits % (StringKeyAnalyzer.LENGTH))" to="(otherLengthInBits + (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2498" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="(x % start1)" />
    <mutant id="mutant_1164" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" />
    <mutant id="mutant_2011" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits % (StringKeyAnalyzer.LENGTH))" to="otherLengthInBits" />
    <mutant id="mutant_2495" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="(x * start1)" />
    <mutant id="mutant_1165" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) * value)" />
    <mutant id="mutant_2012" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits % (StringKeyAnalyzer.LENGTH))" to="(StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2496" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="(x / start1)" />
    <mutant id="mutant_1162" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) - &quot; value=&quot;)" />
    <mutant id="mutant_2493" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[i]) - 1" to="(vUp[i]) + 1" />
    <mutant id="mutant_1163" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) * &quot; value=&quot;)" />
    <mutant id="mutant_2010" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherLengthInBits % (StringKeyAnalyzer.LENGTH))" to="(otherLengthInBits - (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2494" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[i]) - 1" to="(vUp[i]) / 1" />
    <mutant id="mutant_473" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (left.relativePosition))" to="(index % (left.relativePosition))" />
    <mutant id="mutant_474" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (right.relativePosition))" to="(index * (right.relativePosition))" />
    <mutant id="mutant_475" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (right.relativePosition))" to="(index / (right.relativePosition))" />
    <mutant id="mutant_476" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (right.relativePosition))" to="(index - (right.relativePosition))" />
    <mutant id="mutant_2019" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="offsetInBits / (StringKeyAnalyzer.LENGTH)" to="offsetInBits" />
    <mutant id="mutant_470" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (left.relativePosition))" to="(index - (left.relativePosition))" />
    <mutant id="mutant_471" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (left.relativePosition))" to="left.relativePosition" />
    <mutant id="mutant_2017" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="offsetInBits / (StringKeyAnalyzer.LENGTH)" to="offsetInBits % (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_472" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.toArray(java.lang.Object[],int)" from="(index + (left.relativePosition))" to="index" />
    <mutant id="mutant_2018" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="offsetInBits / (StringKeyAnalyzer.LENGTH)" to="StringKeyAnalyzer.LENGTH" />
    <mutant id="mutant_488" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="(&quot;No element at index &quot; + (nextIndex))" />
    <mutant id="mutant_489" viable="false" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="((&quot;No element at index &quot; + (nextIndex)) % &quot;.&quot;)" />
    <mutant id="mutant_2095" viable="true" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;) + (value)" to="(key) + &quot;=&quot;" />
    <mutant id="mutant_2096" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;) + (value)" to="value" />
    <mutant id="mutant_2093" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;)" to="(key)" />
    <mutant id="mutant_2094" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;) + (value)" to="((key) + &quot;=&quot;) / (value)" />
    <mutant id="mutant_2091" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;)" to="((key) * &quot;=&quot;)" />
    <mutant id="mutant_2092" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;)" to="((key) / &quot;=&quot;)" />
    <mutant id="mutant_2090" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;)" to="((key) - &quot;=&quot;)" />
    <mutant id="mutant_2088" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;)" to="((key) % &quot;=&quot;)" />
    <mutant id="mutant_2089" viable="true" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;)" to="&quot;=&quot;" />
    <mutant id="mutant_2086" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)" from="(key.length()) * (StringKeyAnalyzer.LENGTH)" to="(key.length()) - (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2087" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)" from="(key.length()) * (StringKeyAnalyzer.LENGTH)" to="(key.length()) % (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_484" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="(nextIndex)" />
    <mutant id="mutant_485" viable="false" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="(&quot;No element at index &quot; % (nextIndex))" />
    <mutant id="mutant_486" viable="false" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="((&quot;No element at index &quot; + (nextIndex)) / &quot;.&quot;)" />
    <mutant id="mutant_487" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="&quot;.&quot;" />
    <mutant id="mutant_480" viable="false" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="(&quot;No element at index &quot; * (nextIndex))" />
    <mutant id="mutant_481" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="&quot;No element at index &quot;" />
    <mutant id="mutant_482" viable="false" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="(&quot;No element at index &quot; - (nextIndex))" />
    <mutant id="mutant_483" viable="false" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="(&quot;No element at index &quot; / (nextIndex))" />
    <mutant id="mutant_499" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previousIndex()" from="(nextIndex()) - 1" to="(nextIndex()) * 1" />
    <mutant id="mutant_2084" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)" from="(key.length()) * (StringKeyAnalyzer.LENGTH)" to="(key.length()) / (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2085" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)" from="(key.length()) * (StringKeyAnalyzer.LENGTH)" to="(key.length()) + (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2082" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)" from="(key.length()) * (StringKeyAnalyzer.LENGTH)" to="key.length()" />
    <mutant id="mutant_2083" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)" from="(key.length()) * (StringKeyAnalyzer.LENGTH)" to="StringKeyAnalyzer.LENGTH" />
    <mutant id="mutant_2080" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) - (StringKeyAnalyzer.LENGTH)" to="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) * (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2081" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) - (StringKeyAnalyzer.LENGTH)" to="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) + (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2079" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) - (StringKeyAnalyzer.LENGTH)" to="(i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))" />
    <mutant id="mutant_490" viable="false" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="((&quot;No element at index &quot; + (nextIndex)) * &quot;.&quot;)" />
    <mutant id="mutant_2077" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) - (StringKeyAnalyzer.LENGTH)" to="StringKeyAnalyzer.LENGTH" />
    <mutant id="mutant_2078" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) - (StringKeyAnalyzer.LENGTH)" to="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) % (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2075" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x)))" to="((i * (StringKeyAnalyzer.LENGTH)) - (Integer.numberOfLeadingZeros(x)))" />
    <mutant id="mutant_2076" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) - (StringKeyAnalyzer.LENGTH)" to="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x))) / (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_495" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previous()" from="((nextIndex) - 1)" to="((nextIndex) / 1)" />
    <mutant id="mutant_496" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previous()" from="((nextIndex) - 1)" to="((nextIndex) % 1)" />
    <mutant id="mutant_497" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previous()" from="((nextIndex) - 1)" to="nextIndex" />
    <mutant id="mutant_498" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previousIndex()" from="(nextIndex()) - 1" to="1" />
    <mutant id="mutant_491" viable="false" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="((&quot;No element at index &quot; + (nextIndex)) - &quot;.&quot;)" />
    <mutant id="mutant_492" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previous()" from="((nextIndex) - 1)" to="((nextIndex) + 1)" />
    <mutant id="mutant_493" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previous()" from="((nextIndex) - 1)" to="1" />
    <mutant id="mutant_494" viable="true" in="org.apache.commons.collections4.list.TreeList$TreeListIterator.previous()" from="((nextIndex) - 1)" to="((nextIndex) * 1)" />
    <mutant id="mutant_2073" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x)))" to="((i * (StringKeyAnalyzer.LENGTH)) % (Integer.numberOfLeadingZeros(x)))" />
    <mutant id="mutant_2074" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x)))" to="(Integer.numberOfLeadingZeros(x))" />
    <mutant id="mutant_2071" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x)))" to="(i * (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2072" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x)))" to="((i * (StringKeyAnalyzer.LENGTH)) * (Integer.numberOfLeadingZeros(x)))" />
    <mutant id="mutant_2070" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="((i * (StringKeyAnalyzer.LENGTH)) + (Integer.numberOfLeadingZeros(x)))" to="((i * (StringKeyAnalyzer.LENGTH)) / (Integer.numberOfLeadingZeros(x)))" />
    <mutant id="mutant_2068" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(i * (StringKeyAnalyzer.LENGTH))" to="(i + (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2069" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(i * (StringKeyAnalyzer.LENGTH))" to="(i - (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2066" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(i * (StringKeyAnalyzer.LENGTH))" to="(i / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2067" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(i * (StringKeyAnalyzer.LENGTH))" to="(i % (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2064" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(i * (StringKeyAnalyzer.LENGTH))" to="(StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2065" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(i * (StringKeyAnalyzer.LENGTH))" to="i" />
    <mutant id="mutant_2062" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + i" to="beginIndex2" />
    <mutant id="mutant_2063" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + i" to="beginIndex2 - i" />
    <mutant id="mutant_2060" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + i" to="beginIndex2 % i" />
    <mutant id="mutant_2061" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + i" to="beginIndex2 * i" />
    <mutant id="mutant_2059" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + i" to="beginIndex2 / i" />
    <mutant id="mutant_2057" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + i" to="beginIndex1 % i" />
    <mutant id="mutant_2058" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex2 + i" to="i" />
    <mutant id="mutant_2055" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + i" to="beginIndex1 * i" />
    <mutant id="mutant_2056" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + i" to="beginIndex1 / i" />
    <mutant id="mutant_2053" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + i" to="i" />
    <mutant id="mutant_2054" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="beginIndex1 + i" to="beginIndex1 - i" />
    <mutant id="mutant_2099" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;) + (value)" to="((key) + &quot;=&quot;) * (value)" />
    <mutant id="mutant_2097" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;) + (value)" to="((key) + &quot;=&quot;) % (value)" />
    <mutant id="mutant_2098" viable="false" in="org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry.toString()" from="((key) + &quot;=&quot;) + (value)" to="((key) + &quot;=&quot;) - (value)" />
    <mutant id="mutant_1630" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) - (getValue()))" />
    <mutant id="mutant_1631" viable="true" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(getValue())" />
    <mutant id="mutant_1638" viable="true" in="org.apache.commons.collections4.iterators.FilterListIterator.previousIndex()" from="(nextIndex) - 1" to="1" />
    <mutant id="mutant_1639" viable="true" in="org.apache.commons.collections4.iterators.FilterListIterator.previousIndex()" from="(nextIndex) - 1" to="(nextIndex) / 1" />
    <mutant id="mutant_1636" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) % &quot;]&quot;" />
    <mutant id="mutant_1637" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) - &quot;]&quot;" />
    <mutant id="mutant_1634" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) * &quot;]&quot;" />
    <mutant id="mutant_1635" viable="true" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())" />
    <mutant id="mutant_1632" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) / &quot;]&quot;" />
    <mutant id="mutant_1633" viable="true" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_1629" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) * (getValue()))" />
    <mutant id="mutant_1620" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;MapIterator[&quot; + (getKey())) % &quot;=&quot;)" />
    <mutant id="mutant_1627" viable="true" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" />
    <mutant id="mutant_1628" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) / (getValue()))" />
    <mutant id="mutant_1625" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;MapIterator[&quot; + (getKey())) * &quot;=&quot;)" />
    <mutant id="mutant_1626" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;) % (getValue()))" />
    <mutant id="mutant_1623" viable="true" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="(&quot;MapIterator[&quot; + (getKey()))" />
    <mutant id="mutant_1624" viable="true" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="&quot;=&quot;" />
    <mutant id="mutant_1621" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;MapIterator[&quot; + (getKey())) / &quot;=&quot;)" />
    <mutant id="mutant_1622" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="((&quot;MapIterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;MapIterator[&quot; + (getKey())) - &quot;=&quot;)" />
    <mutant id="mutant_1618" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(&quot;MapIterator[&quot; * (getKey()))" />
    <mutant id="mutant_1619" viable="true" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(getKey())" />
    <mutant id="mutant_1616" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(&quot;MapIterator[&quot; % (getKey()))" />
    <mutant id="mutant_1617" viable="true" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="&quot;MapIterator[&quot;" />
    <mutant id="mutant_1614" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(&quot;MapIterator[&quot; / (getKey()))" />
    <mutant id="mutant_1615" viable="false" in="org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()" from="(&quot;MapIterator[&quot; + (getKey()))" to="(&quot;MapIterator[&quot; - (getKey()))" />
    <mutant id="mutant_1612" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="(((pos) - (offset)) + 1)" to="(((pos) - (offset)) % 1)" />
    <mutant id="mutant_1613" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="(((pos) - (offset)) + 1)" to="(((pos) - (offset)) * 1)" />
    <mutant id="mutant_1610" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="(((pos) - (offset)) + 1)" to="(((pos) - (offset)) - 1)" />
    <mutant id="mutant_1611" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="(((pos) - (offset)) + 1)" to="((pos) - (offset))" />
    <mutant id="mutant_1609" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="(((pos) - (offset)) + 1)" to="1" />
    <mutant id="mutant_1607" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="((pos) - (offset))" to="(offset)" />
    <mutant id="mutant_1608" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="(((pos) - (offset)) + 1)" to="(((pos) - (offset)) / 1)" />
    <mutant id="mutant_1605" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="((pos) - (offset))" to="((pos) + (offset))" />
    <mutant id="mutant_1606" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="((pos) - (offset))" to="(pos)" />
    <mutant id="mutant_1603" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="((pos) - (offset))" to="((pos) % (offset))" />
    <mutant id="mutant_1604" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="((pos) - (offset))" to="((pos) * (offset))" />
    <mutant id="mutant_1601" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex)) - 1" to="((this.index) - (this.startIndex)) % 1" />
    <mutant id="mutant_1602" viable="true" in="org.apache.commons.collections4.iterators.BoundedIterator.checkBounds()" from="((pos) - (offset))" to="((pos) / (offset))" />
    <mutant id="mutant_1600" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex)) - 1" to="((this.index) - (this.startIndex)) + 1" />
    <mutant id="mutant_800" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) * (last.getValue()))" />
    <mutant id="mutant_801" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="(last.getValue())" />
    <mutant id="mutant_802" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" />
    <mutant id="mutant_803" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) / (last.getValue()))" />
    <mutant id="mutant_808" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) - &quot;]&quot;" />
    <mutant id="mutant_809" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) / &quot;]&quot;" />
    <mutant id="mutant_804" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())" />
    <mutant id="mutant_805" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) * &quot;]&quot;" />
    <mutant id="mutant_806" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) % &quot;]&quot;" />
    <mutant id="mutant_807" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_1674" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex()))" to="(getStartIndex())" />
    <mutant id="mutant_2521" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + delta)" to="delta" />
    <mutant id="mutant_1675" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex()))" to="((this.index) + (getStartIndex()))" />
    <mutant id="mutant_2522" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + delta)" to="(i - delta)" />
    <mutant id="mutant_1672" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.nextIndex()" from="(this.index) - (getStartIndex())" to="(this.index) * (getStartIndex())" />
    <mutant id="mutant_1673" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.nextIndex()" from="(this.index) - (getStartIndex())" to="this.index" />
    <mutant id="mutant_2520" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + delta)" to="i" />
    <mutant id="mutant_1670" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.nextIndex()" from="(this.index) - (getStartIndex())" to="(this.index) % (getStartIndex())" />
    <mutant id="mutant_1671" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.nextIndex()" from="(this.index) - (getStartIndex())" to="(this.index) / (getStartIndex())" />
    <mutant id="mutant_2529" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="start1" />
    <mutant id="mutant_2527" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="(k - start1)" />
    <mutant id="mutant_2528" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="(k % start1)" />
    <mutant id="mutant_1678" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex()))" to="((this.index) * (getStartIndex()))" />
    <mutant id="mutant_2525" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="(k * start1)" />
    <mutant id="mutant_1679" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex()))" to="(this.index)" />
    <mutant id="mutant_2526" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="k" />
    <mutant id="mutant_1676" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex()))" to="((this.index) % (getStartIndex()))" />
    <mutant id="mutant_2523" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + delta)" to="(i % delta)" />
    <mutant id="mutant_1677" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex()))" to="((this.index) / (getStartIndex()))" />
    <mutant id="mutant_2524" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + delta)" to="(i / delta)" />
    <mutant id="mutant_811" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; * index)" />
    <mutant id="mutant_812" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; % index)" />
    <mutant id="mutant_813" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; - index)" />
    <mutant id="mutant_814" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="&quot;Index &quot;" />
    <mutant id="mutant_810" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; / index)" />
    <mutant id="mutant_819" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is less than zero&quot;)" to="((&quot;Index &quot; + index) - &quot; is less than zero&quot;)" />
    <mutant id="mutant_815" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="index" />
    <mutant id="mutant_816" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is less than zero&quot;)" to="((&quot;Index &quot; + index) / &quot; is less than zero&quot;)" />
    <mutant id="mutant_817" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is less than zero&quot;)" to="((&quot;Index &quot; + index) * &quot; is less than zero&quot;)" />
    <mutant id="mutant_818" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is less than zero&quot;)" to="((&quot;Index &quot; + index) % &quot; is less than zero&quot;)" />
    <mutant id="mutant_1663" viable="true" in="org.apache.commons.collections4.iterators.LoopingListIterator.previousIndex()" from="(list.size()) - 1" to="1" />
    <mutant id="mutant_2510" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="((x - start1) + start2) + k" />
    <mutant id="mutant_1664" viable="true" in="org.apache.commons.collections4.iterators.LoopingListIterator.previousIndex()" from="(list.size()) - 1" to="(list.size()) % 1" />
    <mutant id="mutant_2511" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="((x - start1) + start2) % k" />
    <mutant id="mutant_1661" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.remove()" from="((wrappedIteratorIndex) - (currentIndex))" to="(currentIndex)" />
    <mutant id="mutant_1662" viable="true" in="org.apache.commons.collections4.iterators.LoopingListIterator.previousIndex()" from="(list.size()) - 1" to="(list.size()) / 1" />
    <mutant id="mutant_1660" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.remove()" from="((wrappedIteratorIndex) - (currentIndex))" to="(wrappedIteratorIndex)" />
    <mutant id="mutant_2518" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="(delta + 2)" />
    <mutant id="mutant_2519" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + delta)" to="(i * delta)" />
    <mutant id="mutant_1669" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.nextIndex()" from="(this.index) - (getStartIndex())" to="(this.index) + (getStartIndex())" />
    <mutant id="mutant_2516" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="(delta * 2)" />
    <mutant id="mutant_2517" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="(delta - 2)" />
    <mutant id="mutant_1667" viable="true" in="org.apache.commons.collections4.iterators.LoopingListIterator.previousIndex()" from="(list.size()) - 1" to="(list.size()) + 1" />
    <mutant id="mutant_2514" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="(delta / 2)" />
    <mutant id="mutant_1668" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.nextIndex()" from="(this.index) - (getStartIndex())" to="getStartIndex()" />
    <mutant id="mutant_2515" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="delta" />
    <mutant id="mutant_1665" viable="true" in="org.apache.commons.collections4.iterators.LoopingListIterator.previousIndex()" from="(list.size()) - 1" to="(list.size()) * 1" />
    <mutant id="mutant_2512" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="(x - start1) + start2" />
    <mutant id="mutant_1666" viable="true" in="org.apache.commons.collections4.iterators.LoopingListIterator.previousIndex()" from="(list.size()) - 1" to="list.size()" />
    <mutant id="mutant_2513" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="2" />
    <mutant id="mutant_822" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; / index)" />
    <mutant id="mutant_823" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; * index)" />
    <mutant id="mutant_824" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; % index)" />
    <mutant id="mutant_825" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; - index)" />
    <mutant id="mutant_820" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is less than zero&quot;)" to="&quot; is less than zero&quot;" />
    <mutant id="mutant_2509" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="((x - start1) + start2) * k" />
    <mutant id="mutant_821" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is less than zero&quot;)" to="(&quot;Index &quot; + index)" />
    <mutant id="mutant_826" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="&quot;Index &quot;" />
    <mutant id="mutant_827" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(&quot;Index &quot; + index)" to="index" />
    <mutant id="mutant_828" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is invalid for size &quot;)" to="((&quot;Index &quot; + index) * &quot; is invalid for size &quot;)" />
    <mutant id="mutant_829" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is invalid for size &quot;)" to="((&quot;Index &quot; + index) % &quot; is invalid for size &quot;)" />
    <mutant id="mutant_1652" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.previousIndex()" from="(currentIndex) - 1" to="(currentIndex) * 1" />
    <mutant id="mutant_1653" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.previousIndex()" from="(currentIndex) - 1" to="(currentIndex) + 1" />
    <mutant id="mutant_2500" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="x" />
    <mutant id="mutant_1650" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.previousIndex()" from="(currentIndex) - 1" to="1" />
    <mutant id="mutant_1651" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.previousIndex()" from="(currentIndex) - 1" to="(currentIndex) / 1" />
    <mutant id="mutant_2507" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="k" />
    <mutant id="mutant_2508" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="((x - start1) + start2) / k" />
    <mutant id="mutant_1658" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.remove()" from="((wrappedIteratorIndex) - (currentIndex))" to="((wrappedIteratorIndex) / (currentIndex))" />
    <mutant id="mutant_2505" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="((x - start1) % start2)" />
    <mutant id="mutant_1659" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.remove()" from="((wrappedIteratorIndex) - (currentIndex))" to="((wrappedIteratorIndex) * (currentIndex))" />
    <mutant id="mutant_2506" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="((x - start1) / start2)" />
    <mutant id="mutant_1656" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.remove()" from="((wrappedIteratorIndex) - (currentIndex))" to="((wrappedIteratorIndex) % (currentIndex))" />
    <mutant id="mutant_2503" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="start2" />
    <mutant id="mutant_1657" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.remove()" from="((wrappedIteratorIndex) - (currentIndex))" to="((wrappedIteratorIndex) + (currentIndex))" />
    <mutant id="mutant_2504" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="((x - start1) * start2)" />
    <mutant id="mutant_1654" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.previousIndex()" from="(currentIndex) - 1" to="(currentIndex) % 1" />
    <mutant id="mutant_2501" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="(x - start1)" />
    <mutant id="mutant_1655" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.previousIndex()" from="(currentIndex) - 1" to="currentIndex" />
    <mutant id="mutant_2502" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="((x - start1) - start2)" />
    <mutant id="mutant_833" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is invalid for size &quot;)" to="((&quot;Index &quot; + index) - &quot; is invalid for size &quot;)" />
    <mutant id="mutant_834" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) + (size))" to="((&quot;Index &quot; + index) + &quot; is invalid for size &quot;)" />
    <mutant id="mutant_835" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) + (size))" to="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) - (size))" />
    <mutant id="mutant_836" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) + (size))" to="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) % (size))" />
    <mutant id="mutant_830" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is invalid for size &quot;)" to="&quot; is invalid for size &quot;" />
    <mutant id="mutant_831" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is invalid for size &quot;)" to="(&quot;Index &quot; + index)" />
    <mutant id="mutant_832" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((&quot;Index &quot; + index) + &quot; is invalid for size &quot;)" to="((&quot;Index &quot; + index) / &quot; is invalid for size &quot;)" />
    <mutant id="mutant_837" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) + (size))" to="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) / (size))" />
    <mutant id="mutant_838" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) + (size))" to="size" />
    <mutant id="mutant_839" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) + (size))" to="(((&quot;Index &quot; + index) + &quot; is invalid for size &quot;) * (size))" />
    <mutant id="mutant_1641" viable="true" in="org.apache.commons.collections4.iterators.FilterListIterator.previousIndex()" from="(nextIndex) - 1" to="(nextIndex) * 1" />
    <mutant id="mutant_1642" viable="true" in="org.apache.commons.collections4.iterators.FilterListIterator.previousIndex()" from="(nextIndex) - 1" to="(nextIndex) + 1" />
    <mutant id="mutant_1640" viable="true" in="org.apache.commons.collections4.iterators.FilterListIterator.previousIndex()" from="(nextIndex) - 1" to="nextIndex" />
    <mutant id="mutant_1649" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.next()" from="((currentIndex) - 1)" to="currentIndex" />
    <mutant id="mutant_1647" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.next()" from="((currentIndex) - 1)" to="((currentIndex) + 1)" />
    <mutant id="mutant_1648" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.next()" from="((currentIndex) - 1)" to="((currentIndex) % 1)" />
    <mutant id="mutant_1645" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.next()" from="((currentIndex) - 1)" to="((currentIndex) / 1)" />
    <mutant id="mutant_1646" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.next()" from="((currentIndex) - 1)" to="((currentIndex) * 1)" />
    <mutant id="mutant_1643" viable="true" in="org.apache.commons.collections4.iterators.FilterListIterator.previousIndex()" from="(nextIndex) - 1" to="(nextIndex) % 1" />
    <mutant id="mutant_1644" viable="true" in="org.apache.commons.collections4.iterators.ListIteratorWrapper.next()" from="((currentIndex) - 1)" to="1" />
    <mutant id="mutant_844" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((size) / 2)" to="((size) + 2)" />
    <mutant id="mutant_845" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((size) / 2)" to="(size)" />
    <mutant id="mutant_846" viable="true" in="org.apache.commons.collections4.map.CaseInsensitiveMap.convertKey(java.lang.Object)" from="(chars.length) - 1" to="(chars.length) / 1" />
    <mutant id="mutant_847" viable="true" in="org.apache.commons.collections4.map.CaseInsensitiveMap.convertKey(java.lang.Object)" from="(chars.length) - 1" to="1" />
    <mutant id="mutant_840" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((size) / 2)" to="((size) - 2)" />
    <mutant id="mutant_841" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((size) / 2)" to="2" />
    <mutant id="mutant_842" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((size) / 2)" to="((size) % 2)" />
    <mutant id="mutant_843" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap.getEntry(int)" from="((size) / 2)" to="((size) * 2)" />
    <mutant id="mutant_848" viable="true" in="org.apache.commons.collections4.map.CaseInsensitiveMap.convertKey(java.lang.Object)" from="(chars.length) - 1" to="(chars.length) % 1" />
    <mutant id="mutant_849" viable="true" in="org.apache.commons.collections4.map.CaseInsensitiveMap.convertKey(java.lang.Object)" from="(chars.length) - 1" to="(chars.length) * 1" />
    <mutant id="mutant_1234" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;)" to="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) - &quot; previous=&quot;)" />
    <mutant id="mutant_2565" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getStart()) - (middle.getDiag()))" to="((middle.getStart()) / (middle.getDiag()))" />
    <mutant id="mutant_1235" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;)" to="(&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex]))" />
    <mutant id="mutant_2566" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getStart()) - (middle.getDiag()))" to="((middle.getStart()) + (middle.getDiag()))" />
    <mutant id="mutant_1232" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;)" to="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) % &quot; previous=&quot;)" />
    <mutant id="mutant_2563" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getStart()) - (middle.getDiag()))" to="middle.getDiag()" />
    <mutant id="mutant_1233" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;)" to="&quot; previous=&quot;" />
    <mutant id="mutant_2564" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getStart()) - (middle.getDiag()))" to="middle.getStart()" />
    <mutant id="mutant_1230" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;)" to="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) / &quot; previous=&quot;)" />
    <mutant id="mutant_2561" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getStart()) - (middle.getDiag()))" to="((middle.getStart()) % (middle.getDiag()))" />
    <mutant id="mutant_1231" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;)" to="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) * &quot; previous=&quot;)" />
    <mutant id="mutant_2562" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getStart()) - (middle.getDiag()))" to="((middle.getStart()) * (middle.getDiag()))" />
    <mutant id="mutant_2560" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end2 - start2)" to="start2" />
    <mutant id="mutant_1238" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous)" to="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) % previous)" />
    <mutant id="mutant_2569" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getEnd()) - (middle.getDiag()))" to="((middle.getEnd()) % (middle.getDiag()))" />
    <mutant id="mutant_1239" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous)" to="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) * previous)" />
    <mutant id="mutant_1236" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous)" to="((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;)" />
    <mutant id="mutant_2567" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getEnd()) - (middle.getDiag()))" to="((middle.getEnd()) / (middle.getDiag()))" />
    <mutant id="mutant_1237" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous)" to="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) / previous)" />
    <mutant id="mutant_2568" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getEnd()) - (middle.getDiag()))" to="middle.getDiag()" />
    <mutant id="mutant_855" viable="true" in="org.apache.commons.collections4.map.CompositeMap(java.util.Map[],org.apache.commons.collections4.map.CompositeMap$MapMutator)" from="(composite.length) - 1" to="(composite.length) * 1" />
    <mutant id="mutant_856" viable="true" in="org.apache.commons.collections4.map.CompositeMap(java.util.Map[],org.apache.commons.collections4.map.CompositeMap$MapMutator)" from="(composite.length) - 1" to="(composite.length) + 1" />
    <mutant id="mutant_857" viable="true" in="org.apache.commons.collections4.map.CompositeMap(java.util.Map[],org.apache.commons.collections4.map.CompositeMap$MapMutator)" from="(composite.length) - 1" to="composite.length" />
    <mutant id="mutant_858" viable="true" in="org.apache.commons.collections4.map.CompositeMap.get(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) / 1" />
    <mutant id="mutant_851" viable="true" in="org.apache.commons.collections4.map.CaseInsensitiveMap.convertKey(java.lang.Object)" from="(chars.length) - 1" to="chars.length" />
    <mutant id="mutant_852" viable="true" in="org.apache.commons.collections4.map.CompositeMap(java.util.Map[],org.apache.commons.collections4.map.CompositeMap$MapMutator)" from="(composite.length) - 1" to="(composite.length) / 1" />
    <mutant id="mutant_853" viable="true" in="org.apache.commons.collections4.map.CompositeMap(java.util.Map[],org.apache.commons.collections4.map.CompositeMap$MapMutator)" from="(composite.length) - 1" to="1" />
    <mutant id="mutant_854" viable="true" in="org.apache.commons.collections4.map.CompositeMap(java.util.Map[],org.apache.commons.collections4.map.CompositeMap$MapMutator)" from="(composite.length) - 1" to="(composite.length) % 1" />
    <mutant id="mutant_859" viable="true" in="org.apache.commons.collections4.map.CompositeMap.get(java.lang.Object)" from="(this.composite.length) - 1" to="1" />
    <mutant id="mutant_1223" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Can\'t move header to MRU&quot; + &quot; (please report this to dev@commons.apache.org)&quot;)" to="(&quot;Can\'t move header to MRU&quot; / &quot; (please report this to dev@commons.apache.org)&quot;)" />
    <mutant id="mutant_2554" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - start1)" to="(end1 * start1)" />
    <mutant id="mutant_1224" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex]))" to="(&quot;Entry.next=null, data[removeIndex]=&quot; / (data[removeIndex]))" />
    <mutant id="mutant_2555" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end2 - start2)" to="(end2 * start2)" />
    <mutant id="mutant_1221" viable="true" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Can\'t move header to MRU&quot; + &quot; (please report this to dev@commons.apache.org)&quot;)" to="&quot; (please report this to dev@commons.apache.org)&quot;" />
    <mutant id="mutant_2552" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - start1)" to="(end1 % start1)" />
    <mutant id="mutant_1222" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Can\'t move header to MRU&quot; + &quot; (please report this to dev@commons.apache.org)&quot;)" to="(&quot;Can\'t move header to MRU&quot; % &quot; (please report this to dev@commons.apache.org)&quot;)" />
    <mutant id="mutant_2553" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - start1)" to="end1" />
    <mutant id="mutant_2550" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - start1)" to="start1" />
    <mutant id="mutant_1220" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Can\'t move header to MRU&quot; + &quot; (please report this to dev@commons.apache.org)&quot;)" to="(&quot;Can\'t move header to MRU&quot; * &quot; (please report this to dev@commons.apache.org)&quot;)" />
    <mutant id="mutant_2551" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - start1)" to="(end1 / start1)" />
    <mutant id="mutant_1229" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex]))" to="(data[removeIndex])" />
    <mutant id="mutant_850" viable="true" in="org.apache.commons.collections4.map.CaseInsensitiveMap.convertKey(java.lang.Object)" from="(chars.length) - 1" to="(chars.length) + 1" />
    <mutant id="mutant_1227" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex]))" to="(&quot;Entry.next=null, data[removeIndex]=&quot; * (data[removeIndex]))" />
    <mutant id="mutant_2558" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end2 - start2)" to="(end2 % start2)" />
    <mutant id="mutant_1228" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex]))" to="(&quot;Entry.next=null, data[removeIndex]=&quot; - (data[removeIndex]))" />
    <mutant id="mutant_2559" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end2 - start2)" to="end2" />
    <mutant id="mutant_1225" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex]))" to="(&quot;Entry.next=null, data[removeIndex]=&quot; % (data[removeIndex]))" />
    <mutant id="mutant_2556" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end2 - start2)" to="(end2 + start2)" />
    <mutant id="mutant_1226" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex]))" to="&quot;Entry.next=null, data[removeIndex]=&quot;" />
    <mutant id="mutant_2557" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end2 - start2)" to="(end2 / start2)" />
    <mutant id="mutant_866" viable="true" in="org.apache.commons.collections4.map.CompositeMap.remove(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) % 1" />
    <mutant id="mutant_867" viable="true" in="org.apache.commons.collections4.map.CompositeMap.remove(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) * 1" />
    <mutant id="mutant_868" viable="true" in="org.apache.commons.collections4.map.CompositeMap.remove(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) + 1" />
    <mutant id="mutant_869" viable="true" in="org.apache.commons.collections4.map.CompositeMap.remove(java.lang.Object)" from="(this.composite.length) - 1" to="this.composite.length" />
    <mutant id="mutant_862" viable="true" in="org.apache.commons.collections4.map.CompositeMap.get(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) + 1" />
    <mutant id="mutant_863" viable="true" in="org.apache.commons.collections4.map.CompositeMap.get(java.lang.Object)" from="(this.composite.length) - 1" to="this.composite.length" />
    <mutant id="mutant_864" viable="true" in="org.apache.commons.collections4.map.CompositeMap.remove(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) / 1" />
    <mutant id="mutant_865" viable="true" in="org.apache.commons.collections4.map.CompositeMap.remove(java.lang.Object)" from="(this.composite.length) - 1" to="1" />
    <mutant id="mutant_1212" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Entry.before is null.&quot; + (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;))" to="(&quot;Entry.before is null.&quot; - (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;))" />
    <mutant id="mutant_1696" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="((keys.length) - 1)" to="((keys.length) + 1)" />
    <mutant id="mutant_2543" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(start1 - start2)" to="start1" />
    <mutant id="mutant_1213" viable="true" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Entry.before is null.&quot; + (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;))" to="&quot;Entry.before is null.&quot;" />
    <mutant id="mutant_1697" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="((keys.length) - 1)" to="(keys.length)" />
    <mutant id="mutant_2544" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(start1 - start2)" to="start2" />
    <mutant id="mutant_1210" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; - &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_1694" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="((keys.length) - 1)" to="((keys.length) % 1)" />
    <mutant id="mutant_2541" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - end2)" to="end1" />
    <mutant id="mutant_1211" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; * &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_1695" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="((keys.length) - 1)" to="((keys.length) * 1)" />
    <mutant id="mutant_2542" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - end2)" to="(end1 / end2)" />
    <mutant id="mutant_1692" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="((keys.length) - 1)" to="((keys.length) / 1)" />
    <mutant id="mutant_1693" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="((keys.length) - 1)" to="1" />
    <mutant id="mutant_2540" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - end2)" to="(end1 + end2)" />
    <mutant id="mutant_1690" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator(java.util.Collection)" from="(value - 1)" to="(value + 1)" />
    <mutant id="mutant_1691" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator(java.util.Collection)" from="(value - 1)" to="value" />
    <mutant id="mutant_860" viable="true" in="org.apache.commons.collections4.map.CompositeMap.get(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) % 1" />
    <mutant id="mutant_1218" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Can\'t move header to MRU&quot; + &quot; (please report this to dev@commons.apache.org)&quot;)" to="(&quot;Can\'t move header to MRU&quot; - &quot; (please report this to dev@commons.apache.org)&quot;)" />
    <mutant id="mutant_2549" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - start1)" to="(end1 + start1)" />
    <mutant id="mutant_861" viable="true" in="org.apache.commons.collections4.map.CompositeMap.get(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) * 1" />
    <mutant id="mutant_1219" viable="true" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Can\'t move header to MRU&quot; + &quot; (please report this to dev@commons.apache.org)&quot;)" to="&quot;Can\'t move header to MRU&quot;" />
    <mutant id="mutant_1216" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Entry.before is null.&quot; + (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;))" to="(&quot;Entry.before is null.&quot; % (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;))" />
    <mutant id="mutant_2547" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(start1 - start2)" to="(start1 / start2)" />
    <mutant id="mutant_1217" viable="true" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Entry.before is null.&quot; + (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;))" to="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2548" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(start1 - start2)" to="(start1 % start2)" />
    <mutant id="mutant_1214" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Entry.before is null.&quot; + (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;))" to="(&quot;Entry.before is null.&quot; * (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;))" />
    <mutant id="mutant_1698" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_2545" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(start1 - start2)" to="(start1 * start2)" />
    <mutant id="mutant_1215" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot;Entry.before is null.&quot; + (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;))" to="(&quot;Entry.before is null.&quot; / (&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;))" />
    <mutant id="mutant_1699" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator.next()" from="(i + 1)" to="1" />
    <mutant id="mutant_2546" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(start1 - start2)" to="(start1 + start2)" />
    <mutant id="mutant_877" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsValue(java.lang.Object)" from="(this.composite.length) - 1" to="1" />
    <mutant id="mutant_878" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsValue(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) % 1" />
    <mutant id="mutant_879" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsValue(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) * 1" />
    <mutant id="mutant_873" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsKey(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) * 1" />
    <mutant id="mutant_874" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsKey(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) + 1" />
    <mutant id="mutant_875" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsKey(java.lang.Object)" from="(this.composite.length) - 1" to="this.composite.length" />
    <mutant id="mutant_876" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsValue(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) / 1" />
    <mutant id="mutant_1201" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="&quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;" />
    <mutant id="mutant_1685" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex())) - 1" to="((this.index) - (getStartIndex())) % 1" />
    <mutant id="mutant_2532" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="((k + start1) / start2)" />
    <mutant id="mutant_1202" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_1686" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator(java.util.Collection)" from="(value - 1)" to="1" />
    <mutant id="mutant_2533" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="((k + start1) % start2)" />
    <mutant id="mutant_1683" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex())) - 1" to="(this.index) - (getStartIndex())" />
    <mutant id="mutant_2530" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="(k / start1)" />
    <mutant id="mutant_1200" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) - &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_1684" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex())) - 1" to="((this.index) - (getStartIndex())) + 1" />
    <mutant id="mutant_2531" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="(k + start1)" />
    <mutant id="mutant_1681" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex())) - 1" to="1" />
    <mutant id="mutant_1682" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex())) - 1" to="((this.index) - (getStartIndex())) / 1" />
    <mutant id="mutant_1680" viable="true" in="org.apache.commons.collections4.iterators.ObjectArrayListIterator.previousIndex()" from="((this.index) - (getStartIndex())) - 1" to="((this.index) - (getStartIndex())) * 1" />
    <mutant id="mutant_1209" viable="true" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;" />
    <mutant id="mutant_870" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsKey(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) / 1" />
    <mutant id="mutant_871" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsKey(java.lang.Object)" from="(this.composite.length) - 1" to="1" />
    <mutant id="mutant_1207" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; / &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2538" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - end2)" to="end2" />
    <mutant id="mutant_872" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsKey(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) % 1" />
    <mutant id="mutant_1208" viable="false" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; % &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2539" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - end2)" to="(end1 * end2)" />
    <mutant id="mutant_1205" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) % &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_1689" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator(java.util.Collection)" from="(value - 1)" to="(value * 1)" />
    <mutant id="mutant_2536" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="((k + start1) + start2)" />
    <mutant id="mutant_1206" viable="true" in="org.apache.commons.collections4.map.LRUMap.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)" from="(&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot; + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="&quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;" />
    <mutant id="mutant_2537" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="(end1 - end2)" to="(end1 % end2)" />
    <mutant id="mutant_1203" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) / &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_1687" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator(java.util.Collection)" from="(value - 1)" to="(value % 1)" />
    <mutant id="mutant_2534" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="start2" />
    <mutant id="mutant_1204" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) * &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_1688" viable="true" in="org.apache.commons.collections4.iterators.PermutationIterator(java.util.Collection)" from="(value - 1)" to="(value / 1)" />
    <mutant id="mutant_2535" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="((k + start1) * start2)" />
    <mutant id="mutant_404" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - sParentAbsolutePosition" to="sParentAbsolutePosition" />
    <mutant id="mutant_888" viable="true" in="org.apache.commons.collections4.map.CompositeMap.size()" from="(this.composite.length) - 1" to="(this.composite.length) / 1" />
    <mutant id="mutant_405" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - sParentAbsolutePosition" to="currentSize * sParentAbsolutePosition" />
    <mutant id="mutant_889" viable="true" in="org.apache.commons.collections4.map.CompositeMap.size()" from="(this.composite.length) - 1" to="1" />
    <mutant id="mutant_406" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - sParentAbsolutePosition" to="currentSize" />
    <mutant id="mutant_407" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - sParentAbsolutePosition" to="currentSize + sParentAbsolutePosition" />
    <mutant id="mutant_400" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="sAbsolutePosition - currentSize" to="sAbsolutePosition % currentSize" />
    <mutant id="mutant_884" viable="true" in="org.apache.commons.collections4.map.CompositeMap.isEmpty()" from="(this.composite.length) - 1" to="(this.composite.length) % 1" />
    <mutant id="mutant_401" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="sAbsolutePosition - currentSize" to="currentSize" />
    <mutant id="mutant_885" viable="true" in="org.apache.commons.collections4.map.CompositeMap.isEmpty()" from="(this.composite.length) - 1" to="(this.composite.length) * 1" />
    <mutant id="mutant_402" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - sParentAbsolutePosition" to="currentSize % sParentAbsolutePosition" />
    <mutant id="mutant_886" viable="true" in="org.apache.commons.collections4.map.CompositeMap.isEmpty()" from="(this.composite.length) - 1" to="(this.composite.length) + 1" />
    <mutant id="mutant_403" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - sParentAbsolutePosition" to="currentSize / sParentAbsolutePosition" />
    <mutant id="mutant_887" viable="true" in="org.apache.commons.collections4.map.CompositeMap.isEmpty()" from="(this.composite.length) - 1" to="this.composite.length" />
    <mutant id="mutant_1281" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="&quot; maxSize=&quot;" />
    <mutant id="mutant_1282" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) / &quot; maxSize=&quot;)" />
    <mutant id="mutant_1280" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) - &quot; maxSize=&quot;)" />
    <mutant id="mutant_408" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.get(int)" from="index - (relativePosition)" to="index * (relativePosition)" />
    <mutant id="mutant_409" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.get(int)" from="index - (relativePosition)" to="index + (relativePosition)" />
    <mutant id="mutant_1278" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" />
    <mutant id="mutant_2125" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="&quot;FromKey is out of range: &quot;" />
    <mutant id="mutant_1279" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) * &quot; maxSize=&quot;)" />
    <mutant id="mutant_2126" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="(&quot;FromKey is out of range: &quot; / fromKey)" />
    <mutant id="mutant_1276" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" />
    <mutant id="mutant_2123" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="(&quot;ToKey is out of range: &quot; - toKey)" />
    <mutant id="mutant_1277" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(size)" />
    <mutant id="mutant_2124" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="(&quot;FromKey is out of range: &quot; % fromKey)" />
    <mutant id="mutant_1274" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) - (size))" />
    <mutant id="mutant_2121" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="(&quot;ToKey is out of range: &quot; * toKey)" />
    <mutant id="mutant_1275" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) % (size))" />
    <mutant id="mutant_2122" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="toKey" />
    <mutant id="mutant_1272" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) / (size))" />
    <mutant id="mutant_1273" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) * (size))" />
    <mutant id="mutant_2120" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="(&quot;ToKey is out of range: &quot; / toKey)" />
    <mutant id="mutant_880" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsValue(java.lang.Object)" from="(this.composite.length) - 1" to="(this.composite.length) + 1" />
    <mutant id="mutant_881" viable="true" in="org.apache.commons.collections4.map.CompositeMap.containsValue(java.lang.Object)" from="(this.composite.length) - 1" to="this.composite.length" />
    <mutant id="mutant_882" viable="true" in="org.apache.commons.collections4.map.CompositeMap.isEmpty()" from="(this.composite.length) - 1" to="(this.composite.length) / 1" />
    <mutant id="mutant_883" viable="true" in="org.apache.commons.collections4.map.CompositeMap.isEmpty()" from="(this.composite.length) - 1" to="1" />
    <mutant id="mutant_2129" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="(&quot;FromKey is out of range: &quot; - fromKey)" />
    <mutant id="mutant_2127" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="fromKey" />
    <mutant id="mutant_2128" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="(&quot;FromKey is out of range: &quot; * fromKey)" />
    <mutant id="mutant_415" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.insert(int,E)" from="index - (relativePosition)" to="index + (relativePosition)" />
    <mutant id="mutant_899" viable="true" in="org.apache.commons.collections4.map.CompositeMap.values()" from="(composite.length) - 1" to="composite.length" />
    <mutant id="mutant_416" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.insert(int,E)" from="index - (relativePosition)" to="index / (relativePosition)" />
    <mutant id="mutant_417" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.insert(int,E)" from="index - (relativePosition)" to="relativePosition" />
    <mutant id="mutant_418" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.insert(int,E)" from="index - (relativePosition)" to="index" />
    <mutant id="mutant_411" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.get(int)" from="index - (relativePosition)" to="relativePosition" />
    <mutant id="mutant_895" viable="true" in="org.apache.commons.collections4.map.CompositeMap.values()" from="(composite.length) - 1" to="1" />
    <mutant id="mutant_412" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.get(int)" from="index - (relativePosition)" to="index" />
    <mutant id="mutant_896" viable="true" in="org.apache.commons.collections4.map.CompositeMap.values()" from="(composite.length) - 1" to="(composite.length) % 1" />
    <mutant id="mutant_413" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.get(int)" from="index - (relativePosition)" to="index % (relativePosition)" />
    <mutant id="mutant_897" viable="true" in="org.apache.commons.collections4.map.CompositeMap.values()" from="(composite.length) - 1" to="(composite.length) * 1" />
    <mutant id="mutant_414" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.insert(int,E)" from="index - (relativePosition)" to="index * (relativePosition)" />
    <mutant id="mutant_898" viable="true" in="org.apache.commons.collections4.map.CompositeMap.values()" from="(composite.length) - 1" to="(composite.length) + 1" />
    <mutant id="mutant_1270" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="&quot; size=&quot;" />
    <mutant id="mutant_1271" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) % &quot; size=&quot;)" />
    <mutant id="mutant_419" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.insert(int,E)" from="index - (relativePosition)" to="index % (relativePosition)" />
    <mutant id="mutant_1267" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" />
    <mutant id="mutant_2114" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="(&quot;FromKey is out of range: &quot; / fromKey)" />
    <mutant id="mutant_2598" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start)) + (end)" to="((maxElements) - (start)) % (end)" />
    <mutant id="mutant_1268" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) / &quot; size=&quot;)" />
    <mutant id="mutant_2115" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="fromKey" />
    <mutant id="mutant_2599" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start)) + (end)" to="(maxElements) - (start)" />
    <mutant id="mutant_1265" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) * value)" />
    <mutant id="mutant_2112" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="(&quot;FromKey is out of range: &quot; % fromKey)" />
    <mutant id="mutant_2596" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start))" to="(maxElements)" />
    <mutant id="mutant_1266" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) * &quot; size=&quot;)" />
    <mutant id="mutant_2113" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="&quot;FromKey is out of range: &quot;" />
    <mutant id="mutant_2597" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start)) + (end)" to="((maxElements) - (start)) - (end)" />
    <mutant id="mutant_1263" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) % value)" />
    <mutant id="mutant_2110" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="toKey" />
    <mutant id="mutant_2594" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start))" to="((maxElements) / (start))" />
    <mutant id="mutant_1264" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;)" />
    <mutant id="mutant_2111" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="(&quot;ToKey is out of range: &quot; - toKey)" />
    <mutant id="mutant_2595" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start))" to="((maxElements) * (start))" />
    <mutant id="mutant_1261" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) - value)" />
    <mutant id="mutant_2592" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start))" to="(start)" />
    <mutant id="mutant_1262" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="value" />
    <mutant id="mutant_2593" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start))" to="((maxElements) + (start))" />
    <mutant id="mutant_891" viable="true" in="org.apache.commons.collections4.map.CompositeMap.size()" from="(this.composite.length) - 1" to="(this.composite.length) * 1" />
    <mutant id="mutant_892" viable="true" in="org.apache.commons.collections4.map.CompositeMap.size()" from="(this.composite.length) - 1" to="(this.composite.length) + 1" />
    <mutant id="mutant_893" viable="true" in="org.apache.commons.collections4.map.CompositeMap.size()" from="(this.composite.length) - 1" to="this.composite.length" />
    <mutant id="mutant_410" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.get(int)" from="index - (relativePosition)" to="index / (relativePosition)" />
    <mutant id="mutant_894" viable="true" in="org.apache.commons.collections4.map.CompositeMap.values()" from="(composite.length) - 1" to="(composite.length) / 1" />
    <mutant id="mutant_2118" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="&quot;ToKey is out of range: &quot;" />
    <mutant id="mutant_2119" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="(&quot;ToKey is out of range: &quot; % toKey)" />
    <mutant id="mutant_1269" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) - &quot; size=&quot;)" />
    <mutant id="mutant_2116" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="(&quot;FromKey is out of range: &quot; * fromKey)" />
    <mutant id="mutant_890" viable="true" in="org.apache.commons.collections4.map.CompositeMap.size()" from="(this.composite.length) - 1" to="(this.composite.length) % 1" />
    <mutant id="mutant_2117" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(K,K)" from="(&quot;FromKey is out of range: &quot; + fromKey)" to="(&quot;FromKey is out of range: &quot; - fromKey)" />
    <mutant id="mutant_426" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) + ((relativePosition) &gt; 0 ? 0 : 1)" to="(relativePosition) / ((relativePosition) &gt; 0 ? 0 : 1)" />
    <mutant id="mutant_427" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) + ((relativePosition) &gt; 0 ? 0 : 1)" to="(relativePosition) - ((relativePosition) &gt; 0 ? 0 : 1)" />
    <mutant id="mutant_428" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) + ((relativePosition) &gt; 0 ? 0 : 1)" to="relativePosition" />
    <mutant id="mutant_429" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) + ((relativePosition) &gt; 0 ? 0 : 1)" to="(relativePosition) * ((relativePosition) &gt; 0 ? 0 : 1)" />
    <mutant id="mutant_422" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.remove(int)" from="index - (relativePosition)" to="index / (relativePosition)" />
    <mutant id="mutant_423" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.remove(int)" from="index - (relativePosition)" to="relativePosition" />
    <mutant id="mutant_424" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.remove(int)" from="index - (relativePosition)" to="index" />
    <mutant id="mutant_425" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.remove(int)" from="index - (relativePosition)" to="index % (relativePosition)" />
    <mutant id="mutant_2590" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.decrement(int)" from="(maxElements) - 1" to="maxElements" />
    <mutant id="mutant_1260" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;) / value)" />
    <mutant id="mutant_2591" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.size()" from="((maxElements) - (start))" to="((maxElements) % (start))" />
    <mutant id="mutant_1256" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) * &quot; value=&quot;)" />
    <mutant id="mutant_2103" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(K,V)" from="(&quot;Key is out of range: &quot; + key)" to="key" />
    <mutant id="mutant_2587" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.decrement(int)" from="(maxElements) - 1" to="(maxElements) % 1" />
    <mutant id="mutant_1257" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) % &quot; value=&quot;)" />
    <mutant id="mutant_2104" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(K,V)" from="(&quot;Key is out of range: &quot; + key)" to="(&quot;Key is out of range: &quot; / key)" />
    <mutant id="mutant_2588" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.decrement(int)" from="(maxElements) - 1" to="(maxElements) / 1" />
    <mutant id="mutant_1254" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) / &quot; value=&quot;)" />
    <mutant id="mutant_2101" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(K,V)" from="(&quot;Key is out of range: &quot; + key)" to="&quot;Key is out of range: &quot;" />
    <mutant id="mutant_2585" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.decrement(int)" from="(maxElements) - 1" to="1" />
    <mutant id="mutant_1255" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="&quot; value=&quot;" />
    <mutant id="mutant_2102" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(K,V)" from="(&quot;Key is out of range: &quot; + key)" to="(&quot;Key is out of range: &quot; - key)" />
    <mutant id="mutant_2586" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.decrement(int)" from="(maxElements) - 1" to="(maxElements) * 1" />
    <mutant id="mutant_1252" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key)" to="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) - key)" />
    <mutant id="mutant_2583" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index) % (maxElements)" to="((start) + index) - (maxElements)" />
    <mutant id="mutant_1253" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key)" to="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;)" />
    <mutant id="mutant_2100" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(K,V)" from="(&quot;Key is out of range: &quot; + key)" to="(&quot;Key is out of range: &quot; % key)" />
    <mutant id="mutant_2584" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index) % (maxElements)" to="maxElements" />
    <mutant id="mutant_1250" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key)" to="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) * key)" />
    <mutant id="mutant_2581" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index) % (maxElements)" to="((start) + index) * (maxElements)" />
    <mutant id="mutant_1251" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key)" to="key" />
    <mutant id="mutant_2582" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index) % (maxElements)" to="((start) + index) + (maxElements)" />
    <mutant id="mutant_420" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.remove(int)" from="index - (relativePosition)" to="index * (relativePosition)" />
    <mutant id="mutant_2109" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="(&quot;ToKey is out of range: &quot; * toKey)" />
    <mutant id="mutant_421" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.remove(int)" from="index - (relativePosition)" to="index + (relativePosition)" />
    <mutant id="mutant_2107" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="(&quot;ToKey is out of range: &quot; % toKey)" />
    <mutant id="mutant_2108" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="(&quot;ToKey is out of range: &quot; / toKey)" />
    <mutant id="mutant_1258" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) - &quot; value=&quot;)" />
    <mutant id="mutant_2105" viable="false" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(K,V)" from="(&quot;Key is out of range: &quot; + key)" to="(&quot;Key is out of range: &quot; * key)" />
    <mutant id="mutant_2589" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.decrement(int)" from="(maxElements) - 1" to="(maxElements) + 1" />
    <mutant id="mutant_1259" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key)" />
    <mutant id="mutant_2106" viable="true" in="org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(K)" from="(&quot;ToKey is out of range: &quot; + toKey)" to="&quot;ToKey is out of range: &quot;" />
    <mutant id="mutant_437" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) - ((relativePosition) &lt; 0 ? 0 : 1)" to="(relativePosition) &lt; 0 ? 0 : 1" />
    <mutant id="mutant_438" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(relativePosition) + (getOffset(newTop))" to="(relativePosition) * (getOffset(newTop))" />
    <mutant id="mutant_439" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.rotateLeft()" from="(relativePosition) + (getOffset(newTop))" to="(relativePosition) / (getOffset(newTop))" />
    <mutant id="mutant_433" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) - ((relativePosition) &lt; 0 ? 0 : 1)" to="(relativePosition) + ((relativePosition) &lt; 0 ? 0 : 1)" />
    <mutant id="mutant_434" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) - ((relativePosition) &lt; 0 ? 0 : 1)" to="relativePosition" />
    <mutant id="mutant_435" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) - ((relativePosition) &lt; 0 ? 0 : 1)" to="(relativePosition) * ((relativePosition) &lt; 0 ? 0 : 1)" />
    <mutant id="mutant_436" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) - ((relativePosition) &lt; 0 ? 0 : 1)" to="(relativePosition) % ((relativePosition) &lt; 0 ? 0 : 1)" />
    <mutant id="mutant_2580" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index) % (maxElements)" to="((start) + index) / (maxElements)" />
    <mutant id="mutant_1245" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;)" to="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous)" />
    <mutant id="mutant_2576" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index)" to="(start)" />
    <mutant id="mutant_1246" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;)" to="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) % &quot; key=&quot;)" />
    <mutant id="mutant_2577" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index)" to="index" />
    <mutant id="mutant_1243" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;)" to="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) * &quot; key=&quot;)" />
    <mutant id="mutant_2574" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index)" to="((start) / index)" />
    <mutant id="mutant_1244" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;)" to="&quot; key=&quot;" />
    <mutant id="mutant_2575" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index)" to="((start) - index)" />
    <mutant id="mutant_1241" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous)" to="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) - previous)" />
    <mutant id="mutant_2572" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getEnd()) - (middle.getDiag()))" to="middle.getEnd()" />
    <mutant id="mutant_1242" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;)" to="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) / &quot; key=&quot;)" />
    <mutant id="mutant_2573" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index)" to="((start) % index)" />
    <mutant id="mutant_2570" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getEnd()) - (middle.getDiag()))" to="((middle.getEnd()) * (middle.getDiag()))" />
    <mutant id="mutant_1240" viable="true" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous)" to="previous" />
    <mutant id="mutant_2571" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)" from="((middle.getEnd()) - (middle.getDiag()))" to="((middle.getEnd()) + (middle.getDiag()))" />
    <mutant id="mutant_430" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) + ((relativePosition) &gt; 0 ? 0 : 1)" to="(relativePosition) % ((relativePosition) &gt; 0 ? 0 : 1)" />
    <mutant id="mutant_431" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) + ((relativePosition) &gt; 0 ? 0 : 1)" to="(relativePosition) &gt; 0 ? 0 : 1" />
    <mutant id="mutant_432" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.removeSelf()" from="(relativePosition) - ((relativePosition) &lt; 0 ? 0 : 1)" to="(relativePosition) / ((relativePosition) &lt; 0 ? 0 : 1)" />
    <mutant id="mutant_1249" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key)" to="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) % key)" />
    <mutant id="mutant_1247" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;)" to="((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) - &quot; key=&quot;)" />
    <mutant id="mutant_2578" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index)" to="((start) * index)" />
    <mutant id="mutant_1248" viable="false" in="org.apache.commons.collections4.map.LRUMap.reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,K,V)" from="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) + key)" to="(((((&quot;Entry.next=null, data[removeIndex]=&quot; + (data[removeIndex])) + &quot; previous=&quot;) + previous) + &quot; key=&quot;) / key)" />
    <mutant id="mutant_2579" viable="true" in="org.apache.commons.collections4.queue.CircularFifoQueue.get(int)" from="((start) + index) % (maxElements)" to="(start) + index" />
    <mutant id="mutant_327" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid - 1)" to="(mid * 1)" />
    <mutant id="mutant_328" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid - 1)" to="(mid % 1)" />
    <mutant id="mutant_329" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid - 1)" to="(mid / 1)" />
    <mutant id="mutant_323" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="start + ((end - start) / 2)" to="(end - start) / 2" />
    <mutant id="mutant_324" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid - 1)" to="mid" />
    <mutant id="mutant_325" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid - 1)" to="1" />
    <mutant id="mutant_326" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid - 1)" to="(mid + 1)" />
    <mutant id="mutant_1083" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) % &quot; value=&quot;)" />
    <mutant id="mutant_1084" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) - &quot; value=&quot;)" />
    <mutant id="mutant_1081" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="&quot; value=&quot;" />
    <mutant id="mutant_1082" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) / &quot; value=&quot;)" />
    <mutant id="mutant_1080" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" />
    <mutant id="mutant_1078" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="key" />
    <mutant id="mutant_1079" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) % key)" />
    <mutant id="mutant_1076" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) - key)" />
    <mutant id="mutant_1077" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) / key)" />
    <mutant id="mutant_1074" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" />
    <mutant id="mutant_1075" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="(((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) * key)" />
    <mutant id="mutant_320" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="start + ((end - start) / 2)" to="start % ((end - start) / 2)" />
    <mutant id="mutant_321" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="start + ((end - start) / 2)" to="start" />
    <mutant id="mutant_322" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="start + ((end - start) / 2)" to="start * ((end - start) / 2)" />
    <mutant id="mutant_338" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid + 1)" to="(mid - 1)" />
    <mutant id="mutant_339" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid + 1)" to="(mid * 1)" />
    <mutant id="mutant_334" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="mid - absolutePositionOfParent" to="mid * absolutePositionOfParent" />
    <mutant id="mutant_335" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="mid - absolutePositionOfParent" to="absolutePositionOfParent" />
    <mutant id="mutant_336" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid + 1)" to="mid" />
    <mutant id="mutant_337" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid + 1)" to="1" />
    <mutant id="mutant_1072" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) * &quot; key=&quot;)" />
    <mutant id="mutant_1073" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) - &quot; key=&quot;)" />
    <mutant id="mutant_1070" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) % &quot; key=&quot;)" />
    <mutant id="mutant_1071" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" />
    <mutant id="mutant_1069" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="&quot; key=&quot;" />
    <mutant id="mutant_1067" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) / (header.before))" />
    <mutant id="mutant_2398" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="(delta / d)" />
    <mutant id="mutant_1068" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) / &quot; key=&quot;)" />
    <mutant id="mutant_2399" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="(i * delta)" />
    <mutant id="mutant_1065" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="(header.before)" />
    <mutant id="mutant_2396" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="d" />
    <mutant id="mutant_1066" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) * (header.before))" />
    <mutant id="mutant_2397" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="(delta * d)" />
    <mutant id="mutant_1063" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) - (header.before))" />
    <mutant id="mutant_2394" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="delta" />
    <mutant id="mutant_1064" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) % (header.before))" />
    <mutant id="mutant_2395" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="(delta % d)" />
    <mutant id="mutant_330" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="mid - absolutePositionOfParent" to="mid" />
    <mutant id="mutant_331" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="mid - absolutePositionOfParent" to="mid / absolutePositionOfParent" />
    <mutant id="mutant_332" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="mid - absolutePositionOfParent" to="mid + absolutePositionOfParent" />
    <mutant id="mutant_333" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="mid - absolutePositionOfParent" to="mid % absolutePositionOfParent" />
    <mutant id="mutant_349" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (left.relativePosition))" to="(index / (left.relativePosition))" />
    <mutant id="mutant_345" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.heightRightMinusLeft()" from="(getHeight(getRightSubTree())) - (getHeight(getLeftSubTree()))" to="(getHeight(getRightSubTree())) % (getHeight(getLeftSubTree()))" />
    <mutant id="mutant_346" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.heightRightMinusLeft()" from="(getHeight(getRightSubTree())) - (getHeight(getLeftSubTree()))" to="(getHeight(getRightSubTree())) * (getHeight(getLeftSubTree()))" />
    <mutant id="mutant_347" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.heightRightMinusLeft()" from="(getHeight(getRightSubTree())) - (getHeight(getLeftSubTree()))" to="(getHeight(getRightSubTree())) / (getHeight(getLeftSubTree()))" />
    <mutant id="mutant_348" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (left.relativePosition))" to="(index * (left.relativePosition))" />
    <mutant id="mutant_1061" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;)" to="((&quot;Entry.after=null, header.after&quot; + (header.after)) - &quot; header.before&quot;)" />
    <mutant id="mutant_2392" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="(delta / d)" />
    <mutant id="mutant_1062" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;)" />
    <mutant id="mutant_2393" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="(delta - d)" />
    <mutant id="mutant_2390" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="(delta * d)" />
    <mutant id="mutant_1060" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;)" to="(&quot;Entry.after=null, header.after&quot; + (header.after))" />
    <mutant id="mutant_2391" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="(delta + d)" />
    <mutant id="mutant_1058" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;)" to="&quot; header.before&quot;" />
    <mutant id="mutant_2389" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="d" />
    <mutant id="mutant_1059" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;)" to="((&quot;Entry.after=null, header.after&quot; + (header.after)) % &quot; header.before&quot;)" />
    <mutant id="mutant_1056" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;)" to="((&quot;Entry.after=null, header.after&quot; + (header.after)) / &quot; header.before&quot;)" />
    <mutant id="mutant_2387" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="delta" />
    <mutant id="mutant_1057" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;)" to="((&quot;Entry.after=null, header.after&quot; + (header.after)) * &quot; header.before&quot;)" />
    <mutant id="mutant_2388" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="(delta % d)" />
    <mutant id="mutant_1054" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;Entry.after=null, header.after&quot; + (header.after))" to="(&quot;Entry.after=null, header.after&quot; - (header.after))" />
    <mutant id="mutant_2385" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="(delta - 2)" />
    <mutant id="mutant_1055" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;Entry.after=null, header.after&quot; + (header.after))" to="&quot;Entry.after=null, header.after&quot;" />
    <mutant id="mutant_2386" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="(delta + 2)" />
    <mutant id="mutant_1052" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;Entry.after=null, header.after&quot; + (header.after))" to="(header.after)" />
    <mutant id="mutant_2383" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="delta" />
    <mutant id="mutant_1053" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;Entry.after=null, header.after&quot; + (header.after))" to="(&quot;Entry.after=null, header.after&quot; / (header.after))" />
    <mutant id="mutant_2384" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="(delta * 2)" />
    <mutant id="mutant_341" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid + 1)" to="(mid / 1)" />
    <mutant id="mutant_342" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.heightRightMinusLeft()" from="(getHeight(getRightSubTree())) - (getHeight(getLeftSubTree()))" to="(getHeight(getRightSubTree())) + (getHeight(getLeftSubTree()))" />
    <mutant id="mutant_343" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.heightRightMinusLeft()" from="(getHeight(getRightSubTree())) - (getHeight(getLeftSubTree()))" to="getHeight(getRightSubTree())" />
    <mutant id="mutant_344" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.heightRightMinusLeft()" from="(getHeight(getRightSubTree())) - (getHeight(getLeftSubTree()))" to="getHeight(getLeftSubTree())" />
    <mutant id="mutant_340" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(mid + 1)" to="(mid % 1)" />
    <mutant id="mutant_356" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (right.relativePosition))" to="(index - (right.relativePosition))" />
    <mutant id="mutant_357" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (right.relativePosition))" to="right.relativePosition" />
    <mutant id="mutant_358" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (right.relativePosition))" to="index" />
    <mutant id="mutant_359" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (right.relativePosition))" to="(index % (right.relativePosition))" />
    <mutant id="mutant_1050" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;Entry.after=null, header.after&quot; + (header.after))" to="(&quot;Entry.after=null, header.after&quot; % (header.after))" />
    <mutant id="mutant_2381" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="2" />
    <mutant id="mutant_1051" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;Entry.after=null, header.after&quot; + (header.after))" to="(&quot;Entry.after=null, header.after&quot; * (header.after))" />
    <mutant id="mutant_2382" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta % 2)" to="(delta / 2)" />
    <mutant id="mutant_2380" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="(x - start1) + start2" />
    <mutant id="mutant_1047" viable="false" in="org.apache.commons.collections4.map.Flat3Map.convertToMap()" from="(&quot;Invalid map index: &quot; + (size))" to="size" />
    <mutant id="mutant_2378" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="((x - start1) + start2) + k" />
    <mutant id="mutant_1048" viable="true" in="org.apache.commons.collections4.map.Flat3Map.convertToMap()" from="(&quot;Invalid map index: &quot; + (size))" to="&quot;Invalid map index: &quot;" />
    <mutant id="mutant_2379" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="((x - start1) + start2) % k" />
    <mutant id="mutant_1045" viable="false" in="org.apache.commons.collections4.map.Flat3Map.convertToMap()" from="(&quot;Invalid map index: &quot; + (size))" to="(&quot;Invalid map index: &quot; * (size))" />
    <mutant id="mutant_2376" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="((x - start1) + start2) / k" />
    <mutant id="mutant_1046" viable="false" in="org.apache.commons.collections4.map.Flat3Map.convertToMap()" from="(&quot;Invalid map index: &quot; + (size))" to="(&quot;Invalid map index: &quot; / (size))" />
    <mutant id="mutant_2377" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="((x - start1) + start2) * k" />
    <mutant id="mutant_1043" viable="false" in="org.apache.commons.collections4.map.Flat3Map.toString()" from="(&quot;Invalid map index: &quot; + (size))" to="(&quot;Invalid map index: &quot; - (size))" />
    <mutant id="mutant_2374" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="((x - start1) / start2)" />
    <mutant id="mutant_1044" viable="false" in="org.apache.commons.collections4.map.Flat3Map.convertToMap()" from="(&quot;Invalid map index: &quot; + (size))" to="(&quot;Invalid map index: &quot; % (size))" />
    <mutant id="mutant_2375" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2) - k" to="k" />
    <mutant id="mutant_1041" viable="false" in="org.apache.commons.collections4.map.Flat3Map.toString()" from="(&quot;Invalid map index: &quot; + (size))" to="size" />
    <mutant id="mutant_2372" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="((x - start1) * start2)" />
    <mutant id="mutant_1042" viable="true" in="org.apache.commons.collections4.map.Flat3Map.toString()" from="(&quot;Invalid map index: &quot; + (size))" to="&quot;Invalid map index: &quot;" />
    <mutant id="mutant_2373" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="((x - start1) % start2)" />
    <mutant id="mutant_352" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (left.relativePosition))" to="index" />
    <mutant id="mutant_353" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (left.relativePosition))" to="(index % (left.relativePosition))" />
    <mutant id="mutant_354" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (right.relativePosition))" to="(index * (right.relativePosition))" />
    <mutant id="mutant_355" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (right.relativePosition))" to="(index / (right.relativePosition))" />
    <mutant id="mutant_350" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (left.relativePosition))" to="(index - (left.relativePosition))" />
    <mutant id="mutant_1049" viable="false" in="org.apache.commons.collections4.map.Flat3Map.convertToMap()" from="(&quot;Invalid map index: &quot; + (size))" to="(&quot;Invalid map index: &quot; - (size))" />
    <mutant id="mutant_351" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.indexOf(java.lang.Object,int)" from="(index + (left.relativePosition))" to="left.relativePosition" />
    <mutant id="mutant_367" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - 1" to="currentSize / 1" />
    <mutant id="mutant_368" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - 1" to="currentSize % 1" />
    <mutant id="mutant_369" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - 1" to="currentSize * 1" />
    <mutant id="mutant_363" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(s.relativePosition) + currentSize" to="(s.relativePosition) / currentSize" />
    <mutant id="mutant_364" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(s.relativePosition) + currentSize" to="currentSize" />
    <mutant id="mutant_365" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(s.relativePosition) + currentSize" to="(s.relativePosition) * currentSize" />
    <mutant id="mutant_366" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - 1" to="1" />
    <mutant id="mutant_360" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(s.relativePosition) + currentSize" to="(s.relativePosition) - currentSize" />
    <mutant id="mutant_361" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(s.relativePosition) + currentSize" to="(s.relativePosition) % currentSize" />
    <mutant id="mutant_362" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(s.relativePosition) + currentSize" to="s.relativePosition" />
    <mutant id="mutant_378" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize) + 1" to="(sAbsolutePosition - currentSize) - 1" />
    <mutant id="mutant_379" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize) + 1" to="1" />
    <mutant id="mutant_374" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize)" to="(sAbsolutePosition * currentSize)" />
    <mutant id="mutant_375" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize)" to="sAbsolutePosition" />
    <mutant id="mutant_376" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize)" to="(sAbsolutePosition % currentSize)" />
    <mutant id="mutant_377" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize)" to="currentSize" />
    <mutant id="mutant_370" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - 1" to="currentSize + 1" />
    <mutant id="mutant_371" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="currentSize - 1" to="currentSize" />
    <mutant id="mutant_372" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize)" to="(sAbsolutePosition + currentSize)" />
    <mutant id="mutant_373" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize)" to="(sAbsolutePosition / currentSize)" />
    <mutant id="mutant_389" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1)" to="currentSize" />
    <mutant id="mutant_380" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize) + 1" to="(sAbsolutePosition - currentSize) / 1" />
    <mutant id="mutant_1098" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) - (size))" />
    <mutant id="mutant_1099" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) / (size))" />
    <mutant id="mutant_1096" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="&quot; size=&quot;" />
    <mutant id="mutant_1097" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) / &quot; size=&quot;)" />
    <mutant id="mutant_385" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1)" to="(currentSize / 1)" />
    <mutant id="mutant_386" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1)" to="(currentSize % 1)" />
    <mutant id="mutant_387" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1)" to="(currentSize * 1)" />
    <mutant id="mutant_388" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1)" to="(currentSize + 1)" />
    <mutant id="mutant_381" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize) + 1" to="(sAbsolutePosition - currentSize) * 1" />
    <mutant id="mutant_382" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize) + 1" to="sAbsolutePosition - currentSize" />
    <mutant id="mutant_383" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(sAbsolutePosition - currentSize) + 1" to="(sAbsolutePosition - currentSize) % 1" />
    <mutant id="mutant_384" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1)" to="1" />
    <mutant id="mutant_1094" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" />
    <mutant id="mutant_1095" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) % &quot; size=&quot;)" />
    <mutant id="mutant_1092" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) - &quot; size=&quot;)" />
    <mutant id="mutant_1093" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" to="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) * &quot; size=&quot;)" />
    <mutant id="mutant_1090" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) * value)" />
    <mutant id="mutant_1091" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) % value)" />
    <mutant id="mutant_390" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1) - sParentAbsolutePosition" to="(currentSize - 1) % sParentAbsolutePosition" />
    <mutant id="mutant_1089" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="value" />
    <mutant id="mutant_391" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1) - sParentAbsolutePosition" to="(currentSize - 1) + sParentAbsolutePosition" />
    <mutant id="mutant_1087" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) - value)" />
    <mutant id="mutant_1088" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) / value)" />
    <mutant id="mutant_1085" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) * &quot; value=&quot;)" />
    <mutant id="mutant_1086" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value)" to="((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" />
    <mutant id="mutant_396" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="sAbsolutePosition - currentSize" to="sAbsolutePosition + currentSize" />
    <mutant id="mutant_397" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="sAbsolutePosition - currentSize" to="sAbsolutePosition / currentSize" />
    <mutant id="mutant_398" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="sAbsolutePosition - currentSize" to="sAbsolutePosition * currentSize" />
    <mutant id="mutant_399" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="sAbsolutePosition - currentSize" to="sAbsolutePosition" />
    <mutant id="mutant_392" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1) - sParentAbsolutePosition" to="sParentAbsolutePosition" />
    <mutant id="mutant_393" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1) - sParentAbsolutePosition" to="(currentSize - 1) / sParentAbsolutePosition" />
    <mutant id="mutant_394" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1) - sParentAbsolutePosition" to="(currentSize - 1) * sParentAbsolutePosition" />
    <mutant id="mutant_395" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode.addAll(org.apache.commons.collections4.list.TreeList$AVLNode,int)" from="(currentSize - 1) - sParentAbsolutePosition" to="currentSize - 1" />
    <mutant id="mutant_1919" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="(total % 37)" />
    <mutant id="mutant_1917" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="(total / 37)" />
    <mutant id="mutant_1918" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="(total - 37)" />
    <mutant id="mutant_1915" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="37" />
    <mutant id="mutant_1916" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="(total + 37)" />
    <mutant id="mutant_1913" viable="true" in="org.apache.commons.collections4.comparators.NullComparator.hashCode()" from="(nullsAreHigh ? -1 : 1) * (nonNullComparator.hashCode())" to="nonNullComparator.hashCode()" />
    <mutant id="mutant_1914" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="total" />
    <mutant id="mutant_1911" viable="true" in="org.apache.commons.collections4.comparators.NullComparator.hashCode()" from="(nullsAreHigh ? -1 : 1) * (nonNullComparator.hashCode())" to="(nullsAreHigh ? -1 : 1) / (nonNullComparator.hashCode())" />
    <mutant id="mutant_1912" viable="true" in="org.apache.commons.collections4.comparators.NullComparator.hashCode()" from="(nullsAreHigh ? -1 : 1) * (nonNullComparator.hashCode())" to="nullsAreHigh ? -1 : 1" />
    <mutant id="mutant_1910" viable="true" in="org.apache.commons.collections4.comparators.NullComparator.hashCode()" from="(nullsAreHigh ? -1 : 1) * (nonNullComparator.hashCode())" to="(nullsAreHigh ? -1 : 1) % (nonNullComparator.hashCode())" />
    <mutant id="mutant_1908" viable="true" in="org.apache.commons.collections4.comparators.NullComparator.hashCode()" from="(nullsAreHigh ? -1 : 1) * (nonNullComparator.hashCode())" to="(nullsAreHigh ? -1 : 1) - (nonNullComparator.hashCode())" />
    <mutant id="mutant_1909" viable="true" in="org.apache.commons.collections4.comparators.NullComparator.hashCode()" from="(nullsAreHigh ? -1 : 1) * (nonNullComparator.hashCode())" to="(nullsAreHigh ? -1 : 1) + (nonNullComparator.hashCode())" />
    <mutant id="mutant_1906" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (isLocked ? 0 : 1)" to="(total * 37) % (isLocked ? 0 : 1)" />
    <mutant id="mutant_1907" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (isLocked ? 0 : 1)" to="isLocked ? 0 : 1" />
    <mutant id="mutant_1904" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (isLocked ? 0 : 1)" to="total * 37" />
    <mutant id="mutant_1905" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (isLocked ? 0 : 1)" to="(total * 37) - (isLocked ? 0 : 1)" />
    <mutant id="mutant_1902" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (isLocked ? 0 : 1)" to="(total * 37) / (isLocked ? 0 : 1)" />
    <mutant id="mutant_1903" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (isLocked ? 0 : 1)" to="(total * 37) * (isLocked ? 0 : 1)" />
    <mutant id="mutant_1900" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total - 37)" />
    <mutant id="mutant_1901" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total % 37)" />
    <mutant id="mutant_2809" viable="false" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="(&quot;Invalid array element: &quot; + i)" to="(&quot;Invalid array element: &quot; % i)" />
    <mutant id="mutant_2808" viable="true" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="(&quot;Invalid array element: &quot; + i)" to="&quot;Invalid array element: &quot;" />
    <mutant id="mutant_1959" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex / (StringKeyAnalyzer.LENGTH)" to="bitIndex - (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2807" viable="false" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="(&quot;Invalid array element: &quot; + i)" to="i" />
    <mutant id="mutant_2806" viable="false" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="(&quot;Invalid array element: &quot; + i)" to="(&quot;Invalid array element: &quot; / i)" />
    <mutant id="mutant_1950" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="((getKey()) + &quot;=&quot;) - (getValue())" />
    <mutant id="mutant_1957" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex / (StringKeyAnalyzer.LENGTH)" to="bitIndex" />
    <mutant id="mutant_2805" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode) + (obj == null ? 0 : obj.hashCode())" to="31 * hashCode" />
    <mutant id="mutant_1958" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex / (StringKeyAnalyzer.LENGTH)" to="bitIndex * (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2804" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode) + (obj == null ? 0 : obj.hashCode())" to="(31 * hashCode) * (obj == null ? 0 : obj.hashCode())" />
    <mutant id="mutant_1955" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="getValue()" />
    <mutant id="mutant_2803" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode) + (obj == null ? 0 : obj.hashCode())" to="(31 * hashCode) % (obj == null ? 0 : obj.hashCode())" />
    <mutant id="mutant_1956" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex / (StringKeyAnalyzer.LENGTH)" to="StringKeyAnalyzer.LENGTH" />
    <mutant id="mutant_2802" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode) + (obj == null ? 0 : obj.hashCode())" to="obj == null ? 0 : obj.hashCode()" />
    <mutant id="mutant_1953" viable="true" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="(getKey()) + &quot;=&quot;" />
    <mutant id="mutant_2801" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode) + (obj == null ? 0 : obj.hashCode())" to="(31 * hashCode) - (obj == null ? 0 : obj.hashCode())" />
    <mutant id="mutant_1954" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="((getKey()) + &quot;=&quot;) * (getValue())" />
    <mutant id="mutant_2800" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode) + (obj == null ? 0 : obj.hashCode())" to="(31 * hashCode) / (obj == null ? 0 : obj.hashCode())" />
    <mutant id="mutant_1951" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="((getKey()) + &quot;=&quot;) / (getValue())" />
    <mutant id="mutant_1952" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;) + (getValue())" to="((getKey()) + &quot;=&quot;) % (getValue())" />
    <mutant id="mutant_1948" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="(getKey())" />
    <mutant id="mutant_1949" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="((getKey()) % &quot;=&quot;)" />
    <mutant id="mutant_1946" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="((getKey()) / &quot;=&quot;)" />
    <mutant id="mutant_1947" viable="true" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="&quot;=&quot;" />
    <mutant id="mutant_1944" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="((getKey()) * &quot;=&quot;)" />
    <mutant id="mutant_1945" viable="false" in="org.apache.commons.collections4.keyvalue.TiedMapEntry.toString()" from="((getKey()) + &quot;=&quot;)" to="((getKey()) - &quot;=&quot;)" />
    <mutant id="mutant_1942" viable="true" in="org.apache.commons.collections4.keyvalue.MultiKey.toString()" from="&quot;MultiKey&quot; + (Arrays.toString(keys))" to="Arrays.toString(keys)" />
    <mutant id="mutant_1943" viable="false" in="org.apache.commons.collections4.keyvalue.MultiKey.toString()" from="&quot;MultiKey&quot; + (Arrays.toString(keys))" to="&quot;MultiKey&quot; % (Arrays.toString(keys))" />
    <mutant id="mutant_1940" viable="false" in="org.apache.commons.collections4.keyvalue.MultiKey.toString()" from="&quot;MultiKey&quot; + (Arrays.toString(keys))" to="&quot;MultiKey&quot; * (Arrays.toString(keys))" />
    <mutant id="mutant_1941" viable="true" in="org.apache.commons.collections4.keyvalue.MultiKey.toString()" from="&quot;MultiKey&quot; + (Arrays.toString(keys))" to="&quot;MultiKey&quot;" />
    <mutant id="mutant_1939" viable="false" in="org.apache.commons.collections4.keyvalue.MultiKey.toString()" from="&quot;MultiKey&quot; + (Arrays.toString(keys))" to="&quot;MultiKey&quot; - (Arrays.toString(keys))" />
    <mutant id="mutant_1937" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((transformer) == null ? 0 : transformer.hashCode())" to="(transformer) == null ? 0 : transformer.hashCode()" />
    <mutant id="mutant_1938" viable="false" in="org.apache.commons.collections4.keyvalue.MultiKey.toString()" from="&quot;MultiKey&quot; + (Arrays.toString(keys))" to="&quot;MultiKey&quot; / (Arrays.toString(keys))" />
    <mutant id="mutant_1935" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((transformer) == null ? 0 : transformer.hashCode())" to="(total * 37) * ((transformer) == null ? 0 : transformer.hashCode())" />
    <mutant id="mutant_1936" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((transformer) == null ? 0 : transformer.hashCode())" to="(total * 37) - ((transformer) == null ? 0 : transformer.hashCode())" />
    <mutant id="mutant_1933" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((transformer) == null ? 0 : transformer.hashCode())" to="(total * 37) % ((transformer) == null ? 0 : transformer.hashCode())" />
    <mutant id="mutant_1934" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((transformer) == null ? 0 : transformer.hashCode())" to="total * 37" />
    <mutant id="mutant_1931" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="(total % 37)" />
    <mutant id="mutant_1932" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((transformer) == null ? 0 : transformer.hashCode())" to="(total * 37) / ((transformer) == null ? 0 : transformer.hashCode())" />
    <mutant id="mutant_1930" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="(total - 37)" />
    <mutant id="mutant_1928" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="(total + 37)" />
    <mutant id="mutant_1929" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="(total / 37)" />
    <mutant id="mutant_1926" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="total" />
    <mutant id="mutant_1927" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37)" to="37" />
    <mutant id="mutant_1924" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((decorated) == null ? 0 : decorated.hashCode())" to="(total * 37) - ((decorated) == null ? 0 : decorated.hashCode())" />
    <mutant id="mutant_1925" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((decorated) == null ? 0 : decorated.hashCode())" to="(total * 37) / ((decorated) == null ? 0 : decorated.hashCode())" />
    <mutant id="mutant_1922" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((decorated) == null ? 0 : decorated.hashCode())" to="total * 37" />
    <mutant id="mutant_1923" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((decorated) == null ? 0 : decorated.hashCode())" to="(total * 37) % ((decorated) == null ? 0 : decorated.hashCode())" />
    <mutant id="mutant_1920" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((decorated) == null ? 0 : decorated.hashCode())" to="(decorated) == null ? 0 : decorated.hashCode()" />
    <mutant id="mutant_1921" viable="true" in="org.apache.commons.collections4.comparators.TransformingComparator.hashCode()" from="(total * 37) + ((decorated) == null ? 0 : decorated.hashCode())" to="(total * 37) * ((decorated) == null ? 0 : decorated.hashCode())" />
    <mutant id="mutant_1519" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap(int)" from="(size % 2)" to="2" />
    <mutant id="mutant_1993" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="(StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2841" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((((lineage.size()) - 1) - lineageIndex) - 1)" to="((((lineage.size()) - 1) - lineageIndex) % 1)" />
    <mutant id="mutant_1510" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) * &quot;]&quot;" />
    <mutant id="mutant_1994" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="offsetInBits" />
    <mutant id="mutant_2840" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((((lineage.size()) - 1) - lineageIndex) - 1)" to="((((lineage.size()) - 1) - lineageIndex) + 1)" />
    <mutant id="mutant_1991" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="(lengthInBits - (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1992" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="(offsetInBits + (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1990" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="lengthInBits" />
    <mutant id="mutant_1517" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap$BaseIterator.nextEntry()" from="((current.size()) - 1)" to="((current.size()) % 1)" />
    <mutant id="mutant_2849" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) + &quot;] Map)&quot;)" to="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) % &quot;] Map)&quot;)" />
    <mutant id="mutant_1518" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap(int)" from="(size % 2)" to="size" />
    <mutant id="mutant_2848" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) + &quot;] Map)&quot;)" to="&quot;] Map)&quot;" />
    <mutant id="mutant_1515" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap$BaseIterator.nextEntry()" from="((current.size()) - 1)" to="((current.size()) + 1)" />
    <mutant id="mutant_1999" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherOffsetInBits % (StringKeyAnalyzer.LENGTH))" to="otherOffsetInBits" />
    <mutant id="mutant_2847" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1))" to="(&quot;(ancestor[&quot; * ((((lineage.size()) - 1) - lineageIndex) - 1))" />
    <mutant id="mutant_1516" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap$BaseIterator.nextEntry()" from="((current.size()) - 1)" to="current.size()" />
    <mutant id="mutant_2846" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1))" to="((((lineage.size()) - 1) - lineageIndex) - 1)" />
    <mutant id="mutant_1513" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap$BaseIterator.nextEntry()" from="((current.size()) - 1)" to="((current.size()) / 1)" />
    <mutant id="mutant_1997" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="(offsetInBits - (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2845" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1))" to="&quot;(ancestor[&quot;" />
    <mutant id="mutant_1514" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap$BaseIterator.nextEntry()" from="((current.size()) - 1)" to="((current.size()) * 1)" />
    <mutant id="mutant_1998" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherOffsetInBits % (StringKeyAnalyzer.LENGTH))" to="(StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2844" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1))" to="(&quot;(ancestor[&quot; - ((((lineage.size()) - 1) - lineageIndex) - 1))" />
    <mutant id="mutant_1511" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) % &quot;]&quot;" />
    <mutant id="mutant_1995" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="(offsetInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2843" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1))" to="(&quot;(ancestor[&quot; / ((((lineage.size()) - 1) - lineageIndex) - 1))" />
    <mutant id="mutant_1512" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap$BaseIterator.nextEntry()" from="((current.size()) - 1)" to="1" />
    <mutant id="mutant_1996" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="(offsetInBits * (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2842" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1))" to="(&quot;(ancestor[&quot; % ((((lineage.size()) - 1) - lineageIndex) - 1))" />
    <mutant id="mutant_1508" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) - &quot;]&quot;" />
    <mutant id="mutant_1509" viable="true" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())" />
    <mutant id="mutant_2839" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((((lineage.size()) - 1) - lineageIndex) - 1)" to="((((lineage.size()) - 1) - lineageIndex) * 1)" />
    <mutant id="mutant_1982" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits / (StringKeyAnalyzer.LENGTH))" to="StringKeyAnalyzer.LENGTH" />
    <mutant id="mutant_2830" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(((lineage.size()) - 1) - lineageIndex)" to="((lineage.size()) - 1)" />
    <mutant id="mutant_1983" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits / (StringKeyAnalyzer.LENGTH))" to="offsetInBits" />
    <mutant id="mutant_1980" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits / (StringKeyAnalyzer.LENGTH))" to="(offsetInBits + (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1981" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits / (StringKeyAnalyzer.LENGTH))" to="(offsetInBits % (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1506" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) / &quot;]&quot;" />
    <mutant id="mutant_2838" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((((lineage.size()) - 1) - lineageIndex) - 1)" to="(((lineage.size()) - 1) - lineageIndex)" />
    <mutant id="mutant_1507" viable="true" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_2837" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((((lineage.size()) - 1) - lineageIndex) - 1)" to="((((lineage.size()) - 1) - lineageIndex) / 1)" />
    <mutant id="mutant_1504" viable="true" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(getValue())" />
    <mutant id="mutant_1988" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="(lengthInBits % (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2836" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((((lineage.size()) - 1) - lineageIndex) - 1)" to="1" />
    <mutant id="mutant_1505" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) / (getValue()))" />
    <mutant id="mutant_1989" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="(lengthInBits * (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2835" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(((lineage.size()) - 1) - lineageIndex)" to="(((lineage.size()) - 1) / lineageIndex)" />
    <mutant id="mutant_1502" viable="true" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" />
    <mutant id="mutant_1986" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="(lengthInBits + (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2834" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(((lineage.size()) - 1) - lineageIndex)" to="(((lineage.size()) - 1) + lineageIndex)" />
    <mutant id="mutant_1503" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) - (getValue()))" />
    <mutant id="mutant_1987" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits / (StringKeyAnalyzer.LENGTH))" to="StringKeyAnalyzer.LENGTH" />
    <mutant id="mutant_2833" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(((lineage.size()) - 1) - lineageIndex)" to="lineageIndex" />
    <mutant id="mutant_1500" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) % (getValue()))" />
    <mutant id="mutant_1984" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits / (StringKeyAnalyzer.LENGTH))" to="(offsetInBits * (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2832" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(((lineage.size()) - 1) - lineageIndex)" to="(((lineage.size()) - 1) % lineageIndex)" />
    <mutant id="mutant_1501" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) * (getValue()))" />
    <mutant id="mutant_1985" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits / (StringKeyAnalyzer.LENGTH))" to="(offsetInBits - (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2831" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="(((lineage.size()) - 1) - lineageIndex)" to="(((lineage.size()) - 1) * lineageIndex)" />
    <mutant id="mutant_2829" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="((lineage.size()) % 1)" />
    <mutant id="mutant_2828" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="(lineage.size())" />
    <mutant id="mutant_1971" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="(offsetInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1972" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="(offsetInBits * (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1970" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="offsetInBits" />
    <mutant id="mutant_1979" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="(lengthInBits - (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2827" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="((lineage.size()) + 1)" />
    <mutant id="mutant_2826" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="((lineage.size()) * 1)" />
    <mutant id="mutant_1977" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="(lengthInBits * (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2825" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="((lineage.size()) / 1)" />
    <mutant id="mutant_1978" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="lengthInBits" />
    <mutant id="mutant_2824" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="1" />
    <mutant id="mutant_1975" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="(lengthInBits + (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2823" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="((lineage.size()) % 1)" />
    <mutant id="mutant_1976" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="(StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2822" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="(lineage.size())" />
    <mutant id="mutant_1973" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="(offsetInBits - (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2821" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="((lineage.size()) + 1)" />
    <mutant id="mutant_1974" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="(lengthInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2820" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="((lineage.size()) * 1)" />
    <mutant id="mutant_2819" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="((lineage.size()) / 1)" />
    <mutant id="mutant_2818" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((lineage.size()) - 1)" to="1" />
    <mutant id="mutant_2817" viable="true" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="((array.length) - 1)" to="(array.length)" />
    <mutant id="mutant_1960" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex / (StringKeyAnalyzer.LENGTH)" to="bitIndex % (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_1961" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex / (StringKeyAnalyzer.LENGTH)" to="bitIndex + (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_1968" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="(offsetInBits + (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2816" viable="true" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="((array.length) - 1)" to="((array.length) + 1)" />
    <mutant id="mutant_1969" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String,int,int,java.lang.String)" from="(offsetInBits % (StringKeyAnalyzer.LENGTH))" to="(StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2815" viable="true" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="((array.length) - 1)" to="((array.length) * 1)" />
    <mutant id="mutant_1966" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex % (StringKeyAnalyzer.LENGTH)" to="bitIndex / (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2814" viable="true" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="((array.length) - 1)" to="((array.length) % 1)" />
    <mutant id="mutant_1967" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex % (StringKeyAnalyzer.LENGTH)" to="bitIndex + (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2813" viable="true" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="((array.length) - 1)" to="1" />
    <mutant id="mutant_1964" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex % (StringKeyAnalyzer.LENGTH)" to="bitIndex * (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2812" viable="true" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="((array.length) - 1)" to="((array.length) / 1)" />
    <mutant id="mutant_1965" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex % (StringKeyAnalyzer.LENGTH)" to="bitIndex - (StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2811" viable="false" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="(&quot;Invalid array element: &quot; + i)" to="(&quot;Invalid array element: &quot; - i)" />
    <mutant id="mutant_1962" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex % (StringKeyAnalyzer.LENGTH)" to="StringKeyAnalyzer.LENGTH" />
    <mutant id="mutant_2810" viable="false" in="org.apache.commons.collections4.MapUtils.putAll(java.util.Map,java.lang.Object[])" from="(&quot;Invalid array element: &quot; + i)" to="(&quot;Invalid array element: &quot; * i)" />
    <mutant id="mutant_1963" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String,int,int)" from="bitIndex % (StringKeyAnalyzer.LENGTH)" to="bitIndex" />
    <mutant id="mutant_1553" viable="true" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;)" to="&quot; cannot be added to &quot;" />
    <mutant id="mutant_2400" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="i" />
    <mutant id="mutant_1554" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) + &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;)" to="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) / &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;)" />
    <mutant id="mutant_2401" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="(i + delta)" />
    <mutant id="mutant_1551" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;)" to="((&quot;Objects of type &quot; + (object.getClass())) * &quot; cannot be added to &quot;)" />
    <mutant id="mutant_1552" viable="true" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;)" to="(&quot;Objects of type &quot; + (object.getClass()))" />
    <mutant id="mutant_1550" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;)" to="((&quot;Objects of type &quot; + (object.getClass())) - &quot; cannot be added to &quot;)" />
    <mutant id="mutant_2408" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="delta" />
    <mutant id="mutant_2409" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="(i % delta)" />
    <mutant id="mutant_1559" viable="true" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) + &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;)" to="&quot;a naturally ordered TreeBag as it does not implement Comparable&quot;" />
    <mutant id="mutant_2406" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="i" />
    <mutant id="mutant_2407" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="(i + delta)" />
    <mutant id="mutant_1557" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) + &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;)" to="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) * &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;)" />
    <mutant id="mutant_2404" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="(i / delta)" />
    <mutant id="mutant_1558" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) + &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;)" to="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) % &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;)" />
    <mutant id="mutant_2405" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="(i * delta)" />
    <mutant id="mutant_1555" viable="true" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) + &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;)" to="((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;)" />
    <mutant id="mutant_2402" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="delta" />
    <mutant id="mutant_1556" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) + &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;)" to="(((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;) - &quot;a naturally ordered TreeBag as it does not implement Comparable&quot;)" />
    <mutant id="mutant_2403" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="(i % delta)" />
    <mutant id="mutant_1542" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(&quot;Objects of type &quot; + (object.getClass()))" to="(&quot;Objects of type &quot; % (object.getClass()))" />
    <mutant id="mutant_1543" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(&quot;Objects of type &quot; + (object.getClass()))" to="(&quot;Objects of type &quot; * (object.getClass()))" />
    <mutant id="mutant_1540" viable="true" in="org.apache.commons.collections4.bag.AbstractMapBag.retainAll(org.apache.commons.collections4.Bag)" from="(myCount - otherCount)" to="myCount" />
    <mutant id="mutant_1541" viable="true" in="org.apache.commons.collections4.bag.AbstractMapBag.retainAll(org.apache.commons.collections4.Bag)" from="(myCount - otherCount)" to="(myCount % otherCount)" />
    <mutant id="mutant_1548" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;)" to="((&quot;Objects of type &quot; + (object.getClass())) / &quot; cannot be added to &quot;)" />
    <mutant id="mutant_1549" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="((&quot;Objects of type &quot; + (object.getClass())) + &quot; cannot be added to &quot;)" to="((&quot;Objects of type &quot; + (object.getClass())) % &quot; cannot be added to &quot;)" />
    <mutant id="mutant_1546" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(&quot;Objects of type &quot; + (object.getClass()))" to="(&quot;Objects of type &quot; - (object.getClass()))" />
    <mutant id="mutant_1547" viable="true" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(&quot;Objects of type &quot; + (object.getClass()))" to="&quot;Objects of type &quot;" />
    <mutant id="mutant_1544" viable="true" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(&quot;Objects of type &quot; + (object.getClass()))" to="(object.getClass())" />
    <mutant id="mutant_1545" viable="false" in="org.apache.commons.collections4.bag.TreeBag.add(E)" from="(&quot;Objects of type &quot; + (object.getClass()))" to="(&quot;Objects of type &quot; / (object.getClass()))" />
    <mutant id="mutant_701" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) + &quot;\' rejected it&quot;)" to="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) / &quot;\' rejected it&quot;)" />
    <mutant id="mutant_702" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="(&quot;Iterator[&quot; % (last.getKey()))" />
    <mutant id="mutant_703" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="(&quot;Iterator[&quot; / (last.getKey()))" />
    <mutant id="mutant_704" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="(&quot;Iterator[&quot; - (last.getKey()))" />
    <mutant id="mutant_700" viable="true" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) + &quot;\' rejected it&quot;)" to="&quot;\' rejected it&quot;" />
    <mutant id="mutant_709" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="(&quot;Iterator[&quot; + (last.getKey()))" />
    <mutant id="mutant_705" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="(last.getKey())" />
    <mutant id="mutant_706" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="(&quot;Iterator[&quot; * (last.getKey()))" />
    <mutant id="mutant_707" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="&quot;Iterator[&quot;" />
    <mutant id="mutant_708" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (last.getKey())) - &quot;=&quot;)" />
    <mutant id="mutant_1531" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.atomic(java.lang.Runnable,int)" from="(bucket + 1)" to="1" />
    <mutant id="mutant_1532" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.atomic(java.lang.Runnable,int)" from="(bucket + 1)" to="(bucket / 1)" />
    <mutant id="mutant_1530" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.atomic(java.lang.Runnable,int)" from="(bucket + 1)" to="(bucket - 1)" />
    <mutant id="mutant_1539" viable="true" in="org.apache.commons.collections4.bag.AbstractMapBag.retainAll(org.apache.commons.collections4.Bag)" from="(myCount - otherCount)" to="(myCount / otherCount)" />
    <mutant id="mutant_1537" viable="true" in="org.apache.commons.collections4.bag.AbstractMapBag.retainAll(org.apache.commons.collections4.Bag)" from="(myCount - otherCount)" to="(myCount + otherCount)" />
    <mutant id="mutant_1538" viable="true" in="org.apache.commons.collections4.bag.AbstractMapBag.retainAll(org.apache.commons.collections4.Bag)" from="(myCount - otherCount)" to="(myCount * otherCount)" />
    <mutant id="mutant_1535" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.atomic(java.lang.Runnable,int)" from="(bucket + 1)" to="bucket" />
    <mutant id="mutant_1536" viable="true" in="org.apache.commons.collections4.bag.AbstractMapBag.retainAll(org.apache.commons.collections4.Bag)" from="(myCount - otherCount)" to="otherCount" />
    <mutant id="mutant_1533" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.atomic(java.lang.Runnable,int)" from="(bucket + 1)" to="(bucket * 1)" />
    <mutant id="mutant_1534" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.atomic(java.lang.Runnable,int)" from="(bucket + 1)" to="(bucket % 1)" />
    <mutant id="mutant_712" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (last.getKey())) % &quot;=&quot;)" />
    <mutant id="mutant_713" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (last.getKey())) * &quot;=&quot;)" />
    <mutant id="mutant_714" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) - (last.getValue()))" />
    <mutant id="mutant_715" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) % (last.getValue()))" />
    <mutant id="mutant_710" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (last.getKey())) / &quot;=&quot;)" />
    <mutant id="mutant_711" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="&quot;=&quot;" />
    <mutant id="mutant_716" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) * (last.getValue()))" />
    <mutant id="mutant_717" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="(last.getValue())" />
    <mutant id="mutant_718" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" />
    <mutant id="mutant_719" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) / (last.getValue()))" />
    <mutant id="mutant_1520" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap(int)" from="(size % 2)" to="(size - 2)" />
    <mutant id="mutant_2852" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) + &quot;] Map)&quot;)" to="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) - &quot;] Map)&quot;)" />
    <mutant id="mutant_1521" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap(int)" from="(size % 2)" to="(size / 2)" />
    <mutant id="mutant_2851" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) + &quot;] Map)&quot;)" to="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) / &quot;] Map)&quot;)" />
    <mutant id="mutant_2850" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) + &quot;] Map)&quot;)" to="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) * &quot;] Map)&quot;)" />
    <mutant id="mutant_1528" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.getHash(java.lang.Object)" from="hash * (-1)" to="-1" />
    <mutant id="mutant_1529" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.getHash(java.lang.Object)" from="hash * (-1)" to="hash + (-1)" />
    <mutant id="mutant_2859" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="&quot;} &quot; + (map.getClass().getName())" to="&quot;} &quot; % (map.getClass().getName())" />
    <mutant id="mutant_1526" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.getHash(java.lang.Object)" from="hash * (-1)" to="hash" />
    <mutant id="mutant_2858" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="&quot;} &quot; + (map.getClass().getName())" to="&quot;} &quot; / (map.getClass().getName())" />
    <mutant id="mutant_1527" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.getHash(java.lang.Object)" from="hash * (-1)" to="hash % (-1)" />
    <mutant id="mutant_2857" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="&quot;} &quot; + (map.getClass().getName())" to="&quot;} &quot;" />
    <mutant id="mutant_1524" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.getHash(java.lang.Object)" from="hash * (-1)" to="hash / (-1)" />
    <mutant id="mutant_2856" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="&quot;} &quot; + (map.getClass().getName())" to="map.getClass().getName()" />
    <mutant id="mutant_1525" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap.getHash(java.lang.Object)" from="hash * (-1)" to="hash - (-1)" />
    <mutant id="mutant_2855" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="&quot;} &quot; + (map.getClass().getName())" to="&quot;} &quot; - (map.getClass().getName())" />
    <mutant id="mutant_1522" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap(int)" from="(size % 2)" to="(size + 2)" />
    <mutant id="mutant_2854" viable="false" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="&quot;} &quot; + (map.getClass().getName())" to="&quot;} &quot; * (map.getClass().getName())" />
    <mutant id="mutant_1523" viable="true" in="org.apache.commons.collections4.map.StaticBucketMap(int)" from="(size % 2)" to="(size * 2)" />
    <mutant id="mutant_2853" viable="true" in="org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections4.ArrayStack,boolean)" from="((&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1)) + &quot;] Map)&quot;)" to="(&quot;(ancestor[&quot; + ((((lineage.size()) - 1) - lineageIndex) - 1))" />
    <mutant id="mutant_723" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_724" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) - &quot;]&quot;" />
    <mutant id="mutant_725" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) / &quot;]&quot;" />
    <mutant id="mutant_726" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap(java.util.Map)" from="(2 * (map.size()))" to="(2 % (map.size()))" />
    <mutant id="mutant_720" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())" />
    <mutant id="mutant_721" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) * &quot;]&quot;" />
    <mutant id="mutant_722" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue())) % &quot;]&quot;" />
    <mutant id="mutant_727" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap(java.util.Map)" from="(2 * (map.size()))" to="2" />
    <mutant id="mutant_728" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap(java.util.Map)" from="(2 * (map.size()))" to="(2 + (map.size()))" />
    <mutant id="mutant_729" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap(java.util.Map)" from="(2 * (map.size()))" to="(2 - (map.size()))" />
    <mutant id="mutant_1113" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(maxSize)" />
    <mutant id="mutant_1597" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex)) - 1" to="((this.index) - (this.startIndex)) / 1" />
    <mutant id="mutant_2444" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset) - delta" to="(k + offset) % delta" />
    <mutant id="mutant_1114" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) / (maxSize))" />
    <mutant id="mutant_1598" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex)) - 1" to="((this.index) - (this.startIndex)) * 1" />
    <mutant id="mutant_2445" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset) - delta" to="(k + offset) / delta" />
    <mutant id="mutant_1111" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) - (maxSize))" />
    <mutant id="mutant_1595" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex))" to="((this.index) * (this.startIndex))" />
    <mutant id="mutant_2442" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset) - delta" to="delta" />
    <mutant id="mutant_1112" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) * (maxSize))" />
    <mutant id="mutant_1596" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex)) - 1" to="1" />
    <mutant id="mutant_2443" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset) - delta" to="k + offset" />
    <mutant id="mutant_1593" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex))" to="(this.startIndex)" />
    <mutant id="mutant_2440" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset)" to="(k / offset)" />
    <mutant id="mutant_1110" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) % (maxSize))" />
    <mutant id="mutant_1594" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex))" to="((this.index) + (this.startIndex))" />
    <mutant id="mutant_2441" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset) - delta" to="(k + offset) * delta" />
    <mutant id="mutant_1591" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex))" to="(this.index)" />
    <mutant id="mutant_1592" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex))" to="((this.index) / (this.startIndex))" />
    <mutant id="mutant_1119" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="&quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;" />
    <mutant id="mutant_1117" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) % &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2448" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="(delta % d)" />
    <mutant id="mutant_1118" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) * &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2449" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="d" />
    <mutant id="mutant_1115" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" to="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" />
    <mutant id="mutant_1599" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex)) - 1" to="(this.index) - (this.startIndex)" />
    <mutant id="mutant_2446" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset) - delta" to="(k + offset) + delta" />
    <mutant id="mutant_1116" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) / &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2447" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="delta" />
    <mutant id="mutant_734" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap.calculateThreshold(int,float)" from="((int)(newCapacity * factor))" to="newCapacity + factor" />
    <mutant id="mutant_735" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.calculateThreshold(int,float)" from="((int)(newCapacity * factor))" to="newCapacity" />
    <mutant id="mutant_736" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap.calculateThreshold(int,float)" from="((int)(newCapacity * factor))" to="newCapacity - factor" />
    <mutant id="mutant_737" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap.calculateThreshold(int,float)" from="((int)(newCapacity * factor))" to="factor" />
    <mutant id="mutant_730" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap(java.util.Map)" from="(2 * (map.size()))" to="(2 / (map.size()))" />
    <mutant id="mutant_731" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap(java.util.Map)" from="(2 * (map.size()))" to="map.size()" />
    <mutant id="mutant_732" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap.calculateThreshold(int,float)" from="((int)(newCapacity * factor))" to="newCapacity / factor" />
    <mutant id="mutant_733" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap.calculateThreshold(int,float)" from="((int)(newCapacity * factor))" to="newCapacity % factor" />
    <mutant id="mutant_1590" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.previousIndex()" from="((this.index) - (this.startIndex))" to="((this.index) % (this.startIndex))" />
    <mutant id="mutant_738" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.hashIndex(int,int)" from="(dataSize - 1)" to="(dataSize + 1)" />
    <mutant id="mutant_739" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.hashIndex(int,int)" from="(dataSize - 1)" to="1" />
    <mutant id="mutant_1102" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) % (size))" />
    <mutant id="mutant_1586" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.nextIndex()" from="(this.index) - (this.startIndex)" to="(this.index) / (this.startIndex)" />
    <mutant id="mutant_2433" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="(delta * d)" />
    <mutant id="mutant_1103" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(size)" />
    <mutant id="mutant_1587" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.nextIndex()" from="(this.index) - (this.startIndex)" to="this.startIndex" />
    <mutant id="mutant_2434" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="(delta / d)" />
    <mutant id="mutant_1100" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;)" />
    <mutant id="mutant_1584" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.nextIndex()" from="(this.index) - (this.startIndex)" to="(this.index) % (this.startIndex)" />
    <mutant id="mutant_2431" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="(delta % d)" />
    <mutant id="mutant_1101" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" to="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) * (size))" />
    <mutant id="mutant_1585" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.nextIndex()" from="(this.index) - (this.startIndex)" to="this.index" />
    <mutant id="mutant_2432" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="d" />
    <mutant id="mutant_1582" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s before the start of the array. &quot;)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) * &quot;s before the start of the array. &quot;)" />
    <mutant id="mutant_1583" viable="true" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s before the start of the array. &quot;)" to="(&quot;Attempt to make an ArrayIterator that &quot; + type)" />
    <mutant id="mutant_2430" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="delta" />
    <mutant id="mutant_1580" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s before the start of the array. &quot;)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) - &quot;s before the start of the array. &quot;)" />
    <mutant id="mutant_1581" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s before the start of the array. &quot;)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) / &quot;s before the start of the array. &quot;)" />
    <mutant id="mutant_1108" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="&quot; maxSize=&quot;" />
    <mutant id="mutant_2439" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset)" to="offset" />
    <mutant id="mutant_1109" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) * &quot; maxSize=&quot;)" />
    <mutant id="mutant_1106" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) / &quot; maxSize=&quot;)" />
    <mutant id="mutant_2437" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset)" to="(k % offset)" />
    <mutant id="mutant_1107" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) % &quot; maxSize=&quot;)" />
    <mutant id="mutant_2438" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset)" to="(k * offset)" />
    <mutant id="mutant_1104" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="(((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size))" />
    <mutant id="mutant_1588" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.nextIndex()" from="(this.index) - (this.startIndex)" to="(this.index) + (this.startIndex)" />
    <mutant id="mutant_2435" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset)" to="k" />
    <mutant id="mutant_1105" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;)" to="((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) - &quot; maxSize=&quot;)" />
    <mutant id="mutant_1589" viable="true" in="org.apache.commons.collections4.iterators.ArrayListIterator.nextIndex()" from="(this.index) - (this.startIndex)" to="(this.index) * (this.startIndex)" />
    <mutant id="mutant_2436" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + offset)" to="(k - offset)" />
    <mutant id="mutant_745" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.toString()" from="(32 * (size()))" to="(32 % (size()))" />
    <mutant id="mutant_746" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.toString()" from="(32 * (size()))" to="(32 - (size()))" />
    <mutant id="mutant_747" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.toString()" from="(32 * (size()))" to="(32 / (size()))" />
    <mutant id="mutant_748" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.toString()" from="(32 * (size()))" to="size()" />
    <mutant id="mutant_741" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.hashIndex(int,int)" from="(dataSize - 1)" to="(dataSize / 1)" />
    <mutant id="mutant_742" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.hashIndex(int,int)" from="(dataSize - 1)" to="(dataSize * 1)" />
    <mutant id="mutant_743" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.hashIndex(int,int)" from="(dataSize - 1)" to="(dataSize % 1)" />
    <mutant id="mutant_744" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.toString()" from="(32 * (size()))" to="(32 + (size()))" />
    <mutant id="mutant_749" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.toString()" from="(32 * (size()))" to="32" />
    <mutant id="mutant_1575" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="(&quot;Attempt to make an ArrayIterator that &quot; / type)" />
    <mutant id="mutant_2422" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="((k + start1) + start2)" />
    <mutant id="mutant_1576" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="(&quot;Attempt to make an ArrayIterator that &quot; % type)" />
    <mutant id="mutant_2423" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="delta - d" to="delta" />
    <mutant id="mutant_1573" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="(&quot;Attempt to make an ArrayIterator that &quot; - type)" />
    <mutant id="mutant_2420" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="start2" />
    <mutant id="mutant_1574" viable="true" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="type" />
    <mutant id="mutant_2421" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="((k + start1) * start2)" />
    <mutant id="mutant_1571" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s beyond the end of the array. &quot;)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) - &quot;s beyond the end of the array. &quot;)" />
    <mutant id="mutant_1572" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="(&quot;Attempt to make an ArrayIterator that &quot; * type)" />
    <mutant id="mutant_1570" viable="true" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s beyond the end of the array. &quot;)" to="(&quot;Attempt to make an ArrayIterator that &quot; + type)" />
    <mutant id="mutant_2428" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="delta - d" to="delta / d" />
    <mutant id="mutant_740" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.hashIndex(int,int)" from="(dataSize - 1)" to="dataSize" />
    <mutant id="mutant_2429" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="(delta - d)" />
    <mutant id="mutant_1579" viable="true" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s before the start of the array. &quot;)" to="&quot;s before the start of the array. &quot;" />
    <mutant id="mutant_2426" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="delta - d" to="delta * d" />
    <mutant id="mutant_2427" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="delta - d" to="delta + d" />
    <mutant id="mutant_1577" viable="true" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="&quot;Attempt to make an ArrayIterator that &quot;" />
    <mutant id="mutant_2424" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="delta - d" to="delta % d" />
    <mutant id="mutant_1578" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s before the start of the array. &quot;)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) % &quot;s before the start of the array. &quot;)" />
    <mutant id="mutant_2425" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="delta - d" to="d" />
    <mutant id="mutant_756" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="(((size) + mapSize) / (loadFactor))" to="(((size) + mapSize) + (loadFactor))" />
    <mutant id="mutant_757" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="(((size) + mapSize) / (loadFactor))" to="(loadFactor)" />
    <mutant id="mutant_758" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="(((size) + mapSize) / (loadFactor))" to="(((size) + mapSize) * (loadFactor))" />
    <mutant id="mutant_759" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="(((size) + mapSize) / (loadFactor))" to="(((size) + mapSize) % (loadFactor))" />
    <mutant id="mutant_752" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((size) + mapSize)" to="((size) * mapSize)" />
    <mutant id="mutant_753" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((size) + mapSize)" to="((size) % mapSize)" />
    <mutant id="mutant_754" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((size) + mapSize)" to="(size)" />
    <mutant id="mutant_755" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((size) + mapSize)" to="mapSize" />
    <mutant id="mutant_1564" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="(&quot;Attempt to make an ArrayIterator that &quot; % type)" />
    <mutant id="mutant_2411" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="(k * start1)" />
    <mutant id="mutant_1565" viable="true" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="&quot;Attempt to make an ArrayIterator that &quot;" />
    <mutant id="mutant_2412" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="k" />
    <mutant id="mutant_1562" viable="true" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="type" />
    <mutant id="mutant_1563" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="(&quot;Attempt to make an ArrayIterator that &quot; / type)" />
    <mutant id="mutant_2410" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - delta)" to="(i / delta)" />
    <mutant id="mutant_1560" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="(&quot;Attempt to make an ArrayIterator that &quot; * type)" />
    <mutant id="mutant_1561" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="(&quot;Attempt to make an ArrayIterator that &quot; + type)" to="(&quot;Attempt to make an ArrayIterator that &quot; - type)" />
    <mutant id="mutant_2419" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="((k + start1) % start2)" />
    <mutant id="mutant_750" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((size) + mapSize)" to="((size) - mapSize)" />
    <mutant id="mutant_2417" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="(k + start1)" />
    <mutant id="mutant_751" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((size) + mapSize)" to="((size) / mapSize)" />
    <mutant id="mutant_2418" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((k + start1) - start2)" to="((k + start1) / start2)" />
    <mutant id="mutant_1568" viable="true" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s beyond the end of the array. &quot;)" to="&quot;s beyond the end of the array. &quot;" />
    <mutant id="mutant_2415" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="start1" />
    <mutant id="mutant_1569" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s beyond the end of the array. &quot;)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) / &quot;s beyond the end of the array. &quot;)" />
    <mutant id="mutant_2416" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="(k / start1)" />
    <mutant id="mutant_1566" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s beyond the end of the array. &quot;)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) * &quot;s beyond the end of the array. &quot;)" />
    <mutant id="mutant_2413" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="(k - start1)" />
    <mutant id="mutant_1567" viable="false" in="org.apache.commons.collections4.iterators.ArrayIterator.checkBound(int,int,java.lang.String)" from="((&quot;Attempt to make an ArrayIterator that &quot; + type) + &quot;s beyond the end of the array. &quot;)" to="((&quot;Attempt to make an ArrayIterator that &quot; + type) % &quot;s beyond the end of the array. &quot;)" />
    <mutant id="mutant_2414" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(k + start1)" to="(k % start1)" />
    <mutant id="mutant_767" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((int)((((size) + mapSize) / (loadFactor)) + 1))" to="(((size) + mapSize) / (loadFactor)) / 1" />
    <mutant id="mutant_768" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.checkCapacity()" from="(data.length) * 2" to="2" />
    <mutant id="mutant_769" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.checkCapacity()" from="(data.length) * 2" to="(data.length) % 2" />
    <mutant id="mutant_763" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((int)((((size) + mapSize) / (loadFactor)) + 1))" to="1" />
    <mutant id="mutant_764" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((int)((((size) + mapSize) / (loadFactor)) + 1))" to="((size) + mapSize) / (loadFactor)" />
    <mutant id="mutant_765" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((int)((((size) + mapSize) / (loadFactor)) + 1))" to="(((size) + mapSize) / (loadFactor)) * 1" />
    <mutant id="mutant_766" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((int)((((size) + mapSize) / (loadFactor)) + 1))" to="(((size) + mapSize) / (loadFactor)) % 1" />
    <mutant id="mutant_1160" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) / &quot; value=&quot;)" />
    <mutant id="mutant_2491" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[i]) - 1" to="(vUp[i]) * 1" />
    <mutant id="mutant_1161" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) % &quot; value=&quot;)" />
    <mutant id="mutant_2492" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[i]) - 1" to="(vUp[i]) % 1" />
    <mutant id="mutant_2490" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[i]) - 1" to="vUp[i]" />
    <mutant id="mutant_1157" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) / key)" />
    <mutant id="mutant_2004" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="(lengthInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2488" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_1158" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="&quot; value=&quot;" />
    <mutant id="mutant_2005" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="(lengthInBits + (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2489" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[i]) - 1" to="1" />
    <mutant id="mutant_1155" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="key" />
    <mutant id="mutant_2002" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherOffsetInBits % (StringKeyAnalyzer.LENGTH))" to="(otherOffsetInBits - (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2486" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="i" />
    <mutant id="mutant_1156" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) * key)" />
    <mutant id="mutant_2003" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherOffsetInBits % (StringKeyAnalyzer.LENGTH))" to="(otherOffsetInBits + (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2487" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_1153" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) % key)" />
    <mutant id="mutant_2000" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherOffsetInBits % (StringKeyAnalyzer.LENGTH))" to="(otherOffsetInBits / (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2484" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_1154" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" />
    <mutant id="mutant_2001" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(otherOffsetInBits % (StringKeyAnalyzer.LENGTH))" to="(otherOffsetInBits * (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_2485" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="1" />
    <mutant id="mutant_1151" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" />
    <mutant id="mutant_2482" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[(i + 1)]) - 1" to="(vUp[(i + 1)]) * 1" />
    <mutant id="mutant_1152" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" to="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) - key)" />
    <mutant id="mutant_2483" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_760" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="(((size) + mapSize) / (loadFactor))" to="((size) + mapSize)" />
    <mutant id="mutant_761" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="(((size) + mapSize) / (loadFactor))" to="(((size) + mapSize) - (loadFactor))" />
    <mutant id="mutant_762" viable="false" in="org.apache.commons.collections4.map.AbstractHashedMap._putAll(java.util.Map)" from="((int)((((size) + mapSize) / (loadFactor)) + 1))" to="(((size) + mapSize) / (loadFactor)) - 1" />
    <mutant id="mutant_2008" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="lengthInBits" />
    <mutant id="mutant_2009" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="(lengthInBits - (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_1159" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;)" to="(((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key)" />
    <mutant id="mutant_2006" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="(StringKeyAnalyzer.LENGTH)" />
    <mutant id="mutant_2007" viable="true" in="org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String,int,int,java.lang.String,int,int)" from="(lengthInBits % (StringKeyAnalyzer.LENGTH))" to="(lengthInBits * (StringKeyAnalyzer.LENGTH))" />
    <mutant id="mutant_778" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.clear()" from="(data.length) - 1" to="(data.length) + 1" />
    <mutant id="mutant_779" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.clear()" from="(data.length) - 1" to="data.length" />
    <mutant id="mutant_774" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.clear()" from="(data.length) - 1" to="(data.length) / 1" />
    <mutant id="mutant_775" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.clear()" from="(data.length) - 1" to="1" />
    <mutant id="mutant_776" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.clear()" from="(data.length) - 1" to="(data.length) % 1" />
    <mutant id="mutant_777" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.clear()" from="(data.length) - 1" to="(data.length) * 1" />
    <mutant id="mutant_2480" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[(i + 1)]) - 1" to="(vUp[(i + 1)]) / 1" />
    <mutant id="mutant_1150" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="&quot; key=&quot;" />
    <mutant id="mutant_2481" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[(i + 1)]) - 1" to="(vUp[(i + 1)]) % 1" />
    <mutant id="mutant_1146" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) % &quot; key=&quot;)" />
    <mutant id="mutant_2477" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[(i + 1)]) - 1" to="1" />
    <mutant id="mutant_1147" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) / &quot; key=&quot;)" />
    <mutant id="mutant_2478" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[(i + 1)]) - 1" to="vUp[(i + 1)]" />
    <mutant id="mutant_1144" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) - (header.before))" />
    <mutant id="mutant_2475" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_1145" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) / (header.before))" />
    <mutant id="mutant_2476" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1142" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;)" />
    <mutant id="mutant_2473" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="i" />
    <mutant id="mutant_1143" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="(header.before)" />
    <mutant id="mutant_2474" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_1140" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) * (header.before))" />
    <mutant id="mutant_2471" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_1141" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before))" to="(((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) % (header.before))" />
    <mutant id="mutant_2472" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="1" />
    <mutant id="mutant_770" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.checkCapacity()" from="(data.length) * 2" to="(data.length) / 2" />
    <mutant id="mutant_771" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.checkCapacity()" from="(data.length) * 2" to="(data.length) + 2" />
    <mutant id="mutant_772" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.checkCapacity()" from="(data.length) * 2" to="(data.length) - 2" />
    <mutant id="mutant_773" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.checkCapacity()" from="(data.length) * 2" to="data.length" />
    <mutant id="mutant_1148" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) - &quot; key=&quot;)" />
    <mutant id="mutant_2479" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vUp[(i + 1)]) - 1" to="(vUp[(i + 1)]) + 1" />
    <mutant id="mutant_1149" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;)" to="((((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) * &quot; key=&quot;)" />
    <mutant id="mutant_305" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Collection)" from="((coll.size()) - 1)" to="coll.size()" />
    <mutant id="mutant_789" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="(last.getKey())" />
    <mutant id="mutant_306" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(end - start)" to="(end + start)" />
    <mutant id="mutant_307" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(end - start)" to="(end % start)" />
    <mutant id="mutant_308" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(end - start)" to="(end / start)" />
    <mutant id="mutant_301" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Collection)" from="((coll.size()) - 1)" to="((coll.size()) * 1)" />
    <mutant id="mutant_785" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.ensureCapacity(int)" from="oldCapacity - 1" to="oldCapacity" />
    <mutant id="mutant_302" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Collection)" from="((coll.size()) - 1)" to="((coll.size()) / 1)" />
    <mutant id="mutant_786" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="(&quot;Iterator[&quot; % (last.getKey()))" />
    <mutant id="mutant_303" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Collection)" from="((coll.size()) - 1)" to="((coll.size()) + 1)" />
    <mutant id="mutant_787" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="(&quot;Iterator[&quot; / (last.getKey()))" />
    <mutant id="mutant_304" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Collection)" from="((coll.size()) - 1)" to="((coll.size()) % 1)" />
    <mutant id="mutant_788" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="(&quot;Iterator[&quot; - (last.getKey()))" />
    <mutant id="mutant_2470" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_309" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(end - start)" to="start" />
    <mutant id="mutant_1135" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;)" to="((&quot;reuse=null, header.after=&quot; + (header.after)) * &quot; header.before&quot;)" />
    <mutant id="mutant_2466" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_1136" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;)" to="(&quot;reuse=null, header.after=&quot; + (header.after))" />
    <mutant id="mutant_2467" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="1" />
    <mutant id="mutant_1133" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;reuse=null, header.after=&quot; + (header.after))" to="(header.after)" />
    <mutant id="mutant_2464" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1134" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;)" to="((&quot;reuse=null, header.after=&quot; + (header.after)) / &quot; header.before&quot;)" />
    <mutant id="mutant_2465" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_1131" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;reuse=null, header.after=&quot; + (header.after))" to="&quot;reuse=null, header.after=&quot;" />
    <mutant id="mutant_2462" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_1132" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;reuse=null, header.after=&quot; + (header.after))" to="(&quot;reuse=null, header.after=&quot; % (header.after))" />
    <mutant id="mutant_2463" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_2460" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="1" />
    <mutant id="mutant_1130" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;reuse=null, header.after=&quot; + (header.after))" to="(&quot;reuse=null, header.after=&quot; - (header.after))" />
    <mutant id="mutant_2461" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="i" />
    <mutant id="mutant_781" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.ensureCapacity(int)" from="oldCapacity - 1" to="oldCapacity % 1" />
    <mutant id="mutant_782" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.ensureCapacity(int)" from="oldCapacity - 1" to="1" />
    <mutant id="mutant_783" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.ensureCapacity(int)" from="oldCapacity - 1" to="oldCapacity / 1" />
    <mutant id="mutant_300" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Collection)" from="((coll.size()) - 1)" to="1" />
    <mutant id="mutant_784" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.ensureCapacity(int)" from="oldCapacity - 1" to="oldCapacity * 1" />
    <mutant id="mutant_1139" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;)" to="((&quot;reuse=null, header.after=&quot; + (header.after)) % &quot; header.before&quot;)" />
    <mutant id="mutant_1137" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;)" to="&quot; header.before&quot;" />
    <mutant id="mutant_2468" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="i" />
    <mutant id="mutant_780" viable="true" in="org.apache.commons.collections4.map.AbstractHashedMap.ensureCapacity(int)" from="oldCapacity - 1" to="oldCapacity + 1" />
    <mutant id="mutant_1138" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((&quot;reuse=null, header.after=&quot; + (header.after)) + &quot; header.before&quot;)" to="((&quot;reuse=null, header.after=&quot; + (header.after)) - &quot; header.before&quot;)" />
    <mutant id="mutant_2469" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_316" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="((end - start) / 2)" to="((end - start) % 2)" />
    <mutant id="mutant_317" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="((end - start) / 2)" to="((end - start) * 2)" />
    <mutant id="mutant_318" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="start + ((end - start) / 2)" to="start / ((end - start) / 2)" />
    <mutant id="mutant_319" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="start + ((end - start) / 2)" to="start - ((end - start) / 2)" />
    <mutant id="mutant_312" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="((end - start) / 2)" to="((end - start) - 2)" />
    <mutant id="mutant_796" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (last.getKey())) % &quot;=&quot;)" />
    <mutant id="mutant_313" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="((end - start) / 2)" to="((end - start) + 2)" />
    <mutant id="mutant_797" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (last.getKey())) * &quot;=&quot;)" />
    <mutant id="mutant_314" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="((end - start) / 2)" to="2" />
    <mutant id="mutant_798" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) - (last.getValue()))" />
    <mutant id="mutant_315" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="((end - start) / 2)" to="(end - start)" />
    <mutant id="mutant_799" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) + (last.getValue()))" to="(((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;) % (last.getValue()))" />
    <mutant id="mutant_1124" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="&quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;" />
    <mutant id="mutant_2455" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="(delta % d)" />
    <mutant id="mutant_1125" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) % &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2456" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="d" />
    <mutant id="mutant_1122" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) - &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2453" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="(delta - d)" />
    <mutant id="mutant_1123" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) / &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2454" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="delta" />
    <mutant id="mutant_1120" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="(((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize))" />
    <mutant id="mutant_2451" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="(delta + d)" />
    <mutant id="mutant_1121" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" to="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) - &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2452" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="(delta / d)" />
    <mutant id="mutant_2450" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta - d)" to="(delta * d)" />
    <mutant id="mutant_792" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (last.getKey())) - &quot;=&quot;)" />
    <mutant id="mutant_793" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="(&quot;Iterator[&quot; + (last.getKey()))" />
    <mutant id="mutant_310" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(end - start)" to="end" />
    <mutant id="mutant_794" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (last.getKey())) / &quot;=&quot;)" />
    <mutant id="mutant_311" viable="true" in="org.apache.commons.collections4.list.TreeList$AVLNode(java.util.Iterator,int,int,int,org.apache.commons.collections4.list.TreeList$AVLNode,org.apache.commons.collections4.list.TreeList$AVLNode)" from="(end - start)" to="(end * start)" />
    <mutant id="mutant_795" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="((&quot;Iterator[&quot; + (last.getKey())) + &quot;=&quot;)" to="&quot;=&quot;" />
    <mutant id="mutant_1128" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;reuse=null, header.after=&quot; + (header.after))" to="(&quot;reuse=null, header.after=&quot; / (header.after))" />
    <mutant id="mutant_2459" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_1129" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(&quot;reuse=null, header.after=&quot; + (header.after))" to="(&quot;reuse=null, header.after=&quot; * (header.after))" />
    <mutant id="mutant_790" viable="false" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="(&quot;Iterator[&quot; * (last.getKey()))" />
    <mutant id="mutant_1126" viable="true" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;)" />
    <mutant id="mutant_2457" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="(delta * d)" />
    <mutant id="mutant_791" viable="true" in="org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.toString()" from="(&quot;Iterator[&quot; + (last.getKey()))" to="&quot;Iterator[&quot;" />
    <mutant id="mutant_1127" viable="false" in="org.apache.commons.collections4.map.LRUMap.addMapping(int,int,K,V)" from="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) + &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" to="(((((((((((((&quot;Entry.after=null, header.after&quot; + (header.after)) + &quot; header.before&quot;) + (header.before)) + &quot; key=&quot;) + key) + &quot; value=&quot;) + value) + &quot; size=&quot;) + (size)) + &quot; maxSize=&quot;) + (maxSize)) + &quot; Please check that your keys are immutable, and that you have used synchronization properly.&quot;) * &quot; If so, then please report this to dev@commons.apache.org as a bug.&quot;)" />
    <mutant id="mutant_2458" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(delta + d)" to="(delta / d)" />
    <mutant id="mutant_9" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="&quot;.&quot;" />
    <mutant id="mutant_206" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) % index)" />
    <mutant id="mutant_8" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="((&quot;No element at index &quot; + (nextIndex)) - &quot;.&quot;)" />
    <mutant id="mutant_207" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) - index)" />
    <mutant id="mutant_208" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="index" />
    <mutant id="mutant_209" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) * index)" />
    <mutant id="mutant_5" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="(&quot;No element at index &quot; % (nextIndex))" />
    <mutant id="mutant_202" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="(&quot;Couldn\'t get the node: &quot; * &quot;index (&quot;)" />
    <mutant id="mutant_686" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;)" to="((&quot;Cannot add Object \'&quot; + object) * &quot;\' - Predicate \'&quot;)" />
    <mutant id="mutant_4" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="(&quot;No element at index &quot; - (nextIndex))" />
    <mutant id="mutant_203" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="&quot;Couldn\'t get the node: &quot;" />
    <mutant id="mutant_687" viable="true" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;)" to="(&quot;Cannot add Object \'&quot; + object)" />
    <mutant id="mutant_7" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="((&quot;No element at index &quot; + (nextIndex)) / &quot;.&quot;)" />
    <mutant id="mutant_204" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" />
    <mutant id="mutant_688" viable="true" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;)" to="&quot;\' - Predicate \'&quot;" />
    <mutant id="mutant_6" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="((&quot;No element at index &quot; + (nextIndex)) * &quot;.&quot;)" />
    <mutant id="mutant_205" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) / index)" />
    <mutant id="mutant_689" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;)" to="((&quot;Cannot add Object \'&quot; + object) / &quot;\' - Predicate \'&quot;)" />
    <mutant id="mutant_85" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((offset) + index)" to="offset" />
    <mutant id="mutant_2293" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(sum % 2)" to="(sum - 2)" />
    <mutant id="mutant_84" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((offset) + index)" to="((offset) % index)" />
    <mutant id="mutant_2294" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(sum % 2)" to="(sum / 2)" />
    <mutant id="mutant_87" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((offset) + index)" to="index" />
    <mutant id="mutant_2291" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(sum % 2)" to="2" />
    <mutant id="mutant_86" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((offset) + index)" to="((offset) - index)" />
    <mutant id="mutant_2292" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(sum % 2)" to="(sum * 2)" />
    <mutant id="mutant_89" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((offset) + index)" to="((offset) / index)" />
    <mutant id="mutant_88" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((offset) + index)" to="((offset) * index)" />
    <mutant id="mutant_2290" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="n + m" to="m" />
    <mutant id="mutant_90" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(fromIndexInclusive + (offset))" to="offset" />
    <mutant id="mutant_2288" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="n + m" to="n * m" />
    <mutant id="mutant_2289" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="n + m" to="n" />
    <mutant id="mutant_92" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(fromIndexInclusive + (offset))" to="(fromIndexInclusive % (offset))" />
    <mutant id="mutant_2286" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="n + m" to="n % m" />
    <mutant id="mutant_91" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(fromIndexInclusive + (offset))" to="(fromIndexInclusive * (offset))" />
    <mutant id="mutant_2287" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="n + m" to="n / m" />
    <mutant id="mutant_94" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(fromIndexInclusive + (offset))" to="fromIndexInclusive" />
    <mutant id="mutant_2284" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="m - n" to="m + n" />
    <mutant id="mutant_93" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(fromIndexInclusive + (offset))" to="(fromIndexInclusive - (offset))" />
    <mutant id="mutant_2285" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="n + m" to="n - m" />
    <mutant id="mutant_1" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="(nextIndex)" />
    <mutant id="mutant_682" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(&quot;Cannot add Object \'&quot; + object)" to="(&quot;Cannot add Object \'&quot; * object)" />
    <mutant id="mutant_0" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="&quot;No element at index &quot;" />
    <mutant id="mutant_683" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(&quot;Cannot add Object \'&quot; + object)" to="(&quot;Cannot add Object \'&quot; / object)" />
    <mutant id="mutant_3" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="(&quot;No element at index &quot; * (nextIndex))" />
    <mutant id="mutant_200" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="(&quot;Couldn\'t get the node: &quot; % &quot;index (&quot;)" />
    <mutant id="mutant_684" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;)" to="((&quot;Cannot add Object \'&quot; + object) - &quot;\' - Predicate \'&quot;)" />
    <mutant id="mutant_2" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="(&quot;No element at index &quot; + (nextIndex))" to="(&quot;No element at index &quot; / (nextIndex))" />
    <mutant id="mutant_201" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="(&quot;Couldn\'t get the node: &quot; - &quot;index (&quot;)" />
    <mutant id="mutant_685" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;)" to="((&quot;Cannot add Object \'&quot; + object) % &quot;\' - Predicate \'&quot;)" />
    <mutant id="mutant_680" viable="true" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(&quot;Cannot add Object \'&quot; + object)" to="&quot;Cannot add Object \'&quot;" />
    <mutant id="mutant_681" viable="true" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(&quot;Cannot add Object \'&quot; + object)" to="object" />
    <mutant id="mutant_217" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="(&quot;Couldn\'t get the node: &quot; / &quot;index (&quot;)" />
    <mutant id="mutant_218" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="(&quot;Couldn\'t get the node: &quot; % &quot;index (&quot;)" />
    <mutant id="mutant_219" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="(&quot;Couldn\'t get the node: &quot; - &quot;index (&quot;)" />
    <mutant id="mutant_213" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) is the size of the list.&quot;)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) - &quot;) is the size of the list.&quot;)" />
    <mutant id="mutant_697" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) + &quot;\' rejected it&quot;)" to="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) * &quot;\' rejected it&quot;)" />
    <mutant id="mutant_214" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) is the size of the list.&quot;)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) % &quot;) is the size of the list.&quot;)" />
    <mutant id="mutant_698" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) + &quot;\' rejected it&quot;)" to="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) - &quot;\' rejected it&quot;)" />
    <mutant id="mutant_215" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) is the size of the list.&quot;)" to="&quot;) is the size of the list.&quot;" />
    <mutant id="mutant_699" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) + &quot;\' rejected it&quot;)" to="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) % &quot;\' rejected it&quot;)" />
    <mutant id="mutant_216" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="&quot;index (&quot;" />
    <mutant id="mutant_74" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.set(int,E)" from="(index + (offset))" to="(index / (offset))" />
    <mutant id="mutant_2282" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="m - n" to="m" />
    <mutant id="mutant_73" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.set(int,E)" from="(index + (offset))" to="(index * (offset))" />
    <mutant id="mutant_2283" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="m - n" to="m * n" />
    <mutant id="mutant_76" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.set(int,E)" from="(index + (offset))" to="(index - (offset))" />
    <mutant id="mutant_2280" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="m - n" to="n" />
    <mutant id="mutant_75" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.set(int,E)" from="(index + (offset))" to="index" />
    <mutant id="mutant_2281" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="m - n" to="m % n" />
    <mutant id="mutant_78" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((size) + 1)" to="1" />
    <mutant id="mutant_77" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.set(int,E)" from="(index + (offset))" to="(index % (offset))" />
    <mutant id="mutant_79" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((size) + 1)" to="size" />
    <mutant id="mutant_2279" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="m - n" to="m / n" />
    <mutant id="mutant_2277" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end2 - start2" to="end2" />
    <mutant id="mutant_2278" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end2 - start2" to="start2" />
    <mutant id="mutant_81" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((size) + 1)" to="((size) - 1)" />
    <mutant id="mutant_2275" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end2 - start2" to="end2 / start2" />
    <mutant id="mutant_80" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((size) + 1)" to="((size) % 1)" />
    <mutant id="mutant_2276" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end2 - start2" to="end2 % start2" />
    <mutant id="mutant_83" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((size) + 1)" to="((size) / 1)" />
    <mutant id="mutant_2273" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end2 - start2" to="end2 * start2" />
    <mutant id="mutant_82" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.addAll(int,java.util.Collection)" from="((size) + 1)" to="((size) * 1)" />
    <mutant id="mutant_2274" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end2 - start2" to="end2 + start2" />
    <mutant id="mutant_693" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate))" to="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) % (predicate))" />
    <mutant id="mutant_210" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) is the size of the list.&quot;)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) * &quot;) is the size of the list.&quot;)" />
    <mutant id="mutant_694" viable="true" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate))" to="(predicate)" />
    <mutant id="mutant_211" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) is the size of the list.&quot;)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" />
    <mutant id="mutant_695" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate))" to="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) / (predicate))" />
    <mutant id="mutant_212" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) is the size of the list.&quot;)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) / &quot;) is the size of the list.&quot;)" />
    <mutant id="mutant_696" viable="true" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="((((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate)) + &quot;\' rejected it&quot;)" to="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate))" />
    <mutant id="mutant_690" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate))" to="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) - (predicate))" />
    <mutant id="mutant_691" viable="true" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate))" to="((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;)" />
    <mutant id="mutant_692" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) + (predicate))" to="(((&quot;Cannot add Object \'&quot; + object) + &quot;\' - Predicate \'&quot;) * (predicate))" />
    <mutant id="mutant_228" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" />
    <mutant id="mutant_229" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) / &quot;) greater than the size of the &quot;)" />
    <mutant id="mutant_224" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) % index)" />
    <mutant id="mutant_225" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) - index)" />
    <mutant id="mutant_226" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="index" />
    <mutant id="mutant_227" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) * index)" />
    <mutant id="mutant_2271" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 - start1" to="end1" />
    <mutant id="mutant_2272" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 - start1" to="end1 * start1" />
    <mutant id="mutant_2270" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 - start1" to="end1 % start1" />
    <mutant id="mutant_2268" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 - start1" to="start1" />
    <mutant id="mutant_2269" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 - start1" to="end1 / start1" />
    <mutant id="mutant_2266" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="(end % diag)" />
    <mutant id="mutant_2267" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 - start1" to="end1 + start1" />
    <mutant id="mutant_2264" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="(end + diag)" />
    <mutant id="mutant_2265" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="end" />
    <mutant id="mutant_2262" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="(end * diag)" />
    <mutant id="mutant_2263" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="(end / diag)" />
    <mutant id="mutant_220" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="(&quot;Couldn\'t get the node: &quot; * &quot;index (&quot;)" />
    <mutant id="mutant_221" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" to="&quot;Couldn\'t get the node: &quot;" />
    <mutant id="mutant_222" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="(&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;)" />
    <mutant id="mutant_223" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index)" to="((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) / index)" />
    <mutant id="mutant_239" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;)" />
    <mutant id="mutant_235" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;)" to="&quot;list (&quot;" />
    <mutant id="mutant_236" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;)" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) / &quot;list (&quot;)" />
    <mutant id="mutant_237" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;)" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) * &quot;list (&quot;)" />
    <mutant id="mutant_238" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;)" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) - &quot;list (&quot;)" />
    <mutant id="mutant_96" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(toIndexExclusive + (offset))" to="offset" />
    <mutant id="mutant_2260" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="(end % diag)" />
    <mutant id="mutant_95" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(fromIndexInclusive + (offset))" to="(fromIndexInclusive / (offset))" />
    <mutant id="mutant_2261" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="diag" />
    <mutant id="mutant_98" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(toIndexExclusive + (offset))" to="(toIndexExclusive / (offset))" />
    <mutant id="mutant_97" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(toIndexExclusive + (offset))" to="toIndexExclusive" />
    <mutant id="mutant_99" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.subList(int,int)" from="(toIndexExclusive + (offset))" to="(toIndexExclusive * (offset))" />
    <mutant id="mutant_2257" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="(end / diag)" />
    <mutant id="mutant_2258" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="(end + diag)" />
    <mutant id="mutant_2255" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="diag" />
    <mutant id="mutant_2256" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="(end * diag)" />
    <mutant id="mutant_2253" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size())) + 2" to="((sequence1.size()) + (sequence2.size())) / 2" />
    <mutant id="mutant_2254" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size())) + 2" to="((sequence1.size()) + (sequence2.size())) - 2" />
    <mutant id="mutant_2251" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size())) + 2" to="((sequence1.size()) + (sequence2.size())) * 2" />
    <mutant id="mutant_2252" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator(java.util.List,java.util.List,org.apache.commons.collections4.Equator)" from="((sequence1.size()) + (sequence2.size())) + 2" to="(sequence1.size()) + (sequence2.size())" />
    <mutant id="mutant_231" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) * &quot;) greater than the size of the &quot;)" />
    <mutant id="mutant_232" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) % &quot;) greater than the size of the &quot;)" />
    <mutant id="mutant_233" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;)" to="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) - &quot;) greater than the size of the &quot;)" />
    <mutant id="mutant_234" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;)" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) % &quot;list (&quot;)" />
    <mutant id="mutant_2259" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.buildSnake(int,int,int,int)" from="(end - diag)" to="end" />
    <mutant id="mutant_230" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;)" to="&quot;) greater than the size of the &quot;" />
    <mutant id="mutant_246" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) + &quot;).&quot;)" to="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) - &quot;).&quot;)" />
    <mutant id="mutant_247" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) + &quot;).&quot;)" to="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) / &quot;).&quot;)" />
    <mutant id="mutant_248" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) + &quot;).&quot;)" to="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size))" />
    <mutant id="mutant_249" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) + &quot;).&quot;)" to="&quot;).&quot;" />
    <mutant id="mutant_242" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size))" to="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) - (size))" />
    <mutant id="mutant_243" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size))" to="(size)" />
    <mutant id="mutant_244" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size))" to="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) * (size))" />
    <mutant id="mutant_245" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size))" to="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) % (size))" />
    <mutant id="mutant_240" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size))" to="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) / (size))" />
    <mutant id="mutant_241" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="(((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size))" to="((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;)" />
    <mutant id="mutant_257" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((size) / 2)" to="((size) + 2)" />
    <mutant id="mutant_258" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(index + (sub.offset))" to="sub.offset" />
    <mutant id="mutant_259" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(index + (sub.offset))" to="(index * (sub.offset))" />
    <mutant id="mutant_253" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((size) / 2)" to="2" />
    <mutant id="mutant_254" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((size) / 2)" to="((size) * 2)" />
    <mutant id="mutant_255" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((size) / 2)" to="((size) - 2)" />
    <mutant id="mutant_256" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((size) / 2)" to="(size)" />
    <mutant id="mutant_250" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) + &quot;).&quot;)" to="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) * &quot;).&quot;)" />
    <mutant id="mutant_251" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) + &quot;).&quot;)" to="((((((&quot;Couldn\'t get the node: &quot; + &quot;index (&quot;) + index) + &quot;) greater than the size of the &quot;) + &quot;list (&quot;) + (size)) % &quot;).&quot;)" />
    <mutant id="mutant_252" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList.getNode(int,boolean)" from="((size) / 2)" to="((size) % 2)" />
    <mutant id="mutant_268" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="(super.nextIndex()) % (sub.offset)" />
    <mutant id="mutant_269" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="(super.nextIndex()) + (sub.offset)" />
    <mutant id="mutant_264" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="sub.offset" />
    <mutant id="mutant_265" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="super.nextIndex()" />
    <mutant id="mutant_266" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="(super.nextIndex()) / (sub.offset)" />
    <mutant id="mutant_267" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor.nextIndex()" from="(super.nextIndex()) - (sub.offset)" to="(super.nextIndex()) * (sub.offset)" />
    <mutant id="mutant_260" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(index + (sub.offset))" to="(index / (sub.offset))" />
    <mutant id="mutant_261" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(index + (sub.offset))" to="index" />
    <mutant id="mutant_262" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(index + (sub.offset))" to="(index - (sub.offset))" />
    <mutant id="mutant_263" viable="true" in="org.apache.commons.collections4.list.CursorableLinkedList$SubCursor(org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,int)" from="(index + (sub.offset))" to="(index % (sub.offset))" />
    <mutant id="mutant_279" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="((index - size) + 1)" to="((index - size) * 1)" />
    <mutant id="mutant_2299" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="sum + 1" to="sum - 1" />
    <mutant id="mutant_270" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="(index - size)" to="size" />
    <mutant id="mutant_2297" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="sum + 1" to="1" />
    <mutant id="mutant_2298" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="sum + 1" to="sum % 1" />
    <mutant id="mutant_2295" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(sum % 2)" to="(sum + 2)" />
    <mutant id="mutant_2296" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(sum % 2)" to="sum" />
    <mutant id="mutant_275" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="(index - size)" to="(index + size)" />
    <mutant id="mutant_276" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="((index - size) + 1)" to="((index - size) - 1)" />
    <mutant id="mutant_277" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="((index - size) + 1)" to="1" />
    <mutant id="mutant_278" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="((index - size) + 1)" to="((index - size) / 1)" />
    <mutant id="mutant_271" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="(index - size)" to="(index % size)" />
    <mutant id="mutant_272" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="(index - size)" to="(index / size)" />
    <mutant id="mutant_273" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="(index - size)" to="(index * size)" />
    <mutant id="mutant_274" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="(index - size)" to="index" />
    <mutant id="mutant_280" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="((index - size) + 1)" to="((index - size) % 1)" />
    <mutant id="mutant_281" viable="true" in="org.apache.commons.collections4.list.GrowthList.set(int,E)" from="((index - size) + 1)" to="(index - size)" />
    <mutant id="mutant_286" viable="true" in="org.apache.commons.collections4.list.GrowthList.addAll(int,java.util.Collection)" from="(index - size)" to="index" />
    <mutant id="mutant_287" viable="true" in="org.apache.commons.collections4.list.GrowthList.addAll(int,java.util.Collection)" from="(index - size)" to="(index + size)" />
    <mutant id="mutant_288" viable="true" in="org.apache.commons.collections4.list.GrowthList.add(int,E)" from="(index - size)" to="size" />
    <mutant id="mutant_289" viable="true" in="org.apache.commons.collections4.list.GrowthList.add(int,E)" from="(index - size)" to="(index % size)" />
    <mutant id="mutant_282" viable="true" in="org.apache.commons.collections4.list.GrowthList.addAll(int,java.util.Collection)" from="(index - size)" to="size" />
    <mutant id="mutant_283" viable="true" in="org.apache.commons.collections4.list.GrowthList.addAll(int,java.util.Collection)" from="(index - size)" to="(index % size)" />
    <mutant id="mutant_284" viable="true" in="org.apache.commons.collections4.list.GrowthList.addAll(int,java.util.Collection)" from="(index - size)" to="(index / size)" />
    <mutant id="mutant_285" viable="true" in="org.apache.commons.collections4.list.GrowthList.addAll(int,java.util.Collection)" from="(index - size)" to="(index * size)" />
    <mutant id="mutant_290" viable="true" in="org.apache.commons.collections4.list.GrowthList.add(int,E)" from="(index - size)" to="(index / size)" />
    <mutant id="mutant_291" viable="true" in="org.apache.commons.collections4.list.GrowthList.add(int,E)" from="(index - size)" to="(index * size)" />
    <mutant id="mutant_292" viable="true" in="org.apache.commons.collections4.list.GrowthList.add(int,E)" from="(index - size)" to="index" />
    <mutant id="mutant_297" viable="true" in="org.apache.commons.collections4.list.NodeCachingLinkedList.removeAllNodes()" from="((maximumCacheSize) - (cacheSize))" to="cacheSize" />
    <mutant id="mutant_298" viable="true" in="org.apache.commons.collections4.list.NodeCachingLinkedList.removeAllNodes()" from="((maximumCacheSize) - (cacheSize))" to="((maximumCacheSize) + (cacheSize))" />
    <mutant id="mutant_299" viable="true" in="org.apache.commons.collections4.list.NodeCachingLinkedList.removeAllNodes()" from="((maximumCacheSize) - (cacheSize))" to="((maximumCacheSize) % (cacheSize))" />
    <mutant id="mutant_293" viable="true" in="org.apache.commons.collections4.list.GrowthList.add(int,E)" from="(index - size)" to="(index + size)" />
    <mutant id="mutant_294" viable="true" in="org.apache.commons.collections4.list.NodeCachingLinkedList.removeAllNodes()" from="((maximumCacheSize) - (cacheSize))" to="maximumCacheSize" />
    <mutant id="mutant_295" viable="true" in="org.apache.commons.collections4.list.NodeCachingLinkedList.removeAllNodes()" from="((maximumCacheSize) - (cacheSize))" to="((maximumCacheSize) * (cacheSize))" />
    <mutant id="mutant_296" viable="true" in="org.apache.commons.collections4.list.NodeCachingLinkedList.removeAllNodes()" from="((maximumCacheSize) - (cacheSize))" to="((maximumCacheSize) / (cacheSize))" />
    <mutant id="mutant_27" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;toIndex = &quot; + toIndex)" to="(&quot;toIndex = &quot; - toIndex)" />
    <mutant id="mutant_26" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;toIndex = &quot; + toIndex)" to="(&quot;toIndex = &quot; % toIndex)" />
    <mutant id="mutant_29" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;toIndex = &quot; + toIndex)" to="toIndex" />
    <mutant id="mutant_28" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;toIndex = &quot; + toIndex)" to="&quot;toIndex = &quot;" />
    <mutant id="mutant_21" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex = &quot; + fromIndex)" to="&quot;fromIndex = &quot;" />
    <mutant id="mutant_20" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex = &quot; + fromIndex)" to="(&quot;fromIndex = &quot; - fromIndex)" />
    <mutant id="mutant_23" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex = &quot; + fromIndex)" to="fromIndex" />
    <mutant id="mutant_22" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex = &quot; + fromIndex)" to="(&quot;fromIndex = &quot; % fromIndex)" />
    <mutant id="mutant_25" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;toIndex = &quot; + toIndex)" to="(&quot;toIndex = &quot; / toIndex)" />
    <mutant id="mutant_24" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;toIndex = &quot; + toIndex)" to="(&quot;toIndex = &quot; * toIndex)" />
    <mutant id="mutant_16" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.previousIndex()" from="(nextIndex()) - 1" to="(nextIndex()) / 1" />
    <mutant id="mutant_15" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.previousIndex()" from="(nextIndex()) - 1" to="(nextIndex()) % 1" />
    <mutant id="mutant_18" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex = &quot; + fromIndex)" to="(&quot;fromIndex = &quot; * fromIndex)" />
    <mutant id="mutant_17" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.previousIndex()" from="(nextIndex()) - 1" to="(nextIndex()) * 1" />
    <mutant id="mutant_19" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex = &quot; + fromIndex)" to="(&quot;fromIndex = &quot; / fromIndex)" />
    <mutant id="mutant_10" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="(&quot;No element at index &quot; + (nextIndex))" />
    <mutant id="mutant_12" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.previousIndex()" from="(nextIndex()) - 1" to="1" />
    <mutant id="mutant_11" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.next()" from="((&quot;No element at index &quot; + (nextIndex)) + &quot;.&quot;)" to="((&quot;No element at index &quot; + (nextIndex)) % &quot;.&quot;)" />
    <mutant id="mutant_14" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.previousIndex()" from="(nextIndex()) - 1" to="nextIndex()" />
    <mutant id="mutant_13" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator.previousIndex()" from="(nextIndex()) - 1" to="(nextIndex()) + 1" />
    <mutant id="mutant_49" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) + &quot;)&quot;)" to="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) % &quot;)&quot;)" />
    <mutant id="mutant_48" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) + &quot;)&quot;)" to="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) * &quot;)&quot;)" />
    <mutant id="mutant_1838" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="(existingObj + &quot; not known to &quot;)" to="(existingObj / &quot; not known to &quot;)" />
    <mutant id="mutant_1839" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="(existingObj + &quot; not known to &quot;)" to="(existingObj - &quot; not known to &quot;)" />
    <mutant id="mutant_41" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;)" to="((&quot;fromIndex(&quot; + fromIndex) - &quot;) &gt; toIndex(&quot;)" />
    <mutant id="mutant_40" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;)" to="&quot;) &gt; toIndex(&quot;" />
    <mutant id="mutant_43" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex)" to="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) * toIndex)" />
    <mutant id="mutant_42" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex)" to="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) - toIndex)" />
    <mutant id="mutant_45" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex)" to="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) / toIndex)" />
    <mutant id="mutant_44" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex)" to="((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;)" />
    <mutant id="mutant_47" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex)" to="toIndex" />
    <mutant id="mutant_46" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex)" to="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) % toIndex)" />
    <mutant id="mutant_50" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) + &quot;)&quot;)" to="(((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex)" />
    <mutant id="mutant_1836" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="(existingObj + &quot; not known to &quot;)" to="(existingObj % &quot; not known to &quot;)" />
    <mutant id="mutant_1837" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="(existingObj + &quot; not known to &quot;)" to="existingObj" />
    <mutant id="mutant_1834" viable="true" in="org.apache.commons.collections4.comparators.ComparatorChain.addComparator(java.util.Comparator,boolean)" from="((comparatorChain.size()) - 1)" to="comparatorChain.size()" />
    <mutant id="mutant_1835" viable="true" in="org.apache.commons.collections4.comparators.ComparatorChain.addComparator(java.util.Comparator,boolean)" from="((comparatorChain.size()) - 1)" to="((comparatorChain.size()) + 1)" />
    <mutant id="mutant_1832" viable="true" in="org.apache.commons.collections4.comparators.ComparatorChain.addComparator(java.util.Comparator,boolean)" from="((comparatorChain.size()) - 1)" to="((comparatorChain.size()) % 1)" />
    <mutant id="mutant_1833" viable="true" in="org.apache.commons.collections4.comparators.ComparatorChain.addComparator(java.util.Comparator,boolean)" from="((comparatorChain.size()) - 1)" to="((comparatorChain.size()) * 1)" />
    <mutant id="mutant_1830" viable="true" in="org.apache.commons.collections4.comparators.ComparatorChain.addComparator(java.util.Comparator,boolean)" from="((comparatorChain.size()) - 1)" to="((comparatorChain.size()) / 1)" />
    <mutant id="mutant_1831" viable="true" in="org.apache.commons.collections4.comparators.ComparatorChain.addComparator(java.util.Comparator,boolean)" from="((comparatorChain.size()) - 1)" to="1" />
    <mutant id="mutant_38" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;)" to="(&quot;fromIndex(&quot; + fromIndex)" />
    <mutant id="mutant_37" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;)" to="((&quot;fromIndex(&quot; + fromIndex) % &quot;) &gt; toIndex(&quot;)" />
    <mutant id="mutant_39" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;)" to="((&quot;fromIndex(&quot; + fromIndex) / &quot;) &gt; toIndex(&quot;)" />
    <mutant id="mutant_1829" viable="true" in="org.apache.commons.collections4.comparators.BooleanComparator.hashCode()" from="(-1) * hash" to="(-1) - hash" />
    <mutant id="mutant_1827" viable="true" in="org.apache.commons.collections4.comparators.BooleanComparator.hashCode()" from="(-1) * hash" to="-1" />
    <mutant id="mutant_1828" viable="true" in="org.apache.commons.collections4.comparators.BooleanComparator.hashCode()" from="(-1) * hash" to="(-1) % hash" />
    <mutant id="mutant_30" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex(&quot; + fromIndex)" to="(&quot;fromIndex(&quot; - fromIndex)" />
    <mutant id="mutant_32" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex(&quot; + fromIndex)" to="&quot;fromIndex(&quot;" />
    <mutant id="mutant_31" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex(&quot; + fromIndex)" to="(&quot;fromIndex(&quot; % fromIndex)" />
    <mutant id="mutant_34" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex(&quot; + fromIndex)" to="(&quot;fromIndex(&quot; / fromIndex)" />
    <mutant id="mutant_33" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex(&quot; + fromIndex)" to="(&quot;fromIndex(&quot; * fromIndex)" />
    <mutant id="mutant_36" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;)" to="((&quot;fromIndex(&quot; + fromIndex) * &quot;) &gt; toIndex(&quot;)" />
    <mutant id="mutant_35" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="(&quot;fromIndex(&quot; + fromIndex)" to="fromIndex" />
    <mutant id="mutant_1825" viable="true" in="org.apache.commons.collections4.comparators.BooleanComparator.hashCode()" from="(-1) * hash" to="(-1) / hash" />
    <mutant id="mutant_1826" viable="true" in="org.apache.commons.collections4.comparators.BooleanComparator.hashCode()" from="(-1) * hash" to="(-1) + hash" />
    <mutant id="mutant_1823" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) + &quot;\&quot;) in this Map&quot;)" to="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) / &quot;\&quot;) in this Map&quot;)" />
    <mutant id="mutant_1824" viable="true" in="org.apache.commons.collections4.comparators.BooleanComparator.hashCode()" from="(-1) * hash" to="hash" />
    <mutant id="mutant_1821" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) + &quot;\&quot;) in this Map&quot;)" to="&quot;\&quot;) in this Map&quot;" />
    <mutant id="mutant_1822" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) + &quot;\&quot;) in this Map&quot;)" to="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) - &quot;\&quot;) in this Map&quot;)" />
    <mutant id="mutant_1820" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) + &quot;\&quot;) in this Map&quot;)" to="(&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE)))" />
    <mutant id="mutant_1818" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) + &quot;\&quot;) in this Map&quot;)" to="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) * &quot;\&quot;) in this Map&quot;)" />
    <mutant id="mutant_1819" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) + &quot;\&quot;) in this Map&quot;)" to="((&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE))) % &quot;\&quot;) in this Map&quot;)" />
    <mutant id="mutant_1816" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="(&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE)))" to="(&quot;Cannot store a duplicate value (\&quot;&quot; % (newNode.getData(TreeBidiMap.DataElement.VALUE)))" />
    <mutant id="mutant_1817" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="(&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE)))" to="(&quot;Cannot store a duplicate value (\&quot;&quot; / (newNode.getData(TreeBidiMap.DataElement.VALUE)))" />
    <mutant id="mutant_63" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.get(int)" from="(index + (offset))" to="index" />
    <mutant id="mutant_62" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.get(int)" from="(index + (offset))" to="(index / (offset))" />
    <mutant id="mutant_65" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.get(int)" from="(index + (offset))" to="(index % (offset))" />
    <mutant id="mutant_64" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.get(int)" from="(index + (offset))" to="(index - (offset))" />
    <mutant id="mutant_67" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.remove(int)" from="(index + (offset))" to="(index * (offset))" />
    <mutant id="mutant_66" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.remove(int)" from="(index + (offset))" to="offset" />
    <mutant id="mutant_69" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.remove(int)" from="(index + (offset))" to="index" />
    <mutant id="mutant_68" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.remove(int)" from="(index + (offset))" to="(index / (offset))" />
    <mutant id="mutant_70" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.remove(int)" from="(index + (offset))" to="(index - (offset))" />
    <mutant id="mutant_72" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.set(int,E)" from="(index + (offset))" to="offset" />
    <mutant id="mutant_71" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.remove(int)" from="(index + (offset))" to="(index % (offset))" />
    <mutant id="mutant_1814" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="(&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE)))" to="(&quot;Cannot store a duplicate value (\&quot;&quot; - (newNode.getData(TreeBidiMap.DataElement.VALUE)))" />
    <mutant id="mutant_1815" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="(&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE)))" to="(newNode.getData(TreeBidiMap.DataElement.VALUE))" />
    <mutant id="mutant_1812" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="(&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE)))" to="&quot;Cannot store a duplicate value (\&quot;&quot;" />
    <mutant id="mutant_1813" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)" from="(&quot;Cannot store a duplicate value (\&quot;&quot; + (newNode.getData(TreeBidiMap.DataElement.VALUE)))" to="(&quot;Cannot store a duplicate value (\&quot;&quot; * (newNode.getData(TreeBidiMap.DataElement.VALUE)))" />
    <mutant id="mutant_1810" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) + &quot;\&quot;) in this Map&quot;)" to="&quot;\&quot;) in this Map&quot;" />
    <mutant id="mutant_1811" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) + &quot;\&quot;) in this Map&quot;)" to="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) / &quot;\&quot;) in this Map&quot;)" />
    <mutant id="mutant_59" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="toIndex - fromIndex" to="fromIndex" />
    <mutant id="mutant_1809" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) + &quot;\&quot;) in this Map&quot;)" to="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) * &quot;\&quot;) in this Map&quot;)" />
    <mutant id="mutant_1807" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) + &quot;\&quot;) in this Map&quot;)" to="(&quot;Cannot store a duplicate key (\&quot;&quot; + key)" />
    <mutant id="mutant_1808" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) + &quot;\&quot;) in this Map&quot;)" to="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) - &quot;\&quot;) in this Map&quot;)" />
    <mutant id="mutant_1805" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="(&quot;Cannot store a duplicate key (\&quot;&quot; + key)" to="(&quot;Cannot store a duplicate key (\&quot;&quot; * key)" />
    <mutant id="mutant_1806" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) + &quot;\&quot;) in this Map&quot;)" to="((&quot;Cannot store a duplicate key (\&quot;&quot; + key) % &quot;\&quot;) in this Map&quot;)" />
    <mutant id="mutant_52" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) + &quot;)&quot;)" to="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) / &quot;)&quot;)" />
    <mutant id="mutant_51" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) + &quot;)&quot;)" to="&quot;)&quot;" />
    <mutant id="mutant_54" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="toIndex - fromIndex" to="toIndex + fromIndex" />
    <mutant id="mutant_53" viable="false" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) + &quot;)&quot;)" to="((((&quot;fromIndex(&quot; + fromIndex) + &quot;) &gt; toIndex(&quot;) + toIndex) - &quot;)&quot;)" />
    <mutant id="mutant_56" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="toIndex - fromIndex" to="toIndex / fromIndex" />
    <mutant id="mutant_55" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="toIndex - fromIndex" to="toIndex * fromIndex" />
    <mutant id="mutant_58" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="toIndex - fromIndex" to="toIndex" />
    <mutant id="mutant_57" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList(org.apache.commons.collections4.list.AbstractLinkedList,int,int)" from="toIndex - fromIndex" to="toIndex % fromIndex" />
    <mutant id="mutant_61" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.get(int)" from="(index + (offset))" to="(index * (offset))" />
    <mutant id="mutant_60" viable="true" in="org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList.get(int)" from="(index + (offset))" to="offset" />
    <mutant id="mutant_1803" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="(&quot;Cannot store a duplicate key (\&quot;&quot; + key)" to="key" />
    <mutant id="mutant_1804" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="(&quot;Cannot store a duplicate key (\&quot;&quot; + key)" to="(&quot;Cannot store a duplicate key (\&quot;&quot; / key)" />
    <mutant id="mutant_1801" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="(&quot;Cannot store a duplicate key (\&quot;&quot; + key)" to="(&quot;Cannot store a duplicate key (\&quot;&quot; % key)" />
    <mutant id="mutant_1802" viable="true" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="(&quot;Cannot store a duplicate key (\&quot;&quot; + key)" to="&quot;Cannot store a duplicate key (\&quot;&quot;" />
    <mutant id="mutant_1800" viable="false" in="org.apache.commons.collections4.bidimap.TreeBidiMap.doPut(K,V)" from="(&quot;Cannot store a duplicate key (\&quot;&quot; + key)" to="(&quot;Cannot store a duplicate key (\&quot;&quot; - key)" />
    <mutant id="mutant_2729" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="((list.size()) + (size))" to="((list.size()) * (size))" />
    <mutant id="mutant_1872" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="total" />
    <mutant id="mutant_2720" viable="false" in="org.apache.commons.collections4.CollectionUtils.checkIndexBounds(int)" from="(&quot;Index cannot be negative: &quot; + index)" to="(&quot;Index cannot be negative: &quot; * index)" />
    <mutant id="mutant_1873" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="37" />
    <mutant id="mutant_1870" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((map) == null ? 0 : map.hashCode())" to="total * 37" />
    <mutant id="mutant_1871" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((map) == null ? 0 : map.hashCode())" to="(total * 37) * ((map) == null ? 0 : map.hashCode())" />
    <mutant id="mutant_2728" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="((list.size()) + (size))" to="((list.size()) / (size))" />
    <mutant id="mutant_2727" viable="true" in="org.apache.commons.collections4.CollectionUtils.reverseArray(java.lang.Object[])" from="(array.length) - 1" to="array.length" />
    <mutant id="mutant_1878" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())" to="(total * 37) * ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())" />
    <mutant id="mutant_2726" viable="true" in="org.apache.commons.collections4.CollectionUtils.reverseArray(java.lang.Object[])" from="(array.length) - 1" to="(array.length) + 1" />
    <mutant id="mutant_1879" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())" to="(total * 37) / ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())" />
    <mutant id="mutant_2725" viable="true" in="org.apache.commons.collections4.CollectionUtils.reverseArray(java.lang.Object[])" from="(array.length) - 1" to="(array.length) * 1" />
    <mutant id="mutant_1876" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total - 37)" />
    <mutant id="mutant_2724" viable="true" in="org.apache.commons.collections4.CollectionUtils.reverseArray(java.lang.Object[])" from="(array.length) - 1" to="(array.length) % 1" />
    <mutant id="mutant_1877" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total % 37)" />
    <mutant id="mutant_2723" viable="true" in="org.apache.commons.collections4.CollectionUtils.reverseArray(java.lang.Object[])" from="(array.length) - 1" to="1" />
    <mutant id="mutant_1874" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total + 37)" />
    <mutant id="mutant_2722" viable="true" in="org.apache.commons.collections4.CollectionUtils.reverseArray(java.lang.Object[])" from="(array.length) - 1" to="(array.length) / 1" />
    <mutant id="mutant_1875" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total / 37)" />
    <mutant id="mutant_2721" viable="false" in="org.apache.commons.collections4.CollectionUtils.checkIndexBounds(int)" from="(&quot;Index cannot be negative: &quot; + index)" to="(&quot;Index cannot be negative: &quot; - index)" />
    <mutant id="mutant_2719" viable="false" in="org.apache.commons.collections4.CollectionUtils.checkIndexBounds(int)" from="(&quot;Index cannot be negative: &quot; + index)" to="index" />
    <mutant id="mutant_2718" viable="true" in="org.apache.commons.collections4.CollectionUtils.checkIndexBounds(int)" from="(&quot;Index cannot be negative: &quot; + index)" to="&quot;Index cannot be negative: &quot;" />
    <mutant id="mutant_1861" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="37" />
    <mutant id="mutant_1862" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total + 37)" />
    <mutant id="mutant_1860" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="total" />
    <mutant id="mutant_1869" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((map) == null ? 0 : map.hashCode())" to="(map) == null ? 0 : map.hashCode()" />
    <mutant id="mutant_2717" viable="false" in="org.apache.commons.collections4.CollectionUtils.checkIndexBounds(int)" from="(&quot;Index cannot be negative: &quot; + index)" to="(&quot;Index cannot be negative: &quot; % index)" />
    <mutant id="mutant_2716" viable="false" in="org.apache.commons.collections4.CollectionUtils.checkIndexBounds(int)" from="(&quot;Index cannot be negative: &quot; + index)" to="(&quot;Index cannot be negative: &quot; / index)" />
    <mutant id="mutant_1867" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((map) == null ? 0 : map.hashCode())" to="(total * 37) / ((map) == null ? 0 : map.hashCode())" />
    <mutant id="mutant_2715" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="(&quot;Unsupported object type: &quot; * (object.getClass().getName()))" />
    <mutant id="mutant_1868" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((map) == null ? 0 : map.hashCode())" to="(total * 37) - ((map) == null ? 0 : map.hashCode())" />
    <mutant id="mutant_2714" viable="true" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="object.getClass().getName()" />
    <mutant id="mutant_1865" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total % 37)" />
    <mutant id="mutant_2713" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="(&quot;Unsupported object type: &quot; % (object.getClass().getName()))" />
    <mutant id="mutant_1866" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((map) == null ? 0 : map.hashCode())" to="(total * 37) % ((map) == null ? 0 : map.hashCode())" />
    <mutant id="mutant_2712" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="(&quot;Unsupported object type: &quot; / (object.getClass().getName()))" />
    <mutant id="mutant_1863" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total / 37)" />
    <mutant id="mutant_2711" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="(&quot;Unsupported object type: &quot; - (object.getClass().getName()))" />
    <mutant id="mutant_1864" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total - 37)" />
    <mutant id="mutant_2710" viable="true" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Unsupported object type: &quot; + (object.getClass().getName()))" to="&quot;Unsupported object type: &quot;" />
    <mutant id="mutant_2709" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="(&quot;Entry does not exist: &quot; - i)" />
    <mutant id="mutant_2708" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="(&quot;Entry does not exist: &quot; * i)" />
    <mutant id="mutant_2707" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="(&quot;Entry does not exist: &quot; / i)" />
    <mutant id="mutant_1850" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Attempting to compare unknown object &quot; + unknownObj)" to="(&quot;Attempting to compare unknown object &quot; - unknownObj)" />
    <mutant id="mutant_1851" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Attempting to compare unknown object &quot; + unknownObj)" to="(&quot;Attempting to compare unknown object &quot; * unknownObj)" />
    <mutant id="mutant_1858" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Unknown unknownObjectBehavior: &quot; + (unknownObjectBehavior))" to="&quot;Unknown unknownObjectBehavior: &quot;" />
    <mutant id="mutant_2706" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="(&quot;Entry does not exist: &quot; % i)" />
    <mutant id="mutant_1859" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Unknown unknownObjectBehavior: &quot; + (unknownObjectBehavior))" to="(&quot;Unknown unknownObjectBehavior: &quot; / (unknownObjectBehavior))" />
    <mutant id="mutant_2705" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="i" />
    <mutant id="mutant_1856" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Unknown unknownObjectBehavior: &quot; + (unknownObjectBehavior))" to="(&quot;Unknown unknownObjectBehavior: &quot; * (unknownObjectBehavior))" />
    <mutant id="mutant_2704" viable="true" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="&quot;Entry does not exist: &quot;" />
    <mutant id="mutant_1857" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Unknown unknownObjectBehavior: &quot; + (unknownObjectBehavior))" to="unknownObjectBehavior" />
    <mutant id="mutant_2703" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="(&quot;Entry does not exist: &quot; - i)" />
    <mutant id="mutant_1854" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Unknown unknownObjectBehavior: &quot; + (unknownObjectBehavior))" to="(&quot;Unknown unknownObjectBehavior: &quot; % (unknownObjectBehavior))" />
    <mutant id="mutant_2702" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="(&quot;Entry does not exist: &quot; * i)" />
    <mutant id="mutant_1855" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Unknown unknownObjectBehavior: &quot; + (unknownObjectBehavior))" to="(&quot;Unknown unknownObjectBehavior: &quot; - (unknownObjectBehavior))" />
    <mutant id="mutant_2701" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="(&quot;Entry does not exist: &quot; / i)" />
    <mutant id="mutant_1852" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Attempting to compare unknown object &quot; + unknownObj)" to="unknownObj" />
    <mutant id="mutant_2700" viable="false" in="org.apache.commons.collections4.CollectionUtils.get(java.lang.Object,int)" from="(&quot;Entry does not exist: &quot; + i)" to="(&quot;Entry does not exist: &quot; % i)" />
    <mutant id="mutant_1853" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Attempting to compare unknown object &quot; + unknownObj)" to="&quot;Attempting to compare unknown object &quot;" />
    <mutant id="mutant_1849" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Attempting to compare unknown object &quot; + unknownObj)" to="(&quot;Attempting to compare unknown object &quot; % unknownObj)" />
    <mutant id="mutant_1840" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="(existingObj + &quot; not known to &quot;)" to="(existingObj * &quot; not known to &quot;)" />
    <mutant id="mutant_1847" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="((existingObj + &quot; not known to &quot;) + (this))" to="(existingObj + &quot; not known to &quot;)" />
    <mutant id="mutant_1848" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.compare(T,T)" from="(&quot;Attempting to compare unknown object &quot; + unknownObj)" to="(&quot;Attempting to compare unknown object &quot; / unknownObj)" />
    <mutant id="mutant_1845" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="((existingObj + &quot; not known to &quot;) + (this))" to="((existingObj + &quot; not known to &quot;) / (this))" />
    <mutant id="mutant_1846" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="((existingObj + &quot; not known to &quot;) + (this))" to="((existingObj + &quot; not known to &quot;) * (this))" />
    <mutant id="mutant_1843" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="((existingObj + &quot; not known to &quot;) + (this))" to="((existingObj + &quot; not known to &quot;) - (this))" />
    <mutant id="mutant_1844" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="((existingObj + &quot; not known to &quot;) + (this))" to="((existingObj + &quot; not known to &quot;) % (this))" />
    <mutant id="mutant_1841" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="(existingObj + &quot; not known to &quot;)" to="&quot; not known to &quot;" />
    <mutant id="mutant_1842" viable="false" in="org.apache.commons.collections4.comparators.FixedOrderComparator.addAsEqual(T,T)" from="((existingObj + &quot; not known to &quot;) + (this))" to="this" />
    <mutant id="mutant_1432" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(&quot;Index: &quot; + index)" to="index" />
    <mutant id="mutant_2764" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; / index)" />
    <mutant id="mutant_1433" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(&quot;Index: &quot; + index)" to="(&quot;Index: &quot; / index)" />
    <mutant id="mutant_2763" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must not be negative&quot;)" to="&quot; must not be negative&quot;" />
    <mutant id="mutant_1430" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(&quot;Index: &quot; + index)" to="(&quot;Index: &quot; % index)" />
    <mutant id="mutant_2762" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must not be negative&quot;)" to="(&quot;Index &quot; + index)" />
    <mutant id="mutant_1431" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(&quot;Index: &quot; + index)" to="&quot;Index: &quot;" />
    <mutant id="mutant_2761" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must not be negative&quot;)" to="((&quot;Index &quot; + index) % &quot; must not be negative&quot;)" />
    <mutant id="mutant_2760" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must not be negative&quot;)" to="((&quot;Index &quot; + index) * &quot; must not be negative&quot;)" />
    <mutant id="mutant_1438" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="((&quot;Index: &quot; + index) % &quot;, Size: &quot;)" />
    <mutant id="mutant_1439" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="((&quot;Index: &quot; + index) * &quot;, Size: &quot;)" />
    <mutant id="mutant_2769" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="index" />
    <mutant id="mutant_1436" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="(&quot;Index: &quot; + index)" />
    <mutant id="mutant_2768" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="&quot;Index &quot;" />
    <mutant id="mutant_1437" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="&quot;, Size: &quot;" />
    <mutant id="mutant_2767" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; - index)" />
    <mutant id="mutant_1434" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="((&quot;Index: &quot; + index) - &quot;, Size: &quot;)" />
    <mutant id="mutant_2766" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; % index)" />
    <mutant id="mutant_1435" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="((&quot;Index: &quot; + index) / &quot;, Size: &quot;)" />
    <mutant id="mutant_2765" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; * index)" />
    <mutant id="mutant_1421" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="(index + 1)" to="(index % 1)" />
    <mutant id="mutant_2753" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; * index)" />
    <mutant id="mutant_1422" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.previousKey(java.lang.Object)" from="(index - 1)" to="1" />
    <mutant id="mutant_2752" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; / index)" />
    <mutant id="mutant_2751" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;negative size: &quot; + listSize)" to="(&quot;negative size: &quot; / listSize)" />
    <mutant id="mutant_1420" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="(index + 1)" to="index" />
    <mutant id="mutant_2750" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;negative size: &quot; + listSize)" to="(&quot;negative size: &quot; * listSize)" />
    <mutant id="mutant_1429" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(&quot;Index: &quot; + index)" to="(&quot;Index: &quot; - index)" />
    <mutant id="mutant_1427" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.previousKey(java.lang.Object)" from="(index - 1)" to="(index % 1)" />
    <mutant id="mutant_2759" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must not be negative&quot;)" to="((&quot;Index &quot; + index) - &quot; must not be negative&quot;)" />
    <mutant id="mutant_1428" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(&quot;Index: &quot; + index)" to="(&quot;Index: &quot; * index)" />
    <mutant id="mutant_2758" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must not be negative&quot;)" to="((&quot;Index &quot; + index) / &quot; must not be negative&quot;)" />
    <mutant id="mutant_1425" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.previousKey(java.lang.Object)" from="(index - 1)" to="(index + 1)" />
    <mutant id="mutant_2757" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="index" />
    <mutant id="mutant_1426" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.previousKey(java.lang.Object)" from="(index - 1)" to="index" />
    <mutant id="mutant_2756" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="&quot;Index &quot;" />
    <mutant id="mutant_1423" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.previousKey(java.lang.Object)" from="(index - 1)" to="(index * 1)" />
    <mutant id="mutant_2755" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; - index)" />
    <mutant id="mutant_1424" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.previousKey(java.lang.Object)" from="(index - 1)" to="(index / 1)" />
    <mutant id="mutant_2754" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;Index &quot; + index)" to="(&quot;Index &quot; % index)" />
    <mutant id="mutant_1410" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="((size()) - 1)" to="((size()) / 1)" />
    <mutant id="mutant_1894" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (counter)" to="(total * 37) * (counter)" />
    <mutant id="mutant_2742" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1) / (size)" to="(((list.size()) + (size)) - 1) - (size)" />
    <mutant id="mutant_1411" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="((size()) - 1)" to="((size()) + 1)" />
    <mutant id="mutant_1895" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (counter)" to="(total * 37) / (counter)" />
    <mutant id="mutant_2741" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1) / (size)" to="(((list.size()) + (size)) - 1) + (size)" />
    <mutant id="mutant_1892" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (counter)" to="(total * 37) - (counter)" />
    <mutant id="mutant_2740" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1) / (size)" to="(((list.size()) + (size)) - 1) * (size)" />
    <mutant id="mutant_1893" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (counter)" to="total * 37" />
    <mutant id="mutant_1890" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (counter)" to="(total * 37) % (counter)" />
    <mutant id="mutant_1891" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + (counter)" to="counter" />
    <mutant id="mutant_1418" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="(index + 1)" to="(index - 1)" />
    <mutant id="mutant_1419" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="(index + 1)" to="(index / 1)" />
    <mutant id="mutant_2749" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;negative size: &quot; + listSize)" to="listSize" />
    <mutant id="mutant_1416" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="(index + 1)" to="1" />
    <mutant id="mutant_2748" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;negative size: &quot; + listSize)" to="&quot;negative size: &quot;" />
    <mutant id="mutant_1417" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="(index + 1)" to="(index * 1)" />
    <mutant id="mutant_2747" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;negative size: &quot; + listSize)" to="(&quot;negative size: &quot; - listSize)" />
    <mutant id="mutant_1414" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="((size()) - 1)" to="((size()) % 1)" />
    <mutant id="mutant_1898" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total + 37)" />
    <mutant id="mutant_2746" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(&quot;negative size: &quot; + listSize)" to="(&quot;negative size: &quot; % listSize)" />
    <mutant id="mutant_1415" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="((size()) - 1)" to="((size()) * 1)" />
    <mutant id="mutant_1899" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total / 37)" />
    <mutant id="mutant_2745" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1) / (size)" to="size" />
    <mutant id="mutant_1412" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="((size()) - 1)" to="(size())" />
    <mutant id="mutant_1896" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="total" />
    <mutant id="mutant_2744" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1) / (size)" to="(((list.size()) + (size)) - 1) % (size)" />
    <mutant id="mutant_1413" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.nextKey(java.lang.Object)" from="((size()) - 1)" to="1" />
    <mutant id="mutant_1897" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="37" />
    <mutant id="mutant_2743" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1) / (size)" to="((list.size()) + (size)) - 1" />
    <mutant id="mutant_1409" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.lastKey()" from="((size()) - 1)" to="((size()) * 1)" />
    <mutant id="mutant_1883" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())" to="(total * 37) % ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())" />
    <mutant id="mutant_2731" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="((list.size()) + (size))" to="(list.size())" />
    <mutant id="mutant_1400" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) * &quot;]&quot;" />
    <mutant id="mutant_1884" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="total" />
    <mutant id="mutant_2730" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="((list.size()) + (size))" to="((list.size()) % (size))" />
    <mutant id="mutant_1881" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())" to="total * 37" />
    <mutant id="mutant_1882" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())" to="(unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode()" />
    <mutant id="mutant_1880" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37) + ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())" to="(total * 37) - ((unknownObjectBehavior) == null ? 0 : unknownObjectBehavior.hashCode())" />
    <mutant id="mutant_1407" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.lastKey()" from="((size()) - 1)" to="1" />
    <mutant id="mutant_2739" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1)" to="(((list.size()) + (size)) + 1)" />
    <mutant id="mutant_1408" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.lastKey()" from="((size()) - 1)" to="((size()) % 1)" />
    <mutant id="mutant_2738" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1)" to="(((list.size()) + (size)) % 1)" />
    <mutant id="mutant_1405" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.lastKey()" from="((size()) - 1)" to="((size()) + 1)" />
    <mutant id="mutant_1889" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total % 37)" />
    <mutant id="mutant_2737" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1)" to="(((list.size()) + (size)) / 1)" />
    <mutant id="mutant_1406" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.lastKey()" from="((size()) - 1)" to="size()" />
    <mutant id="mutant_2736" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1)" to="((list.size()) + (size))" />
    <mutant id="mutant_1403" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())" />
    <mutant id="mutant_1887" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total / 37)" />
    <mutant id="mutant_2735" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1)" to="(((list.size()) + (size)) * 1)" />
    <mutant id="mutant_1404" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.lastKey()" from="((size()) - 1)" to="((size()) / 1)" />
    <mutant id="mutant_1888" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total - 37)" />
    <mutant id="mutant_2734" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="(((list.size()) + (size)) - 1)" to="1" />
    <mutant id="mutant_1401" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_1885" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="37" />
    <mutant id="mutant_2733" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="((list.size()) + (size))" to="(size)" />
    <mutant id="mutant_1402" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) / &quot;]&quot;" />
    <mutant id="mutant_1886" viable="true" in="org.apache.commons.collections4.comparators.FixedOrderComparator.hashCode()" from="(total * 37)" to="(total + 37)" />
    <mutant id="mutant_2732" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.size()" from="((list.size()) + (size))" to="((list.size()) - (size))" />
    <mutant id="mutant_602" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(&quot;InvokerTransformer: The method \'&quot; - (iMethodName))" />
    <mutant id="mutant_603" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(&quot;InvokerTransformer: The method \'&quot; / (iMethodName))" />
    <mutant id="mutant_604" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(iMethodName)" />
    <mutant id="mutant_605" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="&quot;InvokerTransformer: The method \'&quot;" />
    <mutant id="mutant_600" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(&quot;InvokerTransformer: The method \'&quot; * (iMethodName))" />
    <mutant id="mutant_601" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(&quot;InvokerTransformer: The method \'&quot; % (iMethodName))" />
    <mutant id="mutant_1480" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="((Long.MAX_VALUE) - (timeToLiveMillis))" to="((Long.MAX_VALUE) * (timeToLiveMillis))" />
    <mutant id="mutant_606" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) - &quot;\' on \'&quot;)" />
    <mutant id="mutant_607" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) * &quot;\' on \'&quot;)" />
    <mutant id="mutant_608" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" />
    <mutant id="mutant_609" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) % &quot;\' on \'&quot;)" />
    <mutant id="mutant_1476" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="((Long.MAX_VALUE) - (timeToLiveMillis))" to="((Long.MAX_VALUE) % (timeToLiveMillis))" />
    <mutant id="mutant_2323" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 + 1" to="end1 * 1" />
    <mutant id="mutant_1477" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="((Long.MAX_VALUE) - (timeToLiveMillis))" to="(Long.MAX_VALUE)" />
    <mutant id="mutant_2324" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 + 1" to="end1 / 1" />
    <mutant id="mutant_1474" viable="false" in="org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory.create()" from="(&quot;Cannot instantiate class: &quot; + (clazz))" to="(&quot;Cannot instantiate class: &quot; % (clazz))" />
    <mutant id="mutant_2321" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 + 1" to="end1 % 1" />
    <mutant id="mutant_1475" viable="false" in="org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory.create()" from="(&quot;Cannot instantiate class: &quot; + (clazz))" to="clazz" />
    <mutant id="mutant_2322" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 + 1" to="1" />
    <mutant id="mutant_1472" viable="false" in="org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory.create()" from="(&quot;Cannot instantiate class: &quot; + (clazz))" to="(&quot;Cannot instantiate class: &quot; / (clazz))" />
    <mutant id="mutant_1473" viable="false" in="org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory.create()" from="(&quot;Cannot instantiate class: &quot; + (clazz))" to="(&quot;Cannot instantiate class: &quot; - (clazz))" />
    <mutant id="mutant_2320" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="(1 / offset)" />
    <mutant id="mutant_1470" viable="false" in="org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory.create()" from="(&quot;Cannot instantiate class: &quot; + (clazz))" to="(&quot;Cannot instantiate class: &quot; * (clazz))" />
    <mutant id="mutant_1471" viable="true" in="org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory.create()" from="(&quot;Cannot instantiate class: &quot; + (clazz))" to="&quot;Cannot instantiate class: &quot;" />
    <mutant id="mutant_2329" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="k + offset" to="k % offset" />
    <mutant id="mutant_2327" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="k + offset" to="k" />
    <mutant id="mutant_2328" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="k + offset" to="k - offset" />
    <mutant id="mutant_1478" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="((Long.MAX_VALUE) - (timeToLiveMillis))" to="(timeToLiveMillis)" />
    <mutant id="mutant_2325" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 + 1" to="end1 - 1" />
    <mutant id="mutant_1479" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="((Long.MAX_VALUE) - (timeToLiveMillis))" to="((Long.MAX_VALUE) / (timeToLiveMillis))" />
    <mutant id="mutant_2326" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="end1 + 1" to="end1" />
    <mutant id="mutant_613" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) - (input.getClass()))" />
    <mutant id="mutant_614" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) * (input.getClass()))" />
    <mutant id="mutant_615" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" />
    <mutant id="mutant_616" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) % (input.getClass()))" />
    <mutant id="mutant_610" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) / &quot;\' on \'&quot;)" />
    <mutant id="mutant_611" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="&quot;\' on \'&quot;" />
    <mutant id="mutant_612" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) / (input.getClass()))" />
    <mutant id="mutant_617" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(input.getClass())" />
    <mutant id="mutant_618" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' does not exist&quot;)" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) * &quot;\' does not exist&quot;)" />
    <mutant id="mutant_619" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' does not exist&quot;)" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" />
    <mutant id="mutant_1465" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(indexOf(entry.getKey())) + 1" to="1" />
    <mutant id="mutant_2312" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="offset" />
    <mutant id="mutant_2797" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode)" to="(31 + hashCode)" />
    <mutant id="mutant_1466" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(indexOf(entry.getKey())) + 1" to="(indexOf(entry.getKey())) - 1" />
    <mutant id="mutant_2313" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="(1 * offset)" />
    <mutant id="mutant_2796" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode)" to="hashCode" />
    <mutant id="mutant_1463" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) - (insertOrder.size()))" />
    <mutant id="mutant_2310" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="(1 - offset)" />
    <mutant id="mutant_2795" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode)" to="(31 % hashCode)" />
    <mutant id="mutant_1464" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(indexOf(entry.getKey())) + 1" to="(indexOf(entry.getKey())) / 1" />
    <mutant id="mutant_2311" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="(1 % offset)" />
    <mutant id="mutant_2794" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode)" to="(31 - hashCode)" />
    <mutant id="mutant_1461" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) % (insertOrder.size()))" />
    <mutant id="mutant_2793" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(start + (size))" to="size" />
    <mutant id="mutant_1462" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) * (insertOrder.size()))" />
    <mutant id="mutant_2792" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(start + (size))" to="start" />
    <mutant id="mutant_2791" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(start + (size))" to="(start * (size))" />
    <mutant id="mutant_1460" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="insertOrder.size()" />
    <mutant id="mutant_2790" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(start + (size))" to="(start % (size))" />
    <mutant id="mutant_2318" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="offset" />
    <mutant id="mutant_2319" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="(1 * offset)" />
    <mutant id="mutant_1469" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(indexOf(entry.getKey())) + 1" to="indexOf(entry.getKey())" />
    <mutant id="mutant_2316" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="(1 - offset)" />
    <mutant id="mutant_2317" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="(1 % offset)" />
    <mutant id="mutant_1467" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(indexOf(entry.getKey())) + 1" to="(indexOf(entry.getKey())) * 1" />
    <mutant id="mutant_2314" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="(1 / offset)" />
    <mutant id="mutant_2799" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode)" to="31" />
    <mutant id="mutant_1468" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(indexOf(entry.getKey())) + 1" to="(indexOf(entry.getKey())) % 1" />
    <mutant id="mutant_2315" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="1" />
    <mutant id="mutant_2798" viable="true" in="org.apache.commons.collections4.ListUtils.hashCodeForList(java.util.Collection)" from="(31 * hashCode)" to="(31 / hashCode)" />
    <mutant id="mutant_624" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(&quot;InvokerTransformer: The method \'&quot; * (iMethodName))" />
    <mutant id="mutant_625" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(&quot;InvokerTransformer: The method \'&quot; % (iMethodName))" />
    <mutant id="mutant_626" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(&quot;InvokerTransformer: The method \'&quot; - (iMethodName))" />
    <mutant id="mutant_627" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(&quot;InvokerTransformer: The method \'&quot; / (iMethodName))" />
    <mutant id="mutant_620" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' does not exist&quot;)" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) / &quot;\' does not exist&quot;)" />
    <mutant id="mutant_621" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' does not exist&quot;)" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) - &quot;\' does not exist&quot;)" />
    <mutant id="mutant_622" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' does not exist&quot;)" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) % &quot;\' does not exist&quot;)" />
    <mutant id="mutant_623" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' does not exist&quot;)" to="&quot;\' does not exist&quot;" />
    <mutant id="mutant_628" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(iMethodName)" />
    <mutant id="mutant_629" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="&quot;InvokerTransformer: The method \'&quot;" />
    <mutant id="mutant_1454" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="(&quot;Index: &quot; + index)" />
    <mutant id="mutant_2301" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="sum + 1" to="sum" />
    <mutant id="mutant_2786" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="index * (size)" to="size" />
    <mutant id="mutant_1455" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="&quot;, Size: &quot;" />
    <mutant id="mutant_2302" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="sum + 1" to="sum / 1" />
    <mutant id="mutant_2785" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="index * (size)" to="index % (size)" />
    <mutant id="mutant_1452" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="((&quot;Index: &quot; + index) - &quot;, Size: &quot;)" />
    <mutant id="mutant_2784" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="index * (size)" to="index" />
    <mutant id="mutant_1453" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="((&quot;Index: &quot; + index) / &quot;, Size: &quot;)" />
    <mutant id="mutant_2300" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="sum + 1" to="sum * 1" />
    <mutant id="mutant_2783" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="index * (size)" to="index - (size)" />
    <mutant id="mutant_1450" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(&quot;Index: &quot; + index)" to="index" />
    <mutant id="mutant_2782" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="index * (size)" to="index + (size)" />
    <mutant id="mutant_1451" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(&quot;Index: &quot; + index)" to="(&quot;Index: &quot; / index)" />
    <mutant id="mutant_2781" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) + listSize)" to="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) / listSize)" />
    <mutant id="mutant_2780" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) + listSize)" to="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) * listSize)" />
    <mutant id="mutant_2309" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(1 + offset)" to="1" />
    <mutant id="mutant_2307" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((sum % 2) == 0 ? sum : sum + 1) / 2" to="((sum % 2) == 0 ? sum : sum + 1) - 2" />
    <mutant id="mutant_2308" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((sum % 2) == 0 ? sum : sum + 1) / 2" to="((sum % 2) == 0 ? sum : sum + 1) + 2" />
    <mutant id="mutant_1458" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" />
    <mutant id="mutant_2305" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((sum % 2) == 0 ? sum : sum + 1) / 2" to="((sum % 2) == 0 ? sum : sum + 1) % 2" />
    <mutant id="mutant_1459" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) / (insertOrder.size()))" />
    <mutant id="mutant_2306" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((sum % 2) == 0 ? sum : sum + 1) / 2" to="((sum % 2) == 0 ? sum : sum + 1) * 2" />
    <mutant id="mutant_2789" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(start + (size))" to="(start / (size))" />
    <mutant id="mutant_1456" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="((&quot;Index: &quot; + index) % &quot;, Size: &quot;)" />
    <mutant id="mutant_2303" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((sum % 2) == 0 ? sum : sum + 1) / 2" to="(sum % 2) == 0 ? sum : sum + 1" />
    <mutant id="mutant_2788" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(start + (size))" to="(start - (size))" />
    <mutant id="mutant_1457" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" to="((&quot;Index: &quot; + index) * &quot;, Size: &quot;)" />
    <mutant id="mutant_2304" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((sum % 2) == 0 ? sum : sum + 1) / 2" to="2" />
    <mutant id="mutant_2787" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="index * (size)" to="index / (size)" />
    <mutant id="mutant_635" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="&quot;\' on \'&quot;" />
    <mutant id="mutant_636" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) / (input.getClass()))" />
    <mutant id="mutant_637" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) - (input.getClass()))" />
    <mutant id="mutant_638" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) * (input.getClass()))" />
    <mutant id="mutant_631" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) * &quot;\' on \'&quot;)" />
    <mutant id="mutant_632" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" />
    <mutant id="mutant_633" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) % &quot;\' on \'&quot;)" />
    <mutant id="mutant_634" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) / &quot;\' on \'&quot;)" />
    <mutant id="mutant_639" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" />
    <mutant id="mutant_1443" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) % (insertOrder.size()))" />
    <mutant id="mutant_2775" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must be less than size &quot;)" to="((&quot;Index &quot; + index) - &quot; must be less than size &quot;)" />
    <mutant id="mutant_1444" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) * (insertOrder.size()))" />
    <mutant id="mutant_2774" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must be less than size &quot;)" to="(&quot;Index &quot; + index)" />
    <mutant id="mutant_1441" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) / (insertOrder.size()))" />
    <mutant id="mutant_2773" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must be less than size &quot;)" to="&quot; must be less than size &quot;" />
    <mutant id="mutant_1442" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="insertOrder.size()" />
    <mutant id="mutant_2772" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must be less than size &quot;)" to="((&quot;Index &quot; + index) * &quot; must be less than size &quot;)" />
    <mutant id="mutant_2771" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must be less than size &quot;)" to="((&quot;Index &quot; + index) / &quot; must be less than size &quot;)" />
    <mutant id="mutant_1440" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="((&quot;Index: &quot; + index) + &quot;, Size: &quot;)" />
    <mutant id="mutant_2770" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="((&quot;Index &quot; + index) + &quot; must be less than size &quot;)" to="((&quot;Index &quot; + index) % &quot; must be less than size &quot;)" />
    <mutant id="mutant_1449" viable="true" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(&quot;Index: &quot; + index)" to="&quot;Index: &quot;" />
    <mutant id="mutant_630" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) - &quot;\' on \'&quot;)" />
    <mutant id="mutant_1447" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(&quot;Index: &quot; + index)" to="(&quot;Index: &quot; - index)" />
    <mutant id="mutant_2779" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) + listSize)" to="listSize" />
    <mutant id="mutant_1448" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(&quot;Index: &quot; + index)" to="(&quot;Index: &quot; % index)" />
    <mutant id="mutant_2778" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) + listSize)" to="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) % listSize)" />
    <mutant id="mutant_1445" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.put(int,K,V)" from="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) + (insertOrder.size()))" to="(((&quot;Index: &quot; + index) + &quot;, Size: &quot;) - (insertOrder.size()))" />
    <mutant id="mutant_2777" viable="true" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) + listSize)" to="((&quot;Index &quot; + index) + &quot; must be less than size &quot;)" />
    <mutant id="mutant_1446" viable="false" in="org.apache.commons.collections4.map.ListOrderedMap.putAll(int,java.util.Map)" from="(&quot;Index: &quot; + index)" to="(&quot;Index: &quot; * index)" />
    <mutant id="mutant_2776" viable="false" in="org.apache.commons.collections4.ListUtils$Partition.get(int)" from="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) + listSize)" to="(((&quot;Index &quot; + index) + &quot; must be less than size &quot;) - listSize)" />
    <mutant id="mutant_646" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' cannot be accessed&quot;)" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) - &quot;\' cannot be accessed&quot;)" />
    <mutant id="mutant_647" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' cannot be accessed&quot;)" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) % &quot;\' cannot be accessed&quot;)" />
    <mutant id="mutant_648" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(&quot;InvokerTransformer: The method \'&quot; * (iMethodName))" />
    <mutant id="mutant_649" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(&quot;InvokerTransformer: The method \'&quot; % (iMethodName))" />
    <mutant id="mutant_642" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' cannot be accessed&quot;)" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) / &quot;\' cannot be accessed&quot;)" />
    <mutant id="mutant_643" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' cannot be accessed&quot;)" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" />
    <mutant id="mutant_644" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' cannot be accessed&quot;)" to="&quot;\' cannot be accessed&quot;" />
    <mutant id="mutant_645" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' cannot be accessed&quot;)" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) * &quot;\' cannot be accessed&quot;)" />
    <mutant id="mutant_2370" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="((x - start1) - start2)" />
    <mutant id="mutant_1040" viable="false" in="org.apache.commons.collections4.map.Flat3Map.toString()" from="(&quot;Invalid map index: &quot; + (size))" to="(&quot;Invalid map index: &quot; / (size))" />
    <mutant id="mutant_2371" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="start2" />
    <mutant id="mutant_1036" viable="true" in="org.apache.commons.collections4.map.Flat3Map.hashCode()" from="(&quot;Invalid map index: &quot; + (size))" to="&quot;Invalid map index: &quot;" />
    <mutant id="mutant_2367" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="(x + start1)" />
    <mutant id="mutant_1037" viable="false" in="org.apache.commons.collections4.map.Flat3Map.hashCode()" from="(&quot;Invalid map index: &quot; + (size))" to="(&quot;Invalid map index: &quot; - (size))" />
    <mutant id="mutant_2368" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="x" />
    <mutant id="mutant_1034" viable="false" in="org.apache.commons.collections4.map.Flat3Map.hashCode()" from="(&quot;Invalid map index: &quot; + (size))" to="(&quot;Invalid map index: &quot; / (size))" />
    <mutant id="mutant_2365" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="start1" />
    <mutant id="mutant_1035" viable="false" in="org.apache.commons.collections4.map.Flat3Map.hashCode()" from="(&quot;Invalid map index: &quot; + (size))" to="size" />
    <mutant id="mutant_2366" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="(x % start1)" />
    <mutant id="mutant_1032" viable="false" in="org.apache.commons.collections4.map.Flat3Map.hashCode()" from="(&quot;Invalid map index: &quot; + (size))" to="(&quot;Invalid map index: &quot; % (size))" />
    <mutant id="mutant_2363" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="(x * start1)" />
    <mutant id="mutant_1033" viable="false" in="org.apache.commons.collections4.map.Flat3Map.hashCode()" from="(&quot;Invalid map index: &quot; + (size))" to="(&quot;Invalid map index: &quot; * (size))" />
    <mutant id="mutant_2364" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(x - start1)" to="(x / start1)" />
    <mutant id="mutant_1030" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) / &quot;]&quot;" />
    <mutant id="mutant_2361" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vDown[(i - 1)]) + 1" to="(vDown[(i - 1)]) % 1" />
    <mutant id="mutant_1031" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) - &quot;]&quot;" />
    <mutant id="mutant_2362" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vDown[(i - 1)]) + 1" to="(vDown[(i - 1)]) * 1" />
    <mutant id="mutant_640" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) % (input.getClass()))" />
    <mutant id="mutant_641" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(input.getClass())" />
    <mutant id="mutant_1038" viable="false" in="org.apache.commons.collections4.map.Flat3Map.toString()" from="(&quot;Invalid map index: &quot; + (size))" to="(&quot;Invalid map index: &quot; % (size))" />
    <mutant id="mutant_2369" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="((x - start1) + start2)" to="(x - start1)" />
    <mutant id="mutant_1039" viable="false" in="org.apache.commons.collections4.map.Flat3Map.toString()" from="(&quot;Invalid map index: &quot; + (size))" to="(&quot;Invalid map index: &quot; * (size))" />
    <mutant id="mutant_657" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) % &quot;\' on \'&quot;)" />
    <mutant id="mutant_658" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) / &quot;\' on \'&quot;)" />
    <mutant id="mutant_659" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="&quot;\' on \'&quot;" />
    <mutant id="mutant_653" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="&quot;InvokerTransformer: The method \'&quot;" />
    <mutant id="mutant_654" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) - &quot;\' on \'&quot;)" />
    <mutant id="mutant_655" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) * &quot;\' on \'&quot;)" />
    <mutant id="mutant_656" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" to="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" />
    <mutant id="mutant_2360" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vDown[(i - 1)]) + 1" to="(vDown[(i - 1)]) / 1" />
    <mutant id="mutant_1025" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) - (getValue()))" />
    <mutant id="mutant_2356" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_1026" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) % &quot;]&quot;" />
    <mutant id="mutant_2357" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vDown[(i - 1)]) + 1" to="vDown[(i - 1)]" />
    <mutant id="mutant_1023" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) * (getValue()))" />
    <mutant id="mutant_2354" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="i" />
    <mutant id="mutant_1024" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" />
    <mutant id="mutant_2355" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_1021" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(getValue())" />
    <mutant id="mutant_2352" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_1022" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) / (getValue()))" />
    <mutant id="mutant_2353" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="1" />
    <mutant id="mutant_2350" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1020" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue()))" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) % (getValue()))" />
    <mutant id="mutant_2351" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_650" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(&quot;InvokerTransformer: The method \'&quot; - (iMethodName))" />
    <mutant id="mutant_651" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(&quot;InvokerTransformer: The method \'&quot; / (iMethodName))" />
    <mutant id="mutant_652" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(&quot;InvokerTransformer: The method \'&quot; + (iMethodName))" to="(iMethodName)" />
    <mutant id="mutant_1029" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_1027" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())" />
    <mutant id="mutant_2358" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vDown[(i - 1)]) + 1" to="(vDown[(i - 1)]) - 1" />
    <mutant id="mutant_1028" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) + &quot;]&quot;" to="(((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;) + (getValue())) * &quot;]&quot;" />
    <mutant id="mutant_2359" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(vDown[(i - 1)]) + 1" to="1" />
    <mutant id="mutant_668" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' threw an exception&quot;)" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) / &quot;\' threw an exception&quot;)" />
    <mutant id="mutant_669" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' threw an exception&quot;)" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) - &quot;\' threw an exception&quot;)" />
    <mutant id="mutant_664" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) % (input.getClass()))" />
    <mutant id="mutant_665" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(input.getClass())" />
    <mutant id="mutant_666" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' threw an exception&quot;)" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" />
    <mutant id="mutant_667" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' threw an exception&quot;)" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) * &quot;\' threw an exception&quot;)" />
    <mutant id="mutant_1014" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (getKey())) % &quot;=&quot;)" />
    <mutant id="mutant_1498" viable="true" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="&quot;=&quot;" />
    <mutant id="mutant_2345" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_1015" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (getKey())) - &quot;=&quot;)" />
    <mutant id="mutant_1499" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (getKey())) % &quot;=&quot;)" />
    <mutant id="mutant_2346" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="1" />
    <mutant id="mutant_1012" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="&quot;Iterator[&quot;" />
    <mutant id="mutant_1496" viable="true" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="(&quot;Iterator[&quot; + (getKey()))" />
    <mutant id="mutant_2343" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_1013" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(getKey())" />
    <mutant id="mutant_1497" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (getKey())) * &quot;=&quot;)" />
    <mutant id="mutant_2344" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1010" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(&quot;Iterator[&quot; / (getKey()))" />
    <mutant id="mutant_1494" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (getKey())) - &quot;=&quot;)" />
    <mutant id="mutant_2341" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="i" />
    <mutant id="mutant_1011" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(&quot;Iterator[&quot; * (getKey()))" />
    <mutant id="mutant_1495" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (getKey())) / &quot;=&quot;)" />
    <mutant id="mutant_2342" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_1492" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(&quot;Iterator[&quot; % (getKey()))" />
    <mutant id="mutant_1493" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(&quot;Iterator[&quot; * (getKey()))" />
    <mutant id="mutant_2340" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="1" />
    <mutant id="mutant_660" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) / (input.getClass()))" />
    <mutant id="mutant_661" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) - (input.getClass()))" />
    <mutant id="mutant_662" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) * (input.getClass()))" />
    <mutant id="mutant_663" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="(((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass()))" to="((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;)" />
    <mutant id="mutant_1018" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="(&quot;Iterator[&quot; + (getKey()))" />
    <mutant id="mutant_2349" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_1019" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (getKey())) / &quot;=&quot;)" />
    <mutant id="mutant_1016" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="&quot;=&quot;" />
    <mutant id="mutant_2347" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="i" />
    <mutant id="mutant_1017" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="((&quot;Iterator[&quot; + (getKey())) + &quot;=&quot;)" to="((&quot;Iterator[&quot; + (getKey())) * &quot;=&quot;)" />
    <mutant id="mutant_2348" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_679" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(&quot;Cannot add Object \'&quot; + object)" to="(&quot;Cannot add Object \'&quot; % object)" />
    <mutant id="mutant_675" viable="false" in="org.apache.commons.collections4.multimap.AbstractMultiValuedMap(java.util.Map,java.lang.Class,int)" from="(&quot;Illegal Capacity: &quot; + initialCollectionCapacity)" to="(&quot;Illegal Capacity: &quot; - initialCollectionCapacity)" />
    <mutant id="mutant_676" viable="false" in="org.apache.commons.collections4.multimap.AbstractMultiValuedMap(java.util.Map,java.lang.Class,int)" from="(&quot;Illegal Capacity: &quot; + initialCollectionCapacity)" to="(&quot;Illegal Capacity: &quot; % initialCollectionCapacity)" />
    <mutant id="mutant_677" viable="false" in="org.apache.commons.collections4.multimap.AbstractMultiValuedMap(java.util.Map,java.lang.Class,int)" from="(&quot;Illegal Capacity: &quot; + initialCollectionCapacity)" to="(&quot;Illegal Capacity: &quot; * initialCollectionCapacity)" />
    <mutant id="mutant_678" viable="false" in="org.apache.commons.collections4.collection.PredicatedCollection.validate(E)" from="(&quot;Cannot add Object \'&quot; + object)" to="(&quot;Cannot add Object \'&quot; - object)" />
    <mutant id="mutant_1490" viable="true" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="&quot;Iterator[&quot;" />
    <mutant id="mutant_1491" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(&quot;Iterator[&quot; - (getKey()))" />
    <mutant id="mutant_1003" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.setValue(V)" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="(&quot;Invalid map index: &quot; % (nextIndex))" />
    <mutant id="mutant_1487" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="now + (timeToLiveMillis)" to="now - (timeToLiveMillis)" />
    <mutant id="mutant_2334" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_1004" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.setValue(V)" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="(&quot;Invalid map index: &quot; * (nextIndex))" />
    <mutant id="mutant_1488" viable="true" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(getKey())" />
    <mutant id="mutant_2335" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="1" />
    <mutant id="mutant_1001" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getValue()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="(&quot;Invalid map index: &quot; - (nextIndex))" />
    <mutant id="mutant_1485" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="now + (timeToLiveMillis)" to="now * (timeToLiveMillis)" />
    <mutant id="mutant_2332" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="k + offset" to="k / offset" />
    <mutant id="mutant_1002" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.setValue(V)" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="(&quot;Invalid map index: &quot; / (nextIndex))" />
    <mutant id="mutant_1486" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="now + (timeToLiveMillis)" to="timeToLiveMillis" />
    <mutant id="mutant_2333" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_1483" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="now + (timeToLiveMillis)" to="now" />
    <mutant id="mutant_2330" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="k + offset" to="k * offset" />
    <mutant id="mutant_1000" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.getValue()" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="&quot;Invalid map index: &quot;" />
    <mutant id="mutant_1484" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="now + (timeToLiveMillis)" to="now % (timeToLiveMillis)" />
    <mutant id="mutant_2331" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="k + offset" to="offset" />
    <mutant id="mutant_1481" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="((Long.MAX_VALUE) - (timeToLiveMillis))" to="((Long.MAX_VALUE) + (timeToLiveMillis))" />
    <mutant id="mutant_1482" viable="true" in="org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(K,V)" from="now + (timeToLiveMillis)" to="now / (timeToLiveMillis)" />
    <mutant id="mutant_671" viable="false" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' threw an exception&quot;)" to="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) % &quot;\' threw an exception&quot;)" />
    <mutant id="mutant_672" viable="false" in="org.apache.commons.collections4.multimap.AbstractMultiValuedMap(java.util.Map,java.lang.Class,int)" from="(&quot;Illegal Capacity: &quot; + initialCollectionCapacity)" to="(&quot;Illegal Capacity: &quot; / initialCollectionCapacity)" />
    <mutant id="mutant_673" viable="true" in="org.apache.commons.collections4.multimap.AbstractMultiValuedMap(java.util.Map,java.lang.Class,int)" from="(&quot;Illegal Capacity: &quot; + initialCollectionCapacity)" to="&quot;Illegal Capacity: &quot;" />
    <mutant id="mutant_1009" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(&quot;Iterator[&quot; % (getKey()))" />
    <mutant id="mutant_674" viable="false" in="org.apache.commons.collections4.multimap.AbstractMultiValuedMap(java.util.Map,java.lang.Class,int)" from="(&quot;Illegal Capacity: &quot; + initialCollectionCapacity)" to="initialCollectionCapacity" />
    <mutant id="mutant_1007" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.setValue(V)" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="(&quot;Invalid map index: &quot; - (nextIndex))" />
    <mutant id="mutant_2338" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_1008" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(&quot;Iterator[&quot; - (getKey()))" />
    <mutant id="mutant_2339" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_1005" viable="false" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.setValue(V)" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="nextIndex" />
    <mutant id="mutant_1489" viable="false" in="org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator.toString()" from="(&quot;Iterator[&quot; + (getKey()))" to="(&quot;Iterator[&quot; / (getKey()))" />
    <mutant id="mutant_2336" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="i" />
    <mutant id="mutant_670" viable="true" in="org.apache.commons.collections4.functors.InvokerTransformer.transform(java.lang.Object)" from="((((&quot;InvokerTransformer: The method \'&quot; + (iMethodName)) + &quot;\' on \'&quot;) + (input.getClass())) + &quot;\' threw an exception&quot;)" to="&quot;\' threw an exception&quot;" />
    <mutant id="mutant_1006" viable="true" in="org.apache.commons.collections4.map.Flat3Map$FlatMapIterator.setValue(V)" from="(&quot;Invalid map index: &quot; + (nextIndex))" to="&quot;Invalid map index: &quot;" />
    <mutant id="mutant_2337" viable="true" in="org.apache.commons.collections4.sequence.SequencesComparator.getMiddleSnake(int,int,int,int)" from="(i - 1)" to="(i * 1)" />
  </mutants>
</mutation>
